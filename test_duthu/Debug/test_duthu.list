
test_duthu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007004  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000494  08007118  08007118  00017118  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075ac  080075ac  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  080075ac  080075ac  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080075ac  080075ac  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075ac  080075ac  000175ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075b0  080075b0  000175b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080075b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  200001dc  08007790  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000330  08007790  00020330  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000102d9  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002426  00000000  00000000  000304de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee0  00000000  00000000  00032908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000df0  00000000  00000000  000337e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019536  00000000  00000000  000345d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011025  00000000  00000000  0004db0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009101f  00000000  00000000  0005eb33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000efb52  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000509c  00000000  00000000  000efba8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	080070fc 	.word	0x080070fc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	080070fc 	.word	0x080070fc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__gesf2>:
 8000b28:	f04f 3cff 	mov.w	ip, #4294967295
 8000b2c:	e006      	b.n	8000b3c <__cmpsf2+0x4>
 8000b2e:	bf00      	nop

08000b30 <__lesf2>:
 8000b30:	f04f 0c01 	mov.w	ip, #1
 8000b34:	e002      	b.n	8000b3c <__cmpsf2+0x4>
 8000b36:	bf00      	nop

08000b38 <__cmpsf2>:
 8000b38:	f04f 0c01 	mov.w	ip, #1
 8000b3c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b40:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b44:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b4c:	bf18      	it	ne
 8000b4e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b52:	d011      	beq.n	8000b78 <__cmpsf2+0x40>
 8000b54:	b001      	add	sp, #4
 8000b56:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000b5a:	bf18      	it	ne
 8000b5c:	ea90 0f01 	teqne	r0, r1
 8000b60:	bf58      	it	pl
 8000b62:	ebb2 0003 	subspl.w	r0, r2, r3
 8000b66:	bf88      	it	hi
 8000b68:	17c8      	asrhi	r0, r1, #31
 8000b6a:	bf38      	it	cc
 8000b6c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000b70:	bf18      	it	ne
 8000b72:	f040 0001 	orrne.w	r0, r0, #1
 8000b76:	4770      	bx	lr
 8000b78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b7c:	d102      	bne.n	8000b84 <__cmpsf2+0x4c>
 8000b7e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000b82:	d105      	bne.n	8000b90 <__cmpsf2+0x58>
 8000b84:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000b88:	d1e4      	bne.n	8000b54 <__cmpsf2+0x1c>
 8000b8a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000b8e:	d0e1      	beq.n	8000b54 <__cmpsf2+0x1c>
 8000b90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_cfrcmple>:
 8000b98:	4684      	mov	ip, r0
 8000b9a:	4608      	mov	r0, r1
 8000b9c:	4661      	mov	r1, ip
 8000b9e:	e7ff      	b.n	8000ba0 <__aeabi_cfcmpeq>

08000ba0 <__aeabi_cfcmpeq>:
 8000ba0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ba2:	f7ff ffc9 	bl	8000b38 <__cmpsf2>
 8000ba6:	2800      	cmp	r0, #0
 8000ba8:	bf48      	it	mi
 8000baa:	f110 0f00 	cmnmi.w	r0, #0
 8000bae:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000bb0 <__aeabi_fcmpeq>:
 8000bb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb4:	f7ff fff4 	bl	8000ba0 <__aeabi_cfcmpeq>
 8000bb8:	bf0c      	ite	eq
 8000bba:	2001      	moveq	r0, #1
 8000bbc:	2000      	movne	r0, #0
 8000bbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_fcmplt>:
 8000bc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc8:	f7ff ffea 	bl	8000ba0 <__aeabi_cfcmpeq>
 8000bcc:	bf34      	ite	cc
 8000bce:	2001      	movcc	r0, #1
 8000bd0:	2000      	movcs	r0, #0
 8000bd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_fcmple>:
 8000bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bdc:	f7ff ffe0 	bl	8000ba0 <__aeabi_cfcmpeq>
 8000be0:	bf94      	ite	ls
 8000be2:	2001      	movls	r0, #1
 8000be4:	2000      	movhi	r0, #0
 8000be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bea:	bf00      	nop

08000bec <__aeabi_fcmpge>:
 8000bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf0:	f7ff ffd2 	bl	8000b98 <__aeabi_cfrcmple>
 8000bf4:	bf94      	ite	ls
 8000bf6:	2001      	movls	r0, #1
 8000bf8:	2000      	movhi	r0, #0
 8000bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bfe:	bf00      	nop

08000c00 <__aeabi_fcmpgt>:
 8000c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c04:	f7ff ffc8 	bl	8000b98 <__aeabi_cfrcmple>
 8000c08:	bf34      	ite	cc
 8000c0a:	2001      	movcc	r0, #1
 8000c0c:	2000      	movcs	r0, #0
 8000c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c12:	bf00      	nop

08000c14 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af02      	add	r7, sp, #8
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	f023 030f 	bic.w	r3, r3, #15
 8000c24:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	011b      	lsls	r3, r3, #4
 8000c2a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000c2c:	7bfb      	ldrb	r3, [r7, #15]
 8000c2e:	f043 030c 	orr.w	r3, r3, #12
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000c36:	7bfb      	ldrb	r3, [r7, #15]
 8000c38:	f043 0308 	orr.w	r3, r3, #8
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000c40:	7bbb      	ldrb	r3, [r7, #14]
 8000c42:	f043 030c 	orr.w	r3, r3, #12
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000c4a:	7bbb      	ldrb	r3, [r7, #14]
 8000c4c:	f043 0308 	orr.w	r3, r3, #8
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000c54:	f107 0208 	add.w	r2, r7, #8
 8000c58:	2364      	movs	r3, #100	; 0x64
 8000c5a:	9300      	str	r3, [sp, #0]
 8000c5c:	2304      	movs	r3, #4
 8000c5e:	214e      	movs	r1, #78	; 0x4e
 8000c60:	4803      	ldr	r0, [pc, #12]	; (8000c70 <lcd_send_cmd+0x5c>)
 8000c62:	f001 ffc5 	bl	8002bf0 <HAL_I2C_Master_Transmit>
}
 8000c66:	bf00      	nop
 8000c68:	3710      	adds	r7, #16
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000244 	.word	0x20000244

08000c74 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af02      	add	r7, sp, #8
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	f023 030f 	bic.w	r3, r3, #15
 8000c84:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	011b      	lsls	r3, r3, #4
 8000c8a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000c8c:	7bfb      	ldrb	r3, [r7, #15]
 8000c8e:	f043 030d 	orr.w	r3, r3, #13
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000c96:	7bfb      	ldrb	r3, [r7, #15]
 8000c98:	f043 0309 	orr.w	r3, r3, #9
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000ca0:	7bbb      	ldrb	r3, [r7, #14]
 8000ca2:	f043 030d 	orr.w	r3, r3, #13
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000caa:	7bbb      	ldrb	r3, [r7, #14]
 8000cac:	f043 0309 	orr.w	r3, r3, #9
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000cb4:	f107 0208 	add.w	r2, r7, #8
 8000cb8:	2364      	movs	r3, #100	; 0x64
 8000cba:	9300      	str	r3, [sp, #0]
 8000cbc:	2304      	movs	r3, #4
 8000cbe:	214e      	movs	r1, #78	; 0x4e
 8000cc0:	4803      	ldr	r0, [pc, #12]	; (8000cd0 <lcd_send_data+0x5c>)
 8000cc2:	f001 ff95 	bl	8002bf0 <HAL_I2C_Master_Transmit>
}
 8000cc6:	bf00      	nop
 8000cc8:	3710      	adds	r7, #16
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000244 	.word	0x20000244

08000cd4 <lcd_init>:

void lcd_init (void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8000cd8:	2033      	movs	r0, #51	; 0x33
 8000cda:	f7ff ff9b 	bl	8000c14 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 8000cde:	2032      	movs	r0, #50	; 0x32
 8000ce0:	f7ff ff98 	bl	8000c14 <lcd_send_cmd>
	HAL_Delay(50);
 8000ce4:	2032      	movs	r0, #50	; 0x32
 8000ce6:	f000 ff2b 	bl	8001b40 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 8000cea:	2028      	movs	r0, #40	; 0x28
 8000cec:	f7ff ff92 	bl	8000c14 <lcd_send_cmd>
	HAL_Delay(50);
 8000cf0:	2032      	movs	r0, #50	; 0x32
 8000cf2:	f000 ff25 	bl	8001b40 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	f7ff ff8c 	bl	8000c14 <lcd_send_cmd>
	HAL_Delay(50);
 8000cfc:	2032      	movs	r0, #50	; 0x32
 8000cfe:	f000 ff1f 	bl	8001b40 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 8000d02:	2006      	movs	r0, #6
 8000d04:	f7ff ff86 	bl	8000c14 <lcd_send_cmd>
	HAL_Delay(50);
 8000d08:	2032      	movs	r0, #50	; 0x32
 8000d0a:	f000 ff19 	bl	8001b40 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */	
 8000d0e:	200c      	movs	r0, #12
 8000d10:	f7ff ff80 	bl	8000c14 <lcd_send_cmd>
	HAL_Delay(50);
 8000d14:	2032      	movs	r0, #50	; 0x32
 8000d16:	f000 ff13 	bl	8001b40 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8000d1a:	2002      	movs	r0, #2
 8000d1c:	f7ff ff7a 	bl	8000c14 <lcd_send_cmd>
	HAL_Delay(50);
 8000d20:	2032      	movs	r0, #50	; 0x32
 8000d22:	f000 ff0d 	bl	8001b40 <HAL_Delay>
	lcd_send_cmd (0x80);
 8000d26:	2080      	movs	r0, #128	; 0x80
 8000d28:	f7ff ff74 	bl	8000c14 <lcd_send_cmd>
}
 8000d2c:	bf00      	nop
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000d38:	e006      	b.n	8000d48 <lcd_send_string+0x18>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	1c5a      	adds	r2, r3, #1
 8000d3e:	607a      	str	r2, [r7, #4]
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff ff96 	bl	8000c74 <lcd_send_data>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d1f4      	bne.n	8000d3a <lcd_send_string+0xa>
}
 8000d50:	bf00      	nop
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <lcd_goto_XY>:
{
	lcd_send_cmd (0x01); //clear display
}

void lcd_goto_XY (int row, int col)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b084      	sub	sp, #16
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
 8000d62:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1) 
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d108      	bne.n	8000d7c <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	b2da      	uxtb	r2, r3
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	4413      	add	r3, r2
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	337f      	adds	r3, #127	; 0x7f
 8000d78:	73fb      	strb	r3, [r7, #15]
 8000d7a:	e008      	b.n	8000d8e <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	3340      	adds	r3, #64	; 0x40
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	b25b      	sxtb	r3, r3
 8000d86:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d8a:	b25b      	sxtb	r3, r3
 8000d8c:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 8000d8e:	7bfb      	ldrb	r3, [r7, #15]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff ff3f 	bl	8000c14 <lcd_send_cmd>
}
 8000d96:	bf00      	nop
 8000d98:	3710      	adds	r7, #16
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
	...

08000da0 <HAL_ADC_ConvCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == hadc1.Instance){
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	4b0d      	ldr	r3, [pc, #52]	; (8000de4 <HAL_ADC_ConvCpltCallback+0x44>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d106      	bne.n	8000dc2 <HAL_ADC_ConvCpltCallback+0x22>
		data[0] = HAL_ADC_GetValue(&hadc1);
 8000db4:	480b      	ldr	r0, [pc, #44]	; (8000de4 <HAL_ADC_ConvCpltCallback+0x44>)
 8000db6:	f001 f875 	bl	8001ea4 <HAL_ADC_GetValue>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	b29a      	uxth	r2, r3
 8000dbe:	4b0a      	ldr	r3, [pc, #40]	; (8000de8 <HAL_ADC_ConvCpltCallback+0x48>)
 8000dc0:	801a      	strh	r2, [r3, #0]

	}
	if(hadc->Instance == hadc2.Instance){
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	4b09      	ldr	r3, [pc, #36]	; (8000dec <HAL_ADC_ConvCpltCallback+0x4c>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d106      	bne.n	8000ddc <HAL_ADC_ConvCpltCallback+0x3c>
		data[1] = HAL_ADC_GetValue(&hadc2);
 8000dce:	4807      	ldr	r0, [pc, #28]	; (8000dec <HAL_ADC_ConvCpltCallback+0x4c>)
 8000dd0:	f001 f868 	bl	8001ea4 <HAL_ADC_GetValue>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	b29a      	uxth	r2, r3
 8000dd8:	4b03      	ldr	r3, [pc, #12]	; (8000de8 <HAL_ADC_ConvCpltCallback+0x48>)
 8000dda:	805a      	strh	r2, [r3, #2]

	}
}
 8000ddc:	bf00      	nop
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	2000029c 	.word	0x2000029c
 8000de8:	200002d0 	.word	0x200002d0
 8000dec:	20000214 	.word	0x20000214

08000df0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == htim1.Instance)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	4b5e      	ldr	r3, [pc, #376]	; (8000f78 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	f040 8086 	bne.w	8000f12 <HAL_TIM_PeriodElapsedCallback+0x122>
	{

		if(temp<35 )
 8000e06:	4b5d      	ldr	r3, [pc, #372]	; (8000f7c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	495d      	ldr	r1, [pc, #372]	; (8000f80 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff fed9 	bl	8000bc4 <__aeabi_fcmplt>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d023      	beq.n	8000e60 <HAL_TIM_PeriodElapsedCallback+0x70>
		{
			  lcd_goto_XY(1, 2);
 8000e18:	2102      	movs	r1, #2
 8000e1a:	2001      	movs	r0, #1
 8000e1c:	f7ff ff9d 	bl	8000d5a <lcd_goto_XY>
			  lcd_send_string("  AN TOAN   **");
 8000e20:	4858      	ldr	r0, [pc, #352]	; (8000f84 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000e22:	f7ff ff85 	bl	8000d30 <lcd_send_string>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 8000e26:	2201      	movs	r2, #1
 8000e28:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e2c:	4856      	ldr	r0, [pc, #344]	; (8000f88 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000e2e:	f001 fd6b 	bl	8002908 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8000e32:	2200      	movs	r2, #0
 8000e34:	2110      	movs	r1, #16
 8000e36:	4855      	ldr	r0, [pc, #340]	; (8000f8c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000e38:	f001 fd66 	bl	8002908 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	2140      	movs	r1, #64	; 0x40
 8000e40:	4852      	ldr	r0, [pc, #328]	; (8000f8c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000e42:	f001 fd61 	bl	8002908 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 0);
 8000e46:	2200      	movs	r2, #0
 8000e48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e4c:	484e      	ldr	r0, [pc, #312]	; (8000f88 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000e4e:	f001 fd5b 	bl	8002908 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8000e52:	2200      	movs	r2, #0
 8000e54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e58:	484b      	ldr	r0, [pc, #300]	; (8000f88 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000e5a:	f001 fd55 	bl	8002908 <HAL_GPIO_WritePin>
 8000e5e:	e058      	b.n	8000f12 <HAL_TIM_PeriodElapsedCallback+0x122>

		}
		else if(temp<45 )
 8000e60:	4b46      	ldr	r3, [pc, #280]	; (8000f7c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	494a      	ldr	r1, [pc, #296]	; (8000f90 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff feac 	bl	8000bc4 <__aeabi_fcmplt>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d02c      	beq.n	8000ecc <HAL_TIM_PeriodElapsedCallback+0xdc>
		{
				 lcd_goto_XY(1, 2);
 8000e72:	2102      	movs	r1, #2
 8000e74:	2001      	movs	r0, #1
 8000e76:	f7ff ff70 	bl	8000d5a <lcd_goto_XY>
				 lcd_send_string("  CAN THAN  **");
 8000e7a:	4846      	ldr	r0, [pc, #280]	; (8000f94 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000e7c:	f7ff ff58 	bl	8000d30 <lcd_send_string>
				 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 0);
 8000e80:	2200      	movs	r2, #0
 8000e82:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e86:	4840      	ldr	r0, [pc, #256]	; (8000f88 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000e88:	f001 fd3e 	bl	8002908 <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e92:	483d      	ldr	r0, [pc, #244]	; (8000f88 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000e94:	f001 fd38 	bl	8002908 <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8000e98:	2201      	movs	r2, #1
 8000e9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e9e:	483a      	ldr	r0, [pc, #232]	; (8000f88 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000ea0:	f001 fd32 	bl	8002908 <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	2110      	movs	r1, #16
 8000ea8:	4838      	ldr	r0, [pc, #224]	; (8000f8c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000eaa:	f001 fd2d 	bl	8002908 <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2140      	movs	r1, #64	; 0x40
 8000eb2:	4836      	ldr	r0, [pc, #216]	; (8000f8c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000eb4:	f001 fd28 	bl	8002908 <HAL_GPIO_WritePin>
				 for(int i=1000000;i>0;i--);
 8000eb8:	4b37      	ldr	r3, [pc, #220]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	e002      	b.n	8000ec4 <HAL_TIM_PeriodElapsedCallback+0xd4>
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	3b01      	subs	r3, #1
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	dcf9      	bgt.n	8000ebe <HAL_TIM_PeriodElapsedCallback+0xce>
 8000eca:	e022      	b.n	8000f12 <HAL_TIM_PeriodElapsedCallback+0x122>

		 }
		else{
			lcd_goto_XY(1, 2);
 8000ecc:	2102      	movs	r1, #2
 8000ece:	2001      	movs	r0, #1
 8000ed0:	f7ff ff43 	bl	8000d5a <lcd_goto_XY>
			lcd_send_string("  NGUY HIEM **");
 8000ed4:	4831      	ldr	r0, [pc, #196]	; (8000f9c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000ed6:	f7ff ff2b 	bl	8000d30 <lcd_send_string>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 1);
 8000eda:	2201      	movs	r2, #1
 8000edc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ee0:	4829      	ldr	r0, [pc, #164]	; (8000f88 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000ee2:	f001 fd11 	bl	8002908 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	2110      	movs	r1, #16
 8000eea:	4828      	ldr	r0, [pc, #160]	; (8000f8c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000eec:	f001 fd0c 	bl	8002908 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	2140      	movs	r1, #64	; 0x40
 8000ef4:	4825      	ldr	r0, [pc, #148]	; (8000f8c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000ef6:	f001 fd07 	bl	8002908 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 8000efa:	2200      	movs	r2, #0
 8000efc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f00:	4821      	ldr	r0, [pc, #132]	; (8000f88 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000f02:	f001 fd01 	bl	8002908 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8000f06:	2200      	movs	r2, #0
 8000f08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f0c:	481e      	ldr	r0, [pc, #120]	; (8000f88 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000f0e:	f001 fcfb 	bl	8002908 <HAL_GPIO_WritePin>

		 }
	    }
	    if(gas>2){
 8000f12:	4b23      	ldr	r3, [pc, #140]	; (8000fa0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff fe70 	bl	8000c00 <__aeabi_fcmpgt>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d100      	bne.n	8000f28 <HAL_TIM_PeriodElapsedCallback+0x138>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 0);
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
				  }
}
 8000f26:	e022      	b.n	8000f6e <HAL_TIM_PeriodElapsedCallback+0x17e>
				  lcd_goto_XY(1,2);
 8000f28:	2102      	movs	r1, #2
 8000f2a:	2001      	movs	r0, #1
 8000f2c:	f7ff ff15 	bl	8000d5a <lcd_goto_XY>
				  lcd_send_string(" CO KHI GAS **");
 8000f30:	481c      	ldr	r0, [pc, #112]	; (8000fa4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8000f32:	f7ff fefd 	bl	8000d30 <lcd_send_string>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 8000f36:	2200      	movs	r2, #0
 8000f38:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f3c:	4812      	ldr	r0, [pc, #72]	; (8000f88 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000f3e:	f001 fce3 	bl	8002908 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8000f42:	2201      	movs	r2, #1
 8000f44:	2110      	movs	r1, #16
 8000f46:	4811      	ldr	r0, [pc, #68]	; (8000f8c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000f48:	f001 fcde 	bl	8002908 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	2140      	movs	r1, #64	; 0x40
 8000f50:	480e      	ldr	r0, [pc, #56]	; (8000f8c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000f52:	f001 fcd9 	bl	8002908 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 0);
 8000f56:	2200      	movs	r2, #0
 8000f58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f5c:	480a      	ldr	r0, [pc, #40]	; (8000f88 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000f5e:	f001 fcd3 	bl	8002908 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8000f62:	2200      	movs	r2, #0
 8000f64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f68:	4807      	ldr	r0, [pc, #28]	; (8000f88 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000f6a:	f001 fccd 	bl	8002908 <HAL_GPIO_WritePin>
}
 8000f6e:	bf00      	nop
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	200002d4 	.word	0x200002d4
 8000f7c:	20000298 	.word	0x20000298
 8000f80:	420c0000 	.word	0x420c0000
 8000f84:	08007118 	.word	0x08007118
 8000f88:	40011000 	.word	0x40011000
 8000f8c:	40010800 	.word	0x40010800
 8000f90:	42340000 	.word	0x42340000
 8000f94:	08007128 	.word	0x08007128
 8000f98:	000f4240 	.word	0x000f4240
 8000f9c:	08007138 	.word	0x08007138
 8000fa0:	200002cc 	.word	0x200002cc
 8000fa4:	08007148 	.word	0x08007148

08000fa8 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0){
 8000fb2:	88fb      	ldrh	r3, [r7, #6]
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d12e      	bne.n	8001016 <HAL_GPIO_EXTI_Callback+0x6e>
		lcd_goto_XY(1, 2);
 8000fb8:	2102      	movs	r1, #2
 8000fba:	2001      	movs	r0, #1
 8000fbc:	f7ff fecd 	bl	8000d5a <lcd_goto_XY>
		lcd_send_string("  NGUY HIEM **");
 8000fc0:	4820      	ldr	r0, [pc, #128]	; (8001044 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000fc2:	f7ff feb5 	bl	8000d30 <lcd_send_string>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	2110      	movs	r1, #16
 8000fca:	481f      	ldr	r0, [pc, #124]	; (8001048 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000fcc:	f001 fc9c 	bl	8002908 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	2140      	movs	r1, #64	; 0x40
 8000fd4:	481c      	ldr	r0, [pc, #112]	; (8001048 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000fd6:	f001 fc97 	bl	8002908 <HAL_GPIO_WritePin>
		int b= 100000000;
 8000fda:	4b1c      	ldr	r3, [pc, #112]	; (800104c <HAL_GPIO_EXTI_Callback+0xa4>)
 8000fdc:	60fb      	str	r3, [r7, #12]
		while(b--);
 8000fde:	bf00      	nop
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	1e5a      	subs	r2, r3, #1
 8000fe4:	60fa      	str	r2, [r7, #12]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d1fa      	bne.n	8000fe0 <HAL_GPIO_EXTI_Callback+0x38>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8000fea:	2200      	movs	r2, #0
 8000fec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ff0:	4817      	ldr	r0, [pc, #92]	; (8001050 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000ff2:	f001 fc89 	bl	8002908 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2110      	movs	r1, #16
 8000ffa:	4813      	ldr	r0, [pc, #76]	; (8001048 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000ffc:	f001 fc84 	bl	8002908 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8001000:	2200      	movs	r2, #0
 8001002:	2140      	movs	r1, #64	; 0x40
 8001004:	4810      	ldr	r0, [pc, #64]	; (8001048 <HAL_GPIO_EXTI_Callback+0xa0>)
 8001006:	f001 fc7f 	bl	8002908 <HAL_GPIO_WritePin>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 800100a:	4b12      	ldr	r3, [pc, #72]	; (8001054 <HAL_GPIO_EXTI_Callback+0xac>)
 800100c:	2201      	movs	r2, #1
 800100e:	615a      	str	r2, [r3, #20]
		HAL_NVIC_ClearPendingIRQ(EXTI0_IRQn);
 8001010:	2006      	movs	r0, #6
 8001012:	f001 fae6 	bl	80025e2 <HAL_NVIC_ClearPendingIRQ>
	}
	if (GPIO_Pin == GPIO_PIN_1){
 8001016:	88fb      	ldrh	r3, [r7, #6]
 8001018:	2b02      	cmp	r3, #2
 800101a:	d10f      	bne.n	800103c <HAL_GPIO_EXTI_Callback+0x94>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800101c:	2200      	movs	r2, #0
 800101e:	2110      	movs	r1, #16
 8001020:	4809      	ldr	r0, [pc, #36]	; (8001048 <HAL_GPIO_EXTI_Callback+0xa0>)
 8001022:	f001 fc71 	bl	8002908 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8001026:	2200      	movs	r2, #0
 8001028:	2140      	movs	r1, #64	; 0x40
 800102a:	4807      	ldr	r0, [pc, #28]	; (8001048 <HAL_GPIO_EXTI_Callback+0xa0>)
 800102c:	f001 fc6c 	bl	8002908 <HAL_GPIO_WritePin>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_1);
 8001030:	4b08      	ldr	r3, [pc, #32]	; (8001054 <HAL_GPIO_EXTI_Callback+0xac>)
 8001032:	2202      	movs	r2, #2
 8001034:	615a      	str	r2, [r3, #20]
		HAL_NVIC_ClearPendingIRQ(EXTI1_IRQn);
 8001036:	2007      	movs	r0, #7
 8001038:	f001 fad3 	bl	80025e2 <HAL_NVIC_ClearPendingIRQ>

	}
}
 800103c:	bf00      	nop
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	08007138 	.word	0x08007138
 8001048:	40010800 	.word	0x40010800
 800104c:	05f5e100 	.word	0x05f5e100
 8001050:	40011000 	.word	0x40011000
 8001054:	40010400 	.word	0x40010400

08001058 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800105c:	f000 fd0e 	bl	8001a7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001060:	f000 f8dc 	bl	800121c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001064:	f000 fa32 	bl	80014cc <MX_GPIO_Init>
  MX_ADC1_Init();
 8001068:	f000 f934 	bl	80012d4 <MX_ADC1_Init>
  MX_I2C1_Init();
 800106c:	f000 f9ae 	bl	80013cc <MX_I2C1_Init>
  MX_TIM1_Init();
 8001070:	f000 f9da 	bl	8001428 <MX_TIM1_Init>
  MX_ADC2_Init();
 8001074:	f000 f96c 	bl	8001350 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8001078:	f7ff fe2c 	bl	8000cd4 <lcd_init>
  lcd_goto_XY(1, 0);
 800107c:	2100      	movs	r1, #0
 800107e:	2001      	movs	r0, #1
 8001080:	f7ff fe6b 	bl	8000d5a <lcd_goto_XY>
  lcd_send_string("  DE TAI:       ");
 8001084:	4852      	ldr	r0, [pc, #328]	; (80011d0 <main+0x178>)
 8001086:	f7ff fe53 	bl	8000d30 <lcd_send_string>
  lcd_goto_XY(2, 0);
 800108a:	2100      	movs	r1, #0
 800108c:	2002      	movs	r0, #2
 800108e:	f7ff fe64 	bl	8000d5a <lcd_goto_XY>
  lcd_send_string(" CANH BAO CHAY  ");
 8001092:	4850      	ldr	r0, [pc, #320]	; (80011d4 <main+0x17c>)
 8001094:	f7ff fe4c 	bl	8000d30 <lcd_send_string>
  HAL_Delay(3000);
 8001098:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800109c:	f000 fd50 	bl	8001b40 <HAL_Delay>
  lcd_goto_XY(1, 0);
 80010a0:	2100      	movs	r1, #0
 80010a2:	2001      	movs	r0, #1
 80010a4:	f7ff fe59 	bl	8000d5a <lcd_goto_XY>
  lcd_send_string("**");
 80010a8:	484b      	ldr	r0, [pc, #300]	; (80011d8 <main+0x180>)
 80010aa:	f7ff fe41 	bl	8000d30 <lcd_send_string>
  HAL_Delay(50);
 80010ae:	2032      	movs	r0, #50	; 0x32
 80010b0:	f000 fd46 	bl	8001b40 <HAL_Delay>
  lcd_goto_XY(2, 0);
 80010b4:	2100      	movs	r1, #0
 80010b6:	2002      	movs	r0, #2
 80010b8:	f7ff fe4f 	bl	8000d5a <lcd_goto_XY>
  lcd_send_string("T:");
 80010bc:	4847      	ldr	r0, [pc, #284]	; (80011dc <main+0x184>)
 80010be:	f7ff fe37 	bl	8000d30 <lcd_send_string>
  lcd_goto_XY(2,10);
 80010c2:	210a      	movs	r1, #10
 80010c4:	2002      	movs	r0, #2
 80010c6:	f7ff fe48 	bl	8000d5a <lcd_goto_XY>
  lcd_send_string(" GAS:");
 80010ca:	4845      	ldr	r0, [pc, #276]	; (80011e0 <main+0x188>)
 80010cc:	f7ff fe30 	bl	8000d30 <lcd_send_string>
  HAL_TIM_Base_Start_IT(&htim1);
 80010d0:	4844      	ldr	r0, [pc, #272]	; (80011e4 <main+0x18c>)
 80010d2:	f002 fd9f 	bl	8003c14 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_IT(&hadc1);
 80010d6:	4844      	ldr	r0, [pc, #272]	; (80011e8 <main+0x190>)
 80010d8:	f000 fe2e 	bl	8001d38 <HAL_ADC_Start_IT>
  HAL_ADC_Start_IT(&hadc2);
 80010dc:	4843      	ldr	r0, [pc, #268]	; (80011ec <main+0x194>)
 80010de:	f000 fe2b 	bl	8001d38 <HAL_ADC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  temp= (data[0]*3.22*100)/4096;
 80010e2:	4b43      	ldr	r3, [pc, #268]	; (80011f0 <main+0x198>)
 80010e4:	881b      	ldrh	r3, [r3, #0]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff f98c 	bl	8000404 <__aeabi_i2d>
 80010ec:	a336      	add	r3, pc, #216	; (adr r3, 80011c8 <main+0x170>)
 80010ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f2:	f7ff f9f1 	bl	80004d8 <__aeabi_dmul>
 80010f6:	4602      	mov	r2, r0
 80010f8:	460b      	mov	r3, r1
 80010fa:	4610      	mov	r0, r2
 80010fc:	4619      	mov	r1, r3
 80010fe:	f04f 0200 	mov.w	r2, #0
 8001102:	4b3c      	ldr	r3, [pc, #240]	; (80011f4 <main+0x19c>)
 8001104:	f7ff f9e8 	bl	80004d8 <__aeabi_dmul>
 8001108:	4602      	mov	r2, r0
 800110a:	460b      	mov	r3, r1
 800110c:	4610      	mov	r0, r2
 800110e:	4619      	mov	r1, r3
 8001110:	f04f 0200 	mov.w	r2, #0
 8001114:	4b38      	ldr	r3, [pc, #224]	; (80011f8 <main+0x1a0>)
 8001116:	f7ff fb09 	bl	800072c <__aeabi_ddiv>
 800111a:	4602      	mov	r2, r0
 800111c:	460b      	mov	r3, r1
 800111e:	4610      	mov	r0, r2
 8001120:	4619      	mov	r1, r3
 8001122:	f7ff fcb1 	bl	8000a88 <__aeabi_d2f>
 8001126:	4603      	mov	r3, r0
 8001128:	4a34      	ldr	r2, [pc, #208]	; (80011fc <main+0x1a4>)
 800112a:	6013      	str	r3, [r2, #0]
	  gas= (data[1]*5.)/4096;
 800112c:	4b30      	ldr	r3, [pc, #192]	; (80011f0 <main+0x198>)
 800112e:	885b      	ldrh	r3, [r3, #2]
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff f967 	bl	8000404 <__aeabi_i2d>
 8001136:	f04f 0200 	mov.w	r2, #0
 800113a:	4b31      	ldr	r3, [pc, #196]	; (8001200 <main+0x1a8>)
 800113c:	f7ff f9cc 	bl	80004d8 <__aeabi_dmul>
 8001140:	4602      	mov	r2, r0
 8001142:	460b      	mov	r3, r1
 8001144:	4610      	mov	r0, r2
 8001146:	4619      	mov	r1, r3
 8001148:	f04f 0200 	mov.w	r2, #0
 800114c:	4b2a      	ldr	r3, [pc, #168]	; (80011f8 <main+0x1a0>)
 800114e:	f7ff faed 	bl	800072c <__aeabi_ddiv>
 8001152:	4602      	mov	r2, r0
 8001154:	460b      	mov	r3, r1
 8001156:	4610      	mov	r0, r2
 8001158:	4619      	mov	r1, r3
 800115a:	f7ff fc95 	bl	8000a88 <__aeabi_d2f>
 800115e:	4603      	mov	r3, r0
 8001160:	4a28      	ldr	r2, [pc, #160]	; (8001204 <main+0x1ac>)
 8001162:	6013      	str	r3, [r2, #0]
	  HAL_Delay(100);
 8001164:	2064      	movs	r0, #100	; 0x64
 8001166:	f000 fceb 	bl	8001b40 <HAL_Delay>
	  sprintf(x,"%.2f*C ",temp);
 800116a:	4b24      	ldr	r3, [pc, #144]	; (80011fc <main+0x1a4>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff f95a 	bl	8000428 <__aeabi_f2d>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	4923      	ldr	r1, [pc, #140]	; (8001208 <main+0x1b0>)
 800117a:	4824      	ldr	r0, [pc, #144]	; (800120c <main+0x1b4>)
 800117c:	f003 fd86 	bl	8004c8c <siprintf>
	  lcd_goto_XY(2,2);
 8001180:	2102      	movs	r1, #2
 8001182:	2002      	movs	r0, #2
 8001184:	f7ff fde9 	bl	8000d5a <lcd_goto_XY>
	  lcd_send_string(x);
 8001188:	4820      	ldr	r0, [pc, #128]	; (800120c <main+0x1b4>)
 800118a:	f7ff fdd1 	bl	8000d30 <lcd_send_string>
	  if(gas>3){
 800118e:	4b1d      	ldr	r3, [pc, #116]	; (8001204 <main+0x1ac>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	491f      	ldr	r1, [pc, #124]	; (8001210 <main+0x1b8>)
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff fd33 	bl	8000c00 <__aeabi_fcmpgt>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d007      	beq.n	80011b0 <main+0x158>
	  lcd_goto_XY(2, 15);
 80011a0:	210f      	movs	r1, #15
 80011a2:	2002      	movs	r0, #2
 80011a4:	f7ff fdd9 	bl	8000d5a <lcd_goto_XY>
	  lcd_send_string("1 ");
 80011a8:	481a      	ldr	r0, [pc, #104]	; (8001214 <main+0x1bc>)
 80011aa:	f7ff fdc1 	bl	8000d30 <lcd_send_string>
 80011ae:	e006      	b.n	80011be <main+0x166>
	  }
	  else
	  {
	  lcd_goto_XY(2, 15);
 80011b0:	210f      	movs	r1, #15
 80011b2:	2002      	movs	r0, #2
 80011b4:	f7ff fdd1 	bl	8000d5a <lcd_goto_XY>
	  lcd_send_string("0 ");
 80011b8:	4817      	ldr	r0, [pc, #92]	; (8001218 <main+0x1c0>)
 80011ba:	f7ff fdb9 	bl	8000d30 <lcd_send_string>
	  }
	  HAL_Delay(1000);
 80011be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011c2:	f000 fcbd 	bl	8001b40 <HAL_Delay>
	  temp= (data[0]*3.22*100)/4096;
 80011c6:	e78c      	b.n	80010e2 <main+0x8a>
 80011c8:	5c28f5c3 	.word	0x5c28f5c3
 80011cc:	4009c28f 	.word	0x4009c28f
 80011d0:	08007158 	.word	0x08007158
 80011d4:	0800716c 	.word	0x0800716c
 80011d8:	08007180 	.word	0x08007180
 80011dc:	08007184 	.word	0x08007184
 80011e0:	08007188 	.word	0x08007188
 80011e4:	200002d4 	.word	0x200002d4
 80011e8:	2000029c 	.word	0x2000029c
 80011ec:	20000214 	.word	0x20000214
 80011f0:	200002d0 	.word	0x200002d0
 80011f4:	40590000 	.word	0x40590000
 80011f8:	40b00000 	.word	0x40b00000
 80011fc:	20000298 	.word	0x20000298
 8001200:	40140000 	.word	0x40140000
 8001204:	200002cc 	.word	0x200002cc
 8001208:	08007190 	.word	0x08007190
 800120c:	20000204 	.word	0x20000204
 8001210:	40400000 	.word	0x40400000
 8001214:	08007198 	.word	0x08007198
 8001218:	0800719c 	.word	0x0800719c

0800121c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b094      	sub	sp, #80	; 0x50
 8001220:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001222:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001226:	2228      	movs	r2, #40	; 0x28
 8001228:	2100      	movs	r1, #0
 800122a:	4618      	mov	r0, r3
 800122c:	f003 f8c6 	bl	80043bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001240:	1d3b      	adds	r3, r7, #4
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800124c:	2301      	movs	r3, #1
 800124e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001250:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001254:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001256:	2300      	movs	r3, #0
 8001258:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800125a:	2301      	movs	r3, #1
 800125c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800125e:	2302      	movs	r3, #2
 8001260:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001262:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001266:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001268:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800126c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800126e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001272:	4618      	mov	r0, r3
 8001274:	f001 ffc2 	bl	80031fc <HAL_RCC_OscConfig>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800127e:	f000 f9b1 	bl	80015e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001282:	230f      	movs	r3, #15
 8001284:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001286:	2302      	movs	r3, #2
 8001288:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800128a:	2300      	movs	r3, #0
 800128c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800128e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001292:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001294:	2300      	movs	r3, #0
 8001296:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001298:	f107 0314 	add.w	r3, r7, #20
 800129c:	2102      	movs	r1, #2
 800129e:	4618      	mov	r0, r3
 80012a0:	f002 fa2c 	bl	80036fc <HAL_RCC_ClockConfig>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <SystemClock_Config+0x92>
  {
    Error_Handler();
 80012aa:	f000 f99b 	bl	80015e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80012ae:	2302      	movs	r3, #2
 80012b0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80012b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012b6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012b8:	1d3b      	adds	r3, r7, #4
 80012ba:	4618      	mov	r0, r3
 80012bc:	f002 fba4 	bl	8003a08 <HAL_RCCEx_PeriphCLKConfig>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <SystemClock_Config+0xae>
  {
    Error_Handler();
 80012c6:	f000 f98d 	bl	80015e4 <Error_Handler>
  }
}
 80012ca:	bf00      	nop
 80012cc:	3750      	adds	r7, #80	; 0x50
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
	...

080012d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012da:	1d3b      	adds	r3, r7, #4
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80012e4:	4b18      	ldr	r3, [pc, #96]	; (8001348 <MX_ADC1_Init+0x74>)
 80012e6:	4a19      	ldr	r2, [pc, #100]	; (800134c <MX_ADC1_Init+0x78>)
 80012e8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012ea:	4b17      	ldr	r3, [pc, #92]	; (8001348 <MX_ADC1_Init+0x74>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80012f0:	4b15      	ldr	r3, [pc, #84]	; (8001348 <MX_ADC1_Init+0x74>)
 80012f2:	2201      	movs	r2, #1
 80012f4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012f6:	4b14      	ldr	r3, [pc, #80]	; (8001348 <MX_ADC1_Init+0x74>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012fc:	4b12      	ldr	r3, [pc, #72]	; (8001348 <MX_ADC1_Init+0x74>)
 80012fe:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001302:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001304:	4b10      	ldr	r3, [pc, #64]	; (8001348 <MX_ADC1_Init+0x74>)
 8001306:	2200      	movs	r2, #0
 8001308:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800130a:	4b0f      	ldr	r3, [pc, #60]	; (8001348 <MX_ADC1_Init+0x74>)
 800130c:	2201      	movs	r2, #1
 800130e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001310:	480d      	ldr	r0, [pc, #52]	; (8001348 <MX_ADC1_Init+0x74>)
 8001312:	f000 fc39 	bl	8001b88 <HAL_ADC_Init>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800131c:	f000 f962 	bl	80015e4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001320:	2300      	movs	r3, #0
 8001322:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001324:	2301      	movs	r3, #1
 8001326:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001328:	2307      	movs	r3, #7
 800132a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800132c:	1d3b      	adds	r3, r7, #4
 800132e:	4619      	mov	r1, r3
 8001330:	4805      	ldr	r0, [pc, #20]	; (8001348 <MX_ADC1_Init+0x74>)
 8001332:	f000 fe8f 	bl	8002054 <HAL_ADC_ConfigChannel>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800133c:	f000 f952 	bl	80015e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001340:	bf00      	nop
 8001342:	3710      	adds	r7, #16
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	2000029c 	.word	0x2000029c
 800134c:	40012400 	.word	0x40012400

08001350 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001356:	1d3b      	adds	r3, r7, #4
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8001360:	4b18      	ldr	r3, [pc, #96]	; (80013c4 <MX_ADC2_Init+0x74>)
 8001362:	4a19      	ldr	r2, [pc, #100]	; (80013c8 <MX_ADC2_Init+0x78>)
 8001364:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001366:	4b17      	ldr	r3, [pc, #92]	; (80013c4 <MX_ADC2_Init+0x74>)
 8001368:	2200      	movs	r2, #0
 800136a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800136c:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <MX_ADC2_Init+0x74>)
 800136e:	2201      	movs	r2, #1
 8001370:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001372:	4b14      	ldr	r3, [pc, #80]	; (80013c4 <MX_ADC2_Init+0x74>)
 8001374:	2200      	movs	r2, #0
 8001376:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001378:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <MX_ADC2_Init+0x74>)
 800137a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800137e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001380:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <MX_ADC2_Init+0x74>)
 8001382:	2200      	movs	r2, #0
 8001384:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8001386:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <MX_ADC2_Init+0x74>)
 8001388:	2201      	movs	r2, #1
 800138a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800138c:	480d      	ldr	r0, [pc, #52]	; (80013c4 <MX_ADC2_Init+0x74>)
 800138e:	f000 fbfb 	bl	8001b88 <HAL_ADC_Init>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8001398:	f000 f924 	bl	80015e4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800139c:	2301      	movs	r3, #1
 800139e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013a0:	2301      	movs	r3, #1
 80013a2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80013a4:	2307      	movs	r3, #7
 80013a6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80013a8:	1d3b      	adds	r3, r7, #4
 80013aa:	4619      	mov	r1, r3
 80013ac:	4805      	ldr	r0, [pc, #20]	; (80013c4 <MX_ADC2_Init+0x74>)
 80013ae:	f000 fe51 	bl	8002054 <HAL_ADC_ConfigChannel>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 80013b8:	f000 f914 	bl	80015e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80013bc:	bf00      	nop
 80013be:	3710      	adds	r7, #16
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	20000214 	.word	0x20000214
 80013c8:	40012800 	.word	0x40012800

080013cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013d0:	4b12      	ldr	r3, [pc, #72]	; (800141c <MX_I2C1_Init+0x50>)
 80013d2:	4a13      	ldr	r2, [pc, #76]	; (8001420 <MX_I2C1_Init+0x54>)
 80013d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013d6:	4b11      	ldr	r3, [pc, #68]	; (800141c <MX_I2C1_Init+0x50>)
 80013d8:	4a12      	ldr	r2, [pc, #72]	; (8001424 <MX_I2C1_Init+0x58>)
 80013da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013dc:	4b0f      	ldr	r3, [pc, #60]	; (800141c <MX_I2C1_Init+0x50>)
 80013de:	2200      	movs	r2, #0
 80013e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013e2:	4b0e      	ldr	r3, [pc, #56]	; (800141c <MX_I2C1_Init+0x50>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013e8:	4b0c      	ldr	r3, [pc, #48]	; (800141c <MX_I2C1_Init+0x50>)
 80013ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013f0:	4b0a      	ldr	r3, [pc, #40]	; (800141c <MX_I2C1_Init+0x50>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013f6:	4b09      	ldr	r3, [pc, #36]	; (800141c <MX_I2C1_Init+0x50>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013fc:	4b07      	ldr	r3, [pc, #28]	; (800141c <MX_I2C1_Init+0x50>)
 80013fe:	2200      	movs	r2, #0
 8001400:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001402:	4b06      	ldr	r3, [pc, #24]	; (800141c <MX_I2C1_Init+0x50>)
 8001404:	2200      	movs	r2, #0
 8001406:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001408:	4804      	ldr	r0, [pc, #16]	; (800141c <MX_I2C1_Init+0x50>)
 800140a:	f001 faad 	bl	8002968 <HAL_I2C_Init>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001414:	f000 f8e6 	bl	80015e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001418:	bf00      	nop
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20000244 	.word	0x20000244
 8001420:	40005400 	.word	0x40005400
 8001424:	000186a0 	.word	0x000186a0

08001428 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800142e:	f107 0308 	add.w	r3, r7, #8
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	609a      	str	r2, [r3, #8]
 800143a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800143c:	463b      	mov	r3, r7
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001444:	4b1f      	ldr	r3, [pc, #124]	; (80014c4 <MX_TIM1_Init+0x9c>)
 8001446:	4a20      	ldr	r2, [pc, #128]	; (80014c8 <MX_TIM1_Init+0xa0>)
 8001448:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7999;
 800144a:	4b1e      	ldr	r3, [pc, #120]	; (80014c4 <MX_TIM1_Init+0x9c>)
 800144c:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001450:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001452:	4b1c      	ldr	r3, [pc, #112]	; (80014c4 <MX_TIM1_Init+0x9c>)
 8001454:	2200      	movs	r2, #0
 8001456:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4999;
 8001458:	4b1a      	ldr	r3, [pc, #104]	; (80014c4 <MX_TIM1_Init+0x9c>)
 800145a:	f241 3287 	movw	r2, #4999	; 0x1387
 800145e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001460:	4b18      	ldr	r3, [pc, #96]	; (80014c4 <MX_TIM1_Init+0x9c>)
 8001462:	2200      	movs	r2, #0
 8001464:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001466:	4b17      	ldr	r3, [pc, #92]	; (80014c4 <MX_TIM1_Init+0x9c>)
 8001468:	2200      	movs	r2, #0
 800146a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800146c:	4b15      	ldr	r3, [pc, #84]	; (80014c4 <MX_TIM1_Init+0x9c>)
 800146e:	2200      	movs	r2, #0
 8001470:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001472:	4814      	ldr	r0, [pc, #80]	; (80014c4 <MX_TIM1_Init+0x9c>)
 8001474:	f002 fb7e 	bl	8003b74 <HAL_TIM_Base_Init>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800147e:	f000 f8b1 	bl	80015e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001482:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001486:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001488:	f107 0308 	add.w	r3, r7, #8
 800148c:	4619      	mov	r1, r3
 800148e:	480d      	ldr	r0, [pc, #52]	; (80014c4 <MX_TIM1_Init+0x9c>)
 8001490:	f002 fd1a 	bl	8003ec8 <HAL_TIM_ConfigClockSource>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800149a:	f000 f8a3 	bl	80015e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800149e:	2300      	movs	r3, #0
 80014a0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014a2:	2300      	movs	r3, #0
 80014a4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014a6:	463b      	mov	r3, r7
 80014a8:	4619      	mov	r1, r3
 80014aa:	4806      	ldr	r0, [pc, #24]	; (80014c4 <MX_TIM1_Init+0x9c>)
 80014ac:	f002 feec 	bl	8004288 <HAL_TIMEx_MasterConfigSynchronization>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80014b6:	f000 f895 	bl	80015e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80014ba:	bf00      	nop
 80014bc:	3718      	adds	r7, #24
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	200002d4 	.word	0x200002d4
 80014c8:	40012c00 	.word	0x40012c00

080014cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b088      	sub	sp, #32
 80014d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d2:	f107 0310 	add.w	r3, r7, #16
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	605a      	str	r2, [r3, #4]
 80014dc:	609a      	str	r2, [r3, #8]
 80014de:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e0:	4b3b      	ldr	r3, [pc, #236]	; (80015d0 <MX_GPIO_Init+0x104>)
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	4a3a      	ldr	r2, [pc, #232]	; (80015d0 <MX_GPIO_Init+0x104>)
 80014e6:	f043 0310 	orr.w	r3, r3, #16
 80014ea:	6193      	str	r3, [r2, #24]
 80014ec:	4b38      	ldr	r3, [pc, #224]	; (80015d0 <MX_GPIO_Init+0x104>)
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	f003 0310 	and.w	r3, r3, #16
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014f8:	4b35      	ldr	r3, [pc, #212]	; (80015d0 <MX_GPIO_Init+0x104>)
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	4a34      	ldr	r2, [pc, #208]	; (80015d0 <MX_GPIO_Init+0x104>)
 80014fe:	f043 0320 	orr.w	r3, r3, #32
 8001502:	6193      	str	r3, [r2, #24]
 8001504:	4b32      	ldr	r3, [pc, #200]	; (80015d0 <MX_GPIO_Init+0x104>)
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	f003 0320 	and.w	r3, r3, #32
 800150c:	60bb      	str	r3, [r7, #8]
 800150e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001510:	4b2f      	ldr	r3, [pc, #188]	; (80015d0 <MX_GPIO_Init+0x104>)
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	4a2e      	ldr	r2, [pc, #184]	; (80015d0 <MX_GPIO_Init+0x104>)
 8001516:	f043 0304 	orr.w	r3, r3, #4
 800151a:	6193      	str	r3, [r2, #24]
 800151c:	4b2c      	ldr	r3, [pc, #176]	; (80015d0 <MX_GPIO_Init+0x104>)
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	f003 0304 	and.w	r3, r3, #4
 8001524:	607b      	str	r3, [r7, #4]
 8001526:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001528:	4b29      	ldr	r3, [pc, #164]	; (80015d0 <MX_GPIO_Init+0x104>)
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	4a28      	ldr	r2, [pc, #160]	; (80015d0 <MX_GPIO_Init+0x104>)
 800152e:	f043 0308 	orr.w	r3, r3, #8
 8001532:	6193      	str	r3, [r2, #24]
 8001534:	4b26      	ldr	r3, [pc, #152]	; (80015d0 <MX_GPIO_Init+0x104>)
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	f003 0308 	and.w	r3, r3, #8
 800153c:	603b      	str	r3, [r7, #0]
 800153e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001540:	2200      	movs	r2, #0
 8001542:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001546:	4823      	ldr	r0, [pc, #140]	; (80015d4 <MX_GPIO_Init+0x108>)
 8001548:	f001 f9de 	bl	8002908 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 800154c:	2200      	movs	r2, #0
 800154e:	2150      	movs	r1, #80	; 0x50
 8001550:	4821      	ldr	r0, [pc, #132]	; (80015d8 <MX_GPIO_Init+0x10c>)
 8001552:	f001 f9d9 	bl	8002908 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001556:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800155a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155c:	2301      	movs	r3, #1
 800155e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001564:	2302      	movs	r3, #2
 8001566:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001568:	f107 0310 	add.w	r3, r7, #16
 800156c:	4619      	mov	r1, r3
 800156e:	4819      	ldr	r0, [pc, #100]	; (80015d4 <MX_GPIO_Init+0x108>)
 8001570:	f001 f846 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001574:	2350      	movs	r3, #80	; 0x50
 8001576:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001578:	2301      	movs	r3, #1
 800157a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001580:	2302      	movs	r3, #2
 8001582:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001584:	f107 0310 	add.w	r3, r7, #16
 8001588:	4619      	mov	r1, r3
 800158a:	4813      	ldr	r0, [pc, #76]	; (80015d8 <MX_GPIO_Init+0x10c>)
 800158c:	f001 f838 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001590:	2303      	movs	r3, #3
 8001592:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001594:	4b11      	ldr	r3, [pc, #68]	; (80015dc <MX_GPIO_Init+0x110>)
 8001596:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001598:	2301      	movs	r3, #1
 800159a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800159c:	f107 0310 	add.w	r3, r7, #16
 80015a0:	4619      	mov	r1, r3
 80015a2:	480f      	ldr	r0, [pc, #60]	; (80015e0 <MX_GPIO_Init+0x114>)
 80015a4:	f001 f82c 	bl	8002600 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 80015a8:	2200      	movs	r2, #0
 80015aa:	2102      	movs	r1, #2
 80015ac:	2006      	movs	r0, #6
 80015ae:	f000 ffe2 	bl	8002576 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80015b2:	2006      	movs	r0, #6
 80015b4:	f000 fffb 	bl	80025ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 80015b8:	2200      	movs	r2, #0
 80015ba:	2101      	movs	r1, #1
 80015bc:	2007      	movs	r0, #7
 80015be:	f000 ffda 	bl	8002576 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80015c2:	2007      	movs	r0, #7
 80015c4:	f000 fff3 	bl	80025ae <HAL_NVIC_EnableIRQ>

}
 80015c8:	bf00      	nop
 80015ca:	3720      	adds	r7, #32
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40021000 	.word	0x40021000
 80015d4:	40011000 	.word	0x40011000
 80015d8:	40010800 	.word	0x40010800
 80015dc:	10210000 	.word	0x10210000
 80015e0:	40010c00 	.word	0x40010c00

080015e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015e8:	b672      	cpsid	i
}
 80015ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015ec:	e7fe      	b.n	80015ec <Error_Handler+0x8>
	...

080015f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015f6:	4b15      	ldr	r3, [pc, #84]	; (800164c <HAL_MspInit+0x5c>)
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	4a14      	ldr	r2, [pc, #80]	; (800164c <HAL_MspInit+0x5c>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	6193      	str	r3, [r2, #24]
 8001602:	4b12      	ldr	r3, [pc, #72]	; (800164c <HAL_MspInit+0x5c>)
 8001604:	699b      	ldr	r3, [r3, #24]
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	60bb      	str	r3, [r7, #8]
 800160c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800160e:	4b0f      	ldr	r3, [pc, #60]	; (800164c <HAL_MspInit+0x5c>)
 8001610:	69db      	ldr	r3, [r3, #28]
 8001612:	4a0e      	ldr	r2, [pc, #56]	; (800164c <HAL_MspInit+0x5c>)
 8001614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001618:	61d3      	str	r3, [r2, #28]
 800161a:	4b0c      	ldr	r3, [pc, #48]	; (800164c <HAL_MspInit+0x5c>)
 800161c:	69db      	ldr	r3, [r3, #28]
 800161e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001622:	607b      	str	r3, [r7, #4]
 8001624:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001626:	4b0a      	ldr	r3, [pc, #40]	; (8001650 <HAL_MspInit+0x60>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	4a04      	ldr	r2, [pc, #16]	; (8001650 <HAL_MspInit+0x60>)
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001642:	bf00      	nop
 8001644:	3714      	adds	r7, #20
 8001646:	46bd      	mov	sp, r7
 8001648:	bc80      	pop	{r7}
 800164a:	4770      	bx	lr
 800164c:	40021000 	.word	0x40021000
 8001650:	40010000 	.word	0x40010000

08001654 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b08a      	sub	sp, #40	; 0x28
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165c:	f107 0318 	add.w	r3, r7, #24
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a30      	ldr	r2, [pc, #192]	; (8001730 <HAL_ADC_MspInit+0xdc>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d12a      	bne.n	80016ca <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001674:	4b2f      	ldr	r3, [pc, #188]	; (8001734 <HAL_ADC_MspInit+0xe0>)
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	4a2e      	ldr	r2, [pc, #184]	; (8001734 <HAL_ADC_MspInit+0xe0>)
 800167a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800167e:	6193      	str	r3, [r2, #24]
 8001680:	4b2c      	ldr	r3, [pc, #176]	; (8001734 <HAL_ADC_MspInit+0xe0>)
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001688:	617b      	str	r3, [r7, #20]
 800168a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800168c:	4b29      	ldr	r3, [pc, #164]	; (8001734 <HAL_ADC_MspInit+0xe0>)
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	4a28      	ldr	r2, [pc, #160]	; (8001734 <HAL_ADC_MspInit+0xe0>)
 8001692:	f043 0304 	orr.w	r3, r3, #4
 8001696:	6193      	str	r3, [r2, #24]
 8001698:	4b26      	ldr	r3, [pc, #152]	; (8001734 <HAL_ADC_MspInit+0xe0>)
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	f003 0304 	and.w	r3, r3, #4
 80016a0:	613b      	str	r3, [r7, #16]
 80016a2:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016a4:	2301      	movs	r3, #1
 80016a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016a8:	2303      	movs	r3, #3
 80016aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ac:	f107 0318 	add.w	r3, r7, #24
 80016b0:	4619      	mov	r1, r3
 80016b2:	4821      	ldr	r0, [pc, #132]	; (8001738 <HAL_ADC_MspInit+0xe4>)
 80016b4:	f000 ffa4 	bl	8002600 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 3, 0);
 80016b8:	2200      	movs	r2, #0
 80016ba:	2103      	movs	r1, #3
 80016bc:	2012      	movs	r0, #18
 80016be:	f000 ff5a 	bl	8002576 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80016c2:	2012      	movs	r0, #18
 80016c4:	f000 ff73 	bl	80025ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80016c8:	e02e      	b.n	8001728 <HAL_ADC_MspInit+0xd4>
  else if(hadc->Instance==ADC2)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a1b      	ldr	r2, [pc, #108]	; (800173c <HAL_ADC_MspInit+0xe8>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d129      	bne.n	8001728 <HAL_ADC_MspInit+0xd4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80016d4:	4b17      	ldr	r3, [pc, #92]	; (8001734 <HAL_ADC_MspInit+0xe0>)
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	4a16      	ldr	r2, [pc, #88]	; (8001734 <HAL_ADC_MspInit+0xe0>)
 80016da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016de:	6193      	str	r3, [r2, #24]
 80016e0:	4b14      	ldr	r3, [pc, #80]	; (8001734 <HAL_ADC_MspInit+0xe0>)
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ec:	4b11      	ldr	r3, [pc, #68]	; (8001734 <HAL_ADC_MspInit+0xe0>)
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	4a10      	ldr	r2, [pc, #64]	; (8001734 <HAL_ADC_MspInit+0xe0>)
 80016f2:	f043 0304 	orr.w	r3, r3, #4
 80016f6:	6193      	str	r3, [r2, #24]
 80016f8:	4b0e      	ldr	r3, [pc, #56]	; (8001734 <HAL_ADC_MspInit+0xe0>)
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	f003 0304 	and.w	r3, r3, #4
 8001700:	60bb      	str	r3, [r7, #8]
 8001702:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001704:	2302      	movs	r3, #2
 8001706:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001708:	2303      	movs	r3, #3
 800170a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170c:	f107 0318 	add.w	r3, r7, #24
 8001710:	4619      	mov	r1, r3
 8001712:	4809      	ldr	r0, [pc, #36]	; (8001738 <HAL_ADC_MspInit+0xe4>)
 8001714:	f000 ff74 	bl	8002600 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 3, 0);
 8001718:	2200      	movs	r2, #0
 800171a:	2103      	movs	r1, #3
 800171c:	2012      	movs	r0, #18
 800171e:	f000 ff2a 	bl	8002576 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001722:	2012      	movs	r0, #18
 8001724:	f000 ff43 	bl	80025ae <HAL_NVIC_EnableIRQ>
}
 8001728:	bf00      	nop
 800172a:	3728      	adds	r7, #40	; 0x28
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40012400 	.word	0x40012400
 8001734:	40021000 	.word	0x40021000
 8001738:	40010800 	.word	0x40010800
 800173c:	40012800 	.word	0x40012800

08001740 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b088      	sub	sp, #32
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001748:	f107 0310 	add.w	r3, r7, #16
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	609a      	str	r2, [r3, #8]
 8001754:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a15      	ldr	r2, [pc, #84]	; (80017b0 <HAL_I2C_MspInit+0x70>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d123      	bne.n	80017a8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001760:	4b14      	ldr	r3, [pc, #80]	; (80017b4 <HAL_I2C_MspInit+0x74>)
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	4a13      	ldr	r2, [pc, #76]	; (80017b4 <HAL_I2C_MspInit+0x74>)
 8001766:	f043 0308 	orr.w	r3, r3, #8
 800176a:	6193      	str	r3, [r2, #24]
 800176c:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <HAL_I2C_MspInit+0x74>)
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	f003 0308 	and.w	r3, r3, #8
 8001774:	60fb      	str	r3, [r7, #12]
 8001776:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001778:	23c0      	movs	r3, #192	; 0xc0
 800177a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800177c:	2312      	movs	r3, #18
 800177e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001780:	2303      	movs	r3, #3
 8001782:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001784:	f107 0310 	add.w	r3, r7, #16
 8001788:	4619      	mov	r1, r3
 800178a:	480b      	ldr	r0, [pc, #44]	; (80017b8 <HAL_I2C_MspInit+0x78>)
 800178c:	f000 ff38 	bl	8002600 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001790:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <HAL_I2C_MspInit+0x74>)
 8001792:	69db      	ldr	r3, [r3, #28]
 8001794:	4a07      	ldr	r2, [pc, #28]	; (80017b4 <HAL_I2C_MspInit+0x74>)
 8001796:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800179a:	61d3      	str	r3, [r2, #28]
 800179c:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <HAL_I2C_MspInit+0x74>)
 800179e:	69db      	ldr	r3, [r3, #28]
 80017a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017a4:	60bb      	str	r3, [r7, #8]
 80017a6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80017a8:	bf00      	nop
 80017aa:	3720      	adds	r7, #32
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40005400 	.word	0x40005400
 80017b4:	40021000 	.word	0x40021000
 80017b8:	40010c00 	.word	0x40010c00

080017bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a0d      	ldr	r2, [pc, #52]	; (8001800 <HAL_TIM_Base_MspInit+0x44>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d113      	bne.n	80017f6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017ce:	4b0d      	ldr	r3, [pc, #52]	; (8001804 <HAL_TIM_Base_MspInit+0x48>)
 80017d0:	699b      	ldr	r3, [r3, #24]
 80017d2:	4a0c      	ldr	r2, [pc, #48]	; (8001804 <HAL_TIM_Base_MspInit+0x48>)
 80017d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017d8:	6193      	str	r3, [r2, #24]
 80017da:	4b0a      	ldr	r3, [pc, #40]	; (8001804 <HAL_TIM_Base_MspInit+0x48>)
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 3, 0);
 80017e6:	2200      	movs	r2, #0
 80017e8:	2103      	movs	r1, #3
 80017ea:	2019      	movs	r0, #25
 80017ec:	f000 fec3 	bl	8002576 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80017f0:	2019      	movs	r0, #25
 80017f2:	f000 fedc 	bl	80025ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80017f6:	bf00      	nop
 80017f8:	3710      	adds	r7, #16
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40012c00 	.word	0x40012c00
 8001804:	40021000 	.word	0x40021000

08001808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800180c:	e7fe      	b.n	800180c <NMI_Handler+0x4>

0800180e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800180e:	b480      	push	{r7}
 8001810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001812:	e7fe      	b.n	8001812 <HardFault_Handler+0x4>

08001814 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001818:	e7fe      	b.n	8001818 <MemManage_Handler+0x4>

0800181a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800181a:	b480      	push	{r7}
 800181c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800181e:	e7fe      	b.n	800181e <BusFault_Handler+0x4>

08001820 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001824:	e7fe      	b.n	8001824 <UsageFault_Handler+0x4>

08001826 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001826:	b480      	push	{r7}
 8001828:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	46bd      	mov	sp, r7
 800182e:	bc80      	pop	{r7}
 8001830:	4770      	bx	lr

08001832 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001832:	b480      	push	{r7}
 8001834:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	46bd      	mov	sp, r7
 800183a:	bc80      	pop	{r7}
 800183c:	4770      	bx	lr

0800183e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800183e:	b480      	push	{r7}
 8001840:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	46bd      	mov	sp, r7
 8001846:	bc80      	pop	{r7}
 8001848:	4770      	bx	lr

0800184a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800184e:	f000 f95b 	bl	8001b08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}

08001856 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800185a:	2001      	movs	r0, #1
 800185c:	f001 f86c 	bl	8002938 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001860:	bf00      	nop
 8001862:	bd80      	pop	{r7, pc}

08001864 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001868:	2002      	movs	r0, #2
 800186a:	f001 f865 	bl	8002938 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
	...

08001874 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001878:	4803      	ldr	r0, [pc, #12]	; (8001888 <ADC1_2_IRQHandler+0x14>)
 800187a:	f000 fb1f 	bl	8001ebc <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800187e:	4803      	ldr	r0, [pc, #12]	; (800188c <ADC1_2_IRQHandler+0x18>)
 8001880:	f000 fb1c 	bl	8001ebc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001884:	bf00      	nop
 8001886:	bd80      	pop	{r7, pc}
 8001888:	2000029c 	.word	0x2000029c
 800188c:	20000214 	.word	0x20000214

08001890 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001894:	4802      	ldr	r0, [pc, #8]	; (80018a0 <TIM1_UP_IRQHandler+0x10>)
 8001896:	f002 fa0f 	bl	8003cb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	200002d4 	.word	0x200002d4

080018a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
	return 1;
 80018a8:	2301      	movs	r3, #1
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc80      	pop	{r7}
 80018b0:	4770      	bx	lr

080018b2 <_kill>:

int _kill(int pid, int sig)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b082      	sub	sp, #8
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
 80018ba:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80018bc:	f002 fd54 	bl	8004368 <__errno>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2216      	movs	r2, #22
 80018c4:	601a      	str	r2, [r3, #0]
	return -1;
 80018c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <_exit>:

void _exit (int status)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b082      	sub	sp, #8
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80018da:	f04f 31ff 	mov.w	r1, #4294967295
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f7ff ffe7 	bl	80018b2 <_kill>
	while (1) {}		/* Make sure we hang here */
 80018e4:	e7fe      	b.n	80018e4 <_exit+0x12>

080018e6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b086      	sub	sp, #24
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	60f8      	str	r0, [r7, #12]
 80018ee:	60b9      	str	r1, [r7, #8]
 80018f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f2:	2300      	movs	r3, #0
 80018f4:	617b      	str	r3, [r7, #20]
 80018f6:	e00a      	b.n	800190e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018f8:	f3af 8000 	nop.w
 80018fc:	4601      	mov	r1, r0
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	1c5a      	adds	r2, r3, #1
 8001902:	60ba      	str	r2, [r7, #8]
 8001904:	b2ca      	uxtb	r2, r1
 8001906:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	3301      	adds	r3, #1
 800190c:	617b      	str	r3, [r7, #20]
 800190e:	697a      	ldr	r2, [r7, #20]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	429a      	cmp	r2, r3
 8001914:	dbf0      	blt.n	80018f8 <_read+0x12>
	}

return len;
 8001916:	687b      	ldr	r3, [r7, #4]
}
 8001918:	4618      	mov	r0, r3
 800191a:	3718      	adds	r7, #24
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800192c:	2300      	movs	r3, #0
 800192e:	617b      	str	r3, [r7, #20]
 8001930:	e009      	b.n	8001946 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	1c5a      	adds	r2, r3, #1
 8001936:	60ba      	str	r2, [r7, #8]
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	4618      	mov	r0, r3
 800193c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	3301      	adds	r3, #1
 8001944:	617b      	str	r3, [r7, #20]
 8001946:	697a      	ldr	r2, [r7, #20]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	429a      	cmp	r2, r3
 800194c:	dbf1      	blt.n	8001932 <_write+0x12>
	}
	return len;
 800194e:	687b      	ldr	r3, [r7, #4]
}
 8001950:	4618      	mov	r0, r3
 8001952:	3718      	adds	r7, #24
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <_close>:

int _close(int file)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
	return -1;
 8001960:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001964:	4618      	mov	r0, r3
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	bc80      	pop	{r7}
 800196c:	4770      	bx	lr

0800196e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800196e:	b480      	push	{r7}
 8001970:	b083      	sub	sp, #12
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
 8001976:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800197e:	605a      	str	r2, [r3, #4]
	return 0;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	bc80      	pop	{r7}
 800198a:	4770      	bx	lr

0800198c <_isatty>:

int _isatty(int file)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
	return 1;
 8001994:	2301      	movs	r3, #1
}
 8001996:	4618      	mov	r0, r3
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	bc80      	pop	{r7}
 800199e:	4770      	bx	lr

080019a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
	return 0;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3714      	adds	r7, #20
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc80      	pop	{r7}
 80019b6:	4770      	bx	lr

080019b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019c0:	4a14      	ldr	r2, [pc, #80]	; (8001a14 <_sbrk+0x5c>)
 80019c2:	4b15      	ldr	r3, [pc, #84]	; (8001a18 <_sbrk+0x60>)
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019cc:	4b13      	ldr	r3, [pc, #76]	; (8001a1c <_sbrk+0x64>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d102      	bne.n	80019da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019d4:	4b11      	ldr	r3, [pc, #68]	; (8001a1c <_sbrk+0x64>)
 80019d6:	4a12      	ldr	r2, [pc, #72]	; (8001a20 <_sbrk+0x68>)
 80019d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019da:	4b10      	ldr	r3, [pc, #64]	; (8001a1c <_sbrk+0x64>)
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4413      	add	r3, r2
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d207      	bcs.n	80019f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019e8:	f002 fcbe 	bl	8004368 <__errno>
 80019ec:	4603      	mov	r3, r0
 80019ee:	220c      	movs	r2, #12
 80019f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019f2:	f04f 33ff 	mov.w	r3, #4294967295
 80019f6:	e009      	b.n	8001a0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019f8:	4b08      	ldr	r3, [pc, #32]	; (8001a1c <_sbrk+0x64>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019fe:	4b07      	ldr	r3, [pc, #28]	; (8001a1c <_sbrk+0x64>)
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4413      	add	r3, r2
 8001a06:	4a05      	ldr	r2, [pc, #20]	; (8001a1c <_sbrk+0x64>)
 8001a08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3718      	adds	r7, #24
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	20005000 	.word	0x20005000
 8001a18:	00000400 	.word	0x00000400
 8001a1c:	200001f8 	.word	0x200001f8
 8001a20:	20000330 	.word	0x20000330

08001a24 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a28:	bf00      	nop
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bc80      	pop	{r7}
 8001a2e:	4770      	bx	lr

08001a30 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a30:	480c      	ldr	r0, [pc, #48]	; (8001a64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a32:	490d      	ldr	r1, [pc, #52]	; (8001a68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a34:	4a0d      	ldr	r2, [pc, #52]	; (8001a6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a38:	e002      	b.n	8001a40 <LoopCopyDataInit>

08001a3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a3e:	3304      	adds	r3, #4

08001a40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a44:	d3f9      	bcc.n	8001a3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a46:	4a0a      	ldr	r2, [pc, #40]	; (8001a70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a48:	4c0a      	ldr	r4, [pc, #40]	; (8001a74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a4c:	e001      	b.n	8001a52 <LoopFillZerobss>

08001a4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a50:	3204      	adds	r2, #4

08001a52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a54:	d3fb      	bcc.n	8001a4e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a56:	f7ff ffe5 	bl	8001a24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a5a:	f002 fc8b 	bl	8004374 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a5e:	f7ff fafb 	bl	8001058 <main>
  bx lr
 8001a62:	4770      	bx	lr
  ldr r0, =_sdata
 8001a64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a68:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001a6c:	080075b4 	.word	0x080075b4
  ldr r2, =_sbss
 8001a70:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001a74:	20000330 	.word	0x20000330

08001a78 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a78:	e7fe      	b.n	8001a78 <CAN1_RX1_IRQHandler>
	...

08001a7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a80:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <HAL_Init+0x28>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a07      	ldr	r2, [pc, #28]	; (8001aa4 <HAL_Init+0x28>)
 8001a86:	f043 0310 	orr.w	r3, r3, #16
 8001a8a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a8c:	2003      	movs	r0, #3
 8001a8e:	f000 fd67 	bl	8002560 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a92:	200f      	movs	r0, #15
 8001a94:	f000 f808 	bl	8001aa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a98:	f7ff fdaa 	bl	80015f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40022000 	.word	0x40022000

08001aa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ab0:	4b12      	ldr	r3, [pc, #72]	; (8001afc <HAL_InitTick+0x54>)
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	4b12      	ldr	r3, [pc, #72]	; (8001b00 <HAL_InitTick+0x58>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	4619      	mov	r1, r3
 8001aba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001abe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f000 fd7f 	bl	80025ca <HAL_SYSTICK_Config>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e00e      	b.n	8001af4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2b0f      	cmp	r3, #15
 8001ada:	d80a      	bhi.n	8001af2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001adc:	2200      	movs	r2, #0
 8001ade:	6879      	ldr	r1, [r7, #4]
 8001ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae4:	f000 fd47 	bl	8002576 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ae8:	4a06      	ldr	r2, [pc, #24]	; (8001b04 <HAL_InitTick+0x5c>)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aee:	2300      	movs	r3, #0
 8001af0:	e000      	b.n	8001af4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	20000000 	.word	0x20000000
 8001b00:	20000008 	.word	0x20000008
 8001b04:	20000004 	.word	0x20000004

08001b08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b0c:	4b05      	ldr	r3, [pc, #20]	; (8001b24 <HAL_IncTick+0x1c>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	461a      	mov	r2, r3
 8001b12:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <HAL_IncTick+0x20>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4413      	add	r3, r2
 8001b18:	4a03      	ldr	r2, [pc, #12]	; (8001b28 <HAL_IncTick+0x20>)
 8001b1a:	6013      	str	r3, [r2, #0]
}
 8001b1c:	bf00      	nop
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bc80      	pop	{r7}
 8001b22:	4770      	bx	lr
 8001b24:	20000008 	.word	0x20000008
 8001b28:	2000031c 	.word	0x2000031c

08001b2c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b30:	4b02      	ldr	r3, [pc, #8]	; (8001b3c <HAL_GetTick+0x10>)
 8001b32:	681b      	ldr	r3, [r3, #0]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bc80      	pop	{r7}
 8001b3a:	4770      	bx	lr
 8001b3c:	2000031c 	.word	0x2000031c

08001b40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b48:	f7ff fff0 	bl	8001b2c <HAL_GetTick>
 8001b4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b58:	d005      	beq.n	8001b66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b5a:	4b0a      	ldr	r3, [pc, #40]	; (8001b84 <HAL_Delay+0x44>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	461a      	mov	r2, r3
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	4413      	add	r3, r2
 8001b64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b66:	bf00      	nop
 8001b68:	f7ff ffe0 	bl	8001b2c <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	68fa      	ldr	r2, [r7, #12]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d8f7      	bhi.n	8001b68 <HAL_Delay+0x28>
  {
  }
}
 8001b78:	bf00      	nop
 8001b7a:	bf00      	nop
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	20000008 	.word	0x20000008

08001b88 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b90:	2300      	movs	r3, #0
 8001b92:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001b94:	2300      	movs	r3, #0
 8001b96:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d101      	bne.n	8001baa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e0be      	b.n	8001d28 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d109      	bne.n	8001bcc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7ff fd44 	bl	8001654 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f000 fb93 	bl	80022f8 <ADC_ConversionStop_Disable>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bda:	f003 0310 	and.w	r3, r3, #16
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f040 8099 	bne.w	8001d16 <HAL_ADC_Init+0x18e>
 8001be4:	7dfb      	ldrb	r3, [r7, #23]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f040 8095 	bne.w	8001d16 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001bf4:	f023 0302 	bic.w	r3, r3, #2
 8001bf8:	f043 0202 	orr.w	r2, r3, #2
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c08:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	7b1b      	ldrb	r3, [r3, #12]
 8001c0e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001c10:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c12:	68ba      	ldr	r2, [r7, #8]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c20:	d003      	beq.n	8001c2a <HAL_ADC_Init+0xa2>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d102      	bne.n	8001c30 <HAL_ADC_Init+0xa8>
 8001c2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c2e:	e000      	b.n	8001c32 <HAL_ADC_Init+0xaa>
 8001c30:	2300      	movs	r3, #0
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	7d1b      	ldrb	r3, [r3, #20]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d119      	bne.n	8001c74 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	7b1b      	ldrb	r3, [r3, #12]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d109      	bne.n	8001c5c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	3b01      	subs	r3, #1
 8001c4e:	035a      	lsls	r2, r3, #13
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c58:	613b      	str	r3, [r7, #16]
 8001c5a:	e00b      	b.n	8001c74 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c60:	f043 0220 	orr.w	r2, r3, #32
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6c:	f043 0201 	orr.w	r2, r3, #1
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	430a      	orrs	r2, r1
 8001c86:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	689a      	ldr	r2, [r3, #8]
 8001c8e:	4b28      	ldr	r3, [pc, #160]	; (8001d30 <HAL_ADC_Init+0x1a8>)
 8001c90:	4013      	ands	r3, r2
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	6812      	ldr	r2, [r2, #0]
 8001c96:	68b9      	ldr	r1, [r7, #8]
 8001c98:	430b      	orrs	r3, r1
 8001c9a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ca4:	d003      	beq.n	8001cae <HAL_ADC_Init+0x126>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d104      	bne.n	8001cb8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	051b      	lsls	r3, r3, #20
 8001cb6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cbe:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	68fa      	ldr	r2, [r7, #12]
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	689a      	ldr	r2, [r3, #8]
 8001cd2:	4b18      	ldr	r3, [pc, #96]	; (8001d34 <HAL_ADC_Init+0x1ac>)
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	68ba      	ldr	r2, [r7, #8]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d10b      	bne.n	8001cf4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce6:	f023 0303 	bic.w	r3, r3, #3
 8001cea:	f043 0201 	orr.w	r2, r3, #1
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001cf2:	e018      	b.n	8001d26 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf8:	f023 0312 	bic.w	r3, r3, #18
 8001cfc:	f043 0210 	orr.w	r2, r3, #16
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d08:	f043 0201 	orr.w	r2, r3, #1
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d14:	e007      	b.n	8001d26 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d1a:	f043 0210 	orr.w	r2, r3, #16
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001d26:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3718      	adds	r7, #24
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	ffe1f7fd 	.word	0xffe1f7fd
 8001d34:	ff1f0efe 	.word	0xff1f0efe

08001d38 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d40:	2300      	movs	r3, #0
 8001d42:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d101      	bne.n	8001d52 <HAL_ADC_Start_IT+0x1a>
 8001d4e:	2302      	movs	r3, #2
 8001d50:	e0a0      	b.n	8001e94 <HAL_ADC_Start_IT+0x15c>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2201      	movs	r2, #1
 8001d56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 fa72 	bl	8002244 <ADC_Enable>
 8001d60:	4603      	mov	r3, r0
 8001d62:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001d64:	7bfb      	ldrb	r3, [r7, #15]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f040 808f 	bne.w	8001e8a <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d70:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d74:	f023 0301 	bic.w	r3, r3, #1
 8001d78:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a45      	ldr	r2, [pc, #276]	; (8001e9c <HAL_ADC_Start_IT+0x164>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d105      	bne.n	8001d96 <HAL_ADC_Start_IT+0x5e>
 8001d8a:	4b45      	ldr	r3, [pc, #276]	; (8001ea0 <HAL_ADC_Start_IT+0x168>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d115      	bne.n	8001dc2 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d9a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d026      	beq.n	8001dfe <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001db8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001dc0:	e01d      	b.n	8001dfe <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a33      	ldr	r2, [pc, #204]	; (8001ea0 <HAL_ADC_Start_IT+0x168>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d004      	beq.n	8001de2 <HAL_ADC_Start_IT+0xaa>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a2f      	ldr	r2, [pc, #188]	; (8001e9c <HAL_ADC_Start_IT+0x164>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d10d      	bne.n	8001dfe <HAL_ADC_Start_IT+0xc6>
 8001de2:	4b2f      	ldr	r3, [pc, #188]	; (8001ea0 <HAL_ADC_Start_IT+0x168>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d007      	beq.n	8001dfe <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001df6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d006      	beq.n	8001e18 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e0e:	f023 0206 	bic.w	r2, r3, #6
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e16:	e002      	b.n	8001e1e <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f06f 0202 	mvn.w	r2, #2
 8001e2e:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	685a      	ldr	r2, [r3, #4]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f042 0220 	orr.w	r2, r2, #32
 8001e3e:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001e4a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001e4e:	d113      	bne.n	8001e78 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001e54:	4a11      	ldr	r2, [pc, #68]	; (8001e9c <HAL_ADC_Start_IT+0x164>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d105      	bne.n	8001e66 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001e5a:	4b11      	ldr	r3, [pc, #68]	; (8001ea0 <HAL_ADC_Start_IT+0x168>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d108      	bne.n	8001e78 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	689a      	ldr	r2, [r3, #8]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001e74:	609a      	str	r2, [r3, #8]
 8001e76:	e00c      	b.n	8001e92 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	689a      	ldr	r2, [r3, #8]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001e86:	609a      	str	r2, [r3, #8]
 8001e88:	e003      	b.n	8001e92 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3710      	adds	r7, #16
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40012800 	.word	0x40012800
 8001ea0:	40012400 	.word	0x40012400

08001ea4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bc80      	pop	{r7}
 8001eba:	4770      	bx	lr

08001ebc <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f003 0320 	and.w	r3, r3, #32
 8001ece:	2b20      	cmp	r3, #32
 8001ed0:	d140      	bne.n	8001f54 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0302 	and.w	r3, r3, #2
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d139      	bne.n	8001f54 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee4:	f003 0310 	and.w	r3, r3, #16
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d105      	bne.n	8001ef8 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001f02:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001f06:	d11d      	bne.n	8001f44 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d119      	bne.n	8001f44 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	685a      	ldr	r2, [r3, #4]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f022 0220 	bic.w	r2, r2, #32
 8001f1e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f24:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d105      	bne.n	8001f44 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f3c:	f043 0201 	orr.w	r2, r3, #1
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f7fe ff2b 	bl	8000da0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f06f 0212 	mvn.w	r2, #18
 8001f52:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f5e:	2b80      	cmp	r3, #128	; 0x80
 8001f60:	d14f      	bne.n	8002002 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0304 	and.w	r3, r3, #4
 8001f6c:	2b04      	cmp	r3, #4
 8001f6e:	d148      	bne.n	8002002 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f74:	f003 0310 	and.w	r3, r3, #16
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d105      	bne.n	8001f88 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f80:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001f92:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001f96:	d012      	beq.n	8001fbe <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d125      	bne.n	8001ff2 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001fb0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001fb4:	d11d      	bne.n	8001ff2 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d119      	bne.n	8001ff2 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	685a      	ldr	r2, [r3, #4]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fcc:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d105      	bne.n	8001ff2 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fea:	f043 0201 	orr.w	r2, r3, #1
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 f9c1 	bl	800237a <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f06f 020c 	mvn.w	r2, #12
 8002000:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800200c:	2b40      	cmp	r3, #64	; 0x40
 800200e:	d114      	bne.n	800203a <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	2b01      	cmp	r3, #1
 800201c:	d10d      	bne.n	800203a <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002022:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 f809 	bl	8002042 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f06f 0201 	mvn.w	r2, #1
 8002038:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800203a:	bf00      	nop
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002042:	b480      	push	{r7}
 8002044:	b083      	sub	sp, #12
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800204a:	bf00      	nop
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	bc80      	pop	{r7}
 8002052:	4770      	bx	lr

08002054 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800205e:	2300      	movs	r3, #0
 8002060:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002062:	2300      	movs	r3, #0
 8002064:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800206c:	2b01      	cmp	r3, #1
 800206e:	d101      	bne.n	8002074 <HAL_ADC_ConfigChannel+0x20>
 8002070:	2302      	movs	r3, #2
 8002072:	e0dc      	b.n	800222e <HAL_ADC_ConfigChannel+0x1da>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	2b06      	cmp	r3, #6
 8002082:	d81c      	bhi.n	80020be <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685a      	ldr	r2, [r3, #4]
 800208e:	4613      	mov	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	4413      	add	r3, r2
 8002094:	3b05      	subs	r3, #5
 8002096:	221f      	movs	r2, #31
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	43db      	mvns	r3, r3
 800209e:	4019      	ands	r1, r3
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	6818      	ldr	r0, [r3, #0]
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685a      	ldr	r2, [r3, #4]
 80020a8:	4613      	mov	r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	4413      	add	r3, r2
 80020ae:	3b05      	subs	r3, #5
 80020b0:	fa00 f203 	lsl.w	r2, r0, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	430a      	orrs	r2, r1
 80020ba:	635a      	str	r2, [r3, #52]	; 0x34
 80020bc:	e03c      	b.n	8002138 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	2b0c      	cmp	r3, #12
 80020c4:	d81c      	bhi.n	8002100 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685a      	ldr	r2, [r3, #4]
 80020d0:	4613      	mov	r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	4413      	add	r3, r2
 80020d6:	3b23      	subs	r3, #35	; 0x23
 80020d8:	221f      	movs	r2, #31
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	43db      	mvns	r3, r3
 80020e0:	4019      	ands	r1, r3
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	6818      	ldr	r0, [r3, #0]
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685a      	ldr	r2, [r3, #4]
 80020ea:	4613      	mov	r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	4413      	add	r3, r2
 80020f0:	3b23      	subs	r3, #35	; 0x23
 80020f2:	fa00 f203 	lsl.w	r2, r0, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	430a      	orrs	r2, r1
 80020fc:	631a      	str	r2, [r3, #48]	; 0x30
 80020fe:	e01b      	b.n	8002138 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685a      	ldr	r2, [r3, #4]
 800210a:	4613      	mov	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4413      	add	r3, r2
 8002110:	3b41      	subs	r3, #65	; 0x41
 8002112:	221f      	movs	r2, #31
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	43db      	mvns	r3, r3
 800211a:	4019      	ands	r1, r3
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	6818      	ldr	r0, [r3, #0]
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685a      	ldr	r2, [r3, #4]
 8002124:	4613      	mov	r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	4413      	add	r3, r2
 800212a:	3b41      	subs	r3, #65	; 0x41
 800212c:	fa00 f203 	lsl.w	r2, r0, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	430a      	orrs	r2, r1
 8002136:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2b09      	cmp	r3, #9
 800213e:	d91c      	bls.n	800217a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	68d9      	ldr	r1, [r3, #12]
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	4613      	mov	r3, r2
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	4413      	add	r3, r2
 8002150:	3b1e      	subs	r3, #30
 8002152:	2207      	movs	r2, #7
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	43db      	mvns	r3, r3
 800215a:	4019      	ands	r1, r3
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	6898      	ldr	r0, [r3, #8]
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	4613      	mov	r3, r2
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	4413      	add	r3, r2
 800216a:	3b1e      	subs	r3, #30
 800216c:	fa00 f203 	lsl.w	r2, r0, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	430a      	orrs	r2, r1
 8002176:	60da      	str	r2, [r3, #12]
 8002178:	e019      	b.n	80021ae <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	6919      	ldr	r1, [r3, #16]
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	4613      	mov	r3, r2
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	4413      	add	r3, r2
 800218a:	2207      	movs	r2, #7
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	43db      	mvns	r3, r3
 8002192:	4019      	ands	r1, r3
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	6898      	ldr	r0, [r3, #8]
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	4613      	mov	r3, r2
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	4413      	add	r3, r2
 80021a2:	fa00 f203 	lsl.w	r2, r0, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	430a      	orrs	r2, r1
 80021ac:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2b10      	cmp	r3, #16
 80021b4:	d003      	beq.n	80021be <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80021ba:	2b11      	cmp	r3, #17
 80021bc:	d132      	bne.n	8002224 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a1d      	ldr	r2, [pc, #116]	; (8002238 <HAL_ADC_ConfigChannel+0x1e4>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d125      	bne.n	8002214 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d126      	bne.n	8002224 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	689a      	ldr	r2, [r3, #8]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80021e4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2b10      	cmp	r3, #16
 80021ec:	d11a      	bne.n	8002224 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021ee:	4b13      	ldr	r3, [pc, #76]	; (800223c <HAL_ADC_ConfigChannel+0x1e8>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a13      	ldr	r2, [pc, #76]	; (8002240 <HAL_ADC_ConfigChannel+0x1ec>)
 80021f4:	fba2 2303 	umull	r2, r3, r2, r3
 80021f8:	0c9a      	lsrs	r2, r3, #18
 80021fa:	4613      	mov	r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	4413      	add	r3, r2
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002204:	e002      	b.n	800220c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	3b01      	subs	r3, #1
 800220a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1f9      	bne.n	8002206 <HAL_ADC_ConfigChannel+0x1b2>
 8002212:	e007      	b.n	8002224 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002218:	f043 0220 	orr.w	r2, r3, #32
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800222c:	7bfb      	ldrb	r3, [r7, #15]
}
 800222e:	4618      	mov	r0, r3
 8002230:	3714      	adds	r7, #20
 8002232:	46bd      	mov	sp, r7
 8002234:	bc80      	pop	{r7}
 8002236:	4770      	bx	lr
 8002238:	40012400 	.word	0x40012400
 800223c:	20000000 	.word	0x20000000
 8002240:	431bde83 	.word	0x431bde83

08002244 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800224c:	2300      	movs	r3, #0
 800224e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002250:	2300      	movs	r3, #0
 8002252:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b01      	cmp	r3, #1
 8002260:	d040      	beq.n	80022e4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	689a      	ldr	r2, [r3, #8]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f042 0201 	orr.w	r2, r2, #1
 8002270:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002272:	4b1f      	ldr	r3, [pc, #124]	; (80022f0 <ADC_Enable+0xac>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a1f      	ldr	r2, [pc, #124]	; (80022f4 <ADC_Enable+0xb0>)
 8002278:	fba2 2303 	umull	r2, r3, r2, r3
 800227c:	0c9b      	lsrs	r3, r3, #18
 800227e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002280:	e002      	b.n	8002288 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	3b01      	subs	r3, #1
 8002286:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d1f9      	bne.n	8002282 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800228e:	f7ff fc4d 	bl	8001b2c <HAL_GetTick>
 8002292:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002294:	e01f      	b.n	80022d6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002296:	f7ff fc49 	bl	8001b2c <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d918      	bls.n	80022d6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d011      	beq.n	80022d6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b6:	f043 0210 	orr.w	r2, r3, #16
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c2:	f043 0201 	orr.w	r2, r3, #1
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e007      	b.n	80022e6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f003 0301 	and.w	r3, r3, #1
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d1d8      	bne.n	8002296 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	20000000 	.word	0x20000000
 80022f4:	431bde83 	.word	0x431bde83

080022f8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002300:	2300      	movs	r3, #0
 8002302:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b01      	cmp	r3, #1
 8002310:	d12e      	bne.n	8002370 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	689a      	ldr	r2, [r3, #8]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f022 0201 	bic.w	r2, r2, #1
 8002320:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002322:	f7ff fc03 	bl	8001b2c <HAL_GetTick>
 8002326:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002328:	e01b      	b.n	8002362 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800232a:	f7ff fbff 	bl	8001b2c <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	2b02      	cmp	r3, #2
 8002336:	d914      	bls.n	8002362 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b01      	cmp	r3, #1
 8002344:	d10d      	bne.n	8002362 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800234a:	f043 0210 	orr.w	r2, r3, #16
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002356:	f043 0201 	orr.w	r2, r3, #1
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e007      	b.n	8002372 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f003 0301 	and.w	r3, r3, #1
 800236c:	2b01      	cmp	r3, #1
 800236e:	d0dc      	beq.n	800232a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3710      	adds	r7, #16
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800237a:	b480      	push	{r7}
 800237c:	b083      	sub	sp, #12
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002382:	bf00      	nop
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	bc80      	pop	{r7}
 800238a:	4770      	bx	lr

0800238c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f003 0307 	and.w	r3, r3, #7
 800239a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800239c:	4b0c      	ldr	r3, [pc, #48]	; (80023d0 <__NVIC_SetPriorityGrouping+0x44>)
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023a2:	68ba      	ldr	r2, [r7, #8]
 80023a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023a8:	4013      	ands	r3, r2
 80023aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023be:	4a04      	ldr	r2, [pc, #16]	; (80023d0 <__NVIC_SetPriorityGrouping+0x44>)
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	60d3      	str	r3, [r2, #12]
}
 80023c4:	bf00      	nop
 80023c6:	3714      	adds	r7, #20
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bc80      	pop	{r7}
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	e000ed00 	.word	0xe000ed00

080023d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023d8:	4b04      	ldr	r3, [pc, #16]	; (80023ec <__NVIC_GetPriorityGrouping+0x18>)
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	0a1b      	lsrs	r3, r3, #8
 80023de:	f003 0307 	and.w	r3, r3, #7
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bc80      	pop	{r7}
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	e000ed00 	.word	0xe000ed00

080023f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4603      	mov	r3, r0
 80023f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	db0b      	blt.n	800241a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002402:	79fb      	ldrb	r3, [r7, #7]
 8002404:	f003 021f 	and.w	r2, r3, #31
 8002408:	4906      	ldr	r1, [pc, #24]	; (8002424 <__NVIC_EnableIRQ+0x34>)
 800240a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240e:	095b      	lsrs	r3, r3, #5
 8002410:	2001      	movs	r0, #1
 8002412:	fa00 f202 	lsl.w	r2, r0, r2
 8002416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800241a:	bf00      	nop
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	bc80      	pop	{r7}
 8002422:	4770      	bx	lr
 8002424:	e000e100 	.word	0xe000e100

08002428 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	4603      	mov	r3, r0
 8002430:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002436:	2b00      	cmp	r3, #0
 8002438:	db0c      	blt.n	8002454 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800243a:	79fb      	ldrb	r3, [r7, #7]
 800243c:	f003 021f 	and.w	r2, r3, #31
 8002440:	4907      	ldr	r1, [pc, #28]	; (8002460 <__NVIC_ClearPendingIRQ+0x38>)
 8002442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002446:	095b      	lsrs	r3, r3, #5
 8002448:	2001      	movs	r0, #1
 800244a:	fa00 f202 	lsl.w	r2, r0, r2
 800244e:	3360      	adds	r3, #96	; 0x60
 8002450:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	bc80      	pop	{r7}
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	e000e100 	.word	0xe000e100

08002464 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	4603      	mov	r3, r0
 800246c:	6039      	str	r1, [r7, #0]
 800246e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002474:	2b00      	cmp	r3, #0
 8002476:	db0a      	blt.n	800248e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	b2da      	uxtb	r2, r3
 800247c:	490c      	ldr	r1, [pc, #48]	; (80024b0 <__NVIC_SetPriority+0x4c>)
 800247e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002482:	0112      	lsls	r2, r2, #4
 8002484:	b2d2      	uxtb	r2, r2
 8002486:	440b      	add	r3, r1
 8002488:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800248c:	e00a      	b.n	80024a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	b2da      	uxtb	r2, r3
 8002492:	4908      	ldr	r1, [pc, #32]	; (80024b4 <__NVIC_SetPriority+0x50>)
 8002494:	79fb      	ldrb	r3, [r7, #7]
 8002496:	f003 030f 	and.w	r3, r3, #15
 800249a:	3b04      	subs	r3, #4
 800249c:	0112      	lsls	r2, r2, #4
 800249e:	b2d2      	uxtb	r2, r2
 80024a0:	440b      	add	r3, r1
 80024a2:	761a      	strb	r2, [r3, #24]
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bc80      	pop	{r7}
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	e000e100 	.word	0xe000e100
 80024b4:	e000ed00 	.word	0xe000ed00

080024b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b089      	sub	sp, #36	; 0x24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f003 0307 	and.w	r3, r3, #7
 80024ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	f1c3 0307 	rsb	r3, r3, #7
 80024d2:	2b04      	cmp	r3, #4
 80024d4:	bf28      	it	cs
 80024d6:	2304      	movcs	r3, #4
 80024d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	3304      	adds	r3, #4
 80024de:	2b06      	cmp	r3, #6
 80024e0:	d902      	bls.n	80024e8 <NVIC_EncodePriority+0x30>
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	3b03      	subs	r3, #3
 80024e6:	e000      	b.n	80024ea <NVIC_EncodePriority+0x32>
 80024e8:	2300      	movs	r3, #0
 80024ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024ec:	f04f 32ff 	mov.w	r2, #4294967295
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	43da      	mvns	r2, r3
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	401a      	ands	r2, r3
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002500:	f04f 31ff 	mov.w	r1, #4294967295
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	fa01 f303 	lsl.w	r3, r1, r3
 800250a:	43d9      	mvns	r1, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002510:	4313      	orrs	r3, r2
         );
}
 8002512:	4618      	mov	r0, r3
 8002514:	3724      	adds	r7, #36	; 0x24
 8002516:	46bd      	mov	sp, r7
 8002518:	bc80      	pop	{r7}
 800251a:	4770      	bx	lr

0800251c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	3b01      	subs	r3, #1
 8002528:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800252c:	d301      	bcc.n	8002532 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800252e:	2301      	movs	r3, #1
 8002530:	e00f      	b.n	8002552 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002532:	4a0a      	ldr	r2, [pc, #40]	; (800255c <SysTick_Config+0x40>)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	3b01      	subs	r3, #1
 8002538:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800253a:	210f      	movs	r1, #15
 800253c:	f04f 30ff 	mov.w	r0, #4294967295
 8002540:	f7ff ff90 	bl	8002464 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002544:	4b05      	ldr	r3, [pc, #20]	; (800255c <SysTick_Config+0x40>)
 8002546:	2200      	movs	r2, #0
 8002548:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800254a:	4b04      	ldr	r3, [pc, #16]	; (800255c <SysTick_Config+0x40>)
 800254c:	2207      	movs	r2, #7
 800254e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	e000e010 	.word	0xe000e010

08002560 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f7ff ff0f 	bl	800238c <__NVIC_SetPriorityGrouping>
}
 800256e:	bf00      	nop
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002576:	b580      	push	{r7, lr}
 8002578:	b086      	sub	sp, #24
 800257a:	af00      	add	r7, sp, #0
 800257c:	4603      	mov	r3, r0
 800257e:	60b9      	str	r1, [r7, #8]
 8002580:	607a      	str	r2, [r7, #4]
 8002582:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002584:	2300      	movs	r3, #0
 8002586:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002588:	f7ff ff24 	bl	80023d4 <__NVIC_GetPriorityGrouping>
 800258c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	68b9      	ldr	r1, [r7, #8]
 8002592:	6978      	ldr	r0, [r7, #20]
 8002594:	f7ff ff90 	bl	80024b8 <NVIC_EncodePriority>
 8002598:	4602      	mov	r2, r0
 800259a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800259e:	4611      	mov	r1, r2
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff ff5f 	bl	8002464 <__NVIC_SetPriority>
}
 80025a6:	bf00      	nop
 80025a8:	3718      	adds	r7, #24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b082      	sub	sp, #8
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	4603      	mov	r3, r0
 80025b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff ff17 	bl	80023f0 <__NVIC_EnableIRQ>
}
 80025c2:	bf00      	nop
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b082      	sub	sp, #8
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f7ff ffa2 	bl	800251c <SysTick_Config>
 80025d8:	4603      	mov	r3, r0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b082      	sub	sp, #8
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	4603      	mov	r3, r0
 80025ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80025ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7ff ff19 	bl	8002428 <__NVIC_ClearPendingIRQ>
}
 80025f6:	bf00      	nop
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
	...

08002600 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002600:	b480      	push	{r7}
 8002602:	b08b      	sub	sp, #44	; 0x2c
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800260a:	2300      	movs	r3, #0
 800260c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800260e:	2300      	movs	r3, #0
 8002610:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002612:	e169      	b.n	80028e8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002614:	2201      	movs	r2, #1
 8002616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	69fa      	ldr	r2, [r7, #28]
 8002624:	4013      	ands	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	429a      	cmp	r2, r3
 800262e:	f040 8158 	bne.w	80028e2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	4a9a      	ldr	r2, [pc, #616]	; (80028a0 <HAL_GPIO_Init+0x2a0>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d05e      	beq.n	80026fa <HAL_GPIO_Init+0xfa>
 800263c:	4a98      	ldr	r2, [pc, #608]	; (80028a0 <HAL_GPIO_Init+0x2a0>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d875      	bhi.n	800272e <HAL_GPIO_Init+0x12e>
 8002642:	4a98      	ldr	r2, [pc, #608]	; (80028a4 <HAL_GPIO_Init+0x2a4>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d058      	beq.n	80026fa <HAL_GPIO_Init+0xfa>
 8002648:	4a96      	ldr	r2, [pc, #600]	; (80028a4 <HAL_GPIO_Init+0x2a4>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d86f      	bhi.n	800272e <HAL_GPIO_Init+0x12e>
 800264e:	4a96      	ldr	r2, [pc, #600]	; (80028a8 <HAL_GPIO_Init+0x2a8>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d052      	beq.n	80026fa <HAL_GPIO_Init+0xfa>
 8002654:	4a94      	ldr	r2, [pc, #592]	; (80028a8 <HAL_GPIO_Init+0x2a8>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d869      	bhi.n	800272e <HAL_GPIO_Init+0x12e>
 800265a:	4a94      	ldr	r2, [pc, #592]	; (80028ac <HAL_GPIO_Init+0x2ac>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d04c      	beq.n	80026fa <HAL_GPIO_Init+0xfa>
 8002660:	4a92      	ldr	r2, [pc, #584]	; (80028ac <HAL_GPIO_Init+0x2ac>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d863      	bhi.n	800272e <HAL_GPIO_Init+0x12e>
 8002666:	4a92      	ldr	r2, [pc, #584]	; (80028b0 <HAL_GPIO_Init+0x2b0>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d046      	beq.n	80026fa <HAL_GPIO_Init+0xfa>
 800266c:	4a90      	ldr	r2, [pc, #576]	; (80028b0 <HAL_GPIO_Init+0x2b0>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d85d      	bhi.n	800272e <HAL_GPIO_Init+0x12e>
 8002672:	2b12      	cmp	r3, #18
 8002674:	d82a      	bhi.n	80026cc <HAL_GPIO_Init+0xcc>
 8002676:	2b12      	cmp	r3, #18
 8002678:	d859      	bhi.n	800272e <HAL_GPIO_Init+0x12e>
 800267a:	a201      	add	r2, pc, #4	; (adr r2, 8002680 <HAL_GPIO_Init+0x80>)
 800267c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002680:	080026fb 	.word	0x080026fb
 8002684:	080026d5 	.word	0x080026d5
 8002688:	080026e7 	.word	0x080026e7
 800268c:	08002729 	.word	0x08002729
 8002690:	0800272f 	.word	0x0800272f
 8002694:	0800272f 	.word	0x0800272f
 8002698:	0800272f 	.word	0x0800272f
 800269c:	0800272f 	.word	0x0800272f
 80026a0:	0800272f 	.word	0x0800272f
 80026a4:	0800272f 	.word	0x0800272f
 80026a8:	0800272f 	.word	0x0800272f
 80026ac:	0800272f 	.word	0x0800272f
 80026b0:	0800272f 	.word	0x0800272f
 80026b4:	0800272f 	.word	0x0800272f
 80026b8:	0800272f 	.word	0x0800272f
 80026bc:	0800272f 	.word	0x0800272f
 80026c0:	0800272f 	.word	0x0800272f
 80026c4:	080026dd 	.word	0x080026dd
 80026c8:	080026f1 	.word	0x080026f1
 80026cc:	4a79      	ldr	r2, [pc, #484]	; (80028b4 <HAL_GPIO_Init+0x2b4>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d013      	beq.n	80026fa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80026d2:	e02c      	b.n	800272e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	623b      	str	r3, [r7, #32]
          break;
 80026da:	e029      	b.n	8002730 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	3304      	adds	r3, #4
 80026e2:	623b      	str	r3, [r7, #32]
          break;
 80026e4:	e024      	b.n	8002730 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	3308      	adds	r3, #8
 80026ec:	623b      	str	r3, [r7, #32]
          break;
 80026ee:	e01f      	b.n	8002730 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	330c      	adds	r3, #12
 80026f6:	623b      	str	r3, [r7, #32]
          break;
 80026f8:	e01a      	b.n	8002730 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d102      	bne.n	8002708 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002702:	2304      	movs	r3, #4
 8002704:	623b      	str	r3, [r7, #32]
          break;
 8002706:	e013      	b.n	8002730 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d105      	bne.n	800271c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002710:	2308      	movs	r3, #8
 8002712:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	69fa      	ldr	r2, [r7, #28]
 8002718:	611a      	str	r2, [r3, #16]
          break;
 800271a:	e009      	b.n	8002730 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800271c:	2308      	movs	r3, #8
 800271e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	69fa      	ldr	r2, [r7, #28]
 8002724:	615a      	str	r2, [r3, #20]
          break;
 8002726:	e003      	b.n	8002730 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002728:	2300      	movs	r3, #0
 800272a:	623b      	str	r3, [r7, #32]
          break;
 800272c:	e000      	b.n	8002730 <HAL_GPIO_Init+0x130>
          break;
 800272e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	2bff      	cmp	r3, #255	; 0xff
 8002734:	d801      	bhi.n	800273a <HAL_GPIO_Init+0x13a>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	e001      	b.n	800273e <HAL_GPIO_Init+0x13e>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	3304      	adds	r3, #4
 800273e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	2bff      	cmp	r3, #255	; 0xff
 8002744:	d802      	bhi.n	800274c <HAL_GPIO_Init+0x14c>
 8002746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	e002      	b.n	8002752 <HAL_GPIO_Init+0x152>
 800274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274e:	3b08      	subs	r3, #8
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	210f      	movs	r1, #15
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	fa01 f303 	lsl.w	r3, r1, r3
 8002760:	43db      	mvns	r3, r3
 8002762:	401a      	ands	r2, r3
 8002764:	6a39      	ldr	r1, [r7, #32]
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	fa01 f303 	lsl.w	r3, r1, r3
 800276c:	431a      	orrs	r2, r3
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800277a:	2b00      	cmp	r3, #0
 800277c:	f000 80b1 	beq.w	80028e2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002780:	4b4d      	ldr	r3, [pc, #308]	; (80028b8 <HAL_GPIO_Init+0x2b8>)
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	4a4c      	ldr	r2, [pc, #304]	; (80028b8 <HAL_GPIO_Init+0x2b8>)
 8002786:	f043 0301 	orr.w	r3, r3, #1
 800278a:	6193      	str	r3, [r2, #24]
 800278c:	4b4a      	ldr	r3, [pc, #296]	; (80028b8 <HAL_GPIO_Init+0x2b8>)
 800278e:	699b      	ldr	r3, [r3, #24]
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	60bb      	str	r3, [r7, #8]
 8002796:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002798:	4a48      	ldr	r2, [pc, #288]	; (80028bc <HAL_GPIO_Init+0x2bc>)
 800279a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279c:	089b      	lsrs	r3, r3, #2
 800279e:	3302      	adds	r3, #2
 80027a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027a4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80027a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a8:	f003 0303 	and.w	r3, r3, #3
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	220f      	movs	r2, #15
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	43db      	mvns	r3, r3
 80027b6:	68fa      	ldr	r2, [r7, #12]
 80027b8:	4013      	ands	r3, r2
 80027ba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4a40      	ldr	r2, [pc, #256]	; (80028c0 <HAL_GPIO_Init+0x2c0>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d013      	beq.n	80027ec <HAL_GPIO_Init+0x1ec>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4a3f      	ldr	r2, [pc, #252]	; (80028c4 <HAL_GPIO_Init+0x2c4>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d00d      	beq.n	80027e8 <HAL_GPIO_Init+0x1e8>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a3e      	ldr	r2, [pc, #248]	; (80028c8 <HAL_GPIO_Init+0x2c8>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d007      	beq.n	80027e4 <HAL_GPIO_Init+0x1e4>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a3d      	ldr	r2, [pc, #244]	; (80028cc <HAL_GPIO_Init+0x2cc>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d101      	bne.n	80027e0 <HAL_GPIO_Init+0x1e0>
 80027dc:	2303      	movs	r3, #3
 80027de:	e006      	b.n	80027ee <HAL_GPIO_Init+0x1ee>
 80027e0:	2304      	movs	r3, #4
 80027e2:	e004      	b.n	80027ee <HAL_GPIO_Init+0x1ee>
 80027e4:	2302      	movs	r3, #2
 80027e6:	e002      	b.n	80027ee <HAL_GPIO_Init+0x1ee>
 80027e8:	2301      	movs	r3, #1
 80027ea:	e000      	b.n	80027ee <HAL_GPIO_Init+0x1ee>
 80027ec:	2300      	movs	r3, #0
 80027ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027f0:	f002 0203 	and.w	r2, r2, #3
 80027f4:	0092      	lsls	r2, r2, #2
 80027f6:	4093      	lsls	r3, r2
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80027fe:	492f      	ldr	r1, [pc, #188]	; (80028bc <HAL_GPIO_Init+0x2bc>)
 8002800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002802:	089b      	lsrs	r3, r3, #2
 8002804:	3302      	adds	r3, #2
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d006      	beq.n	8002826 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002818:	4b2d      	ldr	r3, [pc, #180]	; (80028d0 <HAL_GPIO_Init+0x2d0>)
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	492c      	ldr	r1, [pc, #176]	; (80028d0 <HAL_GPIO_Init+0x2d0>)
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	4313      	orrs	r3, r2
 8002822:	600b      	str	r3, [r1, #0]
 8002824:	e006      	b.n	8002834 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002826:	4b2a      	ldr	r3, [pc, #168]	; (80028d0 <HAL_GPIO_Init+0x2d0>)
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	43db      	mvns	r3, r3
 800282e:	4928      	ldr	r1, [pc, #160]	; (80028d0 <HAL_GPIO_Init+0x2d0>)
 8002830:	4013      	ands	r3, r2
 8002832:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d006      	beq.n	800284e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002840:	4b23      	ldr	r3, [pc, #140]	; (80028d0 <HAL_GPIO_Init+0x2d0>)
 8002842:	685a      	ldr	r2, [r3, #4]
 8002844:	4922      	ldr	r1, [pc, #136]	; (80028d0 <HAL_GPIO_Init+0x2d0>)
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	4313      	orrs	r3, r2
 800284a:	604b      	str	r3, [r1, #4]
 800284c:	e006      	b.n	800285c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800284e:	4b20      	ldr	r3, [pc, #128]	; (80028d0 <HAL_GPIO_Init+0x2d0>)
 8002850:	685a      	ldr	r2, [r3, #4]
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	43db      	mvns	r3, r3
 8002856:	491e      	ldr	r1, [pc, #120]	; (80028d0 <HAL_GPIO_Init+0x2d0>)
 8002858:	4013      	ands	r3, r2
 800285a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d006      	beq.n	8002876 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002868:	4b19      	ldr	r3, [pc, #100]	; (80028d0 <HAL_GPIO_Init+0x2d0>)
 800286a:	689a      	ldr	r2, [r3, #8]
 800286c:	4918      	ldr	r1, [pc, #96]	; (80028d0 <HAL_GPIO_Init+0x2d0>)
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	4313      	orrs	r3, r2
 8002872:	608b      	str	r3, [r1, #8]
 8002874:	e006      	b.n	8002884 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002876:	4b16      	ldr	r3, [pc, #88]	; (80028d0 <HAL_GPIO_Init+0x2d0>)
 8002878:	689a      	ldr	r2, [r3, #8]
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	43db      	mvns	r3, r3
 800287e:	4914      	ldr	r1, [pc, #80]	; (80028d0 <HAL_GPIO_Init+0x2d0>)
 8002880:	4013      	ands	r3, r2
 8002882:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d021      	beq.n	80028d4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002890:	4b0f      	ldr	r3, [pc, #60]	; (80028d0 <HAL_GPIO_Init+0x2d0>)
 8002892:	68da      	ldr	r2, [r3, #12]
 8002894:	490e      	ldr	r1, [pc, #56]	; (80028d0 <HAL_GPIO_Init+0x2d0>)
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	4313      	orrs	r3, r2
 800289a:	60cb      	str	r3, [r1, #12]
 800289c:	e021      	b.n	80028e2 <HAL_GPIO_Init+0x2e2>
 800289e:	bf00      	nop
 80028a0:	10320000 	.word	0x10320000
 80028a4:	10310000 	.word	0x10310000
 80028a8:	10220000 	.word	0x10220000
 80028ac:	10210000 	.word	0x10210000
 80028b0:	10120000 	.word	0x10120000
 80028b4:	10110000 	.word	0x10110000
 80028b8:	40021000 	.word	0x40021000
 80028bc:	40010000 	.word	0x40010000
 80028c0:	40010800 	.word	0x40010800
 80028c4:	40010c00 	.word	0x40010c00
 80028c8:	40011000 	.word	0x40011000
 80028cc:	40011400 	.word	0x40011400
 80028d0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80028d4:	4b0b      	ldr	r3, [pc, #44]	; (8002904 <HAL_GPIO_Init+0x304>)
 80028d6:	68da      	ldr	r2, [r3, #12]
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	43db      	mvns	r3, r3
 80028dc:	4909      	ldr	r1, [pc, #36]	; (8002904 <HAL_GPIO_Init+0x304>)
 80028de:	4013      	ands	r3, r2
 80028e0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80028e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e4:	3301      	adds	r3, #1
 80028e6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ee:	fa22 f303 	lsr.w	r3, r2, r3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f47f ae8e 	bne.w	8002614 <HAL_GPIO_Init+0x14>
  }
}
 80028f8:	bf00      	nop
 80028fa:	bf00      	nop
 80028fc:	372c      	adds	r7, #44	; 0x2c
 80028fe:	46bd      	mov	sp, r7
 8002900:	bc80      	pop	{r7}
 8002902:	4770      	bx	lr
 8002904:	40010400 	.word	0x40010400

08002908 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	460b      	mov	r3, r1
 8002912:	807b      	strh	r3, [r7, #2]
 8002914:	4613      	mov	r3, r2
 8002916:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002918:	787b      	ldrb	r3, [r7, #1]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d003      	beq.n	8002926 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800291e:	887a      	ldrh	r2, [r7, #2]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002924:	e003      	b.n	800292e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002926:	887b      	ldrh	r3, [r7, #2]
 8002928:	041a      	lsls	r2, r3, #16
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	611a      	str	r2, [r3, #16]
}
 800292e:	bf00      	nop
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	bc80      	pop	{r7}
 8002936:	4770      	bx	lr

08002938 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	4603      	mov	r3, r0
 8002940:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002942:	4b08      	ldr	r3, [pc, #32]	; (8002964 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002944:	695a      	ldr	r2, [r3, #20]
 8002946:	88fb      	ldrh	r3, [r7, #6]
 8002948:	4013      	ands	r3, r2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d006      	beq.n	800295c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800294e:	4a05      	ldr	r2, [pc, #20]	; (8002964 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002950:	88fb      	ldrh	r3, [r7, #6]
 8002952:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002954:	88fb      	ldrh	r3, [r7, #6]
 8002956:	4618      	mov	r0, r3
 8002958:	f7fe fb26 	bl	8000fa8 <HAL_GPIO_EXTI_Callback>
  }
}
 800295c:	bf00      	nop
 800295e:	3708      	adds	r7, #8
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	40010400 	.word	0x40010400

08002968 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e12b      	b.n	8002bd2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d106      	bne.n	8002994 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f7fe fed6 	bl	8001740 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2224      	movs	r2, #36	; 0x24
 8002998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f022 0201 	bic.w	r2, r2, #1
 80029aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029cc:	f000 ffea 	bl	80039a4 <HAL_RCC_GetPCLK1Freq>
 80029d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	4a81      	ldr	r2, [pc, #516]	; (8002bdc <HAL_I2C_Init+0x274>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d807      	bhi.n	80029ec <HAL_I2C_Init+0x84>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	4a80      	ldr	r2, [pc, #512]	; (8002be0 <HAL_I2C_Init+0x278>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	bf94      	ite	ls
 80029e4:	2301      	movls	r3, #1
 80029e6:	2300      	movhi	r3, #0
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	e006      	b.n	80029fa <HAL_I2C_Init+0x92>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	4a7d      	ldr	r2, [pc, #500]	; (8002be4 <HAL_I2C_Init+0x27c>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	bf94      	ite	ls
 80029f4:	2301      	movls	r3, #1
 80029f6:	2300      	movhi	r3, #0
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e0e7      	b.n	8002bd2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	4a78      	ldr	r2, [pc, #480]	; (8002be8 <HAL_I2C_Init+0x280>)
 8002a06:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0a:	0c9b      	lsrs	r3, r3, #18
 8002a0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68ba      	ldr	r2, [r7, #8]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	6a1b      	ldr	r3, [r3, #32]
 8002a28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	4a6a      	ldr	r2, [pc, #424]	; (8002bdc <HAL_I2C_Init+0x274>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d802      	bhi.n	8002a3c <HAL_I2C_Init+0xd4>
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	3301      	adds	r3, #1
 8002a3a:	e009      	b.n	8002a50 <HAL_I2C_Init+0xe8>
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a42:	fb02 f303 	mul.w	r3, r2, r3
 8002a46:	4a69      	ldr	r2, [pc, #420]	; (8002bec <HAL_I2C_Init+0x284>)
 8002a48:	fba2 2303 	umull	r2, r3, r2, r3
 8002a4c:	099b      	lsrs	r3, r3, #6
 8002a4e:	3301      	adds	r3, #1
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	6812      	ldr	r2, [r2, #0]
 8002a54:	430b      	orrs	r3, r1
 8002a56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a62:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	495c      	ldr	r1, [pc, #368]	; (8002bdc <HAL_I2C_Init+0x274>)
 8002a6c:	428b      	cmp	r3, r1
 8002a6e:	d819      	bhi.n	8002aa4 <HAL_I2C_Init+0x13c>
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	1e59      	subs	r1, r3, #1
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a7e:	1c59      	adds	r1, r3, #1
 8002a80:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a84:	400b      	ands	r3, r1
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00a      	beq.n	8002aa0 <HAL_I2C_Init+0x138>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	1e59      	subs	r1, r3, #1
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a98:	3301      	adds	r3, #1
 8002a9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a9e:	e051      	b.n	8002b44 <HAL_I2C_Init+0x1dc>
 8002aa0:	2304      	movs	r3, #4
 8002aa2:	e04f      	b.n	8002b44 <HAL_I2C_Init+0x1dc>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d111      	bne.n	8002ad0 <HAL_I2C_Init+0x168>
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	1e58      	subs	r0, r3, #1
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6859      	ldr	r1, [r3, #4]
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	440b      	add	r3, r1
 8002aba:	fbb0 f3f3 	udiv	r3, r0, r3
 8002abe:	3301      	adds	r3, #1
 8002ac0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	bf0c      	ite	eq
 8002ac8:	2301      	moveq	r3, #1
 8002aca:	2300      	movne	r3, #0
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	e012      	b.n	8002af6 <HAL_I2C_Init+0x18e>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	1e58      	subs	r0, r3, #1
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6859      	ldr	r1, [r3, #4]
 8002ad8:	460b      	mov	r3, r1
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	440b      	add	r3, r1
 8002ade:	0099      	lsls	r1, r3, #2
 8002ae0:	440b      	add	r3, r1
 8002ae2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	bf0c      	ite	eq
 8002af0:	2301      	moveq	r3, #1
 8002af2:	2300      	movne	r3, #0
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <HAL_I2C_Init+0x196>
 8002afa:	2301      	movs	r3, #1
 8002afc:	e022      	b.n	8002b44 <HAL_I2C_Init+0x1dc>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d10e      	bne.n	8002b24 <HAL_I2C_Init+0x1bc>
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	1e58      	subs	r0, r3, #1
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6859      	ldr	r1, [r3, #4]
 8002b0e:	460b      	mov	r3, r1
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	440b      	add	r3, r1
 8002b14:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b18:	3301      	adds	r3, #1
 8002b1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b22:	e00f      	b.n	8002b44 <HAL_I2C_Init+0x1dc>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	1e58      	subs	r0, r3, #1
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6859      	ldr	r1, [r3, #4]
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	440b      	add	r3, r1
 8002b32:	0099      	lsls	r1, r3, #2
 8002b34:	440b      	add	r3, r1
 8002b36:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b44:	6879      	ldr	r1, [r7, #4]
 8002b46:	6809      	ldr	r1, [r1, #0]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	69da      	ldr	r2, [r3, #28]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	430a      	orrs	r2, r1
 8002b66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	6911      	ldr	r1, [r2, #16]
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	68d2      	ldr	r2, [r2, #12]
 8002b7e:	4311      	orrs	r1, r2
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	6812      	ldr	r2, [r2, #0]
 8002b84:	430b      	orrs	r3, r1
 8002b86:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	695a      	ldr	r2, [r3, #20]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	431a      	orrs	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f042 0201 	orr.w	r2, r2, #1
 8002bb2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2220      	movs	r2, #32
 8002bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3710      	adds	r7, #16
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	000186a0 	.word	0x000186a0
 8002be0:	001e847f 	.word	0x001e847f
 8002be4:	003d08ff 	.word	0x003d08ff
 8002be8:	431bde83 	.word	0x431bde83
 8002bec:	10624dd3 	.word	0x10624dd3

08002bf0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b088      	sub	sp, #32
 8002bf4:	af02      	add	r7, sp, #8
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	607a      	str	r2, [r7, #4]
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	817b      	strh	r3, [r7, #10]
 8002c00:	4613      	mov	r3, r2
 8002c02:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c04:	f7fe ff92 	bl	8001b2c <HAL_GetTick>
 8002c08:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b20      	cmp	r3, #32
 8002c14:	f040 80e0 	bne.w	8002dd8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	9300      	str	r3, [sp, #0]
 8002c1c:	2319      	movs	r3, #25
 8002c1e:	2201      	movs	r2, #1
 8002c20:	4970      	ldr	r1, [pc, #448]	; (8002de4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f000 f964 	bl	8002ef0 <I2C_WaitOnFlagUntilTimeout>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002c2e:	2302      	movs	r3, #2
 8002c30:	e0d3      	b.n	8002dda <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d101      	bne.n	8002c40 <HAL_I2C_Master_Transmit+0x50>
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	e0cc      	b.n	8002dda <HAL_I2C_Master_Transmit+0x1ea>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d007      	beq.n	8002c66 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f042 0201 	orr.w	r2, r2, #1
 8002c64:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c74:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2221      	movs	r2, #33	; 0x21
 8002c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2210      	movs	r2, #16
 8002c82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	893a      	ldrh	r2, [r7, #8]
 8002c96:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c9c:	b29a      	uxth	r2, r3
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	4a50      	ldr	r2, [pc, #320]	; (8002de8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002ca6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ca8:	8979      	ldrh	r1, [r7, #10]
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	6a3a      	ldr	r2, [r7, #32]
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	f000 f89c 	bl	8002dec <I2C_MasterRequestWrite>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e08d      	b.n	8002dda <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	613b      	str	r3, [r7, #16]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	695b      	ldr	r3, [r3, #20]
 8002cc8:	613b      	str	r3, [r7, #16]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	613b      	str	r3, [r7, #16]
 8002cd2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002cd4:	e066      	b.n	8002da4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cd6:	697a      	ldr	r2, [r7, #20]
 8002cd8:	6a39      	ldr	r1, [r7, #32]
 8002cda:	68f8      	ldr	r0, [r7, #12]
 8002cdc:	f000 f9de 	bl	800309c <I2C_WaitOnTXEFlagUntilTimeout>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00d      	beq.n	8002d02 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cea:	2b04      	cmp	r3, #4
 8002cec:	d107      	bne.n	8002cfe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cfc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e06b      	b.n	8002dda <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d06:	781a      	ldrb	r2, [r3, #0]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d12:	1c5a      	adds	r2, r3, #1
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	b29a      	uxth	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	b29a      	uxth	r2, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	695b      	ldr	r3, [r3, #20]
 8002d38:	f003 0304 	and.w	r3, r3, #4
 8002d3c:	2b04      	cmp	r3, #4
 8002d3e:	d11b      	bne.n	8002d78 <HAL_I2C_Master_Transmit+0x188>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d017      	beq.n	8002d78 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4c:	781a      	ldrb	r2, [r3, #0]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d58:	1c5a      	adds	r2, r3, #1
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	3b01      	subs	r3, #1
 8002d66:	b29a      	uxth	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d70:	3b01      	subs	r3, #1
 8002d72:	b29a      	uxth	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d78:	697a      	ldr	r2, [r7, #20]
 8002d7a:	6a39      	ldr	r1, [r7, #32]
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	f000 f9ce 	bl	800311e <I2C_WaitOnBTFFlagUntilTimeout>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00d      	beq.n	8002da4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8c:	2b04      	cmp	r3, #4
 8002d8e:	d107      	bne.n	8002da0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d9e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e01a      	b.n	8002dda <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d194      	bne.n	8002cd6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2220      	movs	r2, #32
 8002dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	e000      	b.n	8002dda <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002dd8:	2302      	movs	r3, #2
  }
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3718      	adds	r7, #24
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	00100002 	.word	0x00100002
 8002de8:	ffff0000 	.word	0xffff0000

08002dec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b088      	sub	sp, #32
 8002df0:	af02      	add	r7, sp, #8
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	607a      	str	r2, [r7, #4]
 8002df6:	603b      	str	r3, [r7, #0]
 8002df8:	460b      	mov	r3, r1
 8002dfa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e00:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	2b08      	cmp	r3, #8
 8002e06:	d006      	beq.n	8002e16 <I2C_MasterRequestWrite+0x2a>
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d003      	beq.n	8002e16 <I2C_MasterRequestWrite+0x2a>
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e14:	d108      	bne.n	8002e28 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e24:	601a      	str	r2, [r3, #0]
 8002e26:	e00b      	b.n	8002e40 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2c:	2b12      	cmp	r3, #18
 8002e2e:	d107      	bne.n	8002e40 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e3e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	9300      	str	r3, [sp, #0]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e4c:	68f8      	ldr	r0, [r7, #12]
 8002e4e:	f000 f84f 	bl	8002ef0 <I2C_WaitOnFlagUntilTimeout>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d00d      	beq.n	8002e74 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e66:	d103      	bne.n	8002e70 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e6e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e035      	b.n	8002ee0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	691b      	ldr	r3, [r3, #16]
 8002e78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e7c:	d108      	bne.n	8002e90 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e7e:	897b      	ldrh	r3, [r7, #10]
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	461a      	mov	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e8c:	611a      	str	r2, [r3, #16]
 8002e8e:	e01b      	b.n	8002ec8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002e90:	897b      	ldrh	r3, [r7, #10]
 8002e92:	11db      	asrs	r3, r3, #7
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	f003 0306 	and.w	r3, r3, #6
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	f063 030f 	orn	r3, r3, #15
 8002ea0:	b2da      	uxtb	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	490e      	ldr	r1, [pc, #56]	; (8002ee8 <I2C_MasterRequestWrite+0xfc>)
 8002eae:	68f8      	ldr	r0, [r7, #12]
 8002eb0:	f000 f875 	bl	8002f9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e010      	b.n	8002ee0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002ebe:	897b      	ldrh	r3, [r7, #10]
 8002ec0:	b2da      	uxtb	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	4907      	ldr	r1, [pc, #28]	; (8002eec <I2C_MasterRequestWrite+0x100>)
 8002ece:	68f8      	ldr	r0, [r7, #12]
 8002ed0:	f000 f865 	bl	8002f9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e000      	b.n	8002ee0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002ede:	2300      	movs	r3, #0
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3718      	adds	r7, #24
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	00010008 	.word	0x00010008
 8002eec:	00010002 	.word	0x00010002

08002ef0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	603b      	str	r3, [r7, #0]
 8002efc:	4613      	mov	r3, r2
 8002efe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f00:	e025      	b.n	8002f4e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f08:	d021      	beq.n	8002f4e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f0a:	f7fe fe0f 	bl	8001b2c <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	683a      	ldr	r2, [r7, #0]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d302      	bcc.n	8002f20 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d116      	bne.n	8002f4e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2220      	movs	r2, #32
 8002f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3a:	f043 0220 	orr.w	r2, r3, #32
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e023      	b.n	8002f96 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	0c1b      	lsrs	r3, r3, #16
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d10d      	bne.n	8002f74 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	43da      	mvns	r2, r3
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	4013      	ands	r3, r2
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	bf0c      	ite	eq
 8002f6a:	2301      	moveq	r3, #1
 8002f6c:	2300      	movne	r3, #0
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	461a      	mov	r2, r3
 8002f72:	e00c      	b.n	8002f8e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	43da      	mvns	r2, r3
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	4013      	ands	r3, r2
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	bf0c      	ite	eq
 8002f86:	2301      	moveq	r3, #1
 8002f88:	2300      	movne	r3, #0
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	79fb      	ldrb	r3, [r7, #7]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d0b6      	beq.n	8002f02 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3710      	adds	r7, #16
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b084      	sub	sp, #16
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	60f8      	str	r0, [r7, #12]
 8002fa6:	60b9      	str	r1, [r7, #8]
 8002fa8:	607a      	str	r2, [r7, #4]
 8002faa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fac:	e051      	b.n	8003052 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	695b      	ldr	r3, [r3, #20]
 8002fb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fbc:	d123      	bne.n	8003006 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fcc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fd6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2220      	movs	r2, #32
 8002fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff2:	f043 0204 	orr.w	r2, r3, #4
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e046      	b.n	8003094 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800300c:	d021      	beq.n	8003052 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800300e:	f7fe fd8d 	bl	8001b2c <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	429a      	cmp	r2, r3
 800301c:	d302      	bcc.n	8003024 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d116      	bne.n	8003052 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2200      	movs	r2, #0
 8003028:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2220      	movs	r2, #32
 800302e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303e:	f043 0220 	orr.w	r2, r3, #32
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e020      	b.n	8003094 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	0c1b      	lsrs	r3, r3, #16
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2b01      	cmp	r3, #1
 800305a:	d10c      	bne.n	8003076 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	43da      	mvns	r2, r3
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	4013      	ands	r3, r2
 8003068:	b29b      	uxth	r3, r3
 800306a:	2b00      	cmp	r3, #0
 800306c:	bf14      	ite	ne
 800306e:	2301      	movne	r3, #1
 8003070:	2300      	moveq	r3, #0
 8003072:	b2db      	uxtb	r3, r3
 8003074:	e00b      	b.n	800308e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	43da      	mvns	r2, r3
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	4013      	ands	r3, r2
 8003082:	b29b      	uxth	r3, r3
 8003084:	2b00      	cmp	r3, #0
 8003086:	bf14      	ite	ne
 8003088:	2301      	movne	r3, #1
 800308a:	2300      	moveq	r3, #0
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d18d      	bne.n	8002fae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3710      	adds	r7, #16
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030a8:	e02d      	b.n	8003106 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030aa:	68f8      	ldr	r0, [r7, #12]
 80030ac:	f000 f878 	bl	80031a0 <I2C_IsAcknowledgeFailed>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e02d      	b.n	8003116 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c0:	d021      	beq.n	8003106 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030c2:	f7fe fd33 	bl	8001b2c <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	68ba      	ldr	r2, [r7, #8]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d302      	bcc.n	80030d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d116      	bne.n	8003106 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2220      	movs	r2, #32
 80030e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f2:	f043 0220 	orr.w	r2, r3, #32
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e007      	b.n	8003116 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	695b      	ldr	r3, [r3, #20]
 800310c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003110:	2b80      	cmp	r3, #128	; 0x80
 8003112:	d1ca      	bne.n	80030aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3710      	adds	r7, #16
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}

0800311e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800311e:	b580      	push	{r7, lr}
 8003120:	b084      	sub	sp, #16
 8003122:	af00      	add	r7, sp, #0
 8003124:	60f8      	str	r0, [r7, #12]
 8003126:	60b9      	str	r1, [r7, #8]
 8003128:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800312a:	e02d      	b.n	8003188 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800312c:	68f8      	ldr	r0, [r7, #12]
 800312e:	f000 f837 	bl	80031a0 <I2C_IsAcknowledgeFailed>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d001      	beq.n	800313c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e02d      	b.n	8003198 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003142:	d021      	beq.n	8003188 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003144:	f7fe fcf2 	bl	8001b2c <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	68ba      	ldr	r2, [r7, #8]
 8003150:	429a      	cmp	r2, r3
 8003152:	d302      	bcc.n	800315a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d116      	bne.n	8003188 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2220      	movs	r2, #32
 8003164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003174:	f043 0220 	orr.w	r2, r3, #32
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e007      	b.n	8003198 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	f003 0304 	and.w	r3, r3, #4
 8003192:	2b04      	cmp	r3, #4
 8003194:	d1ca      	bne.n	800312c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003196:	2300      	movs	r3, #0
}
 8003198:	4618      	mov	r0, r3
 800319a:	3710      	adds	r7, #16
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}

080031a0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031b6:	d11b      	bne.n	80031f0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031c0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2220      	movs	r2, #32
 80031cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031dc:	f043 0204 	orr.w	r2, r3, #4
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e000      	b.n	80031f2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bc80      	pop	{r7}
 80031fa:	4770      	bx	lr

080031fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b086      	sub	sp, #24
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d101      	bne.n	800320e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e26c      	b.n	80036e8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	2b00      	cmp	r3, #0
 8003218:	f000 8087 	beq.w	800332a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800321c:	4b92      	ldr	r3, [pc, #584]	; (8003468 <HAL_RCC_OscConfig+0x26c>)
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f003 030c 	and.w	r3, r3, #12
 8003224:	2b04      	cmp	r3, #4
 8003226:	d00c      	beq.n	8003242 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003228:	4b8f      	ldr	r3, [pc, #572]	; (8003468 <HAL_RCC_OscConfig+0x26c>)
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f003 030c 	and.w	r3, r3, #12
 8003230:	2b08      	cmp	r3, #8
 8003232:	d112      	bne.n	800325a <HAL_RCC_OscConfig+0x5e>
 8003234:	4b8c      	ldr	r3, [pc, #560]	; (8003468 <HAL_RCC_OscConfig+0x26c>)
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800323c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003240:	d10b      	bne.n	800325a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003242:	4b89      	ldr	r3, [pc, #548]	; (8003468 <HAL_RCC_OscConfig+0x26c>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d06c      	beq.n	8003328 <HAL_RCC_OscConfig+0x12c>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d168      	bne.n	8003328 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e246      	b.n	80036e8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003262:	d106      	bne.n	8003272 <HAL_RCC_OscConfig+0x76>
 8003264:	4b80      	ldr	r3, [pc, #512]	; (8003468 <HAL_RCC_OscConfig+0x26c>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a7f      	ldr	r2, [pc, #508]	; (8003468 <HAL_RCC_OscConfig+0x26c>)
 800326a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800326e:	6013      	str	r3, [r2, #0]
 8003270:	e02e      	b.n	80032d0 <HAL_RCC_OscConfig+0xd4>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d10c      	bne.n	8003294 <HAL_RCC_OscConfig+0x98>
 800327a:	4b7b      	ldr	r3, [pc, #492]	; (8003468 <HAL_RCC_OscConfig+0x26c>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a7a      	ldr	r2, [pc, #488]	; (8003468 <HAL_RCC_OscConfig+0x26c>)
 8003280:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003284:	6013      	str	r3, [r2, #0]
 8003286:	4b78      	ldr	r3, [pc, #480]	; (8003468 <HAL_RCC_OscConfig+0x26c>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a77      	ldr	r2, [pc, #476]	; (8003468 <HAL_RCC_OscConfig+0x26c>)
 800328c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003290:	6013      	str	r3, [r2, #0]
 8003292:	e01d      	b.n	80032d0 <HAL_RCC_OscConfig+0xd4>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800329c:	d10c      	bne.n	80032b8 <HAL_RCC_OscConfig+0xbc>
 800329e:	4b72      	ldr	r3, [pc, #456]	; (8003468 <HAL_RCC_OscConfig+0x26c>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a71      	ldr	r2, [pc, #452]	; (8003468 <HAL_RCC_OscConfig+0x26c>)
 80032a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032a8:	6013      	str	r3, [r2, #0]
 80032aa:	4b6f      	ldr	r3, [pc, #444]	; (8003468 <HAL_RCC_OscConfig+0x26c>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a6e      	ldr	r2, [pc, #440]	; (8003468 <HAL_RCC_OscConfig+0x26c>)
 80032b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032b4:	6013      	str	r3, [r2, #0]
 80032b6:	e00b      	b.n	80032d0 <HAL_RCC_OscConfig+0xd4>
 80032b8:	4b6b      	ldr	r3, [pc, #428]	; (8003468 <HAL_RCC_OscConfig+0x26c>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a6a      	ldr	r2, [pc, #424]	; (8003468 <HAL_RCC_OscConfig+0x26c>)
 80032be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032c2:	6013      	str	r3, [r2, #0]
 80032c4:	4b68      	ldr	r3, [pc, #416]	; (8003468 <HAL_RCC_OscConfig+0x26c>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a67      	ldr	r2, [pc, #412]	; (8003468 <HAL_RCC_OscConfig+0x26c>)
 80032ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d013      	beq.n	8003300 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d8:	f7fe fc28 	bl	8001b2c <HAL_GetTick>
 80032dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032de:	e008      	b.n	80032f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032e0:	f7fe fc24 	bl	8001b2c <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b64      	cmp	r3, #100	; 0x64
 80032ec:	d901      	bls.n	80032f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e1fa      	b.n	80036e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032f2:	4b5d      	ldr	r3, [pc, #372]	; (8003468 <HAL_RCC_OscConfig+0x26c>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d0f0      	beq.n	80032e0 <HAL_RCC_OscConfig+0xe4>
 80032fe:	e014      	b.n	800332a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003300:	f7fe fc14 	bl	8001b2c <HAL_GetTick>
 8003304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003306:	e008      	b.n	800331a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003308:	f7fe fc10 	bl	8001b2c <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	2b64      	cmp	r3, #100	; 0x64
 8003314:	d901      	bls.n	800331a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e1e6      	b.n	80036e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800331a:	4b53      	ldr	r3, [pc, #332]	; (8003468 <HAL_RCC_OscConfig+0x26c>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d1f0      	bne.n	8003308 <HAL_RCC_OscConfig+0x10c>
 8003326:	e000      	b.n	800332a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003328:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d063      	beq.n	80033fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003336:	4b4c      	ldr	r3, [pc, #304]	; (8003468 <HAL_RCC_OscConfig+0x26c>)
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f003 030c 	and.w	r3, r3, #12
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00b      	beq.n	800335a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003342:	4b49      	ldr	r3, [pc, #292]	; (8003468 <HAL_RCC_OscConfig+0x26c>)
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f003 030c 	and.w	r3, r3, #12
 800334a:	2b08      	cmp	r3, #8
 800334c:	d11c      	bne.n	8003388 <HAL_RCC_OscConfig+0x18c>
 800334e:	4b46      	ldr	r3, [pc, #280]	; (8003468 <HAL_RCC_OscConfig+0x26c>)
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d116      	bne.n	8003388 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800335a:	4b43      	ldr	r3, [pc, #268]	; (8003468 <HAL_RCC_OscConfig+0x26c>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	2b00      	cmp	r3, #0
 8003364:	d005      	beq.n	8003372 <HAL_RCC_OscConfig+0x176>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d001      	beq.n	8003372 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e1ba      	b.n	80036e8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003372:	4b3d      	ldr	r3, [pc, #244]	; (8003468 <HAL_RCC_OscConfig+0x26c>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	4939      	ldr	r1, [pc, #228]	; (8003468 <HAL_RCC_OscConfig+0x26c>)
 8003382:	4313      	orrs	r3, r2
 8003384:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003386:	e03a      	b.n	80033fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d020      	beq.n	80033d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003390:	4b36      	ldr	r3, [pc, #216]	; (800346c <HAL_RCC_OscConfig+0x270>)
 8003392:	2201      	movs	r2, #1
 8003394:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003396:	f7fe fbc9 	bl	8001b2c <HAL_GetTick>
 800339a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800339c:	e008      	b.n	80033b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800339e:	f7fe fbc5 	bl	8001b2c <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d901      	bls.n	80033b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e19b      	b.n	80036e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033b0:	4b2d      	ldr	r3, [pc, #180]	; (8003468 <HAL_RCC_OscConfig+0x26c>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0302 	and.w	r3, r3, #2
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d0f0      	beq.n	800339e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033bc:	4b2a      	ldr	r3, [pc, #168]	; (8003468 <HAL_RCC_OscConfig+0x26c>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	695b      	ldr	r3, [r3, #20]
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	4927      	ldr	r1, [pc, #156]	; (8003468 <HAL_RCC_OscConfig+0x26c>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	600b      	str	r3, [r1, #0]
 80033d0:	e015      	b.n	80033fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033d2:	4b26      	ldr	r3, [pc, #152]	; (800346c <HAL_RCC_OscConfig+0x270>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d8:	f7fe fba8 	bl	8001b2c <HAL_GetTick>
 80033dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033de:	e008      	b.n	80033f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033e0:	f7fe fba4 	bl	8001b2c <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e17a      	b.n	80036e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033f2:	4b1d      	ldr	r3, [pc, #116]	; (8003468 <HAL_RCC_OscConfig+0x26c>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d1f0      	bne.n	80033e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0308 	and.w	r3, r3, #8
 8003406:	2b00      	cmp	r3, #0
 8003408:	d03a      	beq.n	8003480 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d019      	beq.n	8003446 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003412:	4b17      	ldr	r3, [pc, #92]	; (8003470 <HAL_RCC_OscConfig+0x274>)
 8003414:	2201      	movs	r2, #1
 8003416:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003418:	f7fe fb88 	bl	8001b2c <HAL_GetTick>
 800341c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800341e:	e008      	b.n	8003432 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003420:	f7fe fb84 	bl	8001b2c <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	2b02      	cmp	r3, #2
 800342c:	d901      	bls.n	8003432 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e15a      	b.n	80036e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003432:	4b0d      	ldr	r3, [pc, #52]	; (8003468 <HAL_RCC_OscConfig+0x26c>)
 8003434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d0f0      	beq.n	8003420 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800343e:	2001      	movs	r0, #1
 8003440:	f000 fac4 	bl	80039cc <RCC_Delay>
 8003444:	e01c      	b.n	8003480 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003446:	4b0a      	ldr	r3, [pc, #40]	; (8003470 <HAL_RCC_OscConfig+0x274>)
 8003448:	2200      	movs	r2, #0
 800344a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800344c:	f7fe fb6e 	bl	8001b2c <HAL_GetTick>
 8003450:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003452:	e00f      	b.n	8003474 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003454:	f7fe fb6a 	bl	8001b2c <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b02      	cmp	r3, #2
 8003460:	d908      	bls.n	8003474 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e140      	b.n	80036e8 <HAL_RCC_OscConfig+0x4ec>
 8003466:	bf00      	nop
 8003468:	40021000 	.word	0x40021000
 800346c:	42420000 	.word	0x42420000
 8003470:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003474:	4b9e      	ldr	r3, [pc, #632]	; (80036f0 <HAL_RCC_OscConfig+0x4f4>)
 8003476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d1e9      	bne.n	8003454 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0304 	and.w	r3, r3, #4
 8003488:	2b00      	cmp	r3, #0
 800348a:	f000 80a6 	beq.w	80035da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800348e:	2300      	movs	r3, #0
 8003490:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003492:	4b97      	ldr	r3, [pc, #604]	; (80036f0 <HAL_RCC_OscConfig+0x4f4>)
 8003494:	69db      	ldr	r3, [r3, #28]
 8003496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d10d      	bne.n	80034ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800349e:	4b94      	ldr	r3, [pc, #592]	; (80036f0 <HAL_RCC_OscConfig+0x4f4>)
 80034a0:	69db      	ldr	r3, [r3, #28]
 80034a2:	4a93      	ldr	r2, [pc, #588]	; (80036f0 <HAL_RCC_OscConfig+0x4f4>)
 80034a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034a8:	61d3      	str	r3, [r2, #28]
 80034aa:	4b91      	ldr	r3, [pc, #580]	; (80036f0 <HAL_RCC_OscConfig+0x4f4>)
 80034ac:	69db      	ldr	r3, [r3, #28]
 80034ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034b2:	60bb      	str	r3, [r7, #8]
 80034b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034b6:	2301      	movs	r3, #1
 80034b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ba:	4b8e      	ldr	r3, [pc, #568]	; (80036f4 <HAL_RCC_OscConfig+0x4f8>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d118      	bne.n	80034f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034c6:	4b8b      	ldr	r3, [pc, #556]	; (80036f4 <HAL_RCC_OscConfig+0x4f8>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a8a      	ldr	r2, [pc, #552]	; (80036f4 <HAL_RCC_OscConfig+0x4f8>)
 80034cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034d2:	f7fe fb2b 	bl	8001b2c <HAL_GetTick>
 80034d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034d8:	e008      	b.n	80034ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034da:	f7fe fb27 	bl	8001b2c <HAL_GetTick>
 80034de:	4602      	mov	r2, r0
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	2b64      	cmp	r3, #100	; 0x64
 80034e6:	d901      	bls.n	80034ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e0fd      	b.n	80036e8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ec:	4b81      	ldr	r3, [pc, #516]	; (80036f4 <HAL_RCC_OscConfig+0x4f8>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d0f0      	beq.n	80034da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d106      	bne.n	800350e <HAL_RCC_OscConfig+0x312>
 8003500:	4b7b      	ldr	r3, [pc, #492]	; (80036f0 <HAL_RCC_OscConfig+0x4f4>)
 8003502:	6a1b      	ldr	r3, [r3, #32]
 8003504:	4a7a      	ldr	r2, [pc, #488]	; (80036f0 <HAL_RCC_OscConfig+0x4f4>)
 8003506:	f043 0301 	orr.w	r3, r3, #1
 800350a:	6213      	str	r3, [r2, #32]
 800350c:	e02d      	b.n	800356a <HAL_RCC_OscConfig+0x36e>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d10c      	bne.n	8003530 <HAL_RCC_OscConfig+0x334>
 8003516:	4b76      	ldr	r3, [pc, #472]	; (80036f0 <HAL_RCC_OscConfig+0x4f4>)
 8003518:	6a1b      	ldr	r3, [r3, #32]
 800351a:	4a75      	ldr	r2, [pc, #468]	; (80036f0 <HAL_RCC_OscConfig+0x4f4>)
 800351c:	f023 0301 	bic.w	r3, r3, #1
 8003520:	6213      	str	r3, [r2, #32]
 8003522:	4b73      	ldr	r3, [pc, #460]	; (80036f0 <HAL_RCC_OscConfig+0x4f4>)
 8003524:	6a1b      	ldr	r3, [r3, #32]
 8003526:	4a72      	ldr	r2, [pc, #456]	; (80036f0 <HAL_RCC_OscConfig+0x4f4>)
 8003528:	f023 0304 	bic.w	r3, r3, #4
 800352c:	6213      	str	r3, [r2, #32]
 800352e:	e01c      	b.n	800356a <HAL_RCC_OscConfig+0x36e>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	2b05      	cmp	r3, #5
 8003536:	d10c      	bne.n	8003552 <HAL_RCC_OscConfig+0x356>
 8003538:	4b6d      	ldr	r3, [pc, #436]	; (80036f0 <HAL_RCC_OscConfig+0x4f4>)
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	4a6c      	ldr	r2, [pc, #432]	; (80036f0 <HAL_RCC_OscConfig+0x4f4>)
 800353e:	f043 0304 	orr.w	r3, r3, #4
 8003542:	6213      	str	r3, [r2, #32]
 8003544:	4b6a      	ldr	r3, [pc, #424]	; (80036f0 <HAL_RCC_OscConfig+0x4f4>)
 8003546:	6a1b      	ldr	r3, [r3, #32]
 8003548:	4a69      	ldr	r2, [pc, #420]	; (80036f0 <HAL_RCC_OscConfig+0x4f4>)
 800354a:	f043 0301 	orr.w	r3, r3, #1
 800354e:	6213      	str	r3, [r2, #32]
 8003550:	e00b      	b.n	800356a <HAL_RCC_OscConfig+0x36e>
 8003552:	4b67      	ldr	r3, [pc, #412]	; (80036f0 <HAL_RCC_OscConfig+0x4f4>)
 8003554:	6a1b      	ldr	r3, [r3, #32]
 8003556:	4a66      	ldr	r2, [pc, #408]	; (80036f0 <HAL_RCC_OscConfig+0x4f4>)
 8003558:	f023 0301 	bic.w	r3, r3, #1
 800355c:	6213      	str	r3, [r2, #32]
 800355e:	4b64      	ldr	r3, [pc, #400]	; (80036f0 <HAL_RCC_OscConfig+0x4f4>)
 8003560:	6a1b      	ldr	r3, [r3, #32]
 8003562:	4a63      	ldr	r2, [pc, #396]	; (80036f0 <HAL_RCC_OscConfig+0x4f4>)
 8003564:	f023 0304 	bic.w	r3, r3, #4
 8003568:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d015      	beq.n	800359e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003572:	f7fe fadb 	bl	8001b2c <HAL_GetTick>
 8003576:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003578:	e00a      	b.n	8003590 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800357a:	f7fe fad7 	bl	8001b2c <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	f241 3288 	movw	r2, #5000	; 0x1388
 8003588:	4293      	cmp	r3, r2
 800358a:	d901      	bls.n	8003590 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e0ab      	b.n	80036e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003590:	4b57      	ldr	r3, [pc, #348]	; (80036f0 <HAL_RCC_OscConfig+0x4f4>)
 8003592:	6a1b      	ldr	r3, [r3, #32]
 8003594:	f003 0302 	and.w	r3, r3, #2
 8003598:	2b00      	cmp	r3, #0
 800359a:	d0ee      	beq.n	800357a <HAL_RCC_OscConfig+0x37e>
 800359c:	e014      	b.n	80035c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800359e:	f7fe fac5 	bl	8001b2c <HAL_GetTick>
 80035a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035a4:	e00a      	b.n	80035bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035a6:	f7fe fac1 	bl	8001b2c <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d901      	bls.n	80035bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e095      	b.n	80036e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035bc:	4b4c      	ldr	r3, [pc, #304]	; (80036f0 <HAL_RCC_OscConfig+0x4f4>)
 80035be:	6a1b      	ldr	r3, [r3, #32]
 80035c0:	f003 0302 	and.w	r3, r3, #2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d1ee      	bne.n	80035a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035c8:	7dfb      	ldrb	r3, [r7, #23]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d105      	bne.n	80035da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035ce:	4b48      	ldr	r3, [pc, #288]	; (80036f0 <HAL_RCC_OscConfig+0x4f4>)
 80035d0:	69db      	ldr	r3, [r3, #28]
 80035d2:	4a47      	ldr	r2, [pc, #284]	; (80036f0 <HAL_RCC_OscConfig+0x4f4>)
 80035d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	69db      	ldr	r3, [r3, #28]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	f000 8081 	beq.w	80036e6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035e4:	4b42      	ldr	r3, [pc, #264]	; (80036f0 <HAL_RCC_OscConfig+0x4f4>)
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f003 030c 	and.w	r3, r3, #12
 80035ec:	2b08      	cmp	r3, #8
 80035ee:	d061      	beq.n	80036b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	69db      	ldr	r3, [r3, #28]
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d146      	bne.n	8003686 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035f8:	4b3f      	ldr	r3, [pc, #252]	; (80036f8 <HAL_RCC_OscConfig+0x4fc>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035fe:	f7fe fa95 	bl	8001b2c <HAL_GetTick>
 8003602:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003604:	e008      	b.n	8003618 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003606:	f7fe fa91 	bl	8001b2c <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	2b02      	cmp	r3, #2
 8003612:	d901      	bls.n	8003618 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e067      	b.n	80036e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003618:	4b35      	ldr	r3, [pc, #212]	; (80036f0 <HAL_RCC_OscConfig+0x4f4>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1f0      	bne.n	8003606 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a1b      	ldr	r3, [r3, #32]
 8003628:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800362c:	d108      	bne.n	8003640 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800362e:	4b30      	ldr	r3, [pc, #192]	; (80036f0 <HAL_RCC_OscConfig+0x4f4>)
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	492d      	ldr	r1, [pc, #180]	; (80036f0 <HAL_RCC_OscConfig+0x4f4>)
 800363c:	4313      	orrs	r3, r2
 800363e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003640:	4b2b      	ldr	r3, [pc, #172]	; (80036f0 <HAL_RCC_OscConfig+0x4f4>)
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a19      	ldr	r1, [r3, #32]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003650:	430b      	orrs	r3, r1
 8003652:	4927      	ldr	r1, [pc, #156]	; (80036f0 <HAL_RCC_OscConfig+0x4f4>)
 8003654:	4313      	orrs	r3, r2
 8003656:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003658:	4b27      	ldr	r3, [pc, #156]	; (80036f8 <HAL_RCC_OscConfig+0x4fc>)
 800365a:	2201      	movs	r2, #1
 800365c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800365e:	f7fe fa65 	bl	8001b2c <HAL_GetTick>
 8003662:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003664:	e008      	b.n	8003678 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003666:	f7fe fa61 	bl	8001b2c <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	2b02      	cmp	r3, #2
 8003672:	d901      	bls.n	8003678 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e037      	b.n	80036e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003678:	4b1d      	ldr	r3, [pc, #116]	; (80036f0 <HAL_RCC_OscConfig+0x4f4>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d0f0      	beq.n	8003666 <HAL_RCC_OscConfig+0x46a>
 8003684:	e02f      	b.n	80036e6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003686:	4b1c      	ldr	r3, [pc, #112]	; (80036f8 <HAL_RCC_OscConfig+0x4fc>)
 8003688:	2200      	movs	r2, #0
 800368a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800368c:	f7fe fa4e 	bl	8001b2c <HAL_GetTick>
 8003690:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003692:	e008      	b.n	80036a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003694:	f7fe fa4a 	bl	8001b2c <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d901      	bls.n	80036a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e020      	b.n	80036e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036a6:	4b12      	ldr	r3, [pc, #72]	; (80036f0 <HAL_RCC_OscConfig+0x4f4>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d1f0      	bne.n	8003694 <HAL_RCC_OscConfig+0x498>
 80036b2:	e018      	b.n	80036e6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	69db      	ldr	r3, [r3, #28]
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d101      	bne.n	80036c0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e013      	b.n	80036e8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036c0:	4b0b      	ldr	r3, [pc, #44]	; (80036f0 <HAL_RCC_OscConfig+0x4f4>)
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a1b      	ldr	r3, [r3, #32]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d106      	bne.n	80036e2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036de:	429a      	cmp	r2, r3
 80036e0:	d001      	beq.n	80036e6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e000      	b.n	80036e8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3718      	adds	r7, #24
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	40021000 	.word	0x40021000
 80036f4:	40007000 	.word	0x40007000
 80036f8:	42420060 	.word	0x42420060

080036fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d101      	bne.n	8003710 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e0d0      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003710:	4b6a      	ldr	r3, [pc, #424]	; (80038bc <HAL_RCC_ClockConfig+0x1c0>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0307 	and.w	r3, r3, #7
 8003718:	683a      	ldr	r2, [r7, #0]
 800371a:	429a      	cmp	r2, r3
 800371c:	d910      	bls.n	8003740 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800371e:	4b67      	ldr	r3, [pc, #412]	; (80038bc <HAL_RCC_ClockConfig+0x1c0>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f023 0207 	bic.w	r2, r3, #7
 8003726:	4965      	ldr	r1, [pc, #404]	; (80038bc <HAL_RCC_ClockConfig+0x1c0>)
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	4313      	orrs	r3, r2
 800372c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800372e:	4b63      	ldr	r3, [pc, #396]	; (80038bc <HAL_RCC_ClockConfig+0x1c0>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0307 	and.w	r3, r3, #7
 8003736:	683a      	ldr	r2, [r7, #0]
 8003738:	429a      	cmp	r2, r3
 800373a:	d001      	beq.n	8003740 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e0b8      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0302 	and.w	r3, r3, #2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d020      	beq.n	800378e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0304 	and.w	r3, r3, #4
 8003754:	2b00      	cmp	r3, #0
 8003756:	d005      	beq.n	8003764 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003758:	4b59      	ldr	r3, [pc, #356]	; (80038c0 <HAL_RCC_ClockConfig+0x1c4>)
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	4a58      	ldr	r2, [pc, #352]	; (80038c0 <HAL_RCC_ClockConfig+0x1c4>)
 800375e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003762:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0308 	and.w	r3, r3, #8
 800376c:	2b00      	cmp	r3, #0
 800376e:	d005      	beq.n	800377c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003770:	4b53      	ldr	r3, [pc, #332]	; (80038c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	4a52      	ldr	r2, [pc, #328]	; (80038c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003776:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800377a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800377c:	4b50      	ldr	r3, [pc, #320]	; (80038c0 <HAL_RCC_ClockConfig+0x1c4>)
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	494d      	ldr	r1, [pc, #308]	; (80038c0 <HAL_RCC_ClockConfig+0x1c4>)
 800378a:	4313      	orrs	r3, r2
 800378c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	2b00      	cmp	r3, #0
 8003798:	d040      	beq.n	800381c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d107      	bne.n	80037b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037a2:	4b47      	ldr	r3, [pc, #284]	; (80038c0 <HAL_RCC_ClockConfig+0x1c4>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d115      	bne.n	80037da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e07f      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d107      	bne.n	80037ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037ba:	4b41      	ldr	r3, [pc, #260]	; (80038c0 <HAL_RCC_ClockConfig+0x1c4>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d109      	bne.n	80037da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e073      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ca:	4b3d      	ldr	r3, [pc, #244]	; (80038c0 <HAL_RCC_ClockConfig+0x1c4>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d101      	bne.n	80037da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e06b      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037da:	4b39      	ldr	r3, [pc, #228]	; (80038c0 <HAL_RCC_ClockConfig+0x1c4>)
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f023 0203 	bic.w	r2, r3, #3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	4936      	ldr	r1, [pc, #216]	; (80038c0 <HAL_RCC_ClockConfig+0x1c4>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037ec:	f7fe f99e 	bl	8001b2c <HAL_GetTick>
 80037f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037f2:	e00a      	b.n	800380a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037f4:	f7fe f99a 	bl	8001b2c <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003802:	4293      	cmp	r3, r2
 8003804:	d901      	bls.n	800380a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e053      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800380a:	4b2d      	ldr	r3, [pc, #180]	; (80038c0 <HAL_RCC_ClockConfig+0x1c4>)
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f003 020c 	and.w	r2, r3, #12
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	429a      	cmp	r2, r3
 800381a:	d1eb      	bne.n	80037f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800381c:	4b27      	ldr	r3, [pc, #156]	; (80038bc <HAL_RCC_ClockConfig+0x1c0>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0307 	and.w	r3, r3, #7
 8003824:	683a      	ldr	r2, [r7, #0]
 8003826:	429a      	cmp	r2, r3
 8003828:	d210      	bcs.n	800384c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800382a:	4b24      	ldr	r3, [pc, #144]	; (80038bc <HAL_RCC_ClockConfig+0x1c0>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f023 0207 	bic.w	r2, r3, #7
 8003832:	4922      	ldr	r1, [pc, #136]	; (80038bc <HAL_RCC_ClockConfig+0x1c0>)
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	4313      	orrs	r3, r2
 8003838:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800383a:	4b20      	ldr	r3, [pc, #128]	; (80038bc <HAL_RCC_ClockConfig+0x1c0>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0307 	and.w	r3, r3, #7
 8003842:	683a      	ldr	r2, [r7, #0]
 8003844:	429a      	cmp	r2, r3
 8003846:	d001      	beq.n	800384c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e032      	b.n	80038b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0304 	and.w	r3, r3, #4
 8003854:	2b00      	cmp	r3, #0
 8003856:	d008      	beq.n	800386a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003858:	4b19      	ldr	r3, [pc, #100]	; (80038c0 <HAL_RCC_ClockConfig+0x1c4>)
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	4916      	ldr	r1, [pc, #88]	; (80038c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003866:	4313      	orrs	r3, r2
 8003868:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0308 	and.w	r3, r3, #8
 8003872:	2b00      	cmp	r3, #0
 8003874:	d009      	beq.n	800388a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003876:	4b12      	ldr	r3, [pc, #72]	; (80038c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	00db      	lsls	r3, r3, #3
 8003884:	490e      	ldr	r1, [pc, #56]	; (80038c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003886:	4313      	orrs	r3, r2
 8003888:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800388a:	f000 f821 	bl	80038d0 <HAL_RCC_GetSysClockFreq>
 800388e:	4602      	mov	r2, r0
 8003890:	4b0b      	ldr	r3, [pc, #44]	; (80038c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	091b      	lsrs	r3, r3, #4
 8003896:	f003 030f 	and.w	r3, r3, #15
 800389a:	490a      	ldr	r1, [pc, #40]	; (80038c4 <HAL_RCC_ClockConfig+0x1c8>)
 800389c:	5ccb      	ldrb	r3, [r1, r3]
 800389e:	fa22 f303 	lsr.w	r3, r2, r3
 80038a2:	4a09      	ldr	r2, [pc, #36]	; (80038c8 <HAL_RCC_ClockConfig+0x1cc>)
 80038a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80038a6:	4b09      	ldr	r3, [pc, #36]	; (80038cc <HAL_RCC_ClockConfig+0x1d0>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7fe f8fc 	bl	8001aa8 <HAL_InitTick>

  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3710      	adds	r7, #16
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	40022000 	.word	0x40022000
 80038c0:	40021000 	.word	0x40021000
 80038c4:	080071b0 	.word	0x080071b0
 80038c8:	20000000 	.word	0x20000000
 80038cc:	20000004 	.word	0x20000004

080038d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038d0:	b490      	push	{r4, r7}
 80038d2:	b08a      	sub	sp, #40	; 0x28
 80038d4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80038d6:	4b2a      	ldr	r3, [pc, #168]	; (8003980 <HAL_RCC_GetSysClockFreq+0xb0>)
 80038d8:	1d3c      	adds	r4, r7, #4
 80038da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80038e0:	f240 2301 	movw	r3, #513	; 0x201
 80038e4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80038e6:	2300      	movs	r3, #0
 80038e8:	61fb      	str	r3, [r7, #28]
 80038ea:	2300      	movs	r3, #0
 80038ec:	61bb      	str	r3, [r7, #24]
 80038ee:	2300      	movs	r3, #0
 80038f0:	627b      	str	r3, [r7, #36]	; 0x24
 80038f2:	2300      	movs	r3, #0
 80038f4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80038f6:	2300      	movs	r3, #0
 80038f8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80038fa:	4b22      	ldr	r3, [pc, #136]	; (8003984 <HAL_RCC_GetSysClockFreq+0xb4>)
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	f003 030c 	and.w	r3, r3, #12
 8003906:	2b04      	cmp	r3, #4
 8003908:	d002      	beq.n	8003910 <HAL_RCC_GetSysClockFreq+0x40>
 800390a:	2b08      	cmp	r3, #8
 800390c:	d003      	beq.n	8003916 <HAL_RCC_GetSysClockFreq+0x46>
 800390e:	e02d      	b.n	800396c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003910:	4b1d      	ldr	r3, [pc, #116]	; (8003988 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003912:	623b      	str	r3, [r7, #32]
      break;
 8003914:	e02d      	b.n	8003972 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	0c9b      	lsrs	r3, r3, #18
 800391a:	f003 030f 	and.w	r3, r3, #15
 800391e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003922:	4413      	add	r3, r2
 8003924:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003928:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d013      	beq.n	800395c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003934:	4b13      	ldr	r3, [pc, #76]	; (8003984 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	0c5b      	lsrs	r3, r3, #17
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003942:	4413      	add	r3, r2
 8003944:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003948:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	4a0e      	ldr	r2, [pc, #56]	; (8003988 <HAL_RCC_GetSysClockFreq+0xb8>)
 800394e:	fb02 f203 	mul.w	r2, r2, r3
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	fbb2 f3f3 	udiv	r3, r2, r3
 8003958:	627b      	str	r3, [r7, #36]	; 0x24
 800395a:	e004      	b.n	8003966 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	4a0b      	ldr	r2, [pc, #44]	; (800398c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003960:	fb02 f303 	mul.w	r3, r2, r3
 8003964:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003968:	623b      	str	r3, [r7, #32]
      break;
 800396a:	e002      	b.n	8003972 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800396c:	4b06      	ldr	r3, [pc, #24]	; (8003988 <HAL_RCC_GetSysClockFreq+0xb8>)
 800396e:	623b      	str	r3, [r7, #32]
      break;
 8003970:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003972:	6a3b      	ldr	r3, [r7, #32]
}
 8003974:	4618      	mov	r0, r3
 8003976:	3728      	adds	r7, #40	; 0x28
 8003978:	46bd      	mov	sp, r7
 800397a:	bc90      	pop	{r4, r7}
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	080071a0 	.word	0x080071a0
 8003984:	40021000 	.word	0x40021000
 8003988:	007a1200 	.word	0x007a1200
 800398c:	003d0900 	.word	0x003d0900

08003990 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003990:	b480      	push	{r7}
 8003992:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003994:	4b02      	ldr	r3, [pc, #8]	; (80039a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003996:	681b      	ldr	r3, [r3, #0]
}
 8003998:	4618      	mov	r0, r3
 800399a:	46bd      	mov	sp, r7
 800399c:	bc80      	pop	{r7}
 800399e:	4770      	bx	lr
 80039a0:	20000000 	.word	0x20000000

080039a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80039a8:	f7ff fff2 	bl	8003990 <HAL_RCC_GetHCLKFreq>
 80039ac:	4602      	mov	r2, r0
 80039ae:	4b05      	ldr	r3, [pc, #20]	; (80039c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	0a1b      	lsrs	r3, r3, #8
 80039b4:	f003 0307 	and.w	r3, r3, #7
 80039b8:	4903      	ldr	r1, [pc, #12]	; (80039c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039ba:	5ccb      	ldrb	r3, [r1, r3]
 80039bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	40021000 	.word	0x40021000
 80039c8:	080071c0 	.word	0x080071c0

080039cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80039d4:	4b0a      	ldr	r3, [pc, #40]	; (8003a00 <RCC_Delay+0x34>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a0a      	ldr	r2, [pc, #40]	; (8003a04 <RCC_Delay+0x38>)
 80039da:	fba2 2303 	umull	r2, r3, r2, r3
 80039de:	0a5b      	lsrs	r3, r3, #9
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	fb02 f303 	mul.w	r3, r2, r3
 80039e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80039e8:	bf00      	nop
  }
  while (Delay --);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	1e5a      	subs	r2, r3, #1
 80039ee:	60fa      	str	r2, [r7, #12]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d1f9      	bne.n	80039e8 <RCC_Delay+0x1c>
}
 80039f4:	bf00      	nop
 80039f6:	bf00      	nop
 80039f8:	3714      	adds	r7, #20
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bc80      	pop	{r7}
 80039fe:	4770      	bx	lr
 8003a00:	20000000 	.word	0x20000000
 8003a04:	10624dd3 	.word	0x10624dd3

08003a08 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003a10:	2300      	movs	r3, #0
 8003a12:	613b      	str	r3, [r7, #16]
 8003a14:	2300      	movs	r3, #0
 8003a16:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0301 	and.w	r3, r3, #1
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d07d      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003a24:	2300      	movs	r3, #0
 8003a26:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a28:	4b4f      	ldr	r3, [pc, #316]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a2a:	69db      	ldr	r3, [r3, #28]
 8003a2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d10d      	bne.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a34:	4b4c      	ldr	r3, [pc, #304]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a36:	69db      	ldr	r3, [r3, #28]
 8003a38:	4a4b      	ldr	r2, [pc, #300]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a3e:	61d3      	str	r3, [r2, #28]
 8003a40:	4b49      	ldr	r3, [pc, #292]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a42:	69db      	ldr	r3, [r3, #28]
 8003a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a48:	60bb      	str	r3, [r7, #8]
 8003a4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a50:	4b46      	ldr	r3, [pc, #280]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d118      	bne.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a5c:	4b43      	ldr	r3, [pc, #268]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a42      	ldr	r2, [pc, #264]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a66:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a68:	f7fe f860 	bl	8001b2c <HAL_GetTick>
 8003a6c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a6e:	e008      	b.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a70:	f7fe f85c 	bl	8001b2c <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b64      	cmp	r3, #100	; 0x64
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e06d      	b.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a82:	4b3a      	ldr	r3, [pc, #232]	; (8003b6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d0f0      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a8e:	4b36      	ldr	r3, [pc, #216]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a90:	6a1b      	ldr	r3, [r3, #32]
 8003a92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a96:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d02e      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aa6:	68fa      	ldr	r2, [r7, #12]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d027      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003aac:	4b2e      	ldr	r3, [pc, #184]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aae:	6a1b      	ldr	r3, [r3, #32]
 8003ab0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ab4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ab6:	4b2e      	ldr	r3, [pc, #184]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ab8:	2201      	movs	r2, #1
 8003aba:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003abc:	4b2c      	ldr	r3, [pc, #176]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003ac2:	4a29      	ldr	r2, [pc, #164]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d014      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad2:	f7fe f82b 	bl	8001b2c <HAL_GetTick>
 8003ad6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ad8:	e00a      	b.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ada:	f7fe f827 	bl	8001b2c <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d901      	bls.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e036      	b.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003af0:	4b1d      	ldr	r3, [pc, #116]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003af2:	6a1b      	ldr	r3, [r3, #32]
 8003af4:	f003 0302 	and.w	r3, r3, #2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d0ee      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003afc:	4b1a      	ldr	r3, [pc, #104]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003afe:	6a1b      	ldr	r3, [r3, #32]
 8003b00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	4917      	ldr	r1, [pc, #92]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b0e:	7dfb      	ldrb	r3, [r7, #23]
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d105      	bne.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b14:	4b14      	ldr	r3, [pc, #80]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b16:	69db      	ldr	r3, [r3, #28]
 8003b18:	4a13      	ldr	r2, [pc, #76]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b1e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0302 	and.w	r3, r3, #2
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d008      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b2c:	4b0e      	ldr	r3, [pc, #56]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	490b      	ldr	r1, [pc, #44]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0310 	and.w	r3, r3, #16
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d008      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b4a:	4b07      	ldr	r3, [pc, #28]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	4904      	ldr	r1, [pc, #16]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3718      	adds	r7, #24
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	40021000 	.word	0x40021000
 8003b6c:	40007000 	.word	0x40007000
 8003b70:	42420440 	.word	0x42420440

08003b74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d101      	bne.n	8003b86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e041      	b.n	8003c0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d106      	bne.n	8003ba0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f7fd fe0e 	bl	80017bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	3304      	adds	r3, #4
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	4610      	mov	r0, r2
 8003bb4:	f000 fa70 	bl	8004098 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3708      	adds	r7, #8
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
	...

08003c14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d001      	beq.n	8003c2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e03a      	b.n	8003ca2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2202      	movs	r2, #2
 8003c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68da      	ldr	r2, [r3, #12]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f042 0201 	orr.w	r2, r2, #1
 8003c42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a18      	ldr	r2, [pc, #96]	; (8003cac <HAL_TIM_Base_Start_IT+0x98>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d00e      	beq.n	8003c6c <HAL_TIM_Base_Start_IT+0x58>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c56:	d009      	beq.n	8003c6c <HAL_TIM_Base_Start_IT+0x58>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a14      	ldr	r2, [pc, #80]	; (8003cb0 <HAL_TIM_Base_Start_IT+0x9c>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d004      	beq.n	8003c6c <HAL_TIM_Base_Start_IT+0x58>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a13      	ldr	r2, [pc, #76]	; (8003cb4 <HAL_TIM_Base_Start_IT+0xa0>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d111      	bne.n	8003c90 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	f003 0307 	and.w	r3, r3, #7
 8003c76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2b06      	cmp	r3, #6
 8003c7c:	d010      	beq.n	8003ca0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f042 0201 	orr.w	r2, r2, #1
 8003c8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c8e:	e007      	b.n	8003ca0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f042 0201 	orr.w	r2, r2, #1
 8003c9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3714      	adds	r7, #20
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bc80      	pop	{r7}
 8003caa:	4770      	bx	lr
 8003cac:	40012c00 	.word	0x40012c00
 8003cb0:	40000400 	.word	0x40000400
 8003cb4:	40000800 	.word	0x40000800

08003cb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d122      	bne.n	8003d14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	f003 0302 	and.w	r3, r3, #2
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d11b      	bne.n	8003d14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f06f 0202 	mvn.w	r2, #2
 8003ce4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	f003 0303 	and.w	r3, r3, #3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d003      	beq.n	8003d02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 f9b1 	bl	8004062 <HAL_TIM_IC_CaptureCallback>
 8003d00:	e005      	b.n	8003d0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 f9a4 	bl	8004050 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f000 f9b3 	bl	8004074 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	f003 0304 	and.w	r3, r3, #4
 8003d1e:	2b04      	cmp	r3, #4
 8003d20:	d122      	bne.n	8003d68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	f003 0304 	and.w	r3, r3, #4
 8003d2c:	2b04      	cmp	r3, #4
 8003d2e:	d11b      	bne.n	8003d68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f06f 0204 	mvn.w	r2, #4
 8003d38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2202      	movs	r2, #2
 8003d3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d003      	beq.n	8003d56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f000 f987 	bl	8004062 <HAL_TIM_IC_CaptureCallback>
 8003d54:	e005      	b.n	8003d62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 f97a 	bl	8004050 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f000 f989 	bl	8004074 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	f003 0308 	and.w	r3, r3, #8
 8003d72:	2b08      	cmp	r3, #8
 8003d74:	d122      	bne.n	8003dbc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	f003 0308 	and.w	r3, r3, #8
 8003d80:	2b08      	cmp	r3, #8
 8003d82:	d11b      	bne.n	8003dbc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f06f 0208 	mvn.w	r2, #8
 8003d8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2204      	movs	r2, #4
 8003d92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	69db      	ldr	r3, [r3, #28]
 8003d9a:	f003 0303 	and.w	r3, r3, #3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d003      	beq.n	8003daa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f000 f95d 	bl	8004062 <HAL_TIM_IC_CaptureCallback>
 8003da8:	e005      	b.n	8003db6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 f950 	bl	8004050 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f000 f95f 	bl	8004074 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	f003 0310 	and.w	r3, r3, #16
 8003dc6:	2b10      	cmp	r3, #16
 8003dc8:	d122      	bne.n	8003e10 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	f003 0310 	and.w	r3, r3, #16
 8003dd4:	2b10      	cmp	r3, #16
 8003dd6:	d11b      	bne.n	8003e10 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f06f 0210 	mvn.w	r2, #16
 8003de0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2208      	movs	r2, #8
 8003de6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	69db      	ldr	r3, [r3, #28]
 8003dee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d003      	beq.n	8003dfe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 f933 	bl	8004062 <HAL_TIM_IC_CaptureCallback>
 8003dfc:	e005      	b.n	8003e0a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 f926 	bl	8004050 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f000 f935 	bl	8004074 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d10e      	bne.n	8003e3c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	f003 0301 	and.w	r3, r3, #1
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d107      	bne.n	8003e3c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f06f 0201 	mvn.w	r2, #1
 8003e34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f7fc ffda 	bl	8000df0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e46:	2b80      	cmp	r3, #128	; 0x80
 8003e48:	d10e      	bne.n	8003e68 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e54:	2b80      	cmp	r3, #128	; 0x80
 8003e56:	d107      	bne.n	8003e68 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 fa77 	bl	8004356 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e72:	2b40      	cmp	r3, #64	; 0x40
 8003e74:	d10e      	bne.n	8003e94 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e80:	2b40      	cmp	r3, #64	; 0x40
 8003e82:	d107      	bne.n	8003e94 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 f8f9 	bl	8004086 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	f003 0320 	and.w	r3, r3, #32
 8003e9e:	2b20      	cmp	r3, #32
 8003ea0:	d10e      	bne.n	8003ec0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	f003 0320 	and.w	r3, r3, #32
 8003eac:	2b20      	cmp	r3, #32
 8003eae:	d107      	bne.n	8003ec0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f06f 0220 	mvn.w	r2, #32
 8003eb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 fa42 	bl	8004344 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ec0:	bf00      	nop
 8003ec2:	3708      	adds	r7, #8
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d101      	bne.n	8003ee0 <HAL_TIM_ConfigClockSource+0x18>
 8003edc:	2302      	movs	r3, #2
 8003ede:	e0b3      	b.n	8004048 <HAL_TIM_ConfigClockSource+0x180>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2202      	movs	r2, #2
 8003eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003efe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f06:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f18:	d03e      	beq.n	8003f98 <HAL_TIM_ConfigClockSource+0xd0>
 8003f1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f1e:	f200 8087 	bhi.w	8004030 <HAL_TIM_ConfigClockSource+0x168>
 8003f22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f26:	f000 8085 	beq.w	8004034 <HAL_TIM_ConfigClockSource+0x16c>
 8003f2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f2e:	d87f      	bhi.n	8004030 <HAL_TIM_ConfigClockSource+0x168>
 8003f30:	2b70      	cmp	r3, #112	; 0x70
 8003f32:	d01a      	beq.n	8003f6a <HAL_TIM_ConfigClockSource+0xa2>
 8003f34:	2b70      	cmp	r3, #112	; 0x70
 8003f36:	d87b      	bhi.n	8004030 <HAL_TIM_ConfigClockSource+0x168>
 8003f38:	2b60      	cmp	r3, #96	; 0x60
 8003f3a:	d050      	beq.n	8003fde <HAL_TIM_ConfigClockSource+0x116>
 8003f3c:	2b60      	cmp	r3, #96	; 0x60
 8003f3e:	d877      	bhi.n	8004030 <HAL_TIM_ConfigClockSource+0x168>
 8003f40:	2b50      	cmp	r3, #80	; 0x50
 8003f42:	d03c      	beq.n	8003fbe <HAL_TIM_ConfigClockSource+0xf6>
 8003f44:	2b50      	cmp	r3, #80	; 0x50
 8003f46:	d873      	bhi.n	8004030 <HAL_TIM_ConfigClockSource+0x168>
 8003f48:	2b40      	cmp	r3, #64	; 0x40
 8003f4a:	d058      	beq.n	8003ffe <HAL_TIM_ConfigClockSource+0x136>
 8003f4c:	2b40      	cmp	r3, #64	; 0x40
 8003f4e:	d86f      	bhi.n	8004030 <HAL_TIM_ConfigClockSource+0x168>
 8003f50:	2b30      	cmp	r3, #48	; 0x30
 8003f52:	d064      	beq.n	800401e <HAL_TIM_ConfigClockSource+0x156>
 8003f54:	2b30      	cmp	r3, #48	; 0x30
 8003f56:	d86b      	bhi.n	8004030 <HAL_TIM_ConfigClockSource+0x168>
 8003f58:	2b20      	cmp	r3, #32
 8003f5a:	d060      	beq.n	800401e <HAL_TIM_ConfigClockSource+0x156>
 8003f5c:	2b20      	cmp	r3, #32
 8003f5e:	d867      	bhi.n	8004030 <HAL_TIM_ConfigClockSource+0x168>
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d05c      	beq.n	800401e <HAL_TIM_ConfigClockSource+0x156>
 8003f64:	2b10      	cmp	r3, #16
 8003f66:	d05a      	beq.n	800401e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003f68:	e062      	b.n	8004030 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6818      	ldr	r0, [r3, #0]
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	6899      	ldr	r1, [r3, #8]
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	685a      	ldr	r2, [r3, #4]
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	f000 f966 	bl	800424a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f8c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	609a      	str	r2, [r3, #8]
      break;
 8003f96:	e04e      	b.n	8004036 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6818      	ldr	r0, [r3, #0]
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	6899      	ldr	r1, [r3, #8]
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	685a      	ldr	r2, [r3, #4]
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	f000 f94f 	bl	800424a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	689a      	ldr	r2, [r3, #8]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003fba:	609a      	str	r2, [r3, #8]
      break;
 8003fbc:	e03b      	b.n	8004036 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6818      	ldr	r0, [r3, #0]
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	6859      	ldr	r1, [r3, #4]
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	461a      	mov	r2, r3
 8003fcc:	f000 f8c6 	bl	800415c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2150      	movs	r1, #80	; 0x50
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f000 f91d 	bl	8004216 <TIM_ITRx_SetConfig>
      break;
 8003fdc:	e02b      	b.n	8004036 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6818      	ldr	r0, [r3, #0]
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	6859      	ldr	r1, [r3, #4]
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	461a      	mov	r2, r3
 8003fec:	f000 f8e4 	bl	80041b8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2160      	movs	r1, #96	; 0x60
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f000 f90d 	bl	8004216 <TIM_ITRx_SetConfig>
      break;
 8003ffc:	e01b      	b.n	8004036 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6818      	ldr	r0, [r3, #0]
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	6859      	ldr	r1, [r3, #4]
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	461a      	mov	r2, r3
 800400c:	f000 f8a6 	bl	800415c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2140      	movs	r1, #64	; 0x40
 8004016:	4618      	mov	r0, r3
 8004018:	f000 f8fd 	bl	8004216 <TIM_ITRx_SetConfig>
      break;
 800401c:	e00b      	b.n	8004036 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4619      	mov	r1, r3
 8004028:	4610      	mov	r0, r2
 800402a:	f000 f8f4 	bl	8004216 <TIM_ITRx_SetConfig>
        break;
 800402e:	e002      	b.n	8004036 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004030:	bf00      	nop
 8004032:	e000      	b.n	8004036 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004034:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2201      	movs	r2, #1
 800403a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	3710      	adds	r7, #16
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004058:	bf00      	nop
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	bc80      	pop	{r7}
 8004060:	4770      	bx	lr

08004062 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004062:	b480      	push	{r7}
 8004064:	b083      	sub	sp, #12
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800406a:	bf00      	nop
 800406c:	370c      	adds	r7, #12
 800406e:	46bd      	mov	sp, r7
 8004070:	bc80      	pop	{r7}
 8004072:	4770      	bx	lr

08004074 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800407c:	bf00      	nop
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	bc80      	pop	{r7}
 8004084:	4770      	bx	lr

08004086 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004086:	b480      	push	{r7}
 8004088:	b083      	sub	sp, #12
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800408e:	bf00      	nop
 8004090:	370c      	adds	r7, #12
 8004092:	46bd      	mov	sp, r7
 8004094:	bc80      	pop	{r7}
 8004096:	4770      	bx	lr

08004098 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004098:	b480      	push	{r7}
 800409a:	b085      	sub	sp, #20
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a29      	ldr	r2, [pc, #164]	; (8004150 <TIM_Base_SetConfig+0xb8>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d00b      	beq.n	80040c8 <TIM_Base_SetConfig+0x30>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040b6:	d007      	beq.n	80040c8 <TIM_Base_SetConfig+0x30>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a26      	ldr	r2, [pc, #152]	; (8004154 <TIM_Base_SetConfig+0xbc>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d003      	beq.n	80040c8 <TIM_Base_SetConfig+0x30>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a25      	ldr	r2, [pc, #148]	; (8004158 <TIM_Base_SetConfig+0xc0>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d108      	bne.n	80040da <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a1c      	ldr	r2, [pc, #112]	; (8004150 <TIM_Base_SetConfig+0xb8>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d00b      	beq.n	80040fa <TIM_Base_SetConfig+0x62>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040e8:	d007      	beq.n	80040fa <TIM_Base_SetConfig+0x62>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a19      	ldr	r2, [pc, #100]	; (8004154 <TIM_Base_SetConfig+0xbc>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d003      	beq.n	80040fa <TIM_Base_SetConfig+0x62>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a18      	ldr	r2, [pc, #96]	; (8004158 <TIM_Base_SetConfig+0xc0>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d108      	bne.n	800410c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004100:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	4313      	orrs	r3, r2
 800410a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	4313      	orrs	r3, r2
 8004118:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	68fa      	ldr	r2, [r7, #12]
 800411e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	689a      	ldr	r2, [r3, #8]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a07      	ldr	r2, [pc, #28]	; (8004150 <TIM_Base_SetConfig+0xb8>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d103      	bne.n	8004140 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	691a      	ldr	r2, [r3, #16]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	615a      	str	r2, [r3, #20]
}
 8004146:	bf00      	nop
 8004148:	3714      	adds	r7, #20
 800414a:	46bd      	mov	sp, r7
 800414c:	bc80      	pop	{r7}
 800414e:	4770      	bx	lr
 8004150:	40012c00 	.word	0x40012c00
 8004154:	40000400 	.word	0x40000400
 8004158:	40000800 	.word	0x40000800

0800415c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800415c:	b480      	push	{r7}
 800415e:	b087      	sub	sp, #28
 8004160:	af00      	add	r7, sp, #0
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6a1b      	ldr	r3, [r3, #32]
 800416c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6a1b      	ldr	r3, [r3, #32]
 8004172:	f023 0201 	bic.w	r2, r3, #1
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004186:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	011b      	lsls	r3, r3, #4
 800418c:	693a      	ldr	r2, [r7, #16]
 800418e:	4313      	orrs	r3, r2
 8004190:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	f023 030a 	bic.w	r3, r3, #10
 8004198:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	4313      	orrs	r3, r2
 80041a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	693a      	ldr	r2, [r7, #16]
 80041a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	621a      	str	r2, [r3, #32]
}
 80041ae:	bf00      	nop
 80041b0:	371c      	adds	r7, #28
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bc80      	pop	{r7}
 80041b6:	4770      	bx	lr

080041b8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b087      	sub	sp, #28
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6a1b      	ldr	r3, [r3, #32]
 80041c8:	f023 0210 	bic.w	r2, r3, #16
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	699b      	ldr	r3, [r3, #24]
 80041d4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6a1b      	ldr	r3, [r3, #32]
 80041da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041e2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	031b      	lsls	r3, r3, #12
 80041e8:	697a      	ldr	r2, [r7, #20]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041f4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	011b      	lsls	r3, r3, #4
 80041fa:	693a      	ldr	r2, [r7, #16]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	697a      	ldr	r2, [r7, #20]
 8004204:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	621a      	str	r2, [r3, #32]
}
 800420c:	bf00      	nop
 800420e:	371c      	adds	r7, #28
 8004210:	46bd      	mov	sp, r7
 8004212:	bc80      	pop	{r7}
 8004214:	4770      	bx	lr

08004216 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004216:	b480      	push	{r7}
 8004218:	b085      	sub	sp, #20
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
 800421e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800422c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800422e:	683a      	ldr	r2, [r7, #0]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	4313      	orrs	r3, r2
 8004234:	f043 0307 	orr.w	r3, r3, #7
 8004238:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	68fa      	ldr	r2, [r7, #12]
 800423e:	609a      	str	r2, [r3, #8]
}
 8004240:	bf00      	nop
 8004242:	3714      	adds	r7, #20
 8004244:	46bd      	mov	sp, r7
 8004246:	bc80      	pop	{r7}
 8004248:	4770      	bx	lr

0800424a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800424a:	b480      	push	{r7}
 800424c:	b087      	sub	sp, #28
 800424e:	af00      	add	r7, sp, #0
 8004250:	60f8      	str	r0, [r7, #12]
 8004252:	60b9      	str	r1, [r7, #8]
 8004254:	607a      	str	r2, [r7, #4]
 8004256:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004264:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	021a      	lsls	r2, r3, #8
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	431a      	orrs	r2, r3
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	4313      	orrs	r3, r2
 8004272:	697a      	ldr	r2, [r7, #20]
 8004274:	4313      	orrs	r3, r2
 8004276:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	697a      	ldr	r2, [r7, #20]
 800427c:	609a      	str	r2, [r3, #8]
}
 800427e:	bf00      	nop
 8004280:	371c      	adds	r7, #28
 8004282:	46bd      	mov	sp, r7
 8004284:	bc80      	pop	{r7}
 8004286:	4770      	bx	lr

08004288 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004288:	b480      	push	{r7}
 800428a:	b085      	sub	sp, #20
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004298:	2b01      	cmp	r3, #1
 800429a:	d101      	bne.n	80042a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800429c:	2302      	movs	r3, #2
 800429e:	e046      	b.n	800432e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2202      	movs	r2, #2
 80042ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68fa      	ldr	r2, [r7, #12]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a16      	ldr	r2, [pc, #88]	; (8004338 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d00e      	beq.n	8004302 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042ec:	d009      	beq.n	8004302 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a12      	ldr	r2, [pc, #72]	; (800433c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d004      	beq.n	8004302 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a10      	ldr	r2, [pc, #64]	; (8004340 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d10c      	bne.n	800431c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004308:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	68ba      	ldr	r2, [r7, #8]
 8004310:	4313      	orrs	r3, r2
 8004312:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68ba      	ldr	r2, [r7, #8]
 800431a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3714      	adds	r7, #20
 8004332:	46bd      	mov	sp, r7
 8004334:	bc80      	pop	{r7}
 8004336:	4770      	bx	lr
 8004338:	40012c00 	.word	0x40012c00
 800433c:	40000400 	.word	0x40000400
 8004340:	40000800 	.word	0x40000800

08004344 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	bc80      	pop	{r7}
 8004354:	4770      	bx	lr

08004356 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004356:	b480      	push	{r7}
 8004358:	b083      	sub	sp, #12
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800435e:	bf00      	nop
 8004360:	370c      	adds	r7, #12
 8004362:	46bd      	mov	sp, r7
 8004364:	bc80      	pop	{r7}
 8004366:	4770      	bx	lr

08004368 <__errno>:
 8004368:	4b01      	ldr	r3, [pc, #4]	; (8004370 <__errno+0x8>)
 800436a:	6818      	ldr	r0, [r3, #0]
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop
 8004370:	2000000c 	.word	0x2000000c

08004374 <__libc_init_array>:
 8004374:	b570      	push	{r4, r5, r6, lr}
 8004376:	2600      	movs	r6, #0
 8004378:	4d0c      	ldr	r5, [pc, #48]	; (80043ac <__libc_init_array+0x38>)
 800437a:	4c0d      	ldr	r4, [pc, #52]	; (80043b0 <__libc_init_array+0x3c>)
 800437c:	1b64      	subs	r4, r4, r5
 800437e:	10a4      	asrs	r4, r4, #2
 8004380:	42a6      	cmp	r6, r4
 8004382:	d109      	bne.n	8004398 <__libc_init_array+0x24>
 8004384:	f002 feba 	bl	80070fc <_init>
 8004388:	2600      	movs	r6, #0
 800438a:	4d0a      	ldr	r5, [pc, #40]	; (80043b4 <__libc_init_array+0x40>)
 800438c:	4c0a      	ldr	r4, [pc, #40]	; (80043b8 <__libc_init_array+0x44>)
 800438e:	1b64      	subs	r4, r4, r5
 8004390:	10a4      	asrs	r4, r4, #2
 8004392:	42a6      	cmp	r6, r4
 8004394:	d105      	bne.n	80043a2 <__libc_init_array+0x2e>
 8004396:	bd70      	pop	{r4, r5, r6, pc}
 8004398:	f855 3b04 	ldr.w	r3, [r5], #4
 800439c:	4798      	blx	r3
 800439e:	3601      	adds	r6, #1
 80043a0:	e7ee      	b.n	8004380 <__libc_init_array+0xc>
 80043a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80043a6:	4798      	blx	r3
 80043a8:	3601      	adds	r6, #1
 80043aa:	e7f2      	b.n	8004392 <__libc_init_array+0x1e>
 80043ac:	080075ac 	.word	0x080075ac
 80043b0:	080075ac 	.word	0x080075ac
 80043b4:	080075ac 	.word	0x080075ac
 80043b8:	080075b0 	.word	0x080075b0

080043bc <memset>:
 80043bc:	4603      	mov	r3, r0
 80043be:	4402      	add	r2, r0
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d100      	bne.n	80043c6 <memset+0xa>
 80043c4:	4770      	bx	lr
 80043c6:	f803 1b01 	strb.w	r1, [r3], #1
 80043ca:	e7f9      	b.n	80043c0 <memset+0x4>

080043cc <__cvt>:
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043d2:	461f      	mov	r7, r3
 80043d4:	bfbb      	ittet	lt
 80043d6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80043da:	461f      	movlt	r7, r3
 80043dc:	2300      	movge	r3, #0
 80043de:	232d      	movlt	r3, #45	; 0x2d
 80043e0:	b088      	sub	sp, #32
 80043e2:	4614      	mov	r4, r2
 80043e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80043e6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80043e8:	7013      	strb	r3, [r2, #0]
 80043ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80043ec:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80043f0:	f023 0820 	bic.w	r8, r3, #32
 80043f4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80043f8:	d005      	beq.n	8004406 <__cvt+0x3a>
 80043fa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80043fe:	d100      	bne.n	8004402 <__cvt+0x36>
 8004400:	3501      	adds	r5, #1
 8004402:	2302      	movs	r3, #2
 8004404:	e000      	b.n	8004408 <__cvt+0x3c>
 8004406:	2303      	movs	r3, #3
 8004408:	aa07      	add	r2, sp, #28
 800440a:	9204      	str	r2, [sp, #16]
 800440c:	aa06      	add	r2, sp, #24
 800440e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004412:	e9cd 3500 	strd	r3, r5, [sp]
 8004416:	4622      	mov	r2, r4
 8004418:	463b      	mov	r3, r7
 800441a:	f000 fce5 	bl	8004de8 <_dtoa_r>
 800441e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004422:	4606      	mov	r6, r0
 8004424:	d102      	bne.n	800442c <__cvt+0x60>
 8004426:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004428:	07db      	lsls	r3, r3, #31
 800442a:	d522      	bpl.n	8004472 <__cvt+0xa6>
 800442c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004430:	eb06 0905 	add.w	r9, r6, r5
 8004434:	d110      	bne.n	8004458 <__cvt+0x8c>
 8004436:	7833      	ldrb	r3, [r6, #0]
 8004438:	2b30      	cmp	r3, #48	; 0x30
 800443a:	d10a      	bne.n	8004452 <__cvt+0x86>
 800443c:	2200      	movs	r2, #0
 800443e:	2300      	movs	r3, #0
 8004440:	4620      	mov	r0, r4
 8004442:	4639      	mov	r1, r7
 8004444:	f7fc fab0 	bl	80009a8 <__aeabi_dcmpeq>
 8004448:	b918      	cbnz	r0, 8004452 <__cvt+0x86>
 800444a:	f1c5 0501 	rsb	r5, r5, #1
 800444e:	f8ca 5000 	str.w	r5, [sl]
 8004452:	f8da 3000 	ldr.w	r3, [sl]
 8004456:	4499      	add	r9, r3
 8004458:	2200      	movs	r2, #0
 800445a:	2300      	movs	r3, #0
 800445c:	4620      	mov	r0, r4
 800445e:	4639      	mov	r1, r7
 8004460:	f7fc faa2 	bl	80009a8 <__aeabi_dcmpeq>
 8004464:	b108      	cbz	r0, 800446a <__cvt+0x9e>
 8004466:	f8cd 901c 	str.w	r9, [sp, #28]
 800446a:	2230      	movs	r2, #48	; 0x30
 800446c:	9b07      	ldr	r3, [sp, #28]
 800446e:	454b      	cmp	r3, r9
 8004470:	d307      	bcc.n	8004482 <__cvt+0xb6>
 8004472:	4630      	mov	r0, r6
 8004474:	9b07      	ldr	r3, [sp, #28]
 8004476:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004478:	1b9b      	subs	r3, r3, r6
 800447a:	6013      	str	r3, [r2, #0]
 800447c:	b008      	add	sp, #32
 800447e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004482:	1c59      	adds	r1, r3, #1
 8004484:	9107      	str	r1, [sp, #28]
 8004486:	701a      	strb	r2, [r3, #0]
 8004488:	e7f0      	b.n	800446c <__cvt+0xa0>

0800448a <__exponent>:
 800448a:	4603      	mov	r3, r0
 800448c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800448e:	2900      	cmp	r1, #0
 8004490:	f803 2b02 	strb.w	r2, [r3], #2
 8004494:	bfb6      	itet	lt
 8004496:	222d      	movlt	r2, #45	; 0x2d
 8004498:	222b      	movge	r2, #43	; 0x2b
 800449a:	4249      	neglt	r1, r1
 800449c:	2909      	cmp	r1, #9
 800449e:	7042      	strb	r2, [r0, #1]
 80044a0:	dd2b      	ble.n	80044fa <__exponent+0x70>
 80044a2:	f10d 0407 	add.w	r4, sp, #7
 80044a6:	46a4      	mov	ip, r4
 80044a8:	270a      	movs	r7, #10
 80044aa:	fb91 f6f7 	sdiv	r6, r1, r7
 80044ae:	460a      	mov	r2, r1
 80044b0:	46a6      	mov	lr, r4
 80044b2:	fb07 1516 	mls	r5, r7, r6, r1
 80044b6:	2a63      	cmp	r2, #99	; 0x63
 80044b8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80044bc:	4631      	mov	r1, r6
 80044be:	f104 34ff 	add.w	r4, r4, #4294967295
 80044c2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80044c6:	dcf0      	bgt.n	80044aa <__exponent+0x20>
 80044c8:	3130      	adds	r1, #48	; 0x30
 80044ca:	f1ae 0502 	sub.w	r5, lr, #2
 80044ce:	f804 1c01 	strb.w	r1, [r4, #-1]
 80044d2:	4629      	mov	r1, r5
 80044d4:	1c44      	adds	r4, r0, #1
 80044d6:	4561      	cmp	r1, ip
 80044d8:	d30a      	bcc.n	80044f0 <__exponent+0x66>
 80044da:	f10d 0209 	add.w	r2, sp, #9
 80044de:	eba2 020e 	sub.w	r2, r2, lr
 80044e2:	4565      	cmp	r5, ip
 80044e4:	bf88      	it	hi
 80044e6:	2200      	movhi	r2, #0
 80044e8:	4413      	add	r3, r2
 80044ea:	1a18      	subs	r0, r3, r0
 80044ec:	b003      	add	sp, #12
 80044ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044f0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80044f4:	f804 2f01 	strb.w	r2, [r4, #1]!
 80044f8:	e7ed      	b.n	80044d6 <__exponent+0x4c>
 80044fa:	2330      	movs	r3, #48	; 0x30
 80044fc:	3130      	adds	r1, #48	; 0x30
 80044fe:	7083      	strb	r3, [r0, #2]
 8004500:	70c1      	strb	r1, [r0, #3]
 8004502:	1d03      	adds	r3, r0, #4
 8004504:	e7f1      	b.n	80044ea <__exponent+0x60>
	...

08004508 <_printf_float>:
 8004508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800450c:	b091      	sub	sp, #68	; 0x44
 800450e:	460c      	mov	r4, r1
 8004510:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004514:	4616      	mov	r6, r2
 8004516:	461f      	mov	r7, r3
 8004518:	4605      	mov	r5, r0
 800451a:	f001 fa53 	bl	80059c4 <_localeconv_r>
 800451e:	6803      	ldr	r3, [r0, #0]
 8004520:	4618      	mov	r0, r3
 8004522:	9309      	str	r3, [sp, #36]	; 0x24
 8004524:	f7fb fe14 	bl	8000150 <strlen>
 8004528:	2300      	movs	r3, #0
 800452a:	930e      	str	r3, [sp, #56]	; 0x38
 800452c:	f8d8 3000 	ldr.w	r3, [r8]
 8004530:	900a      	str	r0, [sp, #40]	; 0x28
 8004532:	3307      	adds	r3, #7
 8004534:	f023 0307 	bic.w	r3, r3, #7
 8004538:	f103 0208 	add.w	r2, r3, #8
 800453c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004540:	f8d4 b000 	ldr.w	fp, [r4]
 8004544:	f8c8 2000 	str.w	r2, [r8]
 8004548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800454c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004550:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004554:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004558:	930b      	str	r3, [sp, #44]	; 0x2c
 800455a:	f04f 32ff 	mov.w	r2, #4294967295
 800455e:	4640      	mov	r0, r8
 8004560:	4b9c      	ldr	r3, [pc, #624]	; (80047d4 <_printf_float+0x2cc>)
 8004562:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004564:	f7fc fa52 	bl	8000a0c <__aeabi_dcmpun>
 8004568:	bb70      	cbnz	r0, 80045c8 <_printf_float+0xc0>
 800456a:	f04f 32ff 	mov.w	r2, #4294967295
 800456e:	4640      	mov	r0, r8
 8004570:	4b98      	ldr	r3, [pc, #608]	; (80047d4 <_printf_float+0x2cc>)
 8004572:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004574:	f7fc fa2c 	bl	80009d0 <__aeabi_dcmple>
 8004578:	bb30      	cbnz	r0, 80045c8 <_printf_float+0xc0>
 800457a:	2200      	movs	r2, #0
 800457c:	2300      	movs	r3, #0
 800457e:	4640      	mov	r0, r8
 8004580:	4651      	mov	r1, sl
 8004582:	f7fc fa1b 	bl	80009bc <__aeabi_dcmplt>
 8004586:	b110      	cbz	r0, 800458e <_printf_float+0x86>
 8004588:	232d      	movs	r3, #45	; 0x2d
 800458a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800458e:	4b92      	ldr	r3, [pc, #584]	; (80047d8 <_printf_float+0x2d0>)
 8004590:	4892      	ldr	r0, [pc, #584]	; (80047dc <_printf_float+0x2d4>)
 8004592:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004596:	bf94      	ite	ls
 8004598:	4698      	movls	r8, r3
 800459a:	4680      	movhi	r8, r0
 800459c:	2303      	movs	r3, #3
 800459e:	f04f 0a00 	mov.w	sl, #0
 80045a2:	6123      	str	r3, [r4, #16]
 80045a4:	f02b 0304 	bic.w	r3, fp, #4
 80045a8:	6023      	str	r3, [r4, #0]
 80045aa:	4633      	mov	r3, r6
 80045ac:	4621      	mov	r1, r4
 80045ae:	4628      	mov	r0, r5
 80045b0:	9700      	str	r7, [sp, #0]
 80045b2:	aa0f      	add	r2, sp, #60	; 0x3c
 80045b4:	f000 f9d4 	bl	8004960 <_printf_common>
 80045b8:	3001      	adds	r0, #1
 80045ba:	f040 8090 	bne.w	80046de <_printf_float+0x1d6>
 80045be:	f04f 30ff 	mov.w	r0, #4294967295
 80045c2:	b011      	add	sp, #68	; 0x44
 80045c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045c8:	4642      	mov	r2, r8
 80045ca:	4653      	mov	r3, sl
 80045cc:	4640      	mov	r0, r8
 80045ce:	4651      	mov	r1, sl
 80045d0:	f7fc fa1c 	bl	8000a0c <__aeabi_dcmpun>
 80045d4:	b148      	cbz	r0, 80045ea <_printf_float+0xe2>
 80045d6:	f1ba 0f00 	cmp.w	sl, #0
 80045da:	bfb8      	it	lt
 80045dc:	232d      	movlt	r3, #45	; 0x2d
 80045de:	4880      	ldr	r0, [pc, #512]	; (80047e0 <_printf_float+0x2d8>)
 80045e0:	bfb8      	it	lt
 80045e2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80045e6:	4b7f      	ldr	r3, [pc, #508]	; (80047e4 <_printf_float+0x2dc>)
 80045e8:	e7d3      	b.n	8004592 <_printf_float+0x8a>
 80045ea:	6863      	ldr	r3, [r4, #4]
 80045ec:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80045f0:	1c5a      	adds	r2, r3, #1
 80045f2:	d142      	bne.n	800467a <_printf_float+0x172>
 80045f4:	2306      	movs	r3, #6
 80045f6:	6063      	str	r3, [r4, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	9206      	str	r2, [sp, #24]
 80045fc:	aa0e      	add	r2, sp, #56	; 0x38
 80045fe:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004602:	aa0d      	add	r2, sp, #52	; 0x34
 8004604:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004608:	9203      	str	r2, [sp, #12]
 800460a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800460e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004612:	6023      	str	r3, [r4, #0]
 8004614:	6863      	ldr	r3, [r4, #4]
 8004616:	4642      	mov	r2, r8
 8004618:	9300      	str	r3, [sp, #0]
 800461a:	4628      	mov	r0, r5
 800461c:	4653      	mov	r3, sl
 800461e:	910b      	str	r1, [sp, #44]	; 0x2c
 8004620:	f7ff fed4 	bl	80043cc <__cvt>
 8004624:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004626:	4680      	mov	r8, r0
 8004628:	2947      	cmp	r1, #71	; 0x47
 800462a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800462c:	d108      	bne.n	8004640 <_printf_float+0x138>
 800462e:	1cc8      	adds	r0, r1, #3
 8004630:	db02      	blt.n	8004638 <_printf_float+0x130>
 8004632:	6863      	ldr	r3, [r4, #4]
 8004634:	4299      	cmp	r1, r3
 8004636:	dd40      	ble.n	80046ba <_printf_float+0x1b2>
 8004638:	f1a9 0902 	sub.w	r9, r9, #2
 800463c:	fa5f f989 	uxtb.w	r9, r9
 8004640:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004644:	d81f      	bhi.n	8004686 <_printf_float+0x17e>
 8004646:	464a      	mov	r2, r9
 8004648:	3901      	subs	r1, #1
 800464a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800464e:	910d      	str	r1, [sp, #52]	; 0x34
 8004650:	f7ff ff1b 	bl	800448a <__exponent>
 8004654:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004656:	4682      	mov	sl, r0
 8004658:	1813      	adds	r3, r2, r0
 800465a:	2a01      	cmp	r2, #1
 800465c:	6123      	str	r3, [r4, #16]
 800465e:	dc02      	bgt.n	8004666 <_printf_float+0x15e>
 8004660:	6822      	ldr	r2, [r4, #0]
 8004662:	07d2      	lsls	r2, r2, #31
 8004664:	d501      	bpl.n	800466a <_printf_float+0x162>
 8004666:	3301      	adds	r3, #1
 8004668:	6123      	str	r3, [r4, #16]
 800466a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800466e:	2b00      	cmp	r3, #0
 8004670:	d09b      	beq.n	80045aa <_printf_float+0xa2>
 8004672:	232d      	movs	r3, #45	; 0x2d
 8004674:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004678:	e797      	b.n	80045aa <_printf_float+0xa2>
 800467a:	2947      	cmp	r1, #71	; 0x47
 800467c:	d1bc      	bne.n	80045f8 <_printf_float+0xf0>
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1ba      	bne.n	80045f8 <_printf_float+0xf0>
 8004682:	2301      	movs	r3, #1
 8004684:	e7b7      	b.n	80045f6 <_printf_float+0xee>
 8004686:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800468a:	d118      	bne.n	80046be <_printf_float+0x1b6>
 800468c:	2900      	cmp	r1, #0
 800468e:	6863      	ldr	r3, [r4, #4]
 8004690:	dd0b      	ble.n	80046aa <_printf_float+0x1a2>
 8004692:	6121      	str	r1, [r4, #16]
 8004694:	b913      	cbnz	r3, 800469c <_printf_float+0x194>
 8004696:	6822      	ldr	r2, [r4, #0]
 8004698:	07d0      	lsls	r0, r2, #31
 800469a:	d502      	bpl.n	80046a2 <_printf_float+0x19a>
 800469c:	3301      	adds	r3, #1
 800469e:	440b      	add	r3, r1
 80046a0:	6123      	str	r3, [r4, #16]
 80046a2:	f04f 0a00 	mov.w	sl, #0
 80046a6:	65a1      	str	r1, [r4, #88]	; 0x58
 80046a8:	e7df      	b.n	800466a <_printf_float+0x162>
 80046aa:	b913      	cbnz	r3, 80046b2 <_printf_float+0x1aa>
 80046ac:	6822      	ldr	r2, [r4, #0]
 80046ae:	07d2      	lsls	r2, r2, #31
 80046b0:	d501      	bpl.n	80046b6 <_printf_float+0x1ae>
 80046b2:	3302      	adds	r3, #2
 80046b4:	e7f4      	b.n	80046a0 <_printf_float+0x198>
 80046b6:	2301      	movs	r3, #1
 80046b8:	e7f2      	b.n	80046a0 <_printf_float+0x198>
 80046ba:	f04f 0967 	mov.w	r9, #103	; 0x67
 80046be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80046c0:	4299      	cmp	r1, r3
 80046c2:	db05      	blt.n	80046d0 <_printf_float+0x1c8>
 80046c4:	6823      	ldr	r3, [r4, #0]
 80046c6:	6121      	str	r1, [r4, #16]
 80046c8:	07d8      	lsls	r0, r3, #31
 80046ca:	d5ea      	bpl.n	80046a2 <_printf_float+0x19a>
 80046cc:	1c4b      	adds	r3, r1, #1
 80046ce:	e7e7      	b.n	80046a0 <_printf_float+0x198>
 80046d0:	2900      	cmp	r1, #0
 80046d2:	bfcc      	ite	gt
 80046d4:	2201      	movgt	r2, #1
 80046d6:	f1c1 0202 	rsble	r2, r1, #2
 80046da:	4413      	add	r3, r2
 80046dc:	e7e0      	b.n	80046a0 <_printf_float+0x198>
 80046de:	6823      	ldr	r3, [r4, #0]
 80046e0:	055a      	lsls	r2, r3, #21
 80046e2:	d407      	bmi.n	80046f4 <_printf_float+0x1ec>
 80046e4:	6923      	ldr	r3, [r4, #16]
 80046e6:	4642      	mov	r2, r8
 80046e8:	4631      	mov	r1, r6
 80046ea:	4628      	mov	r0, r5
 80046ec:	47b8      	blx	r7
 80046ee:	3001      	adds	r0, #1
 80046f0:	d12b      	bne.n	800474a <_printf_float+0x242>
 80046f2:	e764      	b.n	80045be <_printf_float+0xb6>
 80046f4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80046f8:	f240 80dd 	bls.w	80048b6 <_printf_float+0x3ae>
 80046fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004700:	2200      	movs	r2, #0
 8004702:	2300      	movs	r3, #0
 8004704:	f7fc f950 	bl	80009a8 <__aeabi_dcmpeq>
 8004708:	2800      	cmp	r0, #0
 800470a:	d033      	beq.n	8004774 <_printf_float+0x26c>
 800470c:	2301      	movs	r3, #1
 800470e:	4631      	mov	r1, r6
 8004710:	4628      	mov	r0, r5
 8004712:	4a35      	ldr	r2, [pc, #212]	; (80047e8 <_printf_float+0x2e0>)
 8004714:	47b8      	blx	r7
 8004716:	3001      	adds	r0, #1
 8004718:	f43f af51 	beq.w	80045be <_printf_float+0xb6>
 800471c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004720:	429a      	cmp	r2, r3
 8004722:	db02      	blt.n	800472a <_printf_float+0x222>
 8004724:	6823      	ldr	r3, [r4, #0]
 8004726:	07d8      	lsls	r0, r3, #31
 8004728:	d50f      	bpl.n	800474a <_printf_float+0x242>
 800472a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800472e:	4631      	mov	r1, r6
 8004730:	4628      	mov	r0, r5
 8004732:	47b8      	blx	r7
 8004734:	3001      	adds	r0, #1
 8004736:	f43f af42 	beq.w	80045be <_printf_float+0xb6>
 800473a:	f04f 0800 	mov.w	r8, #0
 800473e:	f104 091a 	add.w	r9, r4, #26
 8004742:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004744:	3b01      	subs	r3, #1
 8004746:	4543      	cmp	r3, r8
 8004748:	dc09      	bgt.n	800475e <_printf_float+0x256>
 800474a:	6823      	ldr	r3, [r4, #0]
 800474c:	079b      	lsls	r3, r3, #30
 800474e:	f100 8102 	bmi.w	8004956 <_printf_float+0x44e>
 8004752:	68e0      	ldr	r0, [r4, #12]
 8004754:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004756:	4298      	cmp	r0, r3
 8004758:	bfb8      	it	lt
 800475a:	4618      	movlt	r0, r3
 800475c:	e731      	b.n	80045c2 <_printf_float+0xba>
 800475e:	2301      	movs	r3, #1
 8004760:	464a      	mov	r2, r9
 8004762:	4631      	mov	r1, r6
 8004764:	4628      	mov	r0, r5
 8004766:	47b8      	blx	r7
 8004768:	3001      	adds	r0, #1
 800476a:	f43f af28 	beq.w	80045be <_printf_float+0xb6>
 800476e:	f108 0801 	add.w	r8, r8, #1
 8004772:	e7e6      	b.n	8004742 <_printf_float+0x23a>
 8004774:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004776:	2b00      	cmp	r3, #0
 8004778:	dc38      	bgt.n	80047ec <_printf_float+0x2e4>
 800477a:	2301      	movs	r3, #1
 800477c:	4631      	mov	r1, r6
 800477e:	4628      	mov	r0, r5
 8004780:	4a19      	ldr	r2, [pc, #100]	; (80047e8 <_printf_float+0x2e0>)
 8004782:	47b8      	blx	r7
 8004784:	3001      	adds	r0, #1
 8004786:	f43f af1a 	beq.w	80045be <_printf_float+0xb6>
 800478a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800478e:	4313      	orrs	r3, r2
 8004790:	d102      	bne.n	8004798 <_printf_float+0x290>
 8004792:	6823      	ldr	r3, [r4, #0]
 8004794:	07d9      	lsls	r1, r3, #31
 8004796:	d5d8      	bpl.n	800474a <_printf_float+0x242>
 8004798:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800479c:	4631      	mov	r1, r6
 800479e:	4628      	mov	r0, r5
 80047a0:	47b8      	blx	r7
 80047a2:	3001      	adds	r0, #1
 80047a4:	f43f af0b 	beq.w	80045be <_printf_float+0xb6>
 80047a8:	f04f 0900 	mov.w	r9, #0
 80047ac:	f104 0a1a 	add.w	sl, r4, #26
 80047b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80047b2:	425b      	negs	r3, r3
 80047b4:	454b      	cmp	r3, r9
 80047b6:	dc01      	bgt.n	80047bc <_printf_float+0x2b4>
 80047b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80047ba:	e794      	b.n	80046e6 <_printf_float+0x1de>
 80047bc:	2301      	movs	r3, #1
 80047be:	4652      	mov	r2, sl
 80047c0:	4631      	mov	r1, r6
 80047c2:	4628      	mov	r0, r5
 80047c4:	47b8      	blx	r7
 80047c6:	3001      	adds	r0, #1
 80047c8:	f43f aef9 	beq.w	80045be <_printf_float+0xb6>
 80047cc:	f109 0901 	add.w	r9, r9, #1
 80047d0:	e7ee      	b.n	80047b0 <_printf_float+0x2a8>
 80047d2:	bf00      	nop
 80047d4:	7fefffff 	.word	0x7fefffff
 80047d8:	080071cc 	.word	0x080071cc
 80047dc:	080071d0 	.word	0x080071d0
 80047e0:	080071d8 	.word	0x080071d8
 80047e4:	080071d4 	.word	0x080071d4
 80047e8:	080071dc 	.word	0x080071dc
 80047ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80047ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80047f0:	429a      	cmp	r2, r3
 80047f2:	bfa8      	it	ge
 80047f4:	461a      	movge	r2, r3
 80047f6:	2a00      	cmp	r2, #0
 80047f8:	4691      	mov	r9, r2
 80047fa:	dc37      	bgt.n	800486c <_printf_float+0x364>
 80047fc:	f04f 0b00 	mov.w	fp, #0
 8004800:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004804:	f104 021a 	add.w	r2, r4, #26
 8004808:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800480c:	ebaa 0309 	sub.w	r3, sl, r9
 8004810:	455b      	cmp	r3, fp
 8004812:	dc33      	bgt.n	800487c <_printf_float+0x374>
 8004814:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004818:	429a      	cmp	r2, r3
 800481a:	db3b      	blt.n	8004894 <_printf_float+0x38c>
 800481c:	6823      	ldr	r3, [r4, #0]
 800481e:	07da      	lsls	r2, r3, #31
 8004820:	d438      	bmi.n	8004894 <_printf_float+0x38c>
 8004822:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004824:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004826:	eba2 030a 	sub.w	r3, r2, sl
 800482a:	eba2 0901 	sub.w	r9, r2, r1
 800482e:	4599      	cmp	r9, r3
 8004830:	bfa8      	it	ge
 8004832:	4699      	movge	r9, r3
 8004834:	f1b9 0f00 	cmp.w	r9, #0
 8004838:	dc34      	bgt.n	80048a4 <_printf_float+0x39c>
 800483a:	f04f 0800 	mov.w	r8, #0
 800483e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004842:	f104 0a1a 	add.w	sl, r4, #26
 8004846:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800484a:	1a9b      	subs	r3, r3, r2
 800484c:	eba3 0309 	sub.w	r3, r3, r9
 8004850:	4543      	cmp	r3, r8
 8004852:	f77f af7a 	ble.w	800474a <_printf_float+0x242>
 8004856:	2301      	movs	r3, #1
 8004858:	4652      	mov	r2, sl
 800485a:	4631      	mov	r1, r6
 800485c:	4628      	mov	r0, r5
 800485e:	47b8      	blx	r7
 8004860:	3001      	adds	r0, #1
 8004862:	f43f aeac 	beq.w	80045be <_printf_float+0xb6>
 8004866:	f108 0801 	add.w	r8, r8, #1
 800486a:	e7ec      	b.n	8004846 <_printf_float+0x33e>
 800486c:	4613      	mov	r3, r2
 800486e:	4631      	mov	r1, r6
 8004870:	4642      	mov	r2, r8
 8004872:	4628      	mov	r0, r5
 8004874:	47b8      	blx	r7
 8004876:	3001      	adds	r0, #1
 8004878:	d1c0      	bne.n	80047fc <_printf_float+0x2f4>
 800487a:	e6a0      	b.n	80045be <_printf_float+0xb6>
 800487c:	2301      	movs	r3, #1
 800487e:	4631      	mov	r1, r6
 8004880:	4628      	mov	r0, r5
 8004882:	920b      	str	r2, [sp, #44]	; 0x2c
 8004884:	47b8      	blx	r7
 8004886:	3001      	adds	r0, #1
 8004888:	f43f ae99 	beq.w	80045be <_printf_float+0xb6>
 800488c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800488e:	f10b 0b01 	add.w	fp, fp, #1
 8004892:	e7b9      	b.n	8004808 <_printf_float+0x300>
 8004894:	4631      	mov	r1, r6
 8004896:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800489a:	4628      	mov	r0, r5
 800489c:	47b8      	blx	r7
 800489e:	3001      	adds	r0, #1
 80048a0:	d1bf      	bne.n	8004822 <_printf_float+0x31a>
 80048a2:	e68c      	b.n	80045be <_printf_float+0xb6>
 80048a4:	464b      	mov	r3, r9
 80048a6:	4631      	mov	r1, r6
 80048a8:	4628      	mov	r0, r5
 80048aa:	eb08 020a 	add.w	r2, r8, sl
 80048ae:	47b8      	blx	r7
 80048b0:	3001      	adds	r0, #1
 80048b2:	d1c2      	bne.n	800483a <_printf_float+0x332>
 80048b4:	e683      	b.n	80045be <_printf_float+0xb6>
 80048b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80048b8:	2a01      	cmp	r2, #1
 80048ba:	dc01      	bgt.n	80048c0 <_printf_float+0x3b8>
 80048bc:	07db      	lsls	r3, r3, #31
 80048be:	d537      	bpl.n	8004930 <_printf_float+0x428>
 80048c0:	2301      	movs	r3, #1
 80048c2:	4642      	mov	r2, r8
 80048c4:	4631      	mov	r1, r6
 80048c6:	4628      	mov	r0, r5
 80048c8:	47b8      	blx	r7
 80048ca:	3001      	adds	r0, #1
 80048cc:	f43f ae77 	beq.w	80045be <_printf_float+0xb6>
 80048d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80048d4:	4631      	mov	r1, r6
 80048d6:	4628      	mov	r0, r5
 80048d8:	47b8      	blx	r7
 80048da:	3001      	adds	r0, #1
 80048dc:	f43f ae6f 	beq.w	80045be <_printf_float+0xb6>
 80048e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80048e4:	2200      	movs	r2, #0
 80048e6:	2300      	movs	r3, #0
 80048e8:	f7fc f85e 	bl	80009a8 <__aeabi_dcmpeq>
 80048ec:	b9d8      	cbnz	r0, 8004926 <_printf_float+0x41e>
 80048ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80048f0:	f108 0201 	add.w	r2, r8, #1
 80048f4:	3b01      	subs	r3, #1
 80048f6:	4631      	mov	r1, r6
 80048f8:	4628      	mov	r0, r5
 80048fa:	47b8      	blx	r7
 80048fc:	3001      	adds	r0, #1
 80048fe:	d10e      	bne.n	800491e <_printf_float+0x416>
 8004900:	e65d      	b.n	80045be <_printf_float+0xb6>
 8004902:	2301      	movs	r3, #1
 8004904:	464a      	mov	r2, r9
 8004906:	4631      	mov	r1, r6
 8004908:	4628      	mov	r0, r5
 800490a:	47b8      	blx	r7
 800490c:	3001      	adds	r0, #1
 800490e:	f43f ae56 	beq.w	80045be <_printf_float+0xb6>
 8004912:	f108 0801 	add.w	r8, r8, #1
 8004916:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004918:	3b01      	subs	r3, #1
 800491a:	4543      	cmp	r3, r8
 800491c:	dcf1      	bgt.n	8004902 <_printf_float+0x3fa>
 800491e:	4653      	mov	r3, sl
 8004920:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004924:	e6e0      	b.n	80046e8 <_printf_float+0x1e0>
 8004926:	f04f 0800 	mov.w	r8, #0
 800492a:	f104 091a 	add.w	r9, r4, #26
 800492e:	e7f2      	b.n	8004916 <_printf_float+0x40e>
 8004930:	2301      	movs	r3, #1
 8004932:	4642      	mov	r2, r8
 8004934:	e7df      	b.n	80048f6 <_printf_float+0x3ee>
 8004936:	2301      	movs	r3, #1
 8004938:	464a      	mov	r2, r9
 800493a:	4631      	mov	r1, r6
 800493c:	4628      	mov	r0, r5
 800493e:	47b8      	blx	r7
 8004940:	3001      	adds	r0, #1
 8004942:	f43f ae3c 	beq.w	80045be <_printf_float+0xb6>
 8004946:	f108 0801 	add.w	r8, r8, #1
 800494a:	68e3      	ldr	r3, [r4, #12]
 800494c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800494e:	1a5b      	subs	r3, r3, r1
 8004950:	4543      	cmp	r3, r8
 8004952:	dcf0      	bgt.n	8004936 <_printf_float+0x42e>
 8004954:	e6fd      	b.n	8004752 <_printf_float+0x24a>
 8004956:	f04f 0800 	mov.w	r8, #0
 800495a:	f104 0919 	add.w	r9, r4, #25
 800495e:	e7f4      	b.n	800494a <_printf_float+0x442>

08004960 <_printf_common>:
 8004960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004964:	4616      	mov	r6, r2
 8004966:	4699      	mov	r9, r3
 8004968:	688a      	ldr	r2, [r1, #8]
 800496a:	690b      	ldr	r3, [r1, #16]
 800496c:	4607      	mov	r7, r0
 800496e:	4293      	cmp	r3, r2
 8004970:	bfb8      	it	lt
 8004972:	4613      	movlt	r3, r2
 8004974:	6033      	str	r3, [r6, #0]
 8004976:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800497a:	460c      	mov	r4, r1
 800497c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004980:	b10a      	cbz	r2, 8004986 <_printf_common+0x26>
 8004982:	3301      	adds	r3, #1
 8004984:	6033      	str	r3, [r6, #0]
 8004986:	6823      	ldr	r3, [r4, #0]
 8004988:	0699      	lsls	r1, r3, #26
 800498a:	bf42      	ittt	mi
 800498c:	6833      	ldrmi	r3, [r6, #0]
 800498e:	3302      	addmi	r3, #2
 8004990:	6033      	strmi	r3, [r6, #0]
 8004992:	6825      	ldr	r5, [r4, #0]
 8004994:	f015 0506 	ands.w	r5, r5, #6
 8004998:	d106      	bne.n	80049a8 <_printf_common+0x48>
 800499a:	f104 0a19 	add.w	sl, r4, #25
 800499e:	68e3      	ldr	r3, [r4, #12]
 80049a0:	6832      	ldr	r2, [r6, #0]
 80049a2:	1a9b      	subs	r3, r3, r2
 80049a4:	42ab      	cmp	r3, r5
 80049a6:	dc28      	bgt.n	80049fa <_printf_common+0x9a>
 80049a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80049ac:	1e13      	subs	r3, r2, #0
 80049ae:	6822      	ldr	r2, [r4, #0]
 80049b0:	bf18      	it	ne
 80049b2:	2301      	movne	r3, #1
 80049b4:	0692      	lsls	r2, r2, #26
 80049b6:	d42d      	bmi.n	8004a14 <_printf_common+0xb4>
 80049b8:	4649      	mov	r1, r9
 80049ba:	4638      	mov	r0, r7
 80049bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80049c0:	47c0      	blx	r8
 80049c2:	3001      	adds	r0, #1
 80049c4:	d020      	beq.n	8004a08 <_printf_common+0xa8>
 80049c6:	6823      	ldr	r3, [r4, #0]
 80049c8:	68e5      	ldr	r5, [r4, #12]
 80049ca:	f003 0306 	and.w	r3, r3, #6
 80049ce:	2b04      	cmp	r3, #4
 80049d0:	bf18      	it	ne
 80049d2:	2500      	movne	r5, #0
 80049d4:	6832      	ldr	r2, [r6, #0]
 80049d6:	f04f 0600 	mov.w	r6, #0
 80049da:	68a3      	ldr	r3, [r4, #8]
 80049dc:	bf08      	it	eq
 80049de:	1aad      	subeq	r5, r5, r2
 80049e0:	6922      	ldr	r2, [r4, #16]
 80049e2:	bf08      	it	eq
 80049e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049e8:	4293      	cmp	r3, r2
 80049ea:	bfc4      	itt	gt
 80049ec:	1a9b      	subgt	r3, r3, r2
 80049ee:	18ed      	addgt	r5, r5, r3
 80049f0:	341a      	adds	r4, #26
 80049f2:	42b5      	cmp	r5, r6
 80049f4:	d11a      	bne.n	8004a2c <_printf_common+0xcc>
 80049f6:	2000      	movs	r0, #0
 80049f8:	e008      	b.n	8004a0c <_printf_common+0xac>
 80049fa:	2301      	movs	r3, #1
 80049fc:	4652      	mov	r2, sl
 80049fe:	4649      	mov	r1, r9
 8004a00:	4638      	mov	r0, r7
 8004a02:	47c0      	blx	r8
 8004a04:	3001      	adds	r0, #1
 8004a06:	d103      	bne.n	8004a10 <_printf_common+0xb0>
 8004a08:	f04f 30ff 	mov.w	r0, #4294967295
 8004a0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a10:	3501      	adds	r5, #1
 8004a12:	e7c4      	b.n	800499e <_printf_common+0x3e>
 8004a14:	2030      	movs	r0, #48	; 0x30
 8004a16:	18e1      	adds	r1, r4, r3
 8004a18:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a1c:	1c5a      	adds	r2, r3, #1
 8004a1e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a22:	4422      	add	r2, r4
 8004a24:	3302      	adds	r3, #2
 8004a26:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a2a:	e7c5      	b.n	80049b8 <_printf_common+0x58>
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	4622      	mov	r2, r4
 8004a30:	4649      	mov	r1, r9
 8004a32:	4638      	mov	r0, r7
 8004a34:	47c0      	blx	r8
 8004a36:	3001      	adds	r0, #1
 8004a38:	d0e6      	beq.n	8004a08 <_printf_common+0xa8>
 8004a3a:	3601      	adds	r6, #1
 8004a3c:	e7d9      	b.n	80049f2 <_printf_common+0x92>
	...

08004a40 <_printf_i>:
 8004a40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a44:	460c      	mov	r4, r1
 8004a46:	7e27      	ldrb	r7, [r4, #24]
 8004a48:	4691      	mov	r9, r2
 8004a4a:	2f78      	cmp	r7, #120	; 0x78
 8004a4c:	4680      	mov	r8, r0
 8004a4e:	469a      	mov	sl, r3
 8004a50:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004a52:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a56:	d807      	bhi.n	8004a68 <_printf_i+0x28>
 8004a58:	2f62      	cmp	r7, #98	; 0x62
 8004a5a:	d80a      	bhi.n	8004a72 <_printf_i+0x32>
 8004a5c:	2f00      	cmp	r7, #0
 8004a5e:	f000 80d9 	beq.w	8004c14 <_printf_i+0x1d4>
 8004a62:	2f58      	cmp	r7, #88	; 0x58
 8004a64:	f000 80a4 	beq.w	8004bb0 <_printf_i+0x170>
 8004a68:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004a6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a70:	e03a      	b.n	8004ae8 <_printf_i+0xa8>
 8004a72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a76:	2b15      	cmp	r3, #21
 8004a78:	d8f6      	bhi.n	8004a68 <_printf_i+0x28>
 8004a7a:	a001      	add	r0, pc, #4	; (adr r0, 8004a80 <_printf_i+0x40>)
 8004a7c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004a80:	08004ad9 	.word	0x08004ad9
 8004a84:	08004aed 	.word	0x08004aed
 8004a88:	08004a69 	.word	0x08004a69
 8004a8c:	08004a69 	.word	0x08004a69
 8004a90:	08004a69 	.word	0x08004a69
 8004a94:	08004a69 	.word	0x08004a69
 8004a98:	08004aed 	.word	0x08004aed
 8004a9c:	08004a69 	.word	0x08004a69
 8004aa0:	08004a69 	.word	0x08004a69
 8004aa4:	08004a69 	.word	0x08004a69
 8004aa8:	08004a69 	.word	0x08004a69
 8004aac:	08004bfb 	.word	0x08004bfb
 8004ab0:	08004b1d 	.word	0x08004b1d
 8004ab4:	08004bdd 	.word	0x08004bdd
 8004ab8:	08004a69 	.word	0x08004a69
 8004abc:	08004a69 	.word	0x08004a69
 8004ac0:	08004c1d 	.word	0x08004c1d
 8004ac4:	08004a69 	.word	0x08004a69
 8004ac8:	08004b1d 	.word	0x08004b1d
 8004acc:	08004a69 	.word	0x08004a69
 8004ad0:	08004a69 	.word	0x08004a69
 8004ad4:	08004be5 	.word	0x08004be5
 8004ad8:	680b      	ldr	r3, [r1, #0]
 8004ada:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004ade:	1d1a      	adds	r2, r3, #4
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	600a      	str	r2, [r1, #0]
 8004ae4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e0a4      	b.n	8004c36 <_printf_i+0x1f6>
 8004aec:	6825      	ldr	r5, [r4, #0]
 8004aee:	6808      	ldr	r0, [r1, #0]
 8004af0:	062e      	lsls	r6, r5, #24
 8004af2:	f100 0304 	add.w	r3, r0, #4
 8004af6:	d50a      	bpl.n	8004b0e <_printf_i+0xce>
 8004af8:	6805      	ldr	r5, [r0, #0]
 8004afa:	600b      	str	r3, [r1, #0]
 8004afc:	2d00      	cmp	r5, #0
 8004afe:	da03      	bge.n	8004b08 <_printf_i+0xc8>
 8004b00:	232d      	movs	r3, #45	; 0x2d
 8004b02:	426d      	negs	r5, r5
 8004b04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b08:	230a      	movs	r3, #10
 8004b0a:	485e      	ldr	r0, [pc, #376]	; (8004c84 <_printf_i+0x244>)
 8004b0c:	e019      	b.n	8004b42 <_printf_i+0x102>
 8004b0e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004b12:	6805      	ldr	r5, [r0, #0]
 8004b14:	600b      	str	r3, [r1, #0]
 8004b16:	bf18      	it	ne
 8004b18:	b22d      	sxthne	r5, r5
 8004b1a:	e7ef      	b.n	8004afc <_printf_i+0xbc>
 8004b1c:	680b      	ldr	r3, [r1, #0]
 8004b1e:	6825      	ldr	r5, [r4, #0]
 8004b20:	1d18      	adds	r0, r3, #4
 8004b22:	6008      	str	r0, [r1, #0]
 8004b24:	0628      	lsls	r0, r5, #24
 8004b26:	d501      	bpl.n	8004b2c <_printf_i+0xec>
 8004b28:	681d      	ldr	r5, [r3, #0]
 8004b2a:	e002      	b.n	8004b32 <_printf_i+0xf2>
 8004b2c:	0669      	lsls	r1, r5, #25
 8004b2e:	d5fb      	bpl.n	8004b28 <_printf_i+0xe8>
 8004b30:	881d      	ldrh	r5, [r3, #0]
 8004b32:	2f6f      	cmp	r7, #111	; 0x6f
 8004b34:	bf0c      	ite	eq
 8004b36:	2308      	moveq	r3, #8
 8004b38:	230a      	movne	r3, #10
 8004b3a:	4852      	ldr	r0, [pc, #328]	; (8004c84 <_printf_i+0x244>)
 8004b3c:	2100      	movs	r1, #0
 8004b3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b42:	6866      	ldr	r6, [r4, #4]
 8004b44:	2e00      	cmp	r6, #0
 8004b46:	bfa8      	it	ge
 8004b48:	6821      	ldrge	r1, [r4, #0]
 8004b4a:	60a6      	str	r6, [r4, #8]
 8004b4c:	bfa4      	itt	ge
 8004b4e:	f021 0104 	bicge.w	r1, r1, #4
 8004b52:	6021      	strge	r1, [r4, #0]
 8004b54:	b90d      	cbnz	r5, 8004b5a <_printf_i+0x11a>
 8004b56:	2e00      	cmp	r6, #0
 8004b58:	d04d      	beq.n	8004bf6 <_printf_i+0x1b6>
 8004b5a:	4616      	mov	r6, r2
 8004b5c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004b60:	fb03 5711 	mls	r7, r3, r1, r5
 8004b64:	5dc7      	ldrb	r7, [r0, r7]
 8004b66:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004b6a:	462f      	mov	r7, r5
 8004b6c:	42bb      	cmp	r3, r7
 8004b6e:	460d      	mov	r5, r1
 8004b70:	d9f4      	bls.n	8004b5c <_printf_i+0x11c>
 8004b72:	2b08      	cmp	r3, #8
 8004b74:	d10b      	bne.n	8004b8e <_printf_i+0x14e>
 8004b76:	6823      	ldr	r3, [r4, #0]
 8004b78:	07df      	lsls	r7, r3, #31
 8004b7a:	d508      	bpl.n	8004b8e <_printf_i+0x14e>
 8004b7c:	6923      	ldr	r3, [r4, #16]
 8004b7e:	6861      	ldr	r1, [r4, #4]
 8004b80:	4299      	cmp	r1, r3
 8004b82:	bfde      	ittt	le
 8004b84:	2330      	movle	r3, #48	; 0x30
 8004b86:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004b8a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004b8e:	1b92      	subs	r2, r2, r6
 8004b90:	6122      	str	r2, [r4, #16]
 8004b92:	464b      	mov	r3, r9
 8004b94:	4621      	mov	r1, r4
 8004b96:	4640      	mov	r0, r8
 8004b98:	f8cd a000 	str.w	sl, [sp]
 8004b9c:	aa03      	add	r2, sp, #12
 8004b9e:	f7ff fedf 	bl	8004960 <_printf_common>
 8004ba2:	3001      	adds	r0, #1
 8004ba4:	d14c      	bne.n	8004c40 <_printf_i+0x200>
 8004ba6:	f04f 30ff 	mov.w	r0, #4294967295
 8004baa:	b004      	add	sp, #16
 8004bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bb0:	4834      	ldr	r0, [pc, #208]	; (8004c84 <_printf_i+0x244>)
 8004bb2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004bb6:	680e      	ldr	r6, [r1, #0]
 8004bb8:	6823      	ldr	r3, [r4, #0]
 8004bba:	f856 5b04 	ldr.w	r5, [r6], #4
 8004bbe:	061f      	lsls	r7, r3, #24
 8004bc0:	600e      	str	r6, [r1, #0]
 8004bc2:	d514      	bpl.n	8004bee <_printf_i+0x1ae>
 8004bc4:	07d9      	lsls	r1, r3, #31
 8004bc6:	bf44      	itt	mi
 8004bc8:	f043 0320 	orrmi.w	r3, r3, #32
 8004bcc:	6023      	strmi	r3, [r4, #0]
 8004bce:	b91d      	cbnz	r5, 8004bd8 <_printf_i+0x198>
 8004bd0:	6823      	ldr	r3, [r4, #0]
 8004bd2:	f023 0320 	bic.w	r3, r3, #32
 8004bd6:	6023      	str	r3, [r4, #0]
 8004bd8:	2310      	movs	r3, #16
 8004bda:	e7af      	b.n	8004b3c <_printf_i+0xfc>
 8004bdc:	6823      	ldr	r3, [r4, #0]
 8004bde:	f043 0320 	orr.w	r3, r3, #32
 8004be2:	6023      	str	r3, [r4, #0]
 8004be4:	2378      	movs	r3, #120	; 0x78
 8004be6:	4828      	ldr	r0, [pc, #160]	; (8004c88 <_printf_i+0x248>)
 8004be8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004bec:	e7e3      	b.n	8004bb6 <_printf_i+0x176>
 8004bee:	065e      	lsls	r6, r3, #25
 8004bf0:	bf48      	it	mi
 8004bf2:	b2ad      	uxthmi	r5, r5
 8004bf4:	e7e6      	b.n	8004bc4 <_printf_i+0x184>
 8004bf6:	4616      	mov	r6, r2
 8004bf8:	e7bb      	b.n	8004b72 <_printf_i+0x132>
 8004bfa:	680b      	ldr	r3, [r1, #0]
 8004bfc:	6826      	ldr	r6, [r4, #0]
 8004bfe:	1d1d      	adds	r5, r3, #4
 8004c00:	6960      	ldr	r0, [r4, #20]
 8004c02:	600d      	str	r5, [r1, #0]
 8004c04:	0635      	lsls	r5, r6, #24
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	d501      	bpl.n	8004c0e <_printf_i+0x1ce>
 8004c0a:	6018      	str	r0, [r3, #0]
 8004c0c:	e002      	b.n	8004c14 <_printf_i+0x1d4>
 8004c0e:	0671      	lsls	r1, r6, #25
 8004c10:	d5fb      	bpl.n	8004c0a <_printf_i+0x1ca>
 8004c12:	8018      	strh	r0, [r3, #0]
 8004c14:	2300      	movs	r3, #0
 8004c16:	4616      	mov	r6, r2
 8004c18:	6123      	str	r3, [r4, #16]
 8004c1a:	e7ba      	b.n	8004b92 <_printf_i+0x152>
 8004c1c:	680b      	ldr	r3, [r1, #0]
 8004c1e:	1d1a      	adds	r2, r3, #4
 8004c20:	600a      	str	r2, [r1, #0]
 8004c22:	681e      	ldr	r6, [r3, #0]
 8004c24:	2100      	movs	r1, #0
 8004c26:	4630      	mov	r0, r6
 8004c28:	6862      	ldr	r2, [r4, #4]
 8004c2a:	f000 fed7 	bl	80059dc <memchr>
 8004c2e:	b108      	cbz	r0, 8004c34 <_printf_i+0x1f4>
 8004c30:	1b80      	subs	r0, r0, r6
 8004c32:	6060      	str	r0, [r4, #4]
 8004c34:	6863      	ldr	r3, [r4, #4]
 8004c36:	6123      	str	r3, [r4, #16]
 8004c38:	2300      	movs	r3, #0
 8004c3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c3e:	e7a8      	b.n	8004b92 <_printf_i+0x152>
 8004c40:	4632      	mov	r2, r6
 8004c42:	4649      	mov	r1, r9
 8004c44:	4640      	mov	r0, r8
 8004c46:	6923      	ldr	r3, [r4, #16]
 8004c48:	47d0      	blx	sl
 8004c4a:	3001      	adds	r0, #1
 8004c4c:	d0ab      	beq.n	8004ba6 <_printf_i+0x166>
 8004c4e:	6823      	ldr	r3, [r4, #0]
 8004c50:	079b      	lsls	r3, r3, #30
 8004c52:	d413      	bmi.n	8004c7c <_printf_i+0x23c>
 8004c54:	68e0      	ldr	r0, [r4, #12]
 8004c56:	9b03      	ldr	r3, [sp, #12]
 8004c58:	4298      	cmp	r0, r3
 8004c5a:	bfb8      	it	lt
 8004c5c:	4618      	movlt	r0, r3
 8004c5e:	e7a4      	b.n	8004baa <_printf_i+0x16a>
 8004c60:	2301      	movs	r3, #1
 8004c62:	4632      	mov	r2, r6
 8004c64:	4649      	mov	r1, r9
 8004c66:	4640      	mov	r0, r8
 8004c68:	47d0      	blx	sl
 8004c6a:	3001      	adds	r0, #1
 8004c6c:	d09b      	beq.n	8004ba6 <_printf_i+0x166>
 8004c6e:	3501      	adds	r5, #1
 8004c70:	68e3      	ldr	r3, [r4, #12]
 8004c72:	9903      	ldr	r1, [sp, #12]
 8004c74:	1a5b      	subs	r3, r3, r1
 8004c76:	42ab      	cmp	r3, r5
 8004c78:	dcf2      	bgt.n	8004c60 <_printf_i+0x220>
 8004c7a:	e7eb      	b.n	8004c54 <_printf_i+0x214>
 8004c7c:	2500      	movs	r5, #0
 8004c7e:	f104 0619 	add.w	r6, r4, #25
 8004c82:	e7f5      	b.n	8004c70 <_printf_i+0x230>
 8004c84:	080071de 	.word	0x080071de
 8004c88:	080071ef 	.word	0x080071ef

08004c8c <siprintf>:
 8004c8c:	b40e      	push	{r1, r2, r3}
 8004c8e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004c92:	b500      	push	{lr}
 8004c94:	b09c      	sub	sp, #112	; 0x70
 8004c96:	ab1d      	add	r3, sp, #116	; 0x74
 8004c98:	9002      	str	r0, [sp, #8]
 8004c9a:	9006      	str	r0, [sp, #24]
 8004c9c:	9107      	str	r1, [sp, #28]
 8004c9e:	9104      	str	r1, [sp, #16]
 8004ca0:	4808      	ldr	r0, [pc, #32]	; (8004cc4 <siprintf+0x38>)
 8004ca2:	4909      	ldr	r1, [pc, #36]	; (8004cc8 <siprintf+0x3c>)
 8004ca4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ca8:	9105      	str	r1, [sp, #20]
 8004caa:	6800      	ldr	r0, [r0, #0]
 8004cac:	a902      	add	r1, sp, #8
 8004cae:	9301      	str	r3, [sp, #4]
 8004cb0:	f001 fb42 	bl	8006338 <_svfiprintf_r>
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	9b02      	ldr	r3, [sp, #8]
 8004cb8:	701a      	strb	r2, [r3, #0]
 8004cba:	b01c      	add	sp, #112	; 0x70
 8004cbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004cc0:	b003      	add	sp, #12
 8004cc2:	4770      	bx	lr
 8004cc4:	2000000c 	.word	0x2000000c
 8004cc8:	ffff0208 	.word	0xffff0208

08004ccc <quorem>:
 8004ccc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cd0:	6903      	ldr	r3, [r0, #16]
 8004cd2:	690c      	ldr	r4, [r1, #16]
 8004cd4:	4607      	mov	r7, r0
 8004cd6:	42a3      	cmp	r3, r4
 8004cd8:	f2c0 8083 	blt.w	8004de2 <quorem+0x116>
 8004cdc:	3c01      	subs	r4, #1
 8004cde:	f100 0514 	add.w	r5, r0, #20
 8004ce2:	f101 0814 	add.w	r8, r1, #20
 8004ce6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004cea:	9301      	str	r3, [sp, #4]
 8004cec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004cf0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	fbb2 f6f3 	udiv	r6, r2, r3
 8004cfc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004d00:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004d04:	d332      	bcc.n	8004d6c <quorem+0xa0>
 8004d06:	f04f 0e00 	mov.w	lr, #0
 8004d0a:	4640      	mov	r0, r8
 8004d0c:	46ac      	mov	ip, r5
 8004d0e:	46f2      	mov	sl, lr
 8004d10:	f850 2b04 	ldr.w	r2, [r0], #4
 8004d14:	b293      	uxth	r3, r2
 8004d16:	fb06 e303 	mla	r3, r6, r3, lr
 8004d1a:	0c12      	lsrs	r2, r2, #16
 8004d1c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004d20:	fb06 e202 	mla	r2, r6, r2, lr
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	ebaa 0303 	sub.w	r3, sl, r3
 8004d2a:	f8dc a000 	ldr.w	sl, [ip]
 8004d2e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004d32:	fa1f fa8a 	uxth.w	sl, sl
 8004d36:	4453      	add	r3, sl
 8004d38:	fa1f fa82 	uxth.w	sl, r2
 8004d3c:	f8dc 2000 	ldr.w	r2, [ip]
 8004d40:	4581      	cmp	r9, r0
 8004d42:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8004d46:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004d50:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004d54:	f84c 3b04 	str.w	r3, [ip], #4
 8004d58:	d2da      	bcs.n	8004d10 <quorem+0x44>
 8004d5a:	f855 300b 	ldr.w	r3, [r5, fp]
 8004d5e:	b92b      	cbnz	r3, 8004d6c <quorem+0xa0>
 8004d60:	9b01      	ldr	r3, [sp, #4]
 8004d62:	3b04      	subs	r3, #4
 8004d64:	429d      	cmp	r5, r3
 8004d66:	461a      	mov	r2, r3
 8004d68:	d32f      	bcc.n	8004dca <quorem+0xfe>
 8004d6a:	613c      	str	r4, [r7, #16]
 8004d6c:	4638      	mov	r0, r7
 8004d6e:	f001 f8cb 	bl	8005f08 <__mcmp>
 8004d72:	2800      	cmp	r0, #0
 8004d74:	db25      	blt.n	8004dc2 <quorem+0xf6>
 8004d76:	4628      	mov	r0, r5
 8004d78:	f04f 0c00 	mov.w	ip, #0
 8004d7c:	3601      	adds	r6, #1
 8004d7e:	f858 1b04 	ldr.w	r1, [r8], #4
 8004d82:	f8d0 e000 	ldr.w	lr, [r0]
 8004d86:	b28b      	uxth	r3, r1
 8004d88:	ebac 0303 	sub.w	r3, ip, r3
 8004d8c:	fa1f f28e 	uxth.w	r2, lr
 8004d90:	4413      	add	r3, r2
 8004d92:	0c0a      	lsrs	r2, r1, #16
 8004d94:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004d98:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004da2:	45c1      	cmp	r9, r8
 8004da4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004da8:	f840 3b04 	str.w	r3, [r0], #4
 8004dac:	d2e7      	bcs.n	8004d7e <quorem+0xb2>
 8004dae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004db2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004db6:	b922      	cbnz	r2, 8004dc2 <quorem+0xf6>
 8004db8:	3b04      	subs	r3, #4
 8004dba:	429d      	cmp	r5, r3
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	d30a      	bcc.n	8004dd6 <quorem+0x10a>
 8004dc0:	613c      	str	r4, [r7, #16]
 8004dc2:	4630      	mov	r0, r6
 8004dc4:	b003      	add	sp, #12
 8004dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dca:	6812      	ldr	r2, [r2, #0]
 8004dcc:	3b04      	subs	r3, #4
 8004dce:	2a00      	cmp	r2, #0
 8004dd0:	d1cb      	bne.n	8004d6a <quorem+0x9e>
 8004dd2:	3c01      	subs	r4, #1
 8004dd4:	e7c6      	b.n	8004d64 <quorem+0x98>
 8004dd6:	6812      	ldr	r2, [r2, #0]
 8004dd8:	3b04      	subs	r3, #4
 8004dda:	2a00      	cmp	r2, #0
 8004ddc:	d1f0      	bne.n	8004dc0 <quorem+0xf4>
 8004dde:	3c01      	subs	r4, #1
 8004de0:	e7eb      	b.n	8004dba <quorem+0xee>
 8004de2:	2000      	movs	r0, #0
 8004de4:	e7ee      	b.n	8004dc4 <quorem+0xf8>
	...

08004de8 <_dtoa_r>:
 8004de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dec:	4616      	mov	r6, r2
 8004dee:	461f      	mov	r7, r3
 8004df0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004df2:	b099      	sub	sp, #100	; 0x64
 8004df4:	4605      	mov	r5, r0
 8004df6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004dfa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004dfe:	b974      	cbnz	r4, 8004e1e <_dtoa_r+0x36>
 8004e00:	2010      	movs	r0, #16
 8004e02:	f000 fde3 	bl	80059cc <malloc>
 8004e06:	4602      	mov	r2, r0
 8004e08:	6268      	str	r0, [r5, #36]	; 0x24
 8004e0a:	b920      	cbnz	r0, 8004e16 <_dtoa_r+0x2e>
 8004e0c:	21ea      	movs	r1, #234	; 0xea
 8004e0e:	4bae      	ldr	r3, [pc, #696]	; (80050c8 <_dtoa_r+0x2e0>)
 8004e10:	48ae      	ldr	r0, [pc, #696]	; (80050cc <_dtoa_r+0x2e4>)
 8004e12:	f001 fba1 	bl	8006558 <__assert_func>
 8004e16:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004e1a:	6004      	str	r4, [r0, #0]
 8004e1c:	60c4      	str	r4, [r0, #12]
 8004e1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004e20:	6819      	ldr	r1, [r3, #0]
 8004e22:	b151      	cbz	r1, 8004e3a <_dtoa_r+0x52>
 8004e24:	685a      	ldr	r2, [r3, #4]
 8004e26:	2301      	movs	r3, #1
 8004e28:	4093      	lsls	r3, r2
 8004e2a:	604a      	str	r2, [r1, #4]
 8004e2c:	608b      	str	r3, [r1, #8]
 8004e2e:	4628      	mov	r0, r5
 8004e30:	f000 fe30 	bl	8005a94 <_Bfree>
 8004e34:	2200      	movs	r2, #0
 8004e36:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004e38:	601a      	str	r2, [r3, #0]
 8004e3a:	1e3b      	subs	r3, r7, #0
 8004e3c:	bfaf      	iteee	ge
 8004e3e:	2300      	movge	r3, #0
 8004e40:	2201      	movlt	r2, #1
 8004e42:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004e46:	9305      	strlt	r3, [sp, #20]
 8004e48:	bfa8      	it	ge
 8004e4a:	f8c8 3000 	strge.w	r3, [r8]
 8004e4e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004e52:	4b9f      	ldr	r3, [pc, #636]	; (80050d0 <_dtoa_r+0x2e8>)
 8004e54:	bfb8      	it	lt
 8004e56:	f8c8 2000 	strlt.w	r2, [r8]
 8004e5a:	ea33 0309 	bics.w	r3, r3, r9
 8004e5e:	d119      	bne.n	8004e94 <_dtoa_r+0xac>
 8004e60:	f242 730f 	movw	r3, #9999	; 0x270f
 8004e64:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004e66:	6013      	str	r3, [r2, #0]
 8004e68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004e6c:	4333      	orrs	r3, r6
 8004e6e:	f000 8580 	beq.w	8005972 <_dtoa_r+0xb8a>
 8004e72:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004e74:	b953      	cbnz	r3, 8004e8c <_dtoa_r+0xa4>
 8004e76:	4b97      	ldr	r3, [pc, #604]	; (80050d4 <_dtoa_r+0x2ec>)
 8004e78:	e022      	b.n	8004ec0 <_dtoa_r+0xd8>
 8004e7a:	4b97      	ldr	r3, [pc, #604]	; (80050d8 <_dtoa_r+0x2f0>)
 8004e7c:	9308      	str	r3, [sp, #32]
 8004e7e:	3308      	adds	r3, #8
 8004e80:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004e82:	6013      	str	r3, [r2, #0]
 8004e84:	9808      	ldr	r0, [sp, #32]
 8004e86:	b019      	add	sp, #100	; 0x64
 8004e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e8c:	4b91      	ldr	r3, [pc, #580]	; (80050d4 <_dtoa_r+0x2ec>)
 8004e8e:	9308      	str	r3, [sp, #32]
 8004e90:	3303      	adds	r3, #3
 8004e92:	e7f5      	b.n	8004e80 <_dtoa_r+0x98>
 8004e94:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004e98:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004e9c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	f7fb fd80 	bl	80009a8 <__aeabi_dcmpeq>
 8004ea8:	4680      	mov	r8, r0
 8004eaa:	b158      	cbz	r0, 8004ec4 <_dtoa_r+0xdc>
 8004eac:	2301      	movs	r3, #1
 8004eae:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004eb0:	6013      	str	r3, [r2, #0]
 8004eb2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	f000 8559 	beq.w	800596c <_dtoa_r+0xb84>
 8004eba:	4888      	ldr	r0, [pc, #544]	; (80050dc <_dtoa_r+0x2f4>)
 8004ebc:	6018      	str	r0, [r3, #0]
 8004ebe:	1e43      	subs	r3, r0, #1
 8004ec0:	9308      	str	r3, [sp, #32]
 8004ec2:	e7df      	b.n	8004e84 <_dtoa_r+0x9c>
 8004ec4:	ab16      	add	r3, sp, #88	; 0x58
 8004ec6:	9301      	str	r3, [sp, #4]
 8004ec8:	ab17      	add	r3, sp, #92	; 0x5c
 8004eca:	9300      	str	r3, [sp, #0]
 8004ecc:	4628      	mov	r0, r5
 8004ece:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004ed2:	f001 f8c5 	bl	8006060 <__d2b>
 8004ed6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004eda:	4682      	mov	sl, r0
 8004edc:	2c00      	cmp	r4, #0
 8004ede:	d07e      	beq.n	8004fde <_dtoa_r+0x1f6>
 8004ee0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004ee4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ee6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004eea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004eee:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004ef2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004ef6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004efa:	2200      	movs	r2, #0
 8004efc:	4b78      	ldr	r3, [pc, #480]	; (80050e0 <_dtoa_r+0x2f8>)
 8004efe:	f7fb f933 	bl	8000168 <__aeabi_dsub>
 8004f02:	a36b      	add	r3, pc, #428	; (adr r3, 80050b0 <_dtoa_r+0x2c8>)
 8004f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f08:	f7fb fae6 	bl	80004d8 <__aeabi_dmul>
 8004f0c:	a36a      	add	r3, pc, #424	; (adr r3, 80050b8 <_dtoa_r+0x2d0>)
 8004f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f12:	f7fb f92b 	bl	800016c <__adddf3>
 8004f16:	4606      	mov	r6, r0
 8004f18:	4620      	mov	r0, r4
 8004f1a:	460f      	mov	r7, r1
 8004f1c:	f7fb fa72 	bl	8000404 <__aeabi_i2d>
 8004f20:	a367      	add	r3, pc, #412	; (adr r3, 80050c0 <_dtoa_r+0x2d8>)
 8004f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f26:	f7fb fad7 	bl	80004d8 <__aeabi_dmul>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	460b      	mov	r3, r1
 8004f2e:	4630      	mov	r0, r6
 8004f30:	4639      	mov	r1, r7
 8004f32:	f7fb f91b 	bl	800016c <__adddf3>
 8004f36:	4606      	mov	r6, r0
 8004f38:	460f      	mov	r7, r1
 8004f3a:	f7fb fd7d 	bl	8000a38 <__aeabi_d2iz>
 8004f3e:	2200      	movs	r2, #0
 8004f40:	4681      	mov	r9, r0
 8004f42:	2300      	movs	r3, #0
 8004f44:	4630      	mov	r0, r6
 8004f46:	4639      	mov	r1, r7
 8004f48:	f7fb fd38 	bl	80009bc <__aeabi_dcmplt>
 8004f4c:	b148      	cbz	r0, 8004f62 <_dtoa_r+0x17a>
 8004f4e:	4648      	mov	r0, r9
 8004f50:	f7fb fa58 	bl	8000404 <__aeabi_i2d>
 8004f54:	4632      	mov	r2, r6
 8004f56:	463b      	mov	r3, r7
 8004f58:	f7fb fd26 	bl	80009a8 <__aeabi_dcmpeq>
 8004f5c:	b908      	cbnz	r0, 8004f62 <_dtoa_r+0x17a>
 8004f5e:	f109 39ff 	add.w	r9, r9, #4294967295
 8004f62:	f1b9 0f16 	cmp.w	r9, #22
 8004f66:	d857      	bhi.n	8005018 <_dtoa_r+0x230>
 8004f68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004f6c:	4b5d      	ldr	r3, [pc, #372]	; (80050e4 <_dtoa_r+0x2fc>)
 8004f6e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8004f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f76:	f7fb fd21 	bl	80009bc <__aeabi_dcmplt>
 8004f7a:	2800      	cmp	r0, #0
 8004f7c:	d04e      	beq.n	800501c <_dtoa_r+0x234>
 8004f7e:	2300      	movs	r3, #0
 8004f80:	f109 39ff 	add.w	r9, r9, #4294967295
 8004f84:	930f      	str	r3, [sp, #60]	; 0x3c
 8004f86:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004f88:	1b1c      	subs	r4, r3, r4
 8004f8a:	1e63      	subs	r3, r4, #1
 8004f8c:	9309      	str	r3, [sp, #36]	; 0x24
 8004f8e:	bf49      	itett	mi
 8004f90:	f1c4 0301 	rsbmi	r3, r4, #1
 8004f94:	2300      	movpl	r3, #0
 8004f96:	9306      	strmi	r3, [sp, #24]
 8004f98:	2300      	movmi	r3, #0
 8004f9a:	bf54      	ite	pl
 8004f9c:	9306      	strpl	r3, [sp, #24]
 8004f9e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004fa0:	f1b9 0f00 	cmp.w	r9, #0
 8004fa4:	db3c      	blt.n	8005020 <_dtoa_r+0x238>
 8004fa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fa8:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8004fac:	444b      	add	r3, r9
 8004fae:	9309      	str	r3, [sp, #36]	; 0x24
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	930a      	str	r3, [sp, #40]	; 0x28
 8004fb4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004fb6:	2b09      	cmp	r3, #9
 8004fb8:	d86c      	bhi.n	8005094 <_dtoa_r+0x2ac>
 8004fba:	2b05      	cmp	r3, #5
 8004fbc:	bfc4      	itt	gt
 8004fbe:	3b04      	subgt	r3, #4
 8004fc0:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004fc2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004fc4:	bfc8      	it	gt
 8004fc6:	2400      	movgt	r4, #0
 8004fc8:	f1a3 0302 	sub.w	r3, r3, #2
 8004fcc:	bfd8      	it	le
 8004fce:	2401      	movle	r4, #1
 8004fd0:	2b03      	cmp	r3, #3
 8004fd2:	f200 808b 	bhi.w	80050ec <_dtoa_r+0x304>
 8004fd6:	e8df f003 	tbb	[pc, r3]
 8004fda:	4f2d      	.short	0x4f2d
 8004fdc:	5b4d      	.short	0x5b4d
 8004fde:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004fe2:	441c      	add	r4, r3
 8004fe4:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004fe8:	2b20      	cmp	r3, #32
 8004fea:	bfc3      	ittte	gt
 8004fec:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004ff0:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8004ff4:	fa09 f303 	lslgt.w	r3, r9, r3
 8004ff8:	f1c3 0320 	rsble	r3, r3, #32
 8004ffc:	bfc6      	itte	gt
 8004ffe:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005002:	4318      	orrgt	r0, r3
 8005004:	fa06 f003 	lslle.w	r0, r6, r3
 8005008:	f7fb f9ec 	bl	80003e4 <__aeabi_ui2d>
 800500c:	2301      	movs	r3, #1
 800500e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005012:	3c01      	subs	r4, #1
 8005014:	9313      	str	r3, [sp, #76]	; 0x4c
 8005016:	e770      	b.n	8004efa <_dtoa_r+0x112>
 8005018:	2301      	movs	r3, #1
 800501a:	e7b3      	b.n	8004f84 <_dtoa_r+0x19c>
 800501c:	900f      	str	r0, [sp, #60]	; 0x3c
 800501e:	e7b2      	b.n	8004f86 <_dtoa_r+0x19e>
 8005020:	9b06      	ldr	r3, [sp, #24]
 8005022:	eba3 0309 	sub.w	r3, r3, r9
 8005026:	9306      	str	r3, [sp, #24]
 8005028:	f1c9 0300 	rsb	r3, r9, #0
 800502c:	930a      	str	r3, [sp, #40]	; 0x28
 800502e:	2300      	movs	r3, #0
 8005030:	930e      	str	r3, [sp, #56]	; 0x38
 8005032:	e7bf      	b.n	8004fb4 <_dtoa_r+0x1cc>
 8005034:	2300      	movs	r3, #0
 8005036:	930b      	str	r3, [sp, #44]	; 0x2c
 8005038:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800503a:	2b00      	cmp	r3, #0
 800503c:	dc59      	bgt.n	80050f2 <_dtoa_r+0x30a>
 800503e:	f04f 0b01 	mov.w	fp, #1
 8005042:	465b      	mov	r3, fp
 8005044:	f8cd b008 	str.w	fp, [sp, #8]
 8005048:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800504c:	2200      	movs	r2, #0
 800504e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005050:	6042      	str	r2, [r0, #4]
 8005052:	2204      	movs	r2, #4
 8005054:	f102 0614 	add.w	r6, r2, #20
 8005058:	429e      	cmp	r6, r3
 800505a:	6841      	ldr	r1, [r0, #4]
 800505c:	d94f      	bls.n	80050fe <_dtoa_r+0x316>
 800505e:	4628      	mov	r0, r5
 8005060:	f000 fcd8 	bl	8005a14 <_Balloc>
 8005064:	9008      	str	r0, [sp, #32]
 8005066:	2800      	cmp	r0, #0
 8005068:	d14d      	bne.n	8005106 <_dtoa_r+0x31e>
 800506a:	4602      	mov	r2, r0
 800506c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005070:	4b1d      	ldr	r3, [pc, #116]	; (80050e8 <_dtoa_r+0x300>)
 8005072:	e6cd      	b.n	8004e10 <_dtoa_r+0x28>
 8005074:	2301      	movs	r3, #1
 8005076:	e7de      	b.n	8005036 <_dtoa_r+0x24e>
 8005078:	2300      	movs	r3, #0
 800507a:	930b      	str	r3, [sp, #44]	; 0x2c
 800507c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800507e:	eb09 0b03 	add.w	fp, r9, r3
 8005082:	f10b 0301 	add.w	r3, fp, #1
 8005086:	2b01      	cmp	r3, #1
 8005088:	9302      	str	r3, [sp, #8]
 800508a:	bfb8      	it	lt
 800508c:	2301      	movlt	r3, #1
 800508e:	e7dd      	b.n	800504c <_dtoa_r+0x264>
 8005090:	2301      	movs	r3, #1
 8005092:	e7f2      	b.n	800507a <_dtoa_r+0x292>
 8005094:	2401      	movs	r4, #1
 8005096:	2300      	movs	r3, #0
 8005098:	940b      	str	r4, [sp, #44]	; 0x2c
 800509a:	9322      	str	r3, [sp, #136]	; 0x88
 800509c:	f04f 3bff 	mov.w	fp, #4294967295
 80050a0:	2200      	movs	r2, #0
 80050a2:	2312      	movs	r3, #18
 80050a4:	f8cd b008 	str.w	fp, [sp, #8]
 80050a8:	9223      	str	r2, [sp, #140]	; 0x8c
 80050aa:	e7cf      	b.n	800504c <_dtoa_r+0x264>
 80050ac:	f3af 8000 	nop.w
 80050b0:	636f4361 	.word	0x636f4361
 80050b4:	3fd287a7 	.word	0x3fd287a7
 80050b8:	8b60c8b3 	.word	0x8b60c8b3
 80050bc:	3fc68a28 	.word	0x3fc68a28
 80050c0:	509f79fb 	.word	0x509f79fb
 80050c4:	3fd34413 	.word	0x3fd34413
 80050c8:	0800720d 	.word	0x0800720d
 80050cc:	08007224 	.word	0x08007224
 80050d0:	7ff00000 	.word	0x7ff00000
 80050d4:	08007209 	.word	0x08007209
 80050d8:	08007200 	.word	0x08007200
 80050dc:	080071dd 	.word	0x080071dd
 80050e0:	3ff80000 	.word	0x3ff80000
 80050e4:	08007320 	.word	0x08007320
 80050e8:	08007283 	.word	0x08007283
 80050ec:	2301      	movs	r3, #1
 80050ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80050f0:	e7d4      	b.n	800509c <_dtoa_r+0x2b4>
 80050f2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80050f6:	465b      	mov	r3, fp
 80050f8:	f8cd b008 	str.w	fp, [sp, #8]
 80050fc:	e7a6      	b.n	800504c <_dtoa_r+0x264>
 80050fe:	3101      	adds	r1, #1
 8005100:	6041      	str	r1, [r0, #4]
 8005102:	0052      	lsls	r2, r2, #1
 8005104:	e7a6      	b.n	8005054 <_dtoa_r+0x26c>
 8005106:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005108:	9a08      	ldr	r2, [sp, #32]
 800510a:	601a      	str	r2, [r3, #0]
 800510c:	9b02      	ldr	r3, [sp, #8]
 800510e:	2b0e      	cmp	r3, #14
 8005110:	f200 80a8 	bhi.w	8005264 <_dtoa_r+0x47c>
 8005114:	2c00      	cmp	r4, #0
 8005116:	f000 80a5 	beq.w	8005264 <_dtoa_r+0x47c>
 800511a:	f1b9 0f00 	cmp.w	r9, #0
 800511e:	dd34      	ble.n	800518a <_dtoa_r+0x3a2>
 8005120:	4a9a      	ldr	r2, [pc, #616]	; (800538c <_dtoa_r+0x5a4>)
 8005122:	f009 030f 	and.w	r3, r9, #15
 8005126:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800512a:	f419 7f80 	tst.w	r9, #256	; 0x100
 800512e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005132:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005136:	ea4f 1429 	mov.w	r4, r9, asr #4
 800513a:	d016      	beq.n	800516a <_dtoa_r+0x382>
 800513c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005140:	4b93      	ldr	r3, [pc, #588]	; (8005390 <_dtoa_r+0x5a8>)
 8005142:	2703      	movs	r7, #3
 8005144:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005148:	f7fb faf0 	bl	800072c <__aeabi_ddiv>
 800514c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005150:	f004 040f 	and.w	r4, r4, #15
 8005154:	4e8e      	ldr	r6, [pc, #568]	; (8005390 <_dtoa_r+0x5a8>)
 8005156:	b954      	cbnz	r4, 800516e <_dtoa_r+0x386>
 8005158:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800515c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005160:	f7fb fae4 	bl	800072c <__aeabi_ddiv>
 8005164:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005168:	e029      	b.n	80051be <_dtoa_r+0x3d6>
 800516a:	2702      	movs	r7, #2
 800516c:	e7f2      	b.n	8005154 <_dtoa_r+0x36c>
 800516e:	07e1      	lsls	r1, r4, #31
 8005170:	d508      	bpl.n	8005184 <_dtoa_r+0x39c>
 8005172:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005176:	e9d6 2300 	ldrd	r2, r3, [r6]
 800517a:	f7fb f9ad 	bl	80004d8 <__aeabi_dmul>
 800517e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005182:	3701      	adds	r7, #1
 8005184:	1064      	asrs	r4, r4, #1
 8005186:	3608      	adds	r6, #8
 8005188:	e7e5      	b.n	8005156 <_dtoa_r+0x36e>
 800518a:	f000 80a5 	beq.w	80052d8 <_dtoa_r+0x4f0>
 800518e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005192:	f1c9 0400 	rsb	r4, r9, #0
 8005196:	4b7d      	ldr	r3, [pc, #500]	; (800538c <_dtoa_r+0x5a4>)
 8005198:	f004 020f 	and.w	r2, r4, #15
 800519c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80051a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a4:	f7fb f998 	bl	80004d8 <__aeabi_dmul>
 80051a8:	2702      	movs	r7, #2
 80051aa:	2300      	movs	r3, #0
 80051ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80051b0:	4e77      	ldr	r6, [pc, #476]	; (8005390 <_dtoa_r+0x5a8>)
 80051b2:	1124      	asrs	r4, r4, #4
 80051b4:	2c00      	cmp	r4, #0
 80051b6:	f040 8084 	bne.w	80052c2 <_dtoa_r+0x4da>
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d1d2      	bne.n	8005164 <_dtoa_r+0x37c>
 80051be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	f000 808b 	beq.w	80052dc <_dtoa_r+0x4f4>
 80051c6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80051ca:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80051ce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80051d2:	2200      	movs	r2, #0
 80051d4:	4b6f      	ldr	r3, [pc, #444]	; (8005394 <_dtoa_r+0x5ac>)
 80051d6:	f7fb fbf1 	bl	80009bc <__aeabi_dcmplt>
 80051da:	2800      	cmp	r0, #0
 80051dc:	d07e      	beq.n	80052dc <_dtoa_r+0x4f4>
 80051de:	9b02      	ldr	r3, [sp, #8]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d07b      	beq.n	80052dc <_dtoa_r+0x4f4>
 80051e4:	f1bb 0f00 	cmp.w	fp, #0
 80051e8:	dd38      	ble.n	800525c <_dtoa_r+0x474>
 80051ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80051ee:	2200      	movs	r2, #0
 80051f0:	4b69      	ldr	r3, [pc, #420]	; (8005398 <_dtoa_r+0x5b0>)
 80051f2:	f7fb f971 	bl	80004d8 <__aeabi_dmul>
 80051f6:	465c      	mov	r4, fp
 80051f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80051fc:	f109 38ff 	add.w	r8, r9, #4294967295
 8005200:	3701      	adds	r7, #1
 8005202:	4638      	mov	r0, r7
 8005204:	f7fb f8fe 	bl	8000404 <__aeabi_i2d>
 8005208:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800520c:	f7fb f964 	bl	80004d8 <__aeabi_dmul>
 8005210:	2200      	movs	r2, #0
 8005212:	4b62      	ldr	r3, [pc, #392]	; (800539c <_dtoa_r+0x5b4>)
 8005214:	f7fa ffaa 	bl	800016c <__adddf3>
 8005218:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800521c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005220:	9611      	str	r6, [sp, #68]	; 0x44
 8005222:	2c00      	cmp	r4, #0
 8005224:	d15d      	bne.n	80052e2 <_dtoa_r+0x4fa>
 8005226:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800522a:	2200      	movs	r2, #0
 800522c:	4b5c      	ldr	r3, [pc, #368]	; (80053a0 <_dtoa_r+0x5b8>)
 800522e:	f7fa ff9b 	bl	8000168 <__aeabi_dsub>
 8005232:	4602      	mov	r2, r0
 8005234:	460b      	mov	r3, r1
 8005236:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800523a:	4633      	mov	r3, r6
 800523c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800523e:	f7fb fbdb 	bl	80009f8 <__aeabi_dcmpgt>
 8005242:	2800      	cmp	r0, #0
 8005244:	f040 829e 	bne.w	8005784 <_dtoa_r+0x99c>
 8005248:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800524c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800524e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005252:	f7fb fbb3 	bl	80009bc <__aeabi_dcmplt>
 8005256:	2800      	cmp	r0, #0
 8005258:	f040 8292 	bne.w	8005780 <_dtoa_r+0x998>
 800525c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005260:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005264:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005266:	2b00      	cmp	r3, #0
 8005268:	f2c0 8153 	blt.w	8005512 <_dtoa_r+0x72a>
 800526c:	f1b9 0f0e 	cmp.w	r9, #14
 8005270:	f300 814f 	bgt.w	8005512 <_dtoa_r+0x72a>
 8005274:	4b45      	ldr	r3, [pc, #276]	; (800538c <_dtoa_r+0x5a4>)
 8005276:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800527a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800527e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005282:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005284:	2b00      	cmp	r3, #0
 8005286:	f280 80db 	bge.w	8005440 <_dtoa_r+0x658>
 800528a:	9b02      	ldr	r3, [sp, #8]
 800528c:	2b00      	cmp	r3, #0
 800528e:	f300 80d7 	bgt.w	8005440 <_dtoa_r+0x658>
 8005292:	f040 8274 	bne.w	800577e <_dtoa_r+0x996>
 8005296:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800529a:	2200      	movs	r2, #0
 800529c:	4b40      	ldr	r3, [pc, #256]	; (80053a0 <_dtoa_r+0x5b8>)
 800529e:	f7fb f91b 	bl	80004d8 <__aeabi_dmul>
 80052a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80052a6:	f7fb fb9d 	bl	80009e4 <__aeabi_dcmpge>
 80052aa:	9c02      	ldr	r4, [sp, #8]
 80052ac:	4626      	mov	r6, r4
 80052ae:	2800      	cmp	r0, #0
 80052b0:	f040 824a 	bne.w	8005748 <_dtoa_r+0x960>
 80052b4:	2331      	movs	r3, #49	; 0x31
 80052b6:	9f08      	ldr	r7, [sp, #32]
 80052b8:	f109 0901 	add.w	r9, r9, #1
 80052bc:	f807 3b01 	strb.w	r3, [r7], #1
 80052c0:	e246      	b.n	8005750 <_dtoa_r+0x968>
 80052c2:	07e2      	lsls	r2, r4, #31
 80052c4:	d505      	bpl.n	80052d2 <_dtoa_r+0x4ea>
 80052c6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80052ca:	f7fb f905 	bl	80004d8 <__aeabi_dmul>
 80052ce:	2301      	movs	r3, #1
 80052d0:	3701      	adds	r7, #1
 80052d2:	1064      	asrs	r4, r4, #1
 80052d4:	3608      	adds	r6, #8
 80052d6:	e76d      	b.n	80051b4 <_dtoa_r+0x3cc>
 80052d8:	2702      	movs	r7, #2
 80052da:	e770      	b.n	80051be <_dtoa_r+0x3d6>
 80052dc:	46c8      	mov	r8, r9
 80052de:	9c02      	ldr	r4, [sp, #8]
 80052e0:	e78f      	b.n	8005202 <_dtoa_r+0x41a>
 80052e2:	9908      	ldr	r1, [sp, #32]
 80052e4:	4b29      	ldr	r3, [pc, #164]	; (800538c <_dtoa_r+0x5a4>)
 80052e6:	4421      	add	r1, r4
 80052e8:	9112      	str	r1, [sp, #72]	; 0x48
 80052ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80052ec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80052f0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80052f4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80052f8:	2900      	cmp	r1, #0
 80052fa:	d055      	beq.n	80053a8 <_dtoa_r+0x5c0>
 80052fc:	2000      	movs	r0, #0
 80052fe:	4929      	ldr	r1, [pc, #164]	; (80053a4 <_dtoa_r+0x5bc>)
 8005300:	f7fb fa14 	bl	800072c <__aeabi_ddiv>
 8005304:	463b      	mov	r3, r7
 8005306:	4632      	mov	r2, r6
 8005308:	f7fa ff2e 	bl	8000168 <__aeabi_dsub>
 800530c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005310:	9f08      	ldr	r7, [sp, #32]
 8005312:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005316:	f7fb fb8f 	bl	8000a38 <__aeabi_d2iz>
 800531a:	4604      	mov	r4, r0
 800531c:	f7fb f872 	bl	8000404 <__aeabi_i2d>
 8005320:	4602      	mov	r2, r0
 8005322:	460b      	mov	r3, r1
 8005324:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005328:	f7fa ff1e 	bl	8000168 <__aeabi_dsub>
 800532c:	4602      	mov	r2, r0
 800532e:	460b      	mov	r3, r1
 8005330:	3430      	adds	r4, #48	; 0x30
 8005332:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005336:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800533a:	f807 4b01 	strb.w	r4, [r7], #1
 800533e:	f7fb fb3d 	bl	80009bc <__aeabi_dcmplt>
 8005342:	2800      	cmp	r0, #0
 8005344:	d174      	bne.n	8005430 <_dtoa_r+0x648>
 8005346:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800534a:	2000      	movs	r0, #0
 800534c:	4911      	ldr	r1, [pc, #68]	; (8005394 <_dtoa_r+0x5ac>)
 800534e:	f7fa ff0b 	bl	8000168 <__aeabi_dsub>
 8005352:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005356:	f7fb fb31 	bl	80009bc <__aeabi_dcmplt>
 800535a:	2800      	cmp	r0, #0
 800535c:	f040 80b6 	bne.w	80054cc <_dtoa_r+0x6e4>
 8005360:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005362:	429f      	cmp	r7, r3
 8005364:	f43f af7a 	beq.w	800525c <_dtoa_r+0x474>
 8005368:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800536c:	2200      	movs	r2, #0
 800536e:	4b0a      	ldr	r3, [pc, #40]	; (8005398 <_dtoa_r+0x5b0>)
 8005370:	f7fb f8b2 	bl	80004d8 <__aeabi_dmul>
 8005374:	2200      	movs	r2, #0
 8005376:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800537a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800537e:	4b06      	ldr	r3, [pc, #24]	; (8005398 <_dtoa_r+0x5b0>)
 8005380:	f7fb f8aa 	bl	80004d8 <__aeabi_dmul>
 8005384:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005388:	e7c3      	b.n	8005312 <_dtoa_r+0x52a>
 800538a:	bf00      	nop
 800538c:	08007320 	.word	0x08007320
 8005390:	080072f8 	.word	0x080072f8
 8005394:	3ff00000 	.word	0x3ff00000
 8005398:	40240000 	.word	0x40240000
 800539c:	401c0000 	.word	0x401c0000
 80053a0:	40140000 	.word	0x40140000
 80053a4:	3fe00000 	.word	0x3fe00000
 80053a8:	4630      	mov	r0, r6
 80053aa:	4639      	mov	r1, r7
 80053ac:	f7fb f894 	bl	80004d8 <__aeabi_dmul>
 80053b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80053b2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80053b6:	9c08      	ldr	r4, [sp, #32]
 80053b8:	9314      	str	r3, [sp, #80]	; 0x50
 80053ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80053be:	f7fb fb3b 	bl	8000a38 <__aeabi_d2iz>
 80053c2:	9015      	str	r0, [sp, #84]	; 0x54
 80053c4:	f7fb f81e 	bl	8000404 <__aeabi_i2d>
 80053c8:	4602      	mov	r2, r0
 80053ca:	460b      	mov	r3, r1
 80053cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80053d0:	f7fa feca 	bl	8000168 <__aeabi_dsub>
 80053d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80053d6:	4606      	mov	r6, r0
 80053d8:	3330      	adds	r3, #48	; 0x30
 80053da:	f804 3b01 	strb.w	r3, [r4], #1
 80053de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80053e0:	460f      	mov	r7, r1
 80053e2:	429c      	cmp	r4, r3
 80053e4:	f04f 0200 	mov.w	r2, #0
 80053e8:	d124      	bne.n	8005434 <_dtoa_r+0x64c>
 80053ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80053ee:	4bb3      	ldr	r3, [pc, #716]	; (80056bc <_dtoa_r+0x8d4>)
 80053f0:	f7fa febc 	bl	800016c <__adddf3>
 80053f4:	4602      	mov	r2, r0
 80053f6:	460b      	mov	r3, r1
 80053f8:	4630      	mov	r0, r6
 80053fa:	4639      	mov	r1, r7
 80053fc:	f7fb fafc 	bl	80009f8 <__aeabi_dcmpgt>
 8005400:	2800      	cmp	r0, #0
 8005402:	d162      	bne.n	80054ca <_dtoa_r+0x6e2>
 8005404:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005408:	2000      	movs	r0, #0
 800540a:	49ac      	ldr	r1, [pc, #688]	; (80056bc <_dtoa_r+0x8d4>)
 800540c:	f7fa feac 	bl	8000168 <__aeabi_dsub>
 8005410:	4602      	mov	r2, r0
 8005412:	460b      	mov	r3, r1
 8005414:	4630      	mov	r0, r6
 8005416:	4639      	mov	r1, r7
 8005418:	f7fb fad0 	bl	80009bc <__aeabi_dcmplt>
 800541c:	2800      	cmp	r0, #0
 800541e:	f43f af1d 	beq.w	800525c <_dtoa_r+0x474>
 8005422:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005424:	1e7b      	subs	r3, r7, #1
 8005426:	9314      	str	r3, [sp, #80]	; 0x50
 8005428:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800542c:	2b30      	cmp	r3, #48	; 0x30
 800542e:	d0f8      	beq.n	8005422 <_dtoa_r+0x63a>
 8005430:	46c1      	mov	r9, r8
 8005432:	e03a      	b.n	80054aa <_dtoa_r+0x6c2>
 8005434:	4ba2      	ldr	r3, [pc, #648]	; (80056c0 <_dtoa_r+0x8d8>)
 8005436:	f7fb f84f 	bl	80004d8 <__aeabi_dmul>
 800543a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800543e:	e7bc      	b.n	80053ba <_dtoa_r+0x5d2>
 8005440:	9f08      	ldr	r7, [sp, #32]
 8005442:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005446:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800544a:	f7fb f96f 	bl	800072c <__aeabi_ddiv>
 800544e:	f7fb faf3 	bl	8000a38 <__aeabi_d2iz>
 8005452:	4604      	mov	r4, r0
 8005454:	f7fa ffd6 	bl	8000404 <__aeabi_i2d>
 8005458:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800545c:	f7fb f83c 	bl	80004d8 <__aeabi_dmul>
 8005460:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005464:	460b      	mov	r3, r1
 8005466:	4602      	mov	r2, r0
 8005468:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800546c:	f7fa fe7c 	bl	8000168 <__aeabi_dsub>
 8005470:	f807 6b01 	strb.w	r6, [r7], #1
 8005474:	9e08      	ldr	r6, [sp, #32]
 8005476:	9b02      	ldr	r3, [sp, #8]
 8005478:	1bbe      	subs	r6, r7, r6
 800547a:	42b3      	cmp	r3, r6
 800547c:	d13a      	bne.n	80054f4 <_dtoa_r+0x70c>
 800547e:	4602      	mov	r2, r0
 8005480:	460b      	mov	r3, r1
 8005482:	f7fa fe73 	bl	800016c <__adddf3>
 8005486:	4602      	mov	r2, r0
 8005488:	460b      	mov	r3, r1
 800548a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800548e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005492:	f7fb fab1 	bl	80009f8 <__aeabi_dcmpgt>
 8005496:	bb58      	cbnz	r0, 80054f0 <_dtoa_r+0x708>
 8005498:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800549c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054a0:	f7fb fa82 	bl	80009a8 <__aeabi_dcmpeq>
 80054a4:	b108      	cbz	r0, 80054aa <_dtoa_r+0x6c2>
 80054a6:	07e1      	lsls	r1, r4, #31
 80054a8:	d422      	bmi.n	80054f0 <_dtoa_r+0x708>
 80054aa:	4628      	mov	r0, r5
 80054ac:	4651      	mov	r1, sl
 80054ae:	f000 faf1 	bl	8005a94 <_Bfree>
 80054b2:	2300      	movs	r3, #0
 80054b4:	703b      	strb	r3, [r7, #0]
 80054b6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80054b8:	f109 0001 	add.w	r0, r9, #1
 80054bc:	6018      	str	r0, [r3, #0]
 80054be:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	f43f acdf 	beq.w	8004e84 <_dtoa_r+0x9c>
 80054c6:	601f      	str	r7, [r3, #0]
 80054c8:	e4dc      	b.n	8004e84 <_dtoa_r+0x9c>
 80054ca:	4627      	mov	r7, r4
 80054cc:	463b      	mov	r3, r7
 80054ce:	461f      	mov	r7, r3
 80054d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80054d4:	2a39      	cmp	r2, #57	; 0x39
 80054d6:	d107      	bne.n	80054e8 <_dtoa_r+0x700>
 80054d8:	9a08      	ldr	r2, [sp, #32]
 80054da:	429a      	cmp	r2, r3
 80054dc:	d1f7      	bne.n	80054ce <_dtoa_r+0x6e6>
 80054de:	2230      	movs	r2, #48	; 0x30
 80054e0:	9908      	ldr	r1, [sp, #32]
 80054e2:	f108 0801 	add.w	r8, r8, #1
 80054e6:	700a      	strb	r2, [r1, #0]
 80054e8:	781a      	ldrb	r2, [r3, #0]
 80054ea:	3201      	adds	r2, #1
 80054ec:	701a      	strb	r2, [r3, #0]
 80054ee:	e79f      	b.n	8005430 <_dtoa_r+0x648>
 80054f0:	46c8      	mov	r8, r9
 80054f2:	e7eb      	b.n	80054cc <_dtoa_r+0x6e4>
 80054f4:	2200      	movs	r2, #0
 80054f6:	4b72      	ldr	r3, [pc, #456]	; (80056c0 <_dtoa_r+0x8d8>)
 80054f8:	f7fa ffee 	bl	80004d8 <__aeabi_dmul>
 80054fc:	4602      	mov	r2, r0
 80054fe:	460b      	mov	r3, r1
 8005500:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005504:	2200      	movs	r2, #0
 8005506:	2300      	movs	r3, #0
 8005508:	f7fb fa4e 	bl	80009a8 <__aeabi_dcmpeq>
 800550c:	2800      	cmp	r0, #0
 800550e:	d098      	beq.n	8005442 <_dtoa_r+0x65a>
 8005510:	e7cb      	b.n	80054aa <_dtoa_r+0x6c2>
 8005512:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005514:	2a00      	cmp	r2, #0
 8005516:	f000 80cd 	beq.w	80056b4 <_dtoa_r+0x8cc>
 800551a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800551c:	2a01      	cmp	r2, #1
 800551e:	f300 80af 	bgt.w	8005680 <_dtoa_r+0x898>
 8005522:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005524:	2a00      	cmp	r2, #0
 8005526:	f000 80a7 	beq.w	8005678 <_dtoa_r+0x890>
 800552a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800552e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005530:	9f06      	ldr	r7, [sp, #24]
 8005532:	9a06      	ldr	r2, [sp, #24]
 8005534:	2101      	movs	r1, #1
 8005536:	441a      	add	r2, r3
 8005538:	9206      	str	r2, [sp, #24]
 800553a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800553c:	4628      	mov	r0, r5
 800553e:	441a      	add	r2, r3
 8005540:	9209      	str	r2, [sp, #36]	; 0x24
 8005542:	f000 fb61 	bl	8005c08 <__i2b>
 8005546:	4606      	mov	r6, r0
 8005548:	2f00      	cmp	r7, #0
 800554a:	dd0c      	ble.n	8005566 <_dtoa_r+0x77e>
 800554c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800554e:	2b00      	cmp	r3, #0
 8005550:	dd09      	ble.n	8005566 <_dtoa_r+0x77e>
 8005552:	42bb      	cmp	r3, r7
 8005554:	bfa8      	it	ge
 8005556:	463b      	movge	r3, r7
 8005558:	9a06      	ldr	r2, [sp, #24]
 800555a:	1aff      	subs	r7, r7, r3
 800555c:	1ad2      	subs	r2, r2, r3
 800555e:	9206      	str	r2, [sp, #24]
 8005560:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	9309      	str	r3, [sp, #36]	; 0x24
 8005566:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005568:	b1f3      	cbz	r3, 80055a8 <_dtoa_r+0x7c0>
 800556a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800556c:	2b00      	cmp	r3, #0
 800556e:	f000 80a9 	beq.w	80056c4 <_dtoa_r+0x8dc>
 8005572:	2c00      	cmp	r4, #0
 8005574:	dd10      	ble.n	8005598 <_dtoa_r+0x7b0>
 8005576:	4631      	mov	r1, r6
 8005578:	4622      	mov	r2, r4
 800557a:	4628      	mov	r0, r5
 800557c:	f000 fbfe 	bl	8005d7c <__pow5mult>
 8005580:	4652      	mov	r2, sl
 8005582:	4601      	mov	r1, r0
 8005584:	4606      	mov	r6, r0
 8005586:	4628      	mov	r0, r5
 8005588:	f000 fb54 	bl	8005c34 <__multiply>
 800558c:	4680      	mov	r8, r0
 800558e:	4651      	mov	r1, sl
 8005590:	4628      	mov	r0, r5
 8005592:	f000 fa7f 	bl	8005a94 <_Bfree>
 8005596:	46c2      	mov	sl, r8
 8005598:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800559a:	1b1a      	subs	r2, r3, r4
 800559c:	d004      	beq.n	80055a8 <_dtoa_r+0x7c0>
 800559e:	4651      	mov	r1, sl
 80055a0:	4628      	mov	r0, r5
 80055a2:	f000 fbeb 	bl	8005d7c <__pow5mult>
 80055a6:	4682      	mov	sl, r0
 80055a8:	2101      	movs	r1, #1
 80055aa:	4628      	mov	r0, r5
 80055ac:	f000 fb2c 	bl	8005c08 <__i2b>
 80055b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055b2:	4604      	mov	r4, r0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	f340 8087 	ble.w	80056c8 <_dtoa_r+0x8e0>
 80055ba:	461a      	mov	r2, r3
 80055bc:	4601      	mov	r1, r0
 80055be:	4628      	mov	r0, r5
 80055c0:	f000 fbdc 	bl	8005d7c <__pow5mult>
 80055c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80055c6:	4604      	mov	r4, r0
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	f340 8080 	ble.w	80056ce <_dtoa_r+0x8e6>
 80055ce:	f04f 0800 	mov.w	r8, #0
 80055d2:	6923      	ldr	r3, [r4, #16]
 80055d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80055d8:	6918      	ldr	r0, [r3, #16]
 80055da:	f000 fac7 	bl	8005b6c <__hi0bits>
 80055de:	f1c0 0020 	rsb	r0, r0, #32
 80055e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055e4:	4418      	add	r0, r3
 80055e6:	f010 001f 	ands.w	r0, r0, #31
 80055ea:	f000 8092 	beq.w	8005712 <_dtoa_r+0x92a>
 80055ee:	f1c0 0320 	rsb	r3, r0, #32
 80055f2:	2b04      	cmp	r3, #4
 80055f4:	f340 808a 	ble.w	800570c <_dtoa_r+0x924>
 80055f8:	f1c0 001c 	rsb	r0, r0, #28
 80055fc:	9b06      	ldr	r3, [sp, #24]
 80055fe:	4407      	add	r7, r0
 8005600:	4403      	add	r3, r0
 8005602:	9306      	str	r3, [sp, #24]
 8005604:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005606:	4403      	add	r3, r0
 8005608:	9309      	str	r3, [sp, #36]	; 0x24
 800560a:	9b06      	ldr	r3, [sp, #24]
 800560c:	2b00      	cmp	r3, #0
 800560e:	dd05      	ble.n	800561c <_dtoa_r+0x834>
 8005610:	4651      	mov	r1, sl
 8005612:	461a      	mov	r2, r3
 8005614:	4628      	mov	r0, r5
 8005616:	f000 fc0b 	bl	8005e30 <__lshift>
 800561a:	4682      	mov	sl, r0
 800561c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800561e:	2b00      	cmp	r3, #0
 8005620:	dd05      	ble.n	800562e <_dtoa_r+0x846>
 8005622:	4621      	mov	r1, r4
 8005624:	461a      	mov	r2, r3
 8005626:	4628      	mov	r0, r5
 8005628:	f000 fc02 	bl	8005e30 <__lshift>
 800562c:	4604      	mov	r4, r0
 800562e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005630:	2b00      	cmp	r3, #0
 8005632:	d070      	beq.n	8005716 <_dtoa_r+0x92e>
 8005634:	4621      	mov	r1, r4
 8005636:	4650      	mov	r0, sl
 8005638:	f000 fc66 	bl	8005f08 <__mcmp>
 800563c:	2800      	cmp	r0, #0
 800563e:	da6a      	bge.n	8005716 <_dtoa_r+0x92e>
 8005640:	2300      	movs	r3, #0
 8005642:	4651      	mov	r1, sl
 8005644:	220a      	movs	r2, #10
 8005646:	4628      	mov	r0, r5
 8005648:	f000 fa46 	bl	8005ad8 <__multadd>
 800564c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800564e:	4682      	mov	sl, r0
 8005650:	f109 39ff 	add.w	r9, r9, #4294967295
 8005654:	2b00      	cmp	r3, #0
 8005656:	f000 8193 	beq.w	8005980 <_dtoa_r+0xb98>
 800565a:	4631      	mov	r1, r6
 800565c:	2300      	movs	r3, #0
 800565e:	220a      	movs	r2, #10
 8005660:	4628      	mov	r0, r5
 8005662:	f000 fa39 	bl	8005ad8 <__multadd>
 8005666:	f1bb 0f00 	cmp.w	fp, #0
 800566a:	4606      	mov	r6, r0
 800566c:	f300 8093 	bgt.w	8005796 <_dtoa_r+0x9ae>
 8005670:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005672:	2b02      	cmp	r3, #2
 8005674:	dc57      	bgt.n	8005726 <_dtoa_r+0x93e>
 8005676:	e08e      	b.n	8005796 <_dtoa_r+0x9ae>
 8005678:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800567a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800567e:	e756      	b.n	800552e <_dtoa_r+0x746>
 8005680:	9b02      	ldr	r3, [sp, #8]
 8005682:	1e5c      	subs	r4, r3, #1
 8005684:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005686:	42a3      	cmp	r3, r4
 8005688:	bfb7      	itett	lt
 800568a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800568c:	1b1c      	subge	r4, r3, r4
 800568e:	1ae2      	sublt	r2, r4, r3
 8005690:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005692:	bfbe      	ittt	lt
 8005694:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005696:	189b      	addlt	r3, r3, r2
 8005698:	930e      	strlt	r3, [sp, #56]	; 0x38
 800569a:	9b02      	ldr	r3, [sp, #8]
 800569c:	bfb8      	it	lt
 800569e:	2400      	movlt	r4, #0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	bfbb      	ittet	lt
 80056a4:	9b06      	ldrlt	r3, [sp, #24]
 80056a6:	9a02      	ldrlt	r2, [sp, #8]
 80056a8:	9f06      	ldrge	r7, [sp, #24]
 80056aa:	1a9f      	sublt	r7, r3, r2
 80056ac:	bfac      	ite	ge
 80056ae:	9b02      	ldrge	r3, [sp, #8]
 80056b0:	2300      	movlt	r3, #0
 80056b2:	e73e      	b.n	8005532 <_dtoa_r+0x74a>
 80056b4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80056b6:	9f06      	ldr	r7, [sp, #24]
 80056b8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80056ba:	e745      	b.n	8005548 <_dtoa_r+0x760>
 80056bc:	3fe00000 	.word	0x3fe00000
 80056c0:	40240000 	.word	0x40240000
 80056c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80056c6:	e76a      	b.n	800559e <_dtoa_r+0x7b6>
 80056c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	dc19      	bgt.n	8005702 <_dtoa_r+0x91a>
 80056ce:	9b04      	ldr	r3, [sp, #16]
 80056d0:	b9bb      	cbnz	r3, 8005702 <_dtoa_r+0x91a>
 80056d2:	9b05      	ldr	r3, [sp, #20]
 80056d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056d8:	b99b      	cbnz	r3, 8005702 <_dtoa_r+0x91a>
 80056da:	9b05      	ldr	r3, [sp, #20]
 80056dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80056e0:	0d1b      	lsrs	r3, r3, #20
 80056e2:	051b      	lsls	r3, r3, #20
 80056e4:	b183      	cbz	r3, 8005708 <_dtoa_r+0x920>
 80056e6:	f04f 0801 	mov.w	r8, #1
 80056ea:	9b06      	ldr	r3, [sp, #24]
 80056ec:	3301      	adds	r3, #1
 80056ee:	9306      	str	r3, [sp, #24]
 80056f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056f2:	3301      	adds	r3, #1
 80056f4:	9309      	str	r3, [sp, #36]	; 0x24
 80056f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	f47f af6a 	bne.w	80055d2 <_dtoa_r+0x7ea>
 80056fe:	2001      	movs	r0, #1
 8005700:	e76f      	b.n	80055e2 <_dtoa_r+0x7fa>
 8005702:	f04f 0800 	mov.w	r8, #0
 8005706:	e7f6      	b.n	80056f6 <_dtoa_r+0x90e>
 8005708:	4698      	mov	r8, r3
 800570a:	e7f4      	b.n	80056f6 <_dtoa_r+0x90e>
 800570c:	f43f af7d 	beq.w	800560a <_dtoa_r+0x822>
 8005710:	4618      	mov	r0, r3
 8005712:	301c      	adds	r0, #28
 8005714:	e772      	b.n	80055fc <_dtoa_r+0x814>
 8005716:	9b02      	ldr	r3, [sp, #8]
 8005718:	2b00      	cmp	r3, #0
 800571a:	dc36      	bgt.n	800578a <_dtoa_r+0x9a2>
 800571c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800571e:	2b02      	cmp	r3, #2
 8005720:	dd33      	ble.n	800578a <_dtoa_r+0x9a2>
 8005722:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005726:	f1bb 0f00 	cmp.w	fp, #0
 800572a:	d10d      	bne.n	8005748 <_dtoa_r+0x960>
 800572c:	4621      	mov	r1, r4
 800572e:	465b      	mov	r3, fp
 8005730:	2205      	movs	r2, #5
 8005732:	4628      	mov	r0, r5
 8005734:	f000 f9d0 	bl	8005ad8 <__multadd>
 8005738:	4601      	mov	r1, r0
 800573a:	4604      	mov	r4, r0
 800573c:	4650      	mov	r0, sl
 800573e:	f000 fbe3 	bl	8005f08 <__mcmp>
 8005742:	2800      	cmp	r0, #0
 8005744:	f73f adb6 	bgt.w	80052b4 <_dtoa_r+0x4cc>
 8005748:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800574a:	9f08      	ldr	r7, [sp, #32]
 800574c:	ea6f 0903 	mvn.w	r9, r3
 8005750:	f04f 0800 	mov.w	r8, #0
 8005754:	4621      	mov	r1, r4
 8005756:	4628      	mov	r0, r5
 8005758:	f000 f99c 	bl	8005a94 <_Bfree>
 800575c:	2e00      	cmp	r6, #0
 800575e:	f43f aea4 	beq.w	80054aa <_dtoa_r+0x6c2>
 8005762:	f1b8 0f00 	cmp.w	r8, #0
 8005766:	d005      	beq.n	8005774 <_dtoa_r+0x98c>
 8005768:	45b0      	cmp	r8, r6
 800576a:	d003      	beq.n	8005774 <_dtoa_r+0x98c>
 800576c:	4641      	mov	r1, r8
 800576e:	4628      	mov	r0, r5
 8005770:	f000 f990 	bl	8005a94 <_Bfree>
 8005774:	4631      	mov	r1, r6
 8005776:	4628      	mov	r0, r5
 8005778:	f000 f98c 	bl	8005a94 <_Bfree>
 800577c:	e695      	b.n	80054aa <_dtoa_r+0x6c2>
 800577e:	2400      	movs	r4, #0
 8005780:	4626      	mov	r6, r4
 8005782:	e7e1      	b.n	8005748 <_dtoa_r+0x960>
 8005784:	46c1      	mov	r9, r8
 8005786:	4626      	mov	r6, r4
 8005788:	e594      	b.n	80052b4 <_dtoa_r+0x4cc>
 800578a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800578c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005790:	2b00      	cmp	r3, #0
 8005792:	f000 80fc 	beq.w	800598e <_dtoa_r+0xba6>
 8005796:	2f00      	cmp	r7, #0
 8005798:	dd05      	ble.n	80057a6 <_dtoa_r+0x9be>
 800579a:	4631      	mov	r1, r6
 800579c:	463a      	mov	r2, r7
 800579e:	4628      	mov	r0, r5
 80057a0:	f000 fb46 	bl	8005e30 <__lshift>
 80057a4:	4606      	mov	r6, r0
 80057a6:	f1b8 0f00 	cmp.w	r8, #0
 80057aa:	d05c      	beq.n	8005866 <_dtoa_r+0xa7e>
 80057ac:	4628      	mov	r0, r5
 80057ae:	6871      	ldr	r1, [r6, #4]
 80057b0:	f000 f930 	bl	8005a14 <_Balloc>
 80057b4:	4607      	mov	r7, r0
 80057b6:	b928      	cbnz	r0, 80057c4 <_dtoa_r+0x9dc>
 80057b8:	4602      	mov	r2, r0
 80057ba:	f240 21ea 	movw	r1, #746	; 0x2ea
 80057be:	4b7e      	ldr	r3, [pc, #504]	; (80059b8 <_dtoa_r+0xbd0>)
 80057c0:	f7ff bb26 	b.w	8004e10 <_dtoa_r+0x28>
 80057c4:	6932      	ldr	r2, [r6, #16]
 80057c6:	f106 010c 	add.w	r1, r6, #12
 80057ca:	3202      	adds	r2, #2
 80057cc:	0092      	lsls	r2, r2, #2
 80057ce:	300c      	adds	r0, #12
 80057d0:	f000 f912 	bl	80059f8 <memcpy>
 80057d4:	2201      	movs	r2, #1
 80057d6:	4639      	mov	r1, r7
 80057d8:	4628      	mov	r0, r5
 80057da:	f000 fb29 	bl	8005e30 <__lshift>
 80057de:	46b0      	mov	r8, r6
 80057e0:	4606      	mov	r6, r0
 80057e2:	9b08      	ldr	r3, [sp, #32]
 80057e4:	3301      	adds	r3, #1
 80057e6:	9302      	str	r3, [sp, #8]
 80057e8:	9b08      	ldr	r3, [sp, #32]
 80057ea:	445b      	add	r3, fp
 80057ec:	930a      	str	r3, [sp, #40]	; 0x28
 80057ee:	9b04      	ldr	r3, [sp, #16]
 80057f0:	f003 0301 	and.w	r3, r3, #1
 80057f4:	9309      	str	r3, [sp, #36]	; 0x24
 80057f6:	9b02      	ldr	r3, [sp, #8]
 80057f8:	4621      	mov	r1, r4
 80057fa:	4650      	mov	r0, sl
 80057fc:	f103 3bff 	add.w	fp, r3, #4294967295
 8005800:	f7ff fa64 	bl	8004ccc <quorem>
 8005804:	4603      	mov	r3, r0
 8005806:	4641      	mov	r1, r8
 8005808:	3330      	adds	r3, #48	; 0x30
 800580a:	9004      	str	r0, [sp, #16]
 800580c:	4650      	mov	r0, sl
 800580e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005810:	f000 fb7a 	bl	8005f08 <__mcmp>
 8005814:	4632      	mov	r2, r6
 8005816:	9006      	str	r0, [sp, #24]
 8005818:	4621      	mov	r1, r4
 800581a:	4628      	mov	r0, r5
 800581c:	f000 fb90 	bl	8005f40 <__mdiff>
 8005820:	68c2      	ldr	r2, [r0, #12]
 8005822:	4607      	mov	r7, r0
 8005824:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005826:	bb02      	cbnz	r2, 800586a <_dtoa_r+0xa82>
 8005828:	4601      	mov	r1, r0
 800582a:	4650      	mov	r0, sl
 800582c:	f000 fb6c 	bl	8005f08 <__mcmp>
 8005830:	4602      	mov	r2, r0
 8005832:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005834:	4639      	mov	r1, r7
 8005836:	4628      	mov	r0, r5
 8005838:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800583c:	f000 f92a 	bl	8005a94 <_Bfree>
 8005840:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005842:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005844:	9f02      	ldr	r7, [sp, #8]
 8005846:	ea43 0102 	orr.w	r1, r3, r2
 800584a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800584c:	430b      	orrs	r3, r1
 800584e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005850:	d10d      	bne.n	800586e <_dtoa_r+0xa86>
 8005852:	2b39      	cmp	r3, #57	; 0x39
 8005854:	d027      	beq.n	80058a6 <_dtoa_r+0xabe>
 8005856:	9a06      	ldr	r2, [sp, #24]
 8005858:	2a00      	cmp	r2, #0
 800585a:	dd01      	ble.n	8005860 <_dtoa_r+0xa78>
 800585c:	9b04      	ldr	r3, [sp, #16]
 800585e:	3331      	adds	r3, #49	; 0x31
 8005860:	f88b 3000 	strb.w	r3, [fp]
 8005864:	e776      	b.n	8005754 <_dtoa_r+0x96c>
 8005866:	4630      	mov	r0, r6
 8005868:	e7b9      	b.n	80057de <_dtoa_r+0x9f6>
 800586a:	2201      	movs	r2, #1
 800586c:	e7e2      	b.n	8005834 <_dtoa_r+0xa4c>
 800586e:	9906      	ldr	r1, [sp, #24]
 8005870:	2900      	cmp	r1, #0
 8005872:	db04      	blt.n	800587e <_dtoa_r+0xa96>
 8005874:	9822      	ldr	r0, [sp, #136]	; 0x88
 8005876:	4301      	orrs	r1, r0
 8005878:	9809      	ldr	r0, [sp, #36]	; 0x24
 800587a:	4301      	orrs	r1, r0
 800587c:	d120      	bne.n	80058c0 <_dtoa_r+0xad8>
 800587e:	2a00      	cmp	r2, #0
 8005880:	ddee      	ble.n	8005860 <_dtoa_r+0xa78>
 8005882:	4651      	mov	r1, sl
 8005884:	2201      	movs	r2, #1
 8005886:	4628      	mov	r0, r5
 8005888:	9302      	str	r3, [sp, #8]
 800588a:	f000 fad1 	bl	8005e30 <__lshift>
 800588e:	4621      	mov	r1, r4
 8005890:	4682      	mov	sl, r0
 8005892:	f000 fb39 	bl	8005f08 <__mcmp>
 8005896:	2800      	cmp	r0, #0
 8005898:	9b02      	ldr	r3, [sp, #8]
 800589a:	dc02      	bgt.n	80058a2 <_dtoa_r+0xaba>
 800589c:	d1e0      	bne.n	8005860 <_dtoa_r+0xa78>
 800589e:	07da      	lsls	r2, r3, #31
 80058a0:	d5de      	bpl.n	8005860 <_dtoa_r+0xa78>
 80058a2:	2b39      	cmp	r3, #57	; 0x39
 80058a4:	d1da      	bne.n	800585c <_dtoa_r+0xa74>
 80058a6:	2339      	movs	r3, #57	; 0x39
 80058a8:	f88b 3000 	strb.w	r3, [fp]
 80058ac:	463b      	mov	r3, r7
 80058ae:	461f      	mov	r7, r3
 80058b0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80058b4:	3b01      	subs	r3, #1
 80058b6:	2a39      	cmp	r2, #57	; 0x39
 80058b8:	d050      	beq.n	800595c <_dtoa_r+0xb74>
 80058ba:	3201      	adds	r2, #1
 80058bc:	701a      	strb	r2, [r3, #0]
 80058be:	e749      	b.n	8005754 <_dtoa_r+0x96c>
 80058c0:	2a00      	cmp	r2, #0
 80058c2:	dd03      	ble.n	80058cc <_dtoa_r+0xae4>
 80058c4:	2b39      	cmp	r3, #57	; 0x39
 80058c6:	d0ee      	beq.n	80058a6 <_dtoa_r+0xabe>
 80058c8:	3301      	adds	r3, #1
 80058ca:	e7c9      	b.n	8005860 <_dtoa_r+0xa78>
 80058cc:	9a02      	ldr	r2, [sp, #8]
 80058ce:	990a      	ldr	r1, [sp, #40]	; 0x28
 80058d0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80058d4:	428a      	cmp	r2, r1
 80058d6:	d02a      	beq.n	800592e <_dtoa_r+0xb46>
 80058d8:	4651      	mov	r1, sl
 80058da:	2300      	movs	r3, #0
 80058dc:	220a      	movs	r2, #10
 80058de:	4628      	mov	r0, r5
 80058e0:	f000 f8fa 	bl	8005ad8 <__multadd>
 80058e4:	45b0      	cmp	r8, r6
 80058e6:	4682      	mov	sl, r0
 80058e8:	f04f 0300 	mov.w	r3, #0
 80058ec:	f04f 020a 	mov.w	r2, #10
 80058f0:	4641      	mov	r1, r8
 80058f2:	4628      	mov	r0, r5
 80058f4:	d107      	bne.n	8005906 <_dtoa_r+0xb1e>
 80058f6:	f000 f8ef 	bl	8005ad8 <__multadd>
 80058fa:	4680      	mov	r8, r0
 80058fc:	4606      	mov	r6, r0
 80058fe:	9b02      	ldr	r3, [sp, #8]
 8005900:	3301      	adds	r3, #1
 8005902:	9302      	str	r3, [sp, #8]
 8005904:	e777      	b.n	80057f6 <_dtoa_r+0xa0e>
 8005906:	f000 f8e7 	bl	8005ad8 <__multadd>
 800590a:	4631      	mov	r1, r6
 800590c:	4680      	mov	r8, r0
 800590e:	2300      	movs	r3, #0
 8005910:	220a      	movs	r2, #10
 8005912:	4628      	mov	r0, r5
 8005914:	f000 f8e0 	bl	8005ad8 <__multadd>
 8005918:	4606      	mov	r6, r0
 800591a:	e7f0      	b.n	80058fe <_dtoa_r+0xb16>
 800591c:	f1bb 0f00 	cmp.w	fp, #0
 8005920:	bfcc      	ite	gt
 8005922:	465f      	movgt	r7, fp
 8005924:	2701      	movle	r7, #1
 8005926:	f04f 0800 	mov.w	r8, #0
 800592a:	9a08      	ldr	r2, [sp, #32]
 800592c:	4417      	add	r7, r2
 800592e:	4651      	mov	r1, sl
 8005930:	2201      	movs	r2, #1
 8005932:	4628      	mov	r0, r5
 8005934:	9302      	str	r3, [sp, #8]
 8005936:	f000 fa7b 	bl	8005e30 <__lshift>
 800593a:	4621      	mov	r1, r4
 800593c:	4682      	mov	sl, r0
 800593e:	f000 fae3 	bl	8005f08 <__mcmp>
 8005942:	2800      	cmp	r0, #0
 8005944:	dcb2      	bgt.n	80058ac <_dtoa_r+0xac4>
 8005946:	d102      	bne.n	800594e <_dtoa_r+0xb66>
 8005948:	9b02      	ldr	r3, [sp, #8]
 800594a:	07db      	lsls	r3, r3, #31
 800594c:	d4ae      	bmi.n	80058ac <_dtoa_r+0xac4>
 800594e:	463b      	mov	r3, r7
 8005950:	461f      	mov	r7, r3
 8005952:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005956:	2a30      	cmp	r2, #48	; 0x30
 8005958:	d0fa      	beq.n	8005950 <_dtoa_r+0xb68>
 800595a:	e6fb      	b.n	8005754 <_dtoa_r+0x96c>
 800595c:	9a08      	ldr	r2, [sp, #32]
 800595e:	429a      	cmp	r2, r3
 8005960:	d1a5      	bne.n	80058ae <_dtoa_r+0xac6>
 8005962:	2331      	movs	r3, #49	; 0x31
 8005964:	f109 0901 	add.w	r9, r9, #1
 8005968:	7013      	strb	r3, [r2, #0]
 800596a:	e6f3      	b.n	8005754 <_dtoa_r+0x96c>
 800596c:	4b13      	ldr	r3, [pc, #76]	; (80059bc <_dtoa_r+0xbd4>)
 800596e:	f7ff baa7 	b.w	8004ec0 <_dtoa_r+0xd8>
 8005972:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005974:	2b00      	cmp	r3, #0
 8005976:	f47f aa80 	bne.w	8004e7a <_dtoa_r+0x92>
 800597a:	4b11      	ldr	r3, [pc, #68]	; (80059c0 <_dtoa_r+0xbd8>)
 800597c:	f7ff baa0 	b.w	8004ec0 <_dtoa_r+0xd8>
 8005980:	f1bb 0f00 	cmp.w	fp, #0
 8005984:	dc03      	bgt.n	800598e <_dtoa_r+0xba6>
 8005986:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005988:	2b02      	cmp	r3, #2
 800598a:	f73f aecc 	bgt.w	8005726 <_dtoa_r+0x93e>
 800598e:	9f08      	ldr	r7, [sp, #32]
 8005990:	4621      	mov	r1, r4
 8005992:	4650      	mov	r0, sl
 8005994:	f7ff f99a 	bl	8004ccc <quorem>
 8005998:	9a08      	ldr	r2, [sp, #32]
 800599a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800599e:	f807 3b01 	strb.w	r3, [r7], #1
 80059a2:	1aba      	subs	r2, r7, r2
 80059a4:	4593      	cmp	fp, r2
 80059a6:	ddb9      	ble.n	800591c <_dtoa_r+0xb34>
 80059a8:	4651      	mov	r1, sl
 80059aa:	2300      	movs	r3, #0
 80059ac:	220a      	movs	r2, #10
 80059ae:	4628      	mov	r0, r5
 80059b0:	f000 f892 	bl	8005ad8 <__multadd>
 80059b4:	4682      	mov	sl, r0
 80059b6:	e7eb      	b.n	8005990 <_dtoa_r+0xba8>
 80059b8:	08007283 	.word	0x08007283
 80059bc:	080071dc 	.word	0x080071dc
 80059c0:	08007200 	.word	0x08007200

080059c4 <_localeconv_r>:
 80059c4:	4800      	ldr	r0, [pc, #0]	; (80059c8 <_localeconv_r+0x4>)
 80059c6:	4770      	bx	lr
 80059c8:	20000160 	.word	0x20000160

080059cc <malloc>:
 80059cc:	4b02      	ldr	r3, [pc, #8]	; (80059d8 <malloc+0xc>)
 80059ce:	4601      	mov	r1, r0
 80059d0:	6818      	ldr	r0, [r3, #0]
 80059d2:	f000 bbfb 	b.w	80061cc <_malloc_r>
 80059d6:	bf00      	nop
 80059d8:	2000000c 	.word	0x2000000c

080059dc <memchr>:
 80059dc:	4603      	mov	r3, r0
 80059de:	b510      	push	{r4, lr}
 80059e0:	b2c9      	uxtb	r1, r1
 80059e2:	4402      	add	r2, r0
 80059e4:	4293      	cmp	r3, r2
 80059e6:	4618      	mov	r0, r3
 80059e8:	d101      	bne.n	80059ee <memchr+0x12>
 80059ea:	2000      	movs	r0, #0
 80059ec:	e003      	b.n	80059f6 <memchr+0x1a>
 80059ee:	7804      	ldrb	r4, [r0, #0]
 80059f0:	3301      	adds	r3, #1
 80059f2:	428c      	cmp	r4, r1
 80059f4:	d1f6      	bne.n	80059e4 <memchr+0x8>
 80059f6:	bd10      	pop	{r4, pc}

080059f8 <memcpy>:
 80059f8:	440a      	add	r2, r1
 80059fa:	4291      	cmp	r1, r2
 80059fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a00:	d100      	bne.n	8005a04 <memcpy+0xc>
 8005a02:	4770      	bx	lr
 8005a04:	b510      	push	{r4, lr}
 8005a06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a0a:	4291      	cmp	r1, r2
 8005a0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a10:	d1f9      	bne.n	8005a06 <memcpy+0xe>
 8005a12:	bd10      	pop	{r4, pc}

08005a14 <_Balloc>:
 8005a14:	b570      	push	{r4, r5, r6, lr}
 8005a16:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005a18:	4604      	mov	r4, r0
 8005a1a:	460d      	mov	r5, r1
 8005a1c:	b976      	cbnz	r6, 8005a3c <_Balloc+0x28>
 8005a1e:	2010      	movs	r0, #16
 8005a20:	f7ff ffd4 	bl	80059cc <malloc>
 8005a24:	4602      	mov	r2, r0
 8005a26:	6260      	str	r0, [r4, #36]	; 0x24
 8005a28:	b920      	cbnz	r0, 8005a34 <_Balloc+0x20>
 8005a2a:	2166      	movs	r1, #102	; 0x66
 8005a2c:	4b17      	ldr	r3, [pc, #92]	; (8005a8c <_Balloc+0x78>)
 8005a2e:	4818      	ldr	r0, [pc, #96]	; (8005a90 <_Balloc+0x7c>)
 8005a30:	f000 fd92 	bl	8006558 <__assert_func>
 8005a34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005a38:	6006      	str	r6, [r0, #0]
 8005a3a:	60c6      	str	r6, [r0, #12]
 8005a3c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005a3e:	68f3      	ldr	r3, [r6, #12]
 8005a40:	b183      	cbz	r3, 8005a64 <_Balloc+0x50>
 8005a42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005a4a:	b9b8      	cbnz	r0, 8005a7c <_Balloc+0x68>
 8005a4c:	2101      	movs	r1, #1
 8005a4e:	fa01 f605 	lsl.w	r6, r1, r5
 8005a52:	1d72      	adds	r2, r6, #5
 8005a54:	4620      	mov	r0, r4
 8005a56:	0092      	lsls	r2, r2, #2
 8005a58:	f000 fb5e 	bl	8006118 <_calloc_r>
 8005a5c:	b160      	cbz	r0, 8005a78 <_Balloc+0x64>
 8005a5e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005a62:	e00e      	b.n	8005a82 <_Balloc+0x6e>
 8005a64:	2221      	movs	r2, #33	; 0x21
 8005a66:	2104      	movs	r1, #4
 8005a68:	4620      	mov	r0, r4
 8005a6a:	f000 fb55 	bl	8006118 <_calloc_r>
 8005a6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a70:	60f0      	str	r0, [r6, #12]
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d1e4      	bne.n	8005a42 <_Balloc+0x2e>
 8005a78:	2000      	movs	r0, #0
 8005a7a:	bd70      	pop	{r4, r5, r6, pc}
 8005a7c:	6802      	ldr	r2, [r0, #0]
 8005a7e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005a82:	2300      	movs	r3, #0
 8005a84:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005a88:	e7f7      	b.n	8005a7a <_Balloc+0x66>
 8005a8a:	bf00      	nop
 8005a8c:	0800720d 	.word	0x0800720d
 8005a90:	08007294 	.word	0x08007294

08005a94 <_Bfree>:
 8005a94:	b570      	push	{r4, r5, r6, lr}
 8005a96:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005a98:	4605      	mov	r5, r0
 8005a9a:	460c      	mov	r4, r1
 8005a9c:	b976      	cbnz	r6, 8005abc <_Bfree+0x28>
 8005a9e:	2010      	movs	r0, #16
 8005aa0:	f7ff ff94 	bl	80059cc <malloc>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	6268      	str	r0, [r5, #36]	; 0x24
 8005aa8:	b920      	cbnz	r0, 8005ab4 <_Bfree+0x20>
 8005aaa:	218a      	movs	r1, #138	; 0x8a
 8005aac:	4b08      	ldr	r3, [pc, #32]	; (8005ad0 <_Bfree+0x3c>)
 8005aae:	4809      	ldr	r0, [pc, #36]	; (8005ad4 <_Bfree+0x40>)
 8005ab0:	f000 fd52 	bl	8006558 <__assert_func>
 8005ab4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005ab8:	6006      	str	r6, [r0, #0]
 8005aba:	60c6      	str	r6, [r0, #12]
 8005abc:	b13c      	cbz	r4, 8005ace <_Bfree+0x3a>
 8005abe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005ac0:	6862      	ldr	r2, [r4, #4]
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005ac8:	6021      	str	r1, [r4, #0]
 8005aca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005ace:	bd70      	pop	{r4, r5, r6, pc}
 8005ad0:	0800720d 	.word	0x0800720d
 8005ad4:	08007294 	.word	0x08007294

08005ad8 <__multadd>:
 8005ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005adc:	4698      	mov	r8, r3
 8005ade:	460c      	mov	r4, r1
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	690e      	ldr	r6, [r1, #16]
 8005ae4:	4607      	mov	r7, r0
 8005ae6:	f101 0014 	add.w	r0, r1, #20
 8005aea:	6805      	ldr	r5, [r0, #0]
 8005aec:	3301      	adds	r3, #1
 8005aee:	b2a9      	uxth	r1, r5
 8005af0:	fb02 8101 	mla	r1, r2, r1, r8
 8005af4:	0c2d      	lsrs	r5, r5, #16
 8005af6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005afa:	fb02 c505 	mla	r5, r2, r5, ip
 8005afe:	b289      	uxth	r1, r1
 8005b00:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005b04:	429e      	cmp	r6, r3
 8005b06:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005b0a:	f840 1b04 	str.w	r1, [r0], #4
 8005b0e:	dcec      	bgt.n	8005aea <__multadd+0x12>
 8005b10:	f1b8 0f00 	cmp.w	r8, #0
 8005b14:	d022      	beq.n	8005b5c <__multadd+0x84>
 8005b16:	68a3      	ldr	r3, [r4, #8]
 8005b18:	42b3      	cmp	r3, r6
 8005b1a:	dc19      	bgt.n	8005b50 <__multadd+0x78>
 8005b1c:	6861      	ldr	r1, [r4, #4]
 8005b1e:	4638      	mov	r0, r7
 8005b20:	3101      	adds	r1, #1
 8005b22:	f7ff ff77 	bl	8005a14 <_Balloc>
 8005b26:	4605      	mov	r5, r0
 8005b28:	b928      	cbnz	r0, 8005b36 <__multadd+0x5e>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	21b5      	movs	r1, #181	; 0xb5
 8005b2e:	4b0d      	ldr	r3, [pc, #52]	; (8005b64 <__multadd+0x8c>)
 8005b30:	480d      	ldr	r0, [pc, #52]	; (8005b68 <__multadd+0x90>)
 8005b32:	f000 fd11 	bl	8006558 <__assert_func>
 8005b36:	6922      	ldr	r2, [r4, #16]
 8005b38:	f104 010c 	add.w	r1, r4, #12
 8005b3c:	3202      	adds	r2, #2
 8005b3e:	0092      	lsls	r2, r2, #2
 8005b40:	300c      	adds	r0, #12
 8005b42:	f7ff ff59 	bl	80059f8 <memcpy>
 8005b46:	4621      	mov	r1, r4
 8005b48:	4638      	mov	r0, r7
 8005b4a:	f7ff ffa3 	bl	8005a94 <_Bfree>
 8005b4e:	462c      	mov	r4, r5
 8005b50:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8005b54:	3601      	adds	r6, #1
 8005b56:	f8c3 8014 	str.w	r8, [r3, #20]
 8005b5a:	6126      	str	r6, [r4, #16]
 8005b5c:	4620      	mov	r0, r4
 8005b5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b62:	bf00      	nop
 8005b64:	08007283 	.word	0x08007283
 8005b68:	08007294 	.word	0x08007294

08005b6c <__hi0bits>:
 8005b6c:	0c02      	lsrs	r2, r0, #16
 8005b6e:	0412      	lsls	r2, r2, #16
 8005b70:	4603      	mov	r3, r0
 8005b72:	b9ca      	cbnz	r2, 8005ba8 <__hi0bits+0x3c>
 8005b74:	0403      	lsls	r3, r0, #16
 8005b76:	2010      	movs	r0, #16
 8005b78:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005b7c:	bf04      	itt	eq
 8005b7e:	021b      	lsleq	r3, r3, #8
 8005b80:	3008      	addeq	r0, #8
 8005b82:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005b86:	bf04      	itt	eq
 8005b88:	011b      	lsleq	r3, r3, #4
 8005b8a:	3004      	addeq	r0, #4
 8005b8c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005b90:	bf04      	itt	eq
 8005b92:	009b      	lsleq	r3, r3, #2
 8005b94:	3002      	addeq	r0, #2
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	db05      	blt.n	8005ba6 <__hi0bits+0x3a>
 8005b9a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005b9e:	f100 0001 	add.w	r0, r0, #1
 8005ba2:	bf08      	it	eq
 8005ba4:	2020      	moveq	r0, #32
 8005ba6:	4770      	bx	lr
 8005ba8:	2000      	movs	r0, #0
 8005baa:	e7e5      	b.n	8005b78 <__hi0bits+0xc>

08005bac <__lo0bits>:
 8005bac:	6803      	ldr	r3, [r0, #0]
 8005bae:	4602      	mov	r2, r0
 8005bb0:	f013 0007 	ands.w	r0, r3, #7
 8005bb4:	d00b      	beq.n	8005bce <__lo0bits+0x22>
 8005bb6:	07d9      	lsls	r1, r3, #31
 8005bb8:	d422      	bmi.n	8005c00 <__lo0bits+0x54>
 8005bba:	0798      	lsls	r0, r3, #30
 8005bbc:	bf49      	itett	mi
 8005bbe:	085b      	lsrmi	r3, r3, #1
 8005bc0:	089b      	lsrpl	r3, r3, #2
 8005bc2:	2001      	movmi	r0, #1
 8005bc4:	6013      	strmi	r3, [r2, #0]
 8005bc6:	bf5c      	itt	pl
 8005bc8:	2002      	movpl	r0, #2
 8005bca:	6013      	strpl	r3, [r2, #0]
 8005bcc:	4770      	bx	lr
 8005bce:	b299      	uxth	r1, r3
 8005bd0:	b909      	cbnz	r1, 8005bd6 <__lo0bits+0x2a>
 8005bd2:	2010      	movs	r0, #16
 8005bd4:	0c1b      	lsrs	r3, r3, #16
 8005bd6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005bda:	bf04      	itt	eq
 8005bdc:	0a1b      	lsreq	r3, r3, #8
 8005bde:	3008      	addeq	r0, #8
 8005be0:	0719      	lsls	r1, r3, #28
 8005be2:	bf04      	itt	eq
 8005be4:	091b      	lsreq	r3, r3, #4
 8005be6:	3004      	addeq	r0, #4
 8005be8:	0799      	lsls	r1, r3, #30
 8005bea:	bf04      	itt	eq
 8005bec:	089b      	lsreq	r3, r3, #2
 8005bee:	3002      	addeq	r0, #2
 8005bf0:	07d9      	lsls	r1, r3, #31
 8005bf2:	d403      	bmi.n	8005bfc <__lo0bits+0x50>
 8005bf4:	085b      	lsrs	r3, r3, #1
 8005bf6:	f100 0001 	add.w	r0, r0, #1
 8005bfa:	d003      	beq.n	8005c04 <__lo0bits+0x58>
 8005bfc:	6013      	str	r3, [r2, #0]
 8005bfe:	4770      	bx	lr
 8005c00:	2000      	movs	r0, #0
 8005c02:	4770      	bx	lr
 8005c04:	2020      	movs	r0, #32
 8005c06:	4770      	bx	lr

08005c08 <__i2b>:
 8005c08:	b510      	push	{r4, lr}
 8005c0a:	460c      	mov	r4, r1
 8005c0c:	2101      	movs	r1, #1
 8005c0e:	f7ff ff01 	bl	8005a14 <_Balloc>
 8005c12:	4602      	mov	r2, r0
 8005c14:	b928      	cbnz	r0, 8005c22 <__i2b+0x1a>
 8005c16:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005c1a:	4b04      	ldr	r3, [pc, #16]	; (8005c2c <__i2b+0x24>)
 8005c1c:	4804      	ldr	r0, [pc, #16]	; (8005c30 <__i2b+0x28>)
 8005c1e:	f000 fc9b 	bl	8006558 <__assert_func>
 8005c22:	2301      	movs	r3, #1
 8005c24:	6144      	str	r4, [r0, #20]
 8005c26:	6103      	str	r3, [r0, #16]
 8005c28:	bd10      	pop	{r4, pc}
 8005c2a:	bf00      	nop
 8005c2c:	08007283 	.word	0x08007283
 8005c30:	08007294 	.word	0x08007294

08005c34 <__multiply>:
 8005c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c38:	4614      	mov	r4, r2
 8005c3a:	690a      	ldr	r2, [r1, #16]
 8005c3c:	6923      	ldr	r3, [r4, #16]
 8005c3e:	460d      	mov	r5, r1
 8005c40:	429a      	cmp	r2, r3
 8005c42:	bfbe      	ittt	lt
 8005c44:	460b      	movlt	r3, r1
 8005c46:	4625      	movlt	r5, r4
 8005c48:	461c      	movlt	r4, r3
 8005c4a:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8005c4e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005c52:	68ab      	ldr	r3, [r5, #8]
 8005c54:	6869      	ldr	r1, [r5, #4]
 8005c56:	eb0a 0709 	add.w	r7, sl, r9
 8005c5a:	42bb      	cmp	r3, r7
 8005c5c:	b085      	sub	sp, #20
 8005c5e:	bfb8      	it	lt
 8005c60:	3101      	addlt	r1, #1
 8005c62:	f7ff fed7 	bl	8005a14 <_Balloc>
 8005c66:	b930      	cbnz	r0, 8005c76 <__multiply+0x42>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	f240 115d 	movw	r1, #349	; 0x15d
 8005c6e:	4b41      	ldr	r3, [pc, #260]	; (8005d74 <__multiply+0x140>)
 8005c70:	4841      	ldr	r0, [pc, #260]	; (8005d78 <__multiply+0x144>)
 8005c72:	f000 fc71 	bl	8006558 <__assert_func>
 8005c76:	f100 0614 	add.w	r6, r0, #20
 8005c7a:	4633      	mov	r3, r6
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005c82:	4543      	cmp	r3, r8
 8005c84:	d31e      	bcc.n	8005cc4 <__multiply+0x90>
 8005c86:	f105 0c14 	add.w	ip, r5, #20
 8005c8a:	f104 0314 	add.w	r3, r4, #20
 8005c8e:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005c92:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005c96:	9202      	str	r2, [sp, #8]
 8005c98:	ebac 0205 	sub.w	r2, ip, r5
 8005c9c:	3a15      	subs	r2, #21
 8005c9e:	f022 0203 	bic.w	r2, r2, #3
 8005ca2:	3204      	adds	r2, #4
 8005ca4:	f105 0115 	add.w	r1, r5, #21
 8005ca8:	458c      	cmp	ip, r1
 8005caa:	bf38      	it	cc
 8005cac:	2204      	movcc	r2, #4
 8005cae:	9201      	str	r2, [sp, #4]
 8005cb0:	9a02      	ldr	r2, [sp, #8]
 8005cb2:	9303      	str	r3, [sp, #12]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d808      	bhi.n	8005cca <__multiply+0x96>
 8005cb8:	2f00      	cmp	r7, #0
 8005cba:	dc55      	bgt.n	8005d68 <__multiply+0x134>
 8005cbc:	6107      	str	r7, [r0, #16]
 8005cbe:	b005      	add	sp, #20
 8005cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cc4:	f843 2b04 	str.w	r2, [r3], #4
 8005cc8:	e7db      	b.n	8005c82 <__multiply+0x4e>
 8005cca:	f8b3 a000 	ldrh.w	sl, [r3]
 8005cce:	f1ba 0f00 	cmp.w	sl, #0
 8005cd2:	d020      	beq.n	8005d16 <__multiply+0xe2>
 8005cd4:	46b1      	mov	r9, r6
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f105 0e14 	add.w	lr, r5, #20
 8005cdc:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005ce0:	f8d9 b000 	ldr.w	fp, [r9]
 8005ce4:	b2a1      	uxth	r1, r4
 8005ce6:	fa1f fb8b 	uxth.w	fp, fp
 8005cea:	fb0a b101 	mla	r1, sl, r1, fp
 8005cee:	4411      	add	r1, r2
 8005cf0:	f8d9 2000 	ldr.w	r2, [r9]
 8005cf4:	0c24      	lsrs	r4, r4, #16
 8005cf6:	0c12      	lsrs	r2, r2, #16
 8005cf8:	fb0a 2404 	mla	r4, sl, r4, r2
 8005cfc:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8005d00:	b289      	uxth	r1, r1
 8005d02:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005d06:	45f4      	cmp	ip, lr
 8005d08:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8005d0c:	f849 1b04 	str.w	r1, [r9], #4
 8005d10:	d8e4      	bhi.n	8005cdc <__multiply+0xa8>
 8005d12:	9901      	ldr	r1, [sp, #4]
 8005d14:	5072      	str	r2, [r6, r1]
 8005d16:	9a03      	ldr	r2, [sp, #12]
 8005d18:	3304      	adds	r3, #4
 8005d1a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005d1e:	f1b9 0f00 	cmp.w	r9, #0
 8005d22:	d01f      	beq.n	8005d64 <__multiply+0x130>
 8005d24:	46b6      	mov	lr, r6
 8005d26:	f04f 0a00 	mov.w	sl, #0
 8005d2a:	6834      	ldr	r4, [r6, #0]
 8005d2c:	f105 0114 	add.w	r1, r5, #20
 8005d30:	880a      	ldrh	r2, [r1, #0]
 8005d32:	f8be b002 	ldrh.w	fp, [lr, #2]
 8005d36:	b2a4      	uxth	r4, r4
 8005d38:	fb09 b202 	mla	r2, r9, r2, fp
 8005d3c:	4492      	add	sl, r2
 8005d3e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8005d42:	f84e 4b04 	str.w	r4, [lr], #4
 8005d46:	f851 4b04 	ldr.w	r4, [r1], #4
 8005d4a:	f8be 2000 	ldrh.w	r2, [lr]
 8005d4e:	0c24      	lsrs	r4, r4, #16
 8005d50:	fb09 2404 	mla	r4, r9, r4, r2
 8005d54:	458c      	cmp	ip, r1
 8005d56:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8005d5a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005d5e:	d8e7      	bhi.n	8005d30 <__multiply+0xfc>
 8005d60:	9a01      	ldr	r2, [sp, #4]
 8005d62:	50b4      	str	r4, [r6, r2]
 8005d64:	3604      	adds	r6, #4
 8005d66:	e7a3      	b.n	8005cb0 <__multiply+0x7c>
 8005d68:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d1a5      	bne.n	8005cbc <__multiply+0x88>
 8005d70:	3f01      	subs	r7, #1
 8005d72:	e7a1      	b.n	8005cb8 <__multiply+0x84>
 8005d74:	08007283 	.word	0x08007283
 8005d78:	08007294 	.word	0x08007294

08005d7c <__pow5mult>:
 8005d7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d80:	4615      	mov	r5, r2
 8005d82:	f012 0203 	ands.w	r2, r2, #3
 8005d86:	4606      	mov	r6, r0
 8005d88:	460f      	mov	r7, r1
 8005d8a:	d007      	beq.n	8005d9c <__pow5mult+0x20>
 8005d8c:	4c25      	ldr	r4, [pc, #148]	; (8005e24 <__pow5mult+0xa8>)
 8005d8e:	3a01      	subs	r2, #1
 8005d90:	2300      	movs	r3, #0
 8005d92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005d96:	f7ff fe9f 	bl	8005ad8 <__multadd>
 8005d9a:	4607      	mov	r7, r0
 8005d9c:	10ad      	asrs	r5, r5, #2
 8005d9e:	d03d      	beq.n	8005e1c <__pow5mult+0xa0>
 8005da0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005da2:	b97c      	cbnz	r4, 8005dc4 <__pow5mult+0x48>
 8005da4:	2010      	movs	r0, #16
 8005da6:	f7ff fe11 	bl	80059cc <malloc>
 8005daa:	4602      	mov	r2, r0
 8005dac:	6270      	str	r0, [r6, #36]	; 0x24
 8005dae:	b928      	cbnz	r0, 8005dbc <__pow5mult+0x40>
 8005db0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005db4:	4b1c      	ldr	r3, [pc, #112]	; (8005e28 <__pow5mult+0xac>)
 8005db6:	481d      	ldr	r0, [pc, #116]	; (8005e2c <__pow5mult+0xb0>)
 8005db8:	f000 fbce 	bl	8006558 <__assert_func>
 8005dbc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005dc0:	6004      	str	r4, [r0, #0]
 8005dc2:	60c4      	str	r4, [r0, #12]
 8005dc4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005dc8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005dcc:	b94c      	cbnz	r4, 8005de2 <__pow5mult+0x66>
 8005dce:	f240 2171 	movw	r1, #625	; 0x271
 8005dd2:	4630      	mov	r0, r6
 8005dd4:	f7ff ff18 	bl	8005c08 <__i2b>
 8005dd8:	2300      	movs	r3, #0
 8005dda:	4604      	mov	r4, r0
 8005ddc:	f8c8 0008 	str.w	r0, [r8, #8]
 8005de0:	6003      	str	r3, [r0, #0]
 8005de2:	f04f 0900 	mov.w	r9, #0
 8005de6:	07eb      	lsls	r3, r5, #31
 8005de8:	d50a      	bpl.n	8005e00 <__pow5mult+0x84>
 8005dea:	4639      	mov	r1, r7
 8005dec:	4622      	mov	r2, r4
 8005dee:	4630      	mov	r0, r6
 8005df0:	f7ff ff20 	bl	8005c34 <__multiply>
 8005df4:	4680      	mov	r8, r0
 8005df6:	4639      	mov	r1, r7
 8005df8:	4630      	mov	r0, r6
 8005dfa:	f7ff fe4b 	bl	8005a94 <_Bfree>
 8005dfe:	4647      	mov	r7, r8
 8005e00:	106d      	asrs	r5, r5, #1
 8005e02:	d00b      	beq.n	8005e1c <__pow5mult+0xa0>
 8005e04:	6820      	ldr	r0, [r4, #0]
 8005e06:	b938      	cbnz	r0, 8005e18 <__pow5mult+0x9c>
 8005e08:	4622      	mov	r2, r4
 8005e0a:	4621      	mov	r1, r4
 8005e0c:	4630      	mov	r0, r6
 8005e0e:	f7ff ff11 	bl	8005c34 <__multiply>
 8005e12:	6020      	str	r0, [r4, #0]
 8005e14:	f8c0 9000 	str.w	r9, [r0]
 8005e18:	4604      	mov	r4, r0
 8005e1a:	e7e4      	b.n	8005de6 <__pow5mult+0x6a>
 8005e1c:	4638      	mov	r0, r7
 8005e1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e22:	bf00      	nop
 8005e24:	080073e8 	.word	0x080073e8
 8005e28:	0800720d 	.word	0x0800720d
 8005e2c:	08007294 	.word	0x08007294

08005e30 <__lshift>:
 8005e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e34:	460c      	mov	r4, r1
 8005e36:	4607      	mov	r7, r0
 8005e38:	4691      	mov	r9, r2
 8005e3a:	6923      	ldr	r3, [r4, #16]
 8005e3c:	6849      	ldr	r1, [r1, #4]
 8005e3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005e42:	68a3      	ldr	r3, [r4, #8]
 8005e44:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005e48:	f108 0601 	add.w	r6, r8, #1
 8005e4c:	42b3      	cmp	r3, r6
 8005e4e:	db0b      	blt.n	8005e68 <__lshift+0x38>
 8005e50:	4638      	mov	r0, r7
 8005e52:	f7ff fddf 	bl	8005a14 <_Balloc>
 8005e56:	4605      	mov	r5, r0
 8005e58:	b948      	cbnz	r0, 8005e6e <__lshift+0x3e>
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005e60:	4b27      	ldr	r3, [pc, #156]	; (8005f00 <__lshift+0xd0>)
 8005e62:	4828      	ldr	r0, [pc, #160]	; (8005f04 <__lshift+0xd4>)
 8005e64:	f000 fb78 	bl	8006558 <__assert_func>
 8005e68:	3101      	adds	r1, #1
 8005e6a:	005b      	lsls	r3, r3, #1
 8005e6c:	e7ee      	b.n	8005e4c <__lshift+0x1c>
 8005e6e:	2300      	movs	r3, #0
 8005e70:	f100 0114 	add.w	r1, r0, #20
 8005e74:	f100 0210 	add.w	r2, r0, #16
 8005e78:	4618      	mov	r0, r3
 8005e7a:	4553      	cmp	r3, sl
 8005e7c:	db33      	blt.n	8005ee6 <__lshift+0xb6>
 8005e7e:	6920      	ldr	r0, [r4, #16]
 8005e80:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005e84:	f104 0314 	add.w	r3, r4, #20
 8005e88:	f019 091f 	ands.w	r9, r9, #31
 8005e8c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005e90:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005e94:	d02b      	beq.n	8005eee <__lshift+0xbe>
 8005e96:	468a      	mov	sl, r1
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f1c9 0e20 	rsb	lr, r9, #32
 8005e9e:	6818      	ldr	r0, [r3, #0]
 8005ea0:	fa00 f009 	lsl.w	r0, r0, r9
 8005ea4:	4302      	orrs	r2, r0
 8005ea6:	f84a 2b04 	str.w	r2, [sl], #4
 8005eaa:	f853 2b04 	ldr.w	r2, [r3], #4
 8005eae:	459c      	cmp	ip, r3
 8005eb0:	fa22 f20e 	lsr.w	r2, r2, lr
 8005eb4:	d8f3      	bhi.n	8005e9e <__lshift+0x6e>
 8005eb6:	ebac 0304 	sub.w	r3, ip, r4
 8005eba:	3b15      	subs	r3, #21
 8005ebc:	f023 0303 	bic.w	r3, r3, #3
 8005ec0:	3304      	adds	r3, #4
 8005ec2:	f104 0015 	add.w	r0, r4, #21
 8005ec6:	4584      	cmp	ip, r0
 8005ec8:	bf38      	it	cc
 8005eca:	2304      	movcc	r3, #4
 8005ecc:	50ca      	str	r2, [r1, r3]
 8005ece:	b10a      	cbz	r2, 8005ed4 <__lshift+0xa4>
 8005ed0:	f108 0602 	add.w	r6, r8, #2
 8005ed4:	3e01      	subs	r6, #1
 8005ed6:	4638      	mov	r0, r7
 8005ed8:	4621      	mov	r1, r4
 8005eda:	612e      	str	r6, [r5, #16]
 8005edc:	f7ff fdda 	bl	8005a94 <_Bfree>
 8005ee0:	4628      	mov	r0, r5
 8005ee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ee6:	f842 0f04 	str.w	r0, [r2, #4]!
 8005eea:	3301      	adds	r3, #1
 8005eec:	e7c5      	b.n	8005e7a <__lshift+0x4a>
 8005eee:	3904      	subs	r1, #4
 8005ef0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ef4:	459c      	cmp	ip, r3
 8005ef6:	f841 2f04 	str.w	r2, [r1, #4]!
 8005efa:	d8f9      	bhi.n	8005ef0 <__lshift+0xc0>
 8005efc:	e7ea      	b.n	8005ed4 <__lshift+0xa4>
 8005efe:	bf00      	nop
 8005f00:	08007283 	.word	0x08007283
 8005f04:	08007294 	.word	0x08007294

08005f08 <__mcmp>:
 8005f08:	4603      	mov	r3, r0
 8005f0a:	690a      	ldr	r2, [r1, #16]
 8005f0c:	6900      	ldr	r0, [r0, #16]
 8005f0e:	b530      	push	{r4, r5, lr}
 8005f10:	1a80      	subs	r0, r0, r2
 8005f12:	d10d      	bne.n	8005f30 <__mcmp+0x28>
 8005f14:	3314      	adds	r3, #20
 8005f16:	3114      	adds	r1, #20
 8005f18:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005f1c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005f20:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005f24:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005f28:	4295      	cmp	r5, r2
 8005f2a:	d002      	beq.n	8005f32 <__mcmp+0x2a>
 8005f2c:	d304      	bcc.n	8005f38 <__mcmp+0x30>
 8005f2e:	2001      	movs	r0, #1
 8005f30:	bd30      	pop	{r4, r5, pc}
 8005f32:	42a3      	cmp	r3, r4
 8005f34:	d3f4      	bcc.n	8005f20 <__mcmp+0x18>
 8005f36:	e7fb      	b.n	8005f30 <__mcmp+0x28>
 8005f38:	f04f 30ff 	mov.w	r0, #4294967295
 8005f3c:	e7f8      	b.n	8005f30 <__mcmp+0x28>
	...

08005f40 <__mdiff>:
 8005f40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f44:	460c      	mov	r4, r1
 8005f46:	4606      	mov	r6, r0
 8005f48:	4611      	mov	r1, r2
 8005f4a:	4620      	mov	r0, r4
 8005f4c:	4692      	mov	sl, r2
 8005f4e:	f7ff ffdb 	bl	8005f08 <__mcmp>
 8005f52:	1e05      	subs	r5, r0, #0
 8005f54:	d111      	bne.n	8005f7a <__mdiff+0x3a>
 8005f56:	4629      	mov	r1, r5
 8005f58:	4630      	mov	r0, r6
 8005f5a:	f7ff fd5b 	bl	8005a14 <_Balloc>
 8005f5e:	4602      	mov	r2, r0
 8005f60:	b928      	cbnz	r0, 8005f6e <__mdiff+0x2e>
 8005f62:	f240 2132 	movw	r1, #562	; 0x232
 8005f66:	4b3c      	ldr	r3, [pc, #240]	; (8006058 <__mdiff+0x118>)
 8005f68:	483c      	ldr	r0, [pc, #240]	; (800605c <__mdiff+0x11c>)
 8005f6a:	f000 faf5 	bl	8006558 <__assert_func>
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005f74:	4610      	mov	r0, r2
 8005f76:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f7a:	bfa4      	itt	ge
 8005f7c:	4653      	movge	r3, sl
 8005f7e:	46a2      	movge	sl, r4
 8005f80:	4630      	mov	r0, r6
 8005f82:	f8da 1004 	ldr.w	r1, [sl, #4]
 8005f86:	bfa6      	itte	ge
 8005f88:	461c      	movge	r4, r3
 8005f8a:	2500      	movge	r5, #0
 8005f8c:	2501      	movlt	r5, #1
 8005f8e:	f7ff fd41 	bl	8005a14 <_Balloc>
 8005f92:	4602      	mov	r2, r0
 8005f94:	b918      	cbnz	r0, 8005f9e <__mdiff+0x5e>
 8005f96:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005f9a:	4b2f      	ldr	r3, [pc, #188]	; (8006058 <__mdiff+0x118>)
 8005f9c:	e7e4      	b.n	8005f68 <__mdiff+0x28>
 8005f9e:	f100 0814 	add.w	r8, r0, #20
 8005fa2:	f8da 7010 	ldr.w	r7, [sl, #16]
 8005fa6:	60c5      	str	r5, [r0, #12]
 8005fa8:	f04f 0c00 	mov.w	ip, #0
 8005fac:	f10a 0514 	add.w	r5, sl, #20
 8005fb0:	f10a 0010 	add.w	r0, sl, #16
 8005fb4:	46c2      	mov	sl, r8
 8005fb6:	6926      	ldr	r6, [r4, #16]
 8005fb8:	f104 0914 	add.w	r9, r4, #20
 8005fbc:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8005fc0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005fc4:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8005fc8:	f859 3b04 	ldr.w	r3, [r9], #4
 8005fcc:	fa1f f18b 	uxth.w	r1, fp
 8005fd0:	4461      	add	r1, ip
 8005fd2:	fa1f fc83 	uxth.w	ip, r3
 8005fd6:	0c1b      	lsrs	r3, r3, #16
 8005fd8:	eba1 010c 	sub.w	r1, r1, ip
 8005fdc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005fe0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005fe4:	b289      	uxth	r1, r1
 8005fe6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005fea:	454e      	cmp	r6, r9
 8005fec:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005ff0:	f84a 3b04 	str.w	r3, [sl], #4
 8005ff4:	d8e6      	bhi.n	8005fc4 <__mdiff+0x84>
 8005ff6:	1b33      	subs	r3, r6, r4
 8005ff8:	3b15      	subs	r3, #21
 8005ffa:	f023 0303 	bic.w	r3, r3, #3
 8005ffe:	3415      	adds	r4, #21
 8006000:	3304      	adds	r3, #4
 8006002:	42a6      	cmp	r6, r4
 8006004:	bf38      	it	cc
 8006006:	2304      	movcc	r3, #4
 8006008:	441d      	add	r5, r3
 800600a:	4443      	add	r3, r8
 800600c:	461e      	mov	r6, r3
 800600e:	462c      	mov	r4, r5
 8006010:	4574      	cmp	r4, lr
 8006012:	d30e      	bcc.n	8006032 <__mdiff+0xf2>
 8006014:	f10e 0103 	add.w	r1, lr, #3
 8006018:	1b49      	subs	r1, r1, r5
 800601a:	f021 0103 	bic.w	r1, r1, #3
 800601e:	3d03      	subs	r5, #3
 8006020:	45ae      	cmp	lr, r5
 8006022:	bf38      	it	cc
 8006024:	2100      	movcc	r1, #0
 8006026:	4419      	add	r1, r3
 8006028:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800602c:	b18b      	cbz	r3, 8006052 <__mdiff+0x112>
 800602e:	6117      	str	r7, [r2, #16]
 8006030:	e7a0      	b.n	8005f74 <__mdiff+0x34>
 8006032:	f854 8b04 	ldr.w	r8, [r4], #4
 8006036:	fa1f f188 	uxth.w	r1, r8
 800603a:	4461      	add	r1, ip
 800603c:	1408      	asrs	r0, r1, #16
 800603e:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8006042:	b289      	uxth	r1, r1
 8006044:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006048:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800604c:	f846 1b04 	str.w	r1, [r6], #4
 8006050:	e7de      	b.n	8006010 <__mdiff+0xd0>
 8006052:	3f01      	subs	r7, #1
 8006054:	e7e8      	b.n	8006028 <__mdiff+0xe8>
 8006056:	bf00      	nop
 8006058:	08007283 	.word	0x08007283
 800605c:	08007294 	.word	0x08007294

08006060 <__d2b>:
 8006060:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006064:	2101      	movs	r1, #1
 8006066:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800606a:	4690      	mov	r8, r2
 800606c:	461d      	mov	r5, r3
 800606e:	f7ff fcd1 	bl	8005a14 <_Balloc>
 8006072:	4604      	mov	r4, r0
 8006074:	b930      	cbnz	r0, 8006084 <__d2b+0x24>
 8006076:	4602      	mov	r2, r0
 8006078:	f240 310a 	movw	r1, #778	; 0x30a
 800607c:	4b24      	ldr	r3, [pc, #144]	; (8006110 <__d2b+0xb0>)
 800607e:	4825      	ldr	r0, [pc, #148]	; (8006114 <__d2b+0xb4>)
 8006080:	f000 fa6a 	bl	8006558 <__assert_func>
 8006084:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006088:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800608c:	bb2d      	cbnz	r5, 80060da <__d2b+0x7a>
 800608e:	9301      	str	r3, [sp, #4]
 8006090:	f1b8 0300 	subs.w	r3, r8, #0
 8006094:	d026      	beq.n	80060e4 <__d2b+0x84>
 8006096:	4668      	mov	r0, sp
 8006098:	9300      	str	r3, [sp, #0]
 800609a:	f7ff fd87 	bl	8005bac <__lo0bits>
 800609e:	9900      	ldr	r1, [sp, #0]
 80060a0:	b1f0      	cbz	r0, 80060e0 <__d2b+0x80>
 80060a2:	9a01      	ldr	r2, [sp, #4]
 80060a4:	f1c0 0320 	rsb	r3, r0, #32
 80060a8:	fa02 f303 	lsl.w	r3, r2, r3
 80060ac:	430b      	orrs	r3, r1
 80060ae:	40c2      	lsrs	r2, r0
 80060b0:	6163      	str	r3, [r4, #20]
 80060b2:	9201      	str	r2, [sp, #4]
 80060b4:	9b01      	ldr	r3, [sp, #4]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	bf14      	ite	ne
 80060ba:	2102      	movne	r1, #2
 80060bc:	2101      	moveq	r1, #1
 80060be:	61a3      	str	r3, [r4, #24]
 80060c0:	6121      	str	r1, [r4, #16]
 80060c2:	b1c5      	cbz	r5, 80060f6 <__d2b+0x96>
 80060c4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80060c8:	4405      	add	r5, r0
 80060ca:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80060ce:	603d      	str	r5, [r7, #0]
 80060d0:	6030      	str	r0, [r6, #0]
 80060d2:	4620      	mov	r0, r4
 80060d4:	b002      	add	sp, #8
 80060d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060de:	e7d6      	b.n	800608e <__d2b+0x2e>
 80060e0:	6161      	str	r1, [r4, #20]
 80060e2:	e7e7      	b.n	80060b4 <__d2b+0x54>
 80060e4:	a801      	add	r0, sp, #4
 80060e6:	f7ff fd61 	bl	8005bac <__lo0bits>
 80060ea:	2101      	movs	r1, #1
 80060ec:	9b01      	ldr	r3, [sp, #4]
 80060ee:	6121      	str	r1, [r4, #16]
 80060f0:	6163      	str	r3, [r4, #20]
 80060f2:	3020      	adds	r0, #32
 80060f4:	e7e5      	b.n	80060c2 <__d2b+0x62>
 80060f6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80060fa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80060fe:	6038      	str	r0, [r7, #0]
 8006100:	6918      	ldr	r0, [r3, #16]
 8006102:	f7ff fd33 	bl	8005b6c <__hi0bits>
 8006106:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800610a:	6031      	str	r1, [r6, #0]
 800610c:	e7e1      	b.n	80060d2 <__d2b+0x72>
 800610e:	bf00      	nop
 8006110:	08007283 	.word	0x08007283
 8006114:	08007294 	.word	0x08007294

08006118 <_calloc_r>:
 8006118:	b538      	push	{r3, r4, r5, lr}
 800611a:	fb02 f501 	mul.w	r5, r2, r1
 800611e:	4629      	mov	r1, r5
 8006120:	f000 f854 	bl	80061cc <_malloc_r>
 8006124:	4604      	mov	r4, r0
 8006126:	b118      	cbz	r0, 8006130 <_calloc_r+0x18>
 8006128:	462a      	mov	r2, r5
 800612a:	2100      	movs	r1, #0
 800612c:	f7fe f946 	bl	80043bc <memset>
 8006130:	4620      	mov	r0, r4
 8006132:	bd38      	pop	{r3, r4, r5, pc}

08006134 <_free_r>:
 8006134:	b538      	push	{r3, r4, r5, lr}
 8006136:	4605      	mov	r5, r0
 8006138:	2900      	cmp	r1, #0
 800613a:	d043      	beq.n	80061c4 <_free_r+0x90>
 800613c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006140:	1f0c      	subs	r4, r1, #4
 8006142:	2b00      	cmp	r3, #0
 8006144:	bfb8      	it	lt
 8006146:	18e4      	addlt	r4, r4, r3
 8006148:	f000 fa62 	bl	8006610 <__malloc_lock>
 800614c:	4a1e      	ldr	r2, [pc, #120]	; (80061c8 <_free_r+0x94>)
 800614e:	6813      	ldr	r3, [r2, #0]
 8006150:	4610      	mov	r0, r2
 8006152:	b933      	cbnz	r3, 8006162 <_free_r+0x2e>
 8006154:	6063      	str	r3, [r4, #4]
 8006156:	6014      	str	r4, [r2, #0]
 8006158:	4628      	mov	r0, r5
 800615a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800615e:	f000 ba5d 	b.w	800661c <__malloc_unlock>
 8006162:	42a3      	cmp	r3, r4
 8006164:	d90a      	bls.n	800617c <_free_r+0x48>
 8006166:	6821      	ldr	r1, [r4, #0]
 8006168:	1862      	adds	r2, r4, r1
 800616a:	4293      	cmp	r3, r2
 800616c:	bf01      	itttt	eq
 800616e:	681a      	ldreq	r2, [r3, #0]
 8006170:	685b      	ldreq	r3, [r3, #4]
 8006172:	1852      	addeq	r2, r2, r1
 8006174:	6022      	streq	r2, [r4, #0]
 8006176:	6063      	str	r3, [r4, #4]
 8006178:	6004      	str	r4, [r0, #0]
 800617a:	e7ed      	b.n	8006158 <_free_r+0x24>
 800617c:	461a      	mov	r2, r3
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	b10b      	cbz	r3, 8006186 <_free_r+0x52>
 8006182:	42a3      	cmp	r3, r4
 8006184:	d9fa      	bls.n	800617c <_free_r+0x48>
 8006186:	6811      	ldr	r1, [r2, #0]
 8006188:	1850      	adds	r0, r2, r1
 800618a:	42a0      	cmp	r0, r4
 800618c:	d10b      	bne.n	80061a6 <_free_r+0x72>
 800618e:	6820      	ldr	r0, [r4, #0]
 8006190:	4401      	add	r1, r0
 8006192:	1850      	adds	r0, r2, r1
 8006194:	4283      	cmp	r3, r0
 8006196:	6011      	str	r1, [r2, #0]
 8006198:	d1de      	bne.n	8006158 <_free_r+0x24>
 800619a:	6818      	ldr	r0, [r3, #0]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	4401      	add	r1, r0
 80061a0:	6011      	str	r1, [r2, #0]
 80061a2:	6053      	str	r3, [r2, #4]
 80061a4:	e7d8      	b.n	8006158 <_free_r+0x24>
 80061a6:	d902      	bls.n	80061ae <_free_r+0x7a>
 80061a8:	230c      	movs	r3, #12
 80061aa:	602b      	str	r3, [r5, #0]
 80061ac:	e7d4      	b.n	8006158 <_free_r+0x24>
 80061ae:	6820      	ldr	r0, [r4, #0]
 80061b0:	1821      	adds	r1, r4, r0
 80061b2:	428b      	cmp	r3, r1
 80061b4:	bf01      	itttt	eq
 80061b6:	6819      	ldreq	r1, [r3, #0]
 80061b8:	685b      	ldreq	r3, [r3, #4]
 80061ba:	1809      	addeq	r1, r1, r0
 80061bc:	6021      	streq	r1, [r4, #0]
 80061be:	6063      	str	r3, [r4, #4]
 80061c0:	6054      	str	r4, [r2, #4]
 80061c2:	e7c9      	b.n	8006158 <_free_r+0x24>
 80061c4:	bd38      	pop	{r3, r4, r5, pc}
 80061c6:	bf00      	nop
 80061c8:	200001fc 	.word	0x200001fc

080061cc <_malloc_r>:
 80061cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ce:	1ccd      	adds	r5, r1, #3
 80061d0:	f025 0503 	bic.w	r5, r5, #3
 80061d4:	3508      	adds	r5, #8
 80061d6:	2d0c      	cmp	r5, #12
 80061d8:	bf38      	it	cc
 80061da:	250c      	movcc	r5, #12
 80061dc:	2d00      	cmp	r5, #0
 80061de:	4606      	mov	r6, r0
 80061e0:	db01      	blt.n	80061e6 <_malloc_r+0x1a>
 80061e2:	42a9      	cmp	r1, r5
 80061e4:	d903      	bls.n	80061ee <_malloc_r+0x22>
 80061e6:	230c      	movs	r3, #12
 80061e8:	6033      	str	r3, [r6, #0]
 80061ea:	2000      	movs	r0, #0
 80061ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061ee:	f000 fa0f 	bl	8006610 <__malloc_lock>
 80061f2:	4921      	ldr	r1, [pc, #132]	; (8006278 <_malloc_r+0xac>)
 80061f4:	680a      	ldr	r2, [r1, #0]
 80061f6:	4614      	mov	r4, r2
 80061f8:	b99c      	cbnz	r4, 8006222 <_malloc_r+0x56>
 80061fa:	4f20      	ldr	r7, [pc, #128]	; (800627c <_malloc_r+0xb0>)
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	b923      	cbnz	r3, 800620a <_malloc_r+0x3e>
 8006200:	4621      	mov	r1, r4
 8006202:	4630      	mov	r0, r6
 8006204:	f000 f998 	bl	8006538 <_sbrk_r>
 8006208:	6038      	str	r0, [r7, #0]
 800620a:	4629      	mov	r1, r5
 800620c:	4630      	mov	r0, r6
 800620e:	f000 f993 	bl	8006538 <_sbrk_r>
 8006212:	1c43      	adds	r3, r0, #1
 8006214:	d123      	bne.n	800625e <_malloc_r+0x92>
 8006216:	230c      	movs	r3, #12
 8006218:	4630      	mov	r0, r6
 800621a:	6033      	str	r3, [r6, #0]
 800621c:	f000 f9fe 	bl	800661c <__malloc_unlock>
 8006220:	e7e3      	b.n	80061ea <_malloc_r+0x1e>
 8006222:	6823      	ldr	r3, [r4, #0]
 8006224:	1b5b      	subs	r3, r3, r5
 8006226:	d417      	bmi.n	8006258 <_malloc_r+0x8c>
 8006228:	2b0b      	cmp	r3, #11
 800622a:	d903      	bls.n	8006234 <_malloc_r+0x68>
 800622c:	6023      	str	r3, [r4, #0]
 800622e:	441c      	add	r4, r3
 8006230:	6025      	str	r5, [r4, #0]
 8006232:	e004      	b.n	800623e <_malloc_r+0x72>
 8006234:	6863      	ldr	r3, [r4, #4]
 8006236:	42a2      	cmp	r2, r4
 8006238:	bf0c      	ite	eq
 800623a:	600b      	streq	r3, [r1, #0]
 800623c:	6053      	strne	r3, [r2, #4]
 800623e:	4630      	mov	r0, r6
 8006240:	f000 f9ec 	bl	800661c <__malloc_unlock>
 8006244:	f104 000b 	add.w	r0, r4, #11
 8006248:	1d23      	adds	r3, r4, #4
 800624a:	f020 0007 	bic.w	r0, r0, #7
 800624e:	1ac2      	subs	r2, r0, r3
 8006250:	d0cc      	beq.n	80061ec <_malloc_r+0x20>
 8006252:	1a1b      	subs	r3, r3, r0
 8006254:	50a3      	str	r3, [r4, r2]
 8006256:	e7c9      	b.n	80061ec <_malloc_r+0x20>
 8006258:	4622      	mov	r2, r4
 800625a:	6864      	ldr	r4, [r4, #4]
 800625c:	e7cc      	b.n	80061f8 <_malloc_r+0x2c>
 800625e:	1cc4      	adds	r4, r0, #3
 8006260:	f024 0403 	bic.w	r4, r4, #3
 8006264:	42a0      	cmp	r0, r4
 8006266:	d0e3      	beq.n	8006230 <_malloc_r+0x64>
 8006268:	1a21      	subs	r1, r4, r0
 800626a:	4630      	mov	r0, r6
 800626c:	f000 f964 	bl	8006538 <_sbrk_r>
 8006270:	3001      	adds	r0, #1
 8006272:	d1dd      	bne.n	8006230 <_malloc_r+0x64>
 8006274:	e7cf      	b.n	8006216 <_malloc_r+0x4a>
 8006276:	bf00      	nop
 8006278:	200001fc 	.word	0x200001fc
 800627c:	20000200 	.word	0x20000200

08006280 <__ssputs_r>:
 8006280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006284:	688e      	ldr	r6, [r1, #8]
 8006286:	4682      	mov	sl, r0
 8006288:	429e      	cmp	r6, r3
 800628a:	460c      	mov	r4, r1
 800628c:	4690      	mov	r8, r2
 800628e:	461f      	mov	r7, r3
 8006290:	d838      	bhi.n	8006304 <__ssputs_r+0x84>
 8006292:	898a      	ldrh	r2, [r1, #12]
 8006294:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006298:	d032      	beq.n	8006300 <__ssputs_r+0x80>
 800629a:	6825      	ldr	r5, [r4, #0]
 800629c:	6909      	ldr	r1, [r1, #16]
 800629e:	3301      	adds	r3, #1
 80062a0:	eba5 0901 	sub.w	r9, r5, r1
 80062a4:	6965      	ldr	r5, [r4, #20]
 80062a6:	444b      	add	r3, r9
 80062a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80062ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80062b0:	106d      	asrs	r5, r5, #1
 80062b2:	429d      	cmp	r5, r3
 80062b4:	bf38      	it	cc
 80062b6:	461d      	movcc	r5, r3
 80062b8:	0553      	lsls	r3, r2, #21
 80062ba:	d531      	bpl.n	8006320 <__ssputs_r+0xa0>
 80062bc:	4629      	mov	r1, r5
 80062be:	f7ff ff85 	bl	80061cc <_malloc_r>
 80062c2:	4606      	mov	r6, r0
 80062c4:	b950      	cbnz	r0, 80062dc <__ssputs_r+0x5c>
 80062c6:	230c      	movs	r3, #12
 80062c8:	f04f 30ff 	mov.w	r0, #4294967295
 80062cc:	f8ca 3000 	str.w	r3, [sl]
 80062d0:	89a3      	ldrh	r3, [r4, #12]
 80062d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062d6:	81a3      	strh	r3, [r4, #12]
 80062d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062dc:	464a      	mov	r2, r9
 80062de:	6921      	ldr	r1, [r4, #16]
 80062e0:	f7ff fb8a 	bl	80059f8 <memcpy>
 80062e4:	89a3      	ldrh	r3, [r4, #12]
 80062e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80062ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062ee:	81a3      	strh	r3, [r4, #12]
 80062f0:	6126      	str	r6, [r4, #16]
 80062f2:	444e      	add	r6, r9
 80062f4:	6026      	str	r6, [r4, #0]
 80062f6:	463e      	mov	r6, r7
 80062f8:	6165      	str	r5, [r4, #20]
 80062fa:	eba5 0509 	sub.w	r5, r5, r9
 80062fe:	60a5      	str	r5, [r4, #8]
 8006300:	42be      	cmp	r6, r7
 8006302:	d900      	bls.n	8006306 <__ssputs_r+0x86>
 8006304:	463e      	mov	r6, r7
 8006306:	4632      	mov	r2, r6
 8006308:	4641      	mov	r1, r8
 800630a:	6820      	ldr	r0, [r4, #0]
 800630c:	f000 f966 	bl	80065dc <memmove>
 8006310:	68a3      	ldr	r3, [r4, #8]
 8006312:	6822      	ldr	r2, [r4, #0]
 8006314:	1b9b      	subs	r3, r3, r6
 8006316:	4432      	add	r2, r6
 8006318:	2000      	movs	r0, #0
 800631a:	60a3      	str	r3, [r4, #8]
 800631c:	6022      	str	r2, [r4, #0]
 800631e:	e7db      	b.n	80062d8 <__ssputs_r+0x58>
 8006320:	462a      	mov	r2, r5
 8006322:	f000 f981 	bl	8006628 <_realloc_r>
 8006326:	4606      	mov	r6, r0
 8006328:	2800      	cmp	r0, #0
 800632a:	d1e1      	bne.n	80062f0 <__ssputs_r+0x70>
 800632c:	4650      	mov	r0, sl
 800632e:	6921      	ldr	r1, [r4, #16]
 8006330:	f7ff ff00 	bl	8006134 <_free_r>
 8006334:	e7c7      	b.n	80062c6 <__ssputs_r+0x46>
	...

08006338 <_svfiprintf_r>:
 8006338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800633c:	4698      	mov	r8, r3
 800633e:	898b      	ldrh	r3, [r1, #12]
 8006340:	4607      	mov	r7, r0
 8006342:	061b      	lsls	r3, r3, #24
 8006344:	460d      	mov	r5, r1
 8006346:	4614      	mov	r4, r2
 8006348:	b09d      	sub	sp, #116	; 0x74
 800634a:	d50e      	bpl.n	800636a <_svfiprintf_r+0x32>
 800634c:	690b      	ldr	r3, [r1, #16]
 800634e:	b963      	cbnz	r3, 800636a <_svfiprintf_r+0x32>
 8006350:	2140      	movs	r1, #64	; 0x40
 8006352:	f7ff ff3b 	bl	80061cc <_malloc_r>
 8006356:	6028      	str	r0, [r5, #0]
 8006358:	6128      	str	r0, [r5, #16]
 800635a:	b920      	cbnz	r0, 8006366 <_svfiprintf_r+0x2e>
 800635c:	230c      	movs	r3, #12
 800635e:	603b      	str	r3, [r7, #0]
 8006360:	f04f 30ff 	mov.w	r0, #4294967295
 8006364:	e0d1      	b.n	800650a <_svfiprintf_r+0x1d2>
 8006366:	2340      	movs	r3, #64	; 0x40
 8006368:	616b      	str	r3, [r5, #20]
 800636a:	2300      	movs	r3, #0
 800636c:	9309      	str	r3, [sp, #36]	; 0x24
 800636e:	2320      	movs	r3, #32
 8006370:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006374:	2330      	movs	r3, #48	; 0x30
 8006376:	f04f 0901 	mov.w	r9, #1
 800637a:	f8cd 800c 	str.w	r8, [sp, #12]
 800637e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006524 <_svfiprintf_r+0x1ec>
 8006382:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006386:	4623      	mov	r3, r4
 8006388:	469a      	mov	sl, r3
 800638a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800638e:	b10a      	cbz	r2, 8006394 <_svfiprintf_r+0x5c>
 8006390:	2a25      	cmp	r2, #37	; 0x25
 8006392:	d1f9      	bne.n	8006388 <_svfiprintf_r+0x50>
 8006394:	ebba 0b04 	subs.w	fp, sl, r4
 8006398:	d00b      	beq.n	80063b2 <_svfiprintf_r+0x7a>
 800639a:	465b      	mov	r3, fp
 800639c:	4622      	mov	r2, r4
 800639e:	4629      	mov	r1, r5
 80063a0:	4638      	mov	r0, r7
 80063a2:	f7ff ff6d 	bl	8006280 <__ssputs_r>
 80063a6:	3001      	adds	r0, #1
 80063a8:	f000 80aa 	beq.w	8006500 <_svfiprintf_r+0x1c8>
 80063ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063ae:	445a      	add	r2, fp
 80063b0:	9209      	str	r2, [sp, #36]	; 0x24
 80063b2:	f89a 3000 	ldrb.w	r3, [sl]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	f000 80a2 	beq.w	8006500 <_svfiprintf_r+0x1c8>
 80063bc:	2300      	movs	r3, #0
 80063be:	f04f 32ff 	mov.w	r2, #4294967295
 80063c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80063c6:	f10a 0a01 	add.w	sl, sl, #1
 80063ca:	9304      	str	r3, [sp, #16]
 80063cc:	9307      	str	r3, [sp, #28]
 80063ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80063d2:	931a      	str	r3, [sp, #104]	; 0x68
 80063d4:	4654      	mov	r4, sl
 80063d6:	2205      	movs	r2, #5
 80063d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063dc:	4851      	ldr	r0, [pc, #324]	; (8006524 <_svfiprintf_r+0x1ec>)
 80063de:	f7ff fafd 	bl	80059dc <memchr>
 80063e2:	9a04      	ldr	r2, [sp, #16]
 80063e4:	b9d8      	cbnz	r0, 800641e <_svfiprintf_r+0xe6>
 80063e6:	06d0      	lsls	r0, r2, #27
 80063e8:	bf44      	itt	mi
 80063ea:	2320      	movmi	r3, #32
 80063ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063f0:	0711      	lsls	r1, r2, #28
 80063f2:	bf44      	itt	mi
 80063f4:	232b      	movmi	r3, #43	; 0x2b
 80063f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063fa:	f89a 3000 	ldrb.w	r3, [sl]
 80063fe:	2b2a      	cmp	r3, #42	; 0x2a
 8006400:	d015      	beq.n	800642e <_svfiprintf_r+0xf6>
 8006402:	4654      	mov	r4, sl
 8006404:	2000      	movs	r0, #0
 8006406:	f04f 0c0a 	mov.w	ip, #10
 800640a:	9a07      	ldr	r2, [sp, #28]
 800640c:	4621      	mov	r1, r4
 800640e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006412:	3b30      	subs	r3, #48	; 0x30
 8006414:	2b09      	cmp	r3, #9
 8006416:	d94e      	bls.n	80064b6 <_svfiprintf_r+0x17e>
 8006418:	b1b0      	cbz	r0, 8006448 <_svfiprintf_r+0x110>
 800641a:	9207      	str	r2, [sp, #28]
 800641c:	e014      	b.n	8006448 <_svfiprintf_r+0x110>
 800641e:	eba0 0308 	sub.w	r3, r0, r8
 8006422:	fa09 f303 	lsl.w	r3, r9, r3
 8006426:	4313      	orrs	r3, r2
 8006428:	46a2      	mov	sl, r4
 800642a:	9304      	str	r3, [sp, #16]
 800642c:	e7d2      	b.n	80063d4 <_svfiprintf_r+0x9c>
 800642e:	9b03      	ldr	r3, [sp, #12]
 8006430:	1d19      	adds	r1, r3, #4
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	9103      	str	r1, [sp, #12]
 8006436:	2b00      	cmp	r3, #0
 8006438:	bfbb      	ittet	lt
 800643a:	425b      	neglt	r3, r3
 800643c:	f042 0202 	orrlt.w	r2, r2, #2
 8006440:	9307      	strge	r3, [sp, #28]
 8006442:	9307      	strlt	r3, [sp, #28]
 8006444:	bfb8      	it	lt
 8006446:	9204      	strlt	r2, [sp, #16]
 8006448:	7823      	ldrb	r3, [r4, #0]
 800644a:	2b2e      	cmp	r3, #46	; 0x2e
 800644c:	d10c      	bne.n	8006468 <_svfiprintf_r+0x130>
 800644e:	7863      	ldrb	r3, [r4, #1]
 8006450:	2b2a      	cmp	r3, #42	; 0x2a
 8006452:	d135      	bne.n	80064c0 <_svfiprintf_r+0x188>
 8006454:	9b03      	ldr	r3, [sp, #12]
 8006456:	3402      	adds	r4, #2
 8006458:	1d1a      	adds	r2, r3, #4
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	9203      	str	r2, [sp, #12]
 800645e:	2b00      	cmp	r3, #0
 8006460:	bfb8      	it	lt
 8006462:	f04f 33ff 	movlt.w	r3, #4294967295
 8006466:	9305      	str	r3, [sp, #20]
 8006468:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006534 <_svfiprintf_r+0x1fc>
 800646c:	2203      	movs	r2, #3
 800646e:	4650      	mov	r0, sl
 8006470:	7821      	ldrb	r1, [r4, #0]
 8006472:	f7ff fab3 	bl	80059dc <memchr>
 8006476:	b140      	cbz	r0, 800648a <_svfiprintf_r+0x152>
 8006478:	2340      	movs	r3, #64	; 0x40
 800647a:	eba0 000a 	sub.w	r0, r0, sl
 800647e:	fa03 f000 	lsl.w	r0, r3, r0
 8006482:	9b04      	ldr	r3, [sp, #16]
 8006484:	3401      	adds	r4, #1
 8006486:	4303      	orrs	r3, r0
 8006488:	9304      	str	r3, [sp, #16]
 800648a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800648e:	2206      	movs	r2, #6
 8006490:	4825      	ldr	r0, [pc, #148]	; (8006528 <_svfiprintf_r+0x1f0>)
 8006492:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006496:	f7ff faa1 	bl	80059dc <memchr>
 800649a:	2800      	cmp	r0, #0
 800649c:	d038      	beq.n	8006510 <_svfiprintf_r+0x1d8>
 800649e:	4b23      	ldr	r3, [pc, #140]	; (800652c <_svfiprintf_r+0x1f4>)
 80064a0:	bb1b      	cbnz	r3, 80064ea <_svfiprintf_r+0x1b2>
 80064a2:	9b03      	ldr	r3, [sp, #12]
 80064a4:	3307      	adds	r3, #7
 80064a6:	f023 0307 	bic.w	r3, r3, #7
 80064aa:	3308      	adds	r3, #8
 80064ac:	9303      	str	r3, [sp, #12]
 80064ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064b0:	4433      	add	r3, r6
 80064b2:	9309      	str	r3, [sp, #36]	; 0x24
 80064b4:	e767      	b.n	8006386 <_svfiprintf_r+0x4e>
 80064b6:	460c      	mov	r4, r1
 80064b8:	2001      	movs	r0, #1
 80064ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80064be:	e7a5      	b.n	800640c <_svfiprintf_r+0xd4>
 80064c0:	2300      	movs	r3, #0
 80064c2:	f04f 0c0a 	mov.w	ip, #10
 80064c6:	4619      	mov	r1, r3
 80064c8:	3401      	adds	r4, #1
 80064ca:	9305      	str	r3, [sp, #20]
 80064cc:	4620      	mov	r0, r4
 80064ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80064d2:	3a30      	subs	r2, #48	; 0x30
 80064d4:	2a09      	cmp	r2, #9
 80064d6:	d903      	bls.n	80064e0 <_svfiprintf_r+0x1a8>
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d0c5      	beq.n	8006468 <_svfiprintf_r+0x130>
 80064dc:	9105      	str	r1, [sp, #20]
 80064de:	e7c3      	b.n	8006468 <_svfiprintf_r+0x130>
 80064e0:	4604      	mov	r4, r0
 80064e2:	2301      	movs	r3, #1
 80064e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80064e8:	e7f0      	b.n	80064cc <_svfiprintf_r+0x194>
 80064ea:	ab03      	add	r3, sp, #12
 80064ec:	9300      	str	r3, [sp, #0]
 80064ee:	462a      	mov	r2, r5
 80064f0:	4638      	mov	r0, r7
 80064f2:	4b0f      	ldr	r3, [pc, #60]	; (8006530 <_svfiprintf_r+0x1f8>)
 80064f4:	a904      	add	r1, sp, #16
 80064f6:	f7fe f807 	bl	8004508 <_printf_float>
 80064fa:	1c42      	adds	r2, r0, #1
 80064fc:	4606      	mov	r6, r0
 80064fe:	d1d6      	bne.n	80064ae <_svfiprintf_r+0x176>
 8006500:	89ab      	ldrh	r3, [r5, #12]
 8006502:	065b      	lsls	r3, r3, #25
 8006504:	f53f af2c 	bmi.w	8006360 <_svfiprintf_r+0x28>
 8006508:	9809      	ldr	r0, [sp, #36]	; 0x24
 800650a:	b01d      	add	sp, #116	; 0x74
 800650c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006510:	ab03      	add	r3, sp, #12
 8006512:	9300      	str	r3, [sp, #0]
 8006514:	462a      	mov	r2, r5
 8006516:	4638      	mov	r0, r7
 8006518:	4b05      	ldr	r3, [pc, #20]	; (8006530 <_svfiprintf_r+0x1f8>)
 800651a:	a904      	add	r1, sp, #16
 800651c:	f7fe fa90 	bl	8004a40 <_printf_i>
 8006520:	e7eb      	b.n	80064fa <_svfiprintf_r+0x1c2>
 8006522:	bf00      	nop
 8006524:	080073f4 	.word	0x080073f4
 8006528:	080073fe 	.word	0x080073fe
 800652c:	08004509 	.word	0x08004509
 8006530:	08006281 	.word	0x08006281
 8006534:	080073fa 	.word	0x080073fa

08006538 <_sbrk_r>:
 8006538:	b538      	push	{r3, r4, r5, lr}
 800653a:	2300      	movs	r3, #0
 800653c:	4d05      	ldr	r5, [pc, #20]	; (8006554 <_sbrk_r+0x1c>)
 800653e:	4604      	mov	r4, r0
 8006540:	4608      	mov	r0, r1
 8006542:	602b      	str	r3, [r5, #0]
 8006544:	f7fb fa38 	bl	80019b8 <_sbrk>
 8006548:	1c43      	adds	r3, r0, #1
 800654a:	d102      	bne.n	8006552 <_sbrk_r+0x1a>
 800654c:	682b      	ldr	r3, [r5, #0]
 800654e:	b103      	cbz	r3, 8006552 <_sbrk_r+0x1a>
 8006550:	6023      	str	r3, [r4, #0]
 8006552:	bd38      	pop	{r3, r4, r5, pc}
 8006554:	20000320 	.word	0x20000320

08006558 <__assert_func>:
 8006558:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800655a:	4614      	mov	r4, r2
 800655c:	461a      	mov	r2, r3
 800655e:	4b09      	ldr	r3, [pc, #36]	; (8006584 <__assert_func+0x2c>)
 8006560:	4605      	mov	r5, r0
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	68d8      	ldr	r0, [r3, #12]
 8006566:	b14c      	cbz	r4, 800657c <__assert_func+0x24>
 8006568:	4b07      	ldr	r3, [pc, #28]	; (8006588 <__assert_func+0x30>)
 800656a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800656e:	9100      	str	r1, [sp, #0]
 8006570:	462b      	mov	r3, r5
 8006572:	4906      	ldr	r1, [pc, #24]	; (800658c <__assert_func+0x34>)
 8006574:	f000 f80e 	bl	8006594 <fiprintf>
 8006578:	f000 faa2 	bl	8006ac0 <abort>
 800657c:	4b04      	ldr	r3, [pc, #16]	; (8006590 <__assert_func+0x38>)
 800657e:	461c      	mov	r4, r3
 8006580:	e7f3      	b.n	800656a <__assert_func+0x12>
 8006582:	bf00      	nop
 8006584:	2000000c 	.word	0x2000000c
 8006588:	08007405 	.word	0x08007405
 800658c:	08007412 	.word	0x08007412
 8006590:	08007440 	.word	0x08007440

08006594 <fiprintf>:
 8006594:	b40e      	push	{r1, r2, r3}
 8006596:	b503      	push	{r0, r1, lr}
 8006598:	4601      	mov	r1, r0
 800659a:	ab03      	add	r3, sp, #12
 800659c:	4805      	ldr	r0, [pc, #20]	; (80065b4 <fiprintf+0x20>)
 800659e:	f853 2b04 	ldr.w	r2, [r3], #4
 80065a2:	6800      	ldr	r0, [r0, #0]
 80065a4:	9301      	str	r3, [sp, #4]
 80065a6:	f000 f88d 	bl	80066c4 <_vfiprintf_r>
 80065aa:	b002      	add	sp, #8
 80065ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80065b0:	b003      	add	sp, #12
 80065b2:	4770      	bx	lr
 80065b4:	2000000c 	.word	0x2000000c

080065b8 <__ascii_mbtowc>:
 80065b8:	b082      	sub	sp, #8
 80065ba:	b901      	cbnz	r1, 80065be <__ascii_mbtowc+0x6>
 80065bc:	a901      	add	r1, sp, #4
 80065be:	b142      	cbz	r2, 80065d2 <__ascii_mbtowc+0x1a>
 80065c0:	b14b      	cbz	r3, 80065d6 <__ascii_mbtowc+0x1e>
 80065c2:	7813      	ldrb	r3, [r2, #0]
 80065c4:	600b      	str	r3, [r1, #0]
 80065c6:	7812      	ldrb	r2, [r2, #0]
 80065c8:	1e10      	subs	r0, r2, #0
 80065ca:	bf18      	it	ne
 80065cc:	2001      	movne	r0, #1
 80065ce:	b002      	add	sp, #8
 80065d0:	4770      	bx	lr
 80065d2:	4610      	mov	r0, r2
 80065d4:	e7fb      	b.n	80065ce <__ascii_mbtowc+0x16>
 80065d6:	f06f 0001 	mvn.w	r0, #1
 80065da:	e7f8      	b.n	80065ce <__ascii_mbtowc+0x16>

080065dc <memmove>:
 80065dc:	4288      	cmp	r0, r1
 80065de:	b510      	push	{r4, lr}
 80065e0:	eb01 0402 	add.w	r4, r1, r2
 80065e4:	d902      	bls.n	80065ec <memmove+0x10>
 80065e6:	4284      	cmp	r4, r0
 80065e8:	4623      	mov	r3, r4
 80065ea:	d807      	bhi.n	80065fc <memmove+0x20>
 80065ec:	1e43      	subs	r3, r0, #1
 80065ee:	42a1      	cmp	r1, r4
 80065f0:	d008      	beq.n	8006604 <memmove+0x28>
 80065f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80065f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80065fa:	e7f8      	b.n	80065ee <memmove+0x12>
 80065fc:	4601      	mov	r1, r0
 80065fe:	4402      	add	r2, r0
 8006600:	428a      	cmp	r2, r1
 8006602:	d100      	bne.n	8006606 <memmove+0x2a>
 8006604:	bd10      	pop	{r4, pc}
 8006606:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800660a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800660e:	e7f7      	b.n	8006600 <memmove+0x24>

08006610 <__malloc_lock>:
 8006610:	4801      	ldr	r0, [pc, #4]	; (8006618 <__malloc_lock+0x8>)
 8006612:	f000 bc15 	b.w	8006e40 <__retarget_lock_acquire_recursive>
 8006616:	bf00      	nop
 8006618:	20000328 	.word	0x20000328

0800661c <__malloc_unlock>:
 800661c:	4801      	ldr	r0, [pc, #4]	; (8006624 <__malloc_unlock+0x8>)
 800661e:	f000 bc10 	b.w	8006e42 <__retarget_lock_release_recursive>
 8006622:	bf00      	nop
 8006624:	20000328 	.word	0x20000328

08006628 <_realloc_r>:
 8006628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800662a:	4607      	mov	r7, r0
 800662c:	4614      	mov	r4, r2
 800662e:	460e      	mov	r6, r1
 8006630:	b921      	cbnz	r1, 800663c <_realloc_r+0x14>
 8006632:	4611      	mov	r1, r2
 8006634:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006638:	f7ff bdc8 	b.w	80061cc <_malloc_r>
 800663c:	b922      	cbnz	r2, 8006648 <_realloc_r+0x20>
 800663e:	f7ff fd79 	bl	8006134 <_free_r>
 8006642:	4625      	mov	r5, r4
 8006644:	4628      	mov	r0, r5
 8006646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006648:	f000 fc60 	bl	8006f0c <_malloc_usable_size_r>
 800664c:	42a0      	cmp	r0, r4
 800664e:	d20f      	bcs.n	8006670 <_realloc_r+0x48>
 8006650:	4621      	mov	r1, r4
 8006652:	4638      	mov	r0, r7
 8006654:	f7ff fdba 	bl	80061cc <_malloc_r>
 8006658:	4605      	mov	r5, r0
 800665a:	2800      	cmp	r0, #0
 800665c:	d0f2      	beq.n	8006644 <_realloc_r+0x1c>
 800665e:	4631      	mov	r1, r6
 8006660:	4622      	mov	r2, r4
 8006662:	f7ff f9c9 	bl	80059f8 <memcpy>
 8006666:	4631      	mov	r1, r6
 8006668:	4638      	mov	r0, r7
 800666a:	f7ff fd63 	bl	8006134 <_free_r>
 800666e:	e7e9      	b.n	8006644 <_realloc_r+0x1c>
 8006670:	4635      	mov	r5, r6
 8006672:	e7e7      	b.n	8006644 <_realloc_r+0x1c>

08006674 <__sfputc_r>:
 8006674:	6893      	ldr	r3, [r2, #8]
 8006676:	b410      	push	{r4}
 8006678:	3b01      	subs	r3, #1
 800667a:	2b00      	cmp	r3, #0
 800667c:	6093      	str	r3, [r2, #8]
 800667e:	da07      	bge.n	8006690 <__sfputc_r+0x1c>
 8006680:	6994      	ldr	r4, [r2, #24]
 8006682:	42a3      	cmp	r3, r4
 8006684:	db01      	blt.n	800668a <__sfputc_r+0x16>
 8006686:	290a      	cmp	r1, #10
 8006688:	d102      	bne.n	8006690 <__sfputc_r+0x1c>
 800668a:	bc10      	pop	{r4}
 800668c:	f000 b94a 	b.w	8006924 <__swbuf_r>
 8006690:	6813      	ldr	r3, [r2, #0]
 8006692:	1c58      	adds	r0, r3, #1
 8006694:	6010      	str	r0, [r2, #0]
 8006696:	7019      	strb	r1, [r3, #0]
 8006698:	4608      	mov	r0, r1
 800669a:	bc10      	pop	{r4}
 800669c:	4770      	bx	lr

0800669e <__sfputs_r>:
 800669e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066a0:	4606      	mov	r6, r0
 80066a2:	460f      	mov	r7, r1
 80066a4:	4614      	mov	r4, r2
 80066a6:	18d5      	adds	r5, r2, r3
 80066a8:	42ac      	cmp	r4, r5
 80066aa:	d101      	bne.n	80066b0 <__sfputs_r+0x12>
 80066ac:	2000      	movs	r0, #0
 80066ae:	e007      	b.n	80066c0 <__sfputs_r+0x22>
 80066b0:	463a      	mov	r2, r7
 80066b2:	4630      	mov	r0, r6
 80066b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066b8:	f7ff ffdc 	bl	8006674 <__sfputc_r>
 80066bc:	1c43      	adds	r3, r0, #1
 80066be:	d1f3      	bne.n	80066a8 <__sfputs_r+0xa>
 80066c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080066c4 <_vfiprintf_r>:
 80066c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066c8:	460d      	mov	r5, r1
 80066ca:	4614      	mov	r4, r2
 80066cc:	4698      	mov	r8, r3
 80066ce:	4606      	mov	r6, r0
 80066d0:	b09d      	sub	sp, #116	; 0x74
 80066d2:	b118      	cbz	r0, 80066dc <_vfiprintf_r+0x18>
 80066d4:	6983      	ldr	r3, [r0, #24]
 80066d6:	b90b      	cbnz	r3, 80066dc <_vfiprintf_r+0x18>
 80066d8:	f000 fb14 	bl	8006d04 <__sinit>
 80066dc:	4b89      	ldr	r3, [pc, #548]	; (8006904 <_vfiprintf_r+0x240>)
 80066de:	429d      	cmp	r5, r3
 80066e0:	d11b      	bne.n	800671a <_vfiprintf_r+0x56>
 80066e2:	6875      	ldr	r5, [r6, #4]
 80066e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80066e6:	07d9      	lsls	r1, r3, #31
 80066e8:	d405      	bmi.n	80066f6 <_vfiprintf_r+0x32>
 80066ea:	89ab      	ldrh	r3, [r5, #12]
 80066ec:	059a      	lsls	r2, r3, #22
 80066ee:	d402      	bmi.n	80066f6 <_vfiprintf_r+0x32>
 80066f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80066f2:	f000 fba5 	bl	8006e40 <__retarget_lock_acquire_recursive>
 80066f6:	89ab      	ldrh	r3, [r5, #12]
 80066f8:	071b      	lsls	r3, r3, #28
 80066fa:	d501      	bpl.n	8006700 <_vfiprintf_r+0x3c>
 80066fc:	692b      	ldr	r3, [r5, #16]
 80066fe:	b9eb      	cbnz	r3, 800673c <_vfiprintf_r+0x78>
 8006700:	4629      	mov	r1, r5
 8006702:	4630      	mov	r0, r6
 8006704:	f000 f96e 	bl	80069e4 <__swsetup_r>
 8006708:	b1c0      	cbz	r0, 800673c <_vfiprintf_r+0x78>
 800670a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800670c:	07dc      	lsls	r4, r3, #31
 800670e:	d50e      	bpl.n	800672e <_vfiprintf_r+0x6a>
 8006710:	f04f 30ff 	mov.w	r0, #4294967295
 8006714:	b01d      	add	sp, #116	; 0x74
 8006716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800671a:	4b7b      	ldr	r3, [pc, #492]	; (8006908 <_vfiprintf_r+0x244>)
 800671c:	429d      	cmp	r5, r3
 800671e:	d101      	bne.n	8006724 <_vfiprintf_r+0x60>
 8006720:	68b5      	ldr	r5, [r6, #8]
 8006722:	e7df      	b.n	80066e4 <_vfiprintf_r+0x20>
 8006724:	4b79      	ldr	r3, [pc, #484]	; (800690c <_vfiprintf_r+0x248>)
 8006726:	429d      	cmp	r5, r3
 8006728:	bf08      	it	eq
 800672a:	68f5      	ldreq	r5, [r6, #12]
 800672c:	e7da      	b.n	80066e4 <_vfiprintf_r+0x20>
 800672e:	89ab      	ldrh	r3, [r5, #12]
 8006730:	0598      	lsls	r0, r3, #22
 8006732:	d4ed      	bmi.n	8006710 <_vfiprintf_r+0x4c>
 8006734:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006736:	f000 fb84 	bl	8006e42 <__retarget_lock_release_recursive>
 800673a:	e7e9      	b.n	8006710 <_vfiprintf_r+0x4c>
 800673c:	2300      	movs	r3, #0
 800673e:	9309      	str	r3, [sp, #36]	; 0x24
 8006740:	2320      	movs	r3, #32
 8006742:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006746:	2330      	movs	r3, #48	; 0x30
 8006748:	f04f 0901 	mov.w	r9, #1
 800674c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006750:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006910 <_vfiprintf_r+0x24c>
 8006754:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006758:	4623      	mov	r3, r4
 800675a:	469a      	mov	sl, r3
 800675c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006760:	b10a      	cbz	r2, 8006766 <_vfiprintf_r+0xa2>
 8006762:	2a25      	cmp	r2, #37	; 0x25
 8006764:	d1f9      	bne.n	800675a <_vfiprintf_r+0x96>
 8006766:	ebba 0b04 	subs.w	fp, sl, r4
 800676a:	d00b      	beq.n	8006784 <_vfiprintf_r+0xc0>
 800676c:	465b      	mov	r3, fp
 800676e:	4622      	mov	r2, r4
 8006770:	4629      	mov	r1, r5
 8006772:	4630      	mov	r0, r6
 8006774:	f7ff ff93 	bl	800669e <__sfputs_r>
 8006778:	3001      	adds	r0, #1
 800677a:	f000 80aa 	beq.w	80068d2 <_vfiprintf_r+0x20e>
 800677e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006780:	445a      	add	r2, fp
 8006782:	9209      	str	r2, [sp, #36]	; 0x24
 8006784:	f89a 3000 	ldrb.w	r3, [sl]
 8006788:	2b00      	cmp	r3, #0
 800678a:	f000 80a2 	beq.w	80068d2 <_vfiprintf_r+0x20e>
 800678e:	2300      	movs	r3, #0
 8006790:	f04f 32ff 	mov.w	r2, #4294967295
 8006794:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006798:	f10a 0a01 	add.w	sl, sl, #1
 800679c:	9304      	str	r3, [sp, #16]
 800679e:	9307      	str	r3, [sp, #28]
 80067a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80067a4:	931a      	str	r3, [sp, #104]	; 0x68
 80067a6:	4654      	mov	r4, sl
 80067a8:	2205      	movs	r2, #5
 80067aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067ae:	4858      	ldr	r0, [pc, #352]	; (8006910 <_vfiprintf_r+0x24c>)
 80067b0:	f7ff f914 	bl	80059dc <memchr>
 80067b4:	9a04      	ldr	r2, [sp, #16]
 80067b6:	b9d8      	cbnz	r0, 80067f0 <_vfiprintf_r+0x12c>
 80067b8:	06d1      	lsls	r1, r2, #27
 80067ba:	bf44      	itt	mi
 80067bc:	2320      	movmi	r3, #32
 80067be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067c2:	0713      	lsls	r3, r2, #28
 80067c4:	bf44      	itt	mi
 80067c6:	232b      	movmi	r3, #43	; 0x2b
 80067c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067cc:	f89a 3000 	ldrb.w	r3, [sl]
 80067d0:	2b2a      	cmp	r3, #42	; 0x2a
 80067d2:	d015      	beq.n	8006800 <_vfiprintf_r+0x13c>
 80067d4:	4654      	mov	r4, sl
 80067d6:	2000      	movs	r0, #0
 80067d8:	f04f 0c0a 	mov.w	ip, #10
 80067dc:	9a07      	ldr	r2, [sp, #28]
 80067de:	4621      	mov	r1, r4
 80067e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80067e4:	3b30      	subs	r3, #48	; 0x30
 80067e6:	2b09      	cmp	r3, #9
 80067e8:	d94e      	bls.n	8006888 <_vfiprintf_r+0x1c4>
 80067ea:	b1b0      	cbz	r0, 800681a <_vfiprintf_r+0x156>
 80067ec:	9207      	str	r2, [sp, #28]
 80067ee:	e014      	b.n	800681a <_vfiprintf_r+0x156>
 80067f0:	eba0 0308 	sub.w	r3, r0, r8
 80067f4:	fa09 f303 	lsl.w	r3, r9, r3
 80067f8:	4313      	orrs	r3, r2
 80067fa:	46a2      	mov	sl, r4
 80067fc:	9304      	str	r3, [sp, #16]
 80067fe:	e7d2      	b.n	80067a6 <_vfiprintf_r+0xe2>
 8006800:	9b03      	ldr	r3, [sp, #12]
 8006802:	1d19      	adds	r1, r3, #4
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	9103      	str	r1, [sp, #12]
 8006808:	2b00      	cmp	r3, #0
 800680a:	bfbb      	ittet	lt
 800680c:	425b      	neglt	r3, r3
 800680e:	f042 0202 	orrlt.w	r2, r2, #2
 8006812:	9307      	strge	r3, [sp, #28]
 8006814:	9307      	strlt	r3, [sp, #28]
 8006816:	bfb8      	it	lt
 8006818:	9204      	strlt	r2, [sp, #16]
 800681a:	7823      	ldrb	r3, [r4, #0]
 800681c:	2b2e      	cmp	r3, #46	; 0x2e
 800681e:	d10c      	bne.n	800683a <_vfiprintf_r+0x176>
 8006820:	7863      	ldrb	r3, [r4, #1]
 8006822:	2b2a      	cmp	r3, #42	; 0x2a
 8006824:	d135      	bne.n	8006892 <_vfiprintf_r+0x1ce>
 8006826:	9b03      	ldr	r3, [sp, #12]
 8006828:	3402      	adds	r4, #2
 800682a:	1d1a      	adds	r2, r3, #4
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	9203      	str	r2, [sp, #12]
 8006830:	2b00      	cmp	r3, #0
 8006832:	bfb8      	it	lt
 8006834:	f04f 33ff 	movlt.w	r3, #4294967295
 8006838:	9305      	str	r3, [sp, #20]
 800683a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006920 <_vfiprintf_r+0x25c>
 800683e:	2203      	movs	r2, #3
 8006840:	4650      	mov	r0, sl
 8006842:	7821      	ldrb	r1, [r4, #0]
 8006844:	f7ff f8ca 	bl	80059dc <memchr>
 8006848:	b140      	cbz	r0, 800685c <_vfiprintf_r+0x198>
 800684a:	2340      	movs	r3, #64	; 0x40
 800684c:	eba0 000a 	sub.w	r0, r0, sl
 8006850:	fa03 f000 	lsl.w	r0, r3, r0
 8006854:	9b04      	ldr	r3, [sp, #16]
 8006856:	3401      	adds	r4, #1
 8006858:	4303      	orrs	r3, r0
 800685a:	9304      	str	r3, [sp, #16]
 800685c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006860:	2206      	movs	r2, #6
 8006862:	482c      	ldr	r0, [pc, #176]	; (8006914 <_vfiprintf_r+0x250>)
 8006864:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006868:	f7ff f8b8 	bl	80059dc <memchr>
 800686c:	2800      	cmp	r0, #0
 800686e:	d03f      	beq.n	80068f0 <_vfiprintf_r+0x22c>
 8006870:	4b29      	ldr	r3, [pc, #164]	; (8006918 <_vfiprintf_r+0x254>)
 8006872:	bb1b      	cbnz	r3, 80068bc <_vfiprintf_r+0x1f8>
 8006874:	9b03      	ldr	r3, [sp, #12]
 8006876:	3307      	adds	r3, #7
 8006878:	f023 0307 	bic.w	r3, r3, #7
 800687c:	3308      	adds	r3, #8
 800687e:	9303      	str	r3, [sp, #12]
 8006880:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006882:	443b      	add	r3, r7
 8006884:	9309      	str	r3, [sp, #36]	; 0x24
 8006886:	e767      	b.n	8006758 <_vfiprintf_r+0x94>
 8006888:	460c      	mov	r4, r1
 800688a:	2001      	movs	r0, #1
 800688c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006890:	e7a5      	b.n	80067de <_vfiprintf_r+0x11a>
 8006892:	2300      	movs	r3, #0
 8006894:	f04f 0c0a 	mov.w	ip, #10
 8006898:	4619      	mov	r1, r3
 800689a:	3401      	adds	r4, #1
 800689c:	9305      	str	r3, [sp, #20]
 800689e:	4620      	mov	r0, r4
 80068a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80068a4:	3a30      	subs	r2, #48	; 0x30
 80068a6:	2a09      	cmp	r2, #9
 80068a8:	d903      	bls.n	80068b2 <_vfiprintf_r+0x1ee>
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d0c5      	beq.n	800683a <_vfiprintf_r+0x176>
 80068ae:	9105      	str	r1, [sp, #20]
 80068b0:	e7c3      	b.n	800683a <_vfiprintf_r+0x176>
 80068b2:	4604      	mov	r4, r0
 80068b4:	2301      	movs	r3, #1
 80068b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80068ba:	e7f0      	b.n	800689e <_vfiprintf_r+0x1da>
 80068bc:	ab03      	add	r3, sp, #12
 80068be:	9300      	str	r3, [sp, #0]
 80068c0:	462a      	mov	r2, r5
 80068c2:	4630      	mov	r0, r6
 80068c4:	4b15      	ldr	r3, [pc, #84]	; (800691c <_vfiprintf_r+0x258>)
 80068c6:	a904      	add	r1, sp, #16
 80068c8:	f7fd fe1e 	bl	8004508 <_printf_float>
 80068cc:	4607      	mov	r7, r0
 80068ce:	1c78      	adds	r0, r7, #1
 80068d0:	d1d6      	bne.n	8006880 <_vfiprintf_r+0x1bc>
 80068d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80068d4:	07d9      	lsls	r1, r3, #31
 80068d6:	d405      	bmi.n	80068e4 <_vfiprintf_r+0x220>
 80068d8:	89ab      	ldrh	r3, [r5, #12]
 80068da:	059a      	lsls	r2, r3, #22
 80068dc:	d402      	bmi.n	80068e4 <_vfiprintf_r+0x220>
 80068de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80068e0:	f000 faaf 	bl	8006e42 <__retarget_lock_release_recursive>
 80068e4:	89ab      	ldrh	r3, [r5, #12]
 80068e6:	065b      	lsls	r3, r3, #25
 80068e8:	f53f af12 	bmi.w	8006710 <_vfiprintf_r+0x4c>
 80068ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80068ee:	e711      	b.n	8006714 <_vfiprintf_r+0x50>
 80068f0:	ab03      	add	r3, sp, #12
 80068f2:	9300      	str	r3, [sp, #0]
 80068f4:	462a      	mov	r2, r5
 80068f6:	4630      	mov	r0, r6
 80068f8:	4b08      	ldr	r3, [pc, #32]	; (800691c <_vfiprintf_r+0x258>)
 80068fa:	a904      	add	r1, sp, #16
 80068fc:	f7fe f8a0 	bl	8004a40 <_printf_i>
 8006900:	e7e4      	b.n	80068cc <_vfiprintf_r+0x208>
 8006902:	bf00      	nop
 8006904:	0800756c 	.word	0x0800756c
 8006908:	0800758c 	.word	0x0800758c
 800690c:	0800754c 	.word	0x0800754c
 8006910:	080073f4 	.word	0x080073f4
 8006914:	080073fe 	.word	0x080073fe
 8006918:	08004509 	.word	0x08004509
 800691c:	0800669f 	.word	0x0800669f
 8006920:	080073fa 	.word	0x080073fa

08006924 <__swbuf_r>:
 8006924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006926:	460e      	mov	r6, r1
 8006928:	4614      	mov	r4, r2
 800692a:	4605      	mov	r5, r0
 800692c:	b118      	cbz	r0, 8006936 <__swbuf_r+0x12>
 800692e:	6983      	ldr	r3, [r0, #24]
 8006930:	b90b      	cbnz	r3, 8006936 <__swbuf_r+0x12>
 8006932:	f000 f9e7 	bl	8006d04 <__sinit>
 8006936:	4b21      	ldr	r3, [pc, #132]	; (80069bc <__swbuf_r+0x98>)
 8006938:	429c      	cmp	r4, r3
 800693a:	d12b      	bne.n	8006994 <__swbuf_r+0x70>
 800693c:	686c      	ldr	r4, [r5, #4]
 800693e:	69a3      	ldr	r3, [r4, #24]
 8006940:	60a3      	str	r3, [r4, #8]
 8006942:	89a3      	ldrh	r3, [r4, #12]
 8006944:	071a      	lsls	r2, r3, #28
 8006946:	d52f      	bpl.n	80069a8 <__swbuf_r+0x84>
 8006948:	6923      	ldr	r3, [r4, #16]
 800694a:	b36b      	cbz	r3, 80069a8 <__swbuf_r+0x84>
 800694c:	6923      	ldr	r3, [r4, #16]
 800694e:	6820      	ldr	r0, [r4, #0]
 8006950:	b2f6      	uxtb	r6, r6
 8006952:	1ac0      	subs	r0, r0, r3
 8006954:	6963      	ldr	r3, [r4, #20]
 8006956:	4637      	mov	r7, r6
 8006958:	4283      	cmp	r3, r0
 800695a:	dc04      	bgt.n	8006966 <__swbuf_r+0x42>
 800695c:	4621      	mov	r1, r4
 800695e:	4628      	mov	r0, r5
 8006960:	f000 f93c 	bl	8006bdc <_fflush_r>
 8006964:	bb30      	cbnz	r0, 80069b4 <__swbuf_r+0x90>
 8006966:	68a3      	ldr	r3, [r4, #8]
 8006968:	3001      	adds	r0, #1
 800696a:	3b01      	subs	r3, #1
 800696c:	60a3      	str	r3, [r4, #8]
 800696e:	6823      	ldr	r3, [r4, #0]
 8006970:	1c5a      	adds	r2, r3, #1
 8006972:	6022      	str	r2, [r4, #0]
 8006974:	701e      	strb	r6, [r3, #0]
 8006976:	6963      	ldr	r3, [r4, #20]
 8006978:	4283      	cmp	r3, r0
 800697a:	d004      	beq.n	8006986 <__swbuf_r+0x62>
 800697c:	89a3      	ldrh	r3, [r4, #12]
 800697e:	07db      	lsls	r3, r3, #31
 8006980:	d506      	bpl.n	8006990 <__swbuf_r+0x6c>
 8006982:	2e0a      	cmp	r6, #10
 8006984:	d104      	bne.n	8006990 <__swbuf_r+0x6c>
 8006986:	4621      	mov	r1, r4
 8006988:	4628      	mov	r0, r5
 800698a:	f000 f927 	bl	8006bdc <_fflush_r>
 800698e:	b988      	cbnz	r0, 80069b4 <__swbuf_r+0x90>
 8006990:	4638      	mov	r0, r7
 8006992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006994:	4b0a      	ldr	r3, [pc, #40]	; (80069c0 <__swbuf_r+0x9c>)
 8006996:	429c      	cmp	r4, r3
 8006998:	d101      	bne.n	800699e <__swbuf_r+0x7a>
 800699a:	68ac      	ldr	r4, [r5, #8]
 800699c:	e7cf      	b.n	800693e <__swbuf_r+0x1a>
 800699e:	4b09      	ldr	r3, [pc, #36]	; (80069c4 <__swbuf_r+0xa0>)
 80069a0:	429c      	cmp	r4, r3
 80069a2:	bf08      	it	eq
 80069a4:	68ec      	ldreq	r4, [r5, #12]
 80069a6:	e7ca      	b.n	800693e <__swbuf_r+0x1a>
 80069a8:	4621      	mov	r1, r4
 80069aa:	4628      	mov	r0, r5
 80069ac:	f000 f81a 	bl	80069e4 <__swsetup_r>
 80069b0:	2800      	cmp	r0, #0
 80069b2:	d0cb      	beq.n	800694c <__swbuf_r+0x28>
 80069b4:	f04f 37ff 	mov.w	r7, #4294967295
 80069b8:	e7ea      	b.n	8006990 <__swbuf_r+0x6c>
 80069ba:	bf00      	nop
 80069bc:	0800756c 	.word	0x0800756c
 80069c0:	0800758c 	.word	0x0800758c
 80069c4:	0800754c 	.word	0x0800754c

080069c8 <__ascii_wctomb>:
 80069c8:	4603      	mov	r3, r0
 80069ca:	4608      	mov	r0, r1
 80069cc:	b141      	cbz	r1, 80069e0 <__ascii_wctomb+0x18>
 80069ce:	2aff      	cmp	r2, #255	; 0xff
 80069d0:	d904      	bls.n	80069dc <__ascii_wctomb+0x14>
 80069d2:	228a      	movs	r2, #138	; 0x8a
 80069d4:	f04f 30ff 	mov.w	r0, #4294967295
 80069d8:	601a      	str	r2, [r3, #0]
 80069da:	4770      	bx	lr
 80069dc:	2001      	movs	r0, #1
 80069de:	700a      	strb	r2, [r1, #0]
 80069e0:	4770      	bx	lr
	...

080069e4 <__swsetup_r>:
 80069e4:	4b32      	ldr	r3, [pc, #200]	; (8006ab0 <__swsetup_r+0xcc>)
 80069e6:	b570      	push	{r4, r5, r6, lr}
 80069e8:	681d      	ldr	r5, [r3, #0]
 80069ea:	4606      	mov	r6, r0
 80069ec:	460c      	mov	r4, r1
 80069ee:	b125      	cbz	r5, 80069fa <__swsetup_r+0x16>
 80069f0:	69ab      	ldr	r3, [r5, #24]
 80069f2:	b913      	cbnz	r3, 80069fa <__swsetup_r+0x16>
 80069f4:	4628      	mov	r0, r5
 80069f6:	f000 f985 	bl	8006d04 <__sinit>
 80069fa:	4b2e      	ldr	r3, [pc, #184]	; (8006ab4 <__swsetup_r+0xd0>)
 80069fc:	429c      	cmp	r4, r3
 80069fe:	d10f      	bne.n	8006a20 <__swsetup_r+0x3c>
 8006a00:	686c      	ldr	r4, [r5, #4]
 8006a02:	89a3      	ldrh	r3, [r4, #12]
 8006a04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a08:	0719      	lsls	r1, r3, #28
 8006a0a:	d42c      	bmi.n	8006a66 <__swsetup_r+0x82>
 8006a0c:	06dd      	lsls	r5, r3, #27
 8006a0e:	d411      	bmi.n	8006a34 <__swsetup_r+0x50>
 8006a10:	2309      	movs	r3, #9
 8006a12:	6033      	str	r3, [r6, #0]
 8006a14:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006a18:	f04f 30ff 	mov.w	r0, #4294967295
 8006a1c:	81a3      	strh	r3, [r4, #12]
 8006a1e:	e03e      	b.n	8006a9e <__swsetup_r+0xba>
 8006a20:	4b25      	ldr	r3, [pc, #148]	; (8006ab8 <__swsetup_r+0xd4>)
 8006a22:	429c      	cmp	r4, r3
 8006a24:	d101      	bne.n	8006a2a <__swsetup_r+0x46>
 8006a26:	68ac      	ldr	r4, [r5, #8]
 8006a28:	e7eb      	b.n	8006a02 <__swsetup_r+0x1e>
 8006a2a:	4b24      	ldr	r3, [pc, #144]	; (8006abc <__swsetup_r+0xd8>)
 8006a2c:	429c      	cmp	r4, r3
 8006a2e:	bf08      	it	eq
 8006a30:	68ec      	ldreq	r4, [r5, #12]
 8006a32:	e7e6      	b.n	8006a02 <__swsetup_r+0x1e>
 8006a34:	0758      	lsls	r0, r3, #29
 8006a36:	d512      	bpl.n	8006a5e <__swsetup_r+0x7a>
 8006a38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a3a:	b141      	cbz	r1, 8006a4e <__swsetup_r+0x6a>
 8006a3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a40:	4299      	cmp	r1, r3
 8006a42:	d002      	beq.n	8006a4a <__swsetup_r+0x66>
 8006a44:	4630      	mov	r0, r6
 8006a46:	f7ff fb75 	bl	8006134 <_free_r>
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	6363      	str	r3, [r4, #52]	; 0x34
 8006a4e:	89a3      	ldrh	r3, [r4, #12]
 8006a50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006a54:	81a3      	strh	r3, [r4, #12]
 8006a56:	2300      	movs	r3, #0
 8006a58:	6063      	str	r3, [r4, #4]
 8006a5a:	6923      	ldr	r3, [r4, #16]
 8006a5c:	6023      	str	r3, [r4, #0]
 8006a5e:	89a3      	ldrh	r3, [r4, #12]
 8006a60:	f043 0308 	orr.w	r3, r3, #8
 8006a64:	81a3      	strh	r3, [r4, #12]
 8006a66:	6923      	ldr	r3, [r4, #16]
 8006a68:	b94b      	cbnz	r3, 8006a7e <__swsetup_r+0x9a>
 8006a6a:	89a3      	ldrh	r3, [r4, #12]
 8006a6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006a70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a74:	d003      	beq.n	8006a7e <__swsetup_r+0x9a>
 8006a76:	4621      	mov	r1, r4
 8006a78:	4630      	mov	r0, r6
 8006a7a:	f000 fa07 	bl	8006e8c <__smakebuf_r>
 8006a7e:	89a0      	ldrh	r0, [r4, #12]
 8006a80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a84:	f010 0301 	ands.w	r3, r0, #1
 8006a88:	d00a      	beq.n	8006aa0 <__swsetup_r+0xbc>
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	60a3      	str	r3, [r4, #8]
 8006a8e:	6963      	ldr	r3, [r4, #20]
 8006a90:	425b      	negs	r3, r3
 8006a92:	61a3      	str	r3, [r4, #24]
 8006a94:	6923      	ldr	r3, [r4, #16]
 8006a96:	b943      	cbnz	r3, 8006aaa <__swsetup_r+0xc6>
 8006a98:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006a9c:	d1ba      	bne.n	8006a14 <__swsetup_r+0x30>
 8006a9e:	bd70      	pop	{r4, r5, r6, pc}
 8006aa0:	0781      	lsls	r1, r0, #30
 8006aa2:	bf58      	it	pl
 8006aa4:	6963      	ldrpl	r3, [r4, #20]
 8006aa6:	60a3      	str	r3, [r4, #8]
 8006aa8:	e7f4      	b.n	8006a94 <__swsetup_r+0xb0>
 8006aaa:	2000      	movs	r0, #0
 8006aac:	e7f7      	b.n	8006a9e <__swsetup_r+0xba>
 8006aae:	bf00      	nop
 8006ab0:	2000000c 	.word	0x2000000c
 8006ab4:	0800756c 	.word	0x0800756c
 8006ab8:	0800758c 	.word	0x0800758c
 8006abc:	0800754c 	.word	0x0800754c

08006ac0 <abort>:
 8006ac0:	2006      	movs	r0, #6
 8006ac2:	b508      	push	{r3, lr}
 8006ac4:	f000 fa52 	bl	8006f6c <raise>
 8006ac8:	2001      	movs	r0, #1
 8006aca:	f7fa ff02 	bl	80018d2 <_exit>
	...

08006ad0 <__sflush_r>:
 8006ad0:	898a      	ldrh	r2, [r1, #12]
 8006ad2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ad6:	4605      	mov	r5, r0
 8006ad8:	0710      	lsls	r0, r2, #28
 8006ada:	460c      	mov	r4, r1
 8006adc:	d458      	bmi.n	8006b90 <__sflush_r+0xc0>
 8006ade:	684b      	ldr	r3, [r1, #4]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	dc05      	bgt.n	8006af0 <__sflush_r+0x20>
 8006ae4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	dc02      	bgt.n	8006af0 <__sflush_r+0x20>
 8006aea:	2000      	movs	r0, #0
 8006aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006af0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006af2:	2e00      	cmp	r6, #0
 8006af4:	d0f9      	beq.n	8006aea <__sflush_r+0x1a>
 8006af6:	2300      	movs	r3, #0
 8006af8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006afc:	682f      	ldr	r7, [r5, #0]
 8006afe:	602b      	str	r3, [r5, #0]
 8006b00:	d032      	beq.n	8006b68 <__sflush_r+0x98>
 8006b02:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006b04:	89a3      	ldrh	r3, [r4, #12]
 8006b06:	075a      	lsls	r2, r3, #29
 8006b08:	d505      	bpl.n	8006b16 <__sflush_r+0x46>
 8006b0a:	6863      	ldr	r3, [r4, #4]
 8006b0c:	1ac0      	subs	r0, r0, r3
 8006b0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006b10:	b10b      	cbz	r3, 8006b16 <__sflush_r+0x46>
 8006b12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b14:	1ac0      	subs	r0, r0, r3
 8006b16:	2300      	movs	r3, #0
 8006b18:	4602      	mov	r2, r0
 8006b1a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b1c:	4628      	mov	r0, r5
 8006b1e:	6a21      	ldr	r1, [r4, #32]
 8006b20:	47b0      	blx	r6
 8006b22:	1c43      	adds	r3, r0, #1
 8006b24:	89a3      	ldrh	r3, [r4, #12]
 8006b26:	d106      	bne.n	8006b36 <__sflush_r+0x66>
 8006b28:	6829      	ldr	r1, [r5, #0]
 8006b2a:	291d      	cmp	r1, #29
 8006b2c:	d82c      	bhi.n	8006b88 <__sflush_r+0xb8>
 8006b2e:	4a2a      	ldr	r2, [pc, #168]	; (8006bd8 <__sflush_r+0x108>)
 8006b30:	40ca      	lsrs	r2, r1
 8006b32:	07d6      	lsls	r6, r2, #31
 8006b34:	d528      	bpl.n	8006b88 <__sflush_r+0xb8>
 8006b36:	2200      	movs	r2, #0
 8006b38:	6062      	str	r2, [r4, #4]
 8006b3a:	6922      	ldr	r2, [r4, #16]
 8006b3c:	04d9      	lsls	r1, r3, #19
 8006b3e:	6022      	str	r2, [r4, #0]
 8006b40:	d504      	bpl.n	8006b4c <__sflush_r+0x7c>
 8006b42:	1c42      	adds	r2, r0, #1
 8006b44:	d101      	bne.n	8006b4a <__sflush_r+0x7a>
 8006b46:	682b      	ldr	r3, [r5, #0]
 8006b48:	b903      	cbnz	r3, 8006b4c <__sflush_r+0x7c>
 8006b4a:	6560      	str	r0, [r4, #84]	; 0x54
 8006b4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b4e:	602f      	str	r7, [r5, #0]
 8006b50:	2900      	cmp	r1, #0
 8006b52:	d0ca      	beq.n	8006aea <__sflush_r+0x1a>
 8006b54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b58:	4299      	cmp	r1, r3
 8006b5a:	d002      	beq.n	8006b62 <__sflush_r+0x92>
 8006b5c:	4628      	mov	r0, r5
 8006b5e:	f7ff fae9 	bl	8006134 <_free_r>
 8006b62:	2000      	movs	r0, #0
 8006b64:	6360      	str	r0, [r4, #52]	; 0x34
 8006b66:	e7c1      	b.n	8006aec <__sflush_r+0x1c>
 8006b68:	6a21      	ldr	r1, [r4, #32]
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	4628      	mov	r0, r5
 8006b6e:	47b0      	blx	r6
 8006b70:	1c41      	adds	r1, r0, #1
 8006b72:	d1c7      	bne.n	8006b04 <__sflush_r+0x34>
 8006b74:	682b      	ldr	r3, [r5, #0]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d0c4      	beq.n	8006b04 <__sflush_r+0x34>
 8006b7a:	2b1d      	cmp	r3, #29
 8006b7c:	d001      	beq.n	8006b82 <__sflush_r+0xb2>
 8006b7e:	2b16      	cmp	r3, #22
 8006b80:	d101      	bne.n	8006b86 <__sflush_r+0xb6>
 8006b82:	602f      	str	r7, [r5, #0]
 8006b84:	e7b1      	b.n	8006aea <__sflush_r+0x1a>
 8006b86:	89a3      	ldrh	r3, [r4, #12]
 8006b88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b8c:	81a3      	strh	r3, [r4, #12]
 8006b8e:	e7ad      	b.n	8006aec <__sflush_r+0x1c>
 8006b90:	690f      	ldr	r7, [r1, #16]
 8006b92:	2f00      	cmp	r7, #0
 8006b94:	d0a9      	beq.n	8006aea <__sflush_r+0x1a>
 8006b96:	0793      	lsls	r3, r2, #30
 8006b98:	bf18      	it	ne
 8006b9a:	2300      	movne	r3, #0
 8006b9c:	680e      	ldr	r6, [r1, #0]
 8006b9e:	bf08      	it	eq
 8006ba0:	694b      	ldreq	r3, [r1, #20]
 8006ba2:	eba6 0807 	sub.w	r8, r6, r7
 8006ba6:	600f      	str	r7, [r1, #0]
 8006ba8:	608b      	str	r3, [r1, #8]
 8006baa:	f1b8 0f00 	cmp.w	r8, #0
 8006bae:	dd9c      	ble.n	8006aea <__sflush_r+0x1a>
 8006bb0:	4643      	mov	r3, r8
 8006bb2:	463a      	mov	r2, r7
 8006bb4:	4628      	mov	r0, r5
 8006bb6:	6a21      	ldr	r1, [r4, #32]
 8006bb8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006bba:	47b0      	blx	r6
 8006bbc:	2800      	cmp	r0, #0
 8006bbe:	dc06      	bgt.n	8006bce <__sflush_r+0xfe>
 8006bc0:	89a3      	ldrh	r3, [r4, #12]
 8006bc2:	f04f 30ff 	mov.w	r0, #4294967295
 8006bc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bca:	81a3      	strh	r3, [r4, #12]
 8006bcc:	e78e      	b.n	8006aec <__sflush_r+0x1c>
 8006bce:	4407      	add	r7, r0
 8006bd0:	eba8 0800 	sub.w	r8, r8, r0
 8006bd4:	e7e9      	b.n	8006baa <__sflush_r+0xda>
 8006bd6:	bf00      	nop
 8006bd8:	20400001 	.word	0x20400001

08006bdc <_fflush_r>:
 8006bdc:	b538      	push	{r3, r4, r5, lr}
 8006bde:	690b      	ldr	r3, [r1, #16]
 8006be0:	4605      	mov	r5, r0
 8006be2:	460c      	mov	r4, r1
 8006be4:	b913      	cbnz	r3, 8006bec <_fflush_r+0x10>
 8006be6:	2500      	movs	r5, #0
 8006be8:	4628      	mov	r0, r5
 8006bea:	bd38      	pop	{r3, r4, r5, pc}
 8006bec:	b118      	cbz	r0, 8006bf6 <_fflush_r+0x1a>
 8006bee:	6983      	ldr	r3, [r0, #24]
 8006bf0:	b90b      	cbnz	r3, 8006bf6 <_fflush_r+0x1a>
 8006bf2:	f000 f887 	bl	8006d04 <__sinit>
 8006bf6:	4b14      	ldr	r3, [pc, #80]	; (8006c48 <_fflush_r+0x6c>)
 8006bf8:	429c      	cmp	r4, r3
 8006bfa:	d11b      	bne.n	8006c34 <_fflush_r+0x58>
 8006bfc:	686c      	ldr	r4, [r5, #4]
 8006bfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d0ef      	beq.n	8006be6 <_fflush_r+0xa>
 8006c06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006c08:	07d0      	lsls	r0, r2, #31
 8006c0a:	d404      	bmi.n	8006c16 <_fflush_r+0x3a>
 8006c0c:	0599      	lsls	r1, r3, #22
 8006c0e:	d402      	bmi.n	8006c16 <_fflush_r+0x3a>
 8006c10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c12:	f000 f915 	bl	8006e40 <__retarget_lock_acquire_recursive>
 8006c16:	4628      	mov	r0, r5
 8006c18:	4621      	mov	r1, r4
 8006c1a:	f7ff ff59 	bl	8006ad0 <__sflush_r>
 8006c1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c20:	4605      	mov	r5, r0
 8006c22:	07da      	lsls	r2, r3, #31
 8006c24:	d4e0      	bmi.n	8006be8 <_fflush_r+0xc>
 8006c26:	89a3      	ldrh	r3, [r4, #12]
 8006c28:	059b      	lsls	r3, r3, #22
 8006c2a:	d4dd      	bmi.n	8006be8 <_fflush_r+0xc>
 8006c2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c2e:	f000 f908 	bl	8006e42 <__retarget_lock_release_recursive>
 8006c32:	e7d9      	b.n	8006be8 <_fflush_r+0xc>
 8006c34:	4b05      	ldr	r3, [pc, #20]	; (8006c4c <_fflush_r+0x70>)
 8006c36:	429c      	cmp	r4, r3
 8006c38:	d101      	bne.n	8006c3e <_fflush_r+0x62>
 8006c3a:	68ac      	ldr	r4, [r5, #8]
 8006c3c:	e7df      	b.n	8006bfe <_fflush_r+0x22>
 8006c3e:	4b04      	ldr	r3, [pc, #16]	; (8006c50 <_fflush_r+0x74>)
 8006c40:	429c      	cmp	r4, r3
 8006c42:	bf08      	it	eq
 8006c44:	68ec      	ldreq	r4, [r5, #12]
 8006c46:	e7da      	b.n	8006bfe <_fflush_r+0x22>
 8006c48:	0800756c 	.word	0x0800756c
 8006c4c:	0800758c 	.word	0x0800758c
 8006c50:	0800754c 	.word	0x0800754c

08006c54 <std>:
 8006c54:	2300      	movs	r3, #0
 8006c56:	b510      	push	{r4, lr}
 8006c58:	4604      	mov	r4, r0
 8006c5a:	e9c0 3300 	strd	r3, r3, [r0]
 8006c5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c62:	6083      	str	r3, [r0, #8]
 8006c64:	8181      	strh	r1, [r0, #12]
 8006c66:	6643      	str	r3, [r0, #100]	; 0x64
 8006c68:	81c2      	strh	r2, [r0, #14]
 8006c6a:	6183      	str	r3, [r0, #24]
 8006c6c:	4619      	mov	r1, r3
 8006c6e:	2208      	movs	r2, #8
 8006c70:	305c      	adds	r0, #92	; 0x5c
 8006c72:	f7fd fba3 	bl	80043bc <memset>
 8006c76:	4b05      	ldr	r3, [pc, #20]	; (8006c8c <std+0x38>)
 8006c78:	6224      	str	r4, [r4, #32]
 8006c7a:	6263      	str	r3, [r4, #36]	; 0x24
 8006c7c:	4b04      	ldr	r3, [pc, #16]	; (8006c90 <std+0x3c>)
 8006c7e:	62a3      	str	r3, [r4, #40]	; 0x28
 8006c80:	4b04      	ldr	r3, [pc, #16]	; (8006c94 <std+0x40>)
 8006c82:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006c84:	4b04      	ldr	r3, [pc, #16]	; (8006c98 <std+0x44>)
 8006c86:	6323      	str	r3, [r4, #48]	; 0x30
 8006c88:	bd10      	pop	{r4, pc}
 8006c8a:	bf00      	nop
 8006c8c:	08006fa5 	.word	0x08006fa5
 8006c90:	08006fc7 	.word	0x08006fc7
 8006c94:	08006fff 	.word	0x08006fff
 8006c98:	08007023 	.word	0x08007023

08006c9c <_cleanup_r>:
 8006c9c:	4901      	ldr	r1, [pc, #4]	; (8006ca4 <_cleanup_r+0x8>)
 8006c9e:	f000 b8af 	b.w	8006e00 <_fwalk_reent>
 8006ca2:	bf00      	nop
 8006ca4:	08006bdd 	.word	0x08006bdd

08006ca8 <__sfmoreglue>:
 8006ca8:	b570      	push	{r4, r5, r6, lr}
 8006caa:	2568      	movs	r5, #104	; 0x68
 8006cac:	1e4a      	subs	r2, r1, #1
 8006cae:	4355      	muls	r5, r2
 8006cb0:	460e      	mov	r6, r1
 8006cb2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006cb6:	f7ff fa89 	bl	80061cc <_malloc_r>
 8006cba:	4604      	mov	r4, r0
 8006cbc:	b140      	cbz	r0, 8006cd0 <__sfmoreglue+0x28>
 8006cbe:	2100      	movs	r1, #0
 8006cc0:	e9c0 1600 	strd	r1, r6, [r0]
 8006cc4:	300c      	adds	r0, #12
 8006cc6:	60a0      	str	r0, [r4, #8]
 8006cc8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006ccc:	f7fd fb76 	bl	80043bc <memset>
 8006cd0:	4620      	mov	r0, r4
 8006cd2:	bd70      	pop	{r4, r5, r6, pc}

08006cd4 <__sfp_lock_acquire>:
 8006cd4:	4801      	ldr	r0, [pc, #4]	; (8006cdc <__sfp_lock_acquire+0x8>)
 8006cd6:	f000 b8b3 	b.w	8006e40 <__retarget_lock_acquire_recursive>
 8006cda:	bf00      	nop
 8006cdc:	2000032c 	.word	0x2000032c

08006ce0 <__sfp_lock_release>:
 8006ce0:	4801      	ldr	r0, [pc, #4]	; (8006ce8 <__sfp_lock_release+0x8>)
 8006ce2:	f000 b8ae 	b.w	8006e42 <__retarget_lock_release_recursive>
 8006ce6:	bf00      	nop
 8006ce8:	2000032c 	.word	0x2000032c

08006cec <__sinit_lock_acquire>:
 8006cec:	4801      	ldr	r0, [pc, #4]	; (8006cf4 <__sinit_lock_acquire+0x8>)
 8006cee:	f000 b8a7 	b.w	8006e40 <__retarget_lock_acquire_recursive>
 8006cf2:	bf00      	nop
 8006cf4:	20000327 	.word	0x20000327

08006cf8 <__sinit_lock_release>:
 8006cf8:	4801      	ldr	r0, [pc, #4]	; (8006d00 <__sinit_lock_release+0x8>)
 8006cfa:	f000 b8a2 	b.w	8006e42 <__retarget_lock_release_recursive>
 8006cfe:	bf00      	nop
 8006d00:	20000327 	.word	0x20000327

08006d04 <__sinit>:
 8006d04:	b510      	push	{r4, lr}
 8006d06:	4604      	mov	r4, r0
 8006d08:	f7ff fff0 	bl	8006cec <__sinit_lock_acquire>
 8006d0c:	69a3      	ldr	r3, [r4, #24]
 8006d0e:	b11b      	cbz	r3, 8006d18 <__sinit+0x14>
 8006d10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d14:	f7ff bff0 	b.w	8006cf8 <__sinit_lock_release>
 8006d18:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006d1c:	6523      	str	r3, [r4, #80]	; 0x50
 8006d1e:	4b13      	ldr	r3, [pc, #76]	; (8006d6c <__sinit+0x68>)
 8006d20:	4a13      	ldr	r2, [pc, #76]	; (8006d70 <__sinit+0x6c>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	62a2      	str	r2, [r4, #40]	; 0x28
 8006d26:	42a3      	cmp	r3, r4
 8006d28:	bf08      	it	eq
 8006d2a:	2301      	moveq	r3, #1
 8006d2c:	4620      	mov	r0, r4
 8006d2e:	bf08      	it	eq
 8006d30:	61a3      	streq	r3, [r4, #24]
 8006d32:	f000 f81f 	bl	8006d74 <__sfp>
 8006d36:	6060      	str	r0, [r4, #4]
 8006d38:	4620      	mov	r0, r4
 8006d3a:	f000 f81b 	bl	8006d74 <__sfp>
 8006d3e:	60a0      	str	r0, [r4, #8]
 8006d40:	4620      	mov	r0, r4
 8006d42:	f000 f817 	bl	8006d74 <__sfp>
 8006d46:	2200      	movs	r2, #0
 8006d48:	2104      	movs	r1, #4
 8006d4a:	60e0      	str	r0, [r4, #12]
 8006d4c:	6860      	ldr	r0, [r4, #4]
 8006d4e:	f7ff ff81 	bl	8006c54 <std>
 8006d52:	2201      	movs	r2, #1
 8006d54:	2109      	movs	r1, #9
 8006d56:	68a0      	ldr	r0, [r4, #8]
 8006d58:	f7ff ff7c 	bl	8006c54 <std>
 8006d5c:	2202      	movs	r2, #2
 8006d5e:	2112      	movs	r1, #18
 8006d60:	68e0      	ldr	r0, [r4, #12]
 8006d62:	f7ff ff77 	bl	8006c54 <std>
 8006d66:	2301      	movs	r3, #1
 8006d68:	61a3      	str	r3, [r4, #24]
 8006d6a:	e7d1      	b.n	8006d10 <__sinit+0xc>
 8006d6c:	080071c8 	.word	0x080071c8
 8006d70:	08006c9d 	.word	0x08006c9d

08006d74 <__sfp>:
 8006d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d76:	4607      	mov	r7, r0
 8006d78:	f7ff ffac 	bl	8006cd4 <__sfp_lock_acquire>
 8006d7c:	4b1e      	ldr	r3, [pc, #120]	; (8006df8 <__sfp+0x84>)
 8006d7e:	681e      	ldr	r6, [r3, #0]
 8006d80:	69b3      	ldr	r3, [r6, #24]
 8006d82:	b913      	cbnz	r3, 8006d8a <__sfp+0x16>
 8006d84:	4630      	mov	r0, r6
 8006d86:	f7ff ffbd 	bl	8006d04 <__sinit>
 8006d8a:	3648      	adds	r6, #72	; 0x48
 8006d8c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006d90:	3b01      	subs	r3, #1
 8006d92:	d503      	bpl.n	8006d9c <__sfp+0x28>
 8006d94:	6833      	ldr	r3, [r6, #0]
 8006d96:	b30b      	cbz	r3, 8006ddc <__sfp+0x68>
 8006d98:	6836      	ldr	r6, [r6, #0]
 8006d9a:	e7f7      	b.n	8006d8c <__sfp+0x18>
 8006d9c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006da0:	b9d5      	cbnz	r5, 8006dd8 <__sfp+0x64>
 8006da2:	4b16      	ldr	r3, [pc, #88]	; (8006dfc <__sfp+0x88>)
 8006da4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006da8:	60e3      	str	r3, [r4, #12]
 8006daa:	6665      	str	r5, [r4, #100]	; 0x64
 8006dac:	f000 f847 	bl	8006e3e <__retarget_lock_init_recursive>
 8006db0:	f7ff ff96 	bl	8006ce0 <__sfp_lock_release>
 8006db4:	2208      	movs	r2, #8
 8006db6:	4629      	mov	r1, r5
 8006db8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006dbc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006dc0:	6025      	str	r5, [r4, #0]
 8006dc2:	61a5      	str	r5, [r4, #24]
 8006dc4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006dc8:	f7fd faf8 	bl	80043bc <memset>
 8006dcc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006dd0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006dd4:	4620      	mov	r0, r4
 8006dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006dd8:	3468      	adds	r4, #104	; 0x68
 8006dda:	e7d9      	b.n	8006d90 <__sfp+0x1c>
 8006ddc:	2104      	movs	r1, #4
 8006dde:	4638      	mov	r0, r7
 8006de0:	f7ff ff62 	bl	8006ca8 <__sfmoreglue>
 8006de4:	4604      	mov	r4, r0
 8006de6:	6030      	str	r0, [r6, #0]
 8006de8:	2800      	cmp	r0, #0
 8006dea:	d1d5      	bne.n	8006d98 <__sfp+0x24>
 8006dec:	f7ff ff78 	bl	8006ce0 <__sfp_lock_release>
 8006df0:	230c      	movs	r3, #12
 8006df2:	603b      	str	r3, [r7, #0]
 8006df4:	e7ee      	b.n	8006dd4 <__sfp+0x60>
 8006df6:	bf00      	nop
 8006df8:	080071c8 	.word	0x080071c8
 8006dfc:	ffff0001 	.word	0xffff0001

08006e00 <_fwalk_reent>:
 8006e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e04:	4606      	mov	r6, r0
 8006e06:	4688      	mov	r8, r1
 8006e08:	2700      	movs	r7, #0
 8006e0a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006e0e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e12:	f1b9 0901 	subs.w	r9, r9, #1
 8006e16:	d505      	bpl.n	8006e24 <_fwalk_reent+0x24>
 8006e18:	6824      	ldr	r4, [r4, #0]
 8006e1a:	2c00      	cmp	r4, #0
 8006e1c:	d1f7      	bne.n	8006e0e <_fwalk_reent+0xe>
 8006e1e:	4638      	mov	r0, r7
 8006e20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e24:	89ab      	ldrh	r3, [r5, #12]
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d907      	bls.n	8006e3a <_fwalk_reent+0x3a>
 8006e2a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e2e:	3301      	adds	r3, #1
 8006e30:	d003      	beq.n	8006e3a <_fwalk_reent+0x3a>
 8006e32:	4629      	mov	r1, r5
 8006e34:	4630      	mov	r0, r6
 8006e36:	47c0      	blx	r8
 8006e38:	4307      	orrs	r7, r0
 8006e3a:	3568      	adds	r5, #104	; 0x68
 8006e3c:	e7e9      	b.n	8006e12 <_fwalk_reent+0x12>

08006e3e <__retarget_lock_init_recursive>:
 8006e3e:	4770      	bx	lr

08006e40 <__retarget_lock_acquire_recursive>:
 8006e40:	4770      	bx	lr

08006e42 <__retarget_lock_release_recursive>:
 8006e42:	4770      	bx	lr

08006e44 <__swhatbuf_r>:
 8006e44:	b570      	push	{r4, r5, r6, lr}
 8006e46:	460e      	mov	r6, r1
 8006e48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e4c:	4614      	mov	r4, r2
 8006e4e:	2900      	cmp	r1, #0
 8006e50:	461d      	mov	r5, r3
 8006e52:	b096      	sub	sp, #88	; 0x58
 8006e54:	da07      	bge.n	8006e66 <__swhatbuf_r+0x22>
 8006e56:	2300      	movs	r3, #0
 8006e58:	602b      	str	r3, [r5, #0]
 8006e5a:	89b3      	ldrh	r3, [r6, #12]
 8006e5c:	061a      	lsls	r2, r3, #24
 8006e5e:	d410      	bmi.n	8006e82 <__swhatbuf_r+0x3e>
 8006e60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e64:	e00e      	b.n	8006e84 <__swhatbuf_r+0x40>
 8006e66:	466a      	mov	r2, sp
 8006e68:	f000 f902 	bl	8007070 <_fstat_r>
 8006e6c:	2800      	cmp	r0, #0
 8006e6e:	dbf2      	blt.n	8006e56 <__swhatbuf_r+0x12>
 8006e70:	9a01      	ldr	r2, [sp, #4]
 8006e72:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006e76:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006e7a:	425a      	negs	r2, r3
 8006e7c:	415a      	adcs	r2, r3
 8006e7e:	602a      	str	r2, [r5, #0]
 8006e80:	e7ee      	b.n	8006e60 <__swhatbuf_r+0x1c>
 8006e82:	2340      	movs	r3, #64	; 0x40
 8006e84:	2000      	movs	r0, #0
 8006e86:	6023      	str	r3, [r4, #0]
 8006e88:	b016      	add	sp, #88	; 0x58
 8006e8a:	bd70      	pop	{r4, r5, r6, pc}

08006e8c <__smakebuf_r>:
 8006e8c:	898b      	ldrh	r3, [r1, #12]
 8006e8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006e90:	079d      	lsls	r5, r3, #30
 8006e92:	4606      	mov	r6, r0
 8006e94:	460c      	mov	r4, r1
 8006e96:	d507      	bpl.n	8006ea8 <__smakebuf_r+0x1c>
 8006e98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006e9c:	6023      	str	r3, [r4, #0]
 8006e9e:	6123      	str	r3, [r4, #16]
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	6163      	str	r3, [r4, #20]
 8006ea4:	b002      	add	sp, #8
 8006ea6:	bd70      	pop	{r4, r5, r6, pc}
 8006ea8:	466a      	mov	r2, sp
 8006eaa:	ab01      	add	r3, sp, #4
 8006eac:	f7ff ffca 	bl	8006e44 <__swhatbuf_r>
 8006eb0:	9900      	ldr	r1, [sp, #0]
 8006eb2:	4605      	mov	r5, r0
 8006eb4:	4630      	mov	r0, r6
 8006eb6:	f7ff f989 	bl	80061cc <_malloc_r>
 8006eba:	b948      	cbnz	r0, 8006ed0 <__smakebuf_r+0x44>
 8006ebc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ec0:	059a      	lsls	r2, r3, #22
 8006ec2:	d4ef      	bmi.n	8006ea4 <__smakebuf_r+0x18>
 8006ec4:	f023 0303 	bic.w	r3, r3, #3
 8006ec8:	f043 0302 	orr.w	r3, r3, #2
 8006ecc:	81a3      	strh	r3, [r4, #12]
 8006ece:	e7e3      	b.n	8006e98 <__smakebuf_r+0xc>
 8006ed0:	4b0d      	ldr	r3, [pc, #52]	; (8006f08 <__smakebuf_r+0x7c>)
 8006ed2:	62b3      	str	r3, [r6, #40]	; 0x28
 8006ed4:	89a3      	ldrh	r3, [r4, #12]
 8006ed6:	6020      	str	r0, [r4, #0]
 8006ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006edc:	81a3      	strh	r3, [r4, #12]
 8006ede:	9b00      	ldr	r3, [sp, #0]
 8006ee0:	6120      	str	r0, [r4, #16]
 8006ee2:	6163      	str	r3, [r4, #20]
 8006ee4:	9b01      	ldr	r3, [sp, #4]
 8006ee6:	b15b      	cbz	r3, 8006f00 <__smakebuf_r+0x74>
 8006ee8:	4630      	mov	r0, r6
 8006eea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006eee:	f000 f8d1 	bl	8007094 <_isatty_r>
 8006ef2:	b128      	cbz	r0, 8006f00 <__smakebuf_r+0x74>
 8006ef4:	89a3      	ldrh	r3, [r4, #12]
 8006ef6:	f023 0303 	bic.w	r3, r3, #3
 8006efa:	f043 0301 	orr.w	r3, r3, #1
 8006efe:	81a3      	strh	r3, [r4, #12]
 8006f00:	89a0      	ldrh	r0, [r4, #12]
 8006f02:	4305      	orrs	r5, r0
 8006f04:	81a5      	strh	r5, [r4, #12]
 8006f06:	e7cd      	b.n	8006ea4 <__smakebuf_r+0x18>
 8006f08:	08006c9d 	.word	0x08006c9d

08006f0c <_malloc_usable_size_r>:
 8006f0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f10:	1f18      	subs	r0, r3, #4
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	bfbc      	itt	lt
 8006f16:	580b      	ldrlt	r3, [r1, r0]
 8006f18:	18c0      	addlt	r0, r0, r3
 8006f1a:	4770      	bx	lr

08006f1c <_raise_r>:
 8006f1c:	291f      	cmp	r1, #31
 8006f1e:	b538      	push	{r3, r4, r5, lr}
 8006f20:	4604      	mov	r4, r0
 8006f22:	460d      	mov	r5, r1
 8006f24:	d904      	bls.n	8006f30 <_raise_r+0x14>
 8006f26:	2316      	movs	r3, #22
 8006f28:	6003      	str	r3, [r0, #0]
 8006f2a:	f04f 30ff 	mov.w	r0, #4294967295
 8006f2e:	bd38      	pop	{r3, r4, r5, pc}
 8006f30:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006f32:	b112      	cbz	r2, 8006f3a <_raise_r+0x1e>
 8006f34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006f38:	b94b      	cbnz	r3, 8006f4e <_raise_r+0x32>
 8006f3a:	4620      	mov	r0, r4
 8006f3c:	f000 f830 	bl	8006fa0 <_getpid_r>
 8006f40:	462a      	mov	r2, r5
 8006f42:	4601      	mov	r1, r0
 8006f44:	4620      	mov	r0, r4
 8006f46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f4a:	f000 b817 	b.w	8006f7c <_kill_r>
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	d00a      	beq.n	8006f68 <_raise_r+0x4c>
 8006f52:	1c59      	adds	r1, r3, #1
 8006f54:	d103      	bne.n	8006f5e <_raise_r+0x42>
 8006f56:	2316      	movs	r3, #22
 8006f58:	6003      	str	r3, [r0, #0]
 8006f5a:	2001      	movs	r0, #1
 8006f5c:	e7e7      	b.n	8006f2e <_raise_r+0x12>
 8006f5e:	2400      	movs	r4, #0
 8006f60:	4628      	mov	r0, r5
 8006f62:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006f66:	4798      	blx	r3
 8006f68:	2000      	movs	r0, #0
 8006f6a:	e7e0      	b.n	8006f2e <_raise_r+0x12>

08006f6c <raise>:
 8006f6c:	4b02      	ldr	r3, [pc, #8]	; (8006f78 <raise+0xc>)
 8006f6e:	4601      	mov	r1, r0
 8006f70:	6818      	ldr	r0, [r3, #0]
 8006f72:	f7ff bfd3 	b.w	8006f1c <_raise_r>
 8006f76:	bf00      	nop
 8006f78:	2000000c 	.word	0x2000000c

08006f7c <_kill_r>:
 8006f7c:	b538      	push	{r3, r4, r5, lr}
 8006f7e:	2300      	movs	r3, #0
 8006f80:	4d06      	ldr	r5, [pc, #24]	; (8006f9c <_kill_r+0x20>)
 8006f82:	4604      	mov	r4, r0
 8006f84:	4608      	mov	r0, r1
 8006f86:	4611      	mov	r1, r2
 8006f88:	602b      	str	r3, [r5, #0]
 8006f8a:	f7fa fc92 	bl	80018b2 <_kill>
 8006f8e:	1c43      	adds	r3, r0, #1
 8006f90:	d102      	bne.n	8006f98 <_kill_r+0x1c>
 8006f92:	682b      	ldr	r3, [r5, #0]
 8006f94:	b103      	cbz	r3, 8006f98 <_kill_r+0x1c>
 8006f96:	6023      	str	r3, [r4, #0]
 8006f98:	bd38      	pop	{r3, r4, r5, pc}
 8006f9a:	bf00      	nop
 8006f9c:	20000320 	.word	0x20000320

08006fa0 <_getpid_r>:
 8006fa0:	f7fa bc80 	b.w	80018a4 <_getpid>

08006fa4 <__sread>:
 8006fa4:	b510      	push	{r4, lr}
 8006fa6:	460c      	mov	r4, r1
 8006fa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fac:	f000 f894 	bl	80070d8 <_read_r>
 8006fb0:	2800      	cmp	r0, #0
 8006fb2:	bfab      	itete	ge
 8006fb4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006fb6:	89a3      	ldrhlt	r3, [r4, #12]
 8006fb8:	181b      	addge	r3, r3, r0
 8006fba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006fbe:	bfac      	ite	ge
 8006fc0:	6563      	strge	r3, [r4, #84]	; 0x54
 8006fc2:	81a3      	strhlt	r3, [r4, #12]
 8006fc4:	bd10      	pop	{r4, pc}

08006fc6 <__swrite>:
 8006fc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fca:	461f      	mov	r7, r3
 8006fcc:	898b      	ldrh	r3, [r1, #12]
 8006fce:	4605      	mov	r5, r0
 8006fd0:	05db      	lsls	r3, r3, #23
 8006fd2:	460c      	mov	r4, r1
 8006fd4:	4616      	mov	r6, r2
 8006fd6:	d505      	bpl.n	8006fe4 <__swrite+0x1e>
 8006fd8:	2302      	movs	r3, #2
 8006fda:	2200      	movs	r2, #0
 8006fdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fe0:	f000 f868 	bl	80070b4 <_lseek_r>
 8006fe4:	89a3      	ldrh	r3, [r4, #12]
 8006fe6:	4632      	mov	r2, r6
 8006fe8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006fec:	81a3      	strh	r3, [r4, #12]
 8006fee:	4628      	mov	r0, r5
 8006ff0:	463b      	mov	r3, r7
 8006ff2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ff6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ffa:	f000 b817 	b.w	800702c <_write_r>

08006ffe <__sseek>:
 8006ffe:	b510      	push	{r4, lr}
 8007000:	460c      	mov	r4, r1
 8007002:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007006:	f000 f855 	bl	80070b4 <_lseek_r>
 800700a:	1c43      	adds	r3, r0, #1
 800700c:	89a3      	ldrh	r3, [r4, #12]
 800700e:	bf15      	itete	ne
 8007010:	6560      	strne	r0, [r4, #84]	; 0x54
 8007012:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007016:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800701a:	81a3      	strheq	r3, [r4, #12]
 800701c:	bf18      	it	ne
 800701e:	81a3      	strhne	r3, [r4, #12]
 8007020:	bd10      	pop	{r4, pc}

08007022 <__sclose>:
 8007022:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007026:	f000 b813 	b.w	8007050 <_close_r>
	...

0800702c <_write_r>:
 800702c:	b538      	push	{r3, r4, r5, lr}
 800702e:	4604      	mov	r4, r0
 8007030:	4608      	mov	r0, r1
 8007032:	4611      	mov	r1, r2
 8007034:	2200      	movs	r2, #0
 8007036:	4d05      	ldr	r5, [pc, #20]	; (800704c <_write_r+0x20>)
 8007038:	602a      	str	r2, [r5, #0]
 800703a:	461a      	mov	r2, r3
 800703c:	f7fa fc70 	bl	8001920 <_write>
 8007040:	1c43      	adds	r3, r0, #1
 8007042:	d102      	bne.n	800704a <_write_r+0x1e>
 8007044:	682b      	ldr	r3, [r5, #0]
 8007046:	b103      	cbz	r3, 800704a <_write_r+0x1e>
 8007048:	6023      	str	r3, [r4, #0]
 800704a:	bd38      	pop	{r3, r4, r5, pc}
 800704c:	20000320 	.word	0x20000320

08007050 <_close_r>:
 8007050:	b538      	push	{r3, r4, r5, lr}
 8007052:	2300      	movs	r3, #0
 8007054:	4d05      	ldr	r5, [pc, #20]	; (800706c <_close_r+0x1c>)
 8007056:	4604      	mov	r4, r0
 8007058:	4608      	mov	r0, r1
 800705a:	602b      	str	r3, [r5, #0]
 800705c:	f7fa fc7c 	bl	8001958 <_close>
 8007060:	1c43      	adds	r3, r0, #1
 8007062:	d102      	bne.n	800706a <_close_r+0x1a>
 8007064:	682b      	ldr	r3, [r5, #0]
 8007066:	b103      	cbz	r3, 800706a <_close_r+0x1a>
 8007068:	6023      	str	r3, [r4, #0]
 800706a:	bd38      	pop	{r3, r4, r5, pc}
 800706c:	20000320 	.word	0x20000320

08007070 <_fstat_r>:
 8007070:	b538      	push	{r3, r4, r5, lr}
 8007072:	2300      	movs	r3, #0
 8007074:	4d06      	ldr	r5, [pc, #24]	; (8007090 <_fstat_r+0x20>)
 8007076:	4604      	mov	r4, r0
 8007078:	4608      	mov	r0, r1
 800707a:	4611      	mov	r1, r2
 800707c:	602b      	str	r3, [r5, #0]
 800707e:	f7fa fc76 	bl	800196e <_fstat>
 8007082:	1c43      	adds	r3, r0, #1
 8007084:	d102      	bne.n	800708c <_fstat_r+0x1c>
 8007086:	682b      	ldr	r3, [r5, #0]
 8007088:	b103      	cbz	r3, 800708c <_fstat_r+0x1c>
 800708a:	6023      	str	r3, [r4, #0]
 800708c:	bd38      	pop	{r3, r4, r5, pc}
 800708e:	bf00      	nop
 8007090:	20000320 	.word	0x20000320

08007094 <_isatty_r>:
 8007094:	b538      	push	{r3, r4, r5, lr}
 8007096:	2300      	movs	r3, #0
 8007098:	4d05      	ldr	r5, [pc, #20]	; (80070b0 <_isatty_r+0x1c>)
 800709a:	4604      	mov	r4, r0
 800709c:	4608      	mov	r0, r1
 800709e:	602b      	str	r3, [r5, #0]
 80070a0:	f7fa fc74 	bl	800198c <_isatty>
 80070a4:	1c43      	adds	r3, r0, #1
 80070a6:	d102      	bne.n	80070ae <_isatty_r+0x1a>
 80070a8:	682b      	ldr	r3, [r5, #0]
 80070aa:	b103      	cbz	r3, 80070ae <_isatty_r+0x1a>
 80070ac:	6023      	str	r3, [r4, #0]
 80070ae:	bd38      	pop	{r3, r4, r5, pc}
 80070b0:	20000320 	.word	0x20000320

080070b4 <_lseek_r>:
 80070b4:	b538      	push	{r3, r4, r5, lr}
 80070b6:	4604      	mov	r4, r0
 80070b8:	4608      	mov	r0, r1
 80070ba:	4611      	mov	r1, r2
 80070bc:	2200      	movs	r2, #0
 80070be:	4d05      	ldr	r5, [pc, #20]	; (80070d4 <_lseek_r+0x20>)
 80070c0:	602a      	str	r2, [r5, #0]
 80070c2:	461a      	mov	r2, r3
 80070c4:	f7fa fc6c 	bl	80019a0 <_lseek>
 80070c8:	1c43      	adds	r3, r0, #1
 80070ca:	d102      	bne.n	80070d2 <_lseek_r+0x1e>
 80070cc:	682b      	ldr	r3, [r5, #0]
 80070ce:	b103      	cbz	r3, 80070d2 <_lseek_r+0x1e>
 80070d0:	6023      	str	r3, [r4, #0]
 80070d2:	bd38      	pop	{r3, r4, r5, pc}
 80070d4:	20000320 	.word	0x20000320

080070d8 <_read_r>:
 80070d8:	b538      	push	{r3, r4, r5, lr}
 80070da:	4604      	mov	r4, r0
 80070dc:	4608      	mov	r0, r1
 80070de:	4611      	mov	r1, r2
 80070e0:	2200      	movs	r2, #0
 80070e2:	4d05      	ldr	r5, [pc, #20]	; (80070f8 <_read_r+0x20>)
 80070e4:	602a      	str	r2, [r5, #0]
 80070e6:	461a      	mov	r2, r3
 80070e8:	f7fa fbfd 	bl	80018e6 <_read>
 80070ec:	1c43      	adds	r3, r0, #1
 80070ee:	d102      	bne.n	80070f6 <_read_r+0x1e>
 80070f0:	682b      	ldr	r3, [r5, #0]
 80070f2:	b103      	cbz	r3, 80070f6 <_read_r+0x1e>
 80070f4:	6023      	str	r3, [r4, #0]
 80070f6:	bd38      	pop	{r3, r4, r5, pc}
 80070f8:	20000320 	.word	0x20000320

080070fc <_init>:
 80070fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070fe:	bf00      	nop
 8007100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007102:	bc08      	pop	{r3}
 8007104:	469e      	mov	lr, r3
 8007106:	4770      	bx	lr

08007108 <_fini>:
 8007108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800710a:	bf00      	nop
 800710c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800710e:	bc08      	pop	{r3}
 8007110:	469e      	mov	lr, r3
 8007112:	4770      	bx	lr
