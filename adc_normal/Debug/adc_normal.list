
adc_normal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028a8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080029b4  080029b4  000129b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a20  08002a20  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08002a20  08002a20  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a20  08002a20  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a20  08002a20  00012a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a24  08002a24  00012a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08002a28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  20000088  08002ab0  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  08002ab0  0002010c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007f19  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a67  00000000  00000000  00027fca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000630  00000000  00000000  00029a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000558  00000000  00000000  0002a068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000177b5  00000000  00000000  0002a5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007eb7  00000000  00000000  00041d75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085821  00000000  00000000  00049c2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cf44d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a74  00000000  00000000  000cf4a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	0800299c 	.word	0x0800299c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	0800299c 	.word	0x0800299c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <Lcd_Init>:
 
 /**
 ** Initialization LCD 16x2
 **/
void Lcd_Init(void) 
{  
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
	    Lcd_configure();
 8000160:	f000 f854 	bl	800020c <Lcd_configure>
			lcd_write_command(0x33);
 8000164:	2033      	movs	r0, #51	; 0x33
 8000166:	f000 f8f9 	bl	800035c <lcd_write_command>
			lcd_write_command(0x32);
 800016a:	2032      	movs	r0, #50	; 0x32
 800016c:	f000 f8f6 	bl	800035c <lcd_write_command>
			lcd_write_command(FUNCTION_SET | OPT_N);				// 4-bit mode
 8000170:	2028      	movs	r0, #40	; 0x28
 8000172:	f000 f8f3 	bl	800035c <lcd_write_command>
	    lcd_write_command(CLEAR_DISPLAY);						          // Clear screen
 8000176:	2001      	movs	r0, #1
 8000178:	f000 f8f0 	bl	800035c <lcd_write_command>
	    lcd_write_command(DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 800017c:	200c      	movs	r0, #12
 800017e:	f000 f8ed 	bl	800035c <lcd_write_command>
    	lcd_write_command(ENTRY_MODE_SET | OPT_INC);			    // Increment cursor
 8000182:	2006      	movs	r0, #6
 8000184:	f000 f8ea 	bl	800035c <lcd_write_command>
}
 8000188:	bf00      	nop
 800018a:	bd80      	pop	{r7, pc}

0800018c <Lcd_write_string>:

/**
 * Write a string on the LCD
 */
void Lcd_write_string(char * string)
{
 800018c:	b590      	push	{r4, r7, lr}
 800018e:	b085      	sub	sp, #20
 8000190:	af00      	add	r7, sp, #0
 8000192:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < strlen(string); i++)
 8000194:	2300      	movs	r3, #0
 8000196:	73fb      	strb	r3, [r7, #15]
 8000198:	e009      	b.n	80001ae <Lcd_write_string+0x22>
	{
		lcd_write_data( string[i]);
 800019a:	7bfb      	ldrb	r3, [r7, #15]
 800019c:	687a      	ldr	r2, [r7, #4]
 800019e:	4413      	add	r3, r2
 80001a0:	781b      	ldrb	r3, [r3, #0]
 80001a2:	4618      	mov	r0, r3
 80001a4:	f000 f8fa 	bl	800039c <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 80001a8:	7bfb      	ldrb	r3, [r7, #15]
 80001aa:	3301      	adds	r3, #1
 80001ac:	73fb      	strb	r3, [r7, #15]
 80001ae:	7bfc      	ldrb	r4, [r7, #15]
 80001b0:	6878      	ldr	r0, [r7, #4]
 80001b2:	f7ff ffcb 	bl	800014c <strlen>
 80001b6:	4603      	mov	r3, r0
 80001b8:	429c      	cmp	r4, r3
 80001ba:	d3ee      	bcc.n	800019a <Lcd_write_string+0xe>
	}
}
 80001bc:	bf00      	nop
 80001be:	bf00      	nop
 80001c0:	3714      	adds	r7, #20
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bd90      	pop	{r4, r7, pc}

080001c6 <Lcd_gotoxy>:
/*****
 **go to x,y
 *****/

void Lcd_gotoxy( uint8_t x, uint8_t y)
{
 80001c6:	b580      	push	{r7, lr}
 80001c8:	b082      	sub	sp, #8
 80001ca:	af00      	add	r7, sp, #0
 80001cc:	4603      	mov	r3, r0
 80001ce:	460a      	mov	r2, r1
 80001d0:	71fb      	strb	r3, [r7, #7]
 80001d2:	4613      	mov	r3, r2
 80001d4:	71bb      	strb	r3, [r7, #6]
#if LINES == 1 
	lcdwrite_command(LCDSET_DDRAM_ADDRESS |
		(START_LINE_1 + x));
#elif LINES == 2
	if (y == 0)
 80001d6:	79bb      	ldrb	r3, [r7, #6]
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d107      	bne.n	80001ec <Lcd_gotoxy+0x26>
		lcd_write_command( SET_DDRAM_ADDRESS | (START_LINE_1 + x));
 80001dc:	79fb      	ldrb	r3, [r7, #7]
 80001de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80001e2:	b2db      	uxtb	r3, r3
 80001e4:	4618      	mov	r0, r3
 80001e6:	f000 f8b9 	bl	800035c <lcd_write_command>
	else
		lcd_write_command( SET_DDRAM_ADDRESS | (START_LINE_2 + x));
#endif
}
 80001ea:	e00a      	b.n	8000202 <Lcd_gotoxy+0x3c>
		lcd_write_command( SET_DDRAM_ADDRESS | (START_LINE_2 + x));
 80001ec:	79fb      	ldrb	r3, [r7, #7]
 80001ee:	3340      	adds	r3, #64	; 0x40
 80001f0:	b2db      	uxtb	r3, r3
 80001f2:	b25b      	sxtb	r3, r3
 80001f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80001f8:	b25b      	sxtb	r3, r3
 80001fa:	b2db      	uxtb	r3, r3
 80001fc:	4618      	mov	r0, r3
 80001fe:	f000 f8ad 	bl	800035c <lcd_write_command>
}
 8000202:	bf00      	nop
 8000204:	3708      	adds	r7, #8
 8000206:	46bd      	mov	sp, r7
 8000208:	bd80      	pop	{r7, pc}
	...

0800020c <Lcd_configure>:
* * *                                  Static function definition                                * * *
* * *                                           NO USE                                           * * *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

 void Lcd_configure(void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b088      	sub	sp, #32
 8000210:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000212:	f107 0310 	add.w	r3, r7, #16
 8000216:	2200      	movs	r2, #0
 8000218:	601a      	str	r2, [r3, #0]
 800021a:	605a      	str	r2, [r3, #4]
 800021c:	609a      	str	r2, [r3, #8]
 800021e:	60da      	str	r2, [r3, #12]
	// GPIO clock for control and data lines
	
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000220:	4b4b      	ldr	r3, [pc, #300]	; (8000350 <Lcd_configure+0x144>)
 8000222:	699b      	ldr	r3, [r3, #24]
 8000224:	4a4a      	ldr	r2, [pc, #296]	; (8000350 <Lcd_configure+0x144>)
 8000226:	f043 0304 	orr.w	r3, r3, #4
 800022a:	6193      	str	r3, [r2, #24]
 800022c:	4b48      	ldr	r3, [pc, #288]	; (8000350 <Lcd_configure+0x144>)
 800022e:	699b      	ldr	r3, [r3, #24]
 8000230:	f003 0304 	and.w	r3, r3, #4
 8000234:	60fb      	str	r3, [r7, #12]
 8000236:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000238:	4b45      	ldr	r3, [pc, #276]	; (8000350 <Lcd_configure+0x144>)
 800023a:	699b      	ldr	r3, [r3, #24]
 800023c:	4a44      	ldr	r2, [pc, #272]	; (8000350 <Lcd_configure+0x144>)
 800023e:	f043 0308 	orr.w	r3, r3, #8
 8000242:	6193      	str	r3, [r2, #24]
 8000244:	4b42      	ldr	r3, [pc, #264]	; (8000350 <Lcd_configure+0x144>)
 8000246:	699b      	ldr	r3, [r3, #24]
 8000248:	f003 0308 	and.w	r3, r3, #8
 800024c:	60bb      	str	r3, [r7, #8]
 800024e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000250:	4b3f      	ldr	r3, [pc, #252]	; (8000350 <Lcd_configure+0x144>)
 8000252:	699b      	ldr	r3, [r3, #24]
 8000254:	4a3e      	ldr	r2, [pc, #248]	; (8000350 <Lcd_configure+0x144>)
 8000256:	f043 0310 	orr.w	r3, r3, #16
 800025a:	6193      	str	r3, [r2, #24]
 800025c:	4b3c      	ldr	r3, [pc, #240]	; (8000350 <Lcd_configure+0x144>)
 800025e:	699b      	ldr	r3, [r3, #24]
 8000260:	f003 0310 	and.w	r3, r3, #16
 8000264:	607b      	str	r3, [r7, #4]
 8000266:	687b      	ldr	r3, [r7, #4]
	
	// Configure RS_PIN
	GPIO_InitStruct.Pin = RS_Pin;
 8000268:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800026c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800026e:	2301      	movs	r3, #1
 8000270:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000272:	2300      	movs	r3, #0
 8000274:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000276:	2303      	movs	r3, #3
 8000278:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(RS_GPIO_Port, &GPIO_InitStruct);
 800027a:	f107 0310 	add.w	r3, r7, #16
 800027e:	4619      	mov	r1, r3
 8000280:	4834      	ldr	r0, [pc, #208]	; (8000354 <Lcd_configure+0x148>)
 8000282:	f001 f8e5 	bl	8001450 <HAL_GPIO_Init>
	
		// Configure EN_PIN
	GPIO_InitStruct.Pin = EN_Pin;
 8000286:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800028a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800028c:	2301      	movs	r3, #1
 800028e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000290:	2300      	movs	r3, #0
 8000292:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000294:	2303      	movs	r3, #3
 8000296:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(EN_GPIO_Port, &GPIO_InitStruct);
 8000298:	f107 0310 	add.w	r3, r7, #16
 800029c:	4619      	mov	r1, r3
 800029e:	482d      	ldr	r0, [pc, #180]	; (8000354 <Lcd_configure+0x148>)
 80002a0:	f001 f8d6 	bl	8001450 <HAL_GPIO_Init>
	
	
	 //Configure RW_PIN
	
	GPIO_InitStruct.Pin = RW_Pin;
 80002a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002a8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002aa:	2301      	movs	r3, #1
 80002ac:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ae:	2300      	movs	r3, #0
 80002b0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002b2:	2303      	movs	r3, #3
 80002b4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(RW_GPIO_Port, &GPIO_InitStruct);
 80002b6:	f107 0310 	add.w	r3, r7, #16
 80002ba:	4619      	mov	r1, r3
 80002bc:	4825      	ldr	r0, [pc, #148]	; (8000354 <Lcd_configure+0x148>)
 80002be:	f001 f8c7 	bl	8001450 <HAL_GPIO_Init>
	
	HAL_GPIO_WritePin(RW_GPIO_Port,RW_Pin,GPIO_PIN_RESET);
 80002c2:	2200      	movs	r2, #0
 80002c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002c8:	4822      	ldr	r0, [pc, #136]	; (8000354 <Lcd_configure+0x148>)
 80002ca:	f001 fa45 	bl	8001758 <HAL_GPIO_WritePin>
 
 
	// Configure D4_PIN
	GPIO_InitStruct.Pin = D4_Pin;
 80002ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002d2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002d4:	2301      	movs	r3, #1
 80002d6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002d8:	2300      	movs	r3, #0
 80002da:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002dc:	2303      	movs	r3, #3
 80002de:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(D4_GPIO_Port, &GPIO_InitStruct);
 80002e0:	f107 0310 	add.w	r3, r7, #16
 80002e4:	4619      	mov	r1, r3
 80002e6:	481c      	ldr	r0, [pc, #112]	; (8000358 <Lcd_configure+0x14c>)
 80002e8:	f001 f8b2 	bl	8001450 <HAL_GPIO_Init>
	
	// Configure D5_PIN
	GPIO_InitStruct.Pin = D5_Pin;
 80002ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002f0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002f2:	2301      	movs	r3, #1
 80002f4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002f6:	2300      	movs	r3, #0
 80002f8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002fa:	2303      	movs	r3, #3
 80002fc:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(D5_GPIO_Port, &GPIO_InitStruct);
 80002fe:	f107 0310 	add.w	r3, r7, #16
 8000302:	4619      	mov	r1, r3
 8000304:	4814      	ldr	r0, [pc, #80]	; (8000358 <Lcd_configure+0x14c>)
 8000306:	f001 f8a3 	bl	8001450 <HAL_GPIO_Init>
	
	// Configure D6_PIN
	GPIO_InitStruct.Pin = D6_Pin;
 800030a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800030e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000310:	2301      	movs	r3, #1
 8000312:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000314:	2300      	movs	r3, #0
 8000316:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000318:	2303      	movs	r3, #3
 800031a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(D6_GPIO_Port, &GPIO_InitStruct);
 800031c:	f107 0310 	add.w	r3, r7, #16
 8000320:	4619      	mov	r1, r3
 8000322:	480d      	ldr	r0, [pc, #52]	; (8000358 <Lcd_configure+0x14c>)
 8000324:	f001 f894 	bl	8001450 <HAL_GPIO_Init>
	
	// Configure D7_PIN
	GPIO_InitStruct.Pin = D7_Pin;
 8000328:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800032c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800032e:	2301      	movs	r3, #1
 8000330:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000332:	2300      	movs	r3, #0
 8000334:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000336:	2303      	movs	r3, #3
 8000338:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(D7_GPIO_Port, &GPIO_InitStruct);
 800033a:	f107 0310 	add.w	r3, r7, #16
 800033e:	4619      	mov	r1, r3
 8000340:	4805      	ldr	r0, [pc, #20]	; (8000358 <Lcd_configure+0x14c>)
 8000342:	f001 f885 	bl	8001450 <HAL_GPIO_Init>
	
}
 8000346:	bf00      	nop
 8000348:	3720      	adds	r7, #32
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	40021000 	.word	0x40021000
 8000354:	40011000 	.word	0x40011000
 8000358:	40010c00 	.word	0x40010c00

0800035c <lcd_write_command>:


void lcd_write_command(uint8_t command)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b082      	sub	sp, #8
 8000360:	af00      	add	r7, sp, #0
 8000362:	4603      	mov	r3, r0
 8000364:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, LCD_COMMAND_REG);		// Write to command register
 8000366:	2200      	movs	r2, #0
 8000368:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800036c:	480a      	ldr	r0, [pc, #40]	; (8000398 <lcd_write_command+0x3c>)
 800036e:	f001 f9f3 	bl	8001758 <HAL_GPIO_WritePin>

		lcd_write((command >> 4), LCD_NIB);
 8000372:	79fb      	ldrb	r3, [r7, #7]
 8000374:	091b      	lsrs	r3, r3, #4
 8000376:	b2db      	uxtb	r3, r3
 8000378:	2104      	movs	r1, #4
 800037a:	4618      	mov	r0, r3
 800037c:	f000 f82e 	bl	80003dc <lcd_write>
		lcd_write(command & 0x0F, LCD_NIB);
 8000380:	79fb      	ldrb	r3, [r7, #7]
 8000382:	f003 030f 	and.w	r3, r3, #15
 8000386:	b2db      	uxtb	r3, r3
 8000388:	2104      	movs	r1, #4
 800038a:	4618      	mov	r0, r3
 800038c:	f000 f826 	bl	80003dc <lcd_write>
}
 8000390:	bf00      	nop
 8000392:	3708      	adds	r7, #8
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}
 8000398:	40011000 	.word	0x40011000

0800039c <lcd_write_data>:


void lcd_write_data( uint8_t data)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	4603      	mov	r3, r0
 80003a4:	71fb      	strb	r3, [r7, #7]
	  HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, LCD_DATA_REG);			// Write to data register
 80003a6:	2201      	movs	r2, #1
 80003a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003ac:	480a      	ldr	r0, [pc, #40]	; (80003d8 <lcd_write_data+0x3c>)
 80003ae:	f001 f9d3 	bl	8001758 <HAL_GPIO_WritePin>
		
	  lcd_write(data >> 4, LCD_NIB);
 80003b2:	79fb      	ldrb	r3, [r7, #7]
 80003b4:	091b      	lsrs	r3, r3, #4
 80003b6:	b2db      	uxtb	r3, r3
 80003b8:	2104      	movs	r1, #4
 80003ba:	4618      	mov	r0, r3
 80003bc:	f000 f80e 	bl	80003dc <lcd_write>
		lcd_write(data & 0x0F, LCD_NIB);
 80003c0:	79fb      	ldrb	r3, [r7, #7]
 80003c2:	f003 030f 	and.w	r3, r3, #15
 80003c6:	b2db      	uxtb	r3, r3
 80003c8:	2104      	movs	r1, #4
 80003ca:	4618      	mov	r0, r3
 80003cc:	f000 f806 	bl	80003dc <lcd_write>
}
 80003d0:	bf00      	nop
 80003d2:	3708      	adds	r7, #8
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	40011000 	.word	0x40011000

080003dc <lcd_write>:


void lcd_write( uint8_t data, uint8_t LENG)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b084      	sub	sp, #16
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	4603      	mov	r3, r0
 80003e4:	460a      	mov	r2, r1
 80003e6:	71fb      	strb	r3, [r7, #7]
 80003e8:	4613      	mov	r3, r2
 80003ea:	71bb      	strb	r3, [r7, #6]
	for(uint8_t i = 0; i < LENG; i++)
 80003ec:	2300      	movs	r3, #0
 80003ee:	73fb      	strb	r3, [r7, #15]
 80003f0:	e023      	b.n	800043a <lcd_write+0x5e>
	{
		if( ((data >> i) & 0x01) == 0)
 80003f2:	79fa      	ldrb	r2, [r7, #7]
 80003f4:	7bfb      	ldrb	r3, [r7, #15]
 80003f6:	fa42 f303 	asr.w	r3, r2, r3
 80003fa:	f003 0301 	and.w	r3, r3, #1
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d10c      	bne.n	800041c <lcd_write+0x40>
	   	HAL_GPIO_WritePin(ports[i], pins[i], GPIO_PIN_RESET);
 8000402:	7bfb      	ldrb	r3, [r7, #15]
 8000404:	4a18      	ldr	r2, [pc, #96]	; (8000468 <lcd_write+0x8c>)
 8000406:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800040a:	7bfb      	ldrb	r3, [r7, #15]
 800040c:	4a17      	ldr	r2, [pc, #92]	; (800046c <lcd_write+0x90>)
 800040e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000412:	2200      	movs	r2, #0
 8000414:	4619      	mov	r1, r3
 8000416:	f001 f99f 	bl	8001758 <HAL_GPIO_WritePin>
 800041a:	e00b      	b.n	8000434 <lcd_write+0x58>
		else
			HAL_GPIO_WritePin(ports[i], pins[i], GPIO_PIN_SET);	
 800041c:	7bfb      	ldrb	r3, [r7, #15]
 800041e:	4a12      	ldr	r2, [pc, #72]	; (8000468 <lcd_write+0x8c>)
 8000420:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000424:	7bfb      	ldrb	r3, [r7, #15]
 8000426:	4a11      	ldr	r2, [pc, #68]	; (800046c <lcd_write+0x90>)
 8000428:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800042c:	2201      	movs	r2, #1
 800042e:	4619      	mov	r1, r3
 8000430:	f001 f992 	bl	8001758 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < LENG; i++)
 8000434:	7bfb      	ldrb	r3, [r7, #15]
 8000436:	3301      	adds	r3, #1
 8000438:	73fb      	strb	r3, [r7, #15]
 800043a:	7bfa      	ldrb	r2, [r7, #15]
 800043c:	79bb      	ldrb	r3, [r7, #6]
 800043e:	429a      	cmp	r2, r3
 8000440:	d3d7      	bcc.n	80003f2 <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);
 8000442:	2201      	movs	r2, #1
 8000444:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000448:	4809      	ldr	r0, [pc, #36]	; (8000470 <lcd_write+0x94>)
 800044a:	f001 f985 	bl	8001758 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800044e:	2001      	movs	r0, #1
 8000450:	f000 faca 	bl	80009e8 <HAL_Delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET); 		// Data receive on falling edge
 8000454:	2200      	movs	r2, #0
 8000456:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800045a:	4805      	ldr	r0, [pc, #20]	; (8000470 <lcd_write+0x94>)
 800045c:	f001 f97c 	bl	8001758 <HAL_GPIO_WritePin>
}
 8000460:	bf00      	nop
 8000462:	3710      	adds	r7, #16
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}
 8000468:	20000000 	.word	0x20000000
 800046c:	20000010 	.word	0x20000010
 8000470:	40011000 	.word	0x40011000

08000474 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == hadc1.Instance)
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	681a      	ldr	r2, [r3, #0]
 8000480:	4b07      	ldr	r3, [pc, #28]	; (80004a0 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	429a      	cmp	r2, r3
 8000486:	d106      	bne.n	8000496 <HAL_ADC_ConvCpltCallback+0x22>
		{
			data[0] = HAL_ADC_GetValue(hadc);
 8000488:	6878      	ldr	r0, [r7, #4]
 800048a:	f000 fc5f 	bl	8000d4c <HAL_ADC_GetValue>
 800048e:	4603      	mov	r3, r0
 8000490:	b29a      	uxth	r2, r3
 8000492:	4b04      	ldr	r3, [pc, #16]	; (80004a4 <HAL_ADC_ConvCpltCallback+0x30>)
 8000494:	801a      	strh	r2, [r3, #0]
		}
}
 8000496:	bf00      	nop
 8000498:	3708      	adds	r7, #8
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	200000b0 	.word	0x200000b0
 80004a4:	200000e0 	.word	0x200000e0

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ac:	f000 fa3a 	bl	8000924 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b0:	f000 f82c 	bl	800050c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b4:	f000 f8b8 	bl	8000628 <MX_GPIO_Init>
  MX_ADC1_Init();
 80004b8:	f000 f878 	bl	80005ac <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  Lcd_Init();
 80004bc:	f7ff fe4e 	bl	800015c <Lcd_Init>
  Lcd_gotoxy(1,0);
 80004c0:	2100      	movs	r1, #0
 80004c2:	2001      	movs	r0, #1
 80004c4:	f7ff fe7f 	bl	80001c6 <Lcd_gotoxy>
  Lcd_write_string(" VAI LUON ");
 80004c8:	480b      	ldr	r0, [pc, #44]	; (80004f8 <main+0x50>)
 80004ca:	f7ff fe5f 	bl	800018c <Lcd_write_string>
  HAL_ADC_Start_IT(&hadc1);
 80004ce:	480b      	ldr	r0, [pc, #44]	; (80004fc <main+0x54>)
 80004d0:	f000 fb86 	bl	8000be0 <HAL_ADC_Start_IT>
HAL_ADC_Start_IT(&hadc1);
 80004d4:	4809      	ldr	r0, [pc, #36]	; (80004fc <main+0x54>)
 80004d6:	f000 fb83 	bl	8000be0 <HAL_ADC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  sprintf(str,"GIA TRI: %d",data[0]);
 80004da:	4b09      	ldr	r3, [pc, #36]	; (8000500 <main+0x58>)
 80004dc:	881b      	ldrh	r3, [r3, #0]
 80004de:	461a      	mov	r2, r3
 80004e0:	4908      	ldr	r1, [pc, #32]	; (8000504 <main+0x5c>)
 80004e2:	4809      	ldr	r0, [pc, #36]	; (8000508 <main+0x60>)
 80004e4:	f001 fe20 	bl	8002128 <siprintf>
	  			Lcd_gotoxy(1,1);
 80004e8:	2101      	movs	r1, #1
 80004ea:	2001      	movs	r0, #1
 80004ec:	f7ff fe6b 	bl	80001c6 <Lcd_gotoxy>
	  			Lcd_write_string(str);
 80004f0:	4805      	ldr	r0, [pc, #20]	; (8000508 <main+0x60>)
 80004f2:	f7ff fe4b 	bl	800018c <Lcd_write_string>
	  sprintf(str,"GIA TRI: %d",data[0]);
 80004f6:	e7f0      	b.n	80004da <main+0x32>
 80004f8:	080029b4 	.word	0x080029b4
 80004fc:	200000b0 	.word	0x200000b0
 8000500:	200000e0 	.word	0x200000e0
 8000504:	080029c0 	.word	0x080029c0
 8000508:	200000e4 	.word	0x200000e4

0800050c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b094      	sub	sp, #80	; 0x50
 8000510:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000512:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000516:	2228      	movs	r2, #40	; 0x28
 8000518:	2100      	movs	r1, #0
 800051a:	4618      	mov	r0, r3
 800051c:	f001 fdfc 	bl	8002118 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000520:	f107 0314 	add.w	r3, r7, #20
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
 8000528:	605a      	str	r2, [r3, #4]
 800052a:	609a      	str	r2, [r3, #8]
 800052c:	60da      	str	r2, [r3, #12]
 800052e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000530:	1d3b      	adds	r3, r7, #4
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	605a      	str	r2, [r3, #4]
 8000538:	609a      	str	r2, [r3, #8]
 800053a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800053c:	2302      	movs	r3, #2
 800053e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000540:	2301      	movs	r3, #1
 8000542:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000544:	2310      	movs	r3, #16
 8000546:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000548:	2300      	movs	r3, #0
 800054a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800054c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000550:	4618      	mov	r0, r3
 8000552:	f001 f919 	bl	8001788 <HAL_RCC_OscConfig>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <SystemClock_Config+0x54>
  {
    Error_Handler();
 800055c:	f000 f8d2 	bl	8000704 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000560:	230f      	movs	r3, #15
 8000562:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000564:	2300      	movs	r3, #0
 8000566:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000568:	2300      	movs	r3, #0
 800056a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800056c:	2300      	movs	r3, #0
 800056e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000570:	2300      	movs	r3, #0
 8000572:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000574:	f107 0314 	add.w	r3, r7, #20
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f001 fb84 	bl	8001c88 <HAL_RCC_ClockConfig>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000586:	f000 f8bd 	bl	8000704 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800058a:	2302      	movs	r3, #2
 800058c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800058e:	2300      	movs	r3, #0
 8000590:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000592:	1d3b      	adds	r3, r7, #4
 8000594:	4618      	mov	r0, r3
 8000596:	f001 fcdf 	bl	8001f58 <HAL_RCCEx_PeriphCLKConfig>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005a0:	f000 f8b0 	bl	8000704 <Error_Handler>
  }
}
 80005a4:	bf00      	nop
 80005a6:	3750      	adds	r7, #80	; 0x50
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}

080005ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80005bc:	4b18      	ldr	r3, [pc, #96]	; (8000620 <MX_ADC1_Init+0x74>)
 80005be:	4a19      	ldr	r2, [pc, #100]	; (8000624 <MX_ADC1_Init+0x78>)
 80005c0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005c2:	4b17      	ldr	r3, [pc, #92]	; (8000620 <MX_ADC1_Init+0x74>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005c8:	4b15      	ldr	r3, [pc, #84]	; (8000620 <MX_ADC1_Init+0x74>)
 80005ca:	2201      	movs	r2, #1
 80005cc:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005ce:	4b14      	ldr	r3, [pc, #80]	; (8000620 <MX_ADC1_Init+0x74>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005d4:	4b12      	ldr	r3, [pc, #72]	; (8000620 <MX_ADC1_Init+0x74>)
 80005d6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80005da:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005dc:	4b10      	ldr	r3, [pc, #64]	; (8000620 <MX_ADC1_Init+0x74>)
 80005de:	2200      	movs	r2, #0
 80005e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80005e2:	4b0f      	ldr	r3, [pc, #60]	; (8000620 <MX_ADC1_Init+0x74>)
 80005e4:	2201      	movs	r2, #1
 80005e6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005e8:	480d      	ldr	r0, [pc, #52]	; (8000620 <MX_ADC1_Init+0x74>)
 80005ea:	f000 fa21 	bl	8000a30 <HAL_ADC_Init>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80005f4:	f000 f886 	bl	8000704 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005fc:	2301      	movs	r3, #1
 80005fe:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000600:	2307      	movs	r3, #7
 8000602:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000604:	1d3b      	adds	r3, r7, #4
 8000606:	4619      	mov	r1, r3
 8000608:	4805      	ldr	r0, [pc, #20]	; (8000620 <MX_ADC1_Init+0x74>)
 800060a:	f000 fc77 	bl	8000efc <HAL_ADC_ConfigChannel>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000614:	f000 f876 	bl	8000704 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000618:	bf00      	nop
 800061a:	3710      	adds	r7, #16
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	200000b0 	.word	0x200000b0
 8000624:	40012400 	.word	0x40012400

08000628 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b088      	sub	sp, #32
 800062c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062e:	f107 0310 	add.w	r3, r7, #16
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	605a      	str	r2, [r3, #4]
 8000638:	609a      	str	r2, [r3, #8]
 800063a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800063c:	4b2e      	ldr	r3, [pc, #184]	; (80006f8 <MX_GPIO_Init+0xd0>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	4a2d      	ldr	r2, [pc, #180]	; (80006f8 <MX_GPIO_Init+0xd0>)
 8000642:	f043 0310 	orr.w	r3, r3, #16
 8000646:	6193      	str	r3, [r2, #24]
 8000648:	4b2b      	ldr	r3, [pc, #172]	; (80006f8 <MX_GPIO_Init+0xd0>)
 800064a:	699b      	ldr	r3, [r3, #24]
 800064c:	f003 0310 	and.w	r3, r3, #16
 8000650:	60fb      	str	r3, [r7, #12]
 8000652:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000654:	4b28      	ldr	r3, [pc, #160]	; (80006f8 <MX_GPIO_Init+0xd0>)
 8000656:	699b      	ldr	r3, [r3, #24]
 8000658:	4a27      	ldr	r2, [pc, #156]	; (80006f8 <MX_GPIO_Init+0xd0>)
 800065a:	f043 0320 	orr.w	r3, r3, #32
 800065e:	6193      	str	r3, [r2, #24]
 8000660:	4b25      	ldr	r3, [pc, #148]	; (80006f8 <MX_GPIO_Init+0xd0>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	f003 0320 	and.w	r3, r3, #32
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066c:	4b22      	ldr	r3, [pc, #136]	; (80006f8 <MX_GPIO_Init+0xd0>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	4a21      	ldr	r2, [pc, #132]	; (80006f8 <MX_GPIO_Init+0xd0>)
 8000672:	f043 0304 	orr.w	r3, r3, #4
 8000676:	6193      	str	r3, [r2, #24]
 8000678:	4b1f      	ldr	r3, [pc, #124]	; (80006f8 <MX_GPIO_Init+0xd0>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	f003 0304 	and.w	r3, r3, #4
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000684:	4b1c      	ldr	r3, [pc, #112]	; (80006f8 <MX_GPIO_Init+0xd0>)
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	4a1b      	ldr	r2, [pc, #108]	; (80006f8 <MX_GPIO_Init+0xd0>)
 800068a:	f043 0308 	orr.w	r3, r3, #8
 800068e:	6193      	str	r3, [r2, #24]
 8000690:	4b19      	ldr	r3, [pc, #100]	; (80006f8 <MX_GPIO_Init+0xd0>)
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	f003 0308 	and.w	r3, r3, #8
 8000698:	603b      	str	r3, [r7, #0]
 800069a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800069c:	2200      	movs	r2, #0
 800069e:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80006a2:	4816      	ldr	r0, [pc, #88]	; (80006fc <MX_GPIO_Init+0xd4>)
 80006a4:	f001 f858 	bl	8001758 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80006a8:	2200      	movs	r2, #0
 80006aa:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80006ae:	4814      	ldr	r0, [pc, #80]	; (8000700 <MX_GPIO_Init+0xd8>)
 80006b0:	f001 f852 	bl	8001758 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80006b4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80006b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ba:	2301      	movs	r3, #1
 80006bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006be:	2300      	movs	r3, #0
 80006c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c2:	2302      	movs	r3, #2
 80006c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006c6:	f107 0310 	add.w	r3, r7, #16
 80006ca:	4619      	mov	r1, r3
 80006cc:	480b      	ldr	r0, [pc, #44]	; (80006fc <MX_GPIO_Init+0xd4>)
 80006ce:	f000 febf 	bl	8001450 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80006d2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80006d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d8:	2301      	movs	r3, #1
 80006da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006dc:	2300      	movs	r3, #0
 80006de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e0:	2302      	movs	r3, #2
 80006e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e4:	f107 0310 	add.w	r3, r7, #16
 80006e8:	4619      	mov	r1, r3
 80006ea:	4805      	ldr	r0, [pc, #20]	; (8000700 <MX_GPIO_Init+0xd8>)
 80006ec:	f000 feb0 	bl	8001450 <HAL_GPIO_Init>

}
 80006f0:	bf00      	nop
 80006f2:	3720      	adds	r7, #32
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40021000 	.word	0x40021000
 80006fc:	40011000 	.word	0x40011000
 8000700:	40010c00 	.word	0x40010c00

08000704 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000708:	b672      	cpsid	i
}
 800070a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800070c:	e7fe      	b.n	800070c <Error_Handler+0x8>
	...

08000710 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000710:	b480      	push	{r7}
 8000712:	b085      	sub	sp, #20
 8000714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000716:	4b15      	ldr	r3, [pc, #84]	; (800076c <HAL_MspInit+0x5c>)
 8000718:	699b      	ldr	r3, [r3, #24]
 800071a:	4a14      	ldr	r2, [pc, #80]	; (800076c <HAL_MspInit+0x5c>)
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	6193      	str	r3, [r2, #24]
 8000722:	4b12      	ldr	r3, [pc, #72]	; (800076c <HAL_MspInit+0x5c>)
 8000724:	699b      	ldr	r3, [r3, #24]
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	60bb      	str	r3, [r7, #8]
 800072c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800072e:	4b0f      	ldr	r3, [pc, #60]	; (800076c <HAL_MspInit+0x5c>)
 8000730:	69db      	ldr	r3, [r3, #28]
 8000732:	4a0e      	ldr	r2, [pc, #56]	; (800076c <HAL_MspInit+0x5c>)
 8000734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000738:	61d3      	str	r3, [r2, #28]
 800073a:	4b0c      	ldr	r3, [pc, #48]	; (800076c <HAL_MspInit+0x5c>)
 800073c:	69db      	ldr	r3, [r3, #28]
 800073e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000746:	4b0a      	ldr	r3, [pc, #40]	; (8000770 <HAL_MspInit+0x60>)
 8000748:	685b      	ldr	r3, [r3, #4]
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	4a04      	ldr	r2, [pc, #16]	; (8000770 <HAL_MspInit+0x60>)
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000762:	bf00      	nop
 8000764:	3714      	adds	r7, #20
 8000766:	46bd      	mov	sp, r7
 8000768:	bc80      	pop	{r7}
 800076a:	4770      	bx	lr
 800076c:	40021000 	.word	0x40021000
 8000770:	40010000 	.word	0x40010000

08000774 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b088      	sub	sp, #32
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077c:	f107 0310 	add.w	r3, r7, #16
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4a18      	ldr	r2, [pc, #96]	; (80007f0 <HAL_ADC_MspInit+0x7c>)
 8000790:	4293      	cmp	r3, r2
 8000792:	d129      	bne.n	80007e8 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000794:	4b17      	ldr	r3, [pc, #92]	; (80007f4 <HAL_ADC_MspInit+0x80>)
 8000796:	699b      	ldr	r3, [r3, #24]
 8000798:	4a16      	ldr	r2, [pc, #88]	; (80007f4 <HAL_ADC_MspInit+0x80>)
 800079a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800079e:	6193      	str	r3, [r2, #24]
 80007a0:	4b14      	ldr	r3, [pc, #80]	; (80007f4 <HAL_ADC_MspInit+0x80>)
 80007a2:	699b      	ldr	r3, [r3, #24]
 80007a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ac:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <HAL_ADC_MspInit+0x80>)
 80007ae:	699b      	ldr	r3, [r3, #24]
 80007b0:	4a10      	ldr	r2, [pc, #64]	; (80007f4 <HAL_ADC_MspInit+0x80>)
 80007b2:	f043 0304 	orr.w	r3, r3, #4
 80007b6:	6193      	str	r3, [r2, #24]
 80007b8:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <HAL_ADC_MspInit+0x80>)
 80007ba:	699b      	ldr	r3, [r3, #24]
 80007bc:	f003 0304 	and.w	r3, r3, #4
 80007c0:	60bb      	str	r3, [r7, #8]
 80007c2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007c4:	2301      	movs	r3, #1
 80007c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007c8:	2303      	movs	r3, #3
 80007ca:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007cc:	f107 0310 	add.w	r3, r7, #16
 80007d0:	4619      	mov	r1, r3
 80007d2:	4809      	ldr	r0, [pc, #36]	; (80007f8 <HAL_ADC_MspInit+0x84>)
 80007d4:	f000 fe3c 	bl	8001450 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 80007d8:	2200      	movs	r2, #0
 80007da:	2102      	movs	r1, #2
 80007dc:	2012      	movs	r0, #18
 80007de:	f000 fe00 	bl	80013e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80007e2:	2012      	movs	r0, #18
 80007e4:	f000 fe19 	bl	800141a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80007e8:	bf00      	nop
 80007ea:	3720      	adds	r7, #32
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	40012400 	.word	0x40012400
 80007f4:	40021000 	.word	0x40021000
 80007f8:	40010800 	.word	0x40010800

080007fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000800:	e7fe      	b.n	8000800 <NMI_Handler+0x4>

08000802 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000802:	b480      	push	{r7}
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000806:	e7fe      	b.n	8000806 <HardFault_Handler+0x4>

08000808 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800080c:	e7fe      	b.n	800080c <MemManage_Handler+0x4>

0800080e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000812:	e7fe      	b.n	8000812 <BusFault_Handler+0x4>

08000814 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000818:	e7fe      	b.n	8000818 <UsageFault_Handler+0x4>

0800081a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800081a:	b480      	push	{r7}
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800081e:	bf00      	nop
 8000820:	46bd      	mov	sp, r7
 8000822:	bc80      	pop	{r7}
 8000824:	4770      	bx	lr

08000826 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000826:	b480      	push	{r7}
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800082a:	bf00      	nop
 800082c:	46bd      	mov	sp, r7
 800082e:	bc80      	pop	{r7}
 8000830:	4770      	bx	lr

08000832 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000836:	bf00      	nop
 8000838:	46bd      	mov	sp, r7
 800083a:	bc80      	pop	{r7}
 800083c:	4770      	bx	lr

0800083e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800083e:	b580      	push	{r7, lr}
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000842:	f000 f8b5 	bl	80009b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
	...

0800084c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000850:	4802      	ldr	r0, [pc, #8]	; (800085c <ADC1_2_IRQHandler+0x10>)
 8000852:	f000 fa87 	bl	8000d64 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	200000b0 	.word	0x200000b0

08000860 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b086      	sub	sp, #24
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000868:	4a14      	ldr	r2, [pc, #80]	; (80008bc <_sbrk+0x5c>)
 800086a:	4b15      	ldr	r3, [pc, #84]	; (80008c0 <_sbrk+0x60>)
 800086c:	1ad3      	subs	r3, r2, r3
 800086e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000874:	4b13      	ldr	r3, [pc, #76]	; (80008c4 <_sbrk+0x64>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d102      	bne.n	8000882 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800087c:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <_sbrk+0x64>)
 800087e:	4a12      	ldr	r2, [pc, #72]	; (80008c8 <_sbrk+0x68>)
 8000880:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000882:	4b10      	ldr	r3, [pc, #64]	; (80008c4 <_sbrk+0x64>)
 8000884:	681a      	ldr	r2, [r3, #0]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	4413      	add	r3, r2
 800088a:	693a      	ldr	r2, [r7, #16]
 800088c:	429a      	cmp	r2, r3
 800088e:	d207      	bcs.n	80008a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000890:	f001 fc18 	bl	80020c4 <__errno>
 8000894:	4603      	mov	r3, r0
 8000896:	220c      	movs	r2, #12
 8000898:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800089a:	f04f 33ff 	mov.w	r3, #4294967295
 800089e:	e009      	b.n	80008b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008a0:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <_sbrk+0x64>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008a6:	4b07      	ldr	r3, [pc, #28]	; (80008c4 <_sbrk+0x64>)
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	4413      	add	r3, r2
 80008ae:	4a05      	ldr	r2, [pc, #20]	; (80008c4 <_sbrk+0x64>)
 80008b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008b2:	68fb      	ldr	r3, [r7, #12]
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	3718      	adds	r7, #24
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	20005000 	.word	0x20005000
 80008c0:	00000400 	.word	0x00000400
 80008c4:	200000a4 	.word	0x200000a4
 80008c8:	20000110 	.word	0x20000110

080008cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008d0:	bf00      	nop
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bc80      	pop	{r7}
 80008d6:	4770      	bx	lr

080008d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008d8:	480c      	ldr	r0, [pc, #48]	; (800090c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008da:	490d      	ldr	r1, [pc, #52]	; (8000910 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008dc:	4a0d      	ldr	r2, [pc, #52]	; (8000914 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008e0:	e002      	b.n	80008e8 <LoopCopyDataInit>

080008e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008e6:	3304      	adds	r3, #4

080008e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008ec:	d3f9      	bcc.n	80008e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ee:	4a0a      	ldr	r2, [pc, #40]	; (8000918 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008f0:	4c0a      	ldr	r4, [pc, #40]	; (800091c <LoopFillZerobss+0x22>)
  movs r3, #0
 80008f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008f4:	e001      	b.n	80008fa <LoopFillZerobss>

080008f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008f8:	3204      	adds	r2, #4

080008fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008fc:	d3fb      	bcc.n	80008f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008fe:	f7ff ffe5 	bl	80008cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000902:	f001 fbe5 	bl	80020d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000906:	f7ff fdcf 	bl	80004a8 <main>
  bx lr
 800090a:	4770      	bx	lr
  ldr r0, =_sdata
 800090c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000910:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000914:	08002a28 	.word	0x08002a28
  ldr r2, =_sbss
 8000918:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 800091c:	2000010c 	.word	0x2000010c

08000920 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000920:	e7fe      	b.n	8000920 <CAN1_RX1_IRQHandler>
	...

08000924 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000928:	4b08      	ldr	r3, [pc, #32]	; (800094c <HAL_Init+0x28>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a07      	ldr	r2, [pc, #28]	; (800094c <HAL_Init+0x28>)
 800092e:	f043 0310 	orr.w	r3, r3, #16
 8000932:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000934:	2003      	movs	r0, #3
 8000936:	f000 fd49 	bl	80013cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800093a:	200f      	movs	r0, #15
 800093c:	f000 f808 	bl	8000950 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000940:	f7ff fee6 	bl	8000710 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000944:	2300      	movs	r3, #0
}
 8000946:	4618      	mov	r0, r3
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40022000 	.word	0x40022000

08000950 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000958:	4b12      	ldr	r3, [pc, #72]	; (80009a4 <HAL_InitTick+0x54>)
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <HAL_InitTick+0x58>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	4619      	mov	r1, r3
 8000962:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000966:	fbb3 f3f1 	udiv	r3, r3, r1
 800096a:	fbb2 f3f3 	udiv	r3, r2, r3
 800096e:	4618      	mov	r0, r3
 8000970:	f000 fd61 	bl	8001436 <HAL_SYSTICK_Config>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800097a:	2301      	movs	r3, #1
 800097c:	e00e      	b.n	800099c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	2b0f      	cmp	r3, #15
 8000982:	d80a      	bhi.n	800099a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000984:	2200      	movs	r2, #0
 8000986:	6879      	ldr	r1, [r7, #4]
 8000988:	f04f 30ff 	mov.w	r0, #4294967295
 800098c:	f000 fd29 	bl	80013e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000990:	4a06      	ldr	r2, [pc, #24]	; (80009ac <HAL_InitTick+0x5c>)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000996:	2300      	movs	r3, #0
 8000998:	e000      	b.n	800099c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800099a:	2301      	movs	r3, #1
}
 800099c:	4618      	mov	r0, r3
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	20000018 	.word	0x20000018
 80009a8:	20000020 	.word	0x20000020
 80009ac:	2000001c 	.word	0x2000001c

080009b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009b4:	4b05      	ldr	r3, [pc, #20]	; (80009cc <HAL_IncTick+0x1c>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	461a      	mov	r2, r3
 80009ba:	4b05      	ldr	r3, [pc, #20]	; (80009d0 <HAL_IncTick+0x20>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4413      	add	r3, r2
 80009c0:	4a03      	ldr	r2, [pc, #12]	; (80009d0 <HAL_IncTick+0x20>)
 80009c2:	6013      	str	r3, [r2, #0]
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bc80      	pop	{r7}
 80009ca:	4770      	bx	lr
 80009cc:	20000020 	.word	0x20000020
 80009d0:	200000f8 	.word	0x200000f8

080009d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  return uwTick;
 80009d8:	4b02      	ldr	r3, [pc, #8]	; (80009e4 <HAL_GetTick+0x10>)
 80009da:	681b      	ldr	r3, [r3, #0]
}
 80009dc:	4618      	mov	r0, r3
 80009de:	46bd      	mov	sp, r7
 80009e0:	bc80      	pop	{r7}
 80009e2:	4770      	bx	lr
 80009e4:	200000f8 	.word	0x200000f8

080009e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009f0:	f7ff fff0 	bl	80009d4 <HAL_GetTick>
 80009f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a00:	d005      	beq.n	8000a0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a02:	4b0a      	ldr	r3, [pc, #40]	; (8000a2c <HAL_Delay+0x44>)
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	461a      	mov	r2, r3
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	4413      	add	r3, r2
 8000a0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a0e:	bf00      	nop
 8000a10:	f7ff ffe0 	bl	80009d4 <HAL_GetTick>
 8000a14:	4602      	mov	r2, r0
 8000a16:	68bb      	ldr	r3, [r7, #8]
 8000a18:	1ad3      	subs	r3, r2, r3
 8000a1a:	68fa      	ldr	r2, [r7, #12]
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	d8f7      	bhi.n	8000a10 <HAL_Delay+0x28>
  {
  }
}
 8000a20:	bf00      	nop
 8000a22:	bf00      	nop
 8000a24:	3710      	adds	r7, #16
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20000020 	.word	0x20000020

08000a30 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b086      	sub	sp, #24
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000a40:	2300      	movs	r3, #0
 8000a42:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000a44:	2300      	movs	r3, #0
 8000a46:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d101      	bne.n	8000a52 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	e0be      	b.n	8000bd0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	689b      	ldr	r3, [r3, #8]
 8000a56:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d109      	bne.n	8000a74 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2200      	movs	r2, #0
 8000a64:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	2200      	movs	r2, #0
 8000a6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a6e:	6878      	ldr	r0, [r7, #4]
 8000a70:	f7ff fe80 	bl	8000774 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	f000 fb93 	bl	80011a0 <ADC_ConversionStop_Disable>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a82:	f003 0310 	and.w	r3, r3, #16
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	f040 8099 	bne.w	8000bbe <HAL_ADC_Init+0x18e>
 8000a8c:	7dfb      	ldrb	r3, [r7, #23]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	f040 8095 	bne.w	8000bbe <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a98:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000a9c:	f023 0302 	bic.w	r3, r3, #2
 8000aa0:	f043 0202 	orr.w	r2, r3, #2
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ab0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	7b1b      	ldrb	r3, [r3, #12]
 8000ab6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ab8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000aba:	68ba      	ldr	r2, [r7, #8]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	689b      	ldr	r3, [r3, #8]
 8000ac4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ac8:	d003      	beq.n	8000ad2 <HAL_ADC_Init+0xa2>
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	689b      	ldr	r3, [r3, #8]
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d102      	bne.n	8000ad8 <HAL_ADC_Init+0xa8>
 8000ad2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ad6:	e000      	b.n	8000ada <HAL_ADC_Init+0xaa>
 8000ad8:	2300      	movs	r3, #0
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	4313      	orrs	r3, r2
 8000ade:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	7d1b      	ldrb	r3, [r3, #20]
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d119      	bne.n	8000b1c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	7b1b      	ldrb	r3, [r3, #12]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d109      	bne.n	8000b04 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	3b01      	subs	r3, #1
 8000af6:	035a      	lsls	r2, r3, #13
 8000af8:	693b      	ldr	r3, [r7, #16]
 8000afa:	4313      	orrs	r3, r2
 8000afc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b00:	613b      	str	r3, [r7, #16]
 8000b02:	e00b      	b.n	8000b1c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b08:	f043 0220 	orr.w	r2, r3, #32
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b14:	f043 0201 	orr.w	r2, r3, #1
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	430a      	orrs	r2, r1
 8000b2e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	689a      	ldr	r2, [r3, #8]
 8000b36:	4b28      	ldr	r3, [pc, #160]	; (8000bd8 <HAL_ADC_Init+0x1a8>)
 8000b38:	4013      	ands	r3, r2
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	6812      	ldr	r2, [r2, #0]
 8000b3e:	68b9      	ldr	r1, [r7, #8]
 8000b40:	430b      	orrs	r3, r1
 8000b42:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	689b      	ldr	r3, [r3, #8]
 8000b48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b4c:	d003      	beq.n	8000b56 <HAL_ADC_Init+0x126>
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	689b      	ldr	r3, [r3, #8]
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d104      	bne.n	8000b60 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	691b      	ldr	r3, [r3, #16]
 8000b5a:	3b01      	subs	r3, #1
 8000b5c:	051b      	lsls	r3, r3, #20
 8000b5e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b66:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	68fa      	ldr	r2, [r7, #12]
 8000b70:	430a      	orrs	r2, r1
 8000b72:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	689a      	ldr	r2, [r3, #8]
 8000b7a:	4b18      	ldr	r3, [pc, #96]	; (8000bdc <HAL_ADC_Init+0x1ac>)
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	68ba      	ldr	r2, [r7, #8]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	d10b      	bne.n	8000b9c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2200      	movs	r2, #0
 8000b88:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b8e:	f023 0303 	bic.w	r3, r3, #3
 8000b92:	f043 0201 	orr.w	r2, r3, #1
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b9a:	e018      	b.n	8000bce <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ba0:	f023 0312 	bic.w	r3, r3, #18
 8000ba4:	f043 0210 	orr.w	r2, r3, #16
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bb0:	f043 0201 	orr.w	r2, r3, #1
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000bbc:	e007      	b.n	8000bce <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bc2:	f043 0210 	orr.w	r2, r3, #16
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000bce:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3718      	adds	r7, #24
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	ffe1f7fd 	.word	0xffe1f7fd
 8000bdc:	ff1f0efe 	.word	0xff1f0efe

08000be0 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000be8:	2300      	movs	r3, #0
 8000bea:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d101      	bne.n	8000bfa <HAL_ADC_Start_IT+0x1a>
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	e0a0      	b.n	8000d3c <HAL_ADC_Start_IT+0x15c>
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f000 fa72 	bl	80010ec <ADC_Enable>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000c0c:	7bfb      	ldrb	r3, [r7, #15]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	f040 808f 	bne.w	8000d32 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c18:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000c1c:	f023 0301 	bic.w	r3, r3, #1
 8000c20:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a45      	ldr	r2, [pc, #276]	; (8000d44 <HAL_ADC_Start_IT+0x164>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d105      	bne.n	8000c3e <HAL_ADC_Start_IT+0x5e>
 8000c32:	4b45      	ldr	r3, [pc, #276]	; (8000d48 <HAL_ADC_Start_IT+0x168>)
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d115      	bne.n	8000c6a <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c42:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d026      	beq.n	8000ca6 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c5c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c60:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000c68:	e01d      	b.n	8000ca6 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c6e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a33      	ldr	r2, [pc, #204]	; (8000d48 <HAL_ADC_Start_IT+0x168>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d004      	beq.n	8000c8a <HAL_ADC_Start_IT+0xaa>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a2f      	ldr	r2, [pc, #188]	; (8000d44 <HAL_ADC_Start_IT+0x164>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d10d      	bne.n	8000ca6 <HAL_ADC_Start_IT+0xc6>
 8000c8a:	4b2f      	ldr	r3, [pc, #188]	; (8000d48 <HAL_ADC_Start_IT+0x168>)
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d007      	beq.n	8000ca6 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c9a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c9e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000caa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d006      	beq.n	8000cc0 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cb6:	f023 0206 	bic.w	r2, r3, #6
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	62da      	str	r2, [r3, #44]	; 0x2c
 8000cbe:	e002      	b.n	8000cc6 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f06f 0202 	mvn.w	r2, #2
 8000cd6:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	685a      	ldr	r2, [r3, #4]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f042 0220 	orr.w	r2, r2, #32
 8000ce6:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	689b      	ldr	r3, [r3, #8]
 8000cee:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000cf2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000cf6:	d113      	bne.n	8000d20 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000cfc:	4a11      	ldr	r2, [pc, #68]	; (8000d44 <HAL_ADC_Start_IT+0x164>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d105      	bne.n	8000d0e <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000d02:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <HAL_ADC_Start_IT+0x168>)
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d108      	bne.n	8000d20 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	689a      	ldr	r2, [r3, #8]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000d1c:	609a      	str	r2, [r3, #8]
 8000d1e:	e00c      	b.n	8000d3a <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	689a      	ldr	r2, [r3, #8]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	e003      	b.n	8000d3a <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2200      	movs	r2, #0
 8000d36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3710      	adds	r7, #16
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40012800 	.word	0x40012800
 8000d48:	40012400 	.word	0x40012400

08000d4c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	370c      	adds	r7, #12
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bc80      	pop	{r7}
 8000d62:	4770      	bx	lr

08000d64 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	f003 0320 	and.w	r3, r3, #32
 8000d76:	2b20      	cmp	r3, #32
 8000d78:	d140      	bne.n	8000dfc <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f003 0302 	and.w	r3, r3, #2
 8000d84:	2b02      	cmp	r3, #2
 8000d86:	d139      	bne.n	8000dfc <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d8c:	f003 0310 	and.w	r3, r3, #16
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d105      	bne.n	8000da0 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d98:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	689b      	ldr	r3, [r3, #8]
 8000da6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000daa:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000dae:	d11d      	bne.n	8000dec <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d119      	bne.n	8000dec <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	685a      	ldr	r2, [r3, #4]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f022 0220 	bic.w	r2, r2, #32
 8000dc6:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dcc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d105      	bne.n	8000dec <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000de4:	f043 0201 	orr.w	r2, r3, #1
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000dec:	6878      	ldr	r0, [r7, #4]
 8000dee:	f7ff fb41 	bl	8000474 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f06f 0212 	mvn.w	r2, #18
 8000dfa:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e06:	2b80      	cmp	r3, #128	; 0x80
 8000e08:	d14f      	bne.n	8000eaa <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f003 0304 	and.w	r3, r3, #4
 8000e14:	2b04      	cmp	r3, #4
 8000e16:	d148      	bne.n	8000eaa <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e1c:	f003 0310 	and.w	r3, r3, #16
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d105      	bne.n	8000e30 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e28:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	689b      	ldr	r3, [r3, #8]
 8000e36:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8000e3a:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8000e3e:	d012      	beq.n	8000e66 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d125      	bne.n	8000e9a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	689b      	ldr	r3, [r3, #8]
 8000e54:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000e58:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000e5c:	d11d      	bne.n	8000e9a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d119      	bne.n	8000e9a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	685a      	ldr	r2, [r3, #4]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e74:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d105      	bne.n	8000e9a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e92:	f043 0201 	orr.w	r2, r3, #1
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f000 f9c1 	bl	8001222 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f06f 020c 	mvn.w	r2, #12
 8000ea8:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000eb4:	2b40      	cmp	r3, #64	; 0x40
 8000eb6:	d114      	bne.n	8000ee2 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d10d      	bne.n	8000ee2 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f000 f809 	bl	8000eea <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f06f 0201 	mvn.w	r2, #1
 8000ee0:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000eea:	b480      	push	{r7}
 8000eec:	b083      	sub	sp, #12
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8000ef2:	bf00      	nop
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bc80      	pop	{r7}
 8000efa:	4770      	bx	lr

08000efc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f06:	2300      	movs	r3, #0
 8000f08:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d101      	bne.n	8000f1c <HAL_ADC_ConfigChannel+0x20>
 8000f18:	2302      	movs	r3, #2
 8000f1a:	e0dc      	b.n	80010d6 <HAL_ADC_ConfigChannel+0x1da>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2201      	movs	r2, #1
 8000f20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	2b06      	cmp	r3, #6
 8000f2a:	d81c      	bhi.n	8000f66 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685a      	ldr	r2, [r3, #4]
 8000f36:	4613      	mov	r3, r2
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	4413      	add	r3, r2
 8000f3c:	3b05      	subs	r3, #5
 8000f3e:	221f      	movs	r2, #31
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	43db      	mvns	r3, r3
 8000f46:	4019      	ands	r1, r3
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	6818      	ldr	r0, [r3, #0]
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685a      	ldr	r2, [r3, #4]
 8000f50:	4613      	mov	r3, r2
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	4413      	add	r3, r2
 8000f56:	3b05      	subs	r3, #5
 8000f58:	fa00 f203 	lsl.w	r2, r0, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	430a      	orrs	r2, r1
 8000f62:	635a      	str	r2, [r3, #52]	; 0x34
 8000f64:	e03c      	b.n	8000fe0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	2b0c      	cmp	r3, #12
 8000f6c:	d81c      	bhi.n	8000fa8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685a      	ldr	r2, [r3, #4]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	4413      	add	r3, r2
 8000f7e:	3b23      	subs	r3, #35	; 0x23
 8000f80:	221f      	movs	r2, #31
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	43db      	mvns	r3, r3
 8000f88:	4019      	ands	r1, r3
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	6818      	ldr	r0, [r3, #0]
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685a      	ldr	r2, [r3, #4]
 8000f92:	4613      	mov	r3, r2
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	4413      	add	r3, r2
 8000f98:	3b23      	subs	r3, #35	; 0x23
 8000f9a:	fa00 f203 	lsl.w	r2, r0, r3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	430a      	orrs	r2, r1
 8000fa4:	631a      	str	r2, [r3, #48]	; 0x30
 8000fa6:	e01b      	b.n	8000fe0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685a      	ldr	r2, [r3, #4]
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	4413      	add	r3, r2
 8000fb8:	3b41      	subs	r3, #65	; 0x41
 8000fba:	221f      	movs	r2, #31
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	4019      	ands	r1, r3
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	6818      	ldr	r0, [r3, #0]
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685a      	ldr	r2, [r3, #4]
 8000fcc:	4613      	mov	r3, r2
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	4413      	add	r3, r2
 8000fd2:	3b41      	subs	r3, #65	; 0x41
 8000fd4:	fa00 f203 	lsl.w	r2, r0, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	430a      	orrs	r2, r1
 8000fde:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2b09      	cmp	r3, #9
 8000fe6:	d91c      	bls.n	8001022 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	68d9      	ldr	r1, [r3, #12]
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	4413      	add	r3, r2
 8000ff8:	3b1e      	subs	r3, #30
 8000ffa:	2207      	movs	r2, #7
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	43db      	mvns	r3, r3
 8001002:	4019      	ands	r1, r3
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	6898      	ldr	r0, [r3, #8]
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	4613      	mov	r3, r2
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	4413      	add	r3, r2
 8001012:	3b1e      	subs	r3, #30
 8001014:	fa00 f203 	lsl.w	r2, r0, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	430a      	orrs	r2, r1
 800101e:	60da      	str	r2, [r3, #12]
 8001020:	e019      	b.n	8001056 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	6919      	ldr	r1, [r3, #16]
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	4613      	mov	r3, r2
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	4413      	add	r3, r2
 8001032:	2207      	movs	r2, #7
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	43db      	mvns	r3, r3
 800103a:	4019      	ands	r1, r3
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	6898      	ldr	r0, [r3, #8]
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	4613      	mov	r3, r2
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	4413      	add	r3, r2
 800104a:	fa00 f203 	lsl.w	r2, r0, r3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	430a      	orrs	r2, r1
 8001054:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	2b10      	cmp	r3, #16
 800105c:	d003      	beq.n	8001066 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001062:	2b11      	cmp	r3, #17
 8001064:	d132      	bne.n	80010cc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a1d      	ldr	r2, [pc, #116]	; (80010e0 <HAL_ADC_ConfigChannel+0x1e4>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d125      	bne.n	80010bc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d126      	bne.n	80010cc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	689a      	ldr	r2, [r3, #8]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800108c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	2b10      	cmp	r3, #16
 8001094:	d11a      	bne.n	80010cc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001096:	4b13      	ldr	r3, [pc, #76]	; (80010e4 <HAL_ADC_ConfigChannel+0x1e8>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a13      	ldr	r2, [pc, #76]	; (80010e8 <HAL_ADC_ConfigChannel+0x1ec>)
 800109c:	fba2 2303 	umull	r2, r3, r2, r3
 80010a0:	0c9a      	lsrs	r2, r3, #18
 80010a2:	4613      	mov	r3, r2
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	4413      	add	r3, r2
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80010ac:	e002      	b.n	80010b4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	3b01      	subs	r3, #1
 80010b2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d1f9      	bne.n	80010ae <HAL_ADC_ConfigChannel+0x1b2>
 80010ba:	e007      	b.n	80010cc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010c0:	f043 0220 	orr.w	r2, r3, #32
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2200      	movs	r2, #0
 80010d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80010d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3714      	adds	r7, #20
 80010da:	46bd      	mov	sp, r7
 80010dc:	bc80      	pop	{r7}
 80010de:	4770      	bx	lr
 80010e0:	40012400 	.word	0x40012400
 80010e4:	20000018 	.word	0x20000018
 80010e8:	431bde83 	.word	0x431bde83

080010ec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80010f4:	2300      	movs	r3, #0
 80010f6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80010f8:	2300      	movs	r3, #0
 80010fa:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	2b01      	cmp	r3, #1
 8001108:	d040      	beq.n	800118c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	689a      	ldr	r2, [r3, #8]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f042 0201 	orr.w	r2, r2, #1
 8001118:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800111a:	4b1f      	ldr	r3, [pc, #124]	; (8001198 <ADC_Enable+0xac>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a1f      	ldr	r2, [pc, #124]	; (800119c <ADC_Enable+0xb0>)
 8001120:	fba2 2303 	umull	r2, r3, r2, r3
 8001124:	0c9b      	lsrs	r3, r3, #18
 8001126:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001128:	e002      	b.n	8001130 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	3b01      	subs	r3, #1
 800112e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d1f9      	bne.n	800112a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001136:	f7ff fc4d 	bl	80009d4 <HAL_GetTick>
 800113a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800113c:	e01f      	b.n	800117e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800113e:	f7ff fc49 	bl	80009d4 <HAL_GetTick>
 8001142:	4602      	mov	r2, r0
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	1ad3      	subs	r3, r2, r3
 8001148:	2b02      	cmp	r3, #2
 800114a:	d918      	bls.n	800117e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	f003 0301 	and.w	r3, r3, #1
 8001156:	2b01      	cmp	r3, #1
 8001158:	d011      	beq.n	800117e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800115e:	f043 0210 	orr.w	r2, r3, #16
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800116a:	f043 0201 	orr.w	r2, r3, #1
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2200      	movs	r2, #0
 8001176:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e007      	b.n	800118e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	f003 0301 	and.w	r3, r3, #1
 8001188:	2b01      	cmp	r3, #1
 800118a:	d1d8      	bne.n	800113e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000018 	.word	0x20000018
 800119c:	431bde83 	.word	0x431bde83

080011a0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80011a8:	2300      	movs	r3, #0
 80011aa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	f003 0301 	and.w	r3, r3, #1
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d12e      	bne.n	8001218 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	689a      	ldr	r2, [r3, #8]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f022 0201 	bic.w	r2, r2, #1
 80011c8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80011ca:	f7ff fc03 	bl	80009d4 <HAL_GetTick>
 80011ce:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80011d0:	e01b      	b.n	800120a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80011d2:	f7ff fbff 	bl	80009d4 <HAL_GetTick>
 80011d6:	4602      	mov	r2, r0
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d914      	bls.n	800120a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d10d      	bne.n	800120a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011f2:	f043 0210 	orr.w	r2, r3, #16
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011fe:	f043 0201 	orr.w	r2, r3, #1
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e007      	b.n	800121a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	f003 0301 	and.w	r3, r3, #1
 8001214:	2b01      	cmp	r3, #1
 8001216:	d0dc      	beq.n	80011d2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001222:	b480      	push	{r7}
 8001224:	b083      	sub	sp, #12
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800122a:	bf00      	nop
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	bc80      	pop	{r7}
 8001232:	4770      	bx	lr

08001234 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001244:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <__NVIC_SetPriorityGrouping+0x44>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800124a:	68ba      	ldr	r2, [r7, #8]
 800124c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001250:	4013      	ands	r3, r2
 8001252:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800125c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001260:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001264:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001266:	4a04      	ldr	r2, [pc, #16]	; (8001278 <__NVIC_SetPriorityGrouping+0x44>)
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	60d3      	str	r3, [r2, #12]
}
 800126c:	bf00      	nop
 800126e:	3714      	adds	r7, #20
 8001270:	46bd      	mov	sp, r7
 8001272:	bc80      	pop	{r7}
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001280:	4b04      	ldr	r3, [pc, #16]	; (8001294 <__NVIC_GetPriorityGrouping+0x18>)
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	0a1b      	lsrs	r3, r3, #8
 8001286:	f003 0307 	and.w	r3, r3, #7
}
 800128a:	4618      	mov	r0, r3
 800128c:	46bd      	mov	sp, r7
 800128e:	bc80      	pop	{r7}
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	db0b      	blt.n	80012c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	f003 021f 	and.w	r2, r3, #31
 80012b0:	4906      	ldr	r1, [pc, #24]	; (80012cc <__NVIC_EnableIRQ+0x34>)
 80012b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b6:	095b      	lsrs	r3, r3, #5
 80012b8:	2001      	movs	r0, #1
 80012ba:	fa00 f202 	lsl.w	r2, r0, r2
 80012be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bc80      	pop	{r7}
 80012ca:	4770      	bx	lr
 80012cc:	e000e100 	.word	0xe000e100

080012d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	6039      	str	r1, [r7, #0]
 80012da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	db0a      	blt.n	80012fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	490c      	ldr	r1, [pc, #48]	; (800131c <__NVIC_SetPriority+0x4c>)
 80012ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ee:	0112      	lsls	r2, r2, #4
 80012f0:	b2d2      	uxtb	r2, r2
 80012f2:	440b      	add	r3, r1
 80012f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012f8:	e00a      	b.n	8001310 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	b2da      	uxtb	r2, r3
 80012fe:	4908      	ldr	r1, [pc, #32]	; (8001320 <__NVIC_SetPriority+0x50>)
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	f003 030f 	and.w	r3, r3, #15
 8001306:	3b04      	subs	r3, #4
 8001308:	0112      	lsls	r2, r2, #4
 800130a:	b2d2      	uxtb	r2, r2
 800130c:	440b      	add	r3, r1
 800130e:	761a      	strb	r2, [r3, #24]
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	bc80      	pop	{r7}
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	e000e100 	.word	0xe000e100
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001324:	b480      	push	{r7}
 8001326:	b089      	sub	sp, #36	; 0x24
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f003 0307 	and.w	r3, r3, #7
 8001336:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	f1c3 0307 	rsb	r3, r3, #7
 800133e:	2b04      	cmp	r3, #4
 8001340:	bf28      	it	cs
 8001342:	2304      	movcs	r3, #4
 8001344:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	3304      	adds	r3, #4
 800134a:	2b06      	cmp	r3, #6
 800134c:	d902      	bls.n	8001354 <NVIC_EncodePriority+0x30>
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	3b03      	subs	r3, #3
 8001352:	e000      	b.n	8001356 <NVIC_EncodePriority+0x32>
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001358:	f04f 32ff 	mov.w	r2, #4294967295
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	43da      	mvns	r2, r3
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	401a      	ands	r2, r3
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800136c:	f04f 31ff 	mov.w	r1, #4294967295
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	fa01 f303 	lsl.w	r3, r1, r3
 8001376:	43d9      	mvns	r1, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800137c:	4313      	orrs	r3, r2
         );
}
 800137e:	4618      	mov	r0, r3
 8001380:	3724      	adds	r7, #36	; 0x24
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr

08001388 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3b01      	subs	r3, #1
 8001394:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001398:	d301      	bcc.n	800139e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800139a:	2301      	movs	r3, #1
 800139c:	e00f      	b.n	80013be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800139e:	4a0a      	ldr	r2, [pc, #40]	; (80013c8 <SysTick_Config+0x40>)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	3b01      	subs	r3, #1
 80013a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013a6:	210f      	movs	r1, #15
 80013a8:	f04f 30ff 	mov.w	r0, #4294967295
 80013ac:	f7ff ff90 	bl	80012d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013b0:	4b05      	ldr	r3, [pc, #20]	; (80013c8 <SysTick_Config+0x40>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013b6:	4b04      	ldr	r3, [pc, #16]	; (80013c8 <SysTick_Config+0x40>)
 80013b8:	2207      	movs	r2, #7
 80013ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	e000e010 	.word	0xe000e010

080013cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f7ff ff2d 	bl	8001234 <__NVIC_SetPriorityGrouping>
}
 80013da:	bf00      	nop
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b086      	sub	sp, #24
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	4603      	mov	r3, r0
 80013ea:	60b9      	str	r1, [r7, #8]
 80013ec:	607a      	str	r2, [r7, #4]
 80013ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013f4:	f7ff ff42 	bl	800127c <__NVIC_GetPriorityGrouping>
 80013f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	68b9      	ldr	r1, [r7, #8]
 80013fe:	6978      	ldr	r0, [r7, #20]
 8001400:	f7ff ff90 	bl	8001324 <NVIC_EncodePriority>
 8001404:	4602      	mov	r2, r0
 8001406:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800140a:	4611      	mov	r1, r2
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff ff5f 	bl	80012d0 <__NVIC_SetPriority>
}
 8001412:	bf00      	nop
 8001414:	3718      	adds	r7, #24
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b082      	sub	sp, #8
 800141e:	af00      	add	r7, sp, #0
 8001420:	4603      	mov	r3, r0
 8001422:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff ff35 	bl	8001298 <__NVIC_EnableIRQ>
}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	b082      	sub	sp, #8
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f7ff ffa2 	bl	8001388 <SysTick_Config>
 8001444:	4603      	mov	r3, r0
}
 8001446:	4618      	mov	r0, r3
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
	...

08001450 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001450:	b480      	push	{r7}
 8001452:	b08b      	sub	sp, #44	; 0x2c
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800145a:	2300      	movs	r3, #0
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800145e:	2300      	movs	r3, #0
 8001460:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001462:	e169      	b.n	8001738 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001464:	2201      	movs	r2, #1
 8001466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	69fa      	ldr	r2, [r7, #28]
 8001474:	4013      	ands	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	429a      	cmp	r2, r3
 800147e:	f040 8158 	bne.w	8001732 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	4a9a      	ldr	r2, [pc, #616]	; (80016f0 <HAL_GPIO_Init+0x2a0>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d05e      	beq.n	800154a <HAL_GPIO_Init+0xfa>
 800148c:	4a98      	ldr	r2, [pc, #608]	; (80016f0 <HAL_GPIO_Init+0x2a0>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d875      	bhi.n	800157e <HAL_GPIO_Init+0x12e>
 8001492:	4a98      	ldr	r2, [pc, #608]	; (80016f4 <HAL_GPIO_Init+0x2a4>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d058      	beq.n	800154a <HAL_GPIO_Init+0xfa>
 8001498:	4a96      	ldr	r2, [pc, #600]	; (80016f4 <HAL_GPIO_Init+0x2a4>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d86f      	bhi.n	800157e <HAL_GPIO_Init+0x12e>
 800149e:	4a96      	ldr	r2, [pc, #600]	; (80016f8 <HAL_GPIO_Init+0x2a8>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d052      	beq.n	800154a <HAL_GPIO_Init+0xfa>
 80014a4:	4a94      	ldr	r2, [pc, #592]	; (80016f8 <HAL_GPIO_Init+0x2a8>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d869      	bhi.n	800157e <HAL_GPIO_Init+0x12e>
 80014aa:	4a94      	ldr	r2, [pc, #592]	; (80016fc <HAL_GPIO_Init+0x2ac>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d04c      	beq.n	800154a <HAL_GPIO_Init+0xfa>
 80014b0:	4a92      	ldr	r2, [pc, #584]	; (80016fc <HAL_GPIO_Init+0x2ac>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d863      	bhi.n	800157e <HAL_GPIO_Init+0x12e>
 80014b6:	4a92      	ldr	r2, [pc, #584]	; (8001700 <HAL_GPIO_Init+0x2b0>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d046      	beq.n	800154a <HAL_GPIO_Init+0xfa>
 80014bc:	4a90      	ldr	r2, [pc, #576]	; (8001700 <HAL_GPIO_Init+0x2b0>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d85d      	bhi.n	800157e <HAL_GPIO_Init+0x12e>
 80014c2:	2b12      	cmp	r3, #18
 80014c4:	d82a      	bhi.n	800151c <HAL_GPIO_Init+0xcc>
 80014c6:	2b12      	cmp	r3, #18
 80014c8:	d859      	bhi.n	800157e <HAL_GPIO_Init+0x12e>
 80014ca:	a201      	add	r2, pc, #4	; (adr r2, 80014d0 <HAL_GPIO_Init+0x80>)
 80014cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014d0:	0800154b 	.word	0x0800154b
 80014d4:	08001525 	.word	0x08001525
 80014d8:	08001537 	.word	0x08001537
 80014dc:	08001579 	.word	0x08001579
 80014e0:	0800157f 	.word	0x0800157f
 80014e4:	0800157f 	.word	0x0800157f
 80014e8:	0800157f 	.word	0x0800157f
 80014ec:	0800157f 	.word	0x0800157f
 80014f0:	0800157f 	.word	0x0800157f
 80014f4:	0800157f 	.word	0x0800157f
 80014f8:	0800157f 	.word	0x0800157f
 80014fc:	0800157f 	.word	0x0800157f
 8001500:	0800157f 	.word	0x0800157f
 8001504:	0800157f 	.word	0x0800157f
 8001508:	0800157f 	.word	0x0800157f
 800150c:	0800157f 	.word	0x0800157f
 8001510:	0800157f 	.word	0x0800157f
 8001514:	0800152d 	.word	0x0800152d
 8001518:	08001541 	.word	0x08001541
 800151c:	4a79      	ldr	r2, [pc, #484]	; (8001704 <HAL_GPIO_Init+0x2b4>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d013      	beq.n	800154a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001522:	e02c      	b.n	800157e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	623b      	str	r3, [r7, #32]
          break;
 800152a:	e029      	b.n	8001580 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	3304      	adds	r3, #4
 8001532:	623b      	str	r3, [r7, #32]
          break;
 8001534:	e024      	b.n	8001580 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	3308      	adds	r3, #8
 800153c:	623b      	str	r3, [r7, #32]
          break;
 800153e:	e01f      	b.n	8001580 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	330c      	adds	r3, #12
 8001546:	623b      	str	r3, [r7, #32]
          break;
 8001548:	e01a      	b.n	8001580 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d102      	bne.n	8001558 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001552:	2304      	movs	r3, #4
 8001554:	623b      	str	r3, [r7, #32]
          break;
 8001556:	e013      	b.n	8001580 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d105      	bne.n	800156c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001560:	2308      	movs	r3, #8
 8001562:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	69fa      	ldr	r2, [r7, #28]
 8001568:	611a      	str	r2, [r3, #16]
          break;
 800156a:	e009      	b.n	8001580 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800156c:	2308      	movs	r3, #8
 800156e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	69fa      	ldr	r2, [r7, #28]
 8001574:	615a      	str	r2, [r3, #20]
          break;
 8001576:	e003      	b.n	8001580 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001578:	2300      	movs	r3, #0
 800157a:	623b      	str	r3, [r7, #32]
          break;
 800157c:	e000      	b.n	8001580 <HAL_GPIO_Init+0x130>
          break;
 800157e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	2bff      	cmp	r3, #255	; 0xff
 8001584:	d801      	bhi.n	800158a <HAL_GPIO_Init+0x13a>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	e001      	b.n	800158e <HAL_GPIO_Init+0x13e>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	3304      	adds	r3, #4
 800158e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	2bff      	cmp	r3, #255	; 0xff
 8001594:	d802      	bhi.n	800159c <HAL_GPIO_Init+0x14c>
 8001596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	e002      	b.n	80015a2 <HAL_GPIO_Init+0x152>
 800159c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159e:	3b08      	subs	r3, #8
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	210f      	movs	r1, #15
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	fa01 f303 	lsl.w	r3, r1, r3
 80015b0:	43db      	mvns	r3, r3
 80015b2:	401a      	ands	r2, r3
 80015b4:	6a39      	ldr	r1, [r7, #32]
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	fa01 f303 	lsl.w	r3, r1, r3
 80015bc:	431a      	orrs	r2, r3
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	f000 80b1 	beq.w	8001732 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015d0:	4b4d      	ldr	r3, [pc, #308]	; (8001708 <HAL_GPIO_Init+0x2b8>)
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	4a4c      	ldr	r2, [pc, #304]	; (8001708 <HAL_GPIO_Init+0x2b8>)
 80015d6:	f043 0301 	orr.w	r3, r3, #1
 80015da:	6193      	str	r3, [r2, #24]
 80015dc:	4b4a      	ldr	r3, [pc, #296]	; (8001708 <HAL_GPIO_Init+0x2b8>)
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	f003 0301 	and.w	r3, r3, #1
 80015e4:	60bb      	str	r3, [r7, #8]
 80015e6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015e8:	4a48      	ldr	r2, [pc, #288]	; (800170c <HAL_GPIO_Init+0x2bc>)
 80015ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ec:	089b      	lsrs	r3, r3, #2
 80015ee:	3302      	adds	r3, #2
 80015f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f8:	f003 0303 	and.w	r3, r3, #3
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	220f      	movs	r2, #15
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	43db      	mvns	r3, r3
 8001606:	68fa      	ldr	r2, [r7, #12]
 8001608:	4013      	ands	r3, r2
 800160a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a40      	ldr	r2, [pc, #256]	; (8001710 <HAL_GPIO_Init+0x2c0>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d013      	beq.n	800163c <HAL_GPIO_Init+0x1ec>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4a3f      	ldr	r2, [pc, #252]	; (8001714 <HAL_GPIO_Init+0x2c4>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d00d      	beq.n	8001638 <HAL_GPIO_Init+0x1e8>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	4a3e      	ldr	r2, [pc, #248]	; (8001718 <HAL_GPIO_Init+0x2c8>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d007      	beq.n	8001634 <HAL_GPIO_Init+0x1e4>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4a3d      	ldr	r2, [pc, #244]	; (800171c <HAL_GPIO_Init+0x2cc>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d101      	bne.n	8001630 <HAL_GPIO_Init+0x1e0>
 800162c:	2303      	movs	r3, #3
 800162e:	e006      	b.n	800163e <HAL_GPIO_Init+0x1ee>
 8001630:	2304      	movs	r3, #4
 8001632:	e004      	b.n	800163e <HAL_GPIO_Init+0x1ee>
 8001634:	2302      	movs	r3, #2
 8001636:	e002      	b.n	800163e <HAL_GPIO_Init+0x1ee>
 8001638:	2301      	movs	r3, #1
 800163a:	e000      	b.n	800163e <HAL_GPIO_Init+0x1ee>
 800163c:	2300      	movs	r3, #0
 800163e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001640:	f002 0203 	and.w	r2, r2, #3
 8001644:	0092      	lsls	r2, r2, #2
 8001646:	4093      	lsls	r3, r2
 8001648:	68fa      	ldr	r2, [r7, #12]
 800164a:	4313      	orrs	r3, r2
 800164c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800164e:	492f      	ldr	r1, [pc, #188]	; (800170c <HAL_GPIO_Init+0x2bc>)
 8001650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001652:	089b      	lsrs	r3, r3, #2
 8001654:	3302      	adds	r3, #2
 8001656:	68fa      	ldr	r2, [r7, #12]
 8001658:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d006      	beq.n	8001676 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001668:	4b2d      	ldr	r3, [pc, #180]	; (8001720 <HAL_GPIO_Init+0x2d0>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	492c      	ldr	r1, [pc, #176]	; (8001720 <HAL_GPIO_Init+0x2d0>)
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	4313      	orrs	r3, r2
 8001672:	600b      	str	r3, [r1, #0]
 8001674:	e006      	b.n	8001684 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001676:	4b2a      	ldr	r3, [pc, #168]	; (8001720 <HAL_GPIO_Init+0x2d0>)
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	43db      	mvns	r3, r3
 800167e:	4928      	ldr	r1, [pc, #160]	; (8001720 <HAL_GPIO_Init+0x2d0>)
 8001680:	4013      	ands	r3, r2
 8001682:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d006      	beq.n	800169e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001690:	4b23      	ldr	r3, [pc, #140]	; (8001720 <HAL_GPIO_Init+0x2d0>)
 8001692:	685a      	ldr	r2, [r3, #4]
 8001694:	4922      	ldr	r1, [pc, #136]	; (8001720 <HAL_GPIO_Init+0x2d0>)
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	4313      	orrs	r3, r2
 800169a:	604b      	str	r3, [r1, #4]
 800169c:	e006      	b.n	80016ac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800169e:	4b20      	ldr	r3, [pc, #128]	; (8001720 <HAL_GPIO_Init+0x2d0>)
 80016a0:	685a      	ldr	r2, [r3, #4]
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	43db      	mvns	r3, r3
 80016a6:	491e      	ldr	r1, [pc, #120]	; (8001720 <HAL_GPIO_Init+0x2d0>)
 80016a8:	4013      	ands	r3, r2
 80016aa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d006      	beq.n	80016c6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016b8:	4b19      	ldr	r3, [pc, #100]	; (8001720 <HAL_GPIO_Init+0x2d0>)
 80016ba:	689a      	ldr	r2, [r3, #8]
 80016bc:	4918      	ldr	r1, [pc, #96]	; (8001720 <HAL_GPIO_Init+0x2d0>)
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	608b      	str	r3, [r1, #8]
 80016c4:	e006      	b.n	80016d4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016c6:	4b16      	ldr	r3, [pc, #88]	; (8001720 <HAL_GPIO_Init+0x2d0>)
 80016c8:	689a      	ldr	r2, [r3, #8]
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	43db      	mvns	r3, r3
 80016ce:	4914      	ldr	r1, [pc, #80]	; (8001720 <HAL_GPIO_Init+0x2d0>)
 80016d0:	4013      	ands	r3, r2
 80016d2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d021      	beq.n	8001724 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016e0:	4b0f      	ldr	r3, [pc, #60]	; (8001720 <HAL_GPIO_Init+0x2d0>)
 80016e2:	68da      	ldr	r2, [r3, #12]
 80016e4:	490e      	ldr	r1, [pc, #56]	; (8001720 <HAL_GPIO_Init+0x2d0>)
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	60cb      	str	r3, [r1, #12]
 80016ec:	e021      	b.n	8001732 <HAL_GPIO_Init+0x2e2>
 80016ee:	bf00      	nop
 80016f0:	10320000 	.word	0x10320000
 80016f4:	10310000 	.word	0x10310000
 80016f8:	10220000 	.word	0x10220000
 80016fc:	10210000 	.word	0x10210000
 8001700:	10120000 	.word	0x10120000
 8001704:	10110000 	.word	0x10110000
 8001708:	40021000 	.word	0x40021000
 800170c:	40010000 	.word	0x40010000
 8001710:	40010800 	.word	0x40010800
 8001714:	40010c00 	.word	0x40010c00
 8001718:	40011000 	.word	0x40011000
 800171c:	40011400 	.word	0x40011400
 8001720:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001724:	4b0b      	ldr	r3, [pc, #44]	; (8001754 <HAL_GPIO_Init+0x304>)
 8001726:	68da      	ldr	r2, [r3, #12]
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	43db      	mvns	r3, r3
 800172c:	4909      	ldr	r1, [pc, #36]	; (8001754 <HAL_GPIO_Init+0x304>)
 800172e:	4013      	ands	r3, r2
 8001730:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001734:	3301      	adds	r3, #1
 8001736:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173e:	fa22 f303 	lsr.w	r3, r2, r3
 8001742:	2b00      	cmp	r3, #0
 8001744:	f47f ae8e 	bne.w	8001464 <HAL_GPIO_Init+0x14>
  }
}
 8001748:	bf00      	nop
 800174a:	bf00      	nop
 800174c:	372c      	adds	r7, #44	; 0x2c
 800174e:	46bd      	mov	sp, r7
 8001750:	bc80      	pop	{r7}
 8001752:	4770      	bx	lr
 8001754:	40010400 	.word	0x40010400

08001758 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	460b      	mov	r3, r1
 8001762:	807b      	strh	r3, [r7, #2]
 8001764:	4613      	mov	r3, r2
 8001766:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001768:	787b      	ldrb	r3, [r7, #1]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d003      	beq.n	8001776 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800176e:	887a      	ldrh	r2, [r7, #2]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001774:	e003      	b.n	800177e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001776:	887b      	ldrh	r3, [r7, #2]
 8001778:	041a      	lsls	r2, r3, #16
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	611a      	str	r2, [r3, #16]
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr

08001788 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d101      	bne.n	800179a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e26c      	b.n	8001c74 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	f000 8087 	beq.w	80018b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017a8:	4b92      	ldr	r3, [pc, #584]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f003 030c 	and.w	r3, r3, #12
 80017b0:	2b04      	cmp	r3, #4
 80017b2:	d00c      	beq.n	80017ce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017b4:	4b8f      	ldr	r3, [pc, #572]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f003 030c 	and.w	r3, r3, #12
 80017bc:	2b08      	cmp	r3, #8
 80017be:	d112      	bne.n	80017e6 <HAL_RCC_OscConfig+0x5e>
 80017c0:	4b8c      	ldr	r3, [pc, #560]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017cc:	d10b      	bne.n	80017e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ce:	4b89      	ldr	r3, [pc, #548]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d06c      	beq.n	80018b4 <HAL_RCC_OscConfig+0x12c>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d168      	bne.n	80018b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e246      	b.n	8001c74 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017ee:	d106      	bne.n	80017fe <HAL_RCC_OscConfig+0x76>
 80017f0:	4b80      	ldr	r3, [pc, #512]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a7f      	ldr	r2, [pc, #508]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 80017f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017fa:	6013      	str	r3, [r2, #0]
 80017fc:	e02e      	b.n	800185c <HAL_RCC_OscConfig+0xd4>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d10c      	bne.n	8001820 <HAL_RCC_OscConfig+0x98>
 8001806:	4b7b      	ldr	r3, [pc, #492]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a7a      	ldr	r2, [pc, #488]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 800180c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001810:	6013      	str	r3, [r2, #0]
 8001812:	4b78      	ldr	r3, [pc, #480]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a77      	ldr	r2, [pc, #476]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 8001818:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800181c:	6013      	str	r3, [r2, #0]
 800181e:	e01d      	b.n	800185c <HAL_RCC_OscConfig+0xd4>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001828:	d10c      	bne.n	8001844 <HAL_RCC_OscConfig+0xbc>
 800182a:	4b72      	ldr	r3, [pc, #456]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a71      	ldr	r2, [pc, #452]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 8001830:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001834:	6013      	str	r3, [r2, #0]
 8001836:	4b6f      	ldr	r3, [pc, #444]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a6e      	ldr	r2, [pc, #440]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 800183c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001840:	6013      	str	r3, [r2, #0]
 8001842:	e00b      	b.n	800185c <HAL_RCC_OscConfig+0xd4>
 8001844:	4b6b      	ldr	r3, [pc, #428]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a6a      	ldr	r2, [pc, #424]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 800184a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800184e:	6013      	str	r3, [r2, #0]
 8001850:	4b68      	ldr	r3, [pc, #416]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a67      	ldr	r2, [pc, #412]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 8001856:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800185a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d013      	beq.n	800188c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001864:	f7ff f8b6 	bl	80009d4 <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800186a:	e008      	b.n	800187e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800186c:	f7ff f8b2 	bl	80009d4 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b64      	cmp	r3, #100	; 0x64
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e1fa      	b.n	8001c74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800187e:	4b5d      	ldr	r3, [pc, #372]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d0f0      	beq.n	800186c <HAL_RCC_OscConfig+0xe4>
 800188a:	e014      	b.n	80018b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800188c:	f7ff f8a2 	bl	80009d4 <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001892:	e008      	b.n	80018a6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001894:	f7ff f89e 	bl	80009d4 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b64      	cmp	r3, #100	; 0x64
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e1e6      	b.n	8001c74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018a6:	4b53      	ldr	r3, [pc, #332]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1f0      	bne.n	8001894 <HAL_RCC_OscConfig+0x10c>
 80018b2:	e000      	b.n	80018b6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d063      	beq.n	800198a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018c2:	4b4c      	ldr	r3, [pc, #304]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f003 030c 	and.w	r3, r3, #12
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d00b      	beq.n	80018e6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80018ce:	4b49      	ldr	r3, [pc, #292]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f003 030c 	and.w	r3, r3, #12
 80018d6:	2b08      	cmp	r3, #8
 80018d8:	d11c      	bne.n	8001914 <HAL_RCC_OscConfig+0x18c>
 80018da:	4b46      	ldr	r3, [pc, #280]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d116      	bne.n	8001914 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018e6:	4b43      	ldr	r3, [pc, #268]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d005      	beq.n	80018fe <HAL_RCC_OscConfig+0x176>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	691b      	ldr	r3, [r3, #16]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d001      	beq.n	80018fe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e1ba      	b.n	8001c74 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018fe:	4b3d      	ldr	r3, [pc, #244]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	695b      	ldr	r3, [r3, #20]
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	4939      	ldr	r1, [pc, #228]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 800190e:	4313      	orrs	r3, r2
 8001910:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001912:	e03a      	b.n	800198a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	691b      	ldr	r3, [r3, #16]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d020      	beq.n	800195e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800191c:	4b36      	ldr	r3, [pc, #216]	; (80019f8 <HAL_RCC_OscConfig+0x270>)
 800191e:	2201      	movs	r2, #1
 8001920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001922:	f7ff f857 	bl	80009d4 <HAL_GetTick>
 8001926:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001928:	e008      	b.n	800193c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800192a:	f7ff f853 	bl	80009d4 <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	2b02      	cmp	r3, #2
 8001936:	d901      	bls.n	800193c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e19b      	b.n	8001c74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800193c:	4b2d      	ldr	r3, [pc, #180]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0302 	and.w	r3, r3, #2
 8001944:	2b00      	cmp	r3, #0
 8001946:	d0f0      	beq.n	800192a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001948:	4b2a      	ldr	r3, [pc, #168]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	695b      	ldr	r3, [r3, #20]
 8001954:	00db      	lsls	r3, r3, #3
 8001956:	4927      	ldr	r1, [pc, #156]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 8001958:	4313      	orrs	r3, r2
 800195a:	600b      	str	r3, [r1, #0]
 800195c:	e015      	b.n	800198a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800195e:	4b26      	ldr	r3, [pc, #152]	; (80019f8 <HAL_RCC_OscConfig+0x270>)
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001964:	f7ff f836 	bl	80009d4 <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800196c:	f7ff f832 	bl	80009d4 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b02      	cmp	r3, #2
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e17a      	b.n	8001c74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800197e:	4b1d      	ldr	r3, [pc, #116]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	2b00      	cmp	r3, #0
 8001988:	d1f0      	bne.n	800196c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0308 	and.w	r3, r3, #8
 8001992:	2b00      	cmp	r3, #0
 8001994:	d03a      	beq.n	8001a0c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	699b      	ldr	r3, [r3, #24]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d019      	beq.n	80019d2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800199e:	4b17      	ldr	r3, [pc, #92]	; (80019fc <HAL_RCC_OscConfig+0x274>)
 80019a0:	2201      	movs	r2, #1
 80019a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019a4:	f7ff f816 	bl	80009d4 <HAL_GetTick>
 80019a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019aa:	e008      	b.n	80019be <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019ac:	f7ff f812 	bl	80009d4 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e15a      	b.n	8001c74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019be:	4b0d      	ldr	r3, [pc, #52]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 80019c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d0f0      	beq.n	80019ac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80019ca:	2001      	movs	r0, #1
 80019cc:	f000 faa6 	bl	8001f1c <RCC_Delay>
 80019d0:	e01c      	b.n	8001a0c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019d2:	4b0a      	ldr	r3, [pc, #40]	; (80019fc <HAL_RCC_OscConfig+0x274>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019d8:	f7fe fffc 	bl	80009d4 <HAL_GetTick>
 80019dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019de:	e00f      	b.n	8001a00 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019e0:	f7fe fff8 	bl	80009d4 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d908      	bls.n	8001a00 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e140      	b.n	8001c74 <HAL_RCC_OscConfig+0x4ec>
 80019f2:	bf00      	nop
 80019f4:	40021000 	.word	0x40021000
 80019f8:	42420000 	.word	0x42420000
 80019fc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a00:	4b9e      	ldr	r3, [pc, #632]	; (8001c7c <HAL_RCC_OscConfig+0x4f4>)
 8001a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a04:	f003 0302 	and.w	r3, r3, #2
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d1e9      	bne.n	80019e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0304 	and.w	r3, r3, #4
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	f000 80a6 	beq.w	8001b66 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a1e:	4b97      	ldr	r3, [pc, #604]	; (8001c7c <HAL_RCC_OscConfig+0x4f4>)
 8001a20:	69db      	ldr	r3, [r3, #28]
 8001a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d10d      	bne.n	8001a46 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a2a:	4b94      	ldr	r3, [pc, #592]	; (8001c7c <HAL_RCC_OscConfig+0x4f4>)
 8001a2c:	69db      	ldr	r3, [r3, #28]
 8001a2e:	4a93      	ldr	r2, [pc, #588]	; (8001c7c <HAL_RCC_OscConfig+0x4f4>)
 8001a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a34:	61d3      	str	r3, [r2, #28]
 8001a36:	4b91      	ldr	r3, [pc, #580]	; (8001c7c <HAL_RCC_OscConfig+0x4f4>)
 8001a38:	69db      	ldr	r3, [r3, #28]
 8001a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a3e:	60bb      	str	r3, [r7, #8]
 8001a40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a42:	2301      	movs	r3, #1
 8001a44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a46:	4b8e      	ldr	r3, [pc, #568]	; (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d118      	bne.n	8001a84 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a52:	4b8b      	ldr	r3, [pc, #556]	; (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a8a      	ldr	r2, [pc, #552]	; (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001a58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a5e:	f7fe ffb9 	bl	80009d4 <HAL_GetTick>
 8001a62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a64:	e008      	b.n	8001a78 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a66:	f7fe ffb5 	bl	80009d4 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b64      	cmp	r3, #100	; 0x64
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e0fd      	b.n	8001c74 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a78:	4b81      	ldr	r3, [pc, #516]	; (8001c80 <HAL_RCC_OscConfig+0x4f8>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d0f0      	beq.n	8001a66 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d106      	bne.n	8001a9a <HAL_RCC_OscConfig+0x312>
 8001a8c:	4b7b      	ldr	r3, [pc, #492]	; (8001c7c <HAL_RCC_OscConfig+0x4f4>)
 8001a8e:	6a1b      	ldr	r3, [r3, #32]
 8001a90:	4a7a      	ldr	r2, [pc, #488]	; (8001c7c <HAL_RCC_OscConfig+0x4f4>)
 8001a92:	f043 0301 	orr.w	r3, r3, #1
 8001a96:	6213      	str	r3, [r2, #32]
 8001a98:	e02d      	b.n	8001af6 <HAL_RCC_OscConfig+0x36e>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	68db      	ldr	r3, [r3, #12]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d10c      	bne.n	8001abc <HAL_RCC_OscConfig+0x334>
 8001aa2:	4b76      	ldr	r3, [pc, #472]	; (8001c7c <HAL_RCC_OscConfig+0x4f4>)
 8001aa4:	6a1b      	ldr	r3, [r3, #32]
 8001aa6:	4a75      	ldr	r2, [pc, #468]	; (8001c7c <HAL_RCC_OscConfig+0x4f4>)
 8001aa8:	f023 0301 	bic.w	r3, r3, #1
 8001aac:	6213      	str	r3, [r2, #32]
 8001aae:	4b73      	ldr	r3, [pc, #460]	; (8001c7c <HAL_RCC_OscConfig+0x4f4>)
 8001ab0:	6a1b      	ldr	r3, [r3, #32]
 8001ab2:	4a72      	ldr	r2, [pc, #456]	; (8001c7c <HAL_RCC_OscConfig+0x4f4>)
 8001ab4:	f023 0304 	bic.w	r3, r3, #4
 8001ab8:	6213      	str	r3, [r2, #32]
 8001aba:	e01c      	b.n	8001af6 <HAL_RCC_OscConfig+0x36e>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	2b05      	cmp	r3, #5
 8001ac2:	d10c      	bne.n	8001ade <HAL_RCC_OscConfig+0x356>
 8001ac4:	4b6d      	ldr	r3, [pc, #436]	; (8001c7c <HAL_RCC_OscConfig+0x4f4>)
 8001ac6:	6a1b      	ldr	r3, [r3, #32]
 8001ac8:	4a6c      	ldr	r2, [pc, #432]	; (8001c7c <HAL_RCC_OscConfig+0x4f4>)
 8001aca:	f043 0304 	orr.w	r3, r3, #4
 8001ace:	6213      	str	r3, [r2, #32]
 8001ad0:	4b6a      	ldr	r3, [pc, #424]	; (8001c7c <HAL_RCC_OscConfig+0x4f4>)
 8001ad2:	6a1b      	ldr	r3, [r3, #32]
 8001ad4:	4a69      	ldr	r2, [pc, #420]	; (8001c7c <HAL_RCC_OscConfig+0x4f4>)
 8001ad6:	f043 0301 	orr.w	r3, r3, #1
 8001ada:	6213      	str	r3, [r2, #32]
 8001adc:	e00b      	b.n	8001af6 <HAL_RCC_OscConfig+0x36e>
 8001ade:	4b67      	ldr	r3, [pc, #412]	; (8001c7c <HAL_RCC_OscConfig+0x4f4>)
 8001ae0:	6a1b      	ldr	r3, [r3, #32]
 8001ae2:	4a66      	ldr	r2, [pc, #408]	; (8001c7c <HAL_RCC_OscConfig+0x4f4>)
 8001ae4:	f023 0301 	bic.w	r3, r3, #1
 8001ae8:	6213      	str	r3, [r2, #32]
 8001aea:	4b64      	ldr	r3, [pc, #400]	; (8001c7c <HAL_RCC_OscConfig+0x4f4>)
 8001aec:	6a1b      	ldr	r3, [r3, #32]
 8001aee:	4a63      	ldr	r2, [pc, #396]	; (8001c7c <HAL_RCC_OscConfig+0x4f4>)
 8001af0:	f023 0304 	bic.w	r3, r3, #4
 8001af4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d015      	beq.n	8001b2a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001afe:	f7fe ff69 	bl	80009d4 <HAL_GetTick>
 8001b02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b04:	e00a      	b.n	8001b1c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b06:	f7fe ff65 	bl	80009d4 <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d901      	bls.n	8001b1c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e0ab      	b.n	8001c74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b1c:	4b57      	ldr	r3, [pc, #348]	; (8001c7c <HAL_RCC_OscConfig+0x4f4>)
 8001b1e:	6a1b      	ldr	r3, [r3, #32]
 8001b20:	f003 0302 	and.w	r3, r3, #2
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d0ee      	beq.n	8001b06 <HAL_RCC_OscConfig+0x37e>
 8001b28:	e014      	b.n	8001b54 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b2a:	f7fe ff53 	bl	80009d4 <HAL_GetTick>
 8001b2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b30:	e00a      	b.n	8001b48 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b32:	f7fe ff4f 	bl	80009d4 <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d901      	bls.n	8001b48 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e095      	b.n	8001c74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b48:	4b4c      	ldr	r3, [pc, #304]	; (8001c7c <HAL_RCC_OscConfig+0x4f4>)
 8001b4a:	6a1b      	ldr	r3, [r3, #32]
 8001b4c:	f003 0302 	and.w	r3, r3, #2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d1ee      	bne.n	8001b32 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b54:	7dfb      	ldrb	r3, [r7, #23]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d105      	bne.n	8001b66 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b5a:	4b48      	ldr	r3, [pc, #288]	; (8001c7c <HAL_RCC_OscConfig+0x4f4>)
 8001b5c:	69db      	ldr	r3, [r3, #28]
 8001b5e:	4a47      	ldr	r2, [pc, #284]	; (8001c7c <HAL_RCC_OscConfig+0x4f4>)
 8001b60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b64:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	69db      	ldr	r3, [r3, #28]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	f000 8081 	beq.w	8001c72 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b70:	4b42      	ldr	r3, [pc, #264]	; (8001c7c <HAL_RCC_OscConfig+0x4f4>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f003 030c 	and.w	r3, r3, #12
 8001b78:	2b08      	cmp	r3, #8
 8001b7a:	d061      	beq.n	8001c40 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	69db      	ldr	r3, [r3, #28]
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d146      	bne.n	8001c12 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b84:	4b3f      	ldr	r3, [pc, #252]	; (8001c84 <HAL_RCC_OscConfig+0x4fc>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b8a:	f7fe ff23 	bl	80009d4 <HAL_GetTick>
 8001b8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b90:	e008      	b.n	8001ba4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b92:	f7fe ff1f 	bl	80009d4 <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d901      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e067      	b.n	8001c74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ba4:	4b35      	ldr	r3, [pc, #212]	; (8001c7c <HAL_RCC_OscConfig+0x4f4>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d1f0      	bne.n	8001b92 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a1b      	ldr	r3, [r3, #32]
 8001bb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bb8:	d108      	bne.n	8001bcc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001bba:	4b30      	ldr	r3, [pc, #192]	; (8001c7c <HAL_RCC_OscConfig+0x4f4>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	492d      	ldr	r1, [pc, #180]	; (8001c7c <HAL_RCC_OscConfig+0x4f4>)
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bcc:	4b2b      	ldr	r3, [pc, #172]	; (8001c7c <HAL_RCC_OscConfig+0x4f4>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a19      	ldr	r1, [r3, #32]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bdc:	430b      	orrs	r3, r1
 8001bde:	4927      	ldr	r1, [pc, #156]	; (8001c7c <HAL_RCC_OscConfig+0x4f4>)
 8001be0:	4313      	orrs	r3, r2
 8001be2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001be4:	4b27      	ldr	r3, [pc, #156]	; (8001c84 <HAL_RCC_OscConfig+0x4fc>)
 8001be6:	2201      	movs	r2, #1
 8001be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bea:	f7fe fef3 	bl	80009d4 <HAL_GetTick>
 8001bee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bf0:	e008      	b.n	8001c04 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bf2:	f7fe feef 	bl	80009d4 <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e037      	b.n	8001c74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c04:	4b1d      	ldr	r3, [pc, #116]	; (8001c7c <HAL_RCC_OscConfig+0x4f4>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d0f0      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x46a>
 8001c10:	e02f      	b.n	8001c72 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c12:	4b1c      	ldr	r3, [pc, #112]	; (8001c84 <HAL_RCC_OscConfig+0x4fc>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c18:	f7fe fedc 	bl	80009d4 <HAL_GetTick>
 8001c1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c1e:	e008      	b.n	8001c32 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c20:	f7fe fed8 	bl	80009d4 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e020      	b.n	8001c74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c32:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <HAL_RCC_OscConfig+0x4f4>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d1f0      	bne.n	8001c20 <HAL_RCC_OscConfig+0x498>
 8001c3e:	e018      	b.n	8001c72 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	69db      	ldr	r3, [r3, #28]
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d101      	bne.n	8001c4c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e013      	b.n	8001c74 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c4c:	4b0b      	ldr	r3, [pc, #44]	; (8001c7c <HAL_RCC_OscConfig+0x4f4>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a1b      	ldr	r3, [r3, #32]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d106      	bne.n	8001c6e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d001      	beq.n	8001c72 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e000      	b.n	8001c74 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001c72:	2300      	movs	r3, #0
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3718      	adds	r7, #24
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	40007000 	.word	0x40007000
 8001c84:	42420060 	.word	0x42420060

08001c88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d101      	bne.n	8001c9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e0d0      	b.n	8001e3e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c9c:	4b6a      	ldr	r3, [pc, #424]	; (8001e48 <HAL_RCC_ClockConfig+0x1c0>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0307 	and.w	r3, r3, #7
 8001ca4:	683a      	ldr	r2, [r7, #0]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d910      	bls.n	8001ccc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001caa:	4b67      	ldr	r3, [pc, #412]	; (8001e48 <HAL_RCC_ClockConfig+0x1c0>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f023 0207 	bic.w	r2, r3, #7
 8001cb2:	4965      	ldr	r1, [pc, #404]	; (8001e48 <HAL_RCC_ClockConfig+0x1c0>)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cba:	4b63      	ldr	r3, [pc, #396]	; (8001e48 <HAL_RCC_ClockConfig+0x1c0>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	683a      	ldr	r2, [r7, #0]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d001      	beq.n	8001ccc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e0b8      	b.n	8001e3e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0302 	and.w	r3, r3, #2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d020      	beq.n	8001d1a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0304 	and.w	r3, r3, #4
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d005      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ce4:	4b59      	ldr	r3, [pc, #356]	; (8001e4c <HAL_RCC_ClockConfig+0x1c4>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	4a58      	ldr	r2, [pc, #352]	; (8001e4c <HAL_RCC_ClockConfig+0x1c4>)
 8001cea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001cee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0308 	and.w	r3, r3, #8
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d005      	beq.n	8001d08 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cfc:	4b53      	ldr	r3, [pc, #332]	; (8001e4c <HAL_RCC_ClockConfig+0x1c4>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	4a52      	ldr	r2, [pc, #328]	; (8001e4c <HAL_RCC_ClockConfig+0x1c4>)
 8001d02:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d06:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d08:	4b50      	ldr	r3, [pc, #320]	; (8001e4c <HAL_RCC_ClockConfig+0x1c4>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	494d      	ldr	r1, [pc, #308]	; (8001e4c <HAL_RCC_ClockConfig+0x1c4>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d040      	beq.n	8001da8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d107      	bne.n	8001d3e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d2e:	4b47      	ldr	r3, [pc, #284]	; (8001e4c <HAL_RCC_ClockConfig+0x1c4>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d115      	bne.n	8001d66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e07f      	b.n	8001e3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d107      	bne.n	8001d56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d46:	4b41      	ldr	r3, [pc, #260]	; (8001e4c <HAL_RCC_ClockConfig+0x1c4>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d109      	bne.n	8001d66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e073      	b.n	8001e3e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d56:	4b3d      	ldr	r3, [pc, #244]	; (8001e4c <HAL_RCC_ClockConfig+0x1c4>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d101      	bne.n	8001d66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e06b      	b.n	8001e3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d66:	4b39      	ldr	r3, [pc, #228]	; (8001e4c <HAL_RCC_ClockConfig+0x1c4>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f023 0203 	bic.w	r2, r3, #3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	4936      	ldr	r1, [pc, #216]	; (8001e4c <HAL_RCC_ClockConfig+0x1c4>)
 8001d74:	4313      	orrs	r3, r2
 8001d76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d78:	f7fe fe2c 	bl	80009d4 <HAL_GetTick>
 8001d7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d7e:	e00a      	b.n	8001d96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d80:	f7fe fe28 	bl	80009d4 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e053      	b.n	8001e3e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d96:	4b2d      	ldr	r3, [pc, #180]	; (8001e4c <HAL_RCC_ClockConfig+0x1c4>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f003 020c 	and.w	r2, r3, #12
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d1eb      	bne.n	8001d80 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001da8:	4b27      	ldr	r3, [pc, #156]	; (8001e48 <HAL_RCC_ClockConfig+0x1c0>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0307 	and.w	r3, r3, #7
 8001db0:	683a      	ldr	r2, [r7, #0]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d210      	bcs.n	8001dd8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001db6:	4b24      	ldr	r3, [pc, #144]	; (8001e48 <HAL_RCC_ClockConfig+0x1c0>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f023 0207 	bic.w	r2, r3, #7
 8001dbe:	4922      	ldr	r1, [pc, #136]	; (8001e48 <HAL_RCC_ClockConfig+0x1c0>)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dc6:	4b20      	ldr	r3, [pc, #128]	; (8001e48 <HAL_RCC_ClockConfig+0x1c0>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0307 	and.w	r3, r3, #7
 8001dce:	683a      	ldr	r2, [r7, #0]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d001      	beq.n	8001dd8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e032      	b.n	8001e3e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0304 	and.w	r3, r3, #4
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d008      	beq.n	8001df6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001de4:	4b19      	ldr	r3, [pc, #100]	; (8001e4c <HAL_RCC_ClockConfig+0x1c4>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	4916      	ldr	r1, [pc, #88]	; (8001e4c <HAL_RCC_ClockConfig+0x1c4>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0308 	and.w	r3, r3, #8
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d009      	beq.n	8001e16 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e02:	4b12      	ldr	r3, [pc, #72]	; (8001e4c <HAL_RCC_ClockConfig+0x1c4>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	00db      	lsls	r3, r3, #3
 8001e10:	490e      	ldr	r1, [pc, #56]	; (8001e4c <HAL_RCC_ClockConfig+0x1c4>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e16:	f000 f821 	bl	8001e5c <HAL_RCC_GetSysClockFreq>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <HAL_RCC_ClockConfig+0x1c4>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	091b      	lsrs	r3, r3, #4
 8001e22:	f003 030f 	and.w	r3, r3, #15
 8001e26:	490a      	ldr	r1, [pc, #40]	; (8001e50 <HAL_RCC_ClockConfig+0x1c8>)
 8001e28:	5ccb      	ldrb	r3, [r1, r3]
 8001e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e2e:	4a09      	ldr	r2, [pc, #36]	; (8001e54 <HAL_RCC_ClockConfig+0x1cc>)
 8001e30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e32:	4b09      	ldr	r3, [pc, #36]	; (8001e58 <HAL_RCC_ClockConfig+0x1d0>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7fe fd8a 	bl	8000950 <HAL_InitTick>

  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3710      	adds	r7, #16
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40022000 	.word	0x40022000
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	080029dc 	.word	0x080029dc
 8001e54:	20000018 	.word	0x20000018
 8001e58:	2000001c 	.word	0x2000001c

08001e5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e5c:	b490      	push	{r4, r7}
 8001e5e:	b08a      	sub	sp, #40	; 0x28
 8001e60:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001e62:	4b2a      	ldr	r3, [pc, #168]	; (8001f0c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001e64:	1d3c      	adds	r4, r7, #4
 8001e66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001e6c:	f240 2301 	movw	r3, #513	; 0x201
 8001e70:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e72:	2300      	movs	r3, #0
 8001e74:	61fb      	str	r3, [r7, #28]
 8001e76:	2300      	movs	r3, #0
 8001e78:	61bb      	str	r3, [r7, #24]
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e7e:	2300      	movs	r3, #0
 8001e80:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001e82:	2300      	movs	r3, #0
 8001e84:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e86:	4b22      	ldr	r3, [pc, #136]	; (8001f10 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	f003 030c 	and.w	r3, r3, #12
 8001e92:	2b04      	cmp	r3, #4
 8001e94:	d002      	beq.n	8001e9c <HAL_RCC_GetSysClockFreq+0x40>
 8001e96:	2b08      	cmp	r3, #8
 8001e98:	d003      	beq.n	8001ea2 <HAL_RCC_GetSysClockFreq+0x46>
 8001e9a:	e02d      	b.n	8001ef8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e9c:	4b1d      	ldr	r3, [pc, #116]	; (8001f14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e9e:	623b      	str	r3, [r7, #32]
      break;
 8001ea0:	e02d      	b.n	8001efe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	0c9b      	lsrs	r3, r3, #18
 8001ea6:	f003 030f 	and.w	r3, r3, #15
 8001eaa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001eae:	4413      	add	r3, r2
 8001eb0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001eb4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d013      	beq.n	8001ee8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ec0:	4b13      	ldr	r3, [pc, #76]	; (8001f10 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	0c5b      	lsrs	r3, r3, #17
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001ece:	4413      	add	r3, r2
 8001ed0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001ed4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	4a0e      	ldr	r2, [pc, #56]	; (8001f14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001eda:	fb02 f203 	mul.w	r2, r2, r3
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ee6:	e004      	b.n	8001ef2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	4a0b      	ldr	r2, [pc, #44]	; (8001f18 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001eec:	fb02 f303 	mul.w	r3, r2, r3
 8001ef0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef4:	623b      	str	r3, [r7, #32]
      break;
 8001ef6:	e002      	b.n	8001efe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ef8:	4b06      	ldr	r3, [pc, #24]	; (8001f14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001efa:	623b      	str	r3, [r7, #32]
      break;
 8001efc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001efe:	6a3b      	ldr	r3, [r7, #32]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3728      	adds	r7, #40	; 0x28
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bc90      	pop	{r4, r7}
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	080029cc 	.word	0x080029cc
 8001f10:	40021000 	.word	0x40021000
 8001f14:	007a1200 	.word	0x007a1200
 8001f18:	003d0900 	.word	0x003d0900

08001f1c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f24:	4b0a      	ldr	r3, [pc, #40]	; (8001f50 <RCC_Delay+0x34>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a0a      	ldr	r2, [pc, #40]	; (8001f54 <RCC_Delay+0x38>)
 8001f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2e:	0a5b      	lsrs	r3, r3, #9
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	fb02 f303 	mul.w	r3, r2, r3
 8001f36:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f38:	bf00      	nop
  }
  while (Delay --);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	1e5a      	subs	r2, r3, #1
 8001f3e:	60fa      	str	r2, [r7, #12]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d1f9      	bne.n	8001f38 <RCC_Delay+0x1c>
}
 8001f44:	bf00      	nop
 8001f46:	bf00      	nop
 8001f48:	3714      	adds	r7, #20
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bc80      	pop	{r7}
 8001f4e:	4770      	bx	lr
 8001f50:	20000018 	.word	0x20000018
 8001f54:	10624dd3 	.word	0x10624dd3

08001f58 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001f60:	2300      	movs	r3, #0
 8001f62:	613b      	str	r3, [r7, #16]
 8001f64:	2300      	movs	r3, #0
 8001f66:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0301 	and.w	r3, r3, #1
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d07d      	beq.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001f74:	2300      	movs	r3, #0
 8001f76:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f78:	4b4f      	ldr	r3, [pc, #316]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f7a:	69db      	ldr	r3, [r3, #28]
 8001f7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d10d      	bne.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f84:	4b4c      	ldr	r3, [pc, #304]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f86:	69db      	ldr	r3, [r3, #28]
 8001f88:	4a4b      	ldr	r2, [pc, #300]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f8e:	61d3      	str	r3, [r2, #28]
 8001f90:	4b49      	ldr	r3, [pc, #292]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f92:	69db      	ldr	r3, [r3, #28]
 8001f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f98:	60bb      	str	r3, [r7, #8]
 8001f9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa0:	4b46      	ldr	r3, [pc, #280]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d118      	bne.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fac:	4b43      	ldr	r3, [pc, #268]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a42      	ldr	r2, [pc, #264]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001fb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fb6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fb8:	f7fe fd0c 	bl	80009d4 <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fc0:	f7fe fd08 	bl	80009d4 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b64      	cmp	r3, #100	; 0x64
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e06d      	b.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fd2:	4b3a      	ldr	r3, [pc, #232]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d0f0      	beq.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001fde:	4b36      	ldr	r3, [pc, #216]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fe0:	6a1b      	ldr	r3, [r3, #32]
 8001fe2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fe6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d02e      	beq.n	800204c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d027      	beq.n	800204c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ffc:	4b2e      	ldr	r3, [pc, #184]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ffe:	6a1b      	ldr	r3, [r3, #32]
 8002000:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002004:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002006:	4b2e      	ldr	r3, [pc, #184]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002008:	2201      	movs	r2, #1
 800200a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800200c:	4b2c      	ldr	r3, [pc, #176]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800200e:	2200      	movs	r2, #0
 8002010:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002012:	4a29      	ldr	r2, [pc, #164]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	2b00      	cmp	r3, #0
 8002020:	d014      	beq.n	800204c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002022:	f7fe fcd7 	bl	80009d4 <HAL_GetTick>
 8002026:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002028:	e00a      	b.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800202a:	f7fe fcd3 	bl	80009d4 <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	f241 3288 	movw	r2, #5000	; 0x1388
 8002038:	4293      	cmp	r3, r2
 800203a:	d901      	bls.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e036      	b.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002040:	4b1d      	ldr	r3, [pc, #116]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002042:	6a1b      	ldr	r3, [r3, #32]
 8002044:	f003 0302 	and.w	r3, r3, #2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d0ee      	beq.n	800202a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800204c:	4b1a      	ldr	r3, [pc, #104]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800204e:	6a1b      	ldr	r3, [r3, #32]
 8002050:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	4917      	ldr	r1, [pc, #92]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800205a:	4313      	orrs	r3, r2
 800205c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800205e:	7dfb      	ldrb	r3, [r7, #23]
 8002060:	2b01      	cmp	r3, #1
 8002062:	d105      	bne.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002064:	4b14      	ldr	r3, [pc, #80]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002066:	69db      	ldr	r3, [r3, #28]
 8002068:	4a13      	ldr	r2, [pc, #76]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800206a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800206e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d008      	beq.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800207c:	4b0e      	ldr	r3, [pc, #56]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	490b      	ldr	r1, [pc, #44]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800208a:	4313      	orrs	r3, r2
 800208c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0310 	and.w	r3, r3, #16
 8002096:	2b00      	cmp	r3, #0
 8002098:	d008      	beq.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800209a:	4b07      	ldr	r3, [pc, #28]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	4904      	ldr	r1, [pc, #16]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3718      	adds	r7, #24
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	40021000 	.word	0x40021000
 80020bc:	40007000 	.word	0x40007000
 80020c0:	42420440 	.word	0x42420440

080020c4 <__errno>:
 80020c4:	4b01      	ldr	r3, [pc, #4]	; (80020cc <__errno+0x8>)
 80020c6:	6818      	ldr	r0, [r3, #0]
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	20000024 	.word	0x20000024

080020d0 <__libc_init_array>:
 80020d0:	b570      	push	{r4, r5, r6, lr}
 80020d2:	2600      	movs	r6, #0
 80020d4:	4d0c      	ldr	r5, [pc, #48]	; (8002108 <__libc_init_array+0x38>)
 80020d6:	4c0d      	ldr	r4, [pc, #52]	; (800210c <__libc_init_array+0x3c>)
 80020d8:	1b64      	subs	r4, r4, r5
 80020da:	10a4      	asrs	r4, r4, #2
 80020dc:	42a6      	cmp	r6, r4
 80020de:	d109      	bne.n	80020f4 <__libc_init_array+0x24>
 80020e0:	f000 fc5c 	bl	800299c <_init>
 80020e4:	2600      	movs	r6, #0
 80020e6:	4d0a      	ldr	r5, [pc, #40]	; (8002110 <__libc_init_array+0x40>)
 80020e8:	4c0a      	ldr	r4, [pc, #40]	; (8002114 <__libc_init_array+0x44>)
 80020ea:	1b64      	subs	r4, r4, r5
 80020ec:	10a4      	asrs	r4, r4, #2
 80020ee:	42a6      	cmp	r6, r4
 80020f0:	d105      	bne.n	80020fe <__libc_init_array+0x2e>
 80020f2:	bd70      	pop	{r4, r5, r6, pc}
 80020f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80020f8:	4798      	blx	r3
 80020fa:	3601      	adds	r6, #1
 80020fc:	e7ee      	b.n	80020dc <__libc_init_array+0xc>
 80020fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002102:	4798      	blx	r3
 8002104:	3601      	adds	r6, #1
 8002106:	e7f2      	b.n	80020ee <__libc_init_array+0x1e>
 8002108:	08002a20 	.word	0x08002a20
 800210c:	08002a20 	.word	0x08002a20
 8002110:	08002a20 	.word	0x08002a20
 8002114:	08002a24 	.word	0x08002a24

08002118 <memset>:
 8002118:	4603      	mov	r3, r0
 800211a:	4402      	add	r2, r0
 800211c:	4293      	cmp	r3, r2
 800211e:	d100      	bne.n	8002122 <memset+0xa>
 8002120:	4770      	bx	lr
 8002122:	f803 1b01 	strb.w	r1, [r3], #1
 8002126:	e7f9      	b.n	800211c <memset+0x4>

08002128 <siprintf>:
 8002128:	b40e      	push	{r1, r2, r3}
 800212a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800212e:	b500      	push	{lr}
 8002130:	b09c      	sub	sp, #112	; 0x70
 8002132:	ab1d      	add	r3, sp, #116	; 0x74
 8002134:	9002      	str	r0, [sp, #8]
 8002136:	9006      	str	r0, [sp, #24]
 8002138:	9107      	str	r1, [sp, #28]
 800213a:	9104      	str	r1, [sp, #16]
 800213c:	4808      	ldr	r0, [pc, #32]	; (8002160 <siprintf+0x38>)
 800213e:	4909      	ldr	r1, [pc, #36]	; (8002164 <siprintf+0x3c>)
 8002140:	f853 2b04 	ldr.w	r2, [r3], #4
 8002144:	9105      	str	r1, [sp, #20]
 8002146:	6800      	ldr	r0, [r0, #0]
 8002148:	a902      	add	r1, sp, #8
 800214a:	9301      	str	r3, [sp, #4]
 800214c:	f000 f868 	bl	8002220 <_svfiprintf_r>
 8002150:	2200      	movs	r2, #0
 8002152:	9b02      	ldr	r3, [sp, #8]
 8002154:	701a      	strb	r2, [r3, #0]
 8002156:	b01c      	add	sp, #112	; 0x70
 8002158:	f85d eb04 	ldr.w	lr, [sp], #4
 800215c:	b003      	add	sp, #12
 800215e:	4770      	bx	lr
 8002160:	20000024 	.word	0x20000024
 8002164:	ffff0208 	.word	0xffff0208

08002168 <__ssputs_r>:
 8002168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800216c:	688e      	ldr	r6, [r1, #8]
 800216e:	4682      	mov	sl, r0
 8002170:	429e      	cmp	r6, r3
 8002172:	460c      	mov	r4, r1
 8002174:	4690      	mov	r8, r2
 8002176:	461f      	mov	r7, r3
 8002178:	d838      	bhi.n	80021ec <__ssputs_r+0x84>
 800217a:	898a      	ldrh	r2, [r1, #12]
 800217c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002180:	d032      	beq.n	80021e8 <__ssputs_r+0x80>
 8002182:	6825      	ldr	r5, [r4, #0]
 8002184:	6909      	ldr	r1, [r1, #16]
 8002186:	3301      	adds	r3, #1
 8002188:	eba5 0901 	sub.w	r9, r5, r1
 800218c:	6965      	ldr	r5, [r4, #20]
 800218e:	444b      	add	r3, r9
 8002190:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002194:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002198:	106d      	asrs	r5, r5, #1
 800219a:	429d      	cmp	r5, r3
 800219c:	bf38      	it	cc
 800219e:	461d      	movcc	r5, r3
 80021a0:	0553      	lsls	r3, r2, #21
 80021a2:	d531      	bpl.n	8002208 <__ssputs_r+0xa0>
 80021a4:	4629      	mov	r1, r5
 80021a6:	f000 fb53 	bl	8002850 <_malloc_r>
 80021aa:	4606      	mov	r6, r0
 80021ac:	b950      	cbnz	r0, 80021c4 <__ssputs_r+0x5c>
 80021ae:	230c      	movs	r3, #12
 80021b0:	f04f 30ff 	mov.w	r0, #4294967295
 80021b4:	f8ca 3000 	str.w	r3, [sl]
 80021b8:	89a3      	ldrh	r3, [r4, #12]
 80021ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021be:	81a3      	strh	r3, [r4, #12]
 80021c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021c4:	464a      	mov	r2, r9
 80021c6:	6921      	ldr	r1, [r4, #16]
 80021c8:	f000 face 	bl	8002768 <memcpy>
 80021cc:	89a3      	ldrh	r3, [r4, #12]
 80021ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80021d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021d6:	81a3      	strh	r3, [r4, #12]
 80021d8:	6126      	str	r6, [r4, #16]
 80021da:	444e      	add	r6, r9
 80021dc:	6026      	str	r6, [r4, #0]
 80021de:	463e      	mov	r6, r7
 80021e0:	6165      	str	r5, [r4, #20]
 80021e2:	eba5 0509 	sub.w	r5, r5, r9
 80021e6:	60a5      	str	r5, [r4, #8]
 80021e8:	42be      	cmp	r6, r7
 80021ea:	d900      	bls.n	80021ee <__ssputs_r+0x86>
 80021ec:	463e      	mov	r6, r7
 80021ee:	4632      	mov	r2, r6
 80021f0:	4641      	mov	r1, r8
 80021f2:	6820      	ldr	r0, [r4, #0]
 80021f4:	f000 fac6 	bl	8002784 <memmove>
 80021f8:	68a3      	ldr	r3, [r4, #8]
 80021fa:	6822      	ldr	r2, [r4, #0]
 80021fc:	1b9b      	subs	r3, r3, r6
 80021fe:	4432      	add	r2, r6
 8002200:	2000      	movs	r0, #0
 8002202:	60a3      	str	r3, [r4, #8]
 8002204:	6022      	str	r2, [r4, #0]
 8002206:	e7db      	b.n	80021c0 <__ssputs_r+0x58>
 8002208:	462a      	mov	r2, r5
 800220a:	f000 fb7b 	bl	8002904 <_realloc_r>
 800220e:	4606      	mov	r6, r0
 8002210:	2800      	cmp	r0, #0
 8002212:	d1e1      	bne.n	80021d8 <__ssputs_r+0x70>
 8002214:	4650      	mov	r0, sl
 8002216:	6921      	ldr	r1, [r4, #16]
 8002218:	f000 face 	bl	80027b8 <_free_r>
 800221c:	e7c7      	b.n	80021ae <__ssputs_r+0x46>
	...

08002220 <_svfiprintf_r>:
 8002220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002224:	4698      	mov	r8, r3
 8002226:	898b      	ldrh	r3, [r1, #12]
 8002228:	4607      	mov	r7, r0
 800222a:	061b      	lsls	r3, r3, #24
 800222c:	460d      	mov	r5, r1
 800222e:	4614      	mov	r4, r2
 8002230:	b09d      	sub	sp, #116	; 0x74
 8002232:	d50e      	bpl.n	8002252 <_svfiprintf_r+0x32>
 8002234:	690b      	ldr	r3, [r1, #16]
 8002236:	b963      	cbnz	r3, 8002252 <_svfiprintf_r+0x32>
 8002238:	2140      	movs	r1, #64	; 0x40
 800223a:	f000 fb09 	bl	8002850 <_malloc_r>
 800223e:	6028      	str	r0, [r5, #0]
 8002240:	6128      	str	r0, [r5, #16]
 8002242:	b920      	cbnz	r0, 800224e <_svfiprintf_r+0x2e>
 8002244:	230c      	movs	r3, #12
 8002246:	603b      	str	r3, [r7, #0]
 8002248:	f04f 30ff 	mov.w	r0, #4294967295
 800224c:	e0d1      	b.n	80023f2 <_svfiprintf_r+0x1d2>
 800224e:	2340      	movs	r3, #64	; 0x40
 8002250:	616b      	str	r3, [r5, #20]
 8002252:	2300      	movs	r3, #0
 8002254:	9309      	str	r3, [sp, #36]	; 0x24
 8002256:	2320      	movs	r3, #32
 8002258:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800225c:	2330      	movs	r3, #48	; 0x30
 800225e:	f04f 0901 	mov.w	r9, #1
 8002262:	f8cd 800c 	str.w	r8, [sp, #12]
 8002266:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800240c <_svfiprintf_r+0x1ec>
 800226a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800226e:	4623      	mov	r3, r4
 8002270:	469a      	mov	sl, r3
 8002272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002276:	b10a      	cbz	r2, 800227c <_svfiprintf_r+0x5c>
 8002278:	2a25      	cmp	r2, #37	; 0x25
 800227a:	d1f9      	bne.n	8002270 <_svfiprintf_r+0x50>
 800227c:	ebba 0b04 	subs.w	fp, sl, r4
 8002280:	d00b      	beq.n	800229a <_svfiprintf_r+0x7a>
 8002282:	465b      	mov	r3, fp
 8002284:	4622      	mov	r2, r4
 8002286:	4629      	mov	r1, r5
 8002288:	4638      	mov	r0, r7
 800228a:	f7ff ff6d 	bl	8002168 <__ssputs_r>
 800228e:	3001      	adds	r0, #1
 8002290:	f000 80aa 	beq.w	80023e8 <_svfiprintf_r+0x1c8>
 8002294:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002296:	445a      	add	r2, fp
 8002298:	9209      	str	r2, [sp, #36]	; 0x24
 800229a:	f89a 3000 	ldrb.w	r3, [sl]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	f000 80a2 	beq.w	80023e8 <_svfiprintf_r+0x1c8>
 80022a4:	2300      	movs	r3, #0
 80022a6:	f04f 32ff 	mov.w	r2, #4294967295
 80022aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80022ae:	f10a 0a01 	add.w	sl, sl, #1
 80022b2:	9304      	str	r3, [sp, #16]
 80022b4:	9307      	str	r3, [sp, #28]
 80022b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80022ba:	931a      	str	r3, [sp, #104]	; 0x68
 80022bc:	4654      	mov	r4, sl
 80022be:	2205      	movs	r2, #5
 80022c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80022c4:	4851      	ldr	r0, [pc, #324]	; (800240c <_svfiprintf_r+0x1ec>)
 80022c6:	f000 fa41 	bl	800274c <memchr>
 80022ca:	9a04      	ldr	r2, [sp, #16]
 80022cc:	b9d8      	cbnz	r0, 8002306 <_svfiprintf_r+0xe6>
 80022ce:	06d0      	lsls	r0, r2, #27
 80022d0:	bf44      	itt	mi
 80022d2:	2320      	movmi	r3, #32
 80022d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80022d8:	0711      	lsls	r1, r2, #28
 80022da:	bf44      	itt	mi
 80022dc:	232b      	movmi	r3, #43	; 0x2b
 80022de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80022e2:	f89a 3000 	ldrb.w	r3, [sl]
 80022e6:	2b2a      	cmp	r3, #42	; 0x2a
 80022e8:	d015      	beq.n	8002316 <_svfiprintf_r+0xf6>
 80022ea:	4654      	mov	r4, sl
 80022ec:	2000      	movs	r0, #0
 80022ee:	f04f 0c0a 	mov.w	ip, #10
 80022f2:	9a07      	ldr	r2, [sp, #28]
 80022f4:	4621      	mov	r1, r4
 80022f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80022fa:	3b30      	subs	r3, #48	; 0x30
 80022fc:	2b09      	cmp	r3, #9
 80022fe:	d94e      	bls.n	800239e <_svfiprintf_r+0x17e>
 8002300:	b1b0      	cbz	r0, 8002330 <_svfiprintf_r+0x110>
 8002302:	9207      	str	r2, [sp, #28]
 8002304:	e014      	b.n	8002330 <_svfiprintf_r+0x110>
 8002306:	eba0 0308 	sub.w	r3, r0, r8
 800230a:	fa09 f303 	lsl.w	r3, r9, r3
 800230e:	4313      	orrs	r3, r2
 8002310:	46a2      	mov	sl, r4
 8002312:	9304      	str	r3, [sp, #16]
 8002314:	e7d2      	b.n	80022bc <_svfiprintf_r+0x9c>
 8002316:	9b03      	ldr	r3, [sp, #12]
 8002318:	1d19      	adds	r1, r3, #4
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	9103      	str	r1, [sp, #12]
 800231e:	2b00      	cmp	r3, #0
 8002320:	bfbb      	ittet	lt
 8002322:	425b      	neglt	r3, r3
 8002324:	f042 0202 	orrlt.w	r2, r2, #2
 8002328:	9307      	strge	r3, [sp, #28]
 800232a:	9307      	strlt	r3, [sp, #28]
 800232c:	bfb8      	it	lt
 800232e:	9204      	strlt	r2, [sp, #16]
 8002330:	7823      	ldrb	r3, [r4, #0]
 8002332:	2b2e      	cmp	r3, #46	; 0x2e
 8002334:	d10c      	bne.n	8002350 <_svfiprintf_r+0x130>
 8002336:	7863      	ldrb	r3, [r4, #1]
 8002338:	2b2a      	cmp	r3, #42	; 0x2a
 800233a:	d135      	bne.n	80023a8 <_svfiprintf_r+0x188>
 800233c:	9b03      	ldr	r3, [sp, #12]
 800233e:	3402      	adds	r4, #2
 8002340:	1d1a      	adds	r2, r3, #4
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	9203      	str	r2, [sp, #12]
 8002346:	2b00      	cmp	r3, #0
 8002348:	bfb8      	it	lt
 800234a:	f04f 33ff 	movlt.w	r3, #4294967295
 800234e:	9305      	str	r3, [sp, #20]
 8002350:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800241c <_svfiprintf_r+0x1fc>
 8002354:	2203      	movs	r2, #3
 8002356:	4650      	mov	r0, sl
 8002358:	7821      	ldrb	r1, [r4, #0]
 800235a:	f000 f9f7 	bl	800274c <memchr>
 800235e:	b140      	cbz	r0, 8002372 <_svfiprintf_r+0x152>
 8002360:	2340      	movs	r3, #64	; 0x40
 8002362:	eba0 000a 	sub.w	r0, r0, sl
 8002366:	fa03 f000 	lsl.w	r0, r3, r0
 800236a:	9b04      	ldr	r3, [sp, #16]
 800236c:	3401      	adds	r4, #1
 800236e:	4303      	orrs	r3, r0
 8002370:	9304      	str	r3, [sp, #16]
 8002372:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002376:	2206      	movs	r2, #6
 8002378:	4825      	ldr	r0, [pc, #148]	; (8002410 <_svfiprintf_r+0x1f0>)
 800237a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800237e:	f000 f9e5 	bl	800274c <memchr>
 8002382:	2800      	cmp	r0, #0
 8002384:	d038      	beq.n	80023f8 <_svfiprintf_r+0x1d8>
 8002386:	4b23      	ldr	r3, [pc, #140]	; (8002414 <_svfiprintf_r+0x1f4>)
 8002388:	bb1b      	cbnz	r3, 80023d2 <_svfiprintf_r+0x1b2>
 800238a:	9b03      	ldr	r3, [sp, #12]
 800238c:	3307      	adds	r3, #7
 800238e:	f023 0307 	bic.w	r3, r3, #7
 8002392:	3308      	adds	r3, #8
 8002394:	9303      	str	r3, [sp, #12]
 8002396:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002398:	4433      	add	r3, r6
 800239a:	9309      	str	r3, [sp, #36]	; 0x24
 800239c:	e767      	b.n	800226e <_svfiprintf_r+0x4e>
 800239e:	460c      	mov	r4, r1
 80023a0:	2001      	movs	r0, #1
 80023a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80023a6:	e7a5      	b.n	80022f4 <_svfiprintf_r+0xd4>
 80023a8:	2300      	movs	r3, #0
 80023aa:	f04f 0c0a 	mov.w	ip, #10
 80023ae:	4619      	mov	r1, r3
 80023b0:	3401      	adds	r4, #1
 80023b2:	9305      	str	r3, [sp, #20]
 80023b4:	4620      	mov	r0, r4
 80023b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80023ba:	3a30      	subs	r2, #48	; 0x30
 80023bc:	2a09      	cmp	r2, #9
 80023be:	d903      	bls.n	80023c8 <_svfiprintf_r+0x1a8>
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d0c5      	beq.n	8002350 <_svfiprintf_r+0x130>
 80023c4:	9105      	str	r1, [sp, #20]
 80023c6:	e7c3      	b.n	8002350 <_svfiprintf_r+0x130>
 80023c8:	4604      	mov	r4, r0
 80023ca:	2301      	movs	r3, #1
 80023cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80023d0:	e7f0      	b.n	80023b4 <_svfiprintf_r+0x194>
 80023d2:	ab03      	add	r3, sp, #12
 80023d4:	9300      	str	r3, [sp, #0]
 80023d6:	462a      	mov	r2, r5
 80023d8:	4638      	mov	r0, r7
 80023da:	4b0f      	ldr	r3, [pc, #60]	; (8002418 <_svfiprintf_r+0x1f8>)
 80023dc:	a904      	add	r1, sp, #16
 80023de:	f3af 8000 	nop.w
 80023e2:	1c42      	adds	r2, r0, #1
 80023e4:	4606      	mov	r6, r0
 80023e6:	d1d6      	bne.n	8002396 <_svfiprintf_r+0x176>
 80023e8:	89ab      	ldrh	r3, [r5, #12]
 80023ea:	065b      	lsls	r3, r3, #25
 80023ec:	f53f af2c 	bmi.w	8002248 <_svfiprintf_r+0x28>
 80023f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80023f2:	b01d      	add	sp, #116	; 0x74
 80023f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023f8:	ab03      	add	r3, sp, #12
 80023fa:	9300      	str	r3, [sp, #0]
 80023fc:	462a      	mov	r2, r5
 80023fe:	4638      	mov	r0, r7
 8002400:	4b05      	ldr	r3, [pc, #20]	; (8002418 <_svfiprintf_r+0x1f8>)
 8002402:	a904      	add	r1, sp, #16
 8002404:	f000 f87c 	bl	8002500 <_printf_i>
 8002408:	e7eb      	b.n	80023e2 <_svfiprintf_r+0x1c2>
 800240a:	bf00      	nop
 800240c:	080029ec 	.word	0x080029ec
 8002410:	080029f6 	.word	0x080029f6
 8002414:	00000000 	.word	0x00000000
 8002418:	08002169 	.word	0x08002169
 800241c:	080029f2 	.word	0x080029f2

08002420 <_printf_common>:
 8002420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002424:	4616      	mov	r6, r2
 8002426:	4699      	mov	r9, r3
 8002428:	688a      	ldr	r2, [r1, #8]
 800242a:	690b      	ldr	r3, [r1, #16]
 800242c:	4607      	mov	r7, r0
 800242e:	4293      	cmp	r3, r2
 8002430:	bfb8      	it	lt
 8002432:	4613      	movlt	r3, r2
 8002434:	6033      	str	r3, [r6, #0]
 8002436:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800243a:	460c      	mov	r4, r1
 800243c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002440:	b10a      	cbz	r2, 8002446 <_printf_common+0x26>
 8002442:	3301      	adds	r3, #1
 8002444:	6033      	str	r3, [r6, #0]
 8002446:	6823      	ldr	r3, [r4, #0]
 8002448:	0699      	lsls	r1, r3, #26
 800244a:	bf42      	ittt	mi
 800244c:	6833      	ldrmi	r3, [r6, #0]
 800244e:	3302      	addmi	r3, #2
 8002450:	6033      	strmi	r3, [r6, #0]
 8002452:	6825      	ldr	r5, [r4, #0]
 8002454:	f015 0506 	ands.w	r5, r5, #6
 8002458:	d106      	bne.n	8002468 <_printf_common+0x48>
 800245a:	f104 0a19 	add.w	sl, r4, #25
 800245e:	68e3      	ldr	r3, [r4, #12]
 8002460:	6832      	ldr	r2, [r6, #0]
 8002462:	1a9b      	subs	r3, r3, r2
 8002464:	42ab      	cmp	r3, r5
 8002466:	dc28      	bgt.n	80024ba <_printf_common+0x9a>
 8002468:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800246c:	1e13      	subs	r3, r2, #0
 800246e:	6822      	ldr	r2, [r4, #0]
 8002470:	bf18      	it	ne
 8002472:	2301      	movne	r3, #1
 8002474:	0692      	lsls	r2, r2, #26
 8002476:	d42d      	bmi.n	80024d4 <_printf_common+0xb4>
 8002478:	4649      	mov	r1, r9
 800247a:	4638      	mov	r0, r7
 800247c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002480:	47c0      	blx	r8
 8002482:	3001      	adds	r0, #1
 8002484:	d020      	beq.n	80024c8 <_printf_common+0xa8>
 8002486:	6823      	ldr	r3, [r4, #0]
 8002488:	68e5      	ldr	r5, [r4, #12]
 800248a:	f003 0306 	and.w	r3, r3, #6
 800248e:	2b04      	cmp	r3, #4
 8002490:	bf18      	it	ne
 8002492:	2500      	movne	r5, #0
 8002494:	6832      	ldr	r2, [r6, #0]
 8002496:	f04f 0600 	mov.w	r6, #0
 800249a:	68a3      	ldr	r3, [r4, #8]
 800249c:	bf08      	it	eq
 800249e:	1aad      	subeq	r5, r5, r2
 80024a0:	6922      	ldr	r2, [r4, #16]
 80024a2:	bf08      	it	eq
 80024a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80024a8:	4293      	cmp	r3, r2
 80024aa:	bfc4      	itt	gt
 80024ac:	1a9b      	subgt	r3, r3, r2
 80024ae:	18ed      	addgt	r5, r5, r3
 80024b0:	341a      	adds	r4, #26
 80024b2:	42b5      	cmp	r5, r6
 80024b4:	d11a      	bne.n	80024ec <_printf_common+0xcc>
 80024b6:	2000      	movs	r0, #0
 80024b8:	e008      	b.n	80024cc <_printf_common+0xac>
 80024ba:	2301      	movs	r3, #1
 80024bc:	4652      	mov	r2, sl
 80024be:	4649      	mov	r1, r9
 80024c0:	4638      	mov	r0, r7
 80024c2:	47c0      	blx	r8
 80024c4:	3001      	adds	r0, #1
 80024c6:	d103      	bne.n	80024d0 <_printf_common+0xb0>
 80024c8:	f04f 30ff 	mov.w	r0, #4294967295
 80024cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024d0:	3501      	adds	r5, #1
 80024d2:	e7c4      	b.n	800245e <_printf_common+0x3e>
 80024d4:	2030      	movs	r0, #48	; 0x30
 80024d6:	18e1      	adds	r1, r4, r3
 80024d8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80024dc:	1c5a      	adds	r2, r3, #1
 80024de:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80024e2:	4422      	add	r2, r4
 80024e4:	3302      	adds	r3, #2
 80024e6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80024ea:	e7c5      	b.n	8002478 <_printf_common+0x58>
 80024ec:	2301      	movs	r3, #1
 80024ee:	4622      	mov	r2, r4
 80024f0:	4649      	mov	r1, r9
 80024f2:	4638      	mov	r0, r7
 80024f4:	47c0      	blx	r8
 80024f6:	3001      	adds	r0, #1
 80024f8:	d0e6      	beq.n	80024c8 <_printf_common+0xa8>
 80024fa:	3601      	adds	r6, #1
 80024fc:	e7d9      	b.n	80024b2 <_printf_common+0x92>
	...

08002500 <_printf_i>:
 8002500:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002504:	460c      	mov	r4, r1
 8002506:	7e27      	ldrb	r7, [r4, #24]
 8002508:	4691      	mov	r9, r2
 800250a:	2f78      	cmp	r7, #120	; 0x78
 800250c:	4680      	mov	r8, r0
 800250e:	469a      	mov	sl, r3
 8002510:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002512:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002516:	d807      	bhi.n	8002528 <_printf_i+0x28>
 8002518:	2f62      	cmp	r7, #98	; 0x62
 800251a:	d80a      	bhi.n	8002532 <_printf_i+0x32>
 800251c:	2f00      	cmp	r7, #0
 800251e:	f000 80d9 	beq.w	80026d4 <_printf_i+0x1d4>
 8002522:	2f58      	cmp	r7, #88	; 0x58
 8002524:	f000 80a4 	beq.w	8002670 <_printf_i+0x170>
 8002528:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800252c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002530:	e03a      	b.n	80025a8 <_printf_i+0xa8>
 8002532:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002536:	2b15      	cmp	r3, #21
 8002538:	d8f6      	bhi.n	8002528 <_printf_i+0x28>
 800253a:	a001      	add	r0, pc, #4	; (adr r0, 8002540 <_printf_i+0x40>)
 800253c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002540:	08002599 	.word	0x08002599
 8002544:	080025ad 	.word	0x080025ad
 8002548:	08002529 	.word	0x08002529
 800254c:	08002529 	.word	0x08002529
 8002550:	08002529 	.word	0x08002529
 8002554:	08002529 	.word	0x08002529
 8002558:	080025ad 	.word	0x080025ad
 800255c:	08002529 	.word	0x08002529
 8002560:	08002529 	.word	0x08002529
 8002564:	08002529 	.word	0x08002529
 8002568:	08002529 	.word	0x08002529
 800256c:	080026bb 	.word	0x080026bb
 8002570:	080025dd 	.word	0x080025dd
 8002574:	0800269d 	.word	0x0800269d
 8002578:	08002529 	.word	0x08002529
 800257c:	08002529 	.word	0x08002529
 8002580:	080026dd 	.word	0x080026dd
 8002584:	08002529 	.word	0x08002529
 8002588:	080025dd 	.word	0x080025dd
 800258c:	08002529 	.word	0x08002529
 8002590:	08002529 	.word	0x08002529
 8002594:	080026a5 	.word	0x080026a5
 8002598:	680b      	ldr	r3, [r1, #0]
 800259a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800259e:	1d1a      	adds	r2, r3, #4
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	600a      	str	r2, [r1, #0]
 80025a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80025a8:	2301      	movs	r3, #1
 80025aa:	e0a4      	b.n	80026f6 <_printf_i+0x1f6>
 80025ac:	6825      	ldr	r5, [r4, #0]
 80025ae:	6808      	ldr	r0, [r1, #0]
 80025b0:	062e      	lsls	r6, r5, #24
 80025b2:	f100 0304 	add.w	r3, r0, #4
 80025b6:	d50a      	bpl.n	80025ce <_printf_i+0xce>
 80025b8:	6805      	ldr	r5, [r0, #0]
 80025ba:	600b      	str	r3, [r1, #0]
 80025bc:	2d00      	cmp	r5, #0
 80025be:	da03      	bge.n	80025c8 <_printf_i+0xc8>
 80025c0:	232d      	movs	r3, #45	; 0x2d
 80025c2:	426d      	negs	r5, r5
 80025c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80025c8:	230a      	movs	r3, #10
 80025ca:	485e      	ldr	r0, [pc, #376]	; (8002744 <_printf_i+0x244>)
 80025cc:	e019      	b.n	8002602 <_printf_i+0x102>
 80025ce:	f015 0f40 	tst.w	r5, #64	; 0x40
 80025d2:	6805      	ldr	r5, [r0, #0]
 80025d4:	600b      	str	r3, [r1, #0]
 80025d6:	bf18      	it	ne
 80025d8:	b22d      	sxthne	r5, r5
 80025da:	e7ef      	b.n	80025bc <_printf_i+0xbc>
 80025dc:	680b      	ldr	r3, [r1, #0]
 80025de:	6825      	ldr	r5, [r4, #0]
 80025e0:	1d18      	adds	r0, r3, #4
 80025e2:	6008      	str	r0, [r1, #0]
 80025e4:	0628      	lsls	r0, r5, #24
 80025e6:	d501      	bpl.n	80025ec <_printf_i+0xec>
 80025e8:	681d      	ldr	r5, [r3, #0]
 80025ea:	e002      	b.n	80025f2 <_printf_i+0xf2>
 80025ec:	0669      	lsls	r1, r5, #25
 80025ee:	d5fb      	bpl.n	80025e8 <_printf_i+0xe8>
 80025f0:	881d      	ldrh	r5, [r3, #0]
 80025f2:	2f6f      	cmp	r7, #111	; 0x6f
 80025f4:	bf0c      	ite	eq
 80025f6:	2308      	moveq	r3, #8
 80025f8:	230a      	movne	r3, #10
 80025fa:	4852      	ldr	r0, [pc, #328]	; (8002744 <_printf_i+0x244>)
 80025fc:	2100      	movs	r1, #0
 80025fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002602:	6866      	ldr	r6, [r4, #4]
 8002604:	2e00      	cmp	r6, #0
 8002606:	bfa8      	it	ge
 8002608:	6821      	ldrge	r1, [r4, #0]
 800260a:	60a6      	str	r6, [r4, #8]
 800260c:	bfa4      	itt	ge
 800260e:	f021 0104 	bicge.w	r1, r1, #4
 8002612:	6021      	strge	r1, [r4, #0]
 8002614:	b90d      	cbnz	r5, 800261a <_printf_i+0x11a>
 8002616:	2e00      	cmp	r6, #0
 8002618:	d04d      	beq.n	80026b6 <_printf_i+0x1b6>
 800261a:	4616      	mov	r6, r2
 800261c:	fbb5 f1f3 	udiv	r1, r5, r3
 8002620:	fb03 5711 	mls	r7, r3, r1, r5
 8002624:	5dc7      	ldrb	r7, [r0, r7]
 8002626:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800262a:	462f      	mov	r7, r5
 800262c:	42bb      	cmp	r3, r7
 800262e:	460d      	mov	r5, r1
 8002630:	d9f4      	bls.n	800261c <_printf_i+0x11c>
 8002632:	2b08      	cmp	r3, #8
 8002634:	d10b      	bne.n	800264e <_printf_i+0x14e>
 8002636:	6823      	ldr	r3, [r4, #0]
 8002638:	07df      	lsls	r7, r3, #31
 800263a:	d508      	bpl.n	800264e <_printf_i+0x14e>
 800263c:	6923      	ldr	r3, [r4, #16]
 800263e:	6861      	ldr	r1, [r4, #4]
 8002640:	4299      	cmp	r1, r3
 8002642:	bfde      	ittt	le
 8002644:	2330      	movle	r3, #48	; 0x30
 8002646:	f806 3c01 	strble.w	r3, [r6, #-1]
 800264a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800264e:	1b92      	subs	r2, r2, r6
 8002650:	6122      	str	r2, [r4, #16]
 8002652:	464b      	mov	r3, r9
 8002654:	4621      	mov	r1, r4
 8002656:	4640      	mov	r0, r8
 8002658:	f8cd a000 	str.w	sl, [sp]
 800265c:	aa03      	add	r2, sp, #12
 800265e:	f7ff fedf 	bl	8002420 <_printf_common>
 8002662:	3001      	adds	r0, #1
 8002664:	d14c      	bne.n	8002700 <_printf_i+0x200>
 8002666:	f04f 30ff 	mov.w	r0, #4294967295
 800266a:	b004      	add	sp, #16
 800266c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002670:	4834      	ldr	r0, [pc, #208]	; (8002744 <_printf_i+0x244>)
 8002672:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002676:	680e      	ldr	r6, [r1, #0]
 8002678:	6823      	ldr	r3, [r4, #0]
 800267a:	f856 5b04 	ldr.w	r5, [r6], #4
 800267e:	061f      	lsls	r7, r3, #24
 8002680:	600e      	str	r6, [r1, #0]
 8002682:	d514      	bpl.n	80026ae <_printf_i+0x1ae>
 8002684:	07d9      	lsls	r1, r3, #31
 8002686:	bf44      	itt	mi
 8002688:	f043 0320 	orrmi.w	r3, r3, #32
 800268c:	6023      	strmi	r3, [r4, #0]
 800268e:	b91d      	cbnz	r5, 8002698 <_printf_i+0x198>
 8002690:	6823      	ldr	r3, [r4, #0]
 8002692:	f023 0320 	bic.w	r3, r3, #32
 8002696:	6023      	str	r3, [r4, #0]
 8002698:	2310      	movs	r3, #16
 800269a:	e7af      	b.n	80025fc <_printf_i+0xfc>
 800269c:	6823      	ldr	r3, [r4, #0]
 800269e:	f043 0320 	orr.w	r3, r3, #32
 80026a2:	6023      	str	r3, [r4, #0]
 80026a4:	2378      	movs	r3, #120	; 0x78
 80026a6:	4828      	ldr	r0, [pc, #160]	; (8002748 <_printf_i+0x248>)
 80026a8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80026ac:	e7e3      	b.n	8002676 <_printf_i+0x176>
 80026ae:	065e      	lsls	r6, r3, #25
 80026b0:	bf48      	it	mi
 80026b2:	b2ad      	uxthmi	r5, r5
 80026b4:	e7e6      	b.n	8002684 <_printf_i+0x184>
 80026b6:	4616      	mov	r6, r2
 80026b8:	e7bb      	b.n	8002632 <_printf_i+0x132>
 80026ba:	680b      	ldr	r3, [r1, #0]
 80026bc:	6826      	ldr	r6, [r4, #0]
 80026be:	1d1d      	adds	r5, r3, #4
 80026c0:	6960      	ldr	r0, [r4, #20]
 80026c2:	600d      	str	r5, [r1, #0]
 80026c4:	0635      	lsls	r5, r6, #24
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	d501      	bpl.n	80026ce <_printf_i+0x1ce>
 80026ca:	6018      	str	r0, [r3, #0]
 80026cc:	e002      	b.n	80026d4 <_printf_i+0x1d4>
 80026ce:	0671      	lsls	r1, r6, #25
 80026d0:	d5fb      	bpl.n	80026ca <_printf_i+0x1ca>
 80026d2:	8018      	strh	r0, [r3, #0]
 80026d4:	2300      	movs	r3, #0
 80026d6:	4616      	mov	r6, r2
 80026d8:	6123      	str	r3, [r4, #16]
 80026da:	e7ba      	b.n	8002652 <_printf_i+0x152>
 80026dc:	680b      	ldr	r3, [r1, #0]
 80026de:	1d1a      	adds	r2, r3, #4
 80026e0:	600a      	str	r2, [r1, #0]
 80026e2:	681e      	ldr	r6, [r3, #0]
 80026e4:	2100      	movs	r1, #0
 80026e6:	4630      	mov	r0, r6
 80026e8:	6862      	ldr	r2, [r4, #4]
 80026ea:	f000 f82f 	bl	800274c <memchr>
 80026ee:	b108      	cbz	r0, 80026f4 <_printf_i+0x1f4>
 80026f0:	1b80      	subs	r0, r0, r6
 80026f2:	6060      	str	r0, [r4, #4]
 80026f4:	6863      	ldr	r3, [r4, #4]
 80026f6:	6123      	str	r3, [r4, #16]
 80026f8:	2300      	movs	r3, #0
 80026fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80026fe:	e7a8      	b.n	8002652 <_printf_i+0x152>
 8002700:	4632      	mov	r2, r6
 8002702:	4649      	mov	r1, r9
 8002704:	4640      	mov	r0, r8
 8002706:	6923      	ldr	r3, [r4, #16]
 8002708:	47d0      	blx	sl
 800270a:	3001      	adds	r0, #1
 800270c:	d0ab      	beq.n	8002666 <_printf_i+0x166>
 800270e:	6823      	ldr	r3, [r4, #0]
 8002710:	079b      	lsls	r3, r3, #30
 8002712:	d413      	bmi.n	800273c <_printf_i+0x23c>
 8002714:	68e0      	ldr	r0, [r4, #12]
 8002716:	9b03      	ldr	r3, [sp, #12]
 8002718:	4298      	cmp	r0, r3
 800271a:	bfb8      	it	lt
 800271c:	4618      	movlt	r0, r3
 800271e:	e7a4      	b.n	800266a <_printf_i+0x16a>
 8002720:	2301      	movs	r3, #1
 8002722:	4632      	mov	r2, r6
 8002724:	4649      	mov	r1, r9
 8002726:	4640      	mov	r0, r8
 8002728:	47d0      	blx	sl
 800272a:	3001      	adds	r0, #1
 800272c:	d09b      	beq.n	8002666 <_printf_i+0x166>
 800272e:	3501      	adds	r5, #1
 8002730:	68e3      	ldr	r3, [r4, #12]
 8002732:	9903      	ldr	r1, [sp, #12]
 8002734:	1a5b      	subs	r3, r3, r1
 8002736:	42ab      	cmp	r3, r5
 8002738:	dcf2      	bgt.n	8002720 <_printf_i+0x220>
 800273a:	e7eb      	b.n	8002714 <_printf_i+0x214>
 800273c:	2500      	movs	r5, #0
 800273e:	f104 0619 	add.w	r6, r4, #25
 8002742:	e7f5      	b.n	8002730 <_printf_i+0x230>
 8002744:	080029fd 	.word	0x080029fd
 8002748:	08002a0e 	.word	0x08002a0e

0800274c <memchr>:
 800274c:	4603      	mov	r3, r0
 800274e:	b510      	push	{r4, lr}
 8002750:	b2c9      	uxtb	r1, r1
 8002752:	4402      	add	r2, r0
 8002754:	4293      	cmp	r3, r2
 8002756:	4618      	mov	r0, r3
 8002758:	d101      	bne.n	800275e <memchr+0x12>
 800275a:	2000      	movs	r0, #0
 800275c:	e003      	b.n	8002766 <memchr+0x1a>
 800275e:	7804      	ldrb	r4, [r0, #0]
 8002760:	3301      	adds	r3, #1
 8002762:	428c      	cmp	r4, r1
 8002764:	d1f6      	bne.n	8002754 <memchr+0x8>
 8002766:	bd10      	pop	{r4, pc}

08002768 <memcpy>:
 8002768:	440a      	add	r2, r1
 800276a:	4291      	cmp	r1, r2
 800276c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002770:	d100      	bne.n	8002774 <memcpy+0xc>
 8002772:	4770      	bx	lr
 8002774:	b510      	push	{r4, lr}
 8002776:	f811 4b01 	ldrb.w	r4, [r1], #1
 800277a:	4291      	cmp	r1, r2
 800277c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002780:	d1f9      	bne.n	8002776 <memcpy+0xe>
 8002782:	bd10      	pop	{r4, pc}

08002784 <memmove>:
 8002784:	4288      	cmp	r0, r1
 8002786:	b510      	push	{r4, lr}
 8002788:	eb01 0402 	add.w	r4, r1, r2
 800278c:	d902      	bls.n	8002794 <memmove+0x10>
 800278e:	4284      	cmp	r4, r0
 8002790:	4623      	mov	r3, r4
 8002792:	d807      	bhi.n	80027a4 <memmove+0x20>
 8002794:	1e43      	subs	r3, r0, #1
 8002796:	42a1      	cmp	r1, r4
 8002798:	d008      	beq.n	80027ac <memmove+0x28>
 800279a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800279e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80027a2:	e7f8      	b.n	8002796 <memmove+0x12>
 80027a4:	4601      	mov	r1, r0
 80027a6:	4402      	add	r2, r0
 80027a8:	428a      	cmp	r2, r1
 80027aa:	d100      	bne.n	80027ae <memmove+0x2a>
 80027ac:	bd10      	pop	{r4, pc}
 80027ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80027b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80027b6:	e7f7      	b.n	80027a8 <memmove+0x24>

080027b8 <_free_r>:
 80027b8:	b538      	push	{r3, r4, r5, lr}
 80027ba:	4605      	mov	r5, r0
 80027bc:	2900      	cmp	r1, #0
 80027be:	d043      	beq.n	8002848 <_free_r+0x90>
 80027c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80027c4:	1f0c      	subs	r4, r1, #4
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	bfb8      	it	lt
 80027ca:	18e4      	addlt	r4, r4, r3
 80027cc:	f000 f8d0 	bl	8002970 <__malloc_lock>
 80027d0:	4a1e      	ldr	r2, [pc, #120]	; (800284c <_free_r+0x94>)
 80027d2:	6813      	ldr	r3, [r2, #0]
 80027d4:	4610      	mov	r0, r2
 80027d6:	b933      	cbnz	r3, 80027e6 <_free_r+0x2e>
 80027d8:	6063      	str	r3, [r4, #4]
 80027da:	6014      	str	r4, [r2, #0]
 80027dc:	4628      	mov	r0, r5
 80027de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80027e2:	f000 b8cb 	b.w	800297c <__malloc_unlock>
 80027e6:	42a3      	cmp	r3, r4
 80027e8:	d90a      	bls.n	8002800 <_free_r+0x48>
 80027ea:	6821      	ldr	r1, [r4, #0]
 80027ec:	1862      	adds	r2, r4, r1
 80027ee:	4293      	cmp	r3, r2
 80027f0:	bf01      	itttt	eq
 80027f2:	681a      	ldreq	r2, [r3, #0]
 80027f4:	685b      	ldreq	r3, [r3, #4]
 80027f6:	1852      	addeq	r2, r2, r1
 80027f8:	6022      	streq	r2, [r4, #0]
 80027fa:	6063      	str	r3, [r4, #4]
 80027fc:	6004      	str	r4, [r0, #0]
 80027fe:	e7ed      	b.n	80027dc <_free_r+0x24>
 8002800:	461a      	mov	r2, r3
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	b10b      	cbz	r3, 800280a <_free_r+0x52>
 8002806:	42a3      	cmp	r3, r4
 8002808:	d9fa      	bls.n	8002800 <_free_r+0x48>
 800280a:	6811      	ldr	r1, [r2, #0]
 800280c:	1850      	adds	r0, r2, r1
 800280e:	42a0      	cmp	r0, r4
 8002810:	d10b      	bne.n	800282a <_free_r+0x72>
 8002812:	6820      	ldr	r0, [r4, #0]
 8002814:	4401      	add	r1, r0
 8002816:	1850      	adds	r0, r2, r1
 8002818:	4283      	cmp	r3, r0
 800281a:	6011      	str	r1, [r2, #0]
 800281c:	d1de      	bne.n	80027dc <_free_r+0x24>
 800281e:	6818      	ldr	r0, [r3, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	4401      	add	r1, r0
 8002824:	6011      	str	r1, [r2, #0]
 8002826:	6053      	str	r3, [r2, #4]
 8002828:	e7d8      	b.n	80027dc <_free_r+0x24>
 800282a:	d902      	bls.n	8002832 <_free_r+0x7a>
 800282c:	230c      	movs	r3, #12
 800282e:	602b      	str	r3, [r5, #0]
 8002830:	e7d4      	b.n	80027dc <_free_r+0x24>
 8002832:	6820      	ldr	r0, [r4, #0]
 8002834:	1821      	adds	r1, r4, r0
 8002836:	428b      	cmp	r3, r1
 8002838:	bf01      	itttt	eq
 800283a:	6819      	ldreq	r1, [r3, #0]
 800283c:	685b      	ldreq	r3, [r3, #4]
 800283e:	1809      	addeq	r1, r1, r0
 8002840:	6021      	streq	r1, [r4, #0]
 8002842:	6063      	str	r3, [r4, #4]
 8002844:	6054      	str	r4, [r2, #4]
 8002846:	e7c9      	b.n	80027dc <_free_r+0x24>
 8002848:	bd38      	pop	{r3, r4, r5, pc}
 800284a:	bf00      	nop
 800284c:	200000a8 	.word	0x200000a8

08002850 <_malloc_r>:
 8002850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002852:	1ccd      	adds	r5, r1, #3
 8002854:	f025 0503 	bic.w	r5, r5, #3
 8002858:	3508      	adds	r5, #8
 800285a:	2d0c      	cmp	r5, #12
 800285c:	bf38      	it	cc
 800285e:	250c      	movcc	r5, #12
 8002860:	2d00      	cmp	r5, #0
 8002862:	4606      	mov	r6, r0
 8002864:	db01      	blt.n	800286a <_malloc_r+0x1a>
 8002866:	42a9      	cmp	r1, r5
 8002868:	d903      	bls.n	8002872 <_malloc_r+0x22>
 800286a:	230c      	movs	r3, #12
 800286c:	6033      	str	r3, [r6, #0]
 800286e:	2000      	movs	r0, #0
 8002870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002872:	f000 f87d 	bl	8002970 <__malloc_lock>
 8002876:	4921      	ldr	r1, [pc, #132]	; (80028fc <_malloc_r+0xac>)
 8002878:	680a      	ldr	r2, [r1, #0]
 800287a:	4614      	mov	r4, r2
 800287c:	b99c      	cbnz	r4, 80028a6 <_malloc_r+0x56>
 800287e:	4f20      	ldr	r7, [pc, #128]	; (8002900 <_malloc_r+0xb0>)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	b923      	cbnz	r3, 800288e <_malloc_r+0x3e>
 8002884:	4621      	mov	r1, r4
 8002886:	4630      	mov	r0, r6
 8002888:	f000 f862 	bl	8002950 <_sbrk_r>
 800288c:	6038      	str	r0, [r7, #0]
 800288e:	4629      	mov	r1, r5
 8002890:	4630      	mov	r0, r6
 8002892:	f000 f85d 	bl	8002950 <_sbrk_r>
 8002896:	1c43      	adds	r3, r0, #1
 8002898:	d123      	bne.n	80028e2 <_malloc_r+0x92>
 800289a:	230c      	movs	r3, #12
 800289c:	4630      	mov	r0, r6
 800289e:	6033      	str	r3, [r6, #0]
 80028a0:	f000 f86c 	bl	800297c <__malloc_unlock>
 80028a4:	e7e3      	b.n	800286e <_malloc_r+0x1e>
 80028a6:	6823      	ldr	r3, [r4, #0]
 80028a8:	1b5b      	subs	r3, r3, r5
 80028aa:	d417      	bmi.n	80028dc <_malloc_r+0x8c>
 80028ac:	2b0b      	cmp	r3, #11
 80028ae:	d903      	bls.n	80028b8 <_malloc_r+0x68>
 80028b0:	6023      	str	r3, [r4, #0]
 80028b2:	441c      	add	r4, r3
 80028b4:	6025      	str	r5, [r4, #0]
 80028b6:	e004      	b.n	80028c2 <_malloc_r+0x72>
 80028b8:	6863      	ldr	r3, [r4, #4]
 80028ba:	42a2      	cmp	r2, r4
 80028bc:	bf0c      	ite	eq
 80028be:	600b      	streq	r3, [r1, #0]
 80028c0:	6053      	strne	r3, [r2, #4]
 80028c2:	4630      	mov	r0, r6
 80028c4:	f000 f85a 	bl	800297c <__malloc_unlock>
 80028c8:	f104 000b 	add.w	r0, r4, #11
 80028cc:	1d23      	adds	r3, r4, #4
 80028ce:	f020 0007 	bic.w	r0, r0, #7
 80028d2:	1ac2      	subs	r2, r0, r3
 80028d4:	d0cc      	beq.n	8002870 <_malloc_r+0x20>
 80028d6:	1a1b      	subs	r3, r3, r0
 80028d8:	50a3      	str	r3, [r4, r2]
 80028da:	e7c9      	b.n	8002870 <_malloc_r+0x20>
 80028dc:	4622      	mov	r2, r4
 80028de:	6864      	ldr	r4, [r4, #4]
 80028e0:	e7cc      	b.n	800287c <_malloc_r+0x2c>
 80028e2:	1cc4      	adds	r4, r0, #3
 80028e4:	f024 0403 	bic.w	r4, r4, #3
 80028e8:	42a0      	cmp	r0, r4
 80028ea:	d0e3      	beq.n	80028b4 <_malloc_r+0x64>
 80028ec:	1a21      	subs	r1, r4, r0
 80028ee:	4630      	mov	r0, r6
 80028f0:	f000 f82e 	bl	8002950 <_sbrk_r>
 80028f4:	3001      	adds	r0, #1
 80028f6:	d1dd      	bne.n	80028b4 <_malloc_r+0x64>
 80028f8:	e7cf      	b.n	800289a <_malloc_r+0x4a>
 80028fa:	bf00      	nop
 80028fc:	200000a8 	.word	0x200000a8
 8002900:	200000ac 	.word	0x200000ac

08002904 <_realloc_r>:
 8002904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002906:	4607      	mov	r7, r0
 8002908:	4614      	mov	r4, r2
 800290a:	460e      	mov	r6, r1
 800290c:	b921      	cbnz	r1, 8002918 <_realloc_r+0x14>
 800290e:	4611      	mov	r1, r2
 8002910:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002914:	f7ff bf9c 	b.w	8002850 <_malloc_r>
 8002918:	b922      	cbnz	r2, 8002924 <_realloc_r+0x20>
 800291a:	f7ff ff4d 	bl	80027b8 <_free_r>
 800291e:	4625      	mov	r5, r4
 8002920:	4628      	mov	r0, r5
 8002922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002924:	f000 f830 	bl	8002988 <_malloc_usable_size_r>
 8002928:	42a0      	cmp	r0, r4
 800292a:	d20f      	bcs.n	800294c <_realloc_r+0x48>
 800292c:	4621      	mov	r1, r4
 800292e:	4638      	mov	r0, r7
 8002930:	f7ff ff8e 	bl	8002850 <_malloc_r>
 8002934:	4605      	mov	r5, r0
 8002936:	2800      	cmp	r0, #0
 8002938:	d0f2      	beq.n	8002920 <_realloc_r+0x1c>
 800293a:	4631      	mov	r1, r6
 800293c:	4622      	mov	r2, r4
 800293e:	f7ff ff13 	bl	8002768 <memcpy>
 8002942:	4631      	mov	r1, r6
 8002944:	4638      	mov	r0, r7
 8002946:	f7ff ff37 	bl	80027b8 <_free_r>
 800294a:	e7e9      	b.n	8002920 <_realloc_r+0x1c>
 800294c:	4635      	mov	r5, r6
 800294e:	e7e7      	b.n	8002920 <_realloc_r+0x1c>

08002950 <_sbrk_r>:
 8002950:	b538      	push	{r3, r4, r5, lr}
 8002952:	2300      	movs	r3, #0
 8002954:	4d05      	ldr	r5, [pc, #20]	; (800296c <_sbrk_r+0x1c>)
 8002956:	4604      	mov	r4, r0
 8002958:	4608      	mov	r0, r1
 800295a:	602b      	str	r3, [r5, #0]
 800295c:	f7fd ff80 	bl	8000860 <_sbrk>
 8002960:	1c43      	adds	r3, r0, #1
 8002962:	d102      	bne.n	800296a <_sbrk_r+0x1a>
 8002964:	682b      	ldr	r3, [r5, #0]
 8002966:	b103      	cbz	r3, 800296a <_sbrk_r+0x1a>
 8002968:	6023      	str	r3, [r4, #0]
 800296a:	bd38      	pop	{r3, r4, r5, pc}
 800296c:	200000fc 	.word	0x200000fc

08002970 <__malloc_lock>:
 8002970:	4801      	ldr	r0, [pc, #4]	; (8002978 <__malloc_lock+0x8>)
 8002972:	f000 b811 	b.w	8002998 <__retarget_lock_acquire_recursive>
 8002976:	bf00      	nop
 8002978:	20000104 	.word	0x20000104

0800297c <__malloc_unlock>:
 800297c:	4801      	ldr	r0, [pc, #4]	; (8002984 <__malloc_unlock+0x8>)
 800297e:	f000 b80c 	b.w	800299a <__retarget_lock_release_recursive>
 8002982:	bf00      	nop
 8002984:	20000104 	.word	0x20000104

08002988 <_malloc_usable_size_r>:
 8002988:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800298c:	1f18      	subs	r0, r3, #4
 800298e:	2b00      	cmp	r3, #0
 8002990:	bfbc      	itt	lt
 8002992:	580b      	ldrlt	r3, [r1, r0]
 8002994:	18c0      	addlt	r0, r0, r3
 8002996:	4770      	bx	lr

08002998 <__retarget_lock_acquire_recursive>:
 8002998:	4770      	bx	lr

0800299a <__retarget_lock_release_recursive>:
 800299a:	4770      	bx	lr

0800299c <_init>:
 800299c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800299e:	bf00      	nop
 80029a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029a2:	bc08      	pop	{r3}
 80029a4:	469e      	mov	lr, r3
 80029a6:	4770      	bx	lr

080029a8 <_fini>:
 80029a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029aa:	bf00      	nop
 80029ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029ae:	bc08      	pop	{r3}
 80029b0:	469e      	mov	lr, r3
 80029b2:	4770      	bx	lr
