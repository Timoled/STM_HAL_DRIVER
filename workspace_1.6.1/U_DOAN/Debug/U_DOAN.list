
U_DOAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a518  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000059c  0800a628  0800a628  0001a628  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800abc4  0800abc4  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800abc4  0800abc4  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800abc4  0800abc4  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800abc4  0800abc4  0001abc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800abc8  0800abc8  0001abc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800abcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000036c  200001ec  0800adb8  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000558  0800adb8  00020558  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014c6f  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002da5  00000000  00000000  00034e84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014c8  00000000  00000000  00037c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001428  00000000  00000000  000390f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004880  00000000  00000000  0003a520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014e27  00000000  00000000  0003eda0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009637d  00000000  00000000  00053bc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e9f44  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e30  00000000  00000000  000e9f98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001ec 	.word	0x200001ec
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a610 	.word	0x0800a610

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f0 	.word	0x200001f0
 800014c:	0800a610 	.word	0x0800a610

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2lz>:
 8000adc:	b538      	push	{r3, r4, r5, lr}
 8000ade:	460c      	mov	r4, r1
 8000ae0:	4605      	mov	r5, r0
 8000ae2:	4621      	mov	r1, r4
 8000ae4:	4628      	mov	r0, r5
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2300      	movs	r3, #0
 8000aea:	f7ff ff71 	bl	80009d0 <__aeabi_dcmplt>
 8000aee:	b928      	cbnz	r0, 8000afc <__aeabi_d2lz+0x20>
 8000af0:	4628      	mov	r0, r5
 8000af2:	4621      	mov	r1, r4
 8000af4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000af8:	f000 b80a 	b.w	8000b10 <__aeabi_d2ulz>
 8000afc:	4628      	mov	r0, r5
 8000afe:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b02:	f000 f805 	bl	8000b10 <__aeabi_d2ulz>
 8000b06:	4240      	negs	r0, r0
 8000b08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b0c:	bd38      	pop	{r3, r4, r5, pc}
 8000b0e:	bf00      	nop

08000b10 <__aeabi_d2ulz>:
 8000b10:	b5d0      	push	{r4, r6, r7, lr}
 8000b12:	2200      	movs	r2, #0
 8000b14:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <__aeabi_d2ulz+0x34>)
 8000b16:	4606      	mov	r6, r0
 8000b18:	460f      	mov	r7, r1
 8000b1a:	f7ff fce7 	bl	80004ec <__aeabi_dmul>
 8000b1e:	f7ff ffbd 	bl	8000a9c <__aeabi_d2uiz>
 8000b22:	4604      	mov	r4, r0
 8000b24:	f7ff fc68 	bl	80003f8 <__aeabi_ui2d>
 8000b28:	2200      	movs	r2, #0
 8000b2a:	4b07      	ldr	r3, [pc, #28]	; (8000b48 <__aeabi_d2ulz+0x38>)
 8000b2c:	f7ff fcde 	bl	80004ec <__aeabi_dmul>
 8000b30:	4602      	mov	r2, r0
 8000b32:	460b      	mov	r3, r1
 8000b34:	4630      	mov	r0, r6
 8000b36:	4639      	mov	r1, r7
 8000b38:	f7ff fb20 	bl	800017c <__aeabi_dsub>
 8000b3c:	f7ff ffae 	bl	8000a9c <__aeabi_d2uiz>
 8000b40:	4621      	mov	r1, r4
 8000b42:	bdd0      	pop	{r4, r6, r7, pc}
 8000b44:	3df00000 	.word	0x3df00000
 8000b48:	41f00000 	.word	0x41f00000

08000b4c <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d002      	beq.n	8000b62 <case_insensitive_strcmp+0x16>
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d101      	bne.n	8000b66 <case_insensitive_strcmp+0x1a>
    {
        return 1;
 8000b62:	2301      	movs	r3, #1
 8000b64:	e056      	b.n	8000c14 <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 8000b66:	687a      	ldr	r2, [r7, #4]
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	429a      	cmp	r2, r3
 8000b6c:	d10d      	bne.n	8000b8a <case_insensitive_strcmp+0x3e>
    {
        return 0;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	e050      	b.n	8000c14 <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d101      	bne.n	8000b7e <case_insensitive_strcmp+0x32>
        {
            return 0;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	e04a      	b.n	8000c14 <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	3301      	adds	r3, #1
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	3301      	adds	r3, #1
 8000b88:	603b      	str	r3, [r7, #0]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	73fb      	strb	r3, [r7, #15]
 8000b90:	7bfb      	ldrb	r3, [r7, #15]
 8000b92:	3301      	adds	r3, #1
 8000b94:	4a22      	ldr	r2, [pc, #136]	; (8000c20 <case_insensitive_strcmp+0xd4>)
 8000b96:	4413      	add	r3, r2
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	f003 0303 	and.w	r3, r3, #3
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	d103      	bne.n	8000baa <case_insensitive_strcmp+0x5e>
 8000ba2:	7bfb      	ldrb	r3, [r7, #15]
 8000ba4:	f103 0220 	add.w	r2, r3, #32
 8000ba8:	e000      	b.n	8000bac <case_insensitive_strcmp+0x60>
 8000baa:	7bfa      	ldrb	r2, [r7, #15]
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	73bb      	strb	r3, [r7, #14]
 8000bb2:	7bbb      	ldrb	r3, [r7, #14]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	491a      	ldr	r1, [pc, #104]	; (8000c20 <case_insensitive_strcmp+0xd4>)
 8000bb8:	440b      	add	r3, r1
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	f003 0303 	and.w	r3, r3, #3
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d102      	bne.n	8000bca <case_insensitive_strcmp+0x7e>
 8000bc4:	7bbb      	ldrb	r3, [r7, #14]
 8000bc6:	3320      	adds	r3, #32
 8000bc8:	e000      	b.n	8000bcc <case_insensitive_strcmp+0x80>
 8000bca:	7bbb      	ldrb	r3, [r7, #14]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	d0d0      	beq.n	8000b72 <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	737b      	strb	r3, [r7, #13]
 8000bd6:	7b7b      	ldrb	r3, [r7, #13]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	4a11      	ldr	r2, [pc, #68]	; (8000c20 <case_insensitive_strcmp+0xd4>)
 8000bdc:	4413      	add	r3, r2
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	f003 0303 	and.w	r3, r3, #3
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d103      	bne.n	8000bf0 <case_insensitive_strcmp+0xa4>
 8000be8:	7b7b      	ldrb	r3, [r7, #13]
 8000bea:	f103 0220 	add.w	r2, r3, #32
 8000bee:	e000      	b.n	8000bf2 <case_insensitive_strcmp+0xa6>
 8000bf0:	7b7a      	ldrb	r2, [r7, #13]
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	733b      	strb	r3, [r7, #12]
 8000bf8:	7b3b      	ldrb	r3, [r7, #12]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	4908      	ldr	r1, [pc, #32]	; (8000c20 <case_insensitive_strcmp+0xd4>)
 8000bfe:	440b      	add	r3, r1
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	f003 0303 	and.w	r3, r3, #3
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d102      	bne.n	8000c10 <case_insensitive_strcmp+0xc4>
 8000c0a:	7b3b      	ldrb	r3, [r7, #12]
 8000c0c:	3320      	adds	r3, #32
 8000c0e:	e000      	b.n	8000c12 <case_insensitive_strcmp+0xc6>
 8000c10:	7b3b      	ldrb	r3, [r7, #12]
 8000c12:	1ad3      	subs	r3, r2, r3
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3714      	adds	r7, #20
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bc80      	pop	{r7}
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	0800a714 	.word	0x0800a714

08000c24 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2028      	movs	r0, #40	; 0x28
 8000c32:	4798      	blx	r3
 8000c34:	60f8      	str	r0, [r7, #12]
    if (node)
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d004      	beq.n	8000c46 <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 8000c3c:	2228      	movs	r2, #40	; 0x28
 8000c3e:	2100      	movs	r1, #0
 8000c40:	68f8      	ldr	r0, [r7, #12]
 8000c42:	f005 fa4f 	bl	80060e4 <memset>
    }

    return node;
 8000c46:	68fb      	ldr	r3, [r7, #12]
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3710      	adds	r7, #16
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8000c5c:	e037      	b.n	8000cce <cJSON_Delete+0x7e>
    {
        next = item->next;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d108      	bne.n	8000c82 <cJSON_Delete+0x32>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	689b      	ldr	r3, [r3, #8]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d004      	beq.n	8000c82 <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	689b      	ldr	r3, [r3, #8]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff ffe7 	bl	8000c50 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	68db      	ldr	r3, [r3, #12]
 8000c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d109      	bne.n	8000ca2 <cJSON_Delete+0x52>
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	691b      	ldr	r3, [r3, #16]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d005      	beq.n	8000ca2 <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 8000c96:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <cJSON_Delete+0x90>)
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	687a      	ldr	r2, [r7, #4]
 8000c9c:	6912      	ldr	r2, [r2, #16]
 8000c9e:	4610      	mov	r0, r2
 8000ca0:	4798      	blx	r3
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	68db      	ldr	r3, [r3, #12]
 8000ca6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d109      	bne.n	8000cc2 <cJSON_Delete+0x72>
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6a1b      	ldr	r3, [r3, #32]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d005      	beq.n	8000cc2 <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 8000cb6:	4b0a      	ldr	r3, [pc, #40]	; (8000ce0 <cJSON_Delete+0x90>)
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	6a12      	ldr	r2, [r2, #32]
 8000cbe:	4610      	mov	r0, r2
 8000cc0:	4798      	blx	r3
        }
        global_hooks.deallocate(item);
 8000cc2:	4b07      	ldr	r3, [pc, #28]	; (8000ce0 <cJSON_Delete+0x90>)
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	6878      	ldr	r0, [r7, #4]
 8000cc8:	4798      	blx	r3
        item = next;
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d1c4      	bne.n	8000c5e <cJSON_Delete+0xe>
    }
}
 8000cd4:	bf00      	nop
 8000cd6:	bf00      	nop
 8000cd8:	3710      	adds	r7, #16
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20000000 	.word	0x20000000

08000ce4 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 8000ce8:	232e      	movs	r3, #46	; 0x2e
#endif
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bc80      	pop	{r7}
 8000cf0:	4770      	bx	lr
 8000cf2:	0000      	movs	r0, r0
 8000cf4:	0000      	movs	r0, r0
	...

08000cf8 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b098      	sub	sp, #96	; 0x60
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
 8000d00:	6039      	str	r1, [r7, #0]
    double number = 0;
 8000d02:	f04f 0200 	mov.w	r2, #0
 8000d06:	f04f 0300 	mov.w	r3, #0
 8000d0a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    unsigned char *after_end = NULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 8000d12:	f7ff ffe7 	bl	8000ce4 <get_decimal_point>
 8000d16:	4603      	mov	r3, r0
 8000d18:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    size_t i = 0;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	65fb      	str	r3, [r7, #92]	; 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d003      	beq.n	8000d2e <parse_number+0x36>
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d101      	bne.n	8000d32 <parse_number+0x3a>
    {
        return false;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	e0c6      	b.n	8000ec0 <parse_number+0x1c8>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8000d32:	2300      	movs	r3, #0
 8000d34:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000d36:	e063      	b.n	8000e00 <parse_number+0x108>
    {
        switch (buffer_at_offset(input_buffer)[i])
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	6899      	ldr	r1, [r3, #8]
 8000d40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d42:	440b      	add	r3, r1
 8000d44:	4413      	add	r3, r2
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	2b45      	cmp	r3, #69	; 0x45
 8000d4a:	dc3d      	bgt.n	8000dc8 <parse_number+0xd0>
 8000d4c:	2b2b      	cmp	r3, #43	; 0x2b
 8000d4e:	db66      	blt.n	8000e1e <parse_number+0x126>
 8000d50:	3b2b      	subs	r3, #43	; 0x2b
 8000d52:	2b1a      	cmp	r3, #26
 8000d54:	d863      	bhi.n	8000e1e <parse_number+0x126>
 8000d56:	a201      	add	r2, pc, #4	; (adr r2, 8000d5c <parse_number+0x64>)
 8000d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d5c:	08000dcd 	.word	0x08000dcd
 8000d60:	08000e1f 	.word	0x08000e1f
 8000d64:	08000dcd 	.word	0x08000dcd
 8000d68:	08000deb 	.word	0x08000deb
 8000d6c:	08000e1f 	.word	0x08000e1f
 8000d70:	08000dcd 	.word	0x08000dcd
 8000d74:	08000dcd 	.word	0x08000dcd
 8000d78:	08000dcd 	.word	0x08000dcd
 8000d7c:	08000dcd 	.word	0x08000dcd
 8000d80:	08000dcd 	.word	0x08000dcd
 8000d84:	08000dcd 	.word	0x08000dcd
 8000d88:	08000dcd 	.word	0x08000dcd
 8000d8c:	08000dcd 	.word	0x08000dcd
 8000d90:	08000dcd 	.word	0x08000dcd
 8000d94:	08000dcd 	.word	0x08000dcd
 8000d98:	08000e1f 	.word	0x08000e1f
 8000d9c:	08000e1f 	.word	0x08000e1f
 8000da0:	08000e1f 	.word	0x08000e1f
 8000da4:	08000e1f 	.word	0x08000e1f
 8000da8:	08000e1f 	.word	0x08000e1f
 8000dac:	08000e1f 	.word	0x08000e1f
 8000db0:	08000e1f 	.word	0x08000e1f
 8000db4:	08000e1f 	.word	0x08000e1f
 8000db8:	08000e1f 	.word	0x08000e1f
 8000dbc:	08000e1f 	.word	0x08000e1f
 8000dc0:	08000e1f 	.word	0x08000e1f
 8000dc4:	08000dcd 	.word	0x08000dcd
 8000dc8:	2b65      	cmp	r3, #101	; 0x65
 8000dca:	d128      	bne.n	8000e1e <parse_number+0x126>
            case '9':
            case '+':
            case '-':
            case 'e':
            case 'E':
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	6899      	ldr	r1, [r3, #8]
 8000dd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000dd6:	440b      	add	r3, r1
 8000dd8:	4413      	add	r3, r2
 8000dda:	7819      	ldrb	r1, [r3, #0]
 8000ddc:	f107 0208 	add.w	r2, r7, #8
 8000de0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000de2:	4413      	add	r3, r2
 8000de4:	460a      	mov	r2, r1
 8000de6:	701a      	strb	r2, [r3, #0]
                break;
 8000de8:	e007      	b.n	8000dfa <parse_number+0x102>

            case '.':
                number_c_string[i] = decimal_point;
 8000dea:	f107 0208 	add.w	r2, r7, #8
 8000dee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000df0:	4413      	add	r3, r2
 8000df2:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8000df6:	701a      	strb	r2, [r3, #0]
                break;
 8000df8:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8000dfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000e00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e02:	2b3e      	cmp	r3, #62	; 0x3e
 8000e04:	d80d      	bhi.n	8000e22 <parse_number+0x12a>
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d00a      	beq.n	8000e22 <parse_number+0x12a>
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	689a      	ldr	r2, [r3, #8]
 8000e10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e12:	441a      	add	r2, r3
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d38d      	bcc.n	8000d38 <parse_number+0x40>

            default:
                goto loop_end;
        }
    }
loop_end:
 8000e1c:	e001      	b.n	8000e22 <parse_number+0x12a>
                goto loop_end;
 8000e1e:	bf00      	nop
 8000e20:	e000      	b.n	8000e24 <parse_number+0x12c>
loop_end:
 8000e22:	bf00      	nop
    number_c_string[i] = '\0';
 8000e24:	f107 0208 	add.w	r2, r7, #8
 8000e28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e2a:	4413      	add	r3, r2
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 8000e30:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000e34:	f107 0308 	add.w	r3, r7, #8
 8000e38:	4611      	mov	r1, r2
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f006 fda0 	bl	8007980 <strtod>
 8000e40:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
    if (number_c_string == after_end)
 8000e44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000e46:	f107 0308 	add.w	r3, r7, #8
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d101      	bne.n	8000e52 <parse_number+0x15a>
    {
        return false; /* parse_error */
 8000e4e:	2300      	movs	r3, #0
 8000e50:	e036      	b.n	8000ec0 <parse_number+0x1c8>
    }

    item->valuedouble = number;
 8000e52:	6879      	ldr	r1, [r7, #4]
 8000e54:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8000e58:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 8000e5c:	a31a      	add	r3, pc, #104	; (adr r3, 8000ec8 <parse_number+0x1d0>)
 8000e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e62:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8000e66:	f7ff fdc7 	bl	80009f8 <__aeabi_dcmpge>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d004      	beq.n	8000e7a <parse_number+0x182>
    {
        item->valueint = INT_MAX;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8000e76:	615a      	str	r2, [r3, #20]
 8000e78:	e015      	b.n	8000ea6 <parse_number+0x1ae>
    }
    else if (number <= (double)INT_MIN)
 8000e7a:	f04f 0200 	mov.w	r2, #0
 8000e7e:	4b14      	ldr	r3, [pc, #80]	; (8000ed0 <parse_number+0x1d8>)
 8000e80:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8000e84:	f7ff fdae 	bl	80009e4 <__aeabi_dcmple>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d004      	beq.n	8000e98 <parse_number+0x1a0>
    {
        item->valueint = INT_MIN;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000e94:	615a      	str	r2, [r3, #20]
 8000e96:	e006      	b.n	8000ea6 <parse_number+0x1ae>
    }
    else
    {
        item->valueint = (int)number;
 8000e98:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8000e9c:	f7ff fdd6 	bl	8000a4c <__aeabi_d2iz>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2208      	movs	r2, #8
 8000eaa:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	689b      	ldr	r3, [r3, #8]
 8000eb0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000eb2:	f107 0208 	add.w	r2, r7, #8
 8000eb6:	1a8a      	subs	r2, r1, r2
 8000eb8:	441a      	add	r2, r3
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	609a      	str	r2, [r3, #8]
    return true;
 8000ebe:	2301      	movs	r3, #1
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3760      	adds	r7, #96	; 0x60
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	ffc00000 	.word	0xffc00000
 8000ecc:	41dfffff 	.word	0x41dfffff
 8000ed0:	c1e00000 	.word	0xc1e00000

08000ed4 <parse_hex4>:
    return true;
}

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 8000edc:	2300      	movs	r3, #0
 8000ede:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	60bb      	str	r3, [r7, #8]
 8000ee8:	e04c      	b.n	8000f84 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	4413      	add	r3, r2
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	2b2f      	cmp	r3, #47	; 0x2f
 8000ef4:	d90f      	bls.n	8000f16 <parse_hex4+0x42>
 8000ef6:	687a      	ldr	r2, [r7, #4]
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	4413      	add	r3, r2
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	2b39      	cmp	r3, #57	; 0x39
 8000f00:	d809      	bhi.n	8000f16 <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	4413      	add	r3, r2
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	4413      	add	r3, r2
 8000f10:	3b30      	subs	r3, #48	; 0x30
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	e02d      	b.n	8000f72 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	2b40      	cmp	r3, #64	; 0x40
 8000f20:	d90f      	bls.n	8000f42 <parse_hex4+0x6e>
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	4413      	add	r3, r2
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	2b46      	cmp	r3, #70	; 0x46
 8000f2c:	d809      	bhi.n	8000f42 <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	4413      	add	r3, r2
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	461a      	mov	r2, r3
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	3b37      	subs	r3, #55	; 0x37
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	e017      	b.n	8000f72 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	4413      	add	r3, r2
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	2b60      	cmp	r3, #96	; 0x60
 8000f4c:	d90f      	bls.n	8000f6e <parse_hex4+0x9a>
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	4413      	add	r3, r2
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	2b66      	cmp	r3, #102	; 0x66
 8000f58:	d809      	bhi.n	8000f6e <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	4413      	add	r3, r2
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	461a      	mov	r2, r3
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	4413      	add	r3, r2
 8000f68:	3b57      	subs	r3, #87	; 0x57
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	e001      	b.n	8000f72 <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	e00c      	b.n	8000f8c <parse_hex4+0xb8>
        }

        if (i < 3)
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	2b02      	cmp	r3, #2
 8000f76:	d802      	bhi.n	8000f7e <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	011b      	lsls	r3, r3, #4
 8000f7c:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	3301      	adds	r3, #1
 8000f82:	60bb      	str	r3, [r7, #8]
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	2b03      	cmp	r3, #3
 8000f88:	d9af      	bls.n	8000eea <parse_hex4+0x16>
        }
    }

    return h;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3714      	adds	r7, #20
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bc80      	pop	{r7}
 8000f94:	4770      	bx	lr
	...

08000f98 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08a      	sub	sp, #40	; 0x28
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int first_code = 0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    unsigned char utf8_position = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    unsigned char sequence_length = 0;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    unsigned char first_byte_mark = 0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 8000fc8:	68ba      	ldr	r2, [r7, #8]
 8000fca:	69bb      	ldr	r3, [r7, #24]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	2b05      	cmp	r3, #5
 8000fd0:	f340 80b7 	ble.w	8001142 <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	3302      	adds	r3, #2
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff ff7b 	bl	8000ed4 <parse_hex4>
 8000fde:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8000fe6:	d304      	bcc.n	8000ff2 <utf16_literal_to_utf8+0x5a>
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8000fee:	f0c0 80aa 	bcc.w	8001146 <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 8000ff8:	d337      	bcc.n	800106a <utf16_literal_to_utf8+0xd2>
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8001000:	d233      	bcs.n	800106a <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	3306      	adds	r3, #6
 8001006:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 800100c:	230c      	movs	r3, #12
 800100e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if ((input_end - second_sequence) < 6)
 8001012:	68ba      	ldr	r2, [r7, #8]
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	1ad3      	subs	r3, r2, r3
 8001018:	2b05      	cmp	r3, #5
 800101a:	f340 8096 	ble.w	800114a <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	2b5c      	cmp	r3, #92	; 0x5c
 8001024:	f040 8093 	bne.w	800114e <utf16_literal_to_utf8+0x1b6>
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	3301      	adds	r3, #1
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2b75      	cmp	r3, #117	; 0x75
 8001030:	f040 808d 	bne.w	800114e <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	3302      	adds	r3, #2
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff ff4b 	bl	8000ed4 <parse_hex4>
 800103e:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8001046:	f0c0 8084 	bcc.w	8001152 <utf16_literal_to_utf8+0x1ba>
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8001050:	d27f      	bcs.n	8001152 <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	029a      	lsls	r2, r3, #10
 8001056:	4b43      	ldr	r3, [pc, #268]	; (8001164 <utf16_literal_to_utf8+0x1cc>)
 8001058:	4013      	ands	r3, r2
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001060:	4313      	orrs	r3, r2
 8001062:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001066:	627b      	str	r3, [r7, #36]	; 0x24
    {
 8001068:	e004      	b.n	8001074 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 800106a:	2306      	movs	r3, #6
 800106c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        codepoint = first_code;
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 8001074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001076:	2b7f      	cmp	r3, #127	; 0x7f
 8001078:	d803      	bhi.n	8001082 <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 800107a:	2301      	movs	r3, #1
 800107c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001080:	e01f      	b.n	80010c2 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 8001082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001084:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001088:	d206      	bcs.n	8001098 <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 800108a:	2302      	movs	r3, #2
 800108c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 8001090:	23c0      	movs	r3, #192	; 0xc0
 8001092:	f887 3020 	strb.w	r3, [r7, #32]
 8001096:	e014      	b.n	80010c2 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 8001098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800109e:	d206      	bcs.n	80010ae <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 80010a0:	2303      	movs	r3, #3
 80010a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 80010a6:	23e0      	movs	r3, #224	; 0xe0
 80010a8:	f887 3020 	strb.w	r3, [r7, #32]
 80010ac:	e009      	b.n	80010c2 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 80010ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b0:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 80010b4:	d24f      	bcs.n	8001156 <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 80010b6:	2304      	movs	r3, #4
 80010b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 80010bc:	23f0      	movs	r3, #240	; 0xf0
 80010be:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80010c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80010c6:	3b01      	subs	r3, #1
 80010c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80010cc:	e015      	b.n	80010fa <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 80010ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6819      	ldr	r1, [r3, #0]
 80010dc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80010e0:	440b      	add	r3, r1
 80010e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80010e6:	b2d2      	uxtb	r2, r2
 80010e8:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 80010ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ec:	099b      	lsrs	r3, r3, #6
 80010ee:	627b      	str	r3, [r7, #36]	; 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80010f0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80010f4:	3b01      	subs	r3, #1
 80010f6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80010fa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d1e5      	bne.n	80010ce <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 8001102:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001106:	2b01      	cmp	r3, #1
 8001108:	d909      	bls.n	800111e <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 800110a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110c:	b2d9      	uxtb	r1, r3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001116:	430a      	orrs	r2, r1
 8001118:	b2d2      	uxtb	r2, r2
 800111a:	701a      	strb	r2, [r3, #0]
 800111c:	e007      	b.n	800112e <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 800111e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001120:	b2da      	uxtb	r2, r3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800112a:	b2d2      	uxtb	r2, r2
 800112c:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001136:	441a      	add	r2, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	601a      	str	r2, [r3, #0]

    return sequence_length;
 800113c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001140:	e00b      	b.n	800115a <utf16_literal_to_utf8+0x1c2>
        goto fail;
 8001142:	bf00      	nop
 8001144:	e008      	b.n	8001158 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 8001146:	bf00      	nop
 8001148:	e006      	b.n	8001158 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800114a:	bf00      	nop
 800114c:	e004      	b.n	8001158 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800114e:	bf00      	nop
 8001150:	e002      	b.n	8001158 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8001152:	bf00      	nop
 8001154:	e000      	b.n	8001158 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 8001156:	bf00      	nop

fail:
    return 0;
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3728      	adds	r7, #40	; 0x28
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	000ffc00 	.word	0x000ffc00

08001168 <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08a      	sub	sp, #40	; 0x28
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	3301      	adds	r3, #1
 800117c:	4413      	add	r3, r2
 800117e:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	3301      	adds	r3, #1
 800118a:	4413      	add	r3, r2
 800118c:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 800118e:	2300      	movs	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 8001192:	2300      	movs	r3, #0
 8001194:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	4413      	add	r3, r2
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b22      	cmp	r3, #34	; 0x22
 80011a4:	f040 8102 	bne.w	80013ac <parse_string+0x244>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 80011b0:	e017      	b.n	80011e2 <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 80011b2:	6a3b      	ldr	r3, [r7, #32]
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b5c      	cmp	r3, #92	; 0x5c
 80011b8:	d110      	bne.n	80011dc <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 80011ba:	6a3b      	ldr	r3, [r7, #32]
 80011bc:	1c5a      	adds	r2, r3, #1
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	461a      	mov	r2, r3
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	429a      	cmp	r2, r3
 80011cc:	f080 80f0 	bcs.w	80013b0 <parse_string+0x248>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	3301      	adds	r3, #1
 80011d4:	61bb      	str	r3, [r7, #24]
                input_end++;
 80011d6:	6a3b      	ldr	r3, [r7, #32]
 80011d8:	3301      	adds	r3, #1
 80011da:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 80011dc:	6a3b      	ldr	r3, [r7, #32]
 80011de:	3301      	adds	r3, #1
 80011e0:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	6a3a      	ldr	r2, [r7, #32]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	461a      	mov	r2, r3
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d203      	bcs.n	80011fc <parse_string+0x94>
 80011f4:	6a3b      	ldr	r3, [r7, #32]
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b22      	cmp	r3, #34	; 0x22
 80011fa:	d1da      	bne.n	80011b2 <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	6a3a      	ldr	r2, [r7, #32]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	461a      	mov	r2, r3
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	429a      	cmp	r2, r3
 800120c:	f080 80d2 	bcs.w	80013b4 <parse_string+0x24c>
 8001210:	6a3b      	ldr	r3, [r7, #32]
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	2b22      	cmp	r3, #34	; 0x22
 8001216:	f040 80cd 	bne.w	80013b4 <parse_string+0x24c>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	4413      	add	r3, r2
 8001224:	6a3a      	ldr	r2, [r7, #32]
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	461a      	mov	r2, r3
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	691b      	ldr	r3, [r3, #16]
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	3201      	adds	r2, #1
 8001238:	4610      	mov	r0, r2
 800123a:	4798      	blx	r3
 800123c:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	2b00      	cmp	r3, #0
 8001242:	f000 80b9 	beq.w	80013b8 <parse_string+0x250>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 800124a:	e093      	b.n	8001374 <parse_string+0x20c>
    {
        if (*input_pointer != '\\')
 800124c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	2b5c      	cmp	r3, #92	; 0x5c
 8001252:	d008      	beq.n	8001266 <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 8001254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001256:	1c53      	adds	r3, r2, #1
 8001258:	627b      	str	r3, [r7, #36]	; 0x24
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	1c59      	adds	r1, r3, #1
 800125e:	60f9      	str	r1, [r7, #12]
 8001260:	7812      	ldrb	r2, [r2, #0]
 8001262:	701a      	strb	r2, [r3, #0]
 8001264:	e086      	b.n	8001374 <parse_string+0x20c>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 8001266:	2302      	movs	r3, #2
 8001268:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 800126a:	6a3a      	ldr	r2, [r7, #32]
 800126c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	2b00      	cmp	r3, #0
 8001272:	f340 80a3 	ble.w	80013bc <parse_string+0x254>
            {
                goto fail;
            }

            switch (input_pointer[1])
 8001276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001278:	3301      	adds	r3, #1
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2b75      	cmp	r3, #117	; 0x75
 800127e:	f300 809f 	bgt.w	80013c0 <parse_string+0x258>
 8001282:	2b5c      	cmp	r3, #92	; 0x5c
 8001284:	da04      	bge.n	8001290 <parse_string+0x128>
 8001286:	2b22      	cmp	r3, #34	; 0x22
 8001288:	d05c      	beq.n	8001344 <parse_string+0x1dc>
 800128a:	2b2f      	cmp	r3, #47	; 0x2f
 800128c:	d05a      	beq.n	8001344 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 800128e:	e097      	b.n	80013c0 <parse_string+0x258>
 8001290:	3b5c      	subs	r3, #92	; 0x5c
 8001292:	2b19      	cmp	r3, #25
 8001294:	f200 8094 	bhi.w	80013c0 <parse_string+0x258>
 8001298:	a201      	add	r2, pc, #4	; (adr r2, 80012a0 <parse_string+0x138>)
 800129a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800129e:	bf00      	nop
 80012a0:	08001345 	.word	0x08001345
 80012a4:	080013c1 	.word	0x080013c1
 80012a8:	080013c1 	.word	0x080013c1
 80012ac:	080013c1 	.word	0x080013c1
 80012b0:	080013c1 	.word	0x080013c1
 80012b4:	080013c1 	.word	0x080013c1
 80012b8:	08001309 	.word	0x08001309
 80012bc:	080013c1 	.word	0x080013c1
 80012c0:	080013c1 	.word	0x080013c1
 80012c4:	080013c1 	.word	0x080013c1
 80012c8:	08001315 	.word	0x08001315
 80012cc:	080013c1 	.word	0x080013c1
 80012d0:	080013c1 	.word	0x080013c1
 80012d4:	080013c1 	.word	0x080013c1
 80012d8:	080013c1 	.word	0x080013c1
 80012dc:	080013c1 	.word	0x080013c1
 80012e0:	080013c1 	.word	0x080013c1
 80012e4:	080013c1 	.word	0x080013c1
 80012e8:	08001321 	.word	0x08001321
 80012ec:	080013c1 	.word	0x080013c1
 80012f0:	080013c1 	.word	0x080013c1
 80012f4:	080013c1 	.word	0x080013c1
 80012f8:	0800132d 	.word	0x0800132d
 80012fc:	080013c1 	.word	0x080013c1
 8001300:	08001339 	.word	0x08001339
 8001304:	08001353 	.word	0x08001353
                    *output_pointer++ = '\b';
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	1c5a      	adds	r2, r3, #1
 800130c:	60fa      	str	r2, [r7, #12]
 800130e:	2208      	movs	r2, #8
 8001310:	701a      	strb	r2, [r3, #0]
                    break;
 8001312:	e02b      	b.n	800136c <parse_string+0x204>
                    *output_pointer++ = '\f';
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	1c5a      	adds	r2, r3, #1
 8001318:	60fa      	str	r2, [r7, #12]
 800131a:	220c      	movs	r2, #12
 800131c:	701a      	strb	r2, [r3, #0]
                    break;
 800131e:	e025      	b.n	800136c <parse_string+0x204>
                    *output_pointer++ = '\n';
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	1c5a      	adds	r2, r3, #1
 8001324:	60fa      	str	r2, [r7, #12]
 8001326:	220a      	movs	r2, #10
 8001328:	701a      	strb	r2, [r3, #0]
                    break;
 800132a:	e01f      	b.n	800136c <parse_string+0x204>
                    *output_pointer++ = '\r';
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	1c5a      	adds	r2, r3, #1
 8001330:	60fa      	str	r2, [r7, #12]
 8001332:	220d      	movs	r2, #13
 8001334:	701a      	strb	r2, [r3, #0]
                    break;
 8001336:	e019      	b.n	800136c <parse_string+0x204>
                    *output_pointer++ = '\t';
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	1c5a      	adds	r2, r3, #1
 800133c:	60fa      	str	r2, [r7, #12]
 800133e:	2209      	movs	r2, #9
 8001340:	701a      	strb	r2, [r3, #0]
                    break;
 8001342:	e013      	b.n	800136c <parse_string+0x204>
                    *output_pointer++ = input_pointer[1];
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	1c5a      	adds	r2, r3, #1
 8001348:	60fa      	str	r2, [r7, #12]
 800134a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800134c:	7852      	ldrb	r2, [r2, #1]
 800134e:	701a      	strb	r2, [r3, #0]
                    break;
 8001350:	e00c      	b.n	800136c <parse_string+0x204>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 8001352:	f107 030c 	add.w	r3, r7, #12
 8001356:	461a      	mov	r2, r3
 8001358:	6a39      	ldr	r1, [r7, #32]
 800135a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800135c:	f7ff fe1c 	bl	8000f98 <utf16_literal_to_utf8>
 8001360:	4603      	mov	r3, r0
 8001362:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 8001364:	7dfb      	ldrb	r3, [r7, #23]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d02c      	beq.n	80013c4 <parse_string+0x25c>
                    break;
 800136a:	bf00      	nop
            }
            input_pointer += sequence_length;
 800136c:	7dfb      	ldrb	r3, [r7, #23]
 800136e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001370:	4413      	add	r3, r2
 8001372:	627b      	str	r3, [r7, #36]	; 0x24
    while (input_pointer < input_end)
 8001374:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001376:	6a3b      	ldr	r3, [r7, #32]
 8001378:	429a      	cmp	r2, r3
 800137a:	f4ff af67 	bcc.w	800124c <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	2200      	movs	r2, #0
 8001382:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2210      	movs	r2, #16
 8001388:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	69fa      	ldr	r2, [r7, #28]
 800138e:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	6a3a      	ldr	r2, [r7, #32]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	461a      	mov	r2, r3
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	1c5a      	adds	r2, r3, #1
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	609a      	str	r2, [r3, #8]

    return true;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e01e      	b.n	80013ea <parse_string+0x282>
        goto fail;
 80013ac:	bf00      	nop
 80013ae:	e00a      	b.n	80013c6 <parse_string+0x25e>
                    goto fail;
 80013b0:	bf00      	nop
 80013b2:	e008      	b.n	80013c6 <parse_string+0x25e>
            goto fail; /* string ended unexpectedly */
 80013b4:	bf00      	nop
 80013b6:	e006      	b.n	80013c6 <parse_string+0x25e>
            goto fail; /* allocation failure */
 80013b8:	bf00      	nop
 80013ba:	e004      	b.n	80013c6 <parse_string+0x25e>
                goto fail;
 80013bc:	bf00      	nop
 80013be:	e002      	b.n	80013c6 <parse_string+0x25e>
                    goto fail;
 80013c0:	bf00      	nop
 80013c2:	e000      	b.n	80013c6 <parse_string+0x25e>
                        goto fail;
 80013c4:	bf00      	nop

fail:
    if (output != NULL)
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d003      	beq.n	80013d4 <parse_string+0x26c>
    {
        input_buffer->hooks.deallocate(output);
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	695b      	ldr	r3, [r3, #20]
 80013d0:	69f8      	ldr	r0, [r7, #28]
 80013d2:	4798      	blx	r3
    }

    if (input_pointer != NULL)
 80013d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d006      	beq.n	80013e8 <parse_string+0x280>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	461a      	mov	r2, r3
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	609a      	str	r2, [r3, #8]
    }

    return false;
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3728      	adds	r7, #40	; 0x28
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop

080013f4 <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d003      	beq.n	800140a <buffer_skip_whitespace+0x16>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d101      	bne.n	800140e <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 800140a:	2300      	movs	r3, #0
 800140c:	e02c      	b.n	8001468 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d005      	beq.n	8001420 <buffer_skip_whitespace+0x2c>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	689a      	ldr	r2, [r3, #8]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	429a      	cmp	r2, r3
 800141e:	d306      	bcc.n	800142e <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	e021      	b.n	8001468 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	1c5a      	adds	r2, r3, #1
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d00d      	beq.n	8001450 <buffer_skip_whitespace+0x5c>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	689a      	ldr	r2, [r3, #8]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	429a      	cmp	r2, r3
 800143e:	d207      	bcs.n	8001450 <buffer_skip_whitespace+0x5c>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	4413      	add	r3, r2
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	2b20      	cmp	r3, #32
 800144e:	d9e9      	bls.n	8001424 <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689a      	ldr	r2, [r3, #8]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	429a      	cmp	r2, r3
 800145a:	d104      	bne.n	8001466 <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	1e5a      	subs	r2, r3, #1
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8001466:	687b      	ldr	r3, [r7, #4]
}
 8001468:	4618      	mov	r0, r3
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	bc80      	pop	{r7}
 8001470:	4770      	bx	lr
	...

08001474 <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d007      	beq.n	8001492 <skip_utf8_bom+0x1e>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d003      	beq.n	8001492 <skip_utf8_bom+0x1e>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <skip_utf8_bom+0x22>
    {
        return NULL;
 8001492:	2300      	movs	r3, #0
 8001494:	e01c      	b.n	80014d0 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d018      	beq.n	80014ce <skip_utf8_bom+0x5a>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	1d1a      	adds	r2, r3, #4
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d211      	bcs.n	80014ce <skip_utf8_bom+0x5a>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	4413      	add	r3, r2
 80014b4:	2203      	movs	r2, #3
 80014b6:	4908      	ldr	r1, [pc, #32]	; (80014d8 <skip_utf8_bom+0x64>)
 80014b8:	4618      	mov	r0, r3
 80014ba:	f005 fc39 	bl	8006d30 <strncmp>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d104      	bne.n	80014ce <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	1cda      	adds	r2, r3, #3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 80014ce:	687b      	ldr	r3, [r7, #4]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	0800a660 	.word	0x0800a660

080014dc <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d101      	bne.n	80014f2 <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	e00c      	b.n	800150c <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 80014f2:	68f8      	ldr	r0, [r7, #12]
 80014f4:	f7fe fe36 	bl	8000164 <strlen>
 80014f8:	4603      	mov	r3, r0
 80014fa:	3301      	adds	r3, #1
 80014fc:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	68ba      	ldr	r2, [r7, #8]
 8001502:	6979      	ldr	r1, [r7, #20]
 8001504:	68f8      	ldr	r0, [r7, #12]
 8001506:	f000 f805 	bl	8001514 <cJSON_ParseWithLengthOpts>
 800150a:	4603      	mov	r3, r0
}
 800150c:	4618      	mov	r0, r3
 800150e:	3718      	adds	r7, #24
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b08e      	sub	sp, #56	; 0x38
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
 8001520:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 8001522:	f107 0318 	add.w	r3, r7, #24
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	605a      	str	r2, [r3, #4]
 800152c:	609a      	str	r2, [r3, #8]
 800152e:	60da      	str	r2, [r3, #12]
 8001530:	611a      	str	r2, [r3, #16]
 8001532:	615a      	str	r2, [r3, #20]
 8001534:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 8001536:	2300      	movs	r3, #0
 8001538:	637b      	str	r3, [r7, #52]	; 0x34

    /* reset error position */
    global_error.json = NULL;
 800153a:	4b41      	ldr	r3, [pc, #260]	; (8001640 <cJSON_ParseWithLengthOpts+0x12c>)
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 8001540:	4b3f      	ldr	r3, [pc, #252]	; (8001640 <cJSON_ParseWithLengthOpts+0x12c>)
 8001542:	2200      	movs	r2, #0
 8001544:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d042      	beq.n	80015d2 <cJSON_ParseWithLengthOpts+0xbe>
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d03f      	beq.n	80015d2 <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 800155a:	2300      	movs	r3, #0
 800155c:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 800155e:	4a39      	ldr	r2, [pc, #228]	; (8001644 <cJSON_ParseWithLengthOpts+0x130>)
 8001560:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001564:	ca07      	ldmia	r2, {r0, r1, r2}
 8001566:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 800156a:	4836      	ldr	r0, [pc, #216]	; (8001644 <cJSON_ParseWithLengthOpts+0x130>)
 800156c:	f7ff fb5a 	bl	8000c24 <cJSON_New_Item>
 8001570:	6378      	str	r0, [r7, #52]	; 0x34
    if (item == NULL) /* memory fail */
 8001572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001574:	2b00      	cmp	r3, #0
 8001576:	d02e      	beq.n	80015d6 <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 8001578:	f107 0318 	add.w	r3, r7, #24
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff ff79 	bl	8001474 <skip_utf8_bom>
 8001582:	4603      	mov	r3, r0
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff ff35 	bl	80013f4 <buffer_skip_whitespace>
 800158a:	4603      	mov	r3, r0
 800158c:	4619      	mov	r1, r3
 800158e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001590:	f000 f868 	bl	8001664 <parse_value>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d01f      	beq.n	80015da <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d00e      	beq.n	80015be <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 80015a0:	f107 0318 	add.w	r3, r7, #24
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff ff25 	bl	80013f4 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 80015aa:	6a3a      	ldr	r2, [r7, #32]
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d215      	bcs.n	80015de <cJSON_ParseWithLengthOpts+0xca>
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	6a3b      	ldr	r3, [r7, #32]
 80015b6:	4413      	add	r3, r2
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d10f      	bne.n	80015de <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d004      	beq.n	80015ce <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	6a3b      	ldr	r3, [r7, #32]
 80015c8:	441a      	add	r2, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	601a      	str	r2, [r3, #0]
    }

    return item;
 80015ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015d0:	e031      	b.n	8001636 <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 80015d2:	bf00      	nop
 80015d4:	e004      	b.n	80015e0 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 80015d6:	bf00      	nop
 80015d8:	e002      	b.n	80015e0 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 80015da:	bf00      	nop
 80015dc:	e000      	b.n	80015e0 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 80015de:	bf00      	nop

fail:
    if (item != NULL)
 80015e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d002      	beq.n	80015ec <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 80015e6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80015e8:	f7ff fb32 	bl	8000c50 <cJSON_Delete>
    }

    if (value != NULL)
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d020      	beq.n	8001634 <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 80015f6:	2300      	movs	r3, #0
 80015f8:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 80015fa:	6a3a      	ldr	r2, [r7, #32]
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	429a      	cmp	r2, r3
 8001600:	d202      	bcs.n	8001608 <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 8001602:	6a3b      	ldr	r3, [r7, #32]
 8001604:	617b      	str	r3, [r7, #20]
 8001606:	e005      	b.n	8001614 <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d002      	beq.n	8001614 <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	3b01      	subs	r3, #1
 8001612:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d004      	beq.n	8001624 <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	441a      	add	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 8001624:	4b06      	ldr	r3, [pc, #24]	; (8001640 <cJSON_ParseWithLengthOpts+0x12c>)
 8001626:	461a      	mov	r2, r3
 8001628:	f107 0310 	add.w	r3, r7, #16
 800162c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001630:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3738      	adds	r7, #56	; 0x38
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20000208 	.word	0x20000208
 8001644:	20000000 	.word	0x20000000

08001648 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 8001650:	2200      	movs	r2, #0
 8001652:	2100      	movs	r1, #0
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f7ff ff41 	bl	80014dc <cJSON_ParseWithOpts>
 800165a:	4603      	mov	r3, r0
}
 800165c:	4618      	mov	r0, r3
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d003      	beq.n	800167c <parse_value+0x18>
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d101      	bne.n	8001680 <parse_value+0x1c>
    {
        return false; /* no input */
 800167c:	2300      	movs	r3, #0
 800167e:	e0d2      	b.n	8001826 <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d01d      	beq.n	80016c2 <parse_value+0x5e>
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	1d1a      	adds	r2, r3, #4
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	429a      	cmp	r2, r3
 8001692:	d816      	bhi.n	80016c2 <parse_value+0x5e>
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	4413      	add	r3, r2
 800169e:	2204      	movs	r2, #4
 80016a0:	4963      	ldr	r1, [pc, #396]	; (8001830 <parse_value+0x1cc>)
 80016a2:	4618      	mov	r0, r3
 80016a4:	f005 fb44 	bl	8006d30 <strncmp>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d109      	bne.n	80016c2 <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2204      	movs	r2, #4
 80016b2:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	1d1a      	adds	r2, r3, #4
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	609a      	str	r2, [r3, #8]
        return true;
 80016be:	2301      	movs	r3, #1
 80016c0:	e0b1      	b.n	8001826 <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d01d      	beq.n	8001704 <parse_value+0xa0>
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	1d5a      	adds	r2, r3, #5
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d816      	bhi.n	8001704 <parse_value+0xa0>
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	4413      	add	r3, r2
 80016e0:	2205      	movs	r2, #5
 80016e2:	4954      	ldr	r1, [pc, #336]	; (8001834 <parse_value+0x1d0>)
 80016e4:	4618      	mov	r0, r3
 80016e6:	f005 fb23 	bl	8006d30 <strncmp>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d109      	bne.n	8001704 <parse_value+0xa0>
    {
        item->type = cJSON_False;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2201      	movs	r2, #1
 80016f4:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	1d5a      	adds	r2, r3, #5
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	609a      	str	r2, [r3, #8]
        return true;
 8001700:	2301      	movs	r3, #1
 8001702:	e090      	b.n	8001826 <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d020      	beq.n	800174c <parse_value+0xe8>
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	1d1a      	adds	r2, r3, #4
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	429a      	cmp	r2, r3
 8001716:	d819      	bhi.n	800174c <parse_value+0xe8>
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	4413      	add	r3, r2
 8001722:	2204      	movs	r2, #4
 8001724:	4944      	ldr	r1, [pc, #272]	; (8001838 <parse_value+0x1d4>)
 8001726:	4618      	mov	r0, r3
 8001728:	f005 fb02 	bl	8006d30 <strncmp>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d10c      	bne.n	800174c <parse_value+0xe8>
    {
        item->type = cJSON_True;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2202      	movs	r2, #2
 8001736:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2201      	movs	r2, #1
 800173c:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	1d1a      	adds	r2, r3, #4
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	609a      	str	r2, [r3, #8]
        return true;
 8001748:	2301      	movs	r3, #1
 800174a:	e06c      	b.n	8001826 <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d013      	beq.n	800177a <parse_value+0x116>
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	689a      	ldr	r2, [r3, #8]
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	429a      	cmp	r2, r3
 800175c:	d20d      	bcs.n	800177a <parse_value+0x116>
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	4413      	add	r3, r2
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	2b22      	cmp	r3, #34	; 0x22
 800176c:	d105      	bne.n	800177a <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 800176e:	6839      	ldr	r1, [r7, #0]
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f7ff fcf9 	bl	8001168 <parse_string>
 8001776:	4603      	mov	r3, r0
 8001778:	e055      	b.n	8001826 <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d023      	beq.n	80017c8 <parse_value+0x164>
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	689a      	ldr	r2, [r3, #8]
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	429a      	cmp	r2, r3
 800178a:	d21d      	bcs.n	80017c8 <parse_value+0x164>
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	4413      	add	r3, r2
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	2b2d      	cmp	r3, #45	; 0x2d
 800179a:	d00f      	beq.n	80017bc <parse_value+0x158>
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	4413      	add	r3, r2
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	2b2f      	cmp	r3, #47	; 0x2f
 80017aa:	d90d      	bls.n	80017c8 <parse_value+0x164>
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	4413      	add	r3, r2
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b39      	cmp	r3, #57	; 0x39
 80017ba:	d805      	bhi.n	80017c8 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 80017bc:	6839      	ldr	r1, [r7, #0]
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f7ff fa9a 	bl	8000cf8 <parse_number>
 80017c4:	4603      	mov	r3, r0
 80017c6:	e02e      	b.n	8001826 <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d013      	beq.n	80017f6 <parse_value+0x192>
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	689a      	ldr	r2, [r3, #8]
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d20d      	bcs.n	80017f6 <parse_value+0x192>
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	4413      	add	r3, r2
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	2b5b      	cmp	r3, #91	; 0x5b
 80017e8:	d105      	bne.n	80017f6 <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 80017ea:	6839      	ldr	r1, [r7, #0]
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f000 f825 	bl	800183c <parse_array>
 80017f2:	4603      	mov	r3, r0
 80017f4:	e017      	b.n	8001826 <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d013      	beq.n	8001824 <parse_value+0x1c0>
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	689a      	ldr	r2, [r3, #8]
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	429a      	cmp	r2, r3
 8001806:	d20d      	bcs.n	8001824 <parse_value+0x1c0>
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	4413      	add	r3, r2
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b7b      	cmp	r3, #123	; 0x7b
 8001816:	d105      	bne.n	8001824 <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 8001818:	6839      	ldr	r1, [r7, #0]
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f000 f8d2 	bl	80019c4 <parse_object>
 8001820:	4603      	mov	r3, r0
 8001822:	e000      	b.n	8001826 <parse_value+0x1c2>
    }

    return false;
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	0800a634 	.word	0x0800a634
 8001834:	0800a664 	.word	0x0800a664
 8001838:	0800a66c 	.word	0x0800a66c

0800183c <parse_array>:
    }
}

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 8001846:	2300      	movs	r3, #0
 8001848:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 800184a:	2300      	movs	r3, #0
 800184c:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001856:	d301      	bcc.n	800185c <parse_array+0x20>
    {
        return false; /* to deeply nested */
 8001858:	2300      	movs	r3, #0
 800185a:	e0af      	b.n	80019bc <parse_array+0x180>
    }
    input_buffer->depth++;
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	1c5a      	adds	r2, r3, #1
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	4413      	add	r3, r2
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	2b5b      	cmp	r3, #91	; 0x5b
 8001874:	f040 8094 	bne.w	80019a0 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	1c5a      	adds	r2, r3, #1
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8001882:	6838      	ldr	r0, [r7, #0]
 8001884:	f7ff fdb6 	bl	80013f4 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d00d      	beq.n	80018aa <parse_array+0x6e>
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	689a      	ldr	r2, [r3, #8]
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	429a      	cmp	r2, r3
 8001898:	d207      	bcs.n	80018aa <parse_array+0x6e>
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	4413      	add	r3, r2
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	2b5d      	cmp	r3, #93	; 0x5d
 80018a8:	d061      	beq.n	800196e <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d005      	beq.n	80018bc <parse_array+0x80>
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	689a      	ldr	r2, [r3, #8]
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d305      	bcc.n	80018c8 <parse_array+0x8c>
    {
        input_buffer->offset--;
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	1e5a      	subs	r2, r3, #1
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	609a      	str	r2, [r3, #8]
        goto fail;
 80018c6:	e072      	b.n	80019ae <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	1e5a      	subs	r2, r3, #1
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	3310      	adds	r3, #16
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff f9a4 	bl	8000c24 <cJSON_New_Item>
 80018dc:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d05f      	beq.n	80019a4 <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d104      	bne.n	80018f4 <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	617b      	str	r3, [r7, #20]
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	613b      	str	r3, [r7, #16]
 80018f2:	e007      	b.n	8001904 <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	68fa      	ldr	r2, [r7, #12]
 80018f8:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	1c5a      	adds	r2, r3, #1
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800190e:	6838      	ldr	r0, [r7, #0]
 8001910:	f7ff fd70 	bl	80013f4 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8001914:	6839      	ldr	r1, [r7, #0]
 8001916:	6938      	ldr	r0, [r7, #16]
 8001918:	f7ff fea4 	bl	8001664 <parse_value>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d042      	beq.n	80019a8 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8001922:	6838      	ldr	r0, [r7, #0]
 8001924:	f7ff fd66 	bl	80013f4 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d00d      	beq.n	800194a <parse_array+0x10e>
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	689a      	ldr	r2, [r3, #8]
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	429a      	cmp	r2, r3
 8001938:	d207      	bcs.n	800194a <parse_array+0x10e>
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	4413      	add	r3, r2
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	2b2c      	cmp	r3, #44	; 0x2c
 8001948:	d0c3      	beq.n	80018d2 <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d02d      	beq.n	80019ac <parse_array+0x170>
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	689a      	ldr	r2, [r3, #8]
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	429a      	cmp	r2, r3
 800195a:	d227      	bcs.n	80019ac <parse_array+0x170>
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	4413      	add	r3, r2
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2b5d      	cmp	r3, #93	; 0x5d
 800196a:	d11f      	bne.n	80019ac <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 800196c:	e000      	b.n	8001970 <parse_array+0x134>
        goto success;
 800196e:	bf00      	nop
    input_buffer->depth--;
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	1e5a      	subs	r2, r3, #1
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d002      	beq.n	8001986 <parse_array+0x14a>
        head->prev = current_item;
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2220      	movs	r2, #32
 800198a:	60da      	str	r2, [r3, #12]
    item->child = head;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	697a      	ldr	r2, [r7, #20]
 8001990:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	1c5a      	adds	r2, r3, #1
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	609a      	str	r2, [r3, #8]

    return true;
 800199c:	2301      	movs	r3, #1
 800199e:	e00d      	b.n	80019bc <parse_array+0x180>
        goto fail;
 80019a0:	bf00      	nop
 80019a2:	e004      	b.n	80019ae <parse_array+0x172>
            goto fail; /* allocation failure */
 80019a4:	bf00      	nop
 80019a6:	e002      	b.n	80019ae <parse_array+0x172>
            goto fail; /* failed to parse value */
 80019a8:	bf00      	nop
 80019aa:	e000      	b.n	80019ae <parse_array+0x172>
        goto fail; /* expected end of array */
 80019ac:	bf00      	nop

fail:
    if (head != NULL)
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d002      	beq.n	80019ba <parse_array+0x17e>
    {
        cJSON_Delete(head);
 80019b4:	6978      	ldr	r0, [r7, #20]
 80019b6:	f7ff f94b 	bl	8000c50 <cJSON_Delete>
    }

    return false;
 80019ba:	2300      	movs	r3, #0
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3718      	adds	r7, #24
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <parse_object>:
    return true;
}

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b086      	sub	sp, #24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 80019ce:	2300      	movs	r3, #0
 80019d0:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 80019d2:	2300      	movs	r3, #0
 80019d4:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019de:	d301      	bcc.n	80019e4 <parse_object+0x20>
    {
        return false; /* to deeply nested */
 80019e0:	2300      	movs	r3, #0
 80019e2:	e0ea      	b.n	8001bba <parse_object+0x1f6>
    }
    input_buffer->depth++;
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	1c5a      	adds	r2, r3, #1
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	f000 80d0 	beq.w	8001b96 <parse_object+0x1d2>
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	689a      	ldr	r2, [r3, #8]
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	f080 80c9 	bcs.w	8001b96 <parse_object+0x1d2>
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	2b7b      	cmp	r3, #123	; 0x7b
 8001a12:	f040 80c0 	bne.w	8001b96 <parse_object+0x1d2>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	1c5a      	adds	r2, r3, #1
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8001a20:	6838      	ldr	r0, [r7, #0]
 8001a22:	f7ff fce7 	bl	80013f4 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d00e      	beq.n	8001a4a <parse_object+0x86>
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	689a      	ldr	r2, [r3, #8]
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d208      	bcs.n	8001a4a <parse_object+0x86>
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	4413      	add	r3, r2
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	2b7d      	cmp	r3, #125	; 0x7d
 8001a46:	f000 808d 	beq.w	8001b64 <parse_object+0x1a0>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d005      	beq.n	8001a5c <parse_object+0x98>
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	689a      	ldr	r2, [r3, #8]
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d305      	bcc.n	8001a68 <parse_object+0xa4>
    {
        input_buffer->offset--;
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	1e5a      	subs	r2, r3, #1
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	609a      	str	r2, [r3, #8]
        goto fail;
 8001a66:	e0a1      	b.n	8001bac <parse_object+0x1e8>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	1e5a      	subs	r2, r3, #1
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	3310      	adds	r3, #16
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff f8d4 	bl	8000c24 <cJSON_New_Item>
 8001a7c:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	f000 808a 	beq.w	8001b9a <parse_object+0x1d6>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d104      	bne.n	8001a96 <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	617b      	str	r3, [r7, #20]
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	613b      	str	r3, [r7, #16]
 8001a94:	e007      	b.n	8001aa6 <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	68fa      	ldr	r2, [r7, #12]
 8001a9a:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	613b      	str	r3, [r7, #16]
        }

        /* parse the name of the child */
        input_buffer->offset++;
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	1c5a      	adds	r2, r3, #1
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001ab0:	6838      	ldr	r0, [r7, #0]
 8001ab2:	f7ff fc9f 	bl	80013f4 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 8001ab6:	6839      	ldr	r1, [r7, #0]
 8001ab8:	6938      	ldr	r0, [r7, #16]
 8001aba:	f7ff fb55 	bl	8001168 <parse_string>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d06c      	beq.n	8001b9e <parse_object+0x1da>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 8001ac4:	6838      	ldr	r0, [r7, #0]
 8001ac6:	f7ff fc95 	bl	80013f4 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	691a      	ldr	r2, [r3, #16]
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d061      	beq.n	8001ba2 <parse_object+0x1de>
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	689a      	ldr	r2, [r3, #8]
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d25b      	bcs.n	8001ba2 <parse_object+0x1de>
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	4413      	add	r3, r2
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	2b3a      	cmp	r3, #58	; 0x3a
 8001af8:	d153      	bne.n	8001ba2 <parse_object+0x1de>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	1c5a      	adds	r2, r3, #1
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001b04:	6838      	ldr	r0, [r7, #0]
 8001b06:	f7ff fc75 	bl	80013f4 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8001b0a:	6839      	ldr	r1, [r7, #0]
 8001b0c:	6938      	ldr	r0, [r7, #16]
 8001b0e:	f7ff fda9 	bl	8001664 <parse_value>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d046      	beq.n	8001ba6 <parse_object+0x1e2>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8001b18:	6838      	ldr	r0, [r7, #0]
 8001b1a:	f7ff fc6b 	bl	80013f4 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d00d      	beq.n	8001b40 <parse_object+0x17c>
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	689a      	ldr	r2, [r3, #8]
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d207      	bcs.n	8001b40 <parse_object+0x17c>
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	4413      	add	r3, r2
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	2b2c      	cmp	r3, #44	; 0x2c
 8001b3e:	d098      	beq.n	8001a72 <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d031      	beq.n	8001baa <parse_object+0x1e6>
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	689a      	ldr	r2, [r3, #8]
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d22b      	bcs.n	8001baa <parse_object+0x1e6>
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	2b7d      	cmp	r3, #125	; 0x7d
 8001b60:	d123      	bne.n	8001baa <parse_object+0x1e6>
    {
        goto fail; /* expected end of object */
    }

success:
 8001b62:	e000      	b.n	8001b66 <parse_object+0x1a2>
        goto success; /* empty object */
 8001b64:	bf00      	nop
    input_buffer->depth--;
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	1e5a      	subs	r2, r3, #1
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d002      	beq.n	8001b7c <parse_object+0x1b8>
        head->prev = current_item;
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2240      	movs	r2, #64	; 0x40
 8001b80:	60da      	str	r2, [r3, #12]
    item->child = head;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	697a      	ldr	r2, [r7, #20]
 8001b86:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	1c5a      	adds	r2, r3, #1
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	609a      	str	r2, [r3, #8]
    return true;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e011      	b.n	8001bba <parse_object+0x1f6>
        goto fail; /* not an object */
 8001b96:	bf00      	nop
 8001b98:	e008      	b.n	8001bac <parse_object+0x1e8>
            goto fail; /* allocation failure */
 8001b9a:	bf00      	nop
 8001b9c:	e006      	b.n	8001bac <parse_object+0x1e8>
            goto fail; /* failed to parse name */
 8001b9e:	bf00      	nop
 8001ba0:	e004      	b.n	8001bac <parse_object+0x1e8>
            goto fail; /* invalid object */
 8001ba2:	bf00      	nop
 8001ba4:	e002      	b.n	8001bac <parse_object+0x1e8>
            goto fail; /* failed to parse value */
 8001ba6:	bf00      	nop
 8001ba8:	e000      	b.n	8001bac <parse_object+0x1e8>
        goto fail; /* expected end of object */
 8001baa:	bf00      	nop

fail:
    if (head != NULL)
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d002      	beq.n	8001bb8 <parse_object+0x1f4>
    {
        cJSON_Delete(head);
 8001bb2:	6978      	ldr	r0, [r7, #20]
 8001bb4:	f7ff f84c 	bl	8000c50 <cJSON_Delete>
    }

    return false;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3718      	adds	r7, #24
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b086      	sub	sp, #24
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	60f8      	str	r0, [r7, #12]
 8001bca:	60b9      	str	r1, [r7, #8]
 8001bcc:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d002      	beq.n	8001bde <get_object_item+0x1c>
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <get_object_item+0x20>
    {
        return NULL;
 8001bde:	2300      	movs	r3, #0
 8001be0:	e033      	b.n	8001c4a <get_object_item+0x88>
    }

    current_element = object->child;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d017      	beq.n	8001c1e <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8001bee:	e002      	b.n	8001bf6 <get_object_item+0x34>
        {
            current_element = current_element->next;
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d01c      	beq.n	8001c36 <get_object_item+0x74>
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	6a1b      	ldr	r3, [r3, #32]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d018      	beq.n	8001c36 <get_object_item+0x74>
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	6a1b      	ldr	r3, [r3, #32]
 8001c08:	4619      	mov	r1, r3
 8001c0a:	68b8      	ldr	r0, [r7, #8]
 8001c0c:	f7fe faa0 	bl	8000150 <strcmp>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1ec      	bne.n	8001bf0 <get_object_item+0x2e>
 8001c16:	e00e      	b.n	8001c36 <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d008      	beq.n	8001c36 <get_object_item+0x74>
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	6a1b      	ldr	r3, [r3, #32]
 8001c28:	4619      	mov	r1, r3
 8001c2a:	68b8      	ldr	r0, [r7, #8]
 8001c2c:	f7fe ff8e 	bl	8000b4c <case_insensitive_strcmp>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1f0      	bne.n	8001c18 <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d003      	beq.n	8001c44 <get_object_item+0x82>
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	6a1b      	ldr	r3, [r3, #32]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d101      	bne.n	8001c48 <get_object_item+0x86>
        return NULL;
 8001c44:	2300      	movs	r3, #0
 8001c46:	e000      	b.n	8001c4a <get_object_item+0x88>
    }

    return current_element;
 8001c48:	697b      	ldr	r3, [r7, #20]
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3718      	adds	r7, #24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <cJSON_GetObjectItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b082      	sub	sp, #8
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
 8001c5a:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, false);
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	6839      	ldr	r1, [r7, #0]
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f7ff ffae 	bl	8001bc2 <get_object_item>
 8001c66:	4603      	mov	r3, r0
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <__io_putchar>:
#ifdef __GNUC__
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch,FILE *f)
#endif
PUTCHAR_PROTOTYPE {
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
	// CONG PC
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 0xFFFF);
 8001c78:	1d39      	adds	r1, r7, #4
 8001c7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c7e:	2201      	movs	r2, #1
 8001c80:	4803      	ldr	r0, [pc, #12]	; (8001c90 <__io_putchar+0x20>)
 8001c82:	f003 fcf8 	bl	8005676 <HAL_UART_Transmit>
	return ch;
 8001c86:	687b      	ldr	r3, [r7, #4]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3708      	adds	r7, #8
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	2000035c 	.word	0x2000035c

08001c94 <senddata>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// convert to Json
void senddata(unsigned int Temperature, unsigned int Humidity, unsigned int gas,
		unsigned int TB1, unsigned int TB2, uint8_t serNum[5]) {
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b088      	sub	sp, #32
 8001c98:	af02      	add	r7, sp, #8
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
 8001ca0:	603b      	str	r3, [r7, #0]
	/* // {"temp":" 69*c", "gas":"1",...}  */

	// data end of array char
	// delete data
	for (int i = 0; i < 50; i++) {
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	617b      	str	r3, [r7, #20]
 8001ca6:	e025      	b.n	8001cf4 <senddata+0x60>
		Str_temp[i] = 0;
 8001ca8:	4a89      	ldr	r2, [pc, #548]	; (8001ed0 <senddata+0x23c>)
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	4413      	add	r3, r2
 8001cae:	2200      	movs	r2, #0
 8001cb0:	701a      	strb	r2, [r3, #0]
		Str_gas[i] = 0;
 8001cb2:	4a88      	ldr	r2, [pc, #544]	; (8001ed4 <senddata+0x240>)
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	2200      	movs	r2, #0
 8001cba:	701a      	strb	r2, [r3, #0]
		Str_hum[i] = 0;
 8001cbc:	4a86      	ldr	r2, [pc, #536]	; (8001ed8 <senddata+0x244>)
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	701a      	strb	r2, [r3, #0]
		Str_TB1[i] = 0;
 8001cc6:	4a85      	ldr	r2, [pc, #532]	; (8001edc <senddata+0x248>)
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	4413      	add	r3, r2
 8001ccc:	2200      	movs	r2, #0
 8001cce:	701a      	strb	r2, [r3, #0]
		Str_TB2[i] = 0;
 8001cd0:	4a83      	ldr	r2, [pc, #524]	; (8001ee0 <senddata+0x24c>)
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	701a      	strb	r2, [r3, #0]
		Str_ID[i] = 0;
 8001cda:	4a82      	ldr	r2, [pc, #520]	; (8001ee4 <senddata+0x250>)
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	4413      	add	r3, r2
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	701a      	strb	r2, [r3, #0]
		JSON[i] = 0;
 8001ce4:	4a80      	ldr	r2, [pc, #512]	; (8001ee8 <senddata+0x254>)
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	4413      	add	r3, r2
 8001cea:	2200      	movs	r2, #0
 8001cec:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 50; i++) {
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	617b      	str	r3, [r7, #20]
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	2b31      	cmp	r3, #49	; 0x31
 8001cf8:	ddd6      	ble.n	8001ca8 <senddata+0x14>
	}

	// transmit to array char

	sprintf(Str_temp, "%d", Temperature);
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	497b      	ldr	r1, [pc, #492]	; (8001eec <senddata+0x258>)
 8001cfe:	4874      	ldr	r0, [pc, #464]	; (8001ed0 <senddata+0x23c>)
 8001d00:	f004 ffa4 	bl	8006c4c <siprintf>
	sprintf(Str_gas, "%d", gas);
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	4979      	ldr	r1, [pc, #484]	; (8001eec <senddata+0x258>)
 8001d08:	4872      	ldr	r0, [pc, #456]	; (8001ed4 <senddata+0x240>)
 8001d0a:	f004 ff9f 	bl	8006c4c <siprintf>
	sprintf(Str_hum, "%d", Humidity);
 8001d0e:	68ba      	ldr	r2, [r7, #8]
 8001d10:	4976      	ldr	r1, [pc, #472]	; (8001eec <senddata+0x258>)
 8001d12:	4871      	ldr	r0, [pc, #452]	; (8001ed8 <senddata+0x244>)
 8001d14:	f004 ff9a 	bl	8006c4c <siprintf>
	sprintf(Str_TB1, "%d", TB1);
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	4974      	ldr	r1, [pc, #464]	; (8001eec <senddata+0x258>)
 8001d1c:	486f      	ldr	r0, [pc, #444]	; (8001edc <senddata+0x248>)
 8001d1e:	f004 ff95 	bl	8006c4c <siprintf>
	sprintf(Str_TB2, "%d", TB2);
 8001d22:	6a3a      	ldr	r2, [r7, #32]
 8001d24:	4971      	ldr	r1, [pc, #452]	; (8001eec <senddata+0x258>)
 8001d26:	486e      	ldr	r0, [pc, #440]	; (8001ee0 <senddata+0x24c>)
 8001d28:	f004 ff90 	bl	8006c4c <siprintf>
	sprintf(Str_ID, "%d%d%d%d", serNum[1], serNum[2], serNum[3], serNum[4]);
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2e:	3301      	adds	r3, #1
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	4619      	mov	r1, r3
 8001d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d36:	3302      	adds	r3, #2
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3e:	3303      	adds	r3, #3
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	461a      	mov	r2, r3
 8001d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d46:	3304      	adds	r3, #4
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	9301      	str	r3, [sp, #4]
 8001d4c:	9200      	str	r2, [sp, #0]
 8001d4e:	4603      	mov	r3, r0
 8001d50:	460a      	mov	r2, r1
 8001d52:	4967      	ldr	r1, [pc, #412]	; (8001ef0 <senddata+0x25c>)
 8001d54:	4863      	ldr	r0, [pc, #396]	; (8001ee4 <senddata+0x250>)
 8001d56:	f004 ff79 	bl	8006c4c <siprintf>

	// {"tempt":"12","gas":"12","hum":"43"}

	strcat(JSON, "{\"tempt\":\"");
 8001d5a:	4863      	ldr	r0, [pc, #396]	; (8001ee8 <senddata+0x254>)
 8001d5c:	f7fe fa02 	bl	8000164 <strlen>
 8001d60:	4603      	mov	r3, r0
 8001d62:	461a      	mov	r2, r3
 8001d64:	4b60      	ldr	r3, [pc, #384]	; (8001ee8 <senddata+0x254>)
 8001d66:	4413      	add	r3, r2
 8001d68:	4962      	ldr	r1, [pc, #392]	; (8001ef4 <senddata+0x260>)
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	cb03      	ldmia	r3!, {r0, r1}
 8001d70:	6010      	str	r0, [r2, #0]
 8001d72:	6051      	str	r1, [r2, #4]
 8001d74:	8819      	ldrh	r1, [r3, #0]
 8001d76:	789b      	ldrb	r3, [r3, #2]
 8001d78:	8111      	strh	r1, [r2, #8]
 8001d7a:	7293      	strb	r3, [r2, #10]
	strcat(JSON, Str_temp);
 8001d7c:	4954      	ldr	r1, [pc, #336]	; (8001ed0 <senddata+0x23c>)
 8001d7e:	485a      	ldr	r0, [pc, #360]	; (8001ee8 <senddata+0x254>)
 8001d80:	f004 ffc7 	bl	8006d12 <strcat>
	strcat(JSON, "\",");
 8001d84:	4858      	ldr	r0, [pc, #352]	; (8001ee8 <senddata+0x254>)
 8001d86:	f7fe f9ed 	bl	8000164 <strlen>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	4b56      	ldr	r3, [pc, #344]	; (8001ee8 <senddata+0x254>)
 8001d90:	4413      	add	r3, r2
 8001d92:	4a59      	ldr	r2, [pc, #356]	; (8001ef8 <senddata+0x264>)
 8001d94:	8811      	ldrh	r1, [r2, #0]
 8001d96:	7892      	ldrb	r2, [r2, #2]
 8001d98:	8019      	strh	r1, [r3, #0]
 8001d9a:	709a      	strb	r2, [r3, #2]

	strcat(JSON, "\"hum\":\"");
 8001d9c:	4852      	ldr	r0, [pc, #328]	; (8001ee8 <senddata+0x254>)
 8001d9e:	f7fe f9e1 	bl	8000164 <strlen>
 8001da2:	4603      	mov	r3, r0
 8001da4:	461a      	mov	r2, r3
 8001da6:	4b50      	ldr	r3, [pc, #320]	; (8001ee8 <senddata+0x254>)
 8001da8:	4413      	add	r3, r2
 8001daa:	4954      	ldr	r1, [pc, #336]	; (8001efc <senddata+0x268>)
 8001dac:	461a      	mov	r2, r3
 8001dae:	460b      	mov	r3, r1
 8001db0:	cb03      	ldmia	r3!, {r0, r1}
 8001db2:	6010      	str	r0, [r2, #0]
 8001db4:	6051      	str	r1, [r2, #4]
	strcat(JSON, Str_hum);
 8001db6:	4948      	ldr	r1, [pc, #288]	; (8001ed8 <senddata+0x244>)
 8001db8:	484b      	ldr	r0, [pc, #300]	; (8001ee8 <senddata+0x254>)
 8001dba:	f004 ffaa 	bl	8006d12 <strcat>
	strcat(JSON, "\",");
 8001dbe:	484a      	ldr	r0, [pc, #296]	; (8001ee8 <senddata+0x254>)
 8001dc0:	f7fe f9d0 	bl	8000164 <strlen>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	4b47      	ldr	r3, [pc, #284]	; (8001ee8 <senddata+0x254>)
 8001dca:	4413      	add	r3, r2
 8001dcc:	4a4a      	ldr	r2, [pc, #296]	; (8001ef8 <senddata+0x264>)
 8001dce:	8811      	ldrh	r1, [r2, #0]
 8001dd0:	7892      	ldrb	r2, [r2, #2]
 8001dd2:	8019      	strh	r1, [r3, #0]
 8001dd4:	709a      	strb	r2, [r3, #2]

	strcat(JSON, "\"ID\":\"");
 8001dd6:	4844      	ldr	r0, [pc, #272]	; (8001ee8 <senddata+0x254>)
 8001dd8:	f7fe f9c4 	bl	8000164 <strlen>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	461a      	mov	r2, r3
 8001de0:	4b41      	ldr	r3, [pc, #260]	; (8001ee8 <senddata+0x254>)
 8001de2:	4413      	add	r3, r2
 8001de4:	4a46      	ldr	r2, [pc, #280]	; (8001f00 <senddata+0x26c>)
 8001de6:	6810      	ldr	r0, [r2, #0]
 8001de8:	6018      	str	r0, [r3, #0]
 8001dea:	8891      	ldrh	r1, [r2, #4]
 8001dec:	7992      	ldrb	r2, [r2, #6]
 8001dee:	8099      	strh	r1, [r3, #4]
 8001df0:	719a      	strb	r2, [r3, #6]
	strcat(JSON, Str_ID);
 8001df2:	493c      	ldr	r1, [pc, #240]	; (8001ee4 <senddata+0x250>)
 8001df4:	483c      	ldr	r0, [pc, #240]	; (8001ee8 <senddata+0x254>)
 8001df6:	f004 ff8c 	bl	8006d12 <strcat>
	strcat(JSON, "\",");
 8001dfa:	483b      	ldr	r0, [pc, #236]	; (8001ee8 <senddata+0x254>)
 8001dfc:	f7fe f9b2 	bl	8000164 <strlen>
 8001e00:	4603      	mov	r3, r0
 8001e02:	461a      	mov	r2, r3
 8001e04:	4b38      	ldr	r3, [pc, #224]	; (8001ee8 <senddata+0x254>)
 8001e06:	4413      	add	r3, r2
 8001e08:	4a3b      	ldr	r2, [pc, #236]	; (8001ef8 <senddata+0x264>)
 8001e0a:	8811      	ldrh	r1, [r2, #0]
 8001e0c:	7892      	ldrb	r2, [r2, #2]
 8001e0e:	8019      	strh	r1, [r3, #0]
 8001e10:	709a      	strb	r2, [r3, #2]

	strcat(JSON, "\"gas\":\"");
 8001e12:	4835      	ldr	r0, [pc, #212]	; (8001ee8 <senddata+0x254>)
 8001e14:	f7fe f9a6 	bl	8000164 <strlen>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	4b32      	ldr	r3, [pc, #200]	; (8001ee8 <senddata+0x254>)
 8001e1e:	4413      	add	r3, r2
 8001e20:	4938      	ldr	r1, [pc, #224]	; (8001f04 <senddata+0x270>)
 8001e22:	461a      	mov	r2, r3
 8001e24:	460b      	mov	r3, r1
 8001e26:	cb03      	ldmia	r3!, {r0, r1}
 8001e28:	6010      	str	r0, [r2, #0]
 8001e2a:	6051      	str	r1, [r2, #4]
	strcat(JSON, Str_gas);
 8001e2c:	4929      	ldr	r1, [pc, #164]	; (8001ed4 <senddata+0x240>)
 8001e2e:	482e      	ldr	r0, [pc, #184]	; (8001ee8 <senddata+0x254>)
 8001e30:	f004 ff6f 	bl	8006d12 <strcat>
	strcat(JSON, "\",");
 8001e34:	482c      	ldr	r0, [pc, #176]	; (8001ee8 <senddata+0x254>)
 8001e36:	f7fe f995 	bl	8000164 <strlen>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	4b2a      	ldr	r3, [pc, #168]	; (8001ee8 <senddata+0x254>)
 8001e40:	4413      	add	r3, r2
 8001e42:	4a2d      	ldr	r2, [pc, #180]	; (8001ef8 <senddata+0x264>)
 8001e44:	8811      	ldrh	r1, [r2, #0]
 8001e46:	7892      	ldrb	r2, [r2, #2]
 8001e48:	8019      	strh	r1, [r3, #0]
 8001e4a:	709a      	strb	r2, [r3, #2]

	strcat(JSON, "\"TB1\":\"");
 8001e4c:	4826      	ldr	r0, [pc, #152]	; (8001ee8 <senddata+0x254>)
 8001e4e:	f7fe f989 	bl	8000164 <strlen>
 8001e52:	4603      	mov	r3, r0
 8001e54:	461a      	mov	r2, r3
 8001e56:	4b24      	ldr	r3, [pc, #144]	; (8001ee8 <senddata+0x254>)
 8001e58:	4413      	add	r3, r2
 8001e5a:	492b      	ldr	r1, [pc, #172]	; (8001f08 <senddata+0x274>)
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	460b      	mov	r3, r1
 8001e60:	cb03      	ldmia	r3!, {r0, r1}
 8001e62:	6010      	str	r0, [r2, #0]
 8001e64:	6051      	str	r1, [r2, #4]
	strcat(JSON, Str_TB1);
 8001e66:	491d      	ldr	r1, [pc, #116]	; (8001edc <senddata+0x248>)
 8001e68:	481f      	ldr	r0, [pc, #124]	; (8001ee8 <senddata+0x254>)
 8001e6a:	f004 ff52 	bl	8006d12 <strcat>
	strcat(JSON, "\",");
 8001e6e:	481e      	ldr	r0, [pc, #120]	; (8001ee8 <senddata+0x254>)
 8001e70:	f7fe f978 	bl	8000164 <strlen>
 8001e74:	4603      	mov	r3, r0
 8001e76:	461a      	mov	r2, r3
 8001e78:	4b1b      	ldr	r3, [pc, #108]	; (8001ee8 <senddata+0x254>)
 8001e7a:	4413      	add	r3, r2
 8001e7c:	4a1e      	ldr	r2, [pc, #120]	; (8001ef8 <senddata+0x264>)
 8001e7e:	8811      	ldrh	r1, [r2, #0]
 8001e80:	7892      	ldrb	r2, [r2, #2]
 8001e82:	8019      	strh	r1, [r3, #0]
 8001e84:	709a      	strb	r2, [r3, #2]

	strcat(JSON, "\"TB2\":\"");
 8001e86:	4818      	ldr	r0, [pc, #96]	; (8001ee8 <senddata+0x254>)
 8001e88:	f7fe f96c 	bl	8000164 <strlen>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	461a      	mov	r2, r3
 8001e90:	4b15      	ldr	r3, [pc, #84]	; (8001ee8 <senddata+0x254>)
 8001e92:	4413      	add	r3, r2
 8001e94:	491d      	ldr	r1, [pc, #116]	; (8001f0c <senddata+0x278>)
 8001e96:	461a      	mov	r2, r3
 8001e98:	460b      	mov	r3, r1
 8001e9a:	cb03      	ldmia	r3!, {r0, r1}
 8001e9c:	6010      	str	r0, [r2, #0]
 8001e9e:	6051      	str	r1, [r2, #4]
	strcat(JSON, Str_TB2);
 8001ea0:	490f      	ldr	r1, [pc, #60]	; (8001ee0 <senddata+0x24c>)
 8001ea2:	4811      	ldr	r0, [pc, #68]	; (8001ee8 <senddata+0x254>)
 8001ea4:	f004 ff35 	bl	8006d12 <strcat>
	strcat(JSON, "\"}");
 8001ea8:	480f      	ldr	r0, [pc, #60]	; (8001ee8 <senddata+0x254>)
 8001eaa:	f7fe f95b 	bl	8000164 <strlen>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	4b0d      	ldr	r3, [pc, #52]	; (8001ee8 <senddata+0x254>)
 8001eb4:	4413      	add	r3, r2
 8001eb6:	4a16      	ldr	r2, [pc, #88]	; (8001f10 <senddata+0x27c>)
 8001eb8:	8811      	ldrh	r1, [r2, #0]
 8001eba:	7892      	ldrb	r2, [r2, #2]
 8001ebc:	8019      	strh	r1, [r3, #0]
 8001ebe:	709a      	strb	r2, [r3, #2]

	printf("%s\r\n", JSON);
 8001ec0:	4909      	ldr	r1, [pc, #36]	; (8001ee8 <senddata+0x254>)
 8001ec2:	4814      	ldr	r0, [pc, #80]	; (8001f14 <senddata+0x280>)
 8001ec4:	f004 fe1c 	bl	8006b00 <iprintf>

}
 8001ec8:	bf00      	nop
 8001eca:	3718      	adds	r7, #24
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	20000278 	.word	0x20000278
 8001ed4:	20000244 	.word	0x20000244
 8001ed8:	200003bc 	.word	0x200003bc
 8001edc:	200002b4 	.word	0x200002b4
 8001ee0:	200004c4 	.word	0x200004c4
 8001ee4:	20000490 	.word	0x20000490
 8001ee8:	200002f8 	.word	0x200002f8
 8001eec:	0800a674 	.word	0x0800a674
 8001ef0:	0800a678 	.word	0x0800a678
 8001ef4:	0800a684 	.word	0x0800a684
 8001ef8:	0800a690 	.word	0x0800a690
 8001efc:	0800a694 	.word	0x0800a694
 8001f00:	0800a69c 	.word	0x0800a69c
 8001f04:	0800a6a4 	.word	0x0800a6a4
 8001f08:	0800a6ac 	.word	0x0800a6ac
 8001f0c:	0800a6b4 	.word	0x0800a6b4
 8001f10:	0800a6bc 	.word	0x0800a6bc
 8001f14:	0800a6c0 	.word	0x0800a6c0

08001f18 <XulyJson>:

// process JSON
void XulyJson(char *DataJson) {
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
	str_json = cJSON_Parse(DataJson);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f7ff fb91 	bl	8001648 <cJSON_Parse>
 8001f26:	4603      	mov	r3, r0
 8001f28:	4a26      	ldr	r2, [pc, #152]	; (8001fc4 <XulyJson+0xac>)
 8001f2a:	6013      	str	r3, [r2, #0]
	if (!str_json) {
 8001f2c:	4b25      	ldr	r3, [pc, #148]	; (8001fc4 <XulyJson+0xac>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d103      	bne.n	8001f3c <XulyJson+0x24>
		printf("JSON ERROR!\r\n");
 8001f34:	4824      	ldr	r0, [pc, #144]	; (8001fc8 <XulyJson+0xb0>)
 8001f36:	f004 fe69 	bl	8006c0c <puts>
		return;
 8001f3a:	e040      	b.n	8001fbe <XulyJson+0xa6>
	} else {
		printf("JSON OK\r\n");
 8001f3c:	4823      	ldr	r0, [pc, #140]	; (8001fcc <XulyJson+0xb4>)
 8001f3e:	f004 fe65 	bl	8006c0c <puts>
		// {"TB1" :"1-0",...}
		if (cJSON_GetObjectItem(str_json, "TB1")) {
 8001f42:	4b20      	ldr	r3, [pc, #128]	; (8001fc4 <XulyJson+0xac>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4922      	ldr	r1, [pc, #136]	; (8001fd0 <XulyJson+0xb8>)
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff fe82 	bl	8001c52 <cJSON_GetObjectItem>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d017      	beq.n	8001f84 <XulyJson+0x6c>
			TB1 = atoi(cJSON_GetObjectItem(str_json, "TB1")->valuestring);
 8001f54:	4b1b      	ldr	r3, [pc, #108]	; (8001fc4 <XulyJson+0xac>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	491d      	ldr	r1, [pc, #116]	; (8001fd0 <XulyJson+0xb8>)
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7ff fe79 	bl	8001c52 <cJSON_GetObjectItem>
 8001f60:	4603      	mov	r3, r0
 8001f62:	691b      	ldr	r3, [r3, #16]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f004 f871 	bl	800604c <atoi>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	4b19      	ldr	r3, [pc, #100]	; (8001fd4 <XulyJson+0xbc>)
 8001f70:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, TB1);
 8001f72:	4b18      	ldr	r3, [pc, #96]	; (8001fd4 <XulyJson+0xbc>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	461a      	mov	r2, r3
 8001f7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f7e:	4816      	ldr	r0, [pc, #88]	; (8001fd8 <XulyJson+0xc0>)
 8001f80:	f001 ff7e 	bl	8003e80 <HAL_GPIO_WritePin>
			 printf("ON LED 1");
			 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
			 }
			 */
		}
		if (cJSON_GetObjectItem(str_json, "TB2")) {
 8001f84:	4b0f      	ldr	r3, [pc, #60]	; (8001fc4 <XulyJson+0xac>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4914      	ldr	r1, [pc, #80]	; (8001fdc <XulyJson+0xc4>)
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7ff fe61 	bl	8001c52 <cJSON_GetObjectItem>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d00e      	beq.n	8001fb4 <XulyJson+0x9c>
			TB2 = atoi(cJSON_GetObjectItem(str_json, "TB2")->valuestring);
 8001f96:	4b0b      	ldr	r3, [pc, #44]	; (8001fc4 <XulyJson+0xac>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4910      	ldr	r1, [pc, #64]	; (8001fdc <XulyJson+0xc4>)
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7ff fe58 	bl	8001c52 <cJSON_GetObjectItem>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f004 f850 	bl	800604c <atoi>
 8001fac:	4603      	mov	r3, r0
 8001fae:	461a      	mov	r2, r3
 8001fb0:	4b0b      	ldr	r3, [pc, #44]	; (8001fe0 <XulyJson+0xc8>)
 8001fb2:	601a      	str	r2, [r3, #0]
		 {
		 C1 = atoi(cJSON_GetObjectItem(str_json, "C1") -> valuestring);
		 // convert from char	 to int
		 }
		 */
		cJSON_Delete(str_json);
 8001fb4:	4b03      	ldr	r3, [pc, #12]	; (8001fc4 <XulyJson+0xac>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7fe fe49 	bl	8000c50 <cJSON_Delete>
	}
}
 8001fbe:	3708      	adds	r7, #8
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	200002f0 	.word	0x200002f0
 8001fc8:	0800a6c8 	.word	0x0800a6c8
 8001fcc:	0800a6d8 	.word	0x0800a6d8
 8001fd0:	0800a6e4 	.word	0x0800a6e4
 8001fd4:	20000218 	.word	0x20000218
 8001fd8:	40011000 	.word	0x40011000
 8001fdc:	0800a6e8 	.word	0x0800a6e8
 8001fe0:	2000021c 	.word	0x2000021c

08001fe4 <HAL_TIM_PeriodElapsedCallback>:

// use timer counter up 20000 check RFID.
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < sizeof(str); i++) {
 8001fec:	2300      	movs	r3, #0
 8001fee:	60fb      	str	r3, [r7, #12]
 8001ff0:	e009      	b.n	8002006 <HAL_TIM_PeriodElapsedCallback+0x22>
					str[i] = null;
 8001ff2:	4b28      	ldr	r3, [pc, #160]	; (8002094 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001ff4:	7819      	ldrb	r1, [r3, #0]
 8001ff6:	4a28      	ldr	r2, [pc, #160]	; (8002098 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	460a      	mov	r2, r1
 8001ffe:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(str); i++) {
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	3301      	adds	r3, #1
 8002004:	60fb      	str	r3, [r7, #12]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2b0f      	cmp	r3, #15
 800200a:	d9f2      	bls.n	8001ff2 <HAL_TIM_PeriodElapsedCallback+0xe>
				}
	if (htim->Instance == htim1.Instance) {
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	4b22      	ldr	r3, [pc, #136]	; (800209c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	429a      	cmp	r2, r3
 8002016:	d139      	bne.n	800208c <HAL_TIM_PeriodElapsedCallback+0xa8>
		status = MFRC522_Request(PICC_REQIDL, str);	// Find cards, return card type
 8002018:	491f      	ldr	r1, [pc, #124]	; (8002098 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800201a:	2026      	movs	r0, #38	; 0x26
 800201c:	f000 fb88 	bl	8002730 <MFRC522_Request>
 8002020:	4603      	mov	r3, r0
 8002022:	461a      	mov	r2, r3
 8002024:	4b1e      	ldr	r3, [pc, #120]	; (80020a0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002026:	701a      	strb	r2, [r3, #0]
		if (status == MI_OK)
 8002028:	4b1d      	ldr	r3, [pc, #116]	; (80020a0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d106      	bne.n	800203e <HAL_TIM_PeriodElapsedCallback+0x5a>
			status = MFRC522_Anticoll(str);
 8002030:	4819      	ldr	r0, [pc, #100]	; (8002098 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002032:	f000 fc71 	bl	8002918 <MFRC522_Anticoll>
 8002036:	4603      	mov	r3, r0
 8002038:	461a      	mov	r2, r3
 800203a:	4b19      	ldr	r3, [pc, #100]	; (80020a0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800203c:	701a      	strb	r2, [r3, #0]
		memcpy(serNum, str, 5);
 800203e:	4b19      	ldr	r3, [pc, #100]	; (80020a4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002040:	4a15      	ldr	r2, [pc, #84]	; (8002098 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002042:	6811      	ldr	r1, [r2, #0]
 8002044:	6019      	str	r1, [r3, #0]
 8002046:	7912      	ldrb	r2, [r2, #4]
 8002048:	711a      	strb	r2, [r3, #4]
		if (status == MI_OK) {
 800204a:	4b15      	ldr	r3, [pc, #84]	; (80020a0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d11c      	bne.n	800208c <HAL_TIM_PeriodElapsedCallback+0xa8>
			if (serNum[1] == 14 && serNum[2] == 70 && serNum[3] == 24
 8002052:	4b14      	ldr	r3, [pc, #80]	; (80020a4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002054:	785b      	ldrb	r3, [r3, #1]
 8002056:	2b0e      	cmp	r3, #14
 8002058:	d112      	bne.n	8002080 <HAL_TIM_PeriodElapsedCallback+0x9c>
 800205a:	4b12      	ldr	r3, [pc, #72]	; (80020a4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800205c:	789b      	ldrb	r3, [r3, #2]
 800205e:	2b46      	cmp	r3, #70	; 0x46
 8002060:	d10e      	bne.n	8002080 <HAL_TIM_PeriodElapsedCallback+0x9c>
 8002062:	4b10      	ldr	r3, [pc, #64]	; (80020a4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002064:	78db      	ldrb	r3, [r3, #3]
 8002066:	2b18      	cmp	r3, #24
 8002068:	d10a      	bne.n	8002080 <HAL_TIM_PeriodElapsedCallback+0x9c>
					&& serNum[4] == 211) {
 800206a:	4b0e      	ldr	r3, [pc, #56]	; (80020a4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800206c:	791b      	ldrb	r3, [r3, #4]
 800206e:	2bd3      	cmp	r3, #211	; 0xd3
 8002070:	d106      	bne.n	8002080 <HAL_TIM_PeriodElapsedCallback+0x9c>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8002072:	2200      	movs	r2, #0
 8002074:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002078:	480b      	ldr	r0, [pc, #44]	; (80020a8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800207a:	f001 ff01 	bl	8003e80 <HAL_GPIO_WritePin>
//		sprintf(Str_gas, "%d", gas);
	}



}
 800207e:	e005      	b.n	800208c <HAL_TIM_PeriodElapsedCallback+0xa8>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8002080:	2201      	movs	r2, #1
 8002082:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002086:	4808      	ldr	r0, [pc, #32]	; (80020a8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8002088:	f001 fefa 	bl	8003e80 <HAL_GPIO_WritePin>
}
 800208c:	bf00      	nop
 800208e:	3710      	adds	r7, #16
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	200002e6 	.word	0x200002e6
 8002098:	200004f8 	.word	0x200004f8
 800209c:	200003f0 	.word	0x200003f0
 80020a0:	20000540 	.word	0x20000540
 80020a4:	200002e8 	.word	0x200002e8
 80020a8:	40011000 	.word	0x40011000

080020ac <HAL_UART_RxCpltCallback>:
// use receive interrupt
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart1.Instance) {
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	4b1b      	ldr	r3, [pc, #108]	; (8002128 <HAL_UART_RxCpltCallback+0x7c>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d12e      	bne.n	800211e <HAL_UART_RxCpltCallback+0x72>
		if (rec != 13) {
 80020c0:	4b1a      	ldr	r3, [pc, #104]	; (800212c <HAL_UART_RxCpltCallback+0x80>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	2b0d      	cmp	r3, #13
 80020c6:	d00b      	beq.n	80020e0 <HAL_UART_RxCpltCallback+0x34>
			buffer[i++] = rec;
 80020c8:	4b19      	ldr	r3, [pc, #100]	; (8002130 <HAL_UART_RxCpltCallback+0x84>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	1c5a      	adds	r2, r3, #1
 80020ce:	b2d1      	uxtb	r1, r2
 80020d0:	4a17      	ldr	r2, [pc, #92]	; (8002130 <HAL_UART_RxCpltCallback+0x84>)
 80020d2:	7011      	strb	r1, [r2, #0]
 80020d4:	461a      	mov	r2, r3
 80020d6:	4b15      	ldr	r3, [pc, #84]	; (800212c <HAL_UART_RxCpltCallback+0x80>)
 80020d8:	7819      	ldrb	r1, [r3, #0]
 80020da:	4b16      	ldr	r3, [pc, #88]	; (8002134 <HAL_UART_RxCpltCallback+0x88>)
 80020dc:	5499      	strb	r1, [r3, r2]
 80020de:	e019      	b.n	8002114 <HAL_UART_RxCpltCallback+0x68>
		}

		else if (rec == 13) {
 80020e0:	4b12      	ldr	r3, [pc, #72]	; (800212c <HAL_UART_RxCpltCallback+0x80>)
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	2b0d      	cmp	r3, #13
 80020e6:	d115      	bne.n	8002114 <HAL_UART_RxCpltCallback+0x68>
			XulyJson(buffer);
 80020e8:	4812      	ldr	r0, [pc, #72]	; (8002134 <HAL_UART_RxCpltCallback+0x88>)
 80020ea:	f7ff ff15 	bl	8001f18 <XulyJson>
			i = 0;
 80020ee:	4b10      	ldr	r3, [pc, #64]	; (8002130 <HAL_UART_RxCpltCallback+0x84>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	701a      	strb	r2, [r3, #0]
			for (int cnt = 0; cnt < sizeof(buffer); cnt++) {
 80020f4:	2300      	movs	r3, #0
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	e009      	b.n	800210e <HAL_UART_RxCpltCallback+0x62>
				buffer[cnt] = null;
 80020fa:	4b0f      	ldr	r3, [pc, #60]	; (8002138 <HAL_UART_RxCpltCallback+0x8c>)
 80020fc:	7819      	ldrb	r1, [r3, #0]
 80020fe:	4a0d      	ldr	r2, [pc, #52]	; (8002134 <HAL_UART_RxCpltCallback+0x88>)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	4413      	add	r3, r2
 8002104:	460a      	mov	r2, r1
 8002106:	701a      	strb	r2, [r3, #0]
			for (int cnt = 0; cnt < sizeof(buffer); cnt++) {
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	3301      	adds	r3, #1
 800210c:	60fb      	str	r3, [r7, #12]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2b13      	cmp	r3, #19
 8002112:	d9f2      	bls.n	80020fa <HAL_UART_RxCpltCallback+0x4e>
			}

		}
		HAL_UART_Receive_IT(&huart1, (uint8_t*) &rec, 1);
 8002114:	2201      	movs	r2, #1
 8002116:	4905      	ldr	r1, [pc, #20]	; (800212c <HAL_UART_RxCpltCallback+0x80>)
 8002118:	4803      	ldr	r0, [pc, #12]	; (8002128 <HAL_UART_RxCpltCallback+0x7c>)
 800211a:	f003 fb3e 	bl	800579a <HAL_UART_Receive_IT>

	}
}
 800211e:	bf00      	nop
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	2000035c 	.word	0x2000035c
 800212c:	2000053a 	.word	0x2000053a
 8002130:	20000210 	.word	0x20000210
 8002134:	200003a8 	.word	0x200003a8
 8002138:	200002e6 	.word	0x200002e6

0800213c <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == hadc1.Instance){
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	4b06      	ldr	r3, [pc, #24]	; (8002164 <HAL_ADC_ConvCpltCallback+0x28>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	429a      	cmp	r2, r3
 800214e:	d105      	bne.n	800215c <HAL_ADC_ConvCpltCallback+0x20>
		gas = HAL_ADC_GetValue(&hadc1);
 8002150:	4804      	ldr	r0, [pc, #16]	; (8002164 <HAL_ADC_ConvCpltCallback+0x28>)
 8002152:	f001 f8df 	bl	8003314 <HAL_ADC_GetValue>
 8002156:	4603      	mov	r3, r0
 8002158:	4a03      	ldr	r2, [pc, #12]	; (8002168 <HAL_ADC_ConvCpltCallback+0x2c>)
 800215a:	6013      	str	r3, [r2, #0]
	}
}
 800215c:	bf00      	nop
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	2000032c 	.word	0x2000032c
 8002168:	20000214 	.word	0x20000214

0800216c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800216c:	b5b0      	push	{r4, r5, r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002172:	f000 febb 	bl	8002eec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002176:	f000 f843 	bl	8002200 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800217a:	f000 f98d 	bl	8002498 <MX_GPIO_Init>
  MX_ADC1_Init();
 800217e:	f000 f89b 	bl	80022b8 <MX_ADC1_Init>
  MX_SPI1_Init();
 8002182:	f000 f8d7 	bl	8002334 <MX_SPI1_Init>
  MX_TIM1_Init();
 8002186:	f000 f90b 	bl	80023a0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800218a:	f000 f95b 	bl	8002444 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	MFRC522_Init();
 800218e:	f000 fc08 	bl	80029a2 <MFRC522_Init>
	HAL_UART_Receive_IT(&huart1, (uint8_t*) &rec, 1);
 8002192:	2201      	movs	r2, #1
 8002194:	4910      	ldr	r1, [pc, #64]	; (80021d8 <main+0x6c>)
 8002196:	4811      	ldr	r0, [pc, #68]	; (80021dc <main+0x70>)
 8002198:	f003 faff 	bl	800579a <HAL_UART_Receive_IT>
	HAL_ADC_Start_IT(&hadc1);
 800219c:	4810      	ldr	r0, [pc, #64]	; (80021e0 <main+0x74>)
 800219e:	f001 f803 	bl	80031a8 <HAL_ADC_Start_IT>
	HAL_TIM_Base_Start_IT(&htim1);
 80021a2:	4810      	ldr	r0, [pc, #64]	; (80021e4 <main+0x78>)
 80021a4:	f002 fe70 	bl	8004e88 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
	while (1) {
//		DHT_GetData(&DHT11_Data);
//		Temperature = DHT11_Data.Temperature;
//		Humidity = DHT11_Data.Humidity;
		HAL_Delay(50);
 80021a8:	2032      	movs	r0, #50	; 0x32
 80021aa:	f000 ff01 	bl	8002fb0 <HAL_Delay>
		senddata(Temperature, Humidity, gas, TB1, TB2, serNum);
 80021ae:	4b0e      	ldr	r3, [pc, #56]	; (80021e8 <main+0x7c>)
 80021b0:	6818      	ldr	r0, [r3, #0]
 80021b2:	4b0e      	ldr	r3, [pc, #56]	; (80021ec <main+0x80>)
 80021b4:	6819      	ldr	r1, [r3, #0]
 80021b6:	4b0e      	ldr	r3, [pc, #56]	; (80021f0 <main+0x84>)
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	4b0e      	ldr	r3, [pc, #56]	; (80021f4 <main+0x88>)
 80021bc:	681c      	ldr	r4, [r3, #0]
 80021be:	4b0e      	ldr	r3, [pc, #56]	; (80021f8 <main+0x8c>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4d0e      	ldr	r5, [pc, #56]	; (80021fc <main+0x90>)
 80021c4:	9501      	str	r5, [sp, #4]
 80021c6:	9300      	str	r3, [sp, #0]
 80021c8:	4623      	mov	r3, r4
 80021ca:	f7ff fd63 	bl	8001c94 <senddata>
		// delete ID card

		HAL_Delay(3000);
 80021ce:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80021d2:	f000 feed 	bl	8002fb0 <HAL_Delay>
		HAL_Delay(50);
 80021d6:	e7e7      	b.n	80021a8 <main+0x3c>
 80021d8:	2000053a 	.word	0x2000053a
 80021dc:	2000035c 	.word	0x2000035c
 80021e0:	2000032c 	.word	0x2000032c
 80021e4:	200003f0 	.word	0x200003f0
 80021e8:	200002ac 	.word	0x200002ac
 80021ec:	2000053c 	.word	0x2000053c
 80021f0:	20000214 	.word	0x20000214
 80021f4:	20000218 	.word	0x20000218
 80021f8:	2000021c 	.word	0x2000021c
 80021fc:	200002e8 	.word	0x200002e8

08002200 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b094      	sub	sp, #80	; 0x50
 8002204:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002206:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800220a:	2228      	movs	r2, #40	; 0x28
 800220c:	2100      	movs	r1, #0
 800220e:	4618      	mov	r0, r3
 8002210:	f003 ff68 	bl	80060e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002214:	f107 0314 	add.w	r3, r7, #20
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	605a      	str	r2, [r3, #4]
 800221e:	609a      	str	r2, [r3, #8]
 8002220:	60da      	str	r2, [r3, #12]
 8002222:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002224:	1d3b      	adds	r3, r7, #4
 8002226:	2200      	movs	r2, #0
 8002228:	601a      	str	r2, [r3, #0]
 800222a:	605a      	str	r2, [r3, #4]
 800222c:	609a      	str	r2, [r3, #8]
 800222e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002230:	2301      	movs	r3, #1
 8002232:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002234:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002238:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800223a:	2300      	movs	r3, #0
 800223c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800223e:	2301      	movs	r3, #1
 8002240:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002242:	2302      	movs	r3, #2
 8002244:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002246:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800224a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800224c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002250:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002252:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002256:	4618      	mov	r0, r3
 8002258:	f001 fe2a 	bl	8003eb0 <HAL_RCC_OscConfig>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002262:	f000 f99d 	bl	80025a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002266:	230f      	movs	r3, #15
 8002268:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800226a:	2302      	movs	r3, #2
 800226c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800226e:	2300      	movs	r3, #0
 8002270:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002272:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002276:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002278:	2300      	movs	r3, #0
 800227a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800227c:	f107 0314 	add.w	r3, r7, #20
 8002280:	2102      	movs	r1, #2
 8002282:	4618      	mov	r0, r3
 8002284:	f002 f894 	bl	80043b0 <HAL_RCC_ClockConfig>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800228e:	f000 f987 	bl	80025a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002292:	2302      	movs	r3, #2
 8002294:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002296:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800229a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800229c:	1d3b      	adds	r3, r7, #4
 800229e:	4618      	mov	r0, r3
 80022a0:	f002 fa20 	bl	80046e4 <HAL_RCCEx_PeriphCLKConfig>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <SystemClock_Config+0xae>
  {
    Error_Handler();
 80022aa:	f000 f979 	bl	80025a0 <Error_Handler>
  }
}
 80022ae:	bf00      	nop
 80022b0:	3750      	adds	r7, #80	; 0x50
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
	...

080022b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80022be:	1d3b      	adds	r3, r7, #4
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	605a      	str	r2, [r3, #4]
 80022c6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80022c8:	4b18      	ldr	r3, [pc, #96]	; (800232c <MX_ADC1_Init+0x74>)
 80022ca:	4a19      	ldr	r2, [pc, #100]	; (8002330 <MX_ADC1_Init+0x78>)
 80022cc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80022ce:	4b17      	ldr	r3, [pc, #92]	; (800232c <MX_ADC1_Init+0x74>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80022d4:	4b15      	ldr	r3, [pc, #84]	; (800232c <MX_ADC1_Init+0x74>)
 80022d6:	2201      	movs	r2, #1
 80022d8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80022da:	4b14      	ldr	r3, [pc, #80]	; (800232c <MX_ADC1_Init+0x74>)
 80022dc:	2200      	movs	r2, #0
 80022de:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80022e0:	4b12      	ldr	r3, [pc, #72]	; (800232c <MX_ADC1_Init+0x74>)
 80022e2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80022e6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80022e8:	4b10      	ldr	r3, [pc, #64]	; (800232c <MX_ADC1_Init+0x74>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80022ee:	4b0f      	ldr	r3, [pc, #60]	; (800232c <MX_ADC1_Init+0x74>)
 80022f0:	2201      	movs	r2, #1
 80022f2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80022f4:	480d      	ldr	r0, [pc, #52]	; (800232c <MX_ADC1_Init+0x74>)
 80022f6:	f000 fe7f 	bl	8002ff8 <HAL_ADC_Init>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8002300:	f000 f94e 	bl	80025a0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002304:	2300      	movs	r3, #0
 8002306:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002308:	2301      	movs	r3, #1
 800230a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800230c:	2307      	movs	r3, #7
 800230e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002310:	1d3b      	adds	r3, r7, #4
 8002312:	4619      	mov	r1, r3
 8002314:	4805      	ldr	r0, [pc, #20]	; (800232c <MX_ADC1_Init+0x74>)
 8002316:	f001 f8d5 	bl	80034c4 <HAL_ADC_ConfigChannel>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8002320:	f000 f93e 	bl	80025a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002324:	bf00      	nop
 8002326:	3710      	adds	r7, #16
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	2000032c 	.word	0x2000032c
 8002330:	40012400 	.word	0x40012400

08002334 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002338:	4b17      	ldr	r3, [pc, #92]	; (8002398 <MX_SPI1_Init+0x64>)
 800233a:	4a18      	ldr	r2, [pc, #96]	; (800239c <MX_SPI1_Init+0x68>)
 800233c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800233e:	4b16      	ldr	r3, [pc, #88]	; (8002398 <MX_SPI1_Init+0x64>)
 8002340:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002344:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002346:	4b14      	ldr	r3, [pc, #80]	; (8002398 <MX_SPI1_Init+0x64>)
 8002348:	2200      	movs	r2, #0
 800234a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800234c:	4b12      	ldr	r3, [pc, #72]	; (8002398 <MX_SPI1_Init+0x64>)
 800234e:	2200      	movs	r2, #0
 8002350:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002352:	4b11      	ldr	r3, [pc, #68]	; (8002398 <MX_SPI1_Init+0x64>)
 8002354:	2200      	movs	r2, #0
 8002356:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002358:	4b0f      	ldr	r3, [pc, #60]	; (8002398 <MX_SPI1_Init+0x64>)
 800235a:	2200      	movs	r2, #0
 800235c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800235e:	4b0e      	ldr	r3, [pc, #56]	; (8002398 <MX_SPI1_Init+0x64>)
 8002360:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002364:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002366:	4b0c      	ldr	r3, [pc, #48]	; (8002398 <MX_SPI1_Init+0x64>)
 8002368:	2210      	movs	r2, #16
 800236a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800236c:	4b0a      	ldr	r3, [pc, #40]	; (8002398 <MX_SPI1_Init+0x64>)
 800236e:	2200      	movs	r2, #0
 8002370:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002372:	4b09      	ldr	r3, [pc, #36]	; (8002398 <MX_SPI1_Init+0x64>)
 8002374:	2200      	movs	r2, #0
 8002376:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002378:	4b07      	ldr	r3, [pc, #28]	; (8002398 <MX_SPI1_Init+0x64>)
 800237a:	2200      	movs	r2, #0
 800237c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800237e:	4b06      	ldr	r3, [pc, #24]	; (8002398 <MX_SPI1_Init+0x64>)
 8002380:	220a      	movs	r2, #10
 8002382:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002384:	4804      	ldr	r0, [pc, #16]	; (8002398 <MX_SPI1_Init+0x64>)
 8002386:	f002 fa63 	bl	8004850 <HAL_SPI_Init>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002390:	f000 f906 	bl	80025a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002394:	bf00      	nop
 8002396:	bd80      	pop	{r7, pc}
 8002398:	20000438 	.word	0x20000438
 800239c:	40013000 	.word	0x40013000

080023a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023a6:	f107 0308 	add.w	r3, r7, #8
 80023aa:	2200      	movs	r2, #0
 80023ac:	601a      	str	r2, [r3, #0]
 80023ae:	605a      	str	r2, [r3, #4]
 80023b0:	609a      	str	r2, [r3, #8]
 80023b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023b4:	463b      	mov	r3, r7
 80023b6:	2200      	movs	r2, #0
 80023b8:	601a      	str	r2, [r3, #0]
 80023ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80023bc:	4b1f      	ldr	r3, [pc, #124]	; (800243c <MX_TIM1_Init+0x9c>)
 80023be:	4a20      	ldr	r2, [pc, #128]	; (8002440 <MX_TIM1_Init+0xa0>)
 80023c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7199;
 80023c2:	4b1e      	ldr	r3, [pc, #120]	; (800243c <MX_TIM1_Init+0x9c>)
 80023c4:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80023c8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023ca:	4b1c      	ldr	r3, [pc, #112]	; (800243c <MX_TIM1_Init+0x9c>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 15000;
 80023d0:	4b1a      	ldr	r3, [pc, #104]	; (800243c <MX_TIM1_Init+0x9c>)
 80023d2:	f643 2298 	movw	r2, #15000	; 0x3a98
 80023d6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023d8:	4b18      	ldr	r3, [pc, #96]	; (800243c <MX_TIM1_Init+0x9c>)
 80023da:	2200      	movs	r2, #0
 80023dc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80023de:	4b17      	ldr	r3, [pc, #92]	; (800243c <MX_TIM1_Init+0x9c>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023e4:	4b15      	ldr	r3, [pc, #84]	; (800243c <MX_TIM1_Init+0x9c>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80023ea:	4814      	ldr	r0, [pc, #80]	; (800243c <MX_TIM1_Init+0x9c>)
 80023ec:	f002 fcfc 	bl	8004de8 <HAL_TIM_Base_Init>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80023f6:	f000 f8d3 	bl	80025a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002400:	f107 0308 	add.w	r3, r7, #8
 8002404:	4619      	mov	r1, r3
 8002406:	480d      	ldr	r0, [pc, #52]	; (800243c <MX_TIM1_Init+0x9c>)
 8002408:	f002 fe98 	bl	800513c <HAL_TIM_ConfigClockSource>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8002412:	f000 f8c5 	bl	80025a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002416:	2300      	movs	r3, #0
 8002418:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800241a:	2300      	movs	r3, #0
 800241c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800241e:	463b      	mov	r3, r7
 8002420:	4619      	mov	r1, r3
 8002422:	4806      	ldr	r0, [pc, #24]	; (800243c <MX_TIM1_Init+0x9c>)
 8002424:	f003 f86a 	bl	80054fc <HAL_TIMEx_MasterConfigSynchronization>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800242e:	f000 f8b7 	bl	80025a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002432:	bf00      	nop
 8002434:	3718      	adds	r7, #24
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	200003f0 	.word	0x200003f0
 8002440:	40012c00 	.word	0x40012c00

08002444 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002448:	4b11      	ldr	r3, [pc, #68]	; (8002490 <MX_USART1_UART_Init+0x4c>)
 800244a:	4a12      	ldr	r2, [pc, #72]	; (8002494 <MX_USART1_UART_Init+0x50>)
 800244c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800244e:	4b10      	ldr	r3, [pc, #64]	; (8002490 <MX_USART1_UART_Init+0x4c>)
 8002450:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002454:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002456:	4b0e      	ldr	r3, [pc, #56]	; (8002490 <MX_USART1_UART_Init+0x4c>)
 8002458:	2200      	movs	r2, #0
 800245a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800245c:	4b0c      	ldr	r3, [pc, #48]	; (8002490 <MX_USART1_UART_Init+0x4c>)
 800245e:	2200      	movs	r2, #0
 8002460:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002462:	4b0b      	ldr	r3, [pc, #44]	; (8002490 <MX_USART1_UART_Init+0x4c>)
 8002464:	2200      	movs	r2, #0
 8002466:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002468:	4b09      	ldr	r3, [pc, #36]	; (8002490 <MX_USART1_UART_Init+0x4c>)
 800246a:	220c      	movs	r2, #12
 800246c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800246e:	4b08      	ldr	r3, [pc, #32]	; (8002490 <MX_USART1_UART_Init+0x4c>)
 8002470:	2200      	movs	r2, #0
 8002472:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002474:	4b06      	ldr	r3, [pc, #24]	; (8002490 <MX_USART1_UART_Init+0x4c>)
 8002476:	2200      	movs	r2, #0
 8002478:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800247a:	4805      	ldr	r0, [pc, #20]	; (8002490 <MX_USART1_UART_Init+0x4c>)
 800247c:	f003 f8ae 	bl	80055dc <HAL_UART_Init>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002486:	f000 f88b 	bl	80025a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800248a:	bf00      	nop
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	2000035c 	.word	0x2000035c
 8002494:	40013800 	.word	0x40013800

08002498 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b088      	sub	sp, #32
 800249c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800249e:	f107 0310 	add.w	r3, r7, #16
 80024a2:	2200      	movs	r2, #0
 80024a4:	601a      	str	r2, [r3, #0]
 80024a6:	605a      	str	r2, [r3, #4]
 80024a8:	609a      	str	r2, [r3, #8]
 80024aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024ac:	4b38      	ldr	r3, [pc, #224]	; (8002590 <MX_GPIO_Init+0xf8>)
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	4a37      	ldr	r2, [pc, #220]	; (8002590 <MX_GPIO_Init+0xf8>)
 80024b2:	f043 0310 	orr.w	r3, r3, #16
 80024b6:	6193      	str	r3, [r2, #24]
 80024b8:	4b35      	ldr	r3, [pc, #212]	; (8002590 <MX_GPIO_Init+0xf8>)
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	f003 0310 	and.w	r3, r3, #16
 80024c0:	60fb      	str	r3, [r7, #12]
 80024c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80024c4:	4b32      	ldr	r3, [pc, #200]	; (8002590 <MX_GPIO_Init+0xf8>)
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	4a31      	ldr	r2, [pc, #196]	; (8002590 <MX_GPIO_Init+0xf8>)
 80024ca:	f043 0320 	orr.w	r3, r3, #32
 80024ce:	6193      	str	r3, [r2, #24]
 80024d0:	4b2f      	ldr	r3, [pc, #188]	; (8002590 <MX_GPIO_Init+0xf8>)
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	f003 0320 	and.w	r3, r3, #32
 80024d8:	60bb      	str	r3, [r7, #8]
 80024da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024dc:	4b2c      	ldr	r3, [pc, #176]	; (8002590 <MX_GPIO_Init+0xf8>)
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	4a2b      	ldr	r2, [pc, #172]	; (8002590 <MX_GPIO_Init+0xf8>)
 80024e2:	f043 0304 	orr.w	r3, r3, #4
 80024e6:	6193      	str	r3, [r2, #24]
 80024e8:	4b29      	ldr	r3, [pc, #164]	; (8002590 <MX_GPIO_Init+0xf8>)
 80024ea:	699b      	ldr	r3, [r3, #24]
 80024ec:	f003 0304 	and.w	r3, r3, #4
 80024f0:	607b      	str	r3, [r7, #4]
 80024f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024f4:	4b26      	ldr	r3, [pc, #152]	; (8002590 <MX_GPIO_Init+0xf8>)
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	4a25      	ldr	r2, [pc, #148]	; (8002590 <MX_GPIO_Init+0xf8>)
 80024fa:	f043 0308 	orr.w	r3, r3, #8
 80024fe:	6193      	str	r3, [r2, #24]
 8002500:	4b23      	ldr	r3, [pc, #140]	; (8002590 <MX_GPIO_Init+0xf8>)
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	f003 0308 	and.w	r3, r3, #8
 8002508:	603b      	str	r3, [r7, #0]
 800250a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800250c:	2200      	movs	r2, #0
 800250e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002512:	4820      	ldr	r0, [pc, #128]	; (8002594 <MX_GPIO_Init+0xfc>)
 8002514:	f001 fcb4 	bl	8003e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8002518:	2200      	movs	r2, #0
 800251a:	2110      	movs	r1, #16
 800251c:	481e      	ldr	r0, [pc, #120]	; (8002598 <MX_GPIO_Init+0x100>)
 800251e:	f001 fcaf 	bl	8003e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9, GPIO_PIN_RESET);
 8002522:	2200      	movs	r2, #0
 8002524:	f44f 710e 	mov.w	r1, #568	; 0x238
 8002528:	481c      	ldr	r0, [pc, #112]	; (800259c <MX_GPIO_Init+0x104>)
 800252a:	f001 fca9 	bl	8003e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800252e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002532:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002534:	2301      	movs	r3, #1
 8002536:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002538:	2300      	movs	r3, #0
 800253a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800253c:	2302      	movs	r3, #2
 800253e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002540:	f107 0310 	add.w	r3, r7, #16
 8002544:	4619      	mov	r1, r3
 8002546:	4813      	ldr	r0, [pc, #76]	; (8002594 <MX_GPIO_Init+0xfc>)
 8002548:	f001 fb16 	bl	8003b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800254c:	2310      	movs	r3, #16
 800254e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002550:	2301      	movs	r3, #1
 8002552:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002554:	2300      	movs	r3, #0
 8002556:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002558:	2302      	movs	r3, #2
 800255a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800255c:	f107 0310 	add.w	r3, r7, #16
 8002560:	4619      	mov	r1, r3
 8002562:	480d      	ldr	r0, [pc, #52]	; (8002598 <MX_GPIO_Init+0x100>)
 8002564:	f001 fb08 	bl	8003b78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9;
 8002568:	f44f 730e 	mov.w	r3, #568	; 0x238
 800256c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800256e:	2301      	movs	r3, #1
 8002570:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002572:	2300      	movs	r3, #0
 8002574:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002576:	2302      	movs	r3, #2
 8002578:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800257a:	f107 0310 	add.w	r3, r7, #16
 800257e:	4619      	mov	r1, r3
 8002580:	4806      	ldr	r0, [pc, #24]	; (800259c <MX_GPIO_Init+0x104>)
 8002582:	f001 faf9 	bl	8003b78 <HAL_GPIO_Init>

}
 8002586:	bf00      	nop
 8002588:	3720      	adds	r7, #32
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	40021000 	.word	0x40021000
 8002594:	40011000 	.word	0x40011000
 8002598:	40010800 	.word	0x40010800
 800259c:	40010c00 	.word	0x40010c00

080025a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025a4:	b672      	cpsid	i
}
 80025a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80025a8:	e7fe      	b.n	80025a8 <Error_Handler+0x8>
	...

080025ac <SPI1SendByte>:
extern SPI_HandleTypeDef hspi1;

// RC522


uint8_t SPI1SendByte(uint8_t data) {
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af02      	add	r7, sp, #8
 80025b2:	4603      	mov	r3, r0
 80025b4:	71fb      	strb	r3, [r7, #7]
	unsigned char writeCommand[1];
	unsigned char readValue[1];
	
	writeCommand[0] = data;
 80025b6:	79fb      	ldrb	r3, [r7, #7]
 80025b8:	733b      	strb	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&writeCommand, (uint8_t*)&readValue, 1, 10);
 80025ba:	f107 0208 	add.w	r2, r7, #8
 80025be:	f107 010c 	add.w	r1, r7, #12
 80025c2:	230a      	movs	r3, #10
 80025c4:	9300      	str	r3, [sp, #0]
 80025c6:	2301      	movs	r3, #1
 80025c8:	4803      	ldr	r0, [pc, #12]	; (80025d8 <SPI1SendByte+0x2c>)
 80025ca:	f002 f9c5 	bl	8004958 <HAL_SPI_TransmitReceive>
	return readValue[0];
 80025ce:	7a3b      	ldrb	r3, [r7, #8]
	//SPI1->DR = data;															// вывод в SPI1
	//while (!(SPI1->SR & SPI_SR_RXNE));     				// ждем окончания обмена (STM32F103)
	//for (uint8_t i=0; i<50; i++) {};
	//data = SPI1->DR;															// читаем принятые данные
	//return data;
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3710      	adds	r7, #16
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	20000438 	.word	0x20000438

080025dc <SPI1_WriteReg>:

void SPI1_WriteReg(uint8_t address, uint8_t value) {
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	4603      	mov	r3, r0
 80025e4:	460a      	mov	r2, r1
 80025e6:	71fb      	strb	r3, [r7, #7]
 80025e8:	4613      	mov	r3, r2
 80025ea:	71bb      	strb	r3, [r7, #6]
	cs_reset();
 80025ec:	2200      	movs	r2, #0
 80025ee:	2110      	movs	r1, #16
 80025f0:	4809      	ldr	r0, [pc, #36]	; (8002618 <SPI1_WriteReg+0x3c>)
 80025f2:	f001 fc45 	bl	8003e80 <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 80025f6:	79fb      	ldrb	r3, [r7, #7]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7ff ffd7 	bl	80025ac <SPI1SendByte>
	SPI1SendByte(value);
 80025fe:	79bb      	ldrb	r3, [r7, #6]
 8002600:	4618      	mov	r0, r3
 8002602:	f7ff ffd3 	bl	80025ac <SPI1SendByte>
	cs_set();
 8002606:	2201      	movs	r2, #1
 8002608:	2110      	movs	r1, #16
 800260a:	4803      	ldr	r0, [pc, #12]	; (8002618 <SPI1_WriteReg+0x3c>)
 800260c:	f001 fc38 	bl	8003e80 <HAL_GPIO_WritePin>
}
 8002610:	bf00      	nop
 8002612:	3708      	adds	r7, #8
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	40010800 	.word	0x40010800

0800261c <SPI1_ReadReg>:

uint8_t SPI1_ReadReg(uint8_t address) {
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	4603      	mov	r3, r0
 8002624:	71fb      	strb	r3, [r7, #7]
	uint8_t	val;

	cs_reset();
 8002626:	2200      	movs	r2, #0
 8002628:	2110      	movs	r1, #16
 800262a:	480b      	ldr	r0, [pc, #44]	; (8002658 <SPI1_ReadReg+0x3c>)
 800262c:	f001 fc28 	bl	8003e80 <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 8002630:	79fb      	ldrb	r3, [r7, #7]
 8002632:	4618      	mov	r0, r3
 8002634:	f7ff ffba 	bl	80025ac <SPI1SendByte>
	val = SPI1SendByte(0x00);
 8002638:	2000      	movs	r0, #0
 800263a:	f7ff ffb7 	bl	80025ac <SPI1SendByte>
 800263e:	4603      	mov	r3, r0
 8002640:	73fb      	strb	r3, [r7, #15]
	cs_set();
 8002642:	2201      	movs	r2, #1
 8002644:	2110      	movs	r1, #16
 8002646:	4804      	ldr	r0, [pc, #16]	; (8002658 <SPI1_ReadReg+0x3c>)
 8002648:	f001 fc1a 	bl	8003e80 <HAL_GPIO_WritePin>
	return val;
 800264c:	7bfb      	ldrb	r3, [r7, #15]
}
 800264e:	4618      	mov	r0, r3
 8002650:	3710      	adds	r7, #16
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	40010800 	.word	0x40010800

0800265c <MFRC522_WriteRegister>:

void MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	4603      	mov	r3, r0
 8002664:	460a      	mov	r2, r1
 8002666:	71fb      	strb	r3, [r7, #7]
 8002668:	4613      	mov	r3, r2
 800266a:	71bb      	strb	r3, [r7, #6]
	addr = (addr << 1) & 0x7E;															// Address format: 0XXXXXX0
 800266c:	79fb      	ldrb	r3, [r7, #7]
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	b2db      	uxtb	r3, r3
 8002672:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8002676:	71fb      	strb	r3, [r7, #7]
  SPI1_WriteReg(addr, val);
 8002678:	79ba      	ldrb	r2, [r7, #6]
 800267a:	79fb      	ldrb	r3, [r7, #7]
 800267c:	4611      	mov	r1, r2
 800267e:	4618      	mov	r0, r3
 8002680:	f7ff ffac 	bl	80025dc <SPI1_WriteReg>
}
 8002684:	bf00      	nop
 8002686:	3708      	adds	r7, #8
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <MFRC522_ReadRegister>:

uint8_t MFRC522_ReadRegister(uint8_t addr) {
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	4603      	mov	r3, r0
 8002694:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	addr = ((addr << 1) & 0x7E) | 0x80;
 8002696:	79fb      	ldrb	r3, [r7, #7]
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	b25b      	sxtb	r3, r3
 800269c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80026a0:	b25b      	sxtb	r3, r3
 80026a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80026a6:	b25b      	sxtb	r3, r3
 80026a8:	71fb      	strb	r3, [r7, #7]
	val = SPI1_ReadReg(addr);
 80026aa:	79fb      	ldrb	r3, [r7, #7]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7ff ffb5 	bl	800261c <SPI1_ReadReg>
 80026b2:	4603      	mov	r3, r0
 80026b4:	73fb      	strb	r3, [r7, #15]
	return val;	
 80026b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3710      	adds	r7, #16
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <MFRC522_SetBitMask>:
		if (CardID[i] != CompareID[i]) return MI_ERR;
	}
	return MI_OK;
}

void MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	4603      	mov	r3, r0
 80026c8:	460a      	mov	r2, r1
 80026ca:	71fb      	strb	r3, [r7, #7]
 80026cc:	4613      	mov	r3, r2
 80026ce:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) | mask);
 80026d0:	79fb      	ldrb	r3, [r7, #7]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7ff ffda 	bl	800268c <MFRC522_ReadRegister>
 80026d8:	4603      	mov	r3, r0
 80026da:	461a      	mov	r2, r3
 80026dc:	79bb      	ldrb	r3, [r7, #6]
 80026de:	4313      	orrs	r3, r2
 80026e0:	b2da      	uxtb	r2, r3
 80026e2:	79fb      	ldrb	r3, [r7, #7]
 80026e4:	4611      	mov	r1, r2
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7ff ffb8 	bl	800265c <MFRC522_WriteRegister>
}
 80026ec:	bf00      	nop
 80026ee:	3708      	adds	r7, #8
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <MFRC522_ClearBitMask>:

void MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	4603      	mov	r3, r0
 80026fc:	460a      	mov	r2, r1
 80026fe:	71fb      	strb	r3, [r7, #7]
 8002700:	4613      	mov	r3, r2
 8002702:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) & (~mask));
 8002704:	79fb      	ldrb	r3, [r7, #7]
 8002706:	4618      	mov	r0, r3
 8002708:	f7ff ffc0 	bl	800268c <MFRC522_ReadRegister>
 800270c:	4603      	mov	r3, r0
 800270e:	b25a      	sxtb	r2, r3
 8002710:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002714:	43db      	mvns	r3, r3
 8002716:	b25b      	sxtb	r3, r3
 8002718:	4013      	ands	r3, r2
 800271a:	b25b      	sxtb	r3, r3
 800271c:	b2da      	uxtb	r2, r3
 800271e:	79fb      	ldrb	r3, [r7, #7]
 8002720:	4611      	mov	r1, r2
 8002722:	4618      	mov	r0, r3
 8002724:	f7ff ff9a 	bl	800265c <MFRC522_WriteRegister>
}
 8002728:	bf00      	nop
 800272a:	3708      	adds	r7, #8
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <MFRC522_Request>:

uint8_t MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af02      	add	r7, sp, #8
 8002736:	4603      	mov	r3, r0
 8002738:	6039      	str	r1, [r7, #0]
 800273a:	71fb      	strb	r3, [r7, #7]
	uint8_t status;  
	uint16_t backBits;																			// The received data bits

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		// TxLastBists = BitFramingReg[2..0]
 800273c:	2107      	movs	r1, #7
 800273e:	200d      	movs	r0, #13
 8002740:	f7ff ff8c 	bl	800265c <MFRC522_WriteRegister>
	TagType[0] = reqMode;
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	79fa      	ldrb	r2, [r7, #7]
 8002748:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 800274a:	f107 030c 	add.w	r3, r7, #12
 800274e:	9300      	str	r3, [sp, #0]
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	2201      	movs	r2, #1
 8002754:	6839      	ldr	r1, [r7, #0]
 8002756:	200c      	movs	r0, #12
 8002758:	f000 f80f 	bl	800277a <MFRC522_ToCard>
 800275c:	4603      	mov	r3, r0
 800275e:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) status = MI_ERR;
 8002760:	7bfb      	ldrb	r3, [r7, #15]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d102      	bne.n	800276c <MFRC522_Request+0x3c>
 8002766:	89bb      	ldrh	r3, [r7, #12]
 8002768:	2b10      	cmp	r3, #16
 800276a:	d001      	beq.n	8002770 <MFRC522_Request+0x40>
 800276c:	2302      	movs	r3, #2
 800276e:	73fb      	strb	r3, [r7, #15]
	return status;
 8002770:	7bfb      	ldrb	r3, [r7, #15]
}
 8002772:	4618      	mov	r0, r3
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <MFRC522_ToCard>:

uint8_t MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 800277a:	b590      	push	{r4, r7, lr}
 800277c:	b087      	sub	sp, #28
 800277e:	af00      	add	r7, sp, #0
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607b      	str	r3, [r7, #4]
 8002784:	4603      	mov	r3, r0
 8002786:	73fb      	strb	r3, [r7, #15]
 8002788:	4613      	mov	r3, r2
 800278a:	73bb      	strb	r3, [r7, #14]
	uint8_t status = MI_ERR;
 800278c:	2302      	movs	r3, #2
 800278e:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 8002790:	2300      	movs	r3, #0
 8002792:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 8002794:	2300      	movs	r3, #0
 8002796:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 8002798:	7bfb      	ldrb	r3, [r7, #15]
 800279a:	2b0c      	cmp	r3, #12
 800279c:	d006      	beq.n	80027ac <MFRC522_ToCard+0x32>
 800279e:	2b0e      	cmp	r3, #14
 80027a0:	d109      	bne.n	80027b6 <MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 80027a2:	2312      	movs	r3, #18
 80027a4:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 80027a6:	2310      	movs	r3, #16
 80027a8:	757b      	strb	r3, [r7, #21]
			break;
 80027aa:	e005      	b.n	80027b8 <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77;
 80027ac:	2377      	movs	r3, #119	; 0x77
 80027ae:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 80027b0:	2330      	movs	r3, #48	; 0x30
 80027b2:	757b      	strb	r3, [r7, #21]
			break;
 80027b4:	e000      	b.n	80027b8 <MFRC522_ToCard+0x3e>
		}
		default:
		break;
 80027b6:	bf00      	nop
	}

	MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 80027b8:	7dbb      	ldrb	r3, [r7, #22]
 80027ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	4619      	mov	r1, r3
 80027c2:	2002      	movs	r0, #2
 80027c4:	f7ff ff4a 	bl	800265c <MFRC522_WriteRegister>
	MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 80027c8:	2180      	movs	r1, #128	; 0x80
 80027ca:	2004      	movs	r0, #4
 80027cc:	f7ff ff92 	bl	80026f4 <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 80027d0:	2180      	movs	r1, #128	; 0x80
 80027d2:	200a      	movs	r0, #10
 80027d4:	f7ff ff74 	bl	80026c0 <MFRC522_SetBitMask>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 80027d8:	2100      	movs	r1, #0
 80027da:	2001      	movs	r0, #1
 80027dc:	f7ff ff3e 	bl	800265c <MFRC522_WriteRegister>

	// Writing data to the FIFO
	for (i = 0; i < sendLen; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 80027e0:	2300      	movs	r3, #0
 80027e2:	827b      	strh	r3, [r7, #18]
 80027e4:	e00a      	b.n	80027fc <MFRC522_ToCard+0x82>
 80027e6:	8a7b      	ldrh	r3, [r7, #18]
 80027e8:	68ba      	ldr	r2, [r7, #8]
 80027ea:	4413      	add	r3, r2
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	4619      	mov	r1, r3
 80027f0:	2009      	movs	r0, #9
 80027f2:	f7ff ff33 	bl	800265c <MFRC522_WriteRegister>
 80027f6:	8a7b      	ldrh	r3, [r7, #18]
 80027f8:	3301      	adds	r3, #1
 80027fa:	827b      	strh	r3, [r7, #18]
 80027fc:	7bbb      	ldrb	r3, [r7, #14]
 80027fe:	b29b      	uxth	r3, r3
 8002800:	8a7a      	ldrh	r2, [r7, #18]
 8002802:	429a      	cmp	r2, r3
 8002804:	d3ef      	bcc.n	80027e6 <MFRC522_ToCard+0x6c>

	// Execute the command
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 8002806:	7bfb      	ldrb	r3, [r7, #15]
 8002808:	4619      	mov	r1, r3
 800280a:	2001      	movs	r0, #1
 800280c:	f7ff ff26 	bl	800265c <MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		// StartSend=1,transmission of data starts 
 8002810:	7bfb      	ldrb	r3, [r7, #15]
 8002812:	2b0c      	cmp	r3, #12
 8002814:	d103      	bne.n	800281e <MFRC522_ToCard+0xa4>
 8002816:	2180      	movs	r1, #128	; 0x80
 8002818:	200d      	movs	r0, #13
 800281a:	f7ff ff51 	bl	80026c0 <MFRC522_SetBitMask>

	// Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 800281e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002822:	827b      	strh	r3, [r7, #18]
	do {
		// CommIrqReg[7..0]
		// Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 8002824:	2004      	movs	r0, #4
 8002826:	f7ff ff31 	bl	800268c <MFRC522_ReadRegister>
 800282a:	4603      	mov	r3, r0
 800282c:	753b      	strb	r3, [r7, #20]
		i--;
 800282e:	8a7b      	ldrh	r3, [r7, #18]
 8002830:	3b01      	subs	r3, #1
 8002832:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8002834:	8a7b      	ldrh	r3, [r7, #18]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00a      	beq.n	8002850 <MFRC522_ToCard+0xd6>
 800283a:	7d3b      	ldrb	r3, [r7, #20]
 800283c:	f003 0301 	and.w	r3, r3, #1
 8002840:	2b00      	cmp	r3, #0
 8002842:	d105      	bne.n	8002850 <MFRC522_ToCard+0xd6>
 8002844:	7d3a      	ldrb	r2, [r7, #20]
 8002846:	7d7b      	ldrb	r3, [r7, #21]
 8002848:	4013      	ands	r3, r2
 800284a:	b2db      	uxtb	r3, r3
 800284c:	2b00      	cmp	r3, #0
 800284e:	d0e9      	beq.n	8002824 <MFRC522_ToCard+0xaa>

	MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);																// StartSend=0
 8002850:	2180      	movs	r1, #128	; 0x80
 8002852:	200d      	movs	r0, #13
 8002854:	f7ff ff4e 	bl	80026f4 <MFRC522_ClearBitMask>

	if (i != 0)  {
 8002858:	8a7b      	ldrh	r3, [r7, #18]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d057      	beq.n	800290e <MFRC522_ToCard+0x194>
		if (!(MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 800285e:	2006      	movs	r0, #6
 8002860:	f7ff ff14 	bl	800268c <MFRC522_ReadRegister>
 8002864:	4603      	mov	r3, r0
 8002866:	f003 031b 	and.w	r3, r3, #27
 800286a:	2b00      	cmp	r3, #0
 800286c:	d14d      	bne.n	800290a <MFRC522_ToCard+0x190>
			status = MI_OK;
 800286e:	2300      	movs	r3, #0
 8002870:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) status = MI_NOTAGERR;
 8002872:	7d3a      	ldrb	r2, [r7, #20]
 8002874:	7dbb      	ldrb	r3, [r7, #22]
 8002876:	4013      	ands	r3, r2
 8002878:	b2db      	uxtb	r3, r3
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <MFRC522_ToCard+0x10c>
 8002882:	2301      	movs	r3, #1
 8002884:	75fb      	strb	r3, [r7, #23]
			if (command == PCD_TRANSCEIVE) {
 8002886:	7bfb      	ldrb	r3, [r7, #15]
 8002888:	2b0c      	cmp	r3, #12
 800288a:	d140      	bne.n	800290e <MFRC522_ToCard+0x194>
				n = MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 800288c:	200a      	movs	r0, #10
 800288e:	f7ff fefd 	bl	800268c <MFRC522_ReadRegister>
 8002892:	4603      	mov	r3, r0
 8002894:	753b      	strb	r3, [r7, #20]
				lastBits = MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 8002896:	200c      	movs	r0, #12
 8002898:	f7ff fef8 	bl	800268c <MFRC522_ReadRegister>
 800289c:	4603      	mov	r3, r0
 800289e:	f003 0307 	and.w	r3, r3, #7
 80028a2:	747b      	strb	r3, [r7, #17]
				if (lastBits) *backLen = (n-1)*8+lastBits; else *backLen = n*8;
 80028a4:	7c7b      	ldrb	r3, [r7, #17]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d00b      	beq.n	80028c2 <MFRC522_ToCard+0x148>
 80028aa:	7d3b      	ldrb	r3, [r7, #20]
 80028ac:	3b01      	subs	r3, #1
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	7c7b      	ldrb	r3, [r7, #17]
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	4413      	add	r3, r2
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028be:	801a      	strh	r2, [r3, #0]
 80028c0:	e005      	b.n	80028ce <MFRC522_ToCard+0x154>
 80028c2:	7d3b      	ldrb	r3, [r7, #20]
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	b29a      	uxth	r2, r3
 80028ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028cc:	801a      	strh	r2, [r3, #0]
				if (n == 0) n = 1;
 80028ce:	7d3b      	ldrb	r3, [r7, #20]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d101      	bne.n	80028d8 <MFRC522_ToCard+0x15e>
 80028d4:	2301      	movs	r3, #1
 80028d6:	753b      	strb	r3, [r7, #20]
				if (n > MFRC522_MAX_LEN) n = MFRC522_MAX_LEN;
 80028d8:	7d3b      	ldrb	r3, [r7, #20]
 80028da:	2b10      	cmp	r3, #16
 80028dc:	d901      	bls.n	80028e2 <MFRC522_ToCard+0x168>
 80028de:	2310      	movs	r3, #16
 80028e0:	753b      	strb	r3, [r7, #20]
				for (i = 0; i < n; i++) backData[i] = MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);		// Reading the received data in FIFO
 80028e2:	2300      	movs	r3, #0
 80028e4:	827b      	strh	r3, [r7, #18]
 80028e6:	e00a      	b.n	80028fe <MFRC522_ToCard+0x184>
 80028e8:	8a7b      	ldrh	r3, [r7, #18]
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	18d4      	adds	r4, r2, r3
 80028ee:	2009      	movs	r0, #9
 80028f0:	f7ff fecc 	bl	800268c <MFRC522_ReadRegister>
 80028f4:	4603      	mov	r3, r0
 80028f6:	7023      	strb	r3, [r4, #0]
 80028f8:	8a7b      	ldrh	r3, [r7, #18]
 80028fa:	3301      	adds	r3, #1
 80028fc:	827b      	strh	r3, [r7, #18]
 80028fe:	7d3b      	ldrb	r3, [r7, #20]
 8002900:	b29b      	uxth	r3, r3
 8002902:	8a7a      	ldrh	r2, [r7, #18]
 8002904:	429a      	cmp	r2, r3
 8002906:	d3ef      	bcc.n	80028e8 <MFRC522_ToCard+0x16e>
 8002908:	e001      	b.n	800290e <MFRC522_ToCard+0x194>
			}
		} else status = MI_ERR;
 800290a:	2302      	movs	r3, #2
 800290c:	75fb      	strb	r3, [r7, #23]
	}
	return status;
 800290e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002910:	4618      	mov	r0, r3
 8002912:	371c      	adds	r7, #28
 8002914:	46bd      	mov	sp, r7
 8002916:	bd90      	pop	{r4, r7, pc}

08002918 <MFRC522_Anticoll>:

uint8_t MFRC522_Anticoll(uint8_t* serNum) {
 8002918:	b580      	push	{r7, lr}
 800291a:	b086      	sub	sp, #24
 800291c:	af02      	add	r7, sp, #8
 800291e:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 8002920:	2300      	movs	r3, #0
 8002922:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);												// TxLastBists = BitFramingReg[2..0]
 8002924:	2100      	movs	r1, #0
 8002926:	200d      	movs	r0, #13
 8002928:	f7ff fe98 	bl	800265c <MFRC522_WriteRegister>
	serNum[0] = PICC_ANTICOLL;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2293      	movs	r2, #147	; 0x93
 8002930:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	3301      	adds	r3, #1
 8002936:	2220      	movs	r2, #32
 8002938:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 800293a:	f107 030a 	add.w	r3, r7, #10
 800293e:	9300      	str	r3, [sp, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2202      	movs	r2, #2
 8002944:	6879      	ldr	r1, [r7, #4]
 8002946:	200c      	movs	r0, #12
 8002948:	f7ff ff17 	bl	800277a <MFRC522_ToCard>
 800294c:	4603      	mov	r3, r0
 800294e:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) {
 8002950:	7bfb      	ldrb	r3, [r7, #15]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d118      	bne.n	8002988 <MFRC522_Anticoll+0x70>
		// Check card serial number
		for (i = 0; i < 4; i++) serNumCheck ^= serNum[i];
 8002956:	2300      	movs	r3, #0
 8002958:	73bb      	strb	r3, [r7, #14]
 800295a:	e009      	b.n	8002970 <MFRC522_Anticoll+0x58>
 800295c:	7bbb      	ldrb	r3, [r7, #14]
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	4413      	add	r3, r2
 8002962:	781a      	ldrb	r2, [r3, #0]
 8002964:	7b7b      	ldrb	r3, [r7, #13]
 8002966:	4053      	eors	r3, r2
 8002968:	737b      	strb	r3, [r7, #13]
 800296a:	7bbb      	ldrb	r3, [r7, #14]
 800296c:	3301      	adds	r3, #1
 800296e:	73bb      	strb	r3, [r7, #14]
 8002970:	7bbb      	ldrb	r3, [r7, #14]
 8002972:	2b03      	cmp	r3, #3
 8002974:	d9f2      	bls.n	800295c <MFRC522_Anticoll+0x44>
		if (serNumCheck != serNum[i]) status = MI_ERR;
 8002976:	7bbb      	ldrb	r3, [r7, #14]
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	4413      	add	r3, r2
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	7b7a      	ldrb	r2, [r7, #13]
 8002980:	429a      	cmp	r2, r3
 8002982:	d001      	beq.n	8002988 <MFRC522_Anticoll+0x70>
 8002984:	2302      	movs	r3, #2
 8002986:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 8002988:	7bfb      	ldrb	r3, [r7, #15]
} 
 800298a:	4618      	mov	r0, r3
 800298c:	3710      	adds	r7, #16
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <MFRC522_Reset>:
		status = MFRC522_ToCard(PCD_TRANSCEIVE, buff, 18, buff, &recvBits);
		if ((status != MI_OK) || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A)) status = MI_ERR;
	}
	return status;
}
void MFRC522_Reset(void) {
 8002992:	b580      	push	{r7, lr}
 8002994:	af00      	add	r7, sp, #0
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 8002996:	210f      	movs	r1, #15
 8002998:	2001      	movs	r0, #1
 800299a:	f7ff fe5f 	bl	800265c <MFRC522_WriteRegister>
}
 800299e:	bf00      	nop
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <MFRC522_Init>:
void MFRC522_Init(void) {
 80029a2:	b580      	push	{r7, lr}
 80029a4:	af00      	add	r7, sp, #0
	MFRC522_Reset();
 80029a6:	f7ff fff4 	bl	8002992 <MFRC522_Reset>
	MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 80029aa:	218d      	movs	r1, #141	; 0x8d
 80029ac:	202a      	movs	r0, #42	; 0x2a
 80029ae:	f7ff fe55 	bl	800265c <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 80029b2:	213e      	movs	r1, #62	; 0x3e
 80029b4:	202b      	movs	r0, #43	; 0x2b
 80029b6:	f7ff fe51 	bl	800265c <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);           
 80029ba:	211e      	movs	r1, #30
 80029bc:	202d      	movs	r0, #45	; 0x2d
 80029be:	f7ff fe4d 	bl	800265c <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 80029c2:	2100      	movs	r1, #0
 80029c4:	202c      	movs	r0, #44	; 0x2c
 80029c6:	f7ff fe49 	bl	800265c <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);				// 48dB gain	
 80029ca:	2170      	movs	r1, #112	; 0x70
 80029cc:	2026      	movs	r0, #38	; 0x26
 80029ce:	f7ff fe45 	bl	800265c <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 80029d2:	2140      	movs	r1, #64	; 0x40
 80029d4:	2015      	movs	r0, #21
 80029d6:	f7ff fe41 	bl	800265c <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 80029da:	213d      	movs	r1, #61	; 0x3d
 80029dc:	2011      	movs	r0, #17
 80029de:	f7ff fe3d 	bl	800265c <MFRC522_WriteRegister>
	MFRC522_AntennaOn();																		// Open the antenna
 80029e2:	f000 f802 	bl	80029ea <MFRC522_AntennaOn>
}
 80029e6:	bf00      	nop
 80029e8:	bd80      	pop	{r7, pc}

080029ea <MFRC522_AntennaOn>:

void MFRC522_AntennaOn(void) {
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b082      	sub	sp, #8
 80029ee:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 80029f0:	2014      	movs	r0, #20
 80029f2:	f7ff fe4b 	bl	800268c <MFRC522_ReadRegister>
 80029f6:	4603      	mov	r3, r0
 80029f8:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 80029fa:	79fb      	ldrb	r3, [r7, #7]
 80029fc:	f003 0303 	and.w	r3, r3, #3
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d103      	bne.n	8002a0c <MFRC522_AntennaOn+0x22>
 8002a04:	2103      	movs	r1, #3
 8002a06:	2014      	movs	r0, #20
 8002a08:	f7ff fe5a 	bl	80026c0 <MFRC522_SetBitMask>
}
 8002a0c:	bf00      	nop
 8002a0e:	3708      	adds	r7, #8
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002a1a:	4b15      	ldr	r3, [pc, #84]	; (8002a70 <HAL_MspInit+0x5c>)
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	4a14      	ldr	r2, [pc, #80]	; (8002a70 <HAL_MspInit+0x5c>)
 8002a20:	f043 0301 	orr.w	r3, r3, #1
 8002a24:	6193      	str	r3, [r2, #24]
 8002a26:	4b12      	ldr	r3, [pc, #72]	; (8002a70 <HAL_MspInit+0x5c>)
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	60bb      	str	r3, [r7, #8]
 8002a30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a32:	4b0f      	ldr	r3, [pc, #60]	; (8002a70 <HAL_MspInit+0x5c>)
 8002a34:	69db      	ldr	r3, [r3, #28]
 8002a36:	4a0e      	ldr	r2, [pc, #56]	; (8002a70 <HAL_MspInit+0x5c>)
 8002a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a3c:	61d3      	str	r3, [r2, #28]
 8002a3e:	4b0c      	ldr	r3, [pc, #48]	; (8002a70 <HAL_MspInit+0x5c>)
 8002a40:	69db      	ldr	r3, [r3, #28]
 8002a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a46:	607b      	str	r3, [r7, #4]
 8002a48:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002a4a:	4b0a      	ldr	r3, [pc, #40]	; (8002a74 <HAL_MspInit+0x60>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	60fb      	str	r3, [r7, #12]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002a56:	60fb      	str	r3, [r7, #12]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a5e:	60fb      	str	r3, [r7, #12]
 8002a60:	4a04      	ldr	r2, [pc, #16]	; (8002a74 <HAL_MspInit+0x60>)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a66:	bf00      	nop
 8002a68:	3714      	adds	r7, #20
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bc80      	pop	{r7}
 8002a6e:	4770      	bx	lr
 8002a70:	40021000 	.word	0x40021000
 8002a74:	40010000 	.word	0x40010000

08002a78 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b088      	sub	sp, #32
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a80:	f107 0310 	add.w	r3, r7, #16
 8002a84:	2200      	movs	r2, #0
 8002a86:	601a      	str	r2, [r3, #0]
 8002a88:	605a      	str	r2, [r3, #4]
 8002a8a:	609a      	str	r2, [r3, #8]
 8002a8c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a18      	ldr	r2, [pc, #96]	; (8002af4 <HAL_ADC_MspInit+0x7c>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d129      	bne.n	8002aec <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002a98:	4b17      	ldr	r3, [pc, #92]	; (8002af8 <HAL_ADC_MspInit+0x80>)
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	4a16      	ldr	r2, [pc, #88]	; (8002af8 <HAL_ADC_MspInit+0x80>)
 8002a9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002aa2:	6193      	str	r3, [r2, #24]
 8002aa4:	4b14      	ldr	r3, [pc, #80]	; (8002af8 <HAL_ADC_MspInit+0x80>)
 8002aa6:	699b      	ldr	r3, [r3, #24]
 8002aa8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002aac:	60fb      	str	r3, [r7, #12]
 8002aae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ab0:	4b11      	ldr	r3, [pc, #68]	; (8002af8 <HAL_ADC_MspInit+0x80>)
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	4a10      	ldr	r2, [pc, #64]	; (8002af8 <HAL_ADC_MspInit+0x80>)
 8002ab6:	f043 0304 	orr.w	r3, r3, #4
 8002aba:	6193      	str	r3, [r2, #24]
 8002abc:	4b0e      	ldr	r3, [pc, #56]	; (8002af8 <HAL_ADC_MspInit+0x80>)
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	f003 0304 	and.w	r3, r3, #4
 8002ac4:	60bb      	str	r3, [r7, #8]
 8002ac6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002acc:	2303      	movs	r3, #3
 8002ace:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ad0:	f107 0310 	add.w	r3, r7, #16
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	4809      	ldr	r0, [pc, #36]	; (8002afc <HAL_ADC_MspInit+0x84>)
 8002ad8:	f001 f84e 	bl	8003b78 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 8002adc:	2200      	movs	r2, #0
 8002ade:	2101      	movs	r1, #1
 8002ae0:	2012      	movs	r0, #18
 8002ae2:	f000 ff62 	bl	80039aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002ae6:	2012      	movs	r0, #18
 8002ae8:	f000 ff7b 	bl	80039e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002aec:	bf00      	nop
 8002aee:	3720      	adds	r7, #32
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40012400 	.word	0x40012400
 8002af8:	40021000 	.word	0x40021000
 8002afc:	40010800 	.word	0x40010800

08002b00 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b088      	sub	sp, #32
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b08:	f107 0310 	add.w	r3, r7, #16
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	605a      	str	r2, [r3, #4]
 8002b12:	609a      	str	r2, [r3, #8]
 8002b14:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a1b      	ldr	r2, [pc, #108]	; (8002b88 <HAL_SPI_MspInit+0x88>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d12f      	bne.n	8002b80 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b20:	4b1a      	ldr	r3, [pc, #104]	; (8002b8c <HAL_SPI_MspInit+0x8c>)
 8002b22:	699b      	ldr	r3, [r3, #24]
 8002b24:	4a19      	ldr	r2, [pc, #100]	; (8002b8c <HAL_SPI_MspInit+0x8c>)
 8002b26:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b2a:	6193      	str	r3, [r2, #24]
 8002b2c:	4b17      	ldr	r3, [pc, #92]	; (8002b8c <HAL_SPI_MspInit+0x8c>)
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b34:	60fb      	str	r3, [r7, #12]
 8002b36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b38:	4b14      	ldr	r3, [pc, #80]	; (8002b8c <HAL_SPI_MspInit+0x8c>)
 8002b3a:	699b      	ldr	r3, [r3, #24]
 8002b3c:	4a13      	ldr	r2, [pc, #76]	; (8002b8c <HAL_SPI_MspInit+0x8c>)
 8002b3e:	f043 0304 	orr.w	r3, r3, #4
 8002b42:	6193      	str	r3, [r2, #24]
 8002b44:	4b11      	ldr	r3, [pc, #68]	; (8002b8c <HAL_SPI_MspInit+0x8c>)
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	f003 0304 	and.w	r3, r3, #4
 8002b4c:	60bb      	str	r3, [r7, #8]
 8002b4e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002b50:	23a0      	movs	r3, #160	; 0xa0
 8002b52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b54:	2302      	movs	r3, #2
 8002b56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b5c:	f107 0310 	add.w	r3, r7, #16
 8002b60:	4619      	mov	r1, r3
 8002b62:	480b      	ldr	r0, [pc, #44]	; (8002b90 <HAL_SPI_MspInit+0x90>)
 8002b64:	f001 f808 	bl	8003b78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002b68:	2340      	movs	r3, #64	; 0x40
 8002b6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b70:	2300      	movs	r3, #0
 8002b72:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b74:	f107 0310 	add.w	r3, r7, #16
 8002b78:	4619      	mov	r1, r3
 8002b7a:	4805      	ldr	r0, [pc, #20]	; (8002b90 <HAL_SPI_MspInit+0x90>)
 8002b7c:	f000 fffc 	bl	8003b78 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002b80:	bf00      	nop
 8002b82:	3720      	adds	r7, #32
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40013000 	.word	0x40013000
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	40010800 	.word	0x40010800

08002b94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a0d      	ldr	r2, [pc, #52]	; (8002bd8 <HAL_TIM_Base_MspInit+0x44>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d113      	bne.n	8002bce <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002ba6:	4b0d      	ldr	r3, [pc, #52]	; (8002bdc <HAL_TIM_Base_MspInit+0x48>)
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	4a0c      	ldr	r2, [pc, #48]	; (8002bdc <HAL_TIM_Base_MspInit+0x48>)
 8002bac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002bb0:	6193      	str	r3, [r2, #24]
 8002bb2:	4b0a      	ldr	r3, [pc, #40]	; (8002bdc <HAL_TIM_Base_MspInit+0x48>)
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bba:	60fb      	str	r3, [r7, #12]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 2, 0);
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	2102      	movs	r1, #2
 8002bc2:	2019      	movs	r0, #25
 8002bc4:	f000 fef1 	bl	80039aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002bc8:	2019      	movs	r0, #25
 8002bca:	f000 ff0a 	bl	80039e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002bce:	bf00      	nop
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	40012c00 	.word	0x40012c00
 8002bdc:	40021000 	.word	0x40021000

08002be0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b088      	sub	sp, #32
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be8:	f107 0310 	add.w	r3, r7, #16
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	605a      	str	r2, [r3, #4]
 8002bf2:	609a      	str	r2, [r3, #8]
 8002bf4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a20      	ldr	r2, [pc, #128]	; (8002c7c <HAL_UART_MspInit+0x9c>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d139      	bne.n	8002c74 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c00:	4b1f      	ldr	r3, [pc, #124]	; (8002c80 <HAL_UART_MspInit+0xa0>)
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	4a1e      	ldr	r2, [pc, #120]	; (8002c80 <HAL_UART_MspInit+0xa0>)
 8002c06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c0a:	6193      	str	r3, [r2, #24]
 8002c0c:	4b1c      	ldr	r3, [pc, #112]	; (8002c80 <HAL_UART_MspInit+0xa0>)
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c14:	60fb      	str	r3, [r7, #12]
 8002c16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c18:	4b19      	ldr	r3, [pc, #100]	; (8002c80 <HAL_UART_MspInit+0xa0>)
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	4a18      	ldr	r2, [pc, #96]	; (8002c80 <HAL_UART_MspInit+0xa0>)
 8002c1e:	f043 0304 	orr.w	r3, r3, #4
 8002c22:	6193      	str	r3, [r2, #24]
 8002c24:	4b16      	ldr	r3, [pc, #88]	; (8002c80 <HAL_UART_MspInit+0xa0>)
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	f003 0304 	and.w	r3, r3, #4
 8002c2c:	60bb      	str	r3, [r7, #8]
 8002c2e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002c30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c34:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c36:	2302      	movs	r3, #2
 8002c38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c3e:	f107 0310 	add.w	r3, r7, #16
 8002c42:	4619      	mov	r1, r3
 8002c44:	480f      	ldr	r0, [pc, #60]	; (8002c84 <HAL_UART_MspInit+0xa4>)
 8002c46:	f000 ff97 	bl	8003b78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002c4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c50:	2300      	movs	r3, #0
 8002c52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c54:	2300      	movs	r3, #0
 8002c56:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c58:	f107 0310 	add.w	r3, r7, #16
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	4809      	ldr	r0, [pc, #36]	; (8002c84 <HAL_UART_MspInit+0xa4>)
 8002c60:	f000 ff8a 	bl	8003b78 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8002c64:	2200      	movs	r2, #0
 8002c66:	2101      	movs	r1, #1
 8002c68:	2025      	movs	r0, #37	; 0x25
 8002c6a:	f000 fe9e 	bl	80039aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002c6e:	2025      	movs	r0, #37	; 0x25
 8002c70:	f000 feb7 	bl	80039e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002c74:	bf00      	nop
 8002c76:	3720      	adds	r7, #32
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	40013800 	.word	0x40013800
 8002c80:	40021000 	.word	0x40021000
 8002c84:	40010800 	.word	0x40010800

08002c88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c8c:	e7fe      	b.n	8002c8c <NMI_Handler+0x4>

08002c8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c8e:	b480      	push	{r7}
 8002c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c92:	e7fe      	b.n	8002c92 <HardFault_Handler+0x4>

08002c94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c98:	e7fe      	b.n	8002c98 <MemManage_Handler+0x4>

08002c9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c9e:	e7fe      	b.n	8002c9e <BusFault_Handler+0x4>

08002ca0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ca4:	e7fe      	b.n	8002ca4 <UsageFault_Handler+0x4>

08002ca6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002caa:	bf00      	nop
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bc80      	pop	{r7}
 8002cb0:	4770      	bx	lr

08002cb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cb6:	bf00      	nop
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bc80      	pop	{r7}
 8002cbc:	4770      	bx	lr

08002cbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cc2:	bf00      	nop
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bc80      	pop	{r7}
 8002cc8:	4770      	bx	lr

08002cca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cce:	f000 f953 	bl	8002f78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cd2:	bf00      	nop
 8002cd4:	bd80      	pop	{r7, pc}
	...

08002cd8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002cdc:	4802      	ldr	r0, [pc, #8]	; (8002ce8 <ADC1_2_IRQHandler+0x10>)
 8002cde:	f000 fb25 	bl	800332c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002ce2:	bf00      	nop
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	2000032c 	.word	0x2000032c

08002cec <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002cf0:	4802      	ldr	r0, [pc, #8]	; (8002cfc <TIM1_UP_IRQHandler+0x10>)
 8002cf2:	f002 f91b 	bl	8004f2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002cf6:	bf00      	nop
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	200003f0 	.word	0x200003f0

08002d00 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002d04:	4802      	ldr	r0, [pc, #8]	; (8002d10 <USART1_IRQHandler+0x10>)
 8002d06:	f002 fd79 	bl	80057fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002d0a:	bf00      	nop
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	2000035c 	.word	0x2000035c

08002d14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
	return 1;
 8002d18:	2301      	movs	r3, #1
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bc80      	pop	{r7}
 8002d20:	4770      	bx	lr

08002d22 <_kill>:

int _kill(int pid, int sig)
{
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b082      	sub	sp, #8
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
 8002d2a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002d2c:	f003 f992 	bl	8006054 <__errno>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2216      	movs	r2, #22
 8002d34:	601a      	str	r2, [r3, #0]
	return -1;
 8002d36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <_exit>:

void _exit (int status)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b082      	sub	sp, #8
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002d4a:	f04f 31ff 	mov.w	r1, #4294967295
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f7ff ffe7 	bl	8002d22 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002d54:	e7fe      	b.n	8002d54 <_exit+0x12>

08002d56 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b086      	sub	sp, #24
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	60f8      	str	r0, [r7, #12]
 8002d5e:	60b9      	str	r1, [r7, #8]
 8002d60:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d62:	2300      	movs	r3, #0
 8002d64:	617b      	str	r3, [r7, #20]
 8002d66:	e00a      	b.n	8002d7e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002d68:	f3af 8000 	nop.w
 8002d6c:	4601      	mov	r1, r0
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	1c5a      	adds	r2, r3, #1
 8002d72:	60ba      	str	r2, [r7, #8]
 8002d74:	b2ca      	uxtb	r2, r1
 8002d76:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	617b      	str	r3, [r7, #20]
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	dbf0      	blt.n	8002d68 <_read+0x12>
	}

return len;
 8002d86:	687b      	ldr	r3, [r7, #4]
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3718      	adds	r7, #24
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	617b      	str	r3, [r7, #20]
 8002da0:	e009      	b.n	8002db6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	1c5a      	adds	r2, r3, #1
 8002da6:	60ba      	str	r2, [r7, #8]
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7fe ff60 	bl	8001c70 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	3301      	adds	r3, #1
 8002db4:	617b      	str	r3, [r7, #20]
 8002db6:	697a      	ldr	r2, [r7, #20]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	dbf1      	blt.n	8002da2 <_write+0x12>
	}
	return len;
 8002dbe:	687b      	ldr	r3, [r7, #4]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3718      	adds	r7, #24
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <_close>:

int _close(int file)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
	return -1;
 8002dd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bc80      	pop	{r7}
 8002ddc:	4770      	bx	lr

08002dde <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002dde:	b480      	push	{r7}
 8002de0:	b083      	sub	sp, #12
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
 8002de6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002dee:	605a      	str	r2, [r3, #4]
	return 0;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	370c      	adds	r7, #12
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bc80      	pop	{r7}
 8002dfa:	4770      	bx	lr

08002dfc <_isatty>:

int _isatty(int file)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
	return 1;
 8002e04:	2301      	movs	r3, #1
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bc80      	pop	{r7}
 8002e0e:	4770      	bx	lr

08002e10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b085      	sub	sp, #20
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
	return 0;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3714      	adds	r7, #20
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bc80      	pop	{r7}
 8002e26:	4770      	bx	lr

08002e28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b086      	sub	sp, #24
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e30:	4a14      	ldr	r2, [pc, #80]	; (8002e84 <_sbrk+0x5c>)
 8002e32:	4b15      	ldr	r3, [pc, #84]	; (8002e88 <_sbrk+0x60>)
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e3c:	4b13      	ldr	r3, [pc, #76]	; (8002e8c <_sbrk+0x64>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d102      	bne.n	8002e4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e44:	4b11      	ldr	r3, [pc, #68]	; (8002e8c <_sbrk+0x64>)
 8002e46:	4a12      	ldr	r2, [pc, #72]	; (8002e90 <_sbrk+0x68>)
 8002e48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e4a:	4b10      	ldr	r3, [pc, #64]	; (8002e8c <_sbrk+0x64>)
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4413      	add	r3, r2
 8002e52:	693a      	ldr	r2, [r7, #16]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d207      	bcs.n	8002e68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e58:	f003 f8fc 	bl	8006054 <__errno>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	220c      	movs	r2, #12
 8002e60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e62:	f04f 33ff 	mov.w	r3, #4294967295
 8002e66:	e009      	b.n	8002e7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e68:	4b08      	ldr	r3, [pc, #32]	; (8002e8c <_sbrk+0x64>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e6e:	4b07      	ldr	r3, [pc, #28]	; (8002e8c <_sbrk+0x64>)
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4413      	add	r3, r2
 8002e76:	4a05      	ldr	r2, [pc, #20]	; (8002e8c <_sbrk+0x64>)
 8002e78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3718      	adds	r7, #24
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	20005000 	.word	0x20005000
 8002e88:	00000400 	.word	0x00000400
 8002e8c:	20000220 	.word	0x20000220
 8002e90:	20000558 	.word	0x20000558

08002e94 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e98:	bf00      	nop
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bc80      	pop	{r7}
 8002e9e:	4770      	bx	lr

08002ea0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ea0:	480c      	ldr	r0, [pc, #48]	; (8002ed4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002ea2:	490d      	ldr	r1, [pc, #52]	; (8002ed8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ea4:	4a0d      	ldr	r2, [pc, #52]	; (8002edc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002ea6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ea8:	e002      	b.n	8002eb0 <LoopCopyDataInit>

08002eaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002eaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002eac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002eae:	3304      	adds	r3, #4

08002eb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002eb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002eb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002eb4:	d3f9      	bcc.n	8002eaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002eb6:	4a0a      	ldr	r2, [pc, #40]	; (8002ee0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002eb8:	4c0a      	ldr	r4, [pc, #40]	; (8002ee4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002eba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ebc:	e001      	b.n	8002ec2 <LoopFillZerobss>

08002ebe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ebe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ec0:	3204      	adds	r2, #4

08002ec2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ec2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ec4:	d3fb      	bcc.n	8002ebe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002ec6:	f7ff ffe5 	bl	8002e94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002eca:	f003 f8c9 	bl	8006060 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002ece:	f7ff f94d 	bl	800216c <main>
  bx lr
 8002ed2:	4770      	bx	lr
  ldr r0, =_sdata
 8002ed4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ed8:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002edc:	0800abcc 	.word	0x0800abcc
  ldr r2, =_sbss
 8002ee0:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002ee4:	20000558 	.word	0x20000558

08002ee8 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ee8:	e7fe      	b.n	8002ee8 <CAN1_RX1_IRQHandler>
	...

08002eec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ef0:	4b08      	ldr	r3, [pc, #32]	; (8002f14 <HAL_Init+0x28>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a07      	ldr	r2, [pc, #28]	; (8002f14 <HAL_Init+0x28>)
 8002ef6:	f043 0310 	orr.w	r3, r3, #16
 8002efa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002efc:	2003      	movs	r0, #3
 8002efe:	f000 fd49 	bl	8003994 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f02:	2000      	movs	r0, #0
 8002f04:	f000 f808 	bl	8002f18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f08:	f7ff fd84 	bl	8002a14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	40022000 	.word	0x40022000

08002f18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f20:	4b12      	ldr	r3, [pc, #72]	; (8002f6c <HAL_InitTick+0x54>)
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	4b12      	ldr	r3, [pc, #72]	; (8002f70 <HAL_InitTick+0x58>)
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	4619      	mov	r1, r3
 8002f2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f36:	4618      	mov	r0, r3
 8002f38:	f000 fd61 	bl	80039fe <HAL_SYSTICK_Config>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e00e      	b.n	8002f64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2b0f      	cmp	r3, #15
 8002f4a:	d80a      	bhi.n	8002f62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	6879      	ldr	r1, [r7, #4]
 8002f50:	f04f 30ff 	mov.w	r0, #4294967295
 8002f54:	f000 fd29 	bl	80039aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f58:	4a06      	ldr	r2, [pc, #24]	; (8002f74 <HAL_InitTick+0x5c>)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	e000      	b.n	8002f64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3708      	adds	r7, #8
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	2000000c 	.word	0x2000000c
 8002f70:	20000014 	.word	0x20000014
 8002f74:	20000010 	.word	0x20000010

08002f78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f7c:	4b05      	ldr	r3, [pc, #20]	; (8002f94 <HAL_IncTick+0x1c>)
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	461a      	mov	r2, r3
 8002f82:	4b05      	ldr	r3, [pc, #20]	; (8002f98 <HAL_IncTick+0x20>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4413      	add	r3, r2
 8002f88:	4a03      	ldr	r2, [pc, #12]	; (8002f98 <HAL_IncTick+0x20>)
 8002f8a:	6013      	str	r3, [r2, #0]
}
 8002f8c:	bf00      	nop
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bc80      	pop	{r7}
 8002f92:	4770      	bx	lr
 8002f94:	20000014 	.word	0x20000014
 8002f98:	20000544 	.word	0x20000544

08002f9c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  return uwTick;
 8002fa0:	4b02      	ldr	r3, [pc, #8]	; (8002fac <HAL_GetTick+0x10>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bc80      	pop	{r7}
 8002faa:	4770      	bx	lr
 8002fac:	20000544 	.word	0x20000544

08002fb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fb8:	f7ff fff0 	bl	8002f9c <HAL_GetTick>
 8002fbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc8:	d005      	beq.n	8002fd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fca:	4b0a      	ldr	r3, [pc, #40]	; (8002ff4 <HAL_Delay+0x44>)
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	461a      	mov	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002fd6:	bf00      	nop
 8002fd8:	f7ff ffe0 	bl	8002f9c <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d8f7      	bhi.n	8002fd8 <HAL_Delay+0x28>
  {
  }
}
 8002fe8:	bf00      	nop
 8002fea:	bf00      	nop
 8002fec:	3710      	adds	r7, #16
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	20000014 	.word	0x20000014

08002ff8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003000:	2300      	movs	r3, #0
 8003002:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003004:	2300      	movs	r3, #0
 8003006:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003008:	2300      	movs	r3, #0
 800300a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800300c:	2300      	movs	r3, #0
 800300e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e0be      	b.n	8003198 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003024:	2b00      	cmp	r3, #0
 8003026:	d109      	bne.n	800303c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f7ff fd1e 	bl	8002a78 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f000 fb93 	bl	8003768 <ADC_ConversionStop_Disable>
 8003042:	4603      	mov	r3, r0
 8003044:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304a:	f003 0310 	and.w	r3, r3, #16
 800304e:	2b00      	cmp	r3, #0
 8003050:	f040 8099 	bne.w	8003186 <HAL_ADC_Init+0x18e>
 8003054:	7dfb      	ldrb	r3, [r7, #23]
 8003056:	2b00      	cmp	r3, #0
 8003058:	f040 8095 	bne.w	8003186 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003060:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003064:	f023 0302 	bic.w	r3, r3, #2
 8003068:	f043 0202 	orr.w	r2, r3, #2
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003078:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	7b1b      	ldrb	r3, [r3, #12]
 800307e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003080:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003082:	68ba      	ldr	r2, [r7, #8]
 8003084:	4313      	orrs	r3, r2
 8003086:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003090:	d003      	beq.n	800309a <HAL_ADC_Init+0xa2>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d102      	bne.n	80030a0 <HAL_ADC_Init+0xa8>
 800309a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800309e:	e000      	b.n	80030a2 <HAL_ADC_Init+0xaa>
 80030a0:	2300      	movs	r3, #0
 80030a2:	693a      	ldr	r2, [r7, #16]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	7d1b      	ldrb	r3, [r3, #20]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d119      	bne.n	80030e4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	7b1b      	ldrb	r3, [r3, #12]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d109      	bne.n	80030cc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	3b01      	subs	r3, #1
 80030be:	035a      	lsls	r2, r3, #13
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80030c8:	613b      	str	r3, [r7, #16]
 80030ca:	e00b      	b.n	80030e4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d0:	f043 0220 	orr.w	r2, r3, #32
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030dc:	f043 0201 	orr.w	r2, r3, #1
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	430a      	orrs	r2, r1
 80030f6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	689a      	ldr	r2, [r3, #8]
 80030fe:	4b28      	ldr	r3, [pc, #160]	; (80031a0 <HAL_ADC_Init+0x1a8>)
 8003100:	4013      	ands	r3, r2
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	6812      	ldr	r2, [r2, #0]
 8003106:	68b9      	ldr	r1, [r7, #8]
 8003108:	430b      	orrs	r3, r1
 800310a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003114:	d003      	beq.n	800311e <HAL_ADC_Init+0x126>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d104      	bne.n	8003128 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	3b01      	subs	r3, #1
 8003124:	051b      	lsls	r3, r3, #20
 8003126:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68fa      	ldr	r2, [r7, #12]
 8003138:	430a      	orrs	r2, r1
 800313a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	689a      	ldr	r2, [r3, #8]
 8003142:	4b18      	ldr	r3, [pc, #96]	; (80031a4 <HAL_ADC_Init+0x1ac>)
 8003144:	4013      	ands	r3, r2
 8003146:	68ba      	ldr	r2, [r7, #8]
 8003148:	429a      	cmp	r2, r3
 800314a:	d10b      	bne.n	8003164 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003156:	f023 0303 	bic.w	r3, r3, #3
 800315a:	f043 0201 	orr.w	r2, r3, #1
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003162:	e018      	b.n	8003196 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003168:	f023 0312 	bic.w	r3, r3, #18
 800316c:	f043 0210 	orr.w	r2, r3, #16
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003178:	f043 0201 	orr.w	r2, r3, #1
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003184:	e007      	b.n	8003196 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318a:	f043 0210 	orr.w	r2, r3, #16
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003196:	7dfb      	ldrb	r3, [r7, #23]
}
 8003198:	4618      	mov	r0, r3
 800319a:	3718      	adds	r7, #24
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	ffe1f7fd 	.word	0xffe1f7fd
 80031a4:	ff1f0efe 	.word	0xff1f0efe

080031a8 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031b0:	2300      	movs	r3, #0
 80031b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d101      	bne.n	80031c2 <HAL_ADC_Start_IT+0x1a>
 80031be:	2302      	movs	r3, #2
 80031c0:	e0a0      	b.n	8003304 <HAL_ADC_Start_IT+0x15c>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 fa72 	bl	80036b4 <ADC_Enable>
 80031d0:	4603      	mov	r3, r0
 80031d2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80031d4:	7bfb      	ldrb	r3, [r7, #15]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	f040 808f 	bne.w	80032fa <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80031e4:	f023 0301 	bic.w	r3, r3, #1
 80031e8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a45      	ldr	r2, [pc, #276]	; (800330c <HAL_ADC_Start_IT+0x164>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d105      	bne.n	8003206 <HAL_ADC_Start_IT+0x5e>
 80031fa:	4b45      	ldr	r3, [pc, #276]	; (8003310 <HAL_ADC_Start_IT+0x168>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d115      	bne.n	8003232 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800320a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800321c:	2b00      	cmp	r3, #0
 800321e:	d026      	beq.n	800326e <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003224:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003228:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003230:	e01d      	b.n	800326e <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003236:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a33      	ldr	r2, [pc, #204]	; (8003310 <HAL_ADC_Start_IT+0x168>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d004      	beq.n	8003252 <HAL_ADC_Start_IT+0xaa>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a2f      	ldr	r2, [pc, #188]	; (800330c <HAL_ADC_Start_IT+0x164>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d10d      	bne.n	800326e <HAL_ADC_Start_IT+0xc6>
 8003252:	4b2f      	ldr	r3, [pc, #188]	; (8003310 <HAL_ADC_Start_IT+0x168>)
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800325a:	2b00      	cmp	r3, #0
 800325c:	d007      	beq.n	800326e <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003262:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003266:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003272:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d006      	beq.n	8003288 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327e:	f023 0206 	bic.w	r2, r3, #6
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	62da      	str	r2, [r3, #44]	; 0x2c
 8003286:	e002      	b.n	800328e <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f06f 0202 	mvn.w	r2, #2
 800329e:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	685a      	ldr	r2, [r3, #4]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f042 0220 	orr.w	r2, r2, #32
 80032ae:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80032ba:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80032be:	d113      	bne.n	80032e8 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80032c4:	4a11      	ldr	r2, [pc, #68]	; (800330c <HAL_ADC_Start_IT+0x164>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d105      	bne.n	80032d6 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80032ca:	4b11      	ldr	r3, [pc, #68]	; (8003310 <HAL_ADC_Start_IT+0x168>)
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d108      	bne.n	80032e8 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	689a      	ldr	r2, [r3, #8]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80032e4:	609a      	str	r2, [r3, #8]
 80032e6:	e00c      	b.n	8003302 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	689a      	ldr	r2, [r3, #8]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80032f6:	609a      	str	r2, [r3, #8]
 80032f8:	e003      	b.n	8003302 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003302:	7bfb      	ldrb	r3, [r7, #15]
}
 8003304:	4618      	mov	r0, r3
 8003306:	3710      	adds	r7, #16
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	40012800 	.word	0x40012800
 8003310:	40012400 	.word	0x40012400

08003314 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003322:	4618      	mov	r0, r3
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	bc80      	pop	{r7}
 800332a:	4770      	bx	lr

0800332c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f003 0320 	and.w	r3, r3, #32
 800333e:	2b20      	cmp	r3, #32
 8003340:	d140      	bne.n	80033c4 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0302 	and.w	r3, r3, #2
 800334c:	2b02      	cmp	r3, #2
 800334e:	d139      	bne.n	80033c4 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003354:	f003 0310 	and.w	r3, r3, #16
 8003358:	2b00      	cmp	r3, #0
 800335a:	d105      	bne.n	8003368 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003360:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003372:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003376:	d11d      	bne.n	80033b4 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800337c:	2b00      	cmp	r3, #0
 800337e:	d119      	bne.n	80033b4 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685a      	ldr	r2, [r3, #4]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f022 0220 	bic.w	r2, r2, #32
 800338e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003394:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d105      	bne.n	80033b4 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ac:	f043 0201 	orr.w	r2, r3, #1
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f7fe fec1 	bl	800213c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f06f 0212 	mvn.w	r2, #18
 80033c2:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ce:	2b80      	cmp	r3, #128	; 0x80
 80033d0:	d14f      	bne.n	8003472 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0304 	and.w	r3, r3, #4
 80033dc:	2b04      	cmp	r3, #4
 80033de:	d148      	bne.n	8003472 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e4:	f003 0310 	and.w	r3, r3, #16
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d105      	bne.n	80033f8 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8003402:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8003406:	d012      	beq.n	800342e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003412:	2b00      	cmp	r3, #0
 8003414:	d125      	bne.n	8003462 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003420:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003424:	d11d      	bne.n	8003462 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800342a:	2b00      	cmp	r3, #0
 800342c:	d119      	bne.n	8003462 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	685a      	ldr	r2, [r3, #4]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800343c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003442:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003452:	2b00      	cmp	r3, #0
 8003454:	d105      	bne.n	8003462 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345a:	f043 0201 	orr.w	r2, r3, #1
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 f9c1 	bl	80037ea <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f06f 020c 	mvn.w	r2, #12
 8003470:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800347c:	2b40      	cmp	r3, #64	; 0x40
 800347e:	d114      	bne.n	80034aa <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b01      	cmp	r3, #1
 800348c:	d10d      	bne.n	80034aa <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003492:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 f809 	bl	80034b2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f06f 0201 	mvn.w	r2, #1
 80034a8:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80034aa:	bf00      	nop
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80034b2:	b480      	push	{r7}
 80034b4:	b083      	sub	sp, #12
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80034ba:	bf00      	nop
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	bc80      	pop	{r7}
 80034c2:	4770      	bx	lr

080034c4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80034c4:	b480      	push	{r7}
 80034c6:	b085      	sub	sp, #20
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034ce:	2300      	movs	r3, #0
 80034d0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80034d2:	2300      	movs	r3, #0
 80034d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d101      	bne.n	80034e4 <HAL_ADC_ConfigChannel+0x20>
 80034e0:	2302      	movs	r3, #2
 80034e2:	e0dc      	b.n	800369e <HAL_ADC_ConfigChannel+0x1da>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	2b06      	cmp	r3, #6
 80034f2:	d81c      	bhi.n	800352e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	685a      	ldr	r2, [r3, #4]
 80034fe:	4613      	mov	r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	4413      	add	r3, r2
 8003504:	3b05      	subs	r3, #5
 8003506:	221f      	movs	r2, #31
 8003508:	fa02 f303 	lsl.w	r3, r2, r3
 800350c:	43db      	mvns	r3, r3
 800350e:	4019      	ands	r1, r3
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	6818      	ldr	r0, [r3, #0]
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685a      	ldr	r2, [r3, #4]
 8003518:	4613      	mov	r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	4413      	add	r3, r2
 800351e:	3b05      	subs	r3, #5
 8003520:	fa00 f203 	lsl.w	r2, r0, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	430a      	orrs	r2, r1
 800352a:	635a      	str	r2, [r3, #52]	; 0x34
 800352c:	e03c      	b.n	80035a8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	2b0c      	cmp	r3, #12
 8003534:	d81c      	bhi.n	8003570 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685a      	ldr	r2, [r3, #4]
 8003540:	4613      	mov	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	4413      	add	r3, r2
 8003546:	3b23      	subs	r3, #35	; 0x23
 8003548:	221f      	movs	r2, #31
 800354a:	fa02 f303 	lsl.w	r3, r2, r3
 800354e:	43db      	mvns	r3, r3
 8003550:	4019      	ands	r1, r3
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	6818      	ldr	r0, [r3, #0]
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	685a      	ldr	r2, [r3, #4]
 800355a:	4613      	mov	r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	4413      	add	r3, r2
 8003560:	3b23      	subs	r3, #35	; 0x23
 8003562:	fa00 f203 	lsl.w	r2, r0, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	430a      	orrs	r2, r1
 800356c:	631a      	str	r2, [r3, #48]	; 0x30
 800356e:	e01b      	b.n	80035a8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	685a      	ldr	r2, [r3, #4]
 800357a:	4613      	mov	r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	4413      	add	r3, r2
 8003580:	3b41      	subs	r3, #65	; 0x41
 8003582:	221f      	movs	r2, #31
 8003584:	fa02 f303 	lsl.w	r3, r2, r3
 8003588:	43db      	mvns	r3, r3
 800358a:	4019      	ands	r1, r3
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	6818      	ldr	r0, [r3, #0]
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685a      	ldr	r2, [r3, #4]
 8003594:	4613      	mov	r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	4413      	add	r3, r2
 800359a:	3b41      	subs	r3, #65	; 0x41
 800359c:	fa00 f203 	lsl.w	r2, r0, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	430a      	orrs	r2, r1
 80035a6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2b09      	cmp	r3, #9
 80035ae:	d91c      	bls.n	80035ea <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68d9      	ldr	r1, [r3, #12]
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	4613      	mov	r3, r2
 80035bc:	005b      	lsls	r3, r3, #1
 80035be:	4413      	add	r3, r2
 80035c0:	3b1e      	subs	r3, #30
 80035c2:	2207      	movs	r2, #7
 80035c4:	fa02 f303 	lsl.w	r3, r2, r3
 80035c8:	43db      	mvns	r3, r3
 80035ca:	4019      	ands	r1, r3
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	6898      	ldr	r0, [r3, #8]
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	4613      	mov	r3, r2
 80035d6:	005b      	lsls	r3, r3, #1
 80035d8:	4413      	add	r3, r2
 80035da:	3b1e      	subs	r3, #30
 80035dc:	fa00 f203 	lsl.w	r2, r0, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	430a      	orrs	r2, r1
 80035e6:	60da      	str	r2, [r3, #12]
 80035e8:	e019      	b.n	800361e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	6919      	ldr	r1, [r3, #16]
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	4613      	mov	r3, r2
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	4413      	add	r3, r2
 80035fa:	2207      	movs	r2, #7
 80035fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003600:	43db      	mvns	r3, r3
 8003602:	4019      	ands	r1, r3
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	6898      	ldr	r0, [r3, #8]
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	4613      	mov	r3, r2
 800360e:	005b      	lsls	r3, r3, #1
 8003610:	4413      	add	r3, r2
 8003612:	fa00 f203 	lsl.w	r2, r0, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	430a      	orrs	r2, r1
 800361c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2b10      	cmp	r3, #16
 8003624:	d003      	beq.n	800362e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800362a:	2b11      	cmp	r3, #17
 800362c:	d132      	bne.n	8003694 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a1d      	ldr	r2, [pc, #116]	; (80036a8 <HAL_ADC_ConfigChannel+0x1e4>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d125      	bne.n	8003684 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d126      	bne.n	8003694 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	689a      	ldr	r2, [r3, #8]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003654:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2b10      	cmp	r3, #16
 800365c:	d11a      	bne.n	8003694 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800365e:	4b13      	ldr	r3, [pc, #76]	; (80036ac <HAL_ADC_ConfigChannel+0x1e8>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a13      	ldr	r2, [pc, #76]	; (80036b0 <HAL_ADC_ConfigChannel+0x1ec>)
 8003664:	fba2 2303 	umull	r2, r3, r2, r3
 8003668:	0c9a      	lsrs	r2, r3, #18
 800366a:	4613      	mov	r3, r2
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	4413      	add	r3, r2
 8003670:	005b      	lsls	r3, r3, #1
 8003672:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003674:	e002      	b.n	800367c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	3b01      	subs	r3, #1
 800367a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1f9      	bne.n	8003676 <HAL_ADC_ConfigChannel+0x1b2>
 8003682:	e007      	b.n	8003694 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003688:	f043 0220 	orr.w	r2, r3, #32
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800369c:	7bfb      	ldrb	r3, [r7, #15]
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3714      	adds	r7, #20
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bc80      	pop	{r7}
 80036a6:	4770      	bx	lr
 80036a8:	40012400 	.word	0x40012400
 80036ac:	2000000c 	.word	0x2000000c
 80036b0:	431bde83 	.word	0x431bde83

080036b4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036bc:	2300      	movs	r3, #0
 80036be:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80036c0:	2300      	movs	r3, #0
 80036c2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d040      	beq.n	8003754 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	689a      	ldr	r2, [r3, #8]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f042 0201 	orr.w	r2, r2, #1
 80036e0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80036e2:	4b1f      	ldr	r3, [pc, #124]	; (8003760 <ADC_Enable+0xac>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a1f      	ldr	r2, [pc, #124]	; (8003764 <ADC_Enable+0xb0>)
 80036e8:	fba2 2303 	umull	r2, r3, r2, r3
 80036ec:	0c9b      	lsrs	r3, r3, #18
 80036ee:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80036f0:	e002      	b.n	80036f8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	3b01      	subs	r3, #1
 80036f6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1f9      	bne.n	80036f2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80036fe:	f7ff fc4d 	bl	8002f9c <HAL_GetTick>
 8003702:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003704:	e01f      	b.n	8003746 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003706:	f7ff fc49 	bl	8002f9c <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	2b02      	cmp	r3, #2
 8003712:	d918      	bls.n	8003746 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f003 0301 	and.w	r3, r3, #1
 800371e:	2b01      	cmp	r3, #1
 8003720:	d011      	beq.n	8003746 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003726:	f043 0210 	orr.w	r2, r3, #16
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003732:	f043 0201 	orr.w	r2, r3, #1
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e007      	b.n	8003756 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f003 0301 	and.w	r3, r3, #1
 8003750:	2b01      	cmp	r3, #1
 8003752:	d1d8      	bne.n	8003706 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	2000000c 	.word	0x2000000c
 8003764:	431bde83 	.word	0x431bde83

08003768 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003770:	2300      	movs	r3, #0
 8003772:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b01      	cmp	r3, #1
 8003780:	d12e      	bne.n	80037e0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	689a      	ldr	r2, [r3, #8]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f022 0201 	bic.w	r2, r2, #1
 8003790:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003792:	f7ff fc03 	bl	8002f9c <HAL_GetTick>
 8003796:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003798:	e01b      	b.n	80037d2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800379a:	f7ff fbff 	bl	8002f9c <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d914      	bls.n	80037d2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d10d      	bne.n	80037d2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ba:	f043 0210 	orr.w	r2, r3, #16
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c6:	f043 0201 	orr.w	r2, r3, #1
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e007      	b.n	80037e2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	f003 0301 	and.w	r3, r3, #1
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d0dc      	beq.n	800379a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3710      	adds	r7, #16
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80037ea:	b480      	push	{r7}
 80037ec:	b083      	sub	sp, #12
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80037f2:	bf00      	nop
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bc80      	pop	{r7}
 80037fa:	4770      	bx	lr

080037fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f003 0307 	and.w	r3, r3, #7
 800380a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800380c:	4b0c      	ldr	r3, [pc, #48]	; (8003840 <__NVIC_SetPriorityGrouping+0x44>)
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003812:	68ba      	ldr	r2, [r7, #8]
 8003814:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003818:	4013      	ands	r3, r2
 800381a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003824:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003828:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800382c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800382e:	4a04      	ldr	r2, [pc, #16]	; (8003840 <__NVIC_SetPriorityGrouping+0x44>)
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	60d3      	str	r3, [r2, #12]
}
 8003834:	bf00      	nop
 8003836:	3714      	adds	r7, #20
 8003838:	46bd      	mov	sp, r7
 800383a:	bc80      	pop	{r7}
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	e000ed00 	.word	0xe000ed00

08003844 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003844:	b480      	push	{r7}
 8003846:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003848:	4b04      	ldr	r3, [pc, #16]	; (800385c <__NVIC_GetPriorityGrouping+0x18>)
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	0a1b      	lsrs	r3, r3, #8
 800384e:	f003 0307 	and.w	r3, r3, #7
}
 8003852:	4618      	mov	r0, r3
 8003854:	46bd      	mov	sp, r7
 8003856:	bc80      	pop	{r7}
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	e000ed00 	.word	0xe000ed00

08003860 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	4603      	mov	r3, r0
 8003868:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800386a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800386e:	2b00      	cmp	r3, #0
 8003870:	db0b      	blt.n	800388a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003872:	79fb      	ldrb	r3, [r7, #7]
 8003874:	f003 021f 	and.w	r2, r3, #31
 8003878:	4906      	ldr	r1, [pc, #24]	; (8003894 <__NVIC_EnableIRQ+0x34>)
 800387a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800387e:	095b      	lsrs	r3, r3, #5
 8003880:	2001      	movs	r0, #1
 8003882:	fa00 f202 	lsl.w	r2, r0, r2
 8003886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800388a:	bf00      	nop
 800388c:	370c      	adds	r7, #12
 800388e:	46bd      	mov	sp, r7
 8003890:	bc80      	pop	{r7}
 8003892:	4770      	bx	lr
 8003894:	e000e100 	.word	0xe000e100

08003898 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	4603      	mov	r3, r0
 80038a0:	6039      	str	r1, [r7, #0]
 80038a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	db0a      	blt.n	80038c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	b2da      	uxtb	r2, r3
 80038b0:	490c      	ldr	r1, [pc, #48]	; (80038e4 <__NVIC_SetPriority+0x4c>)
 80038b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038b6:	0112      	lsls	r2, r2, #4
 80038b8:	b2d2      	uxtb	r2, r2
 80038ba:	440b      	add	r3, r1
 80038bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038c0:	e00a      	b.n	80038d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	b2da      	uxtb	r2, r3
 80038c6:	4908      	ldr	r1, [pc, #32]	; (80038e8 <__NVIC_SetPriority+0x50>)
 80038c8:	79fb      	ldrb	r3, [r7, #7]
 80038ca:	f003 030f 	and.w	r3, r3, #15
 80038ce:	3b04      	subs	r3, #4
 80038d0:	0112      	lsls	r2, r2, #4
 80038d2:	b2d2      	uxtb	r2, r2
 80038d4:	440b      	add	r3, r1
 80038d6:	761a      	strb	r2, [r3, #24]
}
 80038d8:	bf00      	nop
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	bc80      	pop	{r7}
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	e000e100 	.word	0xe000e100
 80038e8:	e000ed00 	.word	0xe000ed00

080038ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b089      	sub	sp, #36	; 0x24
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f003 0307 	and.w	r3, r3, #7
 80038fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	f1c3 0307 	rsb	r3, r3, #7
 8003906:	2b04      	cmp	r3, #4
 8003908:	bf28      	it	cs
 800390a:	2304      	movcs	r3, #4
 800390c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	3304      	adds	r3, #4
 8003912:	2b06      	cmp	r3, #6
 8003914:	d902      	bls.n	800391c <NVIC_EncodePriority+0x30>
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	3b03      	subs	r3, #3
 800391a:	e000      	b.n	800391e <NVIC_EncodePriority+0x32>
 800391c:	2300      	movs	r3, #0
 800391e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003920:	f04f 32ff 	mov.w	r2, #4294967295
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	fa02 f303 	lsl.w	r3, r2, r3
 800392a:	43da      	mvns	r2, r3
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	401a      	ands	r2, r3
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003934:	f04f 31ff 	mov.w	r1, #4294967295
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	fa01 f303 	lsl.w	r3, r1, r3
 800393e:	43d9      	mvns	r1, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003944:	4313      	orrs	r3, r2
         );
}
 8003946:	4618      	mov	r0, r3
 8003948:	3724      	adds	r7, #36	; 0x24
 800394a:	46bd      	mov	sp, r7
 800394c:	bc80      	pop	{r7}
 800394e:	4770      	bx	lr

08003950 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	3b01      	subs	r3, #1
 800395c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003960:	d301      	bcc.n	8003966 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003962:	2301      	movs	r3, #1
 8003964:	e00f      	b.n	8003986 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003966:	4a0a      	ldr	r2, [pc, #40]	; (8003990 <SysTick_Config+0x40>)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	3b01      	subs	r3, #1
 800396c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800396e:	210f      	movs	r1, #15
 8003970:	f04f 30ff 	mov.w	r0, #4294967295
 8003974:	f7ff ff90 	bl	8003898 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003978:	4b05      	ldr	r3, [pc, #20]	; (8003990 <SysTick_Config+0x40>)
 800397a:	2200      	movs	r2, #0
 800397c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800397e:	4b04      	ldr	r3, [pc, #16]	; (8003990 <SysTick_Config+0x40>)
 8003980:	2207      	movs	r2, #7
 8003982:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3708      	adds	r7, #8
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	e000e010 	.word	0xe000e010

08003994 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f7ff ff2d 	bl	80037fc <__NVIC_SetPriorityGrouping>
}
 80039a2:	bf00      	nop
 80039a4:	3708      	adds	r7, #8
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b086      	sub	sp, #24
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	4603      	mov	r3, r0
 80039b2:	60b9      	str	r1, [r7, #8]
 80039b4:	607a      	str	r2, [r7, #4]
 80039b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039b8:	2300      	movs	r3, #0
 80039ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039bc:	f7ff ff42 	bl	8003844 <__NVIC_GetPriorityGrouping>
 80039c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	68b9      	ldr	r1, [r7, #8]
 80039c6:	6978      	ldr	r0, [r7, #20]
 80039c8:	f7ff ff90 	bl	80038ec <NVIC_EncodePriority>
 80039cc:	4602      	mov	r2, r0
 80039ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039d2:	4611      	mov	r1, r2
 80039d4:	4618      	mov	r0, r3
 80039d6:	f7ff ff5f 	bl	8003898 <__NVIC_SetPriority>
}
 80039da:	bf00      	nop
 80039dc:	3718      	adds	r7, #24
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039e2:	b580      	push	{r7, lr}
 80039e4:	b082      	sub	sp, #8
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	4603      	mov	r3, r0
 80039ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039f0:	4618      	mov	r0, r3
 80039f2:	f7ff ff35 	bl	8003860 <__NVIC_EnableIRQ>
}
 80039f6:	bf00      	nop
 80039f8:	3708      	adds	r7, #8
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b082      	sub	sp, #8
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f7ff ffa2 	bl	8003950 <SysTick_Config>
 8003a0c:	4603      	mov	r3, r0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3708      	adds	r7, #8
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a16:	b480      	push	{r7}
 8003a18:	b085      	sub	sp, #20
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d008      	beq.n	8003a3e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2204      	movs	r2, #4
 8003a30:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e020      	b.n	8003a80 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f022 020e 	bic.w	r2, r2, #14
 8003a4c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f022 0201 	bic.w	r2, r2, #1
 8003a5c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a66:	2101      	movs	r1, #1
 8003a68:	fa01 f202 	lsl.w	r2, r1, r2
 8003a6c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2201      	movs	r2, #1
 8003a72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3714      	adds	r7, #20
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bc80      	pop	{r7}
 8003a88:	4770      	bx	lr
	...

08003a8c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a94:	2300      	movs	r3, #0
 8003a96:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d005      	beq.n	8003aae <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2204      	movs	r2, #4
 8003aa6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	73fb      	strb	r3, [r7, #15]
 8003aac:	e051      	b.n	8003b52 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f022 020e 	bic.w	r2, r2, #14
 8003abc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f022 0201 	bic.w	r2, r2, #1
 8003acc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a22      	ldr	r2, [pc, #136]	; (8003b5c <HAL_DMA_Abort_IT+0xd0>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d029      	beq.n	8003b2c <HAL_DMA_Abort_IT+0xa0>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a20      	ldr	r2, [pc, #128]	; (8003b60 <HAL_DMA_Abort_IT+0xd4>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d022      	beq.n	8003b28 <HAL_DMA_Abort_IT+0x9c>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a1f      	ldr	r2, [pc, #124]	; (8003b64 <HAL_DMA_Abort_IT+0xd8>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d01a      	beq.n	8003b22 <HAL_DMA_Abort_IT+0x96>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a1d      	ldr	r2, [pc, #116]	; (8003b68 <HAL_DMA_Abort_IT+0xdc>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d012      	beq.n	8003b1c <HAL_DMA_Abort_IT+0x90>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a1c      	ldr	r2, [pc, #112]	; (8003b6c <HAL_DMA_Abort_IT+0xe0>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d00a      	beq.n	8003b16 <HAL_DMA_Abort_IT+0x8a>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a1a      	ldr	r2, [pc, #104]	; (8003b70 <HAL_DMA_Abort_IT+0xe4>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d102      	bne.n	8003b10 <HAL_DMA_Abort_IT+0x84>
 8003b0a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003b0e:	e00e      	b.n	8003b2e <HAL_DMA_Abort_IT+0xa2>
 8003b10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b14:	e00b      	b.n	8003b2e <HAL_DMA_Abort_IT+0xa2>
 8003b16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b1a:	e008      	b.n	8003b2e <HAL_DMA_Abort_IT+0xa2>
 8003b1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b20:	e005      	b.n	8003b2e <HAL_DMA_Abort_IT+0xa2>
 8003b22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b26:	e002      	b.n	8003b2e <HAL_DMA_Abort_IT+0xa2>
 8003b28:	2310      	movs	r3, #16
 8003b2a:	e000      	b.n	8003b2e <HAL_DMA_Abort_IT+0xa2>
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	4a11      	ldr	r2, [pc, #68]	; (8003b74 <HAL_DMA_Abort_IT+0xe8>)
 8003b30:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2201      	movs	r2, #1
 8003b36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d003      	beq.n	8003b52 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	4798      	blx	r3
    } 
  }
  return status;
 8003b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3710      	adds	r7, #16
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	40020008 	.word	0x40020008
 8003b60:	4002001c 	.word	0x4002001c
 8003b64:	40020030 	.word	0x40020030
 8003b68:	40020044 	.word	0x40020044
 8003b6c:	40020058 	.word	0x40020058
 8003b70:	4002006c 	.word	0x4002006c
 8003b74:	40020000 	.word	0x40020000

08003b78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b08b      	sub	sp, #44	; 0x2c
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b82:	2300      	movs	r3, #0
 8003b84:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003b86:	2300      	movs	r3, #0
 8003b88:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b8a:	e169      	b.n	8003e60 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b90:	fa02 f303 	lsl.w	r3, r2, r3
 8003b94:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	69fa      	ldr	r2, [r7, #28]
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003ba0:	69ba      	ldr	r2, [r7, #24]
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	f040 8158 	bne.w	8003e5a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	4a9a      	ldr	r2, [pc, #616]	; (8003e18 <HAL_GPIO_Init+0x2a0>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d05e      	beq.n	8003c72 <HAL_GPIO_Init+0xfa>
 8003bb4:	4a98      	ldr	r2, [pc, #608]	; (8003e18 <HAL_GPIO_Init+0x2a0>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d875      	bhi.n	8003ca6 <HAL_GPIO_Init+0x12e>
 8003bba:	4a98      	ldr	r2, [pc, #608]	; (8003e1c <HAL_GPIO_Init+0x2a4>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d058      	beq.n	8003c72 <HAL_GPIO_Init+0xfa>
 8003bc0:	4a96      	ldr	r2, [pc, #600]	; (8003e1c <HAL_GPIO_Init+0x2a4>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d86f      	bhi.n	8003ca6 <HAL_GPIO_Init+0x12e>
 8003bc6:	4a96      	ldr	r2, [pc, #600]	; (8003e20 <HAL_GPIO_Init+0x2a8>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d052      	beq.n	8003c72 <HAL_GPIO_Init+0xfa>
 8003bcc:	4a94      	ldr	r2, [pc, #592]	; (8003e20 <HAL_GPIO_Init+0x2a8>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d869      	bhi.n	8003ca6 <HAL_GPIO_Init+0x12e>
 8003bd2:	4a94      	ldr	r2, [pc, #592]	; (8003e24 <HAL_GPIO_Init+0x2ac>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d04c      	beq.n	8003c72 <HAL_GPIO_Init+0xfa>
 8003bd8:	4a92      	ldr	r2, [pc, #584]	; (8003e24 <HAL_GPIO_Init+0x2ac>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d863      	bhi.n	8003ca6 <HAL_GPIO_Init+0x12e>
 8003bde:	4a92      	ldr	r2, [pc, #584]	; (8003e28 <HAL_GPIO_Init+0x2b0>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d046      	beq.n	8003c72 <HAL_GPIO_Init+0xfa>
 8003be4:	4a90      	ldr	r2, [pc, #576]	; (8003e28 <HAL_GPIO_Init+0x2b0>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d85d      	bhi.n	8003ca6 <HAL_GPIO_Init+0x12e>
 8003bea:	2b12      	cmp	r3, #18
 8003bec:	d82a      	bhi.n	8003c44 <HAL_GPIO_Init+0xcc>
 8003bee:	2b12      	cmp	r3, #18
 8003bf0:	d859      	bhi.n	8003ca6 <HAL_GPIO_Init+0x12e>
 8003bf2:	a201      	add	r2, pc, #4	; (adr r2, 8003bf8 <HAL_GPIO_Init+0x80>)
 8003bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf8:	08003c73 	.word	0x08003c73
 8003bfc:	08003c4d 	.word	0x08003c4d
 8003c00:	08003c5f 	.word	0x08003c5f
 8003c04:	08003ca1 	.word	0x08003ca1
 8003c08:	08003ca7 	.word	0x08003ca7
 8003c0c:	08003ca7 	.word	0x08003ca7
 8003c10:	08003ca7 	.word	0x08003ca7
 8003c14:	08003ca7 	.word	0x08003ca7
 8003c18:	08003ca7 	.word	0x08003ca7
 8003c1c:	08003ca7 	.word	0x08003ca7
 8003c20:	08003ca7 	.word	0x08003ca7
 8003c24:	08003ca7 	.word	0x08003ca7
 8003c28:	08003ca7 	.word	0x08003ca7
 8003c2c:	08003ca7 	.word	0x08003ca7
 8003c30:	08003ca7 	.word	0x08003ca7
 8003c34:	08003ca7 	.word	0x08003ca7
 8003c38:	08003ca7 	.word	0x08003ca7
 8003c3c:	08003c55 	.word	0x08003c55
 8003c40:	08003c69 	.word	0x08003c69
 8003c44:	4a79      	ldr	r2, [pc, #484]	; (8003e2c <HAL_GPIO_Init+0x2b4>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d013      	beq.n	8003c72 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003c4a:	e02c      	b.n	8003ca6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	623b      	str	r3, [r7, #32]
          break;
 8003c52:	e029      	b.n	8003ca8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	3304      	adds	r3, #4
 8003c5a:	623b      	str	r3, [r7, #32]
          break;
 8003c5c:	e024      	b.n	8003ca8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	3308      	adds	r3, #8
 8003c64:	623b      	str	r3, [r7, #32]
          break;
 8003c66:	e01f      	b.n	8003ca8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	330c      	adds	r3, #12
 8003c6e:	623b      	str	r3, [r7, #32]
          break;
 8003c70:	e01a      	b.n	8003ca8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d102      	bne.n	8003c80 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003c7a:	2304      	movs	r3, #4
 8003c7c:	623b      	str	r3, [r7, #32]
          break;
 8003c7e:	e013      	b.n	8003ca8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d105      	bne.n	8003c94 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003c88:	2308      	movs	r3, #8
 8003c8a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	69fa      	ldr	r2, [r7, #28]
 8003c90:	611a      	str	r2, [r3, #16]
          break;
 8003c92:	e009      	b.n	8003ca8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003c94:	2308      	movs	r3, #8
 8003c96:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	69fa      	ldr	r2, [r7, #28]
 8003c9c:	615a      	str	r2, [r3, #20]
          break;
 8003c9e:	e003      	b.n	8003ca8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	623b      	str	r3, [r7, #32]
          break;
 8003ca4:	e000      	b.n	8003ca8 <HAL_GPIO_Init+0x130>
          break;
 8003ca6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	2bff      	cmp	r3, #255	; 0xff
 8003cac:	d801      	bhi.n	8003cb2 <HAL_GPIO_Init+0x13a>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	e001      	b.n	8003cb6 <HAL_GPIO_Init+0x13e>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	3304      	adds	r3, #4
 8003cb6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	2bff      	cmp	r3, #255	; 0xff
 8003cbc:	d802      	bhi.n	8003cc4 <HAL_GPIO_Init+0x14c>
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	e002      	b.n	8003cca <HAL_GPIO_Init+0x152>
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc6:	3b08      	subs	r3, #8
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	210f      	movs	r1, #15
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8003cd8:	43db      	mvns	r3, r3
 8003cda:	401a      	ands	r2, r3
 8003cdc:	6a39      	ldr	r1, [r7, #32]
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ce4:	431a      	orrs	r2, r3
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	f000 80b1 	beq.w	8003e5a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003cf8:	4b4d      	ldr	r3, [pc, #308]	; (8003e30 <HAL_GPIO_Init+0x2b8>)
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	4a4c      	ldr	r2, [pc, #304]	; (8003e30 <HAL_GPIO_Init+0x2b8>)
 8003cfe:	f043 0301 	orr.w	r3, r3, #1
 8003d02:	6193      	str	r3, [r2, #24]
 8003d04:	4b4a      	ldr	r3, [pc, #296]	; (8003e30 <HAL_GPIO_Init+0x2b8>)
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	f003 0301 	and.w	r3, r3, #1
 8003d0c:	60bb      	str	r3, [r7, #8]
 8003d0e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003d10:	4a48      	ldr	r2, [pc, #288]	; (8003e34 <HAL_GPIO_Init+0x2bc>)
 8003d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d14:	089b      	lsrs	r3, r3, #2
 8003d16:	3302      	adds	r3, #2
 8003d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d1c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d20:	f003 0303 	and.w	r3, r3, #3
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	220f      	movs	r2, #15
 8003d28:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2c:	43db      	mvns	r3, r3
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	4013      	ands	r3, r2
 8003d32:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a40      	ldr	r2, [pc, #256]	; (8003e38 <HAL_GPIO_Init+0x2c0>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d013      	beq.n	8003d64 <HAL_GPIO_Init+0x1ec>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a3f      	ldr	r2, [pc, #252]	; (8003e3c <HAL_GPIO_Init+0x2c4>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d00d      	beq.n	8003d60 <HAL_GPIO_Init+0x1e8>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a3e      	ldr	r2, [pc, #248]	; (8003e40 <HAL_GPIO_Init+0x2c8>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d007      	beq.n	8003d5c <HAL_GPIO_Init+0x1e4>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4a3d      	ldr	r2, [pc, #244]	; (8003e44 <HAL_GPIO_Init+0x2cc>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d101      	bne.n	8003d58 <HAL_GPIO_Init+0x1e0>
 8003d54:	2303      	movs	r3, #3
 8003d56:	e006      	b.n	8003d66 <HAL_GPIO_Init+0x1ee>
 8003d58:	2304      	movs	r3, #4
 8003d5a:	e004      	b.n	8003d66 <HAL_GPIO_Init+0x1ee>
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	e002      	b.n	8003d66 <HAL_GPIO_Init+0x1ee>
 8003d60:	2301      	movs	r3, #1
 8003d62:	e000      	b.n	8003d66 <HAL_GPIO_Init+0x1ee>
 8003d64:	2300      	movs	r3, #0
 8003d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d68:	f002 0203 	and.w	r2, r2, #3
 8003d6c:	0092      	lsls	r2, r2, #2
 8003d6e:	4093      	lsls	r3, r2
 8003d70:	68fa      	ldr	r2, [r7, #12]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003d76:	492f      	ldr	r1, [pc, #188]	; (8003e34 <HAL_GPIO_Init+0x2bc>)
 8003d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7a:	089b      	lsrs	r3, r3, #2
 8003d7c:	3302      	adds	r3, #2
 8003d7e:	68fa      	ldr	r2, [r7, #12]
 8003d80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d006      	beq.n	8003d9e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003d90:	4b2d      	ldr	r3, [pc, #180]	; (8003e48 <HAL_GPIO_Init+0x2d0>)
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	492c      	ldr	r1, [pc, #176]	; (8003e48 <HAL_GPIO_Init+0x2d0>)
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	600b      	str	r3, [r1, #0]
 8003d9c:	e006      	b.n	8003dac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003d9e:	4b2a      	ldr	r3, [pc, #168]	; (8003e48 <HAL_GPIO_Init+0x2d0>)
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	43db      	mvns	r3, r3
 8003da6:	4928      	ldr	r1, [pc, #160]	; (8003e48 <HAL_GPIO_Init+0x2d0>)
 8003da8:	4013      	ands	r3, r2
 8003daa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d006      	beq.n	8003dc6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003db8:	4b23      	ldr	r3, [pc, #140]	; (8003e48 <HAL_GPIO_Init+0x2d0>)
 8003dba:	685a      	ldr	r2, [r3, #4]
 8003dbc:	4922      	ldr	r1, [pc, #136]	; (8003e48 <HAL_GPIO_Init+0x2d0>)
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	604b      	str	r3, [r1, #4]
 8003dc4:	e006      	b.n	8003dd4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003dc6:	4b20      	ldr	r3, [pc, #128]	; (8003e48 <HAL_GPIO_Init+0x2d0>)
 8003dc8:	685a      	ldr	r2, [r3, #4]
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	43db      	mvns	r3, r3
 8003dce:	491e      	ldr	r1, [pc, #120]	; (8003e48 <HAL_GPIO_Init+0x2d0>)
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d006      	beq.n	8003dee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003de0:	4b19      	ldr	r3, [pc, #100]	; (8003e48 <HAL_GPIO_Init+0x2d0>)
 8003de2:	689a      	ldr	r2, [r3, #8]
 8003de4:	4918      	ldr	r1, [pc, #96]	; (8003e48 <HAL_GPIO_Init+0x2d0>)
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	608b      	str	r3, [r1, #8]
 8003dec:	e006      	b.n	8003dfc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003dee:	4b16      	ldr	r3, [pc, #88]	; (8003e48 <HAL_GPIO_Init+0x2d0>)
 8003df0:	689a      	ldr	r2, [r3, #8]
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	43db      	mvns	r3, r3
 8003df6:	4914      	ldr	r1, [pc, #80]	; (8003e48 <HAL_GPIO_Init+0x2d0>)
 8003df8:	4013      	ands	r3, r2
 8003dfa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d021      	beq.n	8003e4c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003e08:	4b0f      	ldr	r3, [pc, #60]	; (8003e48 <HAL_GPIO_Init+0x2d0>)
 8003e0a:	68da      	ldr	r2, [r3, #12]
 8003e0c:	490e      	ldr	r1, [pc, #56]	; (8003e48 <HAL_GPIO_Init+0x2d0>)
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	60cb      	str	r3, [r1, #12]
 8003e14:	e021      	b.n	8003e5a <HAL_GPIO_Init+0x2e2>
 8003e16:	bf00      	nop
 8003e18:	10320000 	.word	0x10320000
 8003e1c:	10310000 	.word	0x10310000
 8003e20:	10220000 	.word	0x10220000
 8003e24:	10210000 	.word	0x10210000
 8003e28:	10120000 	.word	0x10120000
 8003e2c:	10110000 	.word	0x10110000
 8003e30:	40021000 	.word	0x40021000
 8003e34:	40010000 	.word	0x40010000
 8003e38:	40010800 	.word	0x40010800
 8003e3c:	40010c00 	.word	0x40010c00
 8003e40:	40011000 	.word	0x40011000
 8003e44:	40011400 	.word	0x40011400
 8003e48:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003e4c:	4b0b      	ldr	r3, [pc, #44]	; (8003e7c <HAL_GPIO_Init+0x304>)
 8003e4e:	68da      	ldr	r2, [r3, #12]
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	43db      	mvns	r3, r3
 8003e54:	4909      	ldr	r1, [pc, #36]	; (8003e7c <HAL_GPIO_Init+0x304>)
 8003e56:	4013      	ands	r3, r2
 8003e58:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e66:	fa22 f303 	lsr.w	r3, r2, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	f47f ae8e 	bne.w	8003b8c <HAL_GPIO_Init+0x14>
  }
}
 8003e70:	bf00      	nop
 8003e72:	bf00      	nop
 8003e74:	372c      	adds	r7, #44	; 0x2c
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bc80      	pop	{r7}
 8003e7a:	4770      	bx	lr
 8003e7c:	40010400 	.word	0x40010400

08003e80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	460b      	mov	r3, r1
 8003e8a:	807b      	strh	r3, [r7, #2]
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e90:	787b      	ldrb	r3, [r7, #1]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d003      	beq.n	8003e9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e96:	887a      	ldrh	r2, [r7, #2]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003e9c:	e003      	b.n	8003ea6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003e9e:	887b      	ldrh	r3, [r7, #2]
 8003ea0:	041a      	lsls	r2, r3, #16
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	611a      	str	r2, [r3, #16]
}
 8003ea6:	bf00      	nop
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bc80      	pop	{r7}
 8003eae:	4770      	bx	lr

08003eb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b086      	sub	sp, #24
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d101      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e26c      	b.n	800439c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	f000 8087 	beq.w	8003fde <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ed0:	4b92      	ldr	r3, [pc, #584]	; (800411c <HAL_RCC_OscConfig+0x26c>)
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f003 030c 	and.w	r3, r3, #12
 8003ed8:	2b04      	cmp	r3, #4
 8003eda:	d00c      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003edc:	4b8f      	ldr	r3, [pc, #572]	; (800411c <HAL_RCC_OscConfig+0x26c>)
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f003 030c 	and.w	r3, r3, #12
 8003ee4:	2b08      	cmp	r3, #8
 8003ee6:	d112      	bne.n	8003f0e <HAL_RCC_OscConfig+0x5e>
 8003ee8:	4b8c      	ldr	r3, [pc, #560]	; (800411c <HAL_RCC_OscConfig+0x26c>)
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ef4:	d10b      	bne.n	8003f0e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ef6:	4b89      	ldr	r3, [pc, #548]	; (800411c <HAL_RCC_OscConfig+0x26c>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d06c      	beq.n	8003fdc <HAL_RCC_OscConfig+0x12c>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d168      	bne.n	8003fdc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e246      	b.n	800439c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f16:	d106      	bne.n	8003f26 <HAL_RCC_OscConfig+0x76>
 8003f18:	4b80      	ldr	r3, [pc, #512]	; (800411c <HAL_RCC_OscConfig+0x26c>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a7f      	ldr	r2, [pc, #508]	; (800411c <HAL_RCC_OscConfig+0x26c>)
 8003f1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f22:	6013      	str	r3, [r2, #0]
 8003f24:	e02e      	b.n	8003f84 <HAL_RCC_OscConfig+0xd4>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d10c      	bne.n	8003f48 <HAL_RCC_OscConfig+0x98>
 8003f2e:	4b7b      	ldr	r3, [pc, #492]	; (800411c <HAL_RCC_OscConfig+0x26c>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a7a      	ldr	r2, [pc, #488]	; (800411c <HAL_RCC_OscConfig+0x26c>)
 8003f34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f38:	6013      	str	r3, [r2, #0]
 8003f3a:	4b78      	ldr	r3, [pc, #480]	; (800411c <HAL_RCC_OscConfig+0x26c>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a77      	ldr	r2, [pc, #476]	; (800411c <HAL_RCC_OscConfig+0x26c>)
 8003f40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f44:	6013      	str	r3, [r2, #0]
 8003f46:	e01d      	b.n	8003f84 <HAL_RCC_OscConfig+0xd4>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f50:	d10c      	bne.n	8003f6c <HAL_RCC_OscConfig+0xbc>
 8003f52:	4b72      	ldr	r3, [pc, #456]	; (800411c <HAL_RCC_OscConfig+0x26c>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a71      	ldr	r2, [pc, #452]	; (800411c <HAL_RCC_OscConfig+0x26c>)
 8003f58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f5c:	6013      	str	r3, [r2, #0]
 8003f5e:	4b6f      	ldr	r3, [pc, #444]	; (800411c <HAL_RCC_OscConfig+0x26c>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a6e      	ldr	r2, [pc, #440]	; (800411c <HAL_RCC_OscConfig+0x26c>)
 8003f64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f68:	6013      	str	r3, [r2, #0]
 8003f6a:	e00b      	b.n	8003f84 <HAL_RCC_OscConfig+0xd4>
 8003f6c:	4b6b      	ldr	r3, [pc, #428]	; (800411c <HAL_RCC_OscConfig+0x26c>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a6a      	ldr	r2, [pc, #424]	; (800411c <HAL_RCC_OscConfig+0x26c>)
 8003f72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f76:	6013      	str	r3, [r2, #0]
 8003f78:	4b68      	ldr	r3, [pc, #416]	; (800411c <HAL_RCC_OscConfig+0x26c>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a67      	ldr	r2, [pc, #412]	; (800411c <HAL_RCC_OscConfig+0x26c>)
 8003f7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f82:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d013      	beq.n	8003fb4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f8c:	f7ff f806 	bl	8002f9c <HAL_GetTick>
 8003f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f92:	e008      	b.n	8003fa6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f94:	f7ff f802 	bl	8002f9c <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	2b64      	cmp	r3, #100	; 0x64
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e1fa      	b.n	800439c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fa6:	4b5d      	ldr	r3, [pc, #372]	; (800411c <HAL_RCC_OscConfig+0x26c>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d0f0      	beq.n	8003f94 <HAL_RCC_OscConfig+0xe4>
 8003fb2:	e014      	b.n	8003fde <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb4:	f7fe fff2 	bl	8002f9c <HAL_GetTick>
 8003fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fba:	e008      	b.n	8003fce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fbc:	f7fe ffee 	bl	8002f9c <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	2b64      	cmp	r3, #100	; 0x64
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e1e6      	b.n	800439c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fce:	4b53      	ldr	r3, [pc, #332]	; (800411c <HAL_RCC_OscConfig+0x26c>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1f0      	bne.n	8003fbc <HAL_RCC_OscConfig+0x10c>
 8003fda:	e000      	b.n	8003fde <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d063      	beq.n	80040b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003fea:	4b4c      	ldr	r3, [pc, #304]	; (800411c <HAL_RCC_OscConfig+0x26c>)
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f003 030c 	and.w	r3, r3, #12
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00b      	beq.n	800400e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003ff6:	4b49      	ldr	r3, [pc, #292]	; (800411c <HAL_RCC_OscConfig+0x26c>)
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f003 030c 	and.w	r3, r3, #12
 8003ffe:	2b08      	cmp	r3, #8
 8004000:	d11c      	bne.n	800403c <HAL_RCC_OscConfig+0x18c>
 8004002:	4b46      	ldr	r3, [pc, #280]	; (800411c <HAL_RCC_OscConfig+0x26c>)
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d116      	bne.n	800403c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800400e:	4b43      	ldr	r3, [pc, #268]	; (800411c <HAL_RCC_OscConfig+0x26c>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0302 	and.w	r3, r3, #2
 8004016:	2b00      	cmp	r3, #0
 8004018:	d005      	beq.n	8004026 <HAL_RCC_OscConfig+0x176>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	2b01      	cmp	r3, #1
 8004020:	d001      	beq.n	8004026 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e1ba      	b.n	800439c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004026:	4b3d      	ldr	r3, [pc, #244]	; (800411c <HAL_RCC_OscConfig+0x26c>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	00db      	lsls	r3, r3, #3
 8004034:	4939      	ldr	r1, [pc, #228]	; (800411c <HAL_RCC_OscConfig+0x26c>)
 8004036:	4313      	orrs	r3, r2
 8004038:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800403a:	e03a      	b.n	80040b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d020      	beq.n	8004086 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004044:	4b36      	ldr	r3, [pc, #216]	; (8004120 <HAL_RCC_OscConfig+0x270>)
 8004046:	2201      	movs	r2, #1
 8004048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800404a:	f7fe ffa7 	bl	8002f9c <HAL_GetTick>
 800404e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004050:	e008      	b.n	8004064 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004052:	f7fe ffa3 	bl	8002f9c <HAL_GetTick>
 8004056:	4602      	mov	r2, r0
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	2b02      	cmp	r3, #2
 800405e:	d901      	bls.n	8004064 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004060:	2303      	movs	r3, #3
 8004062:	e19b      	b.n	800439c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004064:	4b2d      	ldr	r3, [pc, #180]	; (800411c <HAL_RCC_OscConfig+0x26c>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0302 	and.w	r3, r3, #2
 800406c:	2b00      	cmp	r3, #0
 800406e:	d0f0      	beq.n	8004052 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004070:	4b2a      	ldr	r3, [pc, #168]	; (800411c <HAL_RCC_OscConfig+0x26c>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	695b      	ldr	r3, [r3, #20]
 800407c:	00db      	lsls	r3, r3, #3
 800407e:	4927      	ldr	r1, [pc, #156]	; (800411c <HAL_RCC_OscConfig+0x26c>)
 8004080:	4313      	orrs	r3, r2
 8004082:	600b      	str	r3, [r1, #0]
 8004084:	e015      	b.n	80040b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004086:	4b26      	ldr	r3, [pc, #152]	; (8004120 <HAL_RCC_OscConfig+0x270>)
 8004088:	2200      	movs	r2, #0
 800408a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800408c:	f7fe ff86 	bl	8002f9c <HAL_GetTick>
 8004090:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004092:	e008      	b.n	80040a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004094:	f7fe ff82 	bl	8002f9c <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d901      	bls.n	80040a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e17a      	b.n	800439c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040a6:	4b1d      	ldr	r3, [pc, #116]	; (800411c <HAL_RCC_OscConfig+0x26c>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0302 	and.w	r3, r3, #2
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d1f0      	bne.n	8004094 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0308 	and.w	r3, r3, #8
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d03a      	beq.n	8004134 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d019      	beq.n	80040fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040c6:	4b17      	ldr	r3, [pc, #92]	; (8004124 <HAL_RCC_OscConfig+0x274>)
 80040c8:	2201      	movs	r2, #1
 80040ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040cc:	f7fe ff66 	bl	8002f9c <HAL_GetTick>
 80040d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040d2:	e008      	b.n	80040e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040d4:	f7fe ff62 	bl	8002f9c <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d901      	bls.n	80040e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e15a      	b.n	800439c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040e6:	4b0d      	ldr	r3, [pc, #52]	; (800411c <HAL_RCC_OscConfig+0x26c>)
 80040e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ea:	f003 0302 	and.w	r3, r3, #2
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d0f0      	beq.n	80040d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80040f2:	2001      	movs	r0, #1
 80040f4:	f000 fad8 	bl	80046a8 <RCC_Delay>
 80040f8:	e01c      	b.n	8004134 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040fa:	4b0a      	ldr	r3, [pc, #40]	; (8004124 <HAL_RCC_OscConfig+0x274>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004100:	f7fe ff4c 	bl	8002f9c <HAL_GetTick>
 8004104:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004106:	e00f      	b.n	8004128 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004108:	f7fe ff48 	bl	8002f9c <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b02      	cmp	r3, #2
 8004114:	d908      	bls.n	8004128 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e140      	b.n	800439c <HAL_RCC_OscConfig+0x4ec>
 800411a:	bf00      	nop
 800411c:	40021000 	.word	0x40021000
 8004120:	42420000 	.word	0x42420000
 8004124:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004128:	4b9e      	ldr	r3, [pc, #632]	; (80043a4 <HAL_RCC_OscConfig+0x4f4>)
 800412a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412c:	f003 0302 	and.w	r3, r3, #2
 8004130:	2b00      	cmp	r3, #0
 8004132:	d1e9      	bne.n	8004108 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0304 	and.w	r3, r3, #4
 800413c:	2b00      	cmp	r3, #0
 800413e:	f000 80a6 	beq.w	800428e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004142:	2300      	movs	r3, #0
 8004144:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004146:	4b97      	ldr	r3, [pc, #604]	; (80043a4 <HAL_RCC_OscConfig+0x4f4>)
 8004148:	69db      	ldr	r3, [r3, #28]
 800414a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d10d      	bne.n	800416e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004152:	4b94      	ldr	r3, [pc, #592]	; (80043a4 <HAL_RCC_OscConfig+0x4f4>)
 8004154:	69db      	ldr	r3, [r3, #28]
 8004156:	4a93      	ldr	r2, [pc, #588]	; (80043a4 <HAL_RCC_OscConfig+0x4f4>)
 8004158:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800415c:	61d3      	str	r3, [r2, #28]
 800415e:	4b91      	ldr	r3, [pc, #580]	; (80043a4 <HAL_RCC_OscConfig+0x4f4>)
 8004160:	69db      	ldr	r3, [r3, #28]
 8004162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004166:	60bb      	str	r3, [r7, #8]
 8004168:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800416a:	2301      	movs	r3, #1
 800416c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800416e:	4b8e      	ldr	r3, [pc, #568]	; (80043a8 <HAL_RCC_OscConfig+0x4f8>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004176:	2b00      	cmp	r3, #0
 8004178:	d118      	bne.n	80041ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800417a:	4b8b      	ldr	r3, [pc, #556]	; (80043a8 <HAL_RCC_OscConfig+0x4f8>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a8a      	ldr	r2, [pc, #552]	; (80043a8 <HAL_RCC_OscConfig+0x4f8>)
 8004180:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004184:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004186:	f7fe ff09 	bl	8002f9c <HAL_GetTick>
 800418a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800418c:	e008      	b.n	80041a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800418e:	f7fe ff05 	bl	8002f9c <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	2b64      	cmp	r3, #100	; 0x64
 800419a:	d901      	bls.n	80041a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e0fd      	b.n	800439c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041a0:	4b81      	ldr	r3, [pc, #516]	; (80043a8 <HAL_RCC_OscConfig+0x4f8>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d0f0      	beq.n	800418e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d106      	bne.n	80041c2 <HAL_RCC_OscConfig+0x312>
 80041b4:	4b7b      	ldr	r3, [pc, #492]	; (80043a4 <HAL_RCC_OscConfig+0x4f4>)
 80041b6:	6a1b      	ldr	r3, [r3, #32]
 80041b8:	4a7a      	ldr	r2, [pc, #488]	; (80043a4 <HAL_RCC_OscConfig+0x4f4>)
 80041ba:	f043 0301 	orr.w	r3, r3, #1
 80041be:	6213      	str	r3, [r2, #32]
 80041c0:	e02d      	b.n	800421e <HAL_RCC_OscConfig+0x36e>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d10c      	bne.n	80041e4 <HAL_RCC_OscConfig+0x334>
 80041ca:	4b76      	ldr	r3, [pc, #472]	; (80043a4 <HAL_RCC_OscConfig+0x4f4>)
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	4a75      	ldr	r2, [pc, #468]	; (80043a4 <HAL_RCC_OscConfig+0x4f4>)
 80041d0:	f023 0301 	bic.w	r3, r3, #1
 80041d4:	6213      	str	r3, [r2, #32]
 80041d6:	4b73      	ldr	r3, [pc, #460]	; (80043a4 <HAL_RCC_OscConfig+0x4f4>)
 80041d8:	6a1b      	ldr	r3, [r3, #32]
 80041da:	4a72      	ldr	r2, [pc, #456]	; (80043a4 <HAL_RCC_OscConfig+0x4f4>)
 80041dc:	f023 0304 	bic.w	r3, r3, #4
 80041e0:	6213      	str	r3, [r2, #32]
 80041e2:	e01c      	b.n	800421e <HAL_RCC_OscConfig+0x36e>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	2b05      	cmp	r3, #5
 80041ea:	d10c      	bne.n	8004206 <HAL_RCC_OscConfig+0x356>
 80041ec:	4b6d      	ldr	r3, [pc, #436]	; (80043a4 <HAL_RCC_OscConfig+0x4f4>)
 80041ee:	6a1b      	ldr	r3, [r3, #32]
 80041f0:	4a6c      	ldr	r2, [pc, #432]	; (80043a4 <HAL_RCC_OscConfig+0x4f4>)
 80041f2:	f043 0304 	orr.w	r3, r3, #4
 80041f6:	6213      	str	r3, [r2, #32]
 80041f8:	4b6a      	ldr	r3, [pc, #424]	; (80043a4 <HAL_RCC_OscConfig+0x4f4>)
 80041fa:	6a1b      	ldr	r3, [r3, #32]
 80041fc:	4a69      	ldr	r2, [pc, #420]	; (80043a4 <HAL_RCC_OscConfig+0x4f4>)
 80041fe:	f043 0301 	orr.w	r3, r3, #1
 8004202:	6213      	str	r3, [r2, #32]
 8004204:	e00b      	b.n	800421e <HAL_RCC_OscConfig+0x36e>
 8004206:	4b67      	ldr	r3, [pc, #412]	; (80043a4 <HAL_RCC_OscConfig+0x4f4>)
 8004208:	6a1b      	ldr	r3, [r3, #32]
 800420a:	4a66      	ldr	r2, [pc, #408]	; (80043a4 <HAL_RCC_OscConfig+0x4f4>)
 800420c:	f023 0301 	bic.w	r3, r3, #1
 8004210:	6213      	str	r3, [r2, #32]
 8004212:	4b64      	ldr	r3, [pc, #400]	; (80043a4 <HAL_RCC_OscConfig+0x4f4>)
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	4a63      	ldr	r2, [pc, #396]	; (80043a4 <HAL_RCC_OscConfig+0x4f4>)
 8004218:	f023 0304 	bic.w	r3, r3, #4
 800421c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d015      	beq.n	8004252 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004226:	f7fe feb9 	bl	8002f9c <HAL_GetTick>
 800422a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800422c:	e00a      	b.n	8004244 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800422e:	f7fe feb5 	bl	8002f9c <HAL_GetTick>
 8004232:	4602      	mov	r2, r0
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	f241 3288 	movw	r2, #5000	; 0x1388
 800423c:	4293      	cmp	r3, r2
 800423e:	d901      	bls.n	8004244 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	e0ab      	b.n	800439c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004244:	4b57      	ldr	r3, [pc, #348]	; (80043a4 <HAL_RCC_OscConfig+0x4f4>)
 8004246:	6a1b      	ldr	r3, [r3, #32]
 8004248:	f003 0302 	and.w	r3, r3, #2
 800424c:	2b00      	cmp	r3, #0
 800424e:	d0ee      	beq.n	800422e <HAL_RCC_OscConfig+0x37e>
 8004250:	e014      	b.n	800427c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004252:	f7fe fea3 	bl	8002f9c <HAL_GetTick>
 8004256:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004258:	e00a      	b.n	8004270 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800425a:	f7fe fe9f 	bl	8002f9c <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	f241 3288 	movw	r2, #5000	; 0x1388
 8004268:	4293      	cmp	r3, r2
 800426a:	d901      	bls.n	8004270 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e095      	b.n	800439c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004270:	4b4c      	ldr	r3, [pc, #304]	; (80043a4 <HAL_RCC_OscConfig+0x4f4>)
 8004272:	6a1b      	ldr	r3, [r3, #32]
 8004274:	f003 0302 	and.w	r3, r3, #2
 8004278:	2b00      	cmp	r3, #0
 800427a:	d1ee      	bne.n	800425a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800427c:	7dfb      	ldrb	r3, [r7, #23]
 800427e:	2b01      	cmp	r3, #1
 8004280:	d105      	bne.n	800428e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004282:	4b48      	ldr	r3, [pc, #288]	; (80043a4 <HAL_RCC_OscConfig+0x4f4>)
 8004284:	69db      	ldr	r3, [r3, #28]
 8004286:	4a47      	ldr	r2, [pc, #284]	; (80043a4 <HAL_RCC_OscConfig+0x4f4>)
 8004288:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800428c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	69db      	ldr	r3, [r3, #28]
 8004292:	2b00      	cmp	r3, #0
 8004294:	f000 8081 	beq.w	800439a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004298:	4b42      	ldr	r3, [pc, #264]	; (80043a4 <HAL_RCC_OscConfig+0x4f4>)
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f003 030c 	and.w	r3, r3, #12
 80042a0:	2b08      	cmp	r3, #8
 80042a2:	d061      	beq.n	8004368 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	69db      	ldr	r3, [r3, #28]
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d146      	bne.n	800433a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042ac:	4b3f      	ldr	r3, [pc, #252]	; (80043ac <HAL_RCC_OscConfig+0x4fc>)
 80042ae:	2200      	movs	r2, #0
 80042b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042b2:	f7fe fe73 	bl	8002f9c <HAL_GetTick>
 80042b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042b8:	e008      	b.n	80042cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042ba:	f7fe fe6f 	bl	8002f9c <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d901      	bls.n	80042cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e067      	b.n	800439c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042cc:	4b35      	ldr	r3, [pc, #212]	; (80043a4 <HAL_RCC_OscConfig+0x4f4>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d1f0      	bne.n	80042ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6a1b      	ldr	r3, [r3, #32]
 80042dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042e0:	d108      	bne.n	80042f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80042e2:	4b30      	ldr	r3, [pc, #192]	; (80043a4 <HAL_RCC_OscConfig+0x4f4>)
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	492d      	ldr	r1, [pc, #180]	; (80043a4 <HAL_RCC_OscConfig+0x4f4>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042f4:	4b2b      	ldr	r3, [pc, #172]	; (80043a4 <HAL_RCC_OscConfig+0x4f4>)
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a19      	ldr	r1, [r3, #32]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004304:	430b      	orrs	r3, r1
 8004306:	4927      	ldr	r1, [pc, #156]	; (80043a4 <HAL_RCC_OscConfig+0x4f4>)
 8004308:	4313      	orrs	r3, r2
 800430a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800430c:	4b27      	ldr	r3, [pc, #156]	; (80043ac <HAL_RCC_OscConfig+0x4fc>)
 800430e:	2201      	movs	r2, #1
 8004310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004312:	f7fe fe43 	bl	8002f9c <HAL_GetTick>
 8004316:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004318:	e008      	b.n	800432c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800431a:	f7fe fe3f 	bl	8002f9c <HAL_GetTick>
 800431e:	4602      	mov	r2, r0
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	2b02      	cmp	r3, #2
 8004326:	d901      	bls.n	800432c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e037      	b.n	800439c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800432c:	4b1d      	ldr	r3, [pc, #116]	; (80043a4 <HAL_RCC_OscConfig+0x4f4>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d0f0      	beq.n	800431a <HAL_RCC_OscConfig+0x46a>
 8004338:	e02f      	b.n	800439a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800433a:	4b1c      	ldr	r3, [pc, #112]	; (80043ac <HAL_RCC_OscConfig+0x4fc>)
 800433c:	2200      	movs	r2, #0
 800433e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004340:	f7fe fe2c 	bl	8002f9c <HAL_GetTick>
 8004344:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004346:	e008      	b.n	800435a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004348:	f7fe fe28 	bl	8002f9c <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	2b02      	cmp	r3, #2
 8004354:	d901      	bls.n	800435a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e020      	b.n	800439c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800435a:	4b12      	ldr	r3, [pc, #72]	; (80043a4 <HAL_RCC_OscConfig+0x4f4>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d1f0      	bne.n	8004348 <HAL_RCC_OscConfig+0x498>
 8004366:	e018      	b.n	800439a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	69db      	ldr	r3, [r3, #28]
 800436c:	2b01      	cmp	r3, #1
 800436e:	d101      	bne.n	8004374 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e013      	b.n	800439c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004374:	4b0b      	ldr	r3, [pc, #44]	; (80043a4 <HAL_RCC_OscConfig+0x4f4>)
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a1b      	ldr	r3, [r3, #32]
 8004384:	429a      	cmp	r2, r3
 8004386:	d106      	bne.n	8004396 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004392:	429a      	cmp	r2, r3
 8004394:	d001      	beq.n	800439a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e000      	b.n	800439c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800439a:	2300      	movs	r3, #0
}
 800439c:	4618      	mov	r0, r3
 800439e:	3718      	adds	r7, #24
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	40021000 	.word	0x40021000
 80043a8:	40007000 	.word	0x40007000
 80043ac:	42420060 	.word	0x42420060

080043b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d101      	bne.n	80043c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e0d0      	b.n	8004566 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043c4:	4b6a      	ldr	r3, [pc, #424]	; (8004570 <HAL_RCC_ClockConfig+0x1c0>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0307 	and.w	r3, r3, #7
 80043cc:	683a      	ldr	r2, [r7, #0]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d910      	bls.n	80043f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043d2:	4b67      	ldr	r3, [pc, #412]	; (8004570 <HAL_RCC_ClockConfig+0x1c0>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f023 0207 	bic.w	r2, r3, #7
 80043da:	4965      	ldr	r1, [pc, #404]	; (8004570 <HAL_RCC_ClockConfig+0x1c0>)
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	4313      	orrs	r3, r2
 80043e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043e2:	4b63      	ldr	r3, [pc, #396]	; (8004570 <HAL_RCC_ClockConfig+0x1c0>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0307 	and.w	r3, r3, #7
 80043ea:	683a      	ldr	r2, [r7, #0]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d001      	beq.n	80043f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e0b8      	b.n	8004566 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0302 	and.w	r3, r3, #2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d020      	beq.n	8004442 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0304 	and.w	r3, r3, #4
 8004408:	2b00      	cmp	r3, #0
 800440a:	d005      	beq.n	8004418 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800440c:	4b59      	ldr	r3, [pc, #356]	; (8004574 <HAL_RCC_ClockConfig+0x1c4>)
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	4a58      	ldr	r2, [pc, #352]	; (8004574 <HAL_RCC_ClockConfig+0x1c4>)
 8004412:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004416:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0308 	and.w	r3, r3, #8
 8004420:	2b00      	cmp	r3, #0
 8004422:	d005      	beq.n	8004430 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004424:	4b53      	ldr	r3, [pc, #332]	; (8004574 <HAL_RCC_ClockConfig+0x1c4>)
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	4a52      	ldr	r2, [pc, #328]	; (8004574 <HAL_RCC_ClockConfig+0x1c4>)
 800442a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800442e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004430:	4b50      	ldr	r3, [pc, #320]	; (8004574 <HAL_RCC_ClockConfig+0x1c4>)
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	494d      	ldr	r1, [pc, #308]	; (8004574 <HAL_RCC_ClockConfig+0x1c4>)
 800443e:	4313      	orrs	r3, r2
 8004440:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	2b00      	cmp	r3, #0
 800444c:	d040      	beq.n	80044d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	2b01      	cmp	r3, #1
 8004454:	d107      	bne.n	8004466 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004456:	4b47      	ldr	r3, [pc, #284]	; (8004574 <HAL_RCC_ClockConfig+0x1c4>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d115      	bne.n	800448e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e07f      	b.n	8004566 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	2b02      	cmp	r3, #2
 800446c:	d107      	bne.n	800447e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800446e:	4b41      	ldr	r3, [pc, #260]	; (8004574 <HAL_RCC_ClockConfig+0x1c4>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d109      	bne.n	800448e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e073      	b.n	8004566 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800447e:	4b3d      	ldr	r3, [pc, #244]	; (8004574 <HAL_RCC_ClockConfig+0x1c4>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0302 	and.w	r3, r3, #2
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e06b      	b.n	8004566 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800448e:	4b39      	ldr	r3, [pc, #228]	; (8004574 <HAL_RCC_ClockConfig+0x1c4>)
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	f023 0203 	bic.w	r2, r3, #3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	4936      	ldr	r1, [pc, #216]	; (8004574 <HAL_RCC_ClockConfig+0x1c4>)
 800449c:	4313      	orrs	r3, r2
 800449e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044a0:	f7fe fd7c 	bl	8002f9c <HAL_GetTick>
 80044a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044a6:	e00a      	b.n	80044be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044a8:	f7fe fd78 	bl	8002f9c <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d901      	bls.n	80044be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e053      	b.n	8004566 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044be:	4b2d      	ldr	r3, [pc, #180]	; (8004574 <HAL_RCC_ClockConfig+0x1c4>)
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	f003 020c 	and.w	r2, r3, #12
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d1eb      	bne.n	80044a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044d0:	4b27      	ldr	r3, [pc, #156]	; (8004570 <HAL_RCC_ClockConfig+0x1c0>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0307 	and.w	r3, r3, #7
 80044d8:	683a      	ldr	r2, [r7, #0]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d210      	bcs.n	8004500 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044de:	4b24      	ldr	r3, [pc, #144]	; (8004570 <HAL_RCC_ClockConfig+0x1c0>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f023 0207 	bic.w	r2, r3, #7
 80044e6:	4922      	ldr	r1, [pc, #136]	; (8004570 <HAL_RCC_ClockConfig+0x1c0>)
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ee:	4b20      	ldr	r3, [pc, #128]	; (8004570 <HAL_RCC_ClockConfig+0x1c0>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0307 	and.w	r3, r3, #7
 80044f6:	683a      	ldr	r2, [r7, #0]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d001      	beq.n	8004500 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e032      	b.n	8004566 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0304 	and.w	r3, r3, #4
 8004508:	2b00      	cmp	r3, #0
 800450a:	d008      	beq.n	800451e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800450c:	4b19      	ldr	r3, [pc, #100]	; (8004574 <HAL_RCC_ClockConfig+0x1c4>)
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	4916      	ldr	r1, [pc, #88]	; (8004574 <HAL_RCC_ClockConfig+0x1c4>)
 800451a:	4313      	orrs	r3, r2
 800451c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0308 	and.w	r3, r3, #8
 8004526:	2b00      	cmp	r3, #0
 8004528:	d009      	beq.n	800453e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800452a:	4b12      	ldr	r3, [pc, #72]	; (8004574 <HAL_RCC_ClockConfig+0x1c4>)
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	00db      	lsls	r3, r3, #3
 8004538:	490e      	ldr	r1, [pc, #56]	; (8004574 <HAL_RCC_ClockConfig+0x1c4>)
 800453a:	4313      	orrs	r3, r2
 800453c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800453e:	f000 f821 	bl	8004584 <HAL_RCC_GetSysClockFreq>
 8004542:	4602      	mov	r2, r0
 8004544:	4b0b      	ldr	r3, [pc, #44]	; (8004574 <HAL_RCC_ClockConfig+0x1c4>)
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	091b      	lsrs	r3, r3, #4
 800454a:	f003 030f 	and.w	r3, r3, #15
 800454e:	490a      	ldr	r1, [pc, #40]	; (8004578 <HAL_RCC_ClockConfig+0x1c8>)
 8004550:	5ccb      	ldrb	r3, [r1, r3]
 8004552:	fa22 f303 	lsr.w	r3, r2, r3
 8004556:	4a09      	ldr	r2, [pc, #36]	; (800457c <HAL_RCC_ClockConfig+0x1cc>)
 8004558:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800455a:	4b09      	ldr	r3, [pc, #36]	; (8004580 <HAL_RCC_ClockConfig+0x1d0>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4618      	mov	r0, r3
 8004560:	f7fe fcda 	bl	8002f18 <HAL_InitTick>

  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3710      	adds	r7, #16
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	40022000 	.word	0x40022000
 8004574:	40021000 	.word	0x40021000
 8004578:	0800a6fc 	.word	0x0800a6fc
 800457c:	2000000c 	.word	0x2000000c
 8004580:	20000010 	.word	0x20000010

08004584 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004584:	b490      	push	{r4, r7}
 8004586:	b08a      	sub	sp, #40	; 0x28
 8004588:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800458a:	4b2a      	ldr	r3, [pc, #168]	; (8004634 <HAL_RCC_GetSysClockFreq+0xb0>)
 800458c:	1d3c      	adds	r4, r7, #4
 800458e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004590:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004594:	f240 2301 	movw	r3, #513	; 0x201
 8004598:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800459a:	2300      	movs	r3, #0
 800459c:	61fb      	str	r3, [r7, #28]
 800459e:	2300      	movs	r3, #0
 80045a0:	61bb      	str	r3, [r7, #24]
 80045a2:	2300      	movs	r3, #0
 80045a4:	627b      	str	r3, [r7, #36]	; 0x24
 80045a6:	2300      	movs	r3, #0
 80045a8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80045aa:	2300      	movs	r3, #0
 80045ac:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80045ae:	4b22      	ldr	r3, [pc, #136]	; (8004638 <HAL_RCC_GetSysClockFreq+0xb4>)
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	f003 030c 	and.w	r3, r3, #12
 80045ba:	2b04      	cmp	r3, #4
 80045bc:	d002      	beq.n	80045c4 <HAL_RCC_GetSysClockFreq+0x40>
 80045be:	2b08      	cmp	r3, #8
 80045c0:	d003      	beq.n	80045ca <HAL_RCC_GetSysClockFreq+0x46>
 80045c2:	e02d      	b.n	8004620 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80045c4:	4b1d      	ldr	r3, [pc, #116]	; (800463c <HAL_RCC_GetSysClockFreq+0xb8>)
 80045c6:	623b      	str	r3, [r7, #32]
      break;
 80045c8:	e02d      	b.n	8004626 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	0c9b      	lsrs	r3, r3, #18
 80045ce:	f003 030f 	and.w	r3, r3, #15
 80045d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80045d6:	4413      	add	r3, r2
 80045d8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80045dc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d013      	beq.n	8004610 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80045e8:	4b13      	ldr	r3, [pc, #76]	; (8004638 <HAL_RCC_GetSysClockFreq+0xb4>)
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	0c5b      	lsrs	r3, r3, #17
 80045ee:	f003 0301 	and.w	r3, r3, #1
 80045f2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80045f6:	4413      	add	r3, r2
 80045f8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80045fc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	4a0e      	ldr	r2, [pc, #56]	; (800463c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004602:	fb02 f203 	mul.w	r2, r2, r3
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	fbb2 f3f3 	udiv	r3, r2, r3
 800460c:	627b      	str	r3, [r7, #36]	; 0x24
 800460e:	e004      	b.n	800461a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	4a0b      	ldr	r2, [pc, #44]	; (8004640 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004614:	fb02 f303 	mul.w	r3, r2, r3
 8004618:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800461a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461c:	623b      	str	r3, [r7, #32]
      break;
 800461e:	e002      	b.n	8004626 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004620:	4b06      	ldr	r3, [pc, #24]	; (800463c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004622:	623b      	str	r3, [r7, #32]
      break;
 8004624:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004626:	6a3b      	ldr	r3, [r7, #32]
}
 8004628:	4618      	mov	r0, r3
 800462a:	3728      	adds	r7, #40	; 0x28
 800462c:	46bd      	mov	sp, r7
 800462e:	bc90      	pop	{r4, r7}
 8004630:	4770      	bx	lr
 8004632:	bf00      	nop
 8004634:	0800a6ec 	.word	0x0800a6ec
 8004638:	40021000 	.word	0x40021000
 800463c:	007a1200 	.word	0x007a1200
 8004640:	003d0900 	.word	0x003d0900

08004644 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004644:	b480      	push	{r7}
 8004646:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004648:	4b02      	ldr	r3, [pc, #8]	; (8004654 <HAL_RCC_GetHCLKFreq+0x10>)
 800464a:	681b      	ldr	r3, [r3, #0]
}
 800464c:	4618      	mov	r0, r3
 800464e:	46bd      	mov	sp, r7
 8004650:	bc80      	pop	{r7}
 8004652:	4770      	bx	lr
 8004654:	2000000c 	.word	0x2000000c

08004658 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800465c:	f7ff fff2 	bl	8004644 <HAL_RCC_GetHCLKFreq>
 8004660:	4602      	mov	r2, r0
 8004662:	4b05      	ldr	r3, [pc, #20]	; (8004678 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	0a1b      	lsrs	r3, r3, #8
 8004668:	f003 0307 	and.w	r3, r3, #7
 800466c:	4903      	ldr	r1, [pc, #12]	; (800467c <HAL_RCC_GetPCLK1Freq+0x24>)
 800466e:	5ccb      	ldrb	r3, [r1, r3]
 8004670:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004674:	4618      	mov	r0, r3
 8004676:	bd80      	pop	{r7, pc}
 8004678:	40021000 	.word	0x40021000
 800467c:	0800a70c 	.word	0x0800a70c

08004680 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004684:	f7ff ffde 	bl	8004644 <HAL_RCC_GetHCLKFreq>
 8004688:	4602      	mov	r2, r0
 800468a:	4b05      	ldr	r3, [pc, #20]	; (80046a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	0adb      	lsrs	r3, r3, #11
 8004690:	f003 0307 	and.w	r3, r3, #7
 8004694:	4903      	ldr	r1, [pc, #12]	; (80046a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004696:	5ccb      	ldrb	r3, [r1, r3]
 8004698:	fa22 f303 	lsr.w	r3, r2, r3
}
 800469c:	4618      	mov	r0, r3
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	40021000 	.word	0x40021000
 80046a4:	0800a70c 	.word	0x0800a70c

080046a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b085      	sub	sp, #20
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80046b0:	4b0a      	ldr	r3, [pc, #40]	; (80046dc <RCC_Delay+0x34>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a0a      	ldr	r2, [pc, #40]	; (80046e0 <RCC_Delay+0x38>)
 80046b6:	fba2 2303 	umull	r2, r3, r2, r3
 80046ba:	0a5b      	lsrs	r3, r3, #9
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	fb02 f303 	mul.w	r3, r2, r3
 80046c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80046c4:	bf00      	nop
  }
  while (Delay --);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	1e5a      	subs	r2, r3, #1
 80046ca:	60fa      	str	r2, [r7, #12]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d1f9      	bne.n	80046c4 <RCC_Delay+0x1c>
}
 80046d0:	bf00      	nop
 80046d2:	bf00      	nop
 80046d4:	3714      	adds	r7, #20
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bc80      	pop	{r7}
 80046da:	4770      	bx	lr
 80046dc:	2000000c 	.word	0x2000000c
 80046e0:	10624dd3 	.word	0x10624dd3

080046e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b086      	sub	sp, #24
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80046ec:	2300      	movs	r3, #0
 80046ee:	613b      	str	r3, [r7, #16]
 80046f0:	2300      	movs	r3, #0
 80046f2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0301 	and.w	r3, r3, #1
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d07d      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004700:	2300      	movs	r3, #0
 8004702:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004704:	4b4f      	ldr	r3, [pc, #316]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004706:	69db      	ldr	r3, [r3, #28]
 8004708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d10d      	bne.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004710:	4b4c      	ldr	r3, [pc, #304]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004712:	69db      	ldr	r3, [r3, #28]
 8004714:	4a4b      	ldr	r2, [pc, #300]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004716:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800471a:	61d3      	str	r3, [r2, #28]
 800471c:	4b49      	ldr	r3, [pc, #292]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800471e:	69db      	ldr	r3, [r3, #28]
 8004720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004724:	60bb      	str	r3, [r7, #8]
 8004726:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004728:	2301      	movs	r3, #1
 800472a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800472c:	4b46      	ldr	r3, [pc, #280]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004734:	2b00      	cmp	r3, #0
 8004736:	d118      	bne.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004738:	4b43      	ldr	r3, [pc, #268]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a42      	ldr	r2, [pc, #264]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800473e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004742:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004744:	f7fe fc2a 	bl	8002f9c <HAL_GetTick>
 8004748:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800474a:	e008      	b.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800474c:	f7fe fc26 	bl	8002f9c <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	2b64      	cmp	r3, #100	; 0x64
 8004758:	d901      	bls.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e06d      	b.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800475e:	4b3a      	ldr	r3, [pc, #232]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004766:	2b00      	cmp	r3, #0
 8004768:	d0f0      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800476a:	4b36      	ldr	r3, [pc, #216]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800476c:	6a1b      	ldr	r3, [r3, #32]
 800476e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004772:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d02e      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	429a      	cmp	r2, r3
 8004786:	d027      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004788:	4b2e      	ldr	r3, [pc, #184]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800478a:	6a1b      	ldr	r3, [r3, #32]
 800478c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004790:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004792:	4b2e      	ldr	r3, [pc, #184]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004794:	2201      	movs	r2, #1
 8004796:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004798:	4b2c      	ldr	r3, [pc, #176]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800479a:	2200      	movs	r2, #0
 800479c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800479e:	4a29      	ldr	r2, [pc, #164]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f003 0301 	and.w	r3, r3, #1
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d014      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ae:	f7fe fbf5 	bl	8002f9c <HAL_GetTick>
 80047b2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047b4:	e00a      	b.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047b6:	f7fe fbf1 	bl	8002f9c <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d901      	bls.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e036      	b.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047cc:	4b1d      	ldr	r3, [pc, #116]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047ce:	6a1b      	ldr	r3, [r3, #32]
 80047d0:	f003 0302 	and.w	r3, r3, #2
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d0ee      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047d8:	4b1a      	ldr	r3, [pc, #104]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047da:	6a1b      	ldr	r3, [r3, #32]
 80047dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	4917      	ldr	r1, [pc, #92]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80047ea:	7dfb      	ldrb	r3, [r7, #23]
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d105      	bne.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047f0:	4b14      	ldr	r3, [pc, #80]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047f2:	69db      	ldr	r3, [r3, #28]
 80047f4:	4a13      	ldr	r2, [pc, #76]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047fa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0302 	and.w	r3, r3, #2
 8004804:	2b00      	cmp	r3, #0
 8004806:	d008      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004808:	4b0e      	ldr	r3, [pc, #56]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	490b      	ldr	r1, [pc, #44]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004816:	4313      	orrs	r3, r2
 8004818:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0310 	and.w	r3, r3, #16
 8004822:	2b00      	cmp	r3, #0
 8004824:	d008      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004826:	4b07      	ldr	r3, [pc, #28]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	4904      	ldr	r1, [pc, #16]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004834:	4313      	orrs	r3, r2
 8004836:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3718      	adds	r7, #24
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	40021000 	.word	0x40021000
 8004848:	40007000 	.word	0x40007000
 800484c:	42420440 	.word	0x42420440

08004850 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d101      	bne.n	8004862 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e076      	b.n	8004950 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004866:	2b00      	cmp	r3, #0
 8004868:	d108      	bne.n	800487c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004872:	d009      	beq.n	8004888 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	61da      	str	r2, [r3, #28]
 800487a:	e005      	b.n	8004888 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004894:	b2db      	uxtb	r3, r3
 8004896:	2b00      	cmp	r3, #0
 8004898:	d106      	bne.n	80048a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f7fe f92c 	bl	8002b00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2202      	movs	r2, #2
 80048ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048be:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80048d0:	431a      	orrs	r2, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048da:	431a      	orrs	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	f003 0302 	and.w	r3, r3, #2
 80048e4:	431a      	orrs	r2, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	f003 0301 	and.w	r3, r3, #1
 80048ee:	431a      	orrs	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	699b      	ldr	r3, [r3, #24]
 80048f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048f8:	431a      	orrs	r2, r3
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	69db      	ldr	r3, [r3, #28]
 80048fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004902:	431a      	orrs	r2, r3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6a1b      	ldr	r3, [r3, #32]
 8004908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800490c:	ea42 0103 	orr.w	r1, r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004914:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	430a      	orrs	r2, r1
 800491e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	699b      	ldr	r3, [r3, #24]
 8004924:	0c1a      	lsrs	r2, r3, #16
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f002 0204 	and.w	r2, r2, #4
 800492e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	69da      	ldr	r2, [r3, #28]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800493e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2201      	movs	r2, #1
 800494a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800494e:	2300      	movs	r3, #0
}
 8004950:	4618      	mov	r0, r3
 8004952:	3708      	adds	r7, #8
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}

08004958 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b08c      	sub	sp, #48	; 0x30
 800495c:	af00      	add	r7, sp, #0
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	607a      	str	r2, [r7, #4]
 8004964:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004966:	2301      	movs	r3, #1
 8004968:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800496a:	2300      	movs	r3, #0
 800496c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004976:	2b01      	cmp	r3, #1
 8004978:	d101      	bne.n	800497e <HAL_SPI_TransmitReceive+0x26>
 800497a:	2302      	movs	r3, #2
 800497c:	e18a      	b.n	8004c94 <HAL_SPI_TransmitReceive+0x33c>
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2201      	movs	r2, #1
 8004982:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004986:	f7fe fb09 	bl	8002f9c <HAL_GetTick>
 800498a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004992:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800499c:	887b      	ldrh	r3, [r7, #2]
 800499e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80049a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d00f      	beq.n	80049c8 <HAL_SPI_TransmitReceive+0x70>
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049ae:	d107      	bne.n	80049c0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d103      	bne.n	80049c0 <HAL_SPI_TransmitReceive+0x68>
 80049b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049bc:	2b04      	cmp	r3, #4
 80049be:	d003      	beq.n	80049c8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80049c0:	2302      	movs	r3, #2
 80049c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80049c6:	e15b      	b.n	8004c80 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d005      	beq.n	80049da <HAL_SPI_TransmitReceive+0x82>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d002      	beq.n	80049da <HAL_SPI_TransmitReceive+0x82>
 80049d4:	887b      	ldrh	r3, [r7, #2]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d103      	bne.n	80049e2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80049e0:	e14e      	b.n	8004c80 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	2b04      	cmp	r3, #4
 80049ec:	d003      	beq.n	80049f6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2205      	movs	r2, #5
 80049f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2200      	movs	r2, #0
 80049fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	887a      	ldrh	r2, [r7, #2]
 8004a06:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	887a      	ldrh	r2, [r7, #2]
 8004a0c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	68ba      	ldr	r2, [r7, #8]
 8004a12:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	887a      	ldrh	r2, [r7, #2]
 8004a18:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	887a      	ldrh	r2, [r7, #2]
 8004a1e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2200      	movs	r2, #0
 8004a24:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a36:	2b40      	cmp	r3, #64	; 0x40
 8004a38:	d007      	beq.n	8004a4a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a48:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a52:	d178      	bne.n	8004b46 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d002      	beq.n	8004a62 <HAL_SPI_TransmitReceive+0x10a>
 8004a5c:	8b7b      	ldrh	r3, [r7, #26]
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d166      	bne.n	8004b30 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a66:	881a      	ldrh	r2, [r3, #0]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a72:	1c9a      	adds	r2, r3, #2
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	b29a      	uxth	r2, r3
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a86:	e053      	b.n	8004b30 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f003 0302 	and.w	r3, r3, #2
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d11b      	bne.n	8004ace <HAL_SPI_TransmitReceive+0x176>
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d016      	beq.n	8004ace <HAL_SPI_TransmitReceive+0x176>
 8004aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d113      	bne.n	8004ace <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aaa:	881a      	ldrh	r2, [r3, #0]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab6:	1c9a      	adds	r2, r3, #2
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	3b01      	subs	r3, #1
 8004ac4:	b29a      	uxth	r2, r3
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004aca:	2300      	movs	r3, #0
 8004acc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	f003 0301 	and.w	r3, r3, #1
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d119      	bne.n	8004b10 <HAL_SPI_TransmitReceive+0x1b8>
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d014      	beq.n	8004b10 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68da      	ldr	r2, [r3, #12]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af0:	b292      	uxth	r2, r2
 8004af2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af8:	1c9a      	adds	r2, r3, #2
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	3b01      	subs	r3, #1
 8004b06:	b29a      	uxth	r2, r3
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004b10:	f7fe fa44 	bl	8002f9c <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d807      	bhi.n	8004b30 <HAL_SPI_TransmitReceive+0x1d8>
 8004b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b26:	d003      	beq.n	8004b30 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004b2e:	e0a7      	b.n	8004c80 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d1a6      	bne.n	8004a88 <HAL_SPI_TransmitReceive+0x130>
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d1a1      	bne.n	8004a88 <HAL_SPI_TransmitReceive+0x130>
 8004b44:	e07c      	b.n	8004c40 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d002      	beq.n	8004b54 <HAL_SPI_TransmitReceive+0x1fc>
 8004b4e:	8b7b      	ldrh	r3, [r7, #26]
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d16b      	bne.n	8004c2c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	330c      	adds	r3, #12
 8004b5e:	7812      	ldrb	r2, [r2, #0]
 8004b60:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b66:	1c5a      	adds	r2, r3, #1
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	3b01      	subs	r3, #1
 8004b74:	b29a      	uxth	r2, r3
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b7a:	e057      	b.n	8004c2c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f003 0302 	and.w	r3, r3, #2
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d11c      	bne.n	8004bc4 <HAL_SPI_TransmitReceive+0x26c>
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d017      	beq.n	8004bc4 <HAL_SPI_TransmitReceive+0x26c>
 8004b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d114      	bne.n	8004bc4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	330c      	adds	r3, #12
 8004ba4:	7812      	ldrb	r2, [r2, #0]
 8004ba6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bac:	1c5a      	adds	r2, r3, #1
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	3b01      	subs	r3, #1
 8004bba:	b29a      	uxth	r2, r3
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	f003 0301 	and.w	r3, r3, #1
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d119      	bne.n	8004c06 <HAL_SPI_TransmitReceive+0x2ae>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d014      	beq.n	8004c06 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68da      	ldr	r2, [r3, #12]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be6:	b2d2      	uxtb	r2, r2
 8004be8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bee:	1c5a      	adds	r2, r3, #1
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	3b01      	subs	r3, #1
 8004bfc:	b29a      	uxth	r2, r3
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c02:	2301      	movs	r3, #1
 8004c04:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004c06:	f7fe f9c9 	bl	8002f9c <HAL_GetTick>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d803      	bhi.n	8004c1e <HAL_SPI_TransmitReceive+0x2c6>
 8004c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c1c:	d102      	bne.n	8004c24 <HAL_SPI_TransmitReceive+0x2cc>
 8004c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d103      	bne.n	8004c2c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004c2a:	e029      	b.n	8004c80 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d1a2      	bne.n	8004b7c <HAL_SPI_TransmitReceive+0x224>
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d19d      	bne.n	8004b7c <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c42:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004c44:	68f8      	ldr	r0, [r7, #12]
 8004c46:	f000 f8b1 	bl	8004dac <SPI_EndRxTxTransaction>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d006      	beq.n	8004c5e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2220      	movs	r2, #32
 8004c5a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004c5c:	e010      	b.n	8004c80 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d10b      	bne.n	8004c7e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c66:	2300      	movs	r3, #0
 8004c68:	617b      	str	r3, [r7, #20]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	617b      	str	r3, [r7, #20]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	617b      	str	r3, [r7, #20]
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	e000      	b.n	8004c80 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004c7e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004c90:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3730      	adds	r7, #48	; 0x30
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b088      	sub	sp, #32
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	603b      	str	r3, [r7, #0]
 8004ca8:	4613      	mov	r3, r2
 8004caa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004cac:	f7fe f976 	bl	8002f9c <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb4:	1a9b      	subs	r3, r3, r2
 8004cb6:	683a      	ldr	r2, [r7, #0]
 8004cb8:	4413      	add	r3, r2
 8004cba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004cbc:	f7fe f96e 	bl	8002f9c <HAL_GetTick>
 8004cc0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004cc2:	4b39      	ldr	r3, [pc, #228]	; (8004da8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	015b      	lsls	r3, r3, #5
 8004cc8:	0d1b      	lsrs	r3, r3, #20
 8004cca:	69fa      	ldr	r2, [r7, #28]
 8004ccc:	fb02 f303 	mul.w	r3, r2, r3
 8004cd0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004cd2:	e054      	b.n	8004d7e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cda:	d050      	beq.n	8004d7e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004cdc:	f7fe f95e 	bl	8002f9c <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	69fa      	ldr	r2, [r7, #28]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d902      	bls.n	8004cf2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d13d      	bne.n	8004d6e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	685a      	ldr	r2, [r3, #4]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d00:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d0a:	d111      	bne.n	8004d30 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d14:	d004      	beq.n	8004d20 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d1e:	d107      	bne.n	8004d30 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d2e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d38:	d10f      	bne.n	8004d5a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d48:	601a      	str	r2, [r3, #0]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d58:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2200      	movs	r2, #0
 8004d66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e017      	b.n	8004d9e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d101      	bne.n	8004d78 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004d74:	2300      	movs	r3, #0
 8004d76:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	689a      	ldr	r2, [r3, #8]
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	4013      	ands	r3, r2
 8004d88:	68ba      	ldr	r2, [r7, #8]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	bf0c      	ite	eq
 8004d8e:	2301      	moveq	r3, #1
 8004d90:	2300      	movne	r3, #0
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	461a      	mov	r2, r3
 8004d96:	79fb      	ldrb	r3, [r7, #7]
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d19b      	bne.n	8004cd4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3720      	adds	r7, #32
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	2000000c 	.word	0x2000000c

08004dac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b086      	sub	sp, #24
 8004db0:	af02      	add	r7, sp, #8
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	9300      	str	r3, [sp, #0]
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	2180      	movs	r1, #128	; 0x80
 8004dc2:	68f8      	ldr	r0, [r7, #12]
 8004dc4:	f7ff ff6a 	bl	8004c9c <SPI_WaitFlagStateUntilTimeout>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d007      	beq.n	8004dde <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dd2:	f043 0220 	orr.w	r2, r3, #32
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e000      	b.n	8004de0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004dde:	2300      	movs	r3, #0
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3710      	adds	r7, #16
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b082      	sub	sp, #8
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d101      	bne.n	8004dfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e041      	b.n	8004e7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d106      	bne.n	8004e14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f7fd fec0 	bl	8002b94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2202      	movs	r2, #2
 8004e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	3304      	adds	r3, #4
 8004e24:	4619      	mov	r1, r3
 8004e26:	4610      	mov	r0, r2
 8004e28:	f000 fa70 	bl	800530c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3708      	adds	r7, #8
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
	...

08004e88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b085      	sub	sp, #20
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d001      	beq.n	8004ea0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e03a      	b.n	8004f16 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2202      	movs	r2, #2
 8004ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	68da      	ldr	r2, [r3, #12]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f042 0201 	orr.w	r2, r2, #1
 8004eb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a18      	ldr	r2, [pc, #96]	; (8004f20 <HAL_TIM_Base_Start_IT+0x98>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d00e      	beq.n	8004ee0 <HAL_TIM_Base_Start_IT+0x58>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eca:	d009      	beq.n	8004ee0 <HAL_TIM_Base_Start_IT+0x58>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a14      	ldr	r2, [pc, #80]	; (8004f24 <HAL_TIM_Base_Start_IT+0x9c>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d004      	beq.n	8004ee0 <HAL_TIM_Base_Start_IT+0x58>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a13      	ldr	r2, [pc, #76]	; (8004f28 <HAL_TIM_Base_Start_IT+0xa0>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d111      	bne.n	8004f04 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	f003 0307 	and.w	r3, r3, #7
 8004eea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2b06      	cmp	r3, #6
 8004ef0:	d010      	beq.n	8004f14 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f042 0201 	orr.w	r2, r2, #1
 8004f00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f02:	e007      	b.n	8004f14 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f042 0201 	orr.w	r2, r2, #1
 8004f12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3714      	adds	r7, #20
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bc80      	pop	{r7}
 8004f1e:	4770      	bx	lr
 8004f20:	40012c00 	.word	0x40012c00
 8004f24:	40000400 	.word	0x40000400
 8004f28:	40000800 	.word	0x40000800

08004f2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b082      	sub	sp, #8
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	f003 0302 	and.w	r3, r3, #2
 8004f3e:	2b02      	cmp	r3, #2
 8004f40:	d122      	bne.n	8004f88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	f003 0302 	and.w	r3, r3, #2
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d11b      	bne.n	8004f88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f06f 0202 	mvn.w	r2, #2
 8004f58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	699b      	ldr	r3, [r3, #24]
 8004f66:	f003 0303 	and.w	r3, r3, #3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d003      	beq.n	8004f76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 f9b1 	bl	80052d6 <HAL_TIM_IC_CaptureCallback>
 8004f74:	e005      	b.n	8004f82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 f9a4 	bl	80052c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f000 f9b3 	bl	80052e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	f003 0304 	and.w	r3, r3, #4
 8004f92:	2b04      	cmp	r3, #4
 8004f94:	d122      	bne.n	8004fdc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	f003 0304 	and.w	r3, r3, #4
 8004fa0:	2b04      	cmp	r3, #4
 8004fa2:	d11b      	bne.n	8004fdc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f06f 0204 	mvn.w	r2, #4
 8004fac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2202      	movs	r2, #2
 8004fb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	699b      	ldr	r3, [r3, #24]
 8004fba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d003      	beq.n	8004fca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 f987 	bl	80052d6 <HAL_TIM_IC_CaptureCallback>
 8004fc8:	e005      	b.n	8004fd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 f97a 	bl	80052c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 f989 	bl	80052e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	f003 0308 	and.w	r3, r3, #8
 8004fe6:	2b08      	cmp	r3, #8
 8004fe8:	d122      	bne.n	8005030 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	f003 0308 	and.w	r3, r3, #8
 8004ff4:	2b08      	cmp	r3, #8
 8004ff6:	d11b      	bne.n	8005030 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f06f 0208 	mvn.w	r2, #8
 8005000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2204      	movs	r2, #4
 8005006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	69db      	ldr	r3, [r3, #28]
 800500e:	f003 0303 	and.w	r3, r3, #3
 8005012:	2b00      	cmp	r3, #0
 8005014:	d003      	beq.n	800501e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f95d 	bl	80052d6 <HAL_TIM_IC_CaptureCallback>
 800501c:	e005      	b.n	800502a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 f950 	bl	80052c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 f95f 	bl	80052e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	f003 0310 	and.w	r3, r3, #16
 800503a:	2b10      	cmp	r3, #16
 800503c:	d122      	bne.n	8005084 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	f003 0310 	and.w	r3, r3, #16
 8005048:	2b10      	cmp	r3, #16
 800504a:	d11b      	bne.n	8005084 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f06f 0210 	mvn.w	r2, #16
 8005054:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2208      	movs	r2, #8
 800505a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	69db      	ldr	r3, [r3, #28]
 8005062:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005066:	2b00      	cmp	r3, #0
 8005068:	d003      	beq.n	8005072 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 f933 	bl	80052d6 <HAL_TIM_IC_CaptureCallback>
 8005070:	e005      	b.n	800507e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 f926 	bl	80052c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f000 f935 	bl	80052e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	f003 0301 	and.w	r3, r3, #1
 800508e:	2b01      	cmp	r3, #1
 8005090:	d10e      	bne.n	80050b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	f003 0301 	and.w	r3, r3, #1
 800509c:	2b01      	cmp	r3, #1
 800509e:	d107      	bne.n	80050b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f06f 0201 	mvn.w	r2, #1
 80050a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f7fc ff9a 	bl	8001fe4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ba:	2b80      	cmp	r3, #128	; 0x80
 80050bc:	d10e      	bne.n	80050dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050c8:	2b80      	cmp	r3, #128	; 0x80
 80050ca:	d107      	bne.n	80050dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80050d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 fa77 	bl	80055ca <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050e6:	2b40      	cmp	r3, #64	; 0x40
 80050e8:	d10e      	bne.n	8005108 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050f4:	2b40      	cmp	r3, #64	; 0x40
 80050f6:	d107      	bne.n	8005108 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 f8f9 	bl	80052fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	f003 0320 	and.w	r3, r3, #32
 8005112:	2b20      	cmp	r3, #32
 8005114:	d10e      	bne.n	8005134 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	f003 0320 	and.w	r3, r3, #32
 8005120:	2b20      	cmp	r3, #32
 8005122:	d107      	bne.n	8005134 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f06f 0220 	mvn.w	r2, #32
 800512c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 fa42 	bl	80055b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005134:	bf00      	nop
 8005136:	3708      	adds	r7, #8
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}

0800513c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800514c:	2b01      	cmp	r3, #1
 800514e:	d101      	bne.n	8005154 <HAL_TIM_ConfigClockSource+0x18>
 8005150:	2302      	movs	r3, #2
 8005152:	e0b3      	b.n	80052bc <HAL_TIM_ConfigClockSource+0x180>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2202      	movs	r2, #2
 8005160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005172:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800517a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800518c:	d03e      	beq.n	800520c <HAL_TIM_ConfigClockSource+0xd0>
 800518e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005192:	f200 8087 	bhi.w	80052a4 <HAL_TIM_ConfigClockSource+0x168>
 8005196:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800519a:	f000 8085 	beq.w	80052a8 <HAL_TIM_ConfigClockSource+0x16c>
 800519e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051a2:	d87f      	bhi.n	80052a4 <HAL_TIM_ConfigClockSource+0x168>
 80051a4:	2b70      	cmp	r3, #112	; 0x70
 80051a6:	d01a      	beq.n	80051de <HAL_TIM_ConfigClockSource+0xa2>
 80051a8:	2b70      	cmp	r3, #112	; 0x70
 80051aa:	d87b      	bhi.n	80052a4 <HAL_TIM_ConfigClockSource+0x168>
 80051ac:	2b60      	cmp	r3, #96	; 0x60
 80051ae:	d050      	beq.n	8005252 <HAL_TIM_ConfigClockSource+0x116>
 80051b0:	2b60      	cmp	r3, #96	; 0x60
 80051b2:	d877      	bhi.n	80052a4 <HAL_TIM_ConfigClockSource+0x168>
 80051b4:	2b50      	cmp	r3, #80	; 0x50
 80051b6:	d03c      	beq.n	8005232 <HAL_TIM_ConfigClockSource+0xf6>
 80051b8:	2b50      	cmp	r3, #80	; 0x50
 80051ba:	d873      	bhi.n	80052a4 <HAL_TIM_ConfigClockSource+0x168>
 80051bc:	2b40      	cmp	r3, #64	; 0x40
 80051be:	d058      	beq.n	8005272 <HAL_TIM_ConfigClockSource+0x136>
 80051c0:	2b40      	cmp	r3, #64	; 0x40
 80051c2:	d86f      	bhi.n	80052a4 <HAL_TIM_ConfigClockSource+0x168>
 80051c4:	2b30      	cmp	r3, #48	; 0x30
 80051c6:	d064      	beq.n	8005292 <HAL_TIM_ConfigClockSource+0x156>
 80051c8:	2b30      	cmp	r3, #48	; 0x30
 80051ca:	d86b      	bhi.n	80052a4 <HAL_TIM_ConfigClockSource+0x168>
 80051cc:	2b20      	cmp	r3, #32
 80051ce:	d060      	beq.n	8005292 <HAL_TIM_ConfigClockSource+0x156>
 80051d0:	2b20      	cmp	r3, #32
 80051d2:	d867      	bhi.n	80052a4 <HAL_TIM_ConfigClockSource+0x168>
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d05c      	beq.n	8005292 <HAL_TIM_ConfigClockSource+0x156>
 80051d8:	2b10      	cmp	r3, #16
 80051da:	d05a      	beq.n	8005292 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80051dc:	e062      	b.n	80052a4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6818      	ldr	r0, [r3, #0]
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	6899      	ldr	r1, [r3, #8]
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	685a      	ldr	r2, [r3, #4]
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	f000 f966 	bl	80054be <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005200:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	609a      	str	r2, [r3, #8]
      break;
 800520a:	e04e      	b.n	80052aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6818      	ldr	r0, [r3, #0]
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	6899      	ldr	r1, [r3, #8]
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	685a      	ldr	r2, [r3, #4]
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	f000 f94f 	bl	80054be <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	689a      	ldr	r2, [r3, #8]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800522e:	609a      	str	r2, [r3, #8]
      break;
 8005230:	e03b      	b.n	80052aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6818      	ldr	r0, [r3, #0]
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	6859      	ldr	r1, [r3, #4]
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	461a      	mov	r2, r3
 8005240:	f000 f8c6 	bl	80053d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2150      	movs	r1, #80	; 0x50
 800524a:	4618      	mov	r0, r3
 800524c:	f000 f91d 	bl	800548a <TIM_ITRx_SetConfig>
      break;
 8005250:	e02b      	b.n	80052aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6818      	ldr	r0, [r3, #0]
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	6859      	ldr	r1, [r3, #4]
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	461a      	mov	r2, r3
 8005260:	f000 f8e4 	bl	800542c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2160      	movs	r1, #96	; 0x60
 800526a:	4618      	mov	r0, r3
 800526c:	f000 f90d 	bl	800548a <TIM_ITRx_SetConfig>
      break;
 8005270:	e01b      	b.n	80052aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6818      	ldr	r0, [r3, #0]
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	6859      	ldr	r1, [r3, #4]
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	461a      	mov	r2, r3
 8005280:	f000 f8a6 	bl	80053d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2140      	movs	r1, #64	; 0x40
 800528a:	4618      	mov	r0, r3
 800528c:	f000 f8fd 	bl	800548a <TIM_ITRx_SetConfig>
      break;
 8005290:	e00b      	b.n	80052aa <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4619      	mov	r1, r3
 800529c:	4610      	mov	r0, r2
 800529e:	f000 f8f4 	bl	800548a <TIM_ITRx_SetConfig>
        break;
 80052a2:	e002      	b.n	80052aa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80052a4:	bf00      	nop
 80052a6:	e000      	b.n	80052aa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80052a8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2201      	movs	r2, #1
 80052ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3710      	adds	r7, #16
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052cc:	bf00      	nop
 80052ce:	370c      	adds	r7, #12
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bc80      	pop	{r7}
 80052d4:	4770      	bx	lr

080052d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052d6:	b480      	push	{r7}
 80052d8:	b083      	sub	sp, #12
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052de:	bf00      	nop
 80052e0:	370c      	adds	r7, #12
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bc80      	pop	{r7}
 80052e6:	4770      	bx	lr

080052e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052f0:	bf00      	nop
 80052f2:	370c      	adds	r7, #12
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bc80      	pop	{r7}
 80052f8:	4770      	bx	lr

080052fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052fa:	b480      	push	{r7}
 80052fc:	b083      	sub	sp, #12
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005302:	bf00      	nop
 8005304:	370c      	adds	r7, #12
 8005306:	46bd      	mov	sp, r7
 8005308:	bc80      	pop	{r7}
 800530a:	4770      	bx	lr

0800530c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800530c:	b480      	push	{r7}
 800530e:	b085      	sub	sp, #20
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a29      	ldr	r2, [pc, #164]	; (80053c4 <TIM_Base_SetConfig+0xb8>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d00b      	beq.n	800533c <TIM_Base_SetConfig+0x30>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800532a:	d007      	beq.n	800533c <TIM_Base_SetConfig+0x30>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a26      	ldr	r2, [pc, #152]	; (80053c8 <TIM_Base_SetConfig+0xbc>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d003      	beq.n	800533c <TIM_Base_SetConfig+0x30>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a25      	ldr	r2, [pc, #148]	; (80053cc <TIM_Base_SetConfig+0xc0>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d108      	bne.n	800534e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005342:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	4313      	orrs	r3, r2
 800534c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a1c      	ldr	r2, [pc, #112]	; (80053c4 <TIM_Base_SetConfig+0xb8>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d00b      	beq.n	800536e <TIM_Base_SetConfig+0x62>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800535c:	d007      	beq.n	800536e <TIM_Base_SetConfig+0x62>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a19      	ldr	r2, [pc, #100]	; (80053c8 <TIM_Base_SetConfig+0xbc>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d003      	beq.n	800536e <TIM_Base_SetConfig+0x62>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a18      	ldr	r2, [pc, #96]	; (80053cc <TIM_Base_SetConfig+0xc0>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d108      	bne.n	8005380 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005374:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	4313      	orrs	r3, r2
 800537e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	695b      	ldr	r3, [r3, #20]
 800538a:	4313      	orrs	r3, r2
 800538c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	689a      	ldr	r2, [r3, #8]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a07      	ldr	r2, [pc, #28]	; (80053c4 <TIM_Base_SetConfig+0xb8>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d103      	bne.n	80053b4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	691a      	ldr	r2, [r3, #16]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	615a      	str	r2, [r3, #20]
}
 80053ba:	bf00      	nop
 80053bc:	3714      	adds	r7, #20
 80053be:	46bd      	mov	sp, r7
 80053c0:	bc80      	pop	{r7}
 80053c2:	4770      	bx	lr
 80053c4:	40012c00 	.word	0x40012c00
 80053c8:	40000400 	.word	0x40000400
 80053cc:	40000800 	.word	0x40000800

080053d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b087      	sub	sp, #28
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6a1b      	ldr	r3, [r3, #32]
 80053e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6a1b      	ldr	r3, [r3, #32]
 80053e6:	f023 0201 	bic.w	r2, r3, #1
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	699b      	ldr	r3, [r3, #24]
 80053f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	011b      	lsls	r3, r3, #4
 8005400:	693a      	ldr	r2, [r7, #16]
 8005402:	4313      	orrs	r3, r2
 8005404:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	f023 030a 	bic.w	r3, r3, #10
 800540c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	4313      	orrs	r3, r2
 8005414:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	693a      	ldr	r2, [r7, #16]
 800541a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	697a      	ldr	r2, [r7, #20]
 8005420:	621a      	str	r2, [r3, #32]
}
 8005422:	bf00      	nop
 8005424:	371c      	adds	r7, #28
 8005426:	46bd      	mov	sp, r7
 8005428:	bc80      	pop	{r7}
 800542a:	4770      	bx	lr

0800542c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800542c:	b480      	push	{r7}
 800542e:	b087      	sub	sp, #28
 8005430:	af00      	add	r7, sp, #0
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6a1b      	ldr	r3, [r3, #32]
 800543c:	f023 0210 	bic.w	r2, r3, #16
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	699b      	ldr	r3, [r3, #24]
 8005448:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6a1b      	ldr	r3, [r3, #32]
 800544e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005456:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	031b      	lsls	r3, r3, #12
 800545c:	697a      	ldr	r2, [r7, #20]
 800545e:	4313      	orrs	r3, r2
 8005460:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005468:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	011b      	lsls	r3, r3, #4
 800546e:	693a      	ldr	r2, [r7, #16]
 8005470:	4313      	orrs	r3, r2
 8005472:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	697a      	ldr	r2, [r7, #20]
 8005478:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	693a      	ldr	r2, [r7, #16]
 800547e:	621a      	str	r2, [r3, #32]
}
 8005480:	bf00      	nop
 8005482:	371c      	adds	r7, #28
 8005484:	46bd      	mov	sp, r7
 8005486:	bc80      	pop	{r7}
 8005488:	4770      	bx	lr

0800548a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800548a:	b480      	push	{r7}
 800548c:	b085      	sub	sp, #20
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
 8005492:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054a2:	683a      	ldr	r2, [r7, #0]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	f043 0307 	orr.w	r3, r3, #7
 80054ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	68fa      	ldr	r2, [r7, #12]
 80054b2:	609a      	str	r2, [r3, #8]
}
 80054b4:	bf00      	nop
 80054b6:	3714      	adds	r7, #20
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bc80      	pop	{r7}
 80054bc:	4770      	bx	lr

080054be <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054be:	b480      	push	{r7}
 80054c0:	b087      	sub	sp, #28
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	60f8      	str	r0, [r7, #12]
 80054c6:	60b9      	str	r1, [r7, #8]
 80054c8:	607a      	str	r2, [r7, #4]
 80054ca:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054d8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	021a      	lsls	r2, r3, #8
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	431a      	orrs	r2, r3
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	4313      	orrs	r3, r2
 80054e6:	697a      	ldr	r2, [r7, #20]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	697a      	ldr	r2, [r7, #20]
 80054f0:	609a      	str	r2, [r3, #8]
}
 80054f2:	bf00      	nop
 80054f4:	371c      	adds	r7, #28
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bc80      	pop	{r7}
 80054fa:	4770      	bx	lr

080054fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b085      	sub	sp, #20
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800550c:	2b01      	cmp	r3, #1
 800550e:	d101      	bne.n	8005514 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005510:	2302      	movs	r3, #2
 8005512:	e046      	b.n	80055a2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2202      	movs	r2, #2
 8005520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800553a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	4313      	orrs	r3, r2
 8005544:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68fa      	ldr	r2, [r7, #12]
 800554c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a16      	ldr	r2, [pc, #88]	; (80055ac <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d00e      	beq.n	8005576 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005560:	d009      	beq.n	8005576 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a12      	ldr	r2, [pc, #72]	; (80055b0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d004      	beq.n	8005576 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a10      	ldr	r2, [pc, #64]	; (80055b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d10c      	bne.n	8005590 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800557c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	68ba      	ldr	r2, [r7, #8]
 8005584:	4313      	orrs	r3, r2
 8005586:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68ba      	ldr	r2, [r7, #8]
 800558e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055a0:	2300      	movs	r3, #0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3714      	adds	r7, #20
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bc80      	pop	{r7}
 80055aa:	4770      	bx	lr
 80055ac:	40012c00 	.word	0x40012c00
 80055b0:	40000400 	.word	0x40000400
 80055b4:	40000800 	.word	0x40000800

080055b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055c0:	bf00      	nop
 80055c2:	370c      	adds	r7, #12
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bc80      	pop	{r7}
 80055c8:	4770      	bx	lr

080055ca <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055ca:	b480      	push	{r7}
 80055cc:	b083      	sub	sp, #12
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055d2:	bf00      	nop
 80055d4:	370c      	adds	r7, #12
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bc80      	pop	{r7}
 80055da:	4770      	bx	lr

080055dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b082      	sub	sp, #8
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d101      	bne.n	80055ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e03f      	b.n	800566e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d106      	bne.n	8005608 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f7fd faec 	bl	8002be0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2224      	movs	r2, #36	; 0x24
 800560c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68da      	ldr	r2, [r3, #12]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800561e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f000 fc85 	bl	8005f30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	691a      	ldr	r2, [r3, #16]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005634:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	695a      	ldr	r2, [r3, #20]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005644:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68da      	ldr	r2, [r3, #12]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005654:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2220      	movs	r2, #32
 8005660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2220      	movs	r2, #32
 8005668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	3708      	adds	r7, #8
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}

08005676 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005676:	b580      	push	{r7, lr}
 8005678:	b08a      	sub	sp, #40	; 0x28
 800567a:	af02      	add	r7, sp, #8
 800567c:	60f8      	str	r0, [r7, #12]
 800567e:	60b9      	str	r1, [r7, #8]
 8005680:	603b      	str	r3, [r7, #0]
 8005682:	4613      	mov	r3, r2
 8005684:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005686:	2300      	movs	r3, #0
 8005688:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005690:	b2db      	uxtb	r3, r3
 8005692:	2b20      	cmp	r3, #32
 8005694:	d17c      	bne.n	8005790 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d002      	beq.n	80056a2 <HAL_UART_Transmit+0x2c>
 800569c:	88fb      	ldrh	r3, [r7, #6]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d101      	bne.n	80056a6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e075      	b.n	8005792 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d101      	bne.n	80056b4 <HAL_UART_Transmit+0x3e>
 80056b0:	2302      	movs	r3, #2
 80056b2:	e06e      	b.n	8005792 <HAL_UART_Transmit+0x11c>
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2200      	movs	r2, #0
 80056c0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2221      	movs	r2, #33	; 0x21
 80056c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056ca:	f7fd fc67 	bl	8002f9c <HAL_GetTick>
 80056ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	88fa      	ldrh	r2, [r7, #6]
 80056d4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	88fa      	ldrh	r2, [r7, #6]
 80056da:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056e4:	d108      	bne.n	80056f8 <HAL_UART_Transmit+0x82>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d104      	bne.n	80056f8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80056ee:	2300      	movs	r3, #0
 80056f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	61bb      	str	r3, [r7, #24]
 80056f6:	e003      	b.n	8005700 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056fc:	2300      	movs	r3, #0
 80056fe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2200      	movs	r2, #0
 8005704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005708:	e02a      	b.n	8005760 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	9300      	str	r3, [sp, #0]
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	2200      	movs	r2, #0
 8005712:	2180      	movs	r1, #128	; 0x80
 8005714:	68f8      	ldr	r0, [r7, #12]
 8005716:	f000 fa38 	bl	8005b8a <UART_WaitOnFlagUntilTimeout>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d001      	beq.n	8005724 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005720:	2303      	movs	r3, #3
 8005722:	e036      	b.n	8005792 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d10b      	bne.n	8005742 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	881b      	ldrh	r3, [r3, #0]
 800572e:	461a      	mov	r2, r3
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005738:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	3302      	adds	r3, #2
 800573e:	61bb      	str	r3, [r7, #24]
 8005740:	e007      	b.n	8005752 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	781a      	ldrb	r2, [r3, #0]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	3301      	adds	r3, #1
 8005750:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005756:	b29b      	uxth	r3, r3
 8005758:	3b01      	subs	r3, #1
 800575a:	b29a      	uxth	r2, r3
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005764:	b29b      	uxth	r3, r3
 8005766:	2b00      	cmp	r3, #0
 8005768:	d1cf      	bne.n	800570a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	9300      	str	r3, [sp, #0]
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	2200      	movs	r2, #0
 8005772:	2140      	movs	r1, #64	; 0x40
 8005774:	68f8      	ldr	r0, [r7, #12]
 8005776:	f000 fa08 	bl	8005b8a <UART_WaitOnFlagUntilTimeout>
 800577a:	4603      	mov	r3, r0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d001      	beq.n	8005784 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005780:	2303      	movs	r3, #3
 8005782:	e006      	b.n	8005792 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2220      	movs	r2, #32
 8005788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800578c:	2300      	movs	r3, #0
 800578e:	e000      	b.n	8005792 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005790:	2302      	movs	r3, #2
  }
}
 8005792:	4618      	mov	r0, r3
 8005794:	3720      	adds	r7, #32
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}

0800579a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800579a:	b580      	push	{r7, lr}
 800579c:	b084      	sub	sp, #16
 800579e:	af00      	add	r7, sp, #0
 80057a0:	60f8      	str	r0, [r7, #12]
 80057a2:	60b9      	str	r1, [r7, #8]
 80057a4:	4613      	mov	r3, r2
 80057a6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	2b20      	cmp	r3, #32
 80057b2:	d11d      	bne.n	80057f0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d002      	beq.n	80057c0 <HAL_UART_Receive_IT+0x26>
 80057ba:	88fb      	ldrh	r3, [r7, #6]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d101      	bne.n	80057c4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	e016      	b.n	80057f2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d101      	bne.n	80057d2 <HAL_UART_Receive_IT+0x38>
 80057ce:	2302      	movs	r3, #2
 80057d0:	e00f      	b.n	80057f2 <HAL_UART_Receive_IT+0x58>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2201      	movs	r2, #1
 80057d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80057e0:	88fb      	ldrh	r3, [r7, #6]
 80057e2:	461a      	mov	r2, r3
 80057e4:	68b9      	ldr	r1, [r7, #8]
 80057e6:	68f8      	ldr	r0, [r7, #12]
 80057e8:	f000 fa19 	bl	8005c1e <UART_Start_Receive_IT>
 80057ec:	4603      	mov	r3, r0
 80057ee:	e000      	b.n	80057f2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80057f0:	2302      	movs	r3, #2
  }
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3710      	adds	r7, #16
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
	...

080057fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b08a      	sub	sp, #40	; 0x28
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	695b      	ldr	r3, [r3, #20]
 800581a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800581c:	2300      	movs	r3, #0
 800581e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005820:	2300      	movs	r3, #0
 8005822:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005826:	f003 030f 	and.w	r3, r3, #15
 800582a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800582c:	69bb      	ldr	r3, [r7, #24]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d10d      	bne.n	800584e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005834:	f003 0320 	and.w	r3, r3, #32
 8005838:	2b00      	cmp	r3, #0
 800583a:	d008      	beq.n	800584e <HAL_UART_IRQHandler+0x52>
 800583c:	6a3b      	ldr	r3, [r7, #32]
 800583e:	f003 0320 	and.w	r3, r3, #32
 8005842:	2b00      	cmp	r3, #0
 8005844:	d003      	beq.n	800584e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 fac9 	bl	8005dde <UART_Receive_IT>
      return;
 800584c:	e17b      	b.n	8005b46 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	2b00      	cmp	r3, #0
 8005852:	f000 80b1 	beq.w	80059b8 <HAL_UART_IRQHandler+0x1bc>
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	f003 0301 	and.w	r3, r3, #1
 800585c:	2b00      	cmp	r3, #0
 800585e:	d105      	bne.n	800586c <HAL_UART_IRQHandler+0x70>
 8005860:	6a3b      	ldr	r3, [r7, #32]
 8005862:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005866:	2b00      	cmp	r3, #0
 8005868:	f000 80a6 	beq.w	80059b8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800586c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586e:	f003 0301 	and.w	r3, r3, #1
 8005872:	2b00      	cmp	r3, #0
 8005874:	d00a      	beq.n	800588c <HAL_UART_IRQHandler+0x90>
 8005876:	6a3b      	ldr	r3, [r7, #32]
 8005878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800587c:	2b00      	cmp	r3, #0
 800587e:	d005      	beq.n	800588c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005884:	f043 0201 	orr.w	r2, r3, #1
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800588c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588e:	f003 0304 	and.w	r3, r3, #4
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00a      	beq.n	80058ac <HAL_UART_IRQHandler+0xb0>
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	f003 0301 	and.w	r3, r3, #1
 800589c:	2b00      	cmp	r3, #0
 800589e:	d005      	beq.n	80058ac <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a4:	f043 0202 	orr.w	r2, r3, #2
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80058ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ae:	f003 0302 	and.w	r3, r3, #2
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d00a      	beq.n	80058cc <HAL_UART_IRQHandler+0xd0>
 80058b6:	69fb      	ldr	r3, [r7, #28]
 80058b8:	f003 0301 	and.w	r3, r3, #1
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d005      	beq.n	80058cc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c4:	f043 0204 	orr.w	r2, r3, #4
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80058cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ce:	f003 0308 	and.w	r3, r3, #8
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d00f      	beq.n	80058f6 <HAL_UART_IRQHandler+0xfa>
 80058d6:	6a3b      	ldr	r3, [r7, #32]
 80058d8:	f003 0320 	and.w	r3, r3, #32
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d104      	bne.n	80058ea <HAL_UART_IRQHandler+0xee>
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	f003 0301 	and.w	r3, r3, #1
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d005      	beq.n	80058f6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ee:	f043 0208 	orr.w	r2, r3, #8
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	f000 811e 	beq.w	8005b3c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005902:	f003 0320 	and.w	r3, r3, #32
 8005906:	2b00      	cmp	r3, #0
 8005908:	d007      	beq.n	800591a <HAL_UART_IRQHandler+0x11e>
 800590a:	6a3b      	ldr	r3, [r7, #32]
 800590c:	f003 0320 	and.w	r3, r3, #32
 8005910:	2b00      	cmp	r3, #0
 8005912:	d002      	beq.n	800591a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f000 fa62 	bl	8005dde <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	695b      	ldr	r3, [r3, #20]
 8005920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005924:	2b00      	cmp	r3, #0
 8005926:	bf14      	ite	ne
 8005928:	2301      	movne	r3, #1
 800592a:	2300      	moveq	r3, #0
 800592c:	b2db      	uxtb	r3, r3
 800592e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005934:	f003 0308 	and.w	r3, r3, #8
 8005938:	2b00      	cmp	r3, #0
 800593a:	d102      	bne.n	8005942 <HAL_UART_IRQHandler+0x146>
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d031      	beq.n	80059a6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 f9a4 	bl	8005c90 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	695b      	ldr	r3, [r3, #20]
 800594e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005952:	2b00      	cmp	r3, #0
 8005954:	d023      	beq.n	800599e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	695a      	ldr	r2, [r3, #20]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005964:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800596a:	2b00      	cmp	r3, #0
 800596c:	d013      	beq.n	8005996 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005972:	4a76      	ldr	r2, [pc, #472]	; (8005b4c <HAL_UART_IRQHandler+0x350>)
 8005974:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800597a:	4618      	mov	r0, r3
 800597c:	f7fe f886 	bl	8003a8c <HAL_DMA_Abort_IT>
 8005980:	4603      	mov	r3, r0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d016      	beq.n	80059b4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800598a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005990:	4610      	mov	r0, r2
 8005992:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005994:	e00e      	b.n	80059b4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 f8e3 	bl	8005b62 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800599c:	e00a      	b.n	80059b4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 f8df 	bl	8005b62 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059a4:	e006      	b.n	80059b4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f000 f8db 	bl	8005b62 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80059b2:	e0c3      	b.n	8005b3c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059b4:	bf00      	nop
    return;
 80059b6:	e0c1      	b.n	8005b3c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059bc:	2b01      	cmp	r3, #1
 80059be:	f040 80a1 	bne.w	8005b04 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80059c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c4:	f003 0310 	and.w	r3, r3, #16
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	f000 809b 	beq.w	8005b04 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80059ce:	6a3b      	ldr	r3, [r7, #32]
 80059d0:	f003 0310 	and.w	r3, r3, #16
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	f000 8095 	beq.w	8005b04 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80059da:	2300      	movs	r3, #0
 80059dc:	60fb      	str	r3, [r7, #12]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	60fb      	str	r3, [r7, #12]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	60fb      	str	r3, [r7, #12]
 80059ee:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	695b      	ldr	r3, [r3, #20]
 80059f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d04e      	beq.n	8005a9c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005a08:	8a3b      	ldrh	r3, [r7, #16]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	f000 8098 	beq.w	8005b40 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005a14:	8a3a      	ldrh	r2, [r7, #16]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	f080 8092 	bcs.w	8005b40 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	8a3a      	ldrh	r2, [r7, #16]
 8005a20:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a26:	699b      	ldr	r3, [r3, #24]
 8005a28:	2b20      	cmp	r3, #32
 8005a2a:	d02b      	beq.n	8005a84 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	68da      	ldr	r2, [r3, #12]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a3a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	695a      	ldr	r2, [r3, #20]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f022 0201 	bic.w	r2, r2, #1
 8005a4a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	695a      	ldr	r2, [r3, #20]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a5a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2220      	movs	r2, #32
 8005a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	68da      	ldr	r2, [r3, #12]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f022 0210 	bic.w	r2, r2, #16
 8005a78:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f7fd ffc9 	bl	8003a16 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	1ad3      	subs	r3, r2, r3
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	4619      	mov	r1, r3
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f000 f86d 	bl	8005b74 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005a9a:	e051      	b.n	8005b40 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	1ad3      	subs	r3, r2, r3
 8005aa8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d047      	beq.n	8005b44 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8005ab4:	8a7b      	ldrh	r3, [r7, #18]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d044      	beq.n	8005b44 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	68da      	ldr	r2, [r3, #12]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005ac8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	695a      	ldr	r2, [r3, #20]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f022 0201 	bic.w	r2, r2, #1
 8005ad8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2220      	movs	r2, #32
 8005ade:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	68da      	ldr	r2, [r3, #12]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f022 0210 	bic.w	r2, r2, #16
 8005af6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005af8:	8a7b      	ldrh	r3, [r7, #18]
 8005afa:	4619      	mov	r1, r3
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f000 f839 	bl	8005b74 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005b02:	e01f      	b.n	8005b44 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d008      	beq.n	8005b20 <HAL_UART_IRQHandler+0x324>
 8005b0e:	6a3b      	ldr	r3, [r7, #32]
 8005b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d003      	beq.n	8005b20 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f000 f8f9 	bl	8005d10 <UART_Transmit_IT>
    return;
 8005b1e:	e012      	b.n	8005b46 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d00d      	beq.n	8005b46 <HAL_UART_IRQHandler+0x34a>
 8005b2a:	6a3b      	ldr	r3, [r7, #32]
 8005b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d008      	beq.n	8005b46 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 f93a 	bl	8005dae <UART_EndTransmit_IT>
    return;
 8005b3a:	e004      	b.n	8005b46 <HAL_UART_IRQHandler+0x34a>
    return;
 8005b3c:	bf00      	nop
 8005b3e:	e002      	b.n	8005b46 <HAL_UART_IRQHandler+0x34a>
      return;
 8005b40:	bf00      	nop
 8005b42:	e000      	b.n	8005b46 <HAL_UART_IRQHandler+0x34a>
      return;
 8005b44:	bf00      	nop
  }
}
 8005b46:	3728      	adds	r7, #40	; 0x28
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	08005ce9 	.word	0x08005ce9

08005b50 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005b58:	bf00      	nop
 8005b5a:	370c      	adds	r7, #12
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bc80      	pop	{r7}
 8005b60:	4770      	bx	lr

08005b62 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b62:	b480      	push	{r7}
 8005b64:	b083      	sub	sp, #12
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005b6a:	bf00      	nop
 8005b6c:	370c      	adds	r7, #12
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bc80      	pop	{r7}
 8005b72:	4770      	bx	lr

08005b74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b083      	sub	sp, #12
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	460b      	mov	r3, r1
 8005b7e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b80:	bf00      	nop
 8005b82:	370c      	adds	r7, #12
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bc80      	pop	{r7}
 8005b88:	4770      	bx	lr

08005b8a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005b8a:	b580      	push	{r7, lr}
 8005b8c:	b084      	sub	sp, #16
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	60f8      	str	r0, [r7, #12]
 8005b92:	60b9      	str	r1, [r7, #8]
 8005b94:	603b      	str	r3, [r7, #0]
 8005b96:	4613      	mov	r3, r2
 8005b98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b9a:	e02c      	b.n	8005bf6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b9c:	69bb      	ldr	r3, [r7, #24]
 8005b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ba2:	d028      	beq.n	8005bf6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d007      	beq.n	8005bba <UART_WaitOnFlagUntilTimeout+0x30>
 8005baa:	f7fd f9f7 	bl	8002f9c <HAL_GetTick>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	1ad3      	subs	r3, r2, r3
 8005bb4:	69ba      	ldr	r2, [r7, #24]
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d21d      	bcs.n	8005bf6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68da      	ldr	r2, [r3, #12]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005bc8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	695a      	ldr	r2, [r3, #20]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f022 0201 	bic.w	r2, r2, #1
 8005bd8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2220      	movs	r2, #32
 8005bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2220      	movs	r2, #32
 8005be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005bf2:	2303      	movs	r3, #3
 8005bf4:	e00f      	b.n	8005c16 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	4013      	ands	r3, r2
 8005c00:	68ba      	ldr	r2, [r7, #8]
 8005c02:	429a      	cmp	r2, r3
 8005c04:	bf0c      	ite	eq
 8005c06:	2301      	moveq	r3, #1
 8005c08:	2300      	movne	r3, #0
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	79fb      	ldrb	r3, [r7, #7]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d0c3      	beq.n	8005b9c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c14:	2300      	movs	r3, #0
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3710      	adds	r7, #16
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}

08005c1e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c1e:	b480      	push	{r7}
 8005c20:	b085      	sub	sp, #20
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	60f8      	str	r0, [r7, #12]
 8005c26:	60b9      	str	r1, [r7, #8]
 8005c28:	4613      	mov	r3, r2
 8005c2a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	68ba      	ldr	r2, [r7, #8]
 8005c30:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	88fa      	ldrh	r2, [r7, #6]
 8005c36:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	88fa      	ldrh	r2, [r7, #6]
 8005c3c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2200      	movs	r2, #0
 8005c42:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2222      	movs	r2, #34	; 0x22
 8005c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68da      	ldr	r2, [r3, #12]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c62:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	695a      	ldr	r2, [r3, #20]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f042 0201 	orr.w	r2, r2, #1
 8005c72:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68da      	ldr	r2, [r3, #12]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f042 0220 	orr.w	r2, r2, #32
 8005c82:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3714      	adds	r7, #20
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bc80      	pop	{r7}
 8005c8e:	4770      	bx	lr

08005c90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68da      	ldr	r2, [r3, #12]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005ca6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	695a      	ldr	r2, [r3, #20]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f022 0201 	bic.w	r2, r2, #1
 8005cb6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d107      	bne.n	8005cd0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	68da      	ldr	r2, [r3, #12]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f022 0210 	bic.w	r2, r2, #16
 8005cce:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2220      	movs	r2, #32
 8005cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005cde:	bf00      	nop
 8005ce0:	370c      	adds	r7, #12
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bc80      	pop	{r7}
 8005ce6:	4770      	bx	lr

08005ce8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d02:	68f8      	ldr	r0, [r7, #12]
 8005d04:	f7ff ff2d 	bl	8005b62 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d08:	bf00      	nop
 8005d0a:	3710      	adds	r7, #16
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b085      	sub	sp, #20
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	2b21      	cmp	r3, #33	; 0x21
 8005d22:	d13e      	bne.n	8005da2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d2c:	d114      	bne.n	8005d58 <UART_Transmit_IT+0x48>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	691b      	ldr	r3, [r3, #16]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d110      	bne.n	8005d58 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a1b      	ldr	r3, [r3, #32]
 8005d3a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	881b      	ldrh	r3, [r3, #0]
 8005d40:	461a      	mov	r2, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d4a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6a1b      	ldr	r3, [r3, #32]
 8005d50:	1c9a      	adds	r2, r3, #2
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	621a      	str	r2, [r3, #32]
 8005d56:	e008      	b.n	8005d6a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6a1b      	ldr	r3, [r3, #32]
 8005d5c:	1c59      	adds	r1, r3, #1
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	6211      	str	r1, [r2, #32]
 8005d62:	781a      	ldrb	r2, [r3, #0]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	3b01      	subs	r3, #1
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	4619      	mov	r1, r3
 8005d78:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d10f      	bne.n	8005d9e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68da      	ldr	r2, [r3, #12]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d8c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	68da      	ldr	r2, [r3, #12]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d9c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	e000      	b.n	8005da4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005da2:	2302      	movs	r3, #2
  }
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3714      	adds	r7, #20
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bc80      	pop	{r7}
 8005dac:	4770      	bx	lr

08005dae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005dae:	b580      	push	{r7, lr}
 8005db0:	b082      	sub	sp, #8
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68da      	ldr	r2, [r3, #12]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dc4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2220      	movs	r2, #32
 8005dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f7ff febe 	bl	8005b50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3708      	adds	r7, #8
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}

08005dde <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005dde:	b580      	push	{r7, lr}
 8005de0:	b086      	sub	sp, #24
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	2b22      	cmp	r3, #34	; 0x22
 8005df0:	f040 8099 	bne.w	8005f26 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dfc:	d117      	bne.n	8005e2e <UART_Receive_IT+0x50>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d113      	bne.n	8005e2e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005e06:	2300      	movs	r3, #0
 8005e08:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e0e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e1c:	b29a      	uxth	r2, r3
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e26:	1c9a      	adds	r2, r3, #2
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	629a      	str	r2, [r3, #40]	; 0x28
 8005e2c:	e026      	b.n	8005e7c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e32:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8005e34:	2300      	movs	r3, #0
 8005e36:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e40:	d007      	beq.n	8005e52 <UART_Receive_IT+0x74>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d10a      	bne.n	8005e60 <UART_Receive_IT+0x82>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d106      	bne.n	8005e60 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	b2da      	uxtb	r2, r3
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	701a      	strb	r2, [r3, #0]
 8005e5e:	e008      	b.n	8005e72 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e6c:	b2da      	uxtb	r2, r3
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e76:	1c5a      	adds	r2, r3, #1
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	3b01      	subs	r3, #1
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	4619      	mov	r1, r3
 8005e8a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d148      	bne.n	8005f22 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	68da      	ldr	r2, [r3, #12]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f022 0220 	bic.w	r2, r2, #32
 8005e9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68da      	ldr	r2, [r3, #12]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005eae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	695a      	ldr	r2, [r3, #20]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f022 0201 	bic.w	r2, r2, #1
 8005ebe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2220      	movs	r2, #32
 8005ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d123      	bne.n	8005f18 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	68da      	ldr	r2, [r3, #12]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f022 0210 	bic.w	r2, r2, #16
 8005ee4:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 0310 	and.w	r3, r3, #16
 8005ef0:	2b10      	cmp	r3, #16
 8005ef2:	d10a      	bne.n	8005f0a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	60fb      	str	r3, [r7, #12]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	60fb      	str	r3, [r7, #12]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	60fb      	str	r3, [r7, #12]
 8005f08:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f0e:	4619      	mov	r1, r3
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f7ff fe2f 	bl	8005b74 <HAL_UARTEx_RxEventCallback>
 8005f16:	e002      	b.n	8005f1e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f7fc f8c7 	bl	80020ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	e002      	b.n	8005f28 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8005f22:	2300      	movs	r3, #0
 8005f24:	e000      	b.n	8005f28 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005f26:	2302      	movs	r3, #2
  }
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3718      	adds	r7, #24
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b084      	sub	sp, #16
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	691b      	ldr	r3, [r3, #16]
 8005f3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	68da      	ldr	r2, [r3, #12]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	430a      	orrs	r2, r1
 8005f4c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	689a      	ldr	r2, [r3, #8]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	431a      	orrs	r2, r3
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	695b      	ldr	r3, [r3, #20]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	68db      	ldr	r3, [r3, #12]
 8005f66:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005f6a:	f023 030c 	bic.w	r3, r3, #12
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	6812      	ldr	r2, [r2, #0]
 8005f72:	68b9      	ldr	r1, [r7, #8]
 8005f74:	430b      	orrs	r3, r1
 8005f76:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	695b      	ldr	r3, [r3, #20]
 8005f7e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	699a      	ldr	r2, [r3, #24]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	430a      	orrs	r2, r1
 8005f8c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a2c      	ldr	r2, [pc, #176]	; (8006044 <UART_SetConfig+0x114>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d103      	bne.n	8005fa0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005f98:	f7fe fb72 	bl	8004680 <HAL_RCC_GetPCLK2Freq>
 8005f9c:	60f8      	str	r0, [r7, #12]
 8005f9e:	e002      	b.n	8005fa6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005fa0:	f7fe fb5a 	bl	8004658 <HAL_RCC_GetPCLK1Freq>
 8005fa4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005fa6:	68fa      	ldr	r2, [r7, #12]
 8005fa8:	4613      	mov	r3, r2
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	4413      	add	r3, r2
 8005fae:	009a      	lsls	r2, r3, #2
 8005fb0:	441a      	add	r2, r3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fbc:	4a22      	ldr	r2, [pc, #136]	; (8006048 <UART_SetConfig+0x118>)
 8005fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8005fc2:	095b      	lsrs	r3, r3, #5
 8005fc4:	0119      	lsls	r1, r3, #4
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	4613      	mov	r3, r2
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	4413      	add	r3, r2
 8005fce:	009a      	lsls	r2, r3, #2
 8005fd0:	441a      	add	r2, r3
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8005fdc:	4b1a      	ldr	r3, [pc, #104]	; (8006048 <UART_SetConfig+0x118>)
 8005fde:	fba3 0302 	umull	r0, r3, r3, r2
 8005fe2:	095b      	lsrs	r3, r3, #5
 8005fe4:	2064      	movs	r0, #100	; 0x64
 8005fe6:	fb00 f303 	mul.w	r3, r0, r3
 8005fea:	1ad3      	subs	r3, r2, r3
 8005fec:	011b      	lsls	r3, r3, #4
 8005fee:	3332      	adds	r3, #50	; 0x32
 8005ff0:	4a15      	ldr	r2, [pc, #84]	; (8006048 <UART_SetConfig+0x118>)
 8005ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ff6:	095b      	lsrs	r3, r3, #5
 8005ff8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ffc:	4419      	add	r1, r3
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	4613      	mov	r3, r2
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	4413      	add	r3, r2
 8006006:	009a      	lsls	r2, r3, #2
 8006008:	441a      	add	r2, r3
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	fbb2 f2f3 	udiv	r2, r2, r3
 8006014:	4b0c      	ldr	r3, [pc, #48]	; (8006048 <UART_SetConfig+0x118>)
 8006016:	fba3 0302 	umull	r0, r3, r3, r2
 800601a:	095b      	lsrs	r3, r3, #5
 800601c:	2064      	movs	r0, #100	; 0x64
 800601e:	fb00 f303 	mul.w	r3, r0, r3
 8006022:	1ad3      	subs	r3, r2, r3
 8006024:	011b      	lsls	r3, r3, #4
 8006026:	3332      	adds	r3, #50	; 0x32
 8006028:	4a07      	ldr	r2, [pc, #28]	; (8006048 <UART_SetConfig+0x118>)
 800602a:	fba2 2303 	umull	r2, r3, r2, r3
 800602e:	095b      	lsrs	r3, r3, #5
 8006030:	f003 020f 	and.w	r2, r3, #15
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	440a      	add	r2, r1
 800603a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800603c:	bf00      	nop
 800603e:	3710      	adds	r7, #16
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}
 8006044:	40013800 	.word	0x40013800
 8006048:	51eb851f 	.word	0x51eb851f

0800604c <atoi>:
 800604c:	220a      	movs	r2, #10
 800604e:	2100      	movs	r1, #0
 8006050:	f001 bd28 	b.w	8007aa4 <strtol>

08006054 <__errno>:
 8006054:	4b01      	ldr	r3, [pc, #4]	; (800605c <__errno+0x8>)
 8006056:	6818      	ldr	r0, [r3, #0]
 8006058:	4770      	bx	lr
 800605a:	bf00      	nop
 800605c:	20000018 	.word	0x20000018

08006060 <__libc_init_array>:
 8006060:	b570      	push	{r4, r5, r6, lr}
 8006062:	2600      	movs	r6, #0
 8006064:	4d0c      	ldr	r5, [pc, #48]	; (8006098 <__libc_init_array+0x38>)
 8006066:	4c0d      	ldr	r4, [pc, #52]	; (800609c <__libc_init_array+0x3c>)
 8006068:	1b64      	subs	r4, r4, r5
 800606a:	10a4      	asrs	r4, r4, #2
 800606c:	42a6      	cmp	r6, r4
 800606e:	d109      	bne.n	8006084 <__libc_init_array+0x24>
 8006070:	f004 face 	bl	800a610 <_init>
 8006074:	2600      	movs	r6, #0
 8006076:	4d0a      	ldr	r5, [pc, #40]	; (80060a0 <__libc_init_array+0x40>)
 8006078:	4c0a      	ldr	r4, [pc, #40]	; (80060a4 <__libc_init_array+0x44>)
 800607a:	1b64      	subs	r4, r4, r5
 800607c:	10a4      	asrs	r4, r4, #2
 800607e:	42a6      	cmp	r6, r4
 8006080:	d105      	bne.n	800608e <__libc_init_array+0x2e>
 8006082:	bd70      	pop	{r4, r5, r6, pc}
 8006084:	f855 3b04 	ldr.w	r3, [r5], #4
 8006088:	4798      	blx	r3
 800608a:	3601      	adds	r6, #1
 800608c:	e7ee      	b.n	800606c <__libc_init_array+0xc>
 800608e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006092:	4798      	blx	r3
 8006094:	3601      	adds	r6, #1
 8006096:	e7f2      	b.n	800607e <__libc_init_array+0x1e>
 8006098:	0800abc4 	.word	0x0800abc4
 800609c:	0800abc4 	.word	0x0800abc4
 80060a0:	0800abc4 	.word	0x0800abc4
 80060a4:	0800abc8 	.word	0x0800abc8

080060a8 <malloc>:
 80060a8:	4b02      	ldr	r3, [pc, #8]	; (80060b4 <malloc+0xc>)
 80060aa:	4601      	mov	r1, r0
 80060ac:	6818      	ldr	r0, [r3, #0]
 80060ae:	f000 b86d 	b.w	800618c <_malloc_r>
 80060b2:	bf00      	nop
 80060b4:	20000018 	.word	0x20000018

080060b8 <free>:
 80060b8:	4b02      	ldr	r3, [pc, #8]	; (80060c4 <free+0xc>)
 80060ba:	4601      	mov	r1, r0
 80060bc:	6818      	ldr	r0, [r3, #0]
 80060be:	f000 b819 	b.w	80060f4 <_free_r>
 80060c2:	bf00      	nop
 80060c4:	20000018 	.word	0x20000018

080060c8 <memcpy>:
 80060c8:	440a      	add	r2, r1
 80060ca:	4291      	cmp	r1, r2
 80060cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80060d0:	d100      	bne.n	80060d4 <memcpy+0xc>
 80060d2:	4770      	bx	lr
 80060d4:	b510      	push	{r4, lr}
 80060d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060da:	4291      	cmp	r1, r2
 80060dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060e0:	d1f9      	bne.n	80060d6 <memcpy+0xe>
 80060e2:	bd10      	pop	{r4, pc}

080060e4 <memset>:
 80060e4:	4603      	mov	r3, r0
 80060e6:	4402      	add	r2, r0
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d100      	bne.n	80060ee <memset+0xa>
 80060ec:	4770      	bx	lr
 80060ee:	f803 1b01 	strb.w	r1, [r3], #1
 80060f2:	e7f9      	b.n	80060e8 <memset+0x4>

080060f4 <_free_r>:
 80060f4:	b538      	push	{r3, r4, r5, lr}
 80060f6:	4605      	mov	r5, r0
 80060f8:	2900      	cmp	r1, #0
 80060fa:	d043      	beq.n	8006184 <_free_r+0x90>
 80060fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006100:	1f0c      	subs	r4, r1, #4
 8006102:	2b00      	cmp	r3, #0
 8006104:	bfb8      	it	lt
 8006106:	18e4      	addlt	r4, r4, r3
 8006108:	f003 f9f0 	bl	80094ec <__malloc_lock>
 800610c:	4a1e      	ldr	r2, [pc, #120]	; (8006188 <_free_r+0x94>)
 800610e:	6813      	ldr	r3, [r2, #0]
 8006110:	4610      	mov	r0, r2
 8006112:	b933      	cbnz	r3, 8006122 <_free_r+0x2e>
 8006114:	6063      	str	r3, [r4, #4]
 8006116:	6014      	str	r4, [r2, #0]
 8006118:	4628      	mov	r0, r5
 800611a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800611e:	f003 b9eb 	b.w	80094f8 <__malloc_unlock>
 8006122:	42a3      	cmp	r3, r4
 8006124:	d90a      	bls.n	800613c <_free_r+0x48>
 8006126:	6821      	ldr	r1, [r4, #0]
 8006128:	1862      	adds	r2, r4, r1
 800612a:	4293      	cmp	r3, r2
 800612c:	bf01      	itttt	eq
 800612e:	681a      	ldreq	r2, [r3, #0]
 8006130:	685b      	ldreq	r3, [r3, #4]
 8006132:	1852      	addeq	r2, r2, r1
 8006134:	6022      	streq	r2, [r4, #0]
 8006136:	6063      	str	r3, [r4, #4]
 8006138:	6004      	str	r4, [r0, #0]
 800613a:	e7ed      	b.n	8006118 <_free_r+0x24>
 800613c:	461a      	mov	r2, r3
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	b10b      	cbz	r3, 8006146 <_free_r+0x52>
 8006142:	42a3      	cmp	r3, r4
 8006144:	d9fa      	bls.n	800613c <_free_r+0x48>
 8006146:	6811      	ldr	r1, [r2, #0]
 8006148:	1850      	adds	r0, r2, r1
 800614a:	42a0      	cmp	r0, r4
 800614c:	d10b      	bne.n	8006166 <_free_r+0x72>
 800614e:	6820      	ldr	r0, [r4, #0]
 8006150:	4401      	add	r1, r0
 8006152:	1850      	adds	r0, r2, r1
 8006154:	4283      	cmp	r3, r0
 8006156:	6011      	str	r1, [r2, #0]
 8006158:	d1de      	bne.n	8006118 <_free_r+0x24>
 800615a:	6818      	ldr	r0, [r3, #0]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	4401      	add	r1, r0
 8006160:	6011      	str	r1, [r2, #0]
 8006162:	6053      	str	r3, [r2, #4]
 8006164:	e7d8      	b.n	8006118 <_free_r+0x24>
 8006166:	d902      	bls.n	800616e <_free_r+0x7a>
 8006168:	230c      	movs	r3, #12
 800616a:	602b      	str	r3, [r5, #0]
 800616c:	e7d4      	b.n	8006118 <_free_r+0x24>
 800616e:	6820      	ldr	r0, [r4, #0]
 8006170:	1821      	adds	r1, r4, r0
 8006172:	428b      	cmp	r3, r1
 8006174:	bf01      	itttt	eq
 8006176:	6819      	ldreq	r1, [r3, #0]
 8006178:	685b      	ldreq	r3, [r3, #4]
 800617a:	1809      	addeq	r1, r1, r0
 800617c:	6021      	streq	r1, [r4, #0]
 800617e:	6063      	str	r3, [r4, #4]
 8006180:	6054      	str	r4, [r2, #4]
 8006182:	e7c9      	b.n	8006118 <_free_r+0x24>
 8006184:	bd38      	pop	{r3, r4, r5, pc}
 8006186:	bf00      	nop
 8006188:	20000224 	.word	0x20000224

0800618c <_malloc_r>:
 800618c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800618e:	1ccd      	adds	r5, r1, #3
 8006190:	f025 0503 	bic.w	r5, r5, #3
 8006194:	3508      	adds	r5, #8
 8006196:	2d0c      	cmp	r5, #12
 8006198:	bf38      	it	cc
 800619a:	250c      	movcc	r5, #12
 800619c:	2d00      	cmp	r5, #0
 800619e:	4606      	mov	r6, r0
 80061a0:	db01      	blt.n	80061a6 <_malloc_r+0x1a>
 80061a2:	42a9      	cmp	r1, r5
 80061a4:	d903      	bls.n	80061ae <_malloc_r+0x22>
 80061a6:	230c      	movs	r3, #12
 80061a8:	6033      	str	r3, [r6, #0]
 80061aa:	2000      	movs	r0, #0
 80061ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061ae:	f003 f99d 	bl	80094ec <__malloc_lock>
 80061b2:	4921      	ldr	r1, [pc, #132]	; (8006238 <_malloc_r+0xac>)
 80061b4:	680a      	ldr	r2, [r1, #0]
 80061b6:	4614      	mov	r4, r2
 80061b8:	b99c      	cbnz	r4, 80061e2 <_malloc_r+0x56>
 80061ba:	4f20      	ldr	r7, [pc, #128]	; (800623c <_malloc_r+0xb0>)
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	b923      	cbnz	r3, 80061ca <_malloc_r+0x3e>
 80061c0:	4621      	mov	r1, r4
 80061c2:	4630      	mov	r0, r6
 80061c4:	f000 fd32 	bl	8006c2c <_sbrk_r>
 80061c8:	6038      	str	r0, [r7, #0]
 80061ca:	4629      	mov	r1, r5
 80061cc:	4630      	mov	r0, r6
 80061ce:	f000 fd2d 	bl	8006c2c <_sbrk_r>
 80061d2:	1c43      	adds	r3, r0, #1
 80061d4:	d123      	bne.n	800621e <_malloc_r+0x92>
 80061d6:	230c      	movs	r3, #12
 80061d8:	4630      	mov	r0, r6
 80061da:	6033      	str	r3, [r6, #0]
 80061dc:	f003 f98c 	bl	80094f8 <__malloc_unlock>
 80061e0:	e7e3      	b.n	80061aa <_malloc_r+0x1e>
 80061e2:	6823      	ldr	r3, [r4, #0]
 80061e4:	1b5b      	subs	r3, r3, r5
 80061e6:	d417      	bmi.n	8006218 <_malloc_r+0x8c>
 80061e8:	2b0b      	cmp	r3, #11
 80061ea:	d903      	bls.n	80061f4 <_malloc_r+0x68>
 80061ec:	6023      	str	r3, [r4, #0]
 80061ee:	441c      	add	r4, r3
 80061f0:	6025      	str	r5, [r4, #0]
 80061f2:	e004      	b.n	80061fe <_malloc_r+0x72>
 80061f4:	6863      	ldr	r3, [r4, #4]
 80061f6:	42a2      	cmp	r2, r4
 80061f8:	bf0c      	ite	eq
 80061fa:	600b      	streq	r3, [r1, #0]
 80061fc:	6053      	strne	r3, [r2, #4]
 80061fe:	4630      	mov	r0, r6
 8006200:	f003 f97a 	bl	80094f8 <__malloc_unlock>
 8006204:	f104 000b 	add.w	r0, r4, #11
 8006208:	1d23      	adds	r3, r4, #4
 800620a:	f020 0007 	bic.w	r0, r0, #7
 800620e:	1ac2      	subs	r2, r0, r3
 8006210:	d0cc      	beq.n	80061ac <_malloc_r+0x20>
 8006212:	1a1b      	subs	r3, r3, r0
 8006214:	50a3      	str	r3, [r4, r2]
 8006216:	e7c9      	b.n	80061ac <_malloc_r+0x20>
 8006218:	4622      	mov	r2, r4
 800621a:	6864      	ldr	r4, [r4, #4]
 800621c:	e7cc      	b.n	80061b8 <_malloc_r+0x2c>
 800621e:	1cc4      	adds	r4, r0, #3
 8006220:	f024 0403 	bic.w	r4, r4, #3
 8006224:	42a0      	cmp	r0, r4
 8006226:	d0e3      	beq.n	80061f0 <_malloc_r+0x64>
 8006228:	1a21      	subs	r1, r4, r0
 800622a:	4630      	mov	r0, r6
 800622c:	f000 fcfe 	bl	8006c2c <_sbrk_r>
 8006230:	3001      	adds	r0, #1
 8006232:	d1dd      	bne.n	80061f0 <_malloc_r+0x64>
 8006234:	e7cf      	b.n	80061d6 <_malloc_r+0x4a>
 8006236:	bf00      	nop
 8006238:	20000224 	.word	0x20000224
 800623c:	20000228 	.word	0x20000228

08006240 <__cvt>:
 8006240:	2b00      	cmp	r3, #0
 8006242:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006246:	461f      	mov	r7, r3
 8006248:	bfbb      	ittet	lt
 800624a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800624e:	461f      	movlt	r7, r3
 8006250:	2300      	movge	r3, #0
 8006252:	232d      	movlt	r3, #45	; 0x2d
 8006254:	b088      	sub	sp, #32
 8006256:	4614      	mov	r4, r2
 8006258:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800625a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800625c:	7013      	strb	r3, [r2, #0]
 800625e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006260:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006264:	f023 0820 	bic.w	r8, r3, #32
 8006268:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800626c:	d005      	beq.n	800627a <__cvt+0x3a>
 800626e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006272:	d100      	bne.n	8006276 <__cvt+0x36>
 8006274:	3501      	adds	r5, #1
 8006276:	2302      	movs	r3, #2
 8006278:	e000      	b.n	800627c <__cvt+0x3c>
 800627a:	2303      	movs	r3, #3
 800627c:	aa07      	add	r2, sp, #28
 800627e:	9204      	str	r2, [sp, #16]
 8006280:	aa06      	add	r2, sp, #24
 8006282:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006286:	e9cd 3500 	strd	r3, r5, [sp]
 800628a:	4622      	mov	r2, r4
 800628c:	463b      	mov	r3, r7
 800628e:	f001 fd83 	bl	8007d98 <_dtoa_r>
 8006292:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006296:	4606      	mov	r6, r0
 8006298:	d102      	bne.n	80062a0 <__cvt+0x60>
 800629a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800629c:	07db      	lsls	r3, r3, #31
 800629e:	d522      	bpl.n	80062e6 <__cvt+0xa6>
 80062a0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80062a4:	eb06 0905 	add.w	r9, r6, r5
 80062a8:	d110      	bne.n	80062cc <__cvt+0x8c>
 80062aa:	7833      	ldrb	r3, [r6, #0]
 80062ac:	2b30      	cmp	r3, #48	; 0x30
 80062ae:	d10a      	bne.n	80062c6 <__cvt+0x86>
 80062b0:	2200      	movs	r2, #0
 80062b2:	2300      	movs	r3, #0
 80062b4:	4620      	mov	r0, r4
 80062b6:	4639      	mov	r1, r7
 80062b8:	f7fa fb80 	bl	80009bc <__aeabi_dcmpeq>
 80062bc:	b918      	cbnz	r0, 80062c6 <__cvt+0x86>
 80062be:	f1c5 0501 	rsb	r5, r5, #1
 80062c2:	f8ca 5000 	str.w	r5, [sl]
 80062c6:	f8da 3000 	ldr.w	r3, [sl]
 80062ca:	4499      	add	r9, r3
 80062cc:	2200      	movs	r2, #0
 80062ce:	2300      	movs	r3, #0
 80062d0:	4620      	mov	r0, r4
 80062d2:	4639      	mov	r1, r7
 80062d4:	f7fa fb72 	bl	80009bc <__aeabi_dcmpeq>
 80062d8:	b108      	cbz	r0, 80062de <__cvt+0x9e>
 80062da:	f8cd 901c 	str.w	r9, [sp, #28]
 80062de:	2230      	movs	r2, #48	; 0x30
 80062e0:	9b07      	ldr	r3, [sp, #28]
 80062e2:	454b      	cmp	r3, r9
 80062e4:	d307      	bcc.n	80062f6 <__cvt+0xb6>
 80062e6:	4630      	mov	r0, r6
 80062e8:	9b07      	ldr	r3, [sp, #28]
 80062ea:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80062ec:	1b9b      	subs	r3, r3, r6
 80062ee:	6013      	str	r3, [r2, #0]
 80062f0:	b008      	add	sp, #32
 80062f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062f6:	1c59      	adds	r1, r3, #1
 80062f8:	9107      	str	r1, [sp, #28]
 80062fa:	701a      	strb	r2, [r3, #0]
 80062fc:	e7f0      	b.n	80062e0 <__cvt+0xa0>

080062fe <__exponent>:
 80062fe:	4603      	mov	r3, r0
 8006300:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006302:	2900      	cmp	r1, #0
 8006304:	f803 2b02 	strb.w	r2, [r3], #2
 8006308:	bfb6      	itet	lt
 800630a:	222d      	movlt	r2, #45	; 0x2d
 800630c:	222b      	movge	r2, #43	; 0x2b
 800630e:	4249      	neglt	r1, r1
 8006310:	2909      	cmp	r1, #9
 8006312:	7042      	strb	r2, [r0, #1]
 8006314:	dd2b      	ble.n	800636e <__exponent+0x70>
 8006316:	f10d 0407 	add.w	r4, sp, #7
 800631a:	46a4      	mov	ip, r4
 800631c:	270a      	movs	r7, #10
 800631e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006322:	460a      	mov	r2, r1
 8006324:	46a6      	mov	lr, r4
 8006326:	fb07 1516 	mls	r5, r7, r6, r1
 800632a:	2a63      	cmp	r2, #99	; 0x63
 800632c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8006330:	4631      	mov	r1, r6
 8006332:	f104 34ff 	add.w	r4, r4, #4294967295
 8006336:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800633a:	dcf0      	bgt.n	800631e <__exponent+0x20>
 800633c:	3130      	adds	r1, #48	; 0x30
 800633e:	f1ae 0502 	sub.w	r5, lr, #2
 8006342:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006346:	4629      	mov	r1, r5
 8006348:	1c44      	adds	r4, r0, #1
 800634a:	4561      	cmp	r1, ip
 800634c:	d30a      	bcc.n	8006364 <__exponent+0x66>
 800634e:	f10d 0209 	add.w	r2, sp, #9
 8006352:	eba2 020e 	sub.w	r2, r2, lr
 8006356:	4565      	cmp	r5, ip
 8006358:	bf88      	it	hi
 800635a:	2200      	movhi	r2, #0
 800635c:	4413      	add	r3, r2
 800635e:	1a18      	subs	r0, r3, r0
 8006360:	b003      	add	sp, #12
 8006362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006364:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006368:	f804 2f01 	strb.w	r2, [r4, #1]!
 800636c:	e7ed      	b.n	800634a <__exponent+0x4c>
 800636e:	2330      	movs	r3, #48	; 0x30
 8006370:	3130      	adds	r1, #48	; 0x30
 8006372:	7083      	strb	r3, [r0, #2]
 8006374:	70c1      	strb	r1, [r0, #3]
 8006376:	1d03      	adds	r3, r0, #4
 8006378:	e7f1      	b.n	800635e <__exponent+0x60>
	...

0800637c <_printf_float>:
 800637c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006380:	b091      	sub	sp, #68	; 0x44
 8006382:	460c      	mov	r4, r1
 8006384:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006388:	4616      	mov	r6, r2
 800638a:	461f      	mov	r7, r3
 800638c:	4605      	mov	r5, r0
 800638e:	f003 f80f 	bl	80093b0 <_localeconv_r>
 8006392:	6803      	ldr	r3, [r0, #0]
 8006394:	4618      	mov	r0, r3
 8006396:	9309      	str	r3, [sp, #36]	; 0x24
 8006398:	f7f9 fee4 	bl	8000164 <strlen>
 800639c:	2300      	movs	r3, #0
 800639e:	930e      	str	r3, [sp, #56]	; 0x38
 80063a0:	f8d8 3000 	ldr.w	r3, [r8]
 80063a4:	900a      	str	r0, [sp, #40]	; 0x28
 80063a6:	3307      	adds	r3, #7
 80063a8:	f023 0307 	bic.w	r3, r3, #7
 80063ac:	f103 0208 	add.w	r2, r3, #8
 80063b0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80063b4:	f8d4 b000 	ldr.w	fp, [r4]
 80063b8:	f8c8 2000 	str.w	r2, [r8]
 80063bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80063c4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80063c8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80063cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80063ce:	f04f 32ff 	mov.w	r2, #4294967295
 80063d2:	4640      	mov	r0, r8
 80063d4:	4b9c      	ldr	r3, [pc, #624]	; (8006648 <_printf_float+0x2cc>)
 80063d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80063d8:	f7fa fb22 	bl	8000a20 <__aeabi_dcmpun>
 80063dc:	bb70      	cbnz	r0, 800643c <_printf_float+0xc0>
 80063de:	f04f 32ff 	mov.w	r2, #4294967295
 80063e2:	4640      	mov	r0, r8
 80063e4:	4b98      	ldr	r3, [pc, #608]	; (8006648 <_printf_float+0x2cc>)
 80063e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80063e8:	f7fa fafc 	bl	80009e4 <__aeabi_dcmple>
 80063ec:	bb30      	cbnz	r0, 800643c <_printf_float+0xc0>
 80063ee:	2200      	movs	r2, #0
 80063f0:	2300      	movs	r3, #0
 80063f2:	4640      	mov	r0, r8
 80063f4:	4651      	mov	r1, sl
 80063f6:	f7fa faeb 	bl	80009d0 <__aeabi_dcmplt>
 80063fa:	b110      	cbz	r0, 8006402 <_printf_float+0x86>
 80063fc:	232d      	movs	r3, #45	; 0x2d
 80063fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006402:	4b92      	ldr	r3, [pc, #584]	; (800664c <_printf_float+0x2d0>)
 8006404:	4892      	ldr	r0, [pc, #584]	; (8006650 <_printf_float+0x2d4>)
 8006406:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800640a:	bf94      	ite	ls
 800640c:	4698      	movls	r8, r3
 800640e:	4680      	movhi	r8, r0
 8006410:	2303      	movs	r3, #3
 8006412:	f04f 0a00 	mov.w	sl, #0
 8006416:	6123      	str	r3, [r4, #16]
 8006418:	f02b 0304 	bic.w	r3, fp, #4
 800641c:	6023      	str	r3, [r4, #0]
 800641e:	4633      	mov	r3, r6
 8006420:	4621      	mov	r1, r4
 8006422:	4628      	mov	r0, r5
 8006424:	9700      	str	r7, [sp, #0]
 8006426:	aa0f      	add	r2, sp, #60	; 0x3c
 8006428:	f000 f9d4 	bl	80067d4 <_printf_common>
 800642c:	3001      	adds	r0, #1
 800642e:	f040 8090 	bne.w	8006552 <_printf_float+0x1d6>
 8006432:	f04f 30ff 	mov.w	r0, #4294967295
 8006436:	b011      	add	sp, #68	; 0x44
 8006438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800643c:	4642      	mov	r2, r8
 800643e:	4653      	mov	r3, sl
 8006440:	4640      	mov	r0, r8
 8006442:	4651      	mov	r1, sl
 8006444:	f7fa faec 	bl	8000a20 <__aeabi_dcmpun>
 8006448:	b148      	cbz	r0, 800645e <_printf_float+0xe2>
 800644a:	f1ba 0f00 	cmp.w	sl, #0
 800644e:	bfb8      	it	lt
 8006450:	232d      	movlt	r3, #45	; 0x2d
 8006452:	4880      	ldr	r0, [pc, #512]	; (8006654 <_printf_float+0x2d8>)
 8006454:	bfb8      	it	lt
 8006456:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800645a:	4b7f      	ldr	r3, [pc, #508]	; (8006658 <_printf_float+0x2dc>)
 800645c:	e7d3      	b.n	8006406 <_printf_float+0x8a>
 800645e:	6863      	ldr	r3, [r4, #4]
 8006460:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006464:	1c5a      	adds	r2, r3, #1
 8006466:	d142      	bne.n	80064ee <_printf_float+0x172>
 8006468:	2306      	movs	r3, #6
 800646a:	6063      	str	r3, [r4, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	9206      	str	r2, [sp, #24]
 8006470:	aa0e      	add	r2, sp, #56	; 0x38
 8006472:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006476:	aa0d      	add	r2, sp, #52	; 0x34
 8006478:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800647c:	9203      	str	r2, [sp, #12]
 800647e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006482:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006486:	6023      	str	r3, [r4, #0]
 8006488:	6863      	ldr	r3, [r4, #4]
 800648a:	4642      	mov	r2, r8
 800648c:	9300      	str	r3, [sp, #0]
 800648e:	4628      	mov	r0, r5
 8006490:	4653      	mov	r3, sl
 8006492:	910b      	str	r1, [sp, #44]	; 0x2c
 8006494:	f7ff fed4 	bl	8006240 <__cvt>
 8006498:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800649a:	4680      	mov	r8, r0
 800649c:	2947      	cmp	r1, #71	; 0x47
 800649e:	990d      	ldr	r1, [sp, #52]	; 0x34
 80064a0:	d108      	bne.n	80064b4 <_printf_float+0x138>
 80064a2:	1cc8      	adds	r0, r1, #3
 80064a4:	db02      	blt.n	80064ac <_printf_float+0x130>
 80064a6:	6863      	ldr	r3, [r4, #4]
 80064a8:	4299      	cmp	r1, r3
 80064aa:	dd40      	ble.n	800652e <_printf_float+0x1b2>
 80064ac:	f1a9 0902 	sub.w	r9, r9, #2
 80064b0:	fa5f f989 	uxtb.w	r9, r9
 80064b4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80064b8:	d81f      	bhi.n	80064fa <_printf_float+0x17e>
 80064ba:	464a      	mov	r2, r9
 80064bc:	3901      	subs	r1, #1
 80064be:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80064c2:	910d      	str	r1, [sp, #52]	; 0x34
 80064c4:	f7ff ff1b 	bl	80062fe <__exponent>
 80064c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80064ca:	4682      	mov	sl, r0
 80064cc:	1813      	adds	r3, r2, r0
 80064ce:	2a01      	cmp	r2, #1
 80064d0:	6123      	str	r3, [r4, #16]
 80064d2:	dc02      	bgt.n	80064da <_printf_float+0x15e>
 80064d4:	6822      	ldr	r2, [r4, #0]
 80064d6:	07d2      	lsls	r2, r2, #31
 80064d8:	d501      	bpl.n	80064de <_printf_float+0x162>
 80064da:	3301      	adds	r3, #1
 80064dc:	6123      	str	r3, [r4, #16]
 80064de:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d09b      	beq.n	800641e <_printf_float+0xa2>
 80064e6:	232d      	movs	r3, #45	; 0x2d
 80064e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064ec:	e797      	b.n	800641e <_printf_float+0xa2>
 80064ee:	2947      	cmp	r1, #71	; 0x47
 80064f0:	d1bc      	bne.n	800646c <_printf_float+0xf0>
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d1ba      	bne.n	800646c <_printf_float+0xf0>
 80064f6:	2301      	movs	r3, #1
 80064f8:	e7b7      	b.n	800646a <_printf_float+0xee>
 80064fa:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80064fe:	d118      	bne.n	8006532 <_printf_float+0x1b6>
 8006500:	2900      	cmp	r1, #0
 8006502:	6863      	ldr	r3, [r4, #4]
 8006504:	dd0b      	ble.n	800651e <_printf_float+0x1a2>
 8006506:	6121      	str	r1, [r4, #16]
 8006508:	b913      	cbnz	r3, 8006510 <_printf_float+0x194>
 800650a:	6822      	ldr	r2, [r4, #0]
 800650c:	07d0      	lsls	r0, r2, #31
 800650e:	d502      	bpl.n	8006516 <_printf_float+0x19a>
 8006510:	3301      	adds	r3, #1
 8006512:	440b      	add	r3, r1
 8006514:	6123      	str	r3, [r4, #16]
 8006516:	f04f 0a00 	mov.w	sl, #0
 800651a:	65a1      	str	r1, [r4, #88]	; 0x58
 800651c:	e7df      	b.n	80064de <_printf_float+0x162>
 800651e:	b913      	cbnz	r3, 8006526 <_printf_float+0x1aa>
 8006520:	6822      	ldr	r2, [r4, #0]
 8006522:	07d2      	lsls	r2, r2, #31
 8006524:	d501      	bpl.n	800652a <_printf_float+0x1ae>
 8006526:	3302      	adds	r3, #2
 8006528:	e7f4      	b.n	8006514 <_printf_float+0x198>
 800652a:	2301      	movs	r3, #1
 800652c:	e7f2      	b.n	8006514 <_printf_float+0x198>
 800652e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006532:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006534:	4299      	cmp	r1, r3
 8006536:	db05      	blt.n	8006544 <_printf_float+0x1c8>
 8006538:	6823      	ldr	r3, [r4, #0]
 800653a:	6121      	str	r1, [r4, #16]
 800653c:	07d8      	lsls	r0, r3, #31
 800653e:	d5ea      	bpl.n	8006516 <_printf_float+0x19a>
 8006540:	1c4b      	adds	r3, r1, #1
 8006542:	e7e7      	b.n	8006514 <_printf_float+0x198>
 8006544:	2900      	cmp	r1, #0
 8006546:	bfcc      	ite	gt
 8006548:	2201      	movgt	r2, #1
 800654a:	f1c1 0202 	rsble	r2, r1, #2
 800654e:	4413      	add	r3, r2
 8006550:	e7e0      	b.n	8006514 <_printf_float+0x198>
 8006552:	6823      	ldr	r3, [r4, #0]
 8006554:	055a      	lsls	r2, r3, #21
 8006556:	d407      	bmi.n	8006568 <_printf_float+0x1ec>
 8006558:	6923      	ldr	r3, [r4, #16]
 800655a:	4642      	mov	r2, r8
 800655c:	4631      	mov	r1, r6
 800655e:	4628      	mov	r0, r5
 8006560:	47b8      	blx	r7
 8006562:	3001      	adds	r0, #1
 8006564:	d12b      	bne.n	80065be <_printf_float+0x242>
 8006566:	e764      	b.n	8006432 <_printf_float+0xb6>
 8006568:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800656c:	f240 80dd 	bls.w	800672a <_printf_float+0x3ae>
 8006570:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006574:	2200      	movs	r2, #0
 8006576:	2300      	movs	r3, #0
 8006578:	f7fa fa20 	bl	80009bc <__aeabi_dcmpeq>
 800657c:	2800      	cmp	r0, #0
 800657e:	d033      	beq.n	80065e8 <_printf_float+0x26c>
 8006580:	2301      	movs	r3, #1
 8006582:	4631      	mov	r1, r6
 8006584:	4628      	mov	r0, r5
 8006586:	4a35      	ldr	r2, [pc, #212]	; (800665c <_printf_float+0x2e0>)
 8006588:	47b8      	blx	r7
 800658a:	3001      	adds	r0, #1
 800658c:	f43f af51 	beq.w	8006432 <_printf_float+0xb6>
 8006590:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006594:	429a      	cmp	r2, r3
 8006596:	db02      	blt.n	800659e <_printf_float+0x222>
 8006598:	6823      	ldr	r3, [r4, #0]
 800659a:	07d8      	lsls	r0, r3, #31
 800659c:	d50f      	bpl.n	80065be <_printf_float+0x242>
 800659e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065a2:	4631      	mov	r1, r6
 80065a4:	4628      	mov	r0, r5
 80065a6:	47b8      	blx	r7
 80065a8:	3001      	adds	r0, #1
 80065aa:	f43f af42 	beq.w	8006432 <_printf_float+0xb6>
 80065ae:	f04f 0800 	mov.w	r8, #0
 80065b2:	f104 091a 	add.w	r9, r4, #26
 80065b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065b8:	3b01      	subs	r3, #1
 80065ba:	4543      	cmp	r3, r8
 80065bc:	dc09      	bgt.n	80065d2 <_printf_float+0x256>
 80065be:	6823      	ldr	r3, [r4, #0]
 80065c0:	079b      	lsls	r3, r3, #30
 80065c2:	f100 8102 	bmi.w	80067ca <_printf_float+0x44e>
 80065c6:	68e0      	ldr	r0, [r4, #12]
 80065c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80065ca:	4298      	cmp	r0, r3
 80065cc:	bfb8      	it	lt
 80065ce:	4618      	movlt	r0, r3
 80065d0:	e731      	b.n	8006436 <_printf_float+0xba>
 80065d2:	2301      	movs	r3, #1
 80065d4:	464a      	mov	r2, r9
 80065d6:	4631      	mov	r1, r6
 80065d8:	4628      	mov	r0, r5
 80065da:	47b8      	blx	r7
 80065dc:	3001      	adds	r0, #1
 80065de:	f43f af28 	beq.w	8006432 <_printf_float+0xb6>
 80065e2:	f108 0801 	add.w	r8, r8, #1
 80065e6:	e7e6      	b.n	80065b6 <_printf_float+0x23a>
 80065e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	dc38      	bgt.n	8006660 <_printf_float+0x2e4>
 80065ee:	2301      	movs	r3, #1
 80065f0:	4631      	mov	r1, r6
 80065f2:	4628      	mov	r0, r5
 80065f4:	4a19      	ldr	r2, [pc, #100]	; (800665c <_printf_float+0x2e0>)
 80065f6:	47b8      	blx	r7
 80065f8:	3001      	adds	r0, #1
 80065fa:	f43f af1a 	beq.w	8006432 <_printf_float+0xb6>
 80065fe:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006602:	4313      	orrs	r3, r2
 8006604:	d102      	bne.n	800660c <_printf_float+0x290>
 8006606:	6823      	ldr	r3, [r4, #0]
 8006608:	07d9      	lsls	r1, r3, #31
 800660a:	d5d8      	bpl.n	80065be <_printf_float+0x242>
 800660c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006610:	4631      	mov	r1, r6
 8006612:	4628      	mov	r0, r5
 8006614:	47b8      	blx	r7
 8006616:	3001      	adds	r0, #1
 8006618:	f43f af0b 	beq.w	8006432 <_printf_float+0xb6>
 800661c:	f04f 0900 	mov.w	r9, #0
 8006620:	f104 0a1a 	add.w	sl, r4, #26
 8006624:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006626:	425b      	negs	r3, r3
 8006628:	454b      	cmp	r3, r9
 800662a:	dc01      	bgt.n	8006630 <_printf_float+0x2b4>
 800662c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800662e:	e794      	b.n	800655a <_printf_float+0x1de>
 8006630:	2301      	movs	r3, #1
 8006632:	4652      	mov	r2, sl
 8006634:	4631      	mov	r1, r6
 8006636:	4628      	mov	r0, r5
 8006638:	47b8      	blx	r7
 800663a:	3001      	adds	r0, #1
 800663c:	f43f aef9 	beq.w	8006432 <_printf_float+0xb6>
 8006640:	f109 0901 	add.w	r9, r9, #1
 8006644:	e7ee      	b.n	8006624 <_printf_float+0x2a8>
 8006646:	bf00      	nop
 8006648:	7fefffff 	.word	0x7fefffff
 800664c:	0800a81c 	.word	0x0800a81c
 8006650:	0800a820 	.word	0x0800a820
 8006654:	0800a828 	.word	0x0800a828
 8006658:	0800a824 	.word	0x0800a824
 800665c:	0800a82c 	.word	0x0800a82c
 8006660:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006662:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006664:	429a      	cmp	r2, r3
 8006666:	bfa8      	it	ge
 8006668:	461a      	movge	r2, r3
 800666a:	2a00      	cmp	r2, #0
 800666c:	4691      	mov	r9, r2
 800666e:	dc37      	bgt.n	80066e0 <_printf_float+0x364>
 8006670:	f04f 0b00 	mov.w	fp, #0
 8006674:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006678:	f104 021a 	add.w	r2, r4, #26
 800667c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006680:	ebaa 0309 	sub.w	r3, sl, r9
 8006684:	455b      	cmp	r3, fp
 8006686:	dc33      	bgt.n	80066f0 <_printf_float+0x374>
 8006688:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800668c:	429a      	cmp	r2, r3
 800668e:	db3b      	blt.n	8006708 <_printf_float+0x38c>
 8006690:	6823      	ldr	r3, [r4, #0]
 8006692:	07da      	lsls	r2, r3, #31
 8006694:	d438      	bmi.n	8006708 <_printf_float+0x38c>
 8006696:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006698:	990d      	ldr	r1, [sp, #52]	; 0x34
 800669a:	eba2 030a 	sub.w	r3, r2, sl
 800669e:	eba2 0901 	sub.w	r9, r2, r1
 80066a2:	4599      	cmp	r9, r3
 80066a4:	bfa8      	it	ge
 80066a6:	4699      	movge	r9, r3
 80066a8:	f1b9 0f00 	cmp.w	r9, #0
 80066ac:	dc34      	bgt.n	8006718 <_printf_float+0x39c>
 80066ae:	f04f 0800 	mov.w	r8, #0
 80066b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80066b6:	f104 0a1a 	add.w	sl, r4, #26
 80066ba:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80066be:	1a9b      	subs	r3, r3, r2
 80066c0:	eba3 0309 	sub.w	r3, r3, r9
 80066c4:	4543      	cmp	r3, r8
 80066c6:	f77f af7a 	ble.w	80065be <_printf_float+0x242>
 80066ca:	2301      	movs	r3, #1
 80066cc:	4652      	mov	r2, sl
 80066ce:	4631      	mov	r1, r6
 80066d0:	4628      	mov	r0, r5
 80066d2:	47b8      	blx	r7
 80066d4:	3001      	adds	r0, #1
 80066d6:	f43f aeac 	beq.w	8006432 <_printf_float+0xb6>
 80066da:	f108 0801 	add.w	r8, r8, #1
 80066de:	e7ec      	b.n	80066ba <_printf_float+0x33e>
 80066e0:	4613      	mov	r3, r2
 80066e2:	4631      	mov	r1, r6
 80066e4:	4642      	mov	r2, r8
 80066e6:	4628      	mov	r0, r5
 80066e8:	47b8      	blx	r7
 80066ea:	3001      	adds	r0, #1
 80066ec:	d1c0      	bne.n	8006670 <_printf_float+0x2f4>
 80066ee:	e6a0      	b.n	8006432 <_printf_float+0xb6>
 80066f0:	2301      	movs	r3, #1
 80066f2:	4631      	mov	r1, r6
 80066f4:	4628      	mov	r0, r5
 80066f6:	920b      	str	r2, [sp, #44]	; 0x2c
 80066f8:	47b8      	blx	r7
 80066fa:	3001      	adds	r0, #1
 80066fc:	f43f ae99 	beq.w	8006432 <_printf_float+0xb6>
 8006700:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006702:	f10b 0b01 	add.w	fp, fp, #1
 8006706:	e7b9      	b.n	800667c <_printf_float+0x300>
 8006708:	4631      	mov	r1, r6
 800670a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800670e:	4628      	mov	r0, r5
 8006710:	47b8      	blx	r7
 8006712:	3001      	adds	r0, #1
 8006714:	d1bf      	bne.n	8006696 <_printf_float+0x31a>
 8006716:	e68c      	b.n	8006432 <_printf_float+0xb6>
 8006718:	464b      	mov	r3, r9
 800671a:	4631      	mov	r1, r6
 800671c:	4628      	mov	r0, r5
 800671e:	eb08 020a 	add.w	r2, r8, sl
 8006722:	47b8      	blx	r7
 8006724:	3001      	adds	r0, #1
 8006726:	d1c2      	bne.n	80066ae <_printf_float+0x332>
 8006728:	e683      	b.n	8006432 <_printf_float+0xb6>
 800672a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800672c:	2a01      	cmp	r2, #1
 800672e:	dc01      	bgt.n	8006734 <_printf_float+0x3b8>
 8006730:	07db      	lsls	r3, r3, #31
 8006732:	d537      	bpl.n	80067a4 <_printf_float+0x428>
 8006734:	2301      	movs	r3, #1
 8006736:	4642      	mov	r2, r8
 8006738:	4631      	mov	r1, r6
 800673a:	4628      	mov	r0, r5
 800673c:	47b8      	blx	r7
 800673e:	3001      	adds	r0, #1
 8006740:	f43f ae77 	beq.w	8006432 <_printf_float+0xb6>
 8006744:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006748:	4631      	mov	r1, r6
 800674a:	4628      	mov	r0, r5
 800674c:	47b8      	blx	r7
 800674e:	3001      	adds	r0, #1
 8006750:	f43f ae6f 	beq.w	8006432 <_printf_float+0xb6>
 8006754:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006758:	2200      	movs	r2, #0
 800675a:	2300      	movs	r3, #0
 800675c:	f7fa f92e 	bl	80009bc <__aeabi_dcmpeq>
 8006760:	b9d8      	cbnz	r0, 800679a <_printf_float+0x41e>
 8006762:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006764:	f108 0201 	add.w	r2, r8, #1
 8006768:	3b01      	subs	r3, #1
 800676a:	4631      	mov	r1, r6
 800676c:	4628      	mov	r0, r5
 800676e:	47b8      	blx	r7
 8006770:	3001      	adds	r0, #1
 8006772:	d10e      	bne.n	8006792 <_printf_float+0x416>
 8006774:	e65d      	b.n	8006432 <_printf_float+0xb6>
 8006776:	2301      	movs	r3, #1
 8006778:	464a      	mov	r2, r9
 800677a:	4631      	mov	r1, r6
 800677c:	4628      	mov	r0, r5
 800677e:	47b8      	blx	r7
 8006780:	3001      	adds	r0, #1
 8006782:	f43f ae56 	beq.w	8006432 <_printf_float+0xb6>
 8006786:	f108 0801 	add.w	r8, r8, #1
 800678a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800678c:	3b01      	subs	r3, #1
 800678e:	4543      	cmp	r3, r8
 8006790:	dcf1      	bgt.n	8006776 <_printf_float+0x3fa>
 8006792:	4653      	mov	r3, sl
 8006794:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006798:	e6e0      	b.n	800655c <_printf_float+0x1e0>
 800679a:	f04f 0800 	mov.w	r8, #0
 800679e:	f104 091a 	add.w	r9, r4, #26
 80067a2:	e7f2      	b.n	800678a <_printf_float+0x40e>
 80067a4:	2301      	movs	r3, #1
 80067a6:	4642      	mov	r2, r8
 80067a8:	e7df      	b.n	800676a <_printf_float+0x3ee>
 80067aa:	2301      	movs	r3, #1
 80067ac:	464a      	mov	r2, r9
 80067ae:	4631      	mov	r1, r6
 80067b0:	4628      	mov	r0, r5
 80067b2:	47b8      	blx	r7
 80067b4:	3001      	adds	r0, #1
 80067b6:	f43f ae3c 	beq.w	8006432 <_printf_float+0xb6>
 80067ba:	f108 0801 	add.w	r8, r8, #1
 80067be:	68e3      	ldr	r3, [r4, #12]
 80067c0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80067c2:	1a5b      	subs	r3, r3, r1
 80067c4:	4543      	cmp	r3, r8
 80067c6:	dcf0      	bgt.n	80067aa <_printf_float+0x42e>
 80067c8:	e6fd      	b.n	80065c6 <_printf_float+0x24a>
 80067ca:	f04f 0800 	mov.w	r8, #0
 80067ce:	f104 0919 	add.w	r9, r4, #25
 80067d2:	e7f4      	b.n	80067be <_printf_float+0x442>

080067d4 <_printf_common>:
 80067d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067d8:	4616      	mov	r6, r2
 80067da:	4699      	mov	r9, r3
 80067dc:	688a      	ldr	r2, [r1, #8]
 80067de:	690b      	ldr	r3, [r1, #16]
 80067e0:	4607      	mov	r7, r0
 80067e2:	4293      	cmp	r3, r2
 80067e4:	bfb8      	it	lt
 80067e6:	4613      	movlt	r3, r2
 80067e8:	6033      	str	r3, [r6, #0]
 80067ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80067ee:	460c      	mov	r4, r1
 80067f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80067f4:	b10a      	cbz	r2, 80067fa <_printf_common+0x26>
 80067f6:	3301      	adds	r3, #1
 80067f8:	6033      	str	r3, [r6, #0]
 80067fa:	6823      	ldr	r3, [r4, #0]
 80067fc:	0699      	lsls	r1, r3, #26
 80067fe:	bf42      	ittt	mi
 8006800:	6833      	ldrmi	r3, [r6, #0]
 8006802:	3302      	addmi	r3, #2
 8006804:	6033      	strmi	r3, [r6, #0]
 8006806:	6825      	ldr	r5, [r4, #0]
 8006808:	f015 0506 	ands.w	r5, r5, #6
 800680c:	d106      	bne.n	800681c <_printf_common+0x48>
 800680e:	f104 0a19 	add.w	sl, r4, #25
 8006812:	68e3      	ldr	r3, [r4, #12]
 8006814:	6832      	ldr	r2, [r6, #0]
 8006816:	1a9b      	subs	r3, r3, r2
 8006818:	42ab      	cmp	r3, r5
 800681a:	dc28      	bgt.n	800686e <_printf_common+0x9a>
 800681c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006820:	1e13      	subs	r3, r2, #0
 8006822:	6822      	ldr	r2, [r4, #0]
 8006824:	bf18      	it	ne
 8006826:	2301      	movne	r3, #1
 8006828:	0692      	lsls	r2, r2, #26
 800682a:	d42d      	bmi.n	8006888 <_printf_common+0xb4>
 800682c:	4649      	mov	r1, r9
 800682e:	4638      	mov	r0, r7
 8006830:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006834:	47c0      	blx	r8
 8006836:	3001      	adds	r0, #1
 8006838:	d020      	beq.n	800687c <_printf_common+0xa8>
 800683a:	6823      	ldr	r3, [r4, #0]
 800683c:	68e5      	ldr	r5, [r4, #12]
 800683e:	f003 0306 	and.w	r3, r3, #6
 8006842:	2b04      	cmp	r3, #4
 8006844:	bf18      	it	ne
 8006846:	2500      	movne	r5, #0
 8006848:	6832      	ldr	r2, [r6, #0]
 800684a:	f04f 0600 	mov.w	r6, #0
 800684e:	68a3      	ldr	r3, [r4, #8]
 8006850:	bf08      	it	eq
 8006852:	1aad      	subeq	r5, r5, r2
 8006854:	6922      	ldr	r2, [r4, #16]
 8006856:	bf08      	it	eq
 8006858:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800685c:	4293      	cmp	r3, r2
 800685e:	bfc4      	itt	gt
 8006860:	1a9b      	subgt	r3, r3, r2
 8006862:	18ed      	addgt	r5, r5, r3
 8006864:	341a      	adds	r4, #26
 8006866:	42b5      	cmp	r5, r6
 8006868:	d11a      	bne.n	80068a0 <_printf_common+0xcc>
 800686a:	2000      	movs	r0, #0
 800686c:	e008      	b.n	8006880 <_printf_common+0xac>
 800686e:	2301      	movs	r3, #1
 8006870:	4652      	mov	r2, sl
 8006872:	4649      	mov	r1, r9
 8006874:	4638      	mov	r0, r7
 8006876:	47c0      	blx	r8
 8006878:	3001      	adds	r0, #1
 800687a:	d103      	bne.n	8006884 <_printf_common+0xb0>
 800687c:	f04f 30ff 	mov.w	r0, #4294967295
 8006880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006884:	3501      	adds	r5, #1
 8006886:	e7c4      	b.n	8006812 <_printf_common+0x3e>
 8006888:	2030      	movs	r0, #48	; 0x30
 800688a:	18e1      	adds	r1, r4, r3
 800688c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006890:	1c5a      	adds	r2, r3, #1
 8006892:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006896:	4422      	add	r2, r4
 8006898:	3302      	adds	r3, #2
 800689a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800689e:	e7c5      	b.n	800682c <_printf_common+0x58>
 80068a0:	2301      	movs	r3, #1
 80068a2:	4622      	mov	r2, r4
 80068a4:	4649      	mov	r1, r9
 80068a6:	4638      	mov	r0, r7
 80068a8:	47c0      	blx	r8
 80068aa:	3001      	adds	r0, #1
 80068ac:	d0e6      	beq.n	800687c <_printf_common+0xa8>
 80068ae:	3601      	adds	r6, #1
 80068b0:	e7d9      	b.n	8006866 <_printf_common+0x92>
	...

080068b4 <_printf_i>:
 80068b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068b8:	460c      	mov	r4, r1
 80068ba:	7e27      	ldrb	r7, [r4, #24]
 80068bc:	4691      	mov	r9, r2
 80068be:	2f78      	cmp	r7, #120	; 0x78
 80068c0:	4680      	mov	r8, r0
 80068c2:	469a      	mov	sl, r3
 80068c4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80068c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068ca:	d807      	bhi.n	80068dc <_printf_i+0x28>
 80068cc:	2f62      	cmp	r7, #98	; 0x62
 80068ce:	d80a      	bhi.n	80068e6 <_printf_i+0x32>
 80068d0:	2f00      	cmp	r7, #0
 80068d2:	f000 80d9 	beq.w	8006a88 <_printf_i+0x1d4>
 80068d6:	2f58      	cmp	r7, #88	; 0x58
 80068d8:	f000 80a4 	beq.w	8006a24 <_printf_i+0x170>
 80068dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80068e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80068e4:	e03a      	b.n	800695c <_printf_i+0xa8>
 80068e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80068ea:	2b15      	cmp	r3, #21
 80068ec:	d8f6      	bhi.n	80068dc <_printf_i+0x28>
 80068ee:	a001      	add	r0, pc, #4	; (adr r0, 80068f4 <_printf_i+0x40>)
 80068f0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80068f4:	0800694d 	.word	0x0800694d
 80068f8:	08006961 	.word	0x08006961
 80068fc:	080068dd 	.word	0x080068dd
 8006900:	080068dd 	.word	0x080068dd
 8006904:	080068dd 	.word	0x080068dd
 8006908:	080068dd 	.word	0x080068dd
 800690c:	08006961 	.word	0x08006961
 8006910:	080068dd 	.word	0x080068dd
 8006914:	080068dd 	.word	0x080068dd
 8006918:	080068dd 	.word	0x080068dd
 800691c:	080068dd 	.word	0x080068dd
 8006920:	08006a6f 	.word	0x08006a6f
 8006924:	08006991 	.word	0x08006991
 8006928:	08006a51 	.word	0x08006a51
 800692c:	080068dd 	.word	0x080068dd
 8006930:	080068dd 	.word	0x080068dd
 8006934:	08006a91 	.word	0x08006a91
 8006938:	080068dd 	.word	0x080068dd
 800693c:	08006991 	.word	0x08006991
 8006940:	080068dd 	.word	0x080068dd
 8006944:	080068dd 	.word	0x080068dd
 8006948:	08006a59 	.word	0x08006a59
 800694c:	680b      	ldr	r3, [r1, #0]
 800694e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006952:	1d1a      	adds	r2, r3, #4
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	600a      	str	r2, [r1, #0]
 8006958:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800695c:	2301      	movs	r3, #1
 800695e:	e0a4      	b.n	8006aaa <_printf_i+0x1f6>
 8006960:	6825      	ldr	r5, [r4, #0]
 8006962:	6808      	ldr	r0, [r1, #0]
 8006964:	062e      	lsls	r6, r5, #24
 8006966:	f100 0304 	add.w	r3, r0, #4
 800696a:	d50a      	bpl.n	8006982 <_printf_i+0xce>
 800696c:	6805      	ldr	r5, [r0, #0]
 800696e:	600b      	str	r3, [r1, #0]
 8006970:	2d00      	cmp	r5, #0
 8006972:	da03      	bge.n	800697c <_printf_i+0xc8>
 8006974:	232d      	movs	r3, #45	; 0x2d
 8006976:	426d      	negs	r5, r5
 8006978:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800697c:	230a      	movs	r3, #10
 800697e:	485e      	ldr	r0, [pc, #376]	; (8006af8 <_printf_i+0x244>)
 8006980:	e019      	b.n	80069b6 <_printf_i+0x102>
 8006982:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006986:	6805      	ldr	r5, [r0, #0]
 8006988:	600b      	str	r3, [r1, #0]
 800698a:	bf18      	it	ne
 800698c:	b22d      	sxthne	r5, r5
 800698e:	e7ef      	b.n	8006970 <_printf_i+0xbc>
 8006990:	680b      	ldr	r3, [r1, #0]
 8006992:	6825      	ldr	r5, [r4, #0]
 8006994:	1d18      	adds	r0, r3, #4
 8006996:	6008      	str	r0, [r1, #0]
 8006998:	0628      	lsls	r0, r5, #24
 800699a:	d501      	bpl.n	80069a0 <_printf_i+0xec>
 800699c:	681d      	ldr	r5, [r3, #0]
 800699e:	e002      	b.n	80069a6 <_printf_i+0xf2>
 80069a0:	0669      	lsls	r1, r5, #25
 80069a2:	d5fb      	bpl.n	800699c <_printf_i+0xe8>
 80069a4:	881d      	ldrh	r5, [r3, #0]
 80069a6:	2f6f      	cmp	r7, #111	; 0x6f
 80069a8:	bf0c      	ite	eq
 80069aa:	2308      	moveq	r3, #8
 80069ac:	230a      	movne	r3, #10
 80069ae:	4852      	ldr	r0, [pc, #328]	; (8006af8 <_printf_i+0x244>)
 80069b0:	2100      	movs	r1, #0
 80069b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80069b6:	6866      	ldr	r6, [r4, #4]
 80069b8:	2e00      	cmp	r6, #0
 80069ba:	bfa8      	it	ge
 80069bc:	6821      	ldrge	r1, [r4, #0]
 80069be:	60a6      	str	r6, [r4, #8]
 80069c0:	bfa4      	itt	ge
 80069c2:	f021 0104 	bicge.w	r1, r1, #4
 80069c6:	6021      	strge	r1, [r4, #0]
 80069c8:	b90d      	cbnz	r5, 80069ce <_printf_i+0x11a>
 80069ca:	2e00      	cmp	r6, #0
 80069cc:	d04d      	beq.n	8006a6a <_printf_i+0x1b6>
 80069ce:	4616      	mov	r6, r2
 80069d0:	fbb5 f1f3 	udiv	r1, r5, r3
 80069d4:	fb03 5711 	mls	r7, r3, r1, r5
 80069d8:	5dc7      	ldrb	r7, [r0, r7]
 80069da:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80069de:	462f      	mov	r7, r5
 80069e0:	42bb      	cmp	r3, r7
 80069e2:	460d      	mov	r5, r1
 80069e4:	d9f4      	bls.n	80069d0 <_printf_i+0x11c>
 80069e6:	2b08      	cmp	r3, #8
 80069e8:	d10b      	bne.n	8006a02 <_printf_i+0x14e>
 80069ea:	6823      	ldr	r3, [r4, #0]
 80069ec:	07df      	lsls	r7, r3, #31
 80069ee:	d508      	bpl.n	8006a02 <_printf_i+0x14e>
 80069f0:	6923      	ldr	r3, [r4, #16]
 80069f2:	6861      	ldr	r1, [r4, #4]
 80069f4:	4299      	cmp	r1, r3
 80069f6:	bfde      	ittt	le
 80069f8:	2330      	movle	r3, #48	; 0x30
 80069fa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80069fe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006a02:	1b92      	subs	r2, r2, r6
 8006a04:	6122      	str	r2, [r4, #16]
 8006a06:	464b      	mov	r3, r9
 8006a08:	4621      	mov	r1, r4
 8006a0a:	4640      	mov	r0, r8
 8006a0c:	f8cd a000 	str.w	sl, [sp]
 8006a10:	aa03      	add	r2, sp, #12
 8006a12:	f7ff fedf 	bl	80067d4 <_printf_common>
 8006a16:	3001      	adds	r0, #1
 8006a18:	d14c      	bne.n	8006ab4 <_printf_i+0x200>
 8006a1a:	f04f 30ff 	mov.w	r0, #4294967295
 8006a1e:	b004      	add	sp, #16
 8006a20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a24:	4834      	ldr	r0, [pc, #208]	; (8006af8 <_printf_i+0x244>)
 8006a26:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006a2a:	680e      	ldr	r6, [r1, #0]
 8006a2c:	6823      	ldr	r3, [r4, #0]
 8006a2e:	f856 5b04 	ldr.w	r5, [r6], #4
 8006a32:	061f      	lsls	r7, r3, #24
 8006a34:	600e      	str	r6, [r1, #0]
 8006a36:	d514      	bpl.n	8006a62 <_printf_i+0x1ae>
 8006a38:	07d9      	lsls	r1, r3, #31
 8006a3a:	bf44      	itt	mi
 8006a3c:	f043 0320 	orrmi.w	r3, r3, #32
 8006a40:	6023      	strmi	r3, [r4, #0]
 8006a42:	b91d      	cbnz	r5, 8006a4c <_printf_i+0x198>
 8006a44:	6823      	ldr	r3, [r4, #0]
 8006a46:	f023 0320 	bic.w	r3, r3, #32
 8006a4a:	6023      	str	r3, [r4, #0]
 8006a4c:	2310      	movs	r3, #16
 8006a4e:	e7af      	b.n	80069b0 <_printf_i+0xfc>
 8006a50:	6823      	ldr	r3, [r4, #0]
 8006a52:	f043 0320 	orr.w	r3, r3, #32
 8006a56:	6023      	str	r3, [r4, #0]
 8006a58:	2378      	movs	r3, #120	; 0x78
 8006a5a:	4828      	ldr	r0, [pc, #160]	; (8006afc <_printf_i+0x248>)
 8006a5c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006a60:	e7e3      	b.n	8006a2a <_printf_i+0x176>
 8006a62:	065e      	lsls	r6, r3, #25
 8006a64:	bf48      	it	mi
 8006a66:	b2ad      	uxthmi	r5, r5
 8006a68:	e7e6      	b.n	8006a38 <_printf_i+0x184>
 8006a6a:	4616      	mov	r6, r2
 8006a6c:	e7bb      	b.n	80069e6 <_printf_i+0x132>
 8006a6e:	680b      	ldr	r3, [r1, #0]
 8006a70:	6826      	ldr	r6, [r4, #0]
 8006a72:	1d1d      	adds	r5, r3, #4
 8006a74:	6960      	ldr	r0, [r4, #20]
 8006a76:	600d      	str	r5, [r1, #0]
 8006a78:	0635      	lsls	r5, r6, #24
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	d501      	bpl.n	8006a82 <_printf_i+0x1ce>
 8006a7e:	6018      	str	r0, [r3, #0]
 8006a80:	e002      	b.n	8006a88 <_printf_i+0x1d4>
 8006a82:	0671      	lsls	r1, r6, #25
 8006a84:	d5fb      	bpl.n	8006a7e <_printf_i+0x1ca>
 8006a86:	8018      	strh	r0, [r3, #0]
 8006a88:	2300      	movs	r3, #0
 8006a8a:	4616      	mov	r6, r2
 8006a8c:	6123      	str	r3, [r4, #16]
 8006a8e:	e7ba      	b.n	8006a06 <_printf_i+0x152>
 8006a90:	680b      	ldr	r3, [r1, #0]
 8006a92:	1d1a      	adds	r2, r3, #4
 8006a94:	600a      	str	r2, [r1, #0]
 8006a96:	681e      	ldr	r6, [r3, #0]
 8006a98:	2100      	movs	r1, #0
 8006a9a:	4630      	mov	r0, r6
 8006a9c:	6862      	ldr	r2, [r4, #4]
 8006a9e:	f002 fd17 	bl	80094d0 <memchr>
 8006aa2:	b108      	cbz	r0, 8006aa8 <_printf_i+0x1f4>
 8006aa4:	1b80      	subs	r0, r0, r6
 8006aa6:	6060      	str	r0, [r4, #4]
 8006aa8:	6863      	ldr	r3, [r4, #4]
 8006aaa:	6123      	str	r3, [r4, #16]
 8006aac:	2300      	movs	r3, #0
 8006aae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ab2:	e7a8      	b.n	8006a06 <_printf_i+0x152>
 8006ab4:	4632      	mov	r2, r6
 8006ab6:	4649      	mov	r1, r9
 8006ab8:	4640      	mov	r0, r8
 8006aba:	6923      	ldr	r3, [r4, #16]
 8006abc:	47d0      	blx	sl
 8006abe:	3001      	adds	r0, #1
 8006ac0:	d0ab      	beq.n	8006a1a <_printf_i+0x166>
 8006ac2:	6823      	ldr	r3, [r4, #0]
 8006ac4:	079b      	lsls	r3, r3, #30
 8006ac6:	d413      	bmi.n	8006af0 <_printf_i+0x23c>
 8006ac8:	68e0      	ldr	r0, [r4, #12]
 8006aca:	9b03      	ldr	r3, [sp, #12]
 8006acc:	4298      	cmp	r0, r3
 8006ace:	bfb8      	it	lt
 8006ad0:	4618      	movlt	r0, r3
 8006ad2:	e7a4      	b.n	8006a1e <_printf_i+0x16a>
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	4632      	mov	r2, r6
 8006ad8:	4649      	mov	r1, r9
 8006ada:	4640      	mov	r0, r8
 8006adc:	47d0      	blx	sl
 8006ade:	3001      	adds	r0, #1
 8006ae0:	d09b      	beq.n	8006a1a <_printf_i+0x166>
 8006ae2:	3501      	adds	r5, #1
 8006ae4:	68e3      	ldr	r3, [r4, #12]
 8006ae6:	9903      	ldr	r1, [sp, #12]
 8006ae8:	1a5b      	subs	r3, r3, r1
 8006aea:	42ab      	cmp	r3, r5
 8006aec:	dcf2      	bgt.n	8006ad4 <_printf_i+0x220>
 8006aee:	e7eb      	b.n	8006ac8 <_printf_i+0x214>
 8006af0:	2500      	movs	r5, #0
 8006af2:	f104 0619 	add.w	r6, r4, #25
 8006af6:	e7f5      	b.n	8006ae4 <_printf_i+0x230>
 8006af8:	0800a82e 	.word	0x0800a82e
 8006afc:	0800a83f 	.word	0x0800a83f

08006b00 <iprintf>:
 8006b00:	b40f      	push	{r0, r1, r2, r3}
 8006b02:	4b0a      	ldr	r3, [pc, #40]	; (8006b2c <iprintf+0x2c>)
 8006b04:	b513      	push	{r0, r1, r4, lr}
 8006b06:	681c      	ldr	r4, [r3, #0]
 8006b08:	b124      	cbz	r4, 8006b14 <iprintf+0x14>
 8006b0a:	69a3      	ldr	r3, [r4, #24]
 8006b0c:	b913      	cbnz	r3, 8006b14 <iprintf+0x14>
 8006b0e:	4620      	mov	r0, r4
 8006b10:	f002 f84a 	bl	8008ba8 <__sinit>
 8006b14:	ab05      	add	r3, sp, #20
 8006b16:	4620      	mov	r0, r4
 8006b18:	9a04      	ldr	r2, [sp, #16]
 8006b1a:	68a1      	ldr	r1, [r4, #8]
 8006b1c:	9301      	str	r3, [sp, #4]
 8006b1e:	f003 fb61 	bl	800a1e4 <_vfiprintf_r>
 8006b22:	b002      	add	sp, #8
 8006b24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b28:	b004      	add	sp, #16
 8006b2a:	4770      	bx	lr
 8006b2c:	20000018 	.word	0x20000018

08006b30 <_puts_r>:
 8006b30:	b570      	push	{r4, r5, r6, lr}
 8006b32:	460e      	mov	r6, r1
 8006b34:	4605      	mov	r5, r0
 8006b36:	b118      	cbz	r0, 8006b40 <_puts_r+0x10>
 8006b38:	6983      	ldr	r3, [r0, #24]
 8006b3a:	b90b      	cbnz	r3, 8006b40 <_puts_r+0x10>
 8006b3c:	f002 f834 	bl	8008ba8 <__sinit>
 8006b40:	69ab      	ldr	r3, [r5, #24]
 8006b42:	68ac      	ldr	r4, [r5, #8]
 8006b44:	b913      	cbnz	r3, 8006b4c <_puts_r+0x1c>
 8006b46:	4628      	mov	r0, r5
 8006b48:	f002 f82e 	bl	8008ba8 <__sinit>
 8006b4c:	4b2c      	ldr	r3, [pc, #176]	; (8006c00 <_puts_r+0xd0>)
 8006b4e:	429c      	cmp	r4, r3
 8006b50:	d120      	bne.n	8006b94 <_puts_r+0x64>
 8006b52:	686c      	ldr	r4, [r5, #4]
 8006b54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b56:	07db      	lsls	r3, r3, #31
 8006b58:	d405      	bmi.n	8006b66 <_puts_r+0x36>
 8006b5a:	89a3      	ldrh	r3, [r4, #12]
 8006b5c:	0598      	lsls	r0, r3, #22
 8006b5e:	d402      	bmi.n	8006b66 <_puts_r+0x36>
 8006b60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b62:	f002 fc2a 	bl	80093ba <__retarget_lock_acquire_recursive>
 8006b66:	89a3      	ldrh	r3, [r4, #12]
 8006b68:	0719      	lsls	r1, r3, #28
 8006b6a:	d51d      	bpl.n	8006ba8 <_puts_r+0x78>
 8006b6c:	6923      	ldr	r3, [r4, #16]
 8006b6e:	b1db      	cbz	r3, 8006ba8 <_puts_r+0x78>
 8006b70:	3e01      	subs	r6, #1
 8006b72:	68a3      	ldr	r3, [r4, #8]
 8006b74:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006b78:	3b01      	subs	r3, #1
 8006b7a:	60a3      	str	r3, [r4, #8]
 8006b7c:	bb39      	cbnz	r1, 8006bce <_puts_r+0x9e>
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	da38      	bge.n	8006bf4 <_puts_r+0xc4>
 8006b82:	4622      	mov	r2, r4
 8006b84:	210a      	movs	r1, #10
 8006b86:	4628      	mov	r0, r5
 8006b88:	f000 ff96 	bl	8007ab8 <__swbuf_r>
 8006b8c:	3001      	adds	r0, #1
 8006b8e:	d011      	beq.n	8006bb4 <_puts_r+0x84>
 8006b90:	250a      	movs	r5, #10
 8006b92:	e011      	b.n	8006bb8 <_puts_r+0x88>
 8006b94:	4b1b      	ldr	r3, [pc, #108]	; (8006c04 <_puts_r+0xd4>)
 8006b96:	429c      	cmp	r4, r3
 8006b98:	d101      	bne.n	8006b9e <_puts_r+0x6e>
 8006b9a:	68ac      	ldr	r4, [r5, #8]
 8006b9c:	e7da      	b.n	8006b54 <_puts_r+0x24>
 8006b9e:	4b1a      	ldr	r3, [pc, #104]	; (8006c08 <_puts_r+0xd8>)
 8006ba0:	429c      	cmp	r4, r3
 8006ba2:	bf08      	it	eq
 8006ba4:	68ec      	ldreq	r4, [r5, #12]
 8006ba6:	e7d5      	b.n	8006b54 <_puts_r+0x24>
 8006ba8:	4621      	mov	r1, r4
 8006baa:	4628      	mov	r0, r5
 8006bac:	f000 ffe8 	bl	8007b80 <__swsetup_r>
 8006bb0:	2800      	cmp	r0, #0
 8006bb2:	d0dd      	beq.n	8006b70 <_puts_r+0x40>
 8006bb4:	f04f 35ff 	mov.w	r5, #4294967295
 8006bb8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006bba:	07da      	lsls	r2, r3, #31
 8006bbc:	d405      	bmi.n	8006bca <_puts_r+0x9a>
 8006bbe:	89a3      	ldrh	r3, [r4, #12]
 8006bc0:	059b      	lsls	r3, r3, #22
 8006bc2:	d402      	bmi.n	8006bca <_puts_r+0x9a>
 8006bc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bc6:	f002 fbf9 	bl	80093bc <__retarget_lock_release_recursive>
 8006bca:	4628      	mov	r0, r5
 8006bcc:	bd70      	pop	{r4, r5, r6, pc}
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	da04      	bge.n	8006bdc <_puts_r+0xac>
 8006bd2:	69a2      	ldr	r2, [r4, #24]
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	dc06      	bgt.n	8006be6 <_puts_r+0xb6>
 8006bd8:	290a      	cmp	r1, #10
 8006bda:	d004      	beq.n	8006be6 <_puts_r+0xb6>
 8006bdc:	6823      	ldr	r3, [r4, #0]
 8006bde:	1c5a      	adds	r2, r3, #1
 8006be0:	6022      	str	r2, [r4, #0]
 8006be2:	7019      	strb	r1, [r3, #0]
 8006be4:	e7c5      	b.n	8006b72 <_puts_r+0x42>
 8006be6:	4622      	mov	r2, r4
 8006be8:	4628      	mov	r0, r5
 8006bea:	f000 ff65 	bl	8007ab8 <__swbuf_r>
 8006bee:	3001      	adds	r0, #1
 8006bf0:	d1bf      	bne.n	8006b72 <_puts_r+0x42>
 8006bf2:	e7df      	b.n	8006bb4 <_puts_r+0x84>
 8006bf4:	250a      	movs	r5, #10
 8006bf6:	6823      	ldr	r3, [r4, #0]
 8006bf8:	1c5a      	adds	r2, r3, #1
 8006bfa:	6022      	str	r2, [r4, #0]
 8006bfc:	701d      	strb	r5, [r3, #0]
 8006bfe:	e7db      	b.n	8006bb8 <_puts_r+0x88>
 8006c00:	0800a954 	.word	0x0800a954
 8006c04:	0800a974 	.word	0x0800a974
 8006c08:	0800a934 	.word	0x0800a934

08006c0c <puts>:
 8006c0c:	4b02      	ldr	r3, [pc, #8]	; (8006c18 <puts+0xc>)
 8006c0e:	4601      	mov	r1, r0
 8006c10:	6818      	ldr	r0, [r3, #0]
 8006c12:	f7ff bf8d 	b.w	8006b30 <_puts_r>
 8006c16:	bf00      	nop
 8006c18:	20000018 	.word	0x20000018

08006c1c <realloc>:
 8006c1c:	4b02      	ldr	r3, [pc, #8]	; (8006c28 <realloc+0xc>)
 8006c1e:	460a      	mov	r2, r1
 8006c20:	4601      	mov	r1, r0
 8006c22:	6818      	ldr	r0, [r3, #0]
 8006c24:	f003 b934 	b.w	8009e90 <_realloc_r>
 8006c28:	20000018 	.word	0x20000018

08006c2c <_sbrk_r>:
 8006c2c:	b538      	push	{r3, r4, r5, lr}
 8006c2e:	2300      	movs	r3, #0
 8006c30:	4d05      	ldr	r5, [pc, #20]	; (8006c48 <_sbrk_r+0x1c>)
 8006c32:	4604      	mov	r4, r0
 8006c34:	4608      	mov	r0, r1
 8006c36:	602b      	str	r3, [r5, #0]
 8006c38:	f7fc f8f6 	bl	8002e28 <_sbrk>
 8006c3c:	1c43      	adds	r3, r0, #1
 8006c3e:	d102      	bne.n	8006c46 <_sbrk_r+0x1a>
 8006c40:	682b      	ldr	r3, [r5, #0]
 8006c42:	b103      	cbz	r3, 8006c46 <_sbrk_r+0x1a>
 8006c44:	6023      	str	r3, [r4, #0]
 8006c46:	bd38      	pop	{r3, r4, r5, pc}
 8006c48:	20000554 	.word	0x20000554

08006c4c <siprintf>:
 8006c4c:	b40e      	push	{r1, r2, r3}
 8006c4e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006c52:	b500      	push	{lr}
 8006c54:	b09c      	sub	sp, #112	; 0x70
 8006c56:	ab1d      	add	r3, sp, #116	; 0x74
 8006c58:	9002      	str	r0, [sp, #8]
 8006c5a:	9006      	str	r0, [sp, #24]
 8006c5c:	9107      	str	r1, [sp, #28]
 8006c5e:	9104      	str	r1, [sp, #16]
 8006c60:	4808      	ldr	r0, [pc, #32]	; (8006c84 <siprintf+0x38>)
 8006c62:	4909      	ldr	r1, [pc, #36]	; (8006c88 <siprintf+0x3c>)
 8006c64:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c68:	9105      	str	r1, [sp, #20]
 8006c6a:	6800      	ldr	r0, [r0, #0]
 8006c6c:	a902      	add	r1, sp, #8
 8006c6e:	9301      	str	r3, [sp, #4]
 8006c70:	f003 f990 	bl	8009f94 <_svfiprintf_r>
 8006c74:	2200      	movs	r2, #0
 8006c76:	9b02      	ldr	r3, [sp, #8]
 8006c78:	701a      	strb	r2, [r3, #0]
 8006c7a:	b01c      	add	sp, #112	; 0x70
 8006c7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c80:	b003      	add	sp, #12
 8006c82:	4770      	bx	lr
 8006c84:	20000018 	.word	0x20000018
 8006c88:	ffff0208 	.word	0xffff0208

08006c8c <__sread>:
 8006c8c:	b510      	push	{r4, lr}
 8006c8e:	460c      	mov	r4, r1
 8006c90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c94:	f003 fbd6 	bl	800a444 <_read_r>
 8006c98:	2800      	cmp	r0, #0
 8006c9a:	bfab      	itete	ge
 8006c9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006c9e:	89a3      	ldrhlt	r3, [r4, #12]
 8006ca0:	181b      	addge	r3, r3, r0
 8006ca2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006ca6:	bfac      	ite	ge
 8006ca8:	6563      	strge	r3, [r4, #84]	; 0x54
 8006caa:	81a3      	strhlt	r3, [r4, #12]
 8006cac:	bd10      	pop	{r4, pc}

08006cae <__swrite>:
 8006cae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cb2:	461f      	mov	r7, r3
 8006cb4:	898b      	ldrh	r3, [r1, #12]
 8006cb6:	4605      	mov	r5, r0
 8006cb8:	05db      	lsls	r3, r3, #23
 8006cba:	460c      	mov	r4, r1
 8006cbc:	4616      	mov	r6, r2
 8006cbe:	d505      	bpl.n	8006ccc <__swrite+0x1e>
 8006cc0:	2302      	movs	r3, #2
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cc8:	f002 fb7a 	bl	80093c0 <_lseek_r>
 8006ccc:	89a3      	ldrh	r3, [r4, #12]
 8006cce:	4632      	mov	r2, r6
 8006cd0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006cd4:	81a3      	strh	r3, [r4, #12]
 8006cd6:	4628      	mov	r0, r5
 8006cd8:	463b      	mov	r3, r7
 8006cda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006cde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ce2:	f000 bf3b 	b.w	8007b5c <_write_r>

08006ce6 <__sseek>:
 8006ce6:	b510      	push	{r4, lr}
 8006ce8:	460c      	mov	r4, r1
 8006cea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cee:	f002 fb67 	bl	80093c0 <_lseek_r>
 8006cf2:	1c43      	adds	r3, r0, #1
 8006cf4:	89a3      	ldrh	r3, [r4, #12]
 8006cf6:	bf15      	itete	ne
 8006cf8:	6560      	strne	r0, [r4, #84]	; 0x54
 8006cfa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006cfe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006d02:	81a3      	strheq	r3, [r4, #12]
 8006d04:	bf18      	it	ne
 8006d06:	81a3      	strhne	r3, [r4, #12]
 8006d08:	bd10      	pop	{r4, pc}

08006d0a <__sclose>:
 8006d0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d0e:	f000 bfa5 	b.w	8007c5c <_close_r>

08006d12 <strcat>:
 8006d12:	4602      	mov	r2, r0
 8006d14:	b510      	push	{r4, lr}
 8006d16:	7814      	ldrb	r4, [r2, #0]
 8006d18:	4613      	mov	r3, r2
 8006d1a:	3201      	adds	r2, #1
 8006d1c:	2c00      	cmp	r4, #0
 8006d1e:	d1fa      	bne.n	8006d16 <strcat+0x4>
 8006d20:	3b01      	subs	r3, #1
 8006d22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006d2a:	2a00      	cmp	r2, #0
 8006d2c:	d1f9      	bne.n	8006d22 <strcat+0x10>
 8006d2e:	bd10      	pop	{r4, pc}

08006d30 <strncmp>:
 8006d30:	b510      	push	{r4, lr}
 8006d32:	b16a      	cbz	r2, 8006d50 <strncmp+0x20>
 8006d34:	3901      	subs	r1, #1
 8006d36:	1884      	adds	r4, r0, r2
 8006d38:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006d3c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d103      	bne.n	8006d4c <strncmp+0x1c>
 8006d44:	42a0      	cmp	r0, r4
 8006d46:	d001      	beq.n	8006d4c <strncmp+0x1c>
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d1f5      	bne.n	8006d38 <strncmp+0x8>
 8006d4c:	1a98      	subs	r0, r3, r2
 8006d4e:	bd10      	pop	{r4, pc}
 8006d50:	4610      	mov	r0, r2
 8006d52:	e7fc      	b.n	8006d4e <strncmp+0x1e>

08006d54 <sulp>:
 8006d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d58:	460f      	mov	r7, r1
 8006d5a:	4690      	mov	r8, r2
 8006d5c:	f002 ff42 	bl	8009be4 <__ulp>
 8006d60:	4604      	mov	r4, r0
 8006d62:	460d      	mov	r5, r1
 8006d64:	f1b8 0f00 	cmp.w	r8, #0
 8006d68:	d011      	beq.n	8006d8e <sulp+0x3a>
 8006d6a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006d6e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	dd0b      	ble.n	8006d8e <sulp+0x3a>
 8006d76:	2400      	movs	r4, #0
 8006d78:	051b      	lsls	r3, r3, #20
 8006d7a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006d7e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006d82:	4622      	mov	r2, r4
 8006d84:	462b      	mov	r3, r5
 8006d86:	f7f9 fbb1 	bl	80004ec <__aeabi_dmul>
 8006d8a:	4604      	mov	r4, r0
 8006d8c:	460d      	mov	r5, r1
 8006d8e:	4620      	mov	r0, r4
 8006d90:	4629      	mov	r1, r5
 8006d92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08006d98 <_strtod_l>:
 8006d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d9c:	469b      	mov	fp, r3
 8006d9e:	2300      	movs	r3, #0
 8006da0:	b0a1      	sub	sp, #132	; 0x84
 8006da2:	931c      	str	r3, [sp, #112]	; 0x70
 8006da4:	4ba1      	ldr	r3, [pc, #644]	; (800702c <_strtod_l+0x294>)
 8006da6:	4682      	mov	sl, r0
 8006da8:	681f      	ldr	r7, [r3, #0]
 8006daa:	460e      	mov	r6, r1
 8006dac:	4638      	mov	r0, r7
 8006dae:	9217      	str	r2, [sp, #92]	; 0x5c
 8006db0:	f7f9 f9d8 	bl	8000164 <strlen>
 8006db4:	f04f 0800 	mov.w	r8, #0
 8006db8:	4604      	mov	r4, r0
 8006dba:	f04f 0900 	mov.w	r9, #0
 8006dbe:	961b      	str	r6, [sp, #108]	; 0x6c
 8006dc0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006dc2:	781a      	ldrb	r2, [r3, #0]
 8006dc4:	2a2b      	cmp	r2, #43	; 0x2b
 8006dc6:	d04c      	beq.n	8006e62 <_strtod_l+0xca>
 8006dc8:	d83a      	bhi.n	8006e40 <_strtod_l+0xa8>
 8006dca:	2a0d      	cmp	r2, #13
 8006dcc:	d833      	bhi.n	8006e36 <_strtod_l+0x9e>
 8006dce:	2a08      	cmp	r2, #8
 8006dd0:	d833      	bhi.n	8006e3a <_strtod_l+0xa2>
 8006dd2:	2a00      	cmp	r2, #0
 8006dd4:	d03d      	beq.n	8006e52 <_strtod_l+0xba>
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	930c      	str	r3, [sp, #48]	; 0x30
 8006dda:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8006ddc:	782b      	ldrb	r3, [r5, #0]
 8006dde:	2b30      	cmp	r3, #48	; 0x30
 8006de0:	f040 80af 	bne.w	8006f42 <_strtod_l+0x1aa>
 8006de4:	786b      	ldrb	r3, [r5, #1]
 8006de6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006dea:	2b58      	cmp	r3, #88	; 0x58
 8006dec:	d16c      	bne.n	8006ec8 <_strtod_l+0x130>
 8006dee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006df0:	4650      	mov	r0, sl
 8006df2:	9301      	str	r3, [sp, #4]
 8006df4:	ab1c      	add	r3, sp, #112	; 0x70
 8006df6:	9300      	str	r3, [sp, #0]
 8006df8:	4a8d      	ldr	r2, [pc, #564]	; (8007030 <_strtod_l+0x298>)
 8006dfa:	f8cd b008 	str.w	fp, [sp, #8]
 8006dfe:	ab1d      	add	r3, sp, #116	; 0x74
 8006e00:	a91b      	add	r1, sp, #108	; 0x6c
 8006e02:	f001 ffd7 	bl	8008db4 <__gethex>
 8006e06:	f010 0607 	ands.w	r6, r0, #7
 8006e0a:	4604      	mov	r4, r0
 8006e0c:	d005      	beq.n	8006e1a <_strtod_l+0x82>
 8006e0e:	2e06      	cmp	r6, #6
 8006e10:	d129      	bne.n	8006e66 <_strtod_l+0xce>
 8006e12:	2300      	movs	r3, #0
 8006e14:	3501      	adds	r5, #1
 8006e16:	951b      	str	r5, [sp, #108]	; 0x6c
 8006e18:	930c      	str	r3, [sp, #48]	; 0x30
 8006e1a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	f040 8596 	bne.w	800794e <_strtod_l+0xbb6>
 8006e22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e24:	b1d3      	cbz	r3, 8006e5c <_strtod_l+0xc4>
 8006e26:	4642      	mov	r2, r8
 8006e28:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006e2c:	4610      	mov	r0, r2
 8006e2e:	4619      	mov	r1, r3
 8006e30:	b021      	add	sp, #132	; 0x84
 8006e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e36:	2a20      	cmp	r2, #32
 8006e38:	d1cd      	bne.n	8006dd6 <_strtod_l+0x3e>
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	931b      	str	r3, [sp, #108]	; 0x6c
 8006e3e:	e7bf      	b.n	8006dc0 <_strtod_l+0x28>
 8006e40:	2a2d      	cmp	r2, #45	; 0x2d
 8006e42:	d1c8      	bne.n	8006dd6 <_strtod_l+0x3e>
 8006e44:	2201      	movs	r2, #1
 8006e46:	920c      	str	r2, [sp, #48]	; 0x30
 8006e48:	1c5a      	adds	r2, r3, #1
 8006e4a:	921b      	str	r2, [sp, #108]	; 0x6c
 8006e4c:	785b      	ldrb	r3, [r3, #1]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d1c3      	bne.n	8006dda <_strtod_l+0x42>
 8006e52:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006e54:	961b      	str	r6, [sp, #108]	; 0x6c
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	f040 8577 	bne.w	800794a <_strtod_l+0xbb2>
 8006e5c:	4642      	mov	r2, r8
 8006e5e:	464b      	mov	r3, r9
 8006e60:	e7e4      	b.n	8006e2c <_strtod_l+0x94>
 8006e62:	2200      	movs	r2, #0
 8006e64:	e7ef      	b.n	8006e46 <_strtod_l+0xae>
 8006e66:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006e68:	b13a      	cbz	r2, 8006e7a <_strtod_l+0xe2>
 8006e6a:	2135      	movs	r1, #53	; 0x35
 8006e6c:	a81e      	add	r0, sp, #120	; 0x78
 8006e6e:	f002 ffbd 	bl	8009dec <__copybits>
 8006e72:	4650      	mov	r0, sl
 8006e74:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006e76:	f002 fb85 	bl	8009584 <_Bfree>
 8006e7a:	3e01      	subs	r6, #1
 8006e7c:	2e05      	cmp	r6, #5
 8006e7e:	d807      	bhi.n	8006e90 <_strtod_l+0xf8>
 8006e80:	e8df f006 	tbb	[pc, r6]
 8006e84:	1d180b0e 	.word	0x1d180b0e
 8006e88:	030e      	.short	0x030e
 8006e8a:	f04f 0900 	mov.w	r9, #0
 8006e8e:	46c8      	mov	r8, r9
 8006e90:	0721      	lsls	r1, r4, #28
 8006e92:	d5c2      	bpl.n	8006e1a <_strtod_l+0x82>
 8006e94:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8006e98:	e7bf      	b.n	8006e1a <_strtod_l+0x82>
 8006e9a:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 8006e9e:	e7f7      	b.n	8006e90 <_strtod_l+0xf8>
 8006ea0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006ea2:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 8006ea6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006eaa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006eae:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8006eb2:	e7ed      	b.n	8006e90 <_strtod_l+0xf8>
 8006eb4:	f04f 0800 	mov.w	r8, #0
 8006eb8:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007034 <_strtod_l+0x29c>
 8006ebc:	e7e8      	b.n	8006e90 <_strtod_l+0xf8>
 8006ebe:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006ec2:	f04f 38ff 	mov.w	r8, #4294967295
 8006ec6:	e7e3      	b.n	8006e90 <_strtod_l+0xf8>
 8006ec8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006eca:	1c5a      	adds	r2, r3, #1
 8006ecc:	921b      	str	r2, [sp, #108]	; 0x6c
 8006ece:	785b      	ldrb	r3, [r3, #1]
 8006ed0:	2b30      	cmp	r3, #48	; 0x30
 8006ed2:	d0f9      	beq.n	8006ec8 <_strtod_l+0x130>
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d0a0      	beq.n	8006e1a <_strtod_l+0x82>
 8006ed8:	2301      	movs	r3, #1
 8006eda:	9307      	str	r3, [sp, #28]
 8006edc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006ede:	220a      	movs	r2, #10
 8006ee0:	9308      	str	r3, [sp, #32]
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	469b      	mov	fp, r3
 8006ee6:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8006eea:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8006eec:	7805      	ldrb	r5, [r0, #0]
 8006eee:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8006ef2:	b2d9      	uxtb	r1, r3
 8006ef4:	2909      	cmp	r1, #9
 8006ef6:	d926      	bls.n	8006f46 <_strtod_l+0x1ae>
 8006ef8:	4622      	mov	r2, r4
 8006efa:	4639      	mov	r1, r7
 8006efc:	f7ff ff18 	bl	8006d30 <strncmp>
 8006f00:	2800      	cmp	r0, #0
 8006f02:	d032      	beq.n	8006f6a <_strtod_l+0x1d2>
 8006f04:	2000      	movs	r0, #0
 8006f06:	462b      	mov	r3, r5
 8006f08:	465c      	mov	r4, fp
 8006f0a:	4602      	mov	r2, r0
 8006f0c:	9004      	str	r0, [sp, #16]
 8006f0e:	2b65      	cmp	r3, #101	; 0x65
 8006f10:	d001      	beq.n	8006f16 <_strtod_l+0x17e>
 8006f12:	2b45      	cmp	r3, #69	; 0x45
 8006f14:	d113      	bne.n	8006f3e <_strtod_l+0x1a6>
 8006f16:	b91c      	cbnz	r4, 8006f20 <_strtod_l+0x188>
 8006f18:	9b07      	ldr	r3, [sp, #28]
 8006f1a:	4303      	orrs	r3, r0
 8006f1c:	d099      	beq.n	8006e52 <_strtod_l+0xba>
 8006f1e:	2400      	movs	r4, #0
 8006f20:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8006f22:	1c73      	adds	r3, r6, #1
 8006f24:	931b      	str	r3, [sp, #108]	; 0x6c
 8006f26:	7873      	ldrb	r3, [r6, #1]
 8006f28:	2b2b      	cmp	r3, #43	; 0x2b
 8006f2a:	d078      	beq.n	800701e <_strtod_l+0x286>
 8006f2c:	2b2d      	cmp	r3, #45	; 0x2d
 8006f2e:	d07b      	beq.n	8007028 <_strtod_l+0x290>
 8006f30:	2700      	movs	r7, #0
 8006f32:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006f36:	2909      	cmp	r1, #9
 8006f38:	f240 8082 	bls.w	8007040 <_strtod_l+0x2a8>
 8006f3c:	961b      	str	r6, [sp, #108]	; 0x6c
 8006f3e:	2500      	movs	r5, #0
 8006f40:	e09e      	b.n	8007080 <_strtod_l+0x2e8>
 8006f42:	2300      	movs	r3, #0
 8006f44:	e7c9      	b.n	8006eda <_strtod_l+0x142>
 8006f46:	f1bb 0f08 	cmp.w	fp, #8
 8006f4a:	bfd5      	itete	le
 8006f4c:	9906      	ldrle	r1, [sp, #24]
 8006f4e:	9905      	ldrgt	r1, [sp, #20]
 8006f50:	fb02 3301 	mlale	r3, r2, r1, r3
 8006f54:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006f58:	f100 0001 	add.w	r0, r0, #1
 8006f5c:	bfd4      	ite	le
 8006f5e:	9306      	strle	r3, [sp, #24]
 8006f60:	9305      	strgt	r3, [sp, #20]
 8006f62:	f10b 0b01 	add.w	fp, fp, #1
 8006f66:	901b      	str	r0, [sp, #108]	; 0x6c
 8006f68:	e7bf      	b.n	8006eea <_strtod_l+0x152>
 8006f6a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006f6c:	191a      	adds	r2, r3, r4
 8006f6e:	921b      	str	r2, [sp, #108]	; 0x6c
 8006f70:	5d1b      	ldrb	r3, [r3, r4]
 8006f72:	f1bb 0f00 	cmp.w	fp, #0
 8006f76:	d036      	beq.n	8006fe6 <_strtod_l+0x24e>
 8006f78:	465c      	mov	r4, fp
 8006f7a:	9004      	str	r0, [sp, #16]
 8006f7c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8006f80:	2a09      	cmp	r2, #9
 8006f82:	d912      	bls.n	8006faa <_strtod_l+0x212>
 8006f84:	2201      	movs	r2, #1
 8006f86:	e7c2      	b.n	8006f0e <_strtod_l+0x176>
 8006f88:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006f8a:	3001      	adds	r0, #1
 8006f8c:	1c5a      	adds	r2, r3, #1
 8006f8e:	921b      	str	r2, [sp, #108]	; 0x6c
 8006f90:	785b      	ldrb	r3, [r3, #1]
 8006f92:	2b30      	cmp	r3, #48	; 0x30
 8006f94:	d0f8      	beq.n	8006f88 <_strtod_l+0x1f0>
 8006f96:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8006f9a:	2a08      	cmp	r2, #8
 8006f9c:	f200 84dc 	bhi.w	8007958 <_strtod_l+0xbc0>
 8006fa0:	9004      	str	r0, [sp, #16]
 8006fa2:	2000      	movs	r0, #0
 8006fa4:	4604      	mov	r4, r0
 8006fa6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006fa8:	9208      	str	r2, [sp, #32]
 8006faa:	3b30      	subs	r3, #48	; 0x30
 8006fac:	f100 0201 	add.w	r2, r0, #1
 8006fb0:	d013      	beq.n	8006fda <_strtod_l+0x242>
 8006fb2:	9904      	ldr	r1, [sp, #16]
 8006fb4:	1905      	adds	r5, r0, r4
 8006fb6:	4411      	add	r1, r2
 8006fb8:	9104      	str	r1, [sp, #16]
 8006fba:	4622      	mov	r2, r4
 8006fbc:	210a      	movs	r1, #10
 8006fbe:	42aa      	cmp	r2, r5
 8006fc0:	d113      	bne.n	8006fea <_strtod_l+0x252>
 8006fc2:	1822      	adds	r2, r4, r0
 8006fc4:	2a08      	cmp	r2, #8
 8006fc6:	f104 0401 	add.w	r4, r4, #1
 8006fca:	4404      	add	r4, r0
 8006fcc:	dc1b      	bgt.n	8007006 <_strtod_l+0x26e>
 8006fce:	220a      	movs	r2, #10
 8006fd0:	9906      	ldr	r1, [sp, #24]
 8006fd2:	fb02 3301 	mla	r3, r2, r1, r3
 8006fd6:	9306      	str	r3, [sp, #24]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006fdc:	4610      	mov	r0, r2
 8006fde:	1c59      	adds	r1, r3, #1
 8006fe0:	911b      	str	r1, [sp, #108]	; 0x6c
 8006fe2:	785b      	ldrb	r3, [r3, #1]
 8006fe4:	e7ca      	b.n	8006f7c <_strtod_l+0x1e4>
 8006fe6:	4658      	mov	r0, fp
 8006fe8:	e7d3      	b.n	8006f92 <_strtod_l+0x1fa>
 8006fea:	2a08      	cmp	r2, #8
 8006fec:	dc04      	bgt.n	8006ff8 <_strtod_l+0x260>
 8006fee:	9f06      	ldr	r7, [sp, #24]
 8006ff0:	434f      	muls	r7, r1
 8006ff2:	9706      	str	r7, [sp, #24]
 8006ff4:	3201      	adds	r2, #1
 8006ff6:	e7e2      	b.n	8006fbe <_strtod_l+0x226>
 8006ff8:	1c57      	adds	r7, r2, #1
 8006ffa:	2f10      	cmp	r7, #16
 8006ffc:	bfde      	ittt	le
 8006ffe:	9f05      	ldrle	r7, [sp, #20]
 8007000:	434f      	mulle	r7, r1
 8007002:	9705      	strle	r7, [sp, #20]
 8007004:	e7f6      	b.n	8006ff4 <_strtod_l+0x25c>
 8007006:	2c10      	cmp	r4, #16
 8007008:	bfdf      	itttt	le
 800700a:	220a      	movle	r2, #10
 800700c:	9905      	ldrle	r1, [sp, #20]
 800700e:	fb02 3301 	mlale	r3, r2, r1, r3
 8007012:	9305      	strle	r3, [sp, #20]
 8007014:	e7e0      	b.n	8006fd8 <_strtod_l+0x240>
 8007016:	2300      	movs	r3, #0
 8007018:	2201      	movs	r2, #1
 800701a:	9304      	str	r3, [sp, #16]
 800701c:	e77c      	b.n	8006f18 <_strtod_l+0x180>
 800701e:	2700      	movs	r7, #0
 8007020:	1cb3      	adds	r3, r6, #2
 8007022:	931b      	str	r3, [sp, #108]	; 0x6c
 8007024:	78b3      	ldrb	r3, [r6, #2]
 8007026:	e784      	b.n	8006f32 <_strtod_l+0x19a>
 8007028:	2701      	movs	r7, #1
 800702a:	e7f9      	b.n	8007020 <_strtod_l+0x288>
 800702c:	0800aa00 	.word	0x0800aa00
 8007030:	0800a850 	.word	0x0800a850
 8007034:	7ff00000 	.word	0x7ff00000
 8007038:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800703a:	1c59      	adds	r1, r3, #1
 800703c:	911b      	str	r1, [sp, #108]	; 0x6c
 800703e:	785b      	ldrb	r3, [r3, #1]
 8007040:	2b30      	cmp	r3, #48	; 0x30
 8007042:	d0f9      	beq.n	8007038 <_strtod_l+0x2a0>
 8007044:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8007048:	2908      	cmp	r1, #8
 800704a:	f63f af78 	bhi.w	8006f3e <_strtod_l+0x1a6>
 800704e:	f04f 0e0a 	mov.w	lr, #10
 8007052:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8007056:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007058:	9309      	str	r3, [sp, #36]	; 0x24
 800705a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800705c:	1c59      	adds	r1, r3, #1
 800705e:	911b      	str	r1, [sp, #108]	; 0x6c
 8007060:	785b      	ldrb	r3, [r3, #1]
 8007062:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8007066:	2d09      	cmp	r5, #9
 8007068:	d935      	bls.n	80070d6 <_strtod_l+0x33e>
 800706a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800706c:	1b49      	subs	r1, r1, r5
 800706e:	2908      	cmp	r1, #8
 8007070:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8007074:	dc02      	bgt.n	800707c <_strtod_l+0x2e4>
 8007076:	4565      	cmp	r5, ip
 8007078:	bfa8      	it	ge
 800707a:	4665      	movge	r5, ip
 800707c:	b107      	cbz	r7, 8007080 <_strtod_l+0x2e8>
 800707e:	426d      	negs	r5, r5
 8007080:	2c00      	cmp	r4, #0
 8007082:	d14c      	bne.n	800711e <_strtod_l+0x386>
 8007084:	9907      	ldr	r1, [sp, #28]
 8007086:	4301      	orrs	r1, r0
 8007088:	f47f aec7 	bne.w	8006e1a <_strtod_l+0x82>
 800708c:	2a00      	cmp	r2, #0
 800708e:	f47f aee0 	bne.w	8006e52 <_strtod_l+0xba>
 8007092:	2b69      	cmp	r3, #105	; 0x69
 8007094:	d026      	beq.n	80070e4 <_strtod_l+0x34c>
 8007096:	dc23      	bgt.n	80070e0 <_strtod_l+0x348>
 8007098:	2b49      	cmp	r3, #73	; 0x49
 800709a:	d023      	beq.n	80070e4 <_strtod_l+0x34c>
 800709c:	2b4e      	cmp	r3, #78	; 0x4e
 800709e:	f47f aed8 	bne.w	8006e52 <_strtod_l+0xba>
 80070a2:	499c      	ldr	r1, [pc, #624]	; (8007314 <_strtod_l+0x57c>)
 80070a4:	a81b      	add	r0, sp, #108	; 0x6c
 80070a6:	f002 f8d3 	bl	8009250 <__match>
 80070aa:	2800      	cmp	r0, #0
 80070ac:	f43f aed1 	beq.w	8006e52 <_strtod_l+0xba>
 80070b0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	2b28      	cmp	r3, #40	; 0x28
 80070b6:	d12c      	bne.n	8007112 <_strtod_l+0x37a>
 80070b8:	4997      	ldr	r1, [pc, #604]	; (8007318 <_strtod_l+0x580>)
 80070ba:	aa1e      	add	r2, sp, #120	; 0x78
 80070bc:	a81b      	add	r0, sp, #108	; 0x6c
 80070be:	f002 f8db 	bl	8009278 <__hexnan>
 80070c2:	2805      	cmp	r0, #5
 80070c4:	d125      	bne.n	8007112 <_strtod_l+0x37a>
 80070c6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80070c8:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 80070cc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80070d0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80070d4:	e6a1      	b.n	8006e1a <_strtod_l+0x82>
 80070d6:	fb0e 3c0c 	mla	ip, lr, ip, r3
 80070da:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80070de:	e7bc      	b.n	800705a <_strtod_l+0x2c2>
 80070e0:	2b6e      	cmp	r3, #110	; 0x6e
 80070e2:	e7dc      	b.n	800709e <_strtod_l+0x306>
 80070e4:	498d      	ldr	r1, [pc, #564]	; (800731c <_strtod_l+0x584>)
 80070e6:	a81b      	add	r0, sp, #108	; 0x6c
 80070e8:	f002 f8b2 	bl	8009250 <__match>
 80070ec:	2800      	cmp	r0, #0
 80070ee:	f43f aeb0 	beq.w	8006e52 <_strtod_l+0xba>
 80070f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80070f4:	498a      	ldr	r1, [pc, #552]	; (8007320 <_strtod_l+0x588>)
 80070f6:	3b01      	subs	r3, #1
 80070f8:	a81b      	add	r0, sp, #108	; 0x6c
 80070fa:	931b      	str	r3, [sp, #108]	; 0x6c
 80070fc:	f002 f8a8 	bl	8009250 <__match>
 8007100:	b910      	cbnz	r0, 8007108 <_strtod_l+0x370>
 8007102:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007104:	3301      	adds	r3, #1
 8007106:	931b      	str	r3, [sp, #108]	; 0x6c
 8007108:	f04f 0800 	mov.w	r8, #0
 800710c:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8007330 <_strtod_l+0x598>
 8007110:	e683      	b.n	8006e1a <_strtod_l+0x82>
 8007112:	4884      	ldr	r0, [pc, #528]	; (8007324 <_strtod_l+0x58c>)
 8007114:	f003 f9a8 	bl	800a468 <nan>
 8007118:	4680      	mov	r8, r0
 800711a:	4689      	mov	r9, r1
 800711c:	e67d      	b.n	8006e1a <_strtod_l+0x82>
 800711e:	9b04      	ldr	r3, [sp, #16]
 8007120:	f1bb 0f00 	cmp.w	fp, #0
 8007124:	bf08      	it	eq
 8007126:	46a3      	moveq	fp, r4
 8007128:	1aeb      	subs	r3, r5, r3
 800712a:	2c10      	cmp	r4, #16
 800712c:	9806      	ldr	r0, [sp, #24]
 800712e:	4626      	mov	r6, r4
 8007130:	9307      	str	r3, [sp, #28]
 8007132:	bfa8      	it	ge
 8007134:	2610      	movge	r6, #16
 8007136:	f7f9 f95f 	bl	80003f8 <__aeabi_ui2d>
 800713a:	2c09      	cmp	r4, #9
 800713c:	4680      	mov	r8, r0
 800713e:	4689      	mov	r9, r1
 8007140:	dd13      	ble.n	800716a <_strtod_l+0x3d2>
 8007142:	4b79      	ldr	r3, [pc, #484]	; (8007328 <_strtod_l+0x590>)
 8007144:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007148:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800714c:	f7f9 f9ce 	bl	80004ec <__aeabi_dmul>
 8007150:	4680      	mov	r8, r0
 8007152:	9805      	ldr	r0, [sp, #20]
 8007154:	4689      	mov	r9, r1
 8007156:	f7f9 f94f 	bl	80003f8 <__aeabi_ui2d>
 800715a:	4602      	mov	r2, r0
 800715c:	460b      	mov	r3, r1
 800715e:	4640      	mov	r0, r8
 8007160:	4649      	mov	r1, r9
 8007162:	f7f9 f80d 	bl	8000180 <__adddf3>
 8007166:	4680      	mov	r8, r0
 8007168:	4689      	mov	r9, r1
 800716a:	2c0f      	cmp	r4, #15
 800716c:	dc36      	bgt.n	80071dc <_strtod_l+0x444>
 800716e:	9b07      	ldr	r3, [sp, #28]
 8007170:	2b00      	cmp	r3, #0
 8007172:	f43f ae52 	beq.w	8006e1a <_strtod_l+0x82>
 8007176:	dd22      	ble.n	80071be <_strtod_l+0x426>
 8007178:	2b16      	cmp	r3, #22
 800717a:	dc09      	bgt.n	8007190 <_strtod_l+0x3f8>
 800717c:	4c6a      	ldr	r4, [pc, #424]	; (8007328 <_strtod_l+0x590>)
 800717e:	4642      	mov	r2, r8
 8007180:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8007184:	464b      	mov	r3, r9
 8007186:	e9d4 0100 	ldrd	r0, r1, [r4]
 800718a:	f7f9 f9af 	bl	80004ec <__aeabi_dmul>
 800718e:	e7c3      	b.n	8007118 <_strtod_l+0x380>
 8007190:	9a07      	ldr	r2, [sp, #28]
 8007192:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8007196:	4293      	cmp	r3, r2
 8007198:	db20      	blt.n	80071dc <_strtod_l+0x444>
 800719a:	4d63      	ldr	r5, [pc, #396]	; (8007328 <_strtod_l+0x590>)
 800719c:	f1c4 040f 	rsb	r4, r4, #15
 80071a0:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80071a4:	4642      	mov	r2, r8
 80071a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071aa:	464b      	mov	r3, r9
 80071ac:	f7f9 f99e 	bl	80004ec <__aeabi_dmul>
 80071b0:	9b07      	ldr	r3, [sp, #28]
 80071b2:	1b1c      	subs	r4, r3, r4
 80071b4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80071b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80071bc:	e7e5      	b.n	800718a <_strtod_l+0x3f2>
 80071be:	9b07      	ldr	r3, [sp, #28]
 80071c0:	3316      	adds	r3, #22
 80071c2:	db0b      	blt.n	80071dc <_strtod_l+0x444>
 80071c4:	9b04      	ldr	r3, [sp, #16]
 80071c6:	4a58      	ldr	r2, [pc, #352]	; (8007328 <_strtod_l+0x590>)
 80071c8:	1b5d      	subs	r5, r3, r5
 80071ca:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80071ce:	4640      	mov	r0, r8
 80071d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80071d4:	4649      	mov	r1, r9
 80071d6:	f7f9 fab3 	bl	8000740 <__aeabi_ddiv>
 80071da:	e79d      	b.n	8007118 <_strtod_l+0x380>
 80071dc:	9b07      	ldr	r3, [sp, #28]
 80071de:	1ba6      	subs	r6, r4, r6
 80071e0:	441e      	add	r6, r3
 80071e2:	2e00      	cmp	r6, #0
 80071e4:	dd71      	ble.n	80072ca <_strtod_l+0x532>
 80071e6:	f016 030f 	ands.w	r3, r6, #15
 80071ea:	d00a      	beq.n	8007202 <_strtod_l+0x46a>
 80071ec:	494e      	ldr	r1, [pc, #312]	; (8007328 <_strtod_l+0x590>)
 80071ee:	4642      	mov	r2, r8
 80071f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80071f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071f8:	464b      	mov	r3, r9
 80071fa:	f7f9 f977 	bl	80004ec <__aeabi_dmul>
 80071fe:	4680      	mov	r8, r0
 8007200:	4689      	mov	r9, r1
 8007202:	f036 060f 	bics.w	r6, r6, #15
 8007206:	d050      	beq.n	80072aa <_strtod_l+0x512>
 8007208:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800720c:	dd27      	ble.n	800725e <_strtod_l+0x4c6>
 800720e:	f04f 0b00 	mov.w	fp, #0
 8007212:	f8cd b010 	str.w	fp, [sp, #16]
 8007216:	f8cd b020 	str.w	fp, [sp, #32]
 800721a:	f8cd b018 	str.w	fp, [sp, #24]
 800721e:	2322      	movs	r3, #34	; 0x22
 8007220:	f04f 0800 	mov.w	r8, #0
 8007224:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8007330 <_strtod_l+0x598>
 8007228:	f8ca 3000 	str.w	r3, [sl]
 800722c:	9b08      	ldr	r3, [sp, #32]
 800722e:	2b00      	cmp	r3, #0
 8007230:	f43f adf3 	beq.w	8006e1a <_strtod_l+0x82>
 8007234:	4650      	mov	r0, sl
 8007236:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007238:	f002 f9a4 	bl	8009584 <_Bfree>
 800723c:	4650      	mov	r0, sl
 800723e:	9906      	ldr	r1, [sp, #24]
 8007240:	f002 f9a0 	bl	8009584 <_Bfree>
 8007244:	4650      	mov	r0, sl
 8007246:	9904      	ldr	r1, [sp, #16]
 8007248:	f002 f99c 	bl	8009584 <_Bfree>
 800724c:	4650      	mov	r0, sl
 800724e:	9908      	ldr	r1, [sp, #32]
 8007250:	f002 f998 	bl	8009584 <_Bfree>
 8007254:	4659      	mov	r1, fp
 8007256:	4650      	mov	r0, sl
 8007258:	f002 f994 	bl	8009584 <_Bfree>
 800725c:	e5dd      	b.n	8006e1a <_strtod_l+0x82>
 800725e:	2300      	movs	r3, #0
 8007260:	4640      	mov	r0, r8
 8007262:	4649      	mov	r1, r9
 8007264:	461f      	mov	r7, r3
 8007266:	1136      	asrs	r6, r6, #4
 8007268:	2e01      	cmp	r6, #1
 800726a:	dc21      	bgt.n	80072b0 <_strtod_l+0x518>
 800726c:	b10b      	cbz	r3, 8007272 <_strtod_l+0x4da>
 800726e:	4680      	mov	r8, r0
 8007270:	4689      	mov	r9, r1
 8007272:	4b2e      	ldr	r3, [pc, #184]	; (800732c <_strtod_l+0x594>)
 8007274:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007278:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800727c:	4642      	mov	r2, r8
 800727e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007282:	464b      	mov	r3, r9
 8007284:	f7f9 f932 	bl	80004ec <__aeabi_dmul>
 8007288:	4b29      	ldr	r3, [pc, #164]	; (8007330 <_strtod_l+0x598>)
 800728a:	460a      	mov	r2, r1
 800728c:	400b      	ands	r3, r1
 800728e:	4929      	ldr	r1, [pc, #164]	; (8007334 <_strtod_l+0x59c>)
 8007290:	4680      	mov	r8, r0
 8007292:	428b      	cmp	r3, r1
 8007294:	d8bb      	bhi.n	800720e <_strtod_l+0x476>
 8007296:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800729a:	428b      	cmp	r3, r1
 800729c:	bf86      	itte	hi
 800729e:	f04f 38ff 	movhi.w	r8, #4294967295
 80072a2:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8007338 <_strtod_l+0x5a0>
 80072a6:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80072aa:	2300      	movs	r3, #0
 80072ac:	9305      	str	r3, [sp, #20]
 80072ae:	e07e      	b.n	80073ae <_strtod_l+0x616>
 80072b0:	07f2      	lsls	r2, r6, #31
 80072b2:	d507      	bpl.n	80072c4 <_strtod_l+0x52c>
 80072b4:	4b1d      	ldr	r3, [pc, #116]	; (800732c <_strtod_l+0x594>)
 80072b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80072ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072be:	f7f9 f915 	bl	80004ec <__aeabi_dmul>
 80072c2:	2301      	movs	r3, #1
 80072c4:	3701      	adds	r7, #1
 80072c6:	1076      	asrs	r6, r6, #1
 80072c8:	e7ce      	b.n	8007268 <_strtod_l+0x4d0>
 80072ca:	d0ee      	beq.n	80072aa <_strtod_l+0x512>
 80072cc:	4276      	negs	r6, r6
 80072ce:	f016 020f 	ands.w	r2, r6, #15
 80072d2:	d00a      	beq.n	80072ea <_strtod_l+0x552>
 80072d4:	4b14      	ldr	r3, [pc, #80]	; (8007328 <_strtod_l+0x590>)
 80072d6:	4640      	mov	r0, r8
 80072d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80072dc:	4649      	mov	r1, r9
 80072de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e2:	f7f9 fa2d 	bl	8000740 <__aeabi_ddiv>
 80072e6:	4680      	mov	r8, r0
 80072e8:	4689      	mov	r9, r1
 80072ea:	1136      	asrs	r6, r6, #4
 80072ec:	d0dd      	beq.n	80072aa <_strtod_l+0x512>
 80072ee:	2e1f      	cmp	r6, #31
 80072f0:	dd24      	ble.n	800733c <_strtod_l+0x5a4>
 80072f2:	f04f 0b00 	mov.w	fp, #0
 80072f6:	f8cd b010 	str.w	fp, [sp, #16]
 80072fa:	f8cd b020 	str.w	fp, [sp, #32]
 80072fe:	f8cd b018 	str.w	fp, [sp, #24]
 8007302:	2322      	movs	r3, #34	; 0x22
 8007304:	f04f 0800 	mov.w	r8, #0
 8007308:	f04f 0900 	mov.w	r9, #0
 800730c:	f8ca 3000 	str.w	r3, [sl]
 8007310:	e78c      	b.n	800722c <_strtod_l+0x494>
 8007312:	bf00      	nop
 8007314:	0800a829 	.word	0x0800a829
 8007318:	0800a864 	.word	0x0800a864
 800731c:	0800a821 	.word	0x0800a821
 8007320:	0800a8a3 	.word	0x0800a8a3
 8007324:	0800abc0 	.word	0x0800abc0
 8007328:	0800aaa0 	.word	0x0800aaa0
 800732c:	0800aa78 	.word	0x0800aa78
 8007330:	7ff00000 	.word	0x7ff00000
 8007334:	7ca00000 	.word	0x7ca00000
 8007338:	7fefffff 	.word	0x7fefffff
 800733c:	f016 0310 	ands.w	r3, r6, #16
 8007340:	bf18      	it	ne
 8007342:	236a      	movne	r3, #106	; 0x6a
 8007344:	4640      	mov	r0, r8
 8007346:	9305      	str	r3, [sp, #20]
 8007348:	4649      	mov	r1, r9
 800734a:	2300      	movs	r3, #0
 800734c:	4fb2      	ldr	r7, [pc, #712]	; (8007618 <_strtod_l+0x880>)
 800734e:	07f2      	lsls	r2, r6, #31
 8007350:	d504      	bpl.n	800735c <_strtod_l+0x5c4>
 8007352:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007356:	f7f9 f8c9 	bl	80004ec <__aeabi_dmul>
 800735a:	2301      	movs	r3, #1
 800735c:	1076      	asrs	r6, r6, #1
 800735e:	f107 0708 	add.w	r7, r7, #8
 8007362:	d1f4      	bne.n	800734e <_strtod_l+0x5b6>
 8007364:	b10b      	cbz	r3, 800736a <_strtod_l+0x5d2>
 8007366:	4680      	mov	r8, r0
 8007368:	4689      	mov	r9, r1
 800736a:	9b05      	ldr	r3, [sp, #20]
 800736c:	b1bb      	cbz	r3, 800739e <_strtod_l+0x606>
 800736e:	f3c9 530a 	ubfx	r3, r9, #20, #11
 8007372:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007376:	2b00      	cmp	r3, #0
 8007378:	4649      	mov	r1, r9
 800737a:	dd10      	ble.n	800739e <_strtod_l+0x606>
 800737c:	2b1f      	cmp	r3, #31
 800737e:	f340 812b 	ble.w	80075d8 <_strtod_l+0x840>
 8007382:	2b34      	cmp	r3, #52	; 0x34
 8007384:	bfd8      	it	le
 8007386:	f04f 32ff 	movle.w	r2, #4294967295
 800738a:	f04f 0800 	mov.w	r8, #0
 800738e:	bfcf      	iteee	gt
 8007390:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007394:	3b20      	suble	r3, #32
 8007396:	fa02 f303 	lslle.w	r3, r2, r3
 800739a:	ea03 0901 	andle.w	r9, r3, r1
 800739e:	2200      	movs	r2, #0
 80073a0:	2300      	movs	r3, #0
 80073a2:	4640      	mov	r0, r8
 80073a4:	4649      	mov	r1, r9
 80073a6:	f7f9 fb09 	bl	80009bc <__aeabi_dcmpeq>
 80073aa:	2800      	cmp	r0, #0
 80073ac:	d1a1      	bne.n	80072f2 <_strtod_l+0x55a>
 80073ae:	9b06      	ldr	r3, [sp, #24]
 80073b0:	465a      	mov	r2, fp
 80073b2:	9300      	str	r3, [sp, #0]
 80073b4:	4650      	mov	r0, sl
 80073b6:	4623      	mov	r3, r4
 80073b8:	9908      	ldr	r1, [sp, #32]
 80073ba:	f002 f94f 	bl	800965c <__s2b>
 80073be:	9008      	str	r0, [sp, #32]
 80073c0:	2800      	cmp	r0, #0
 80073c2:	f43f af24 	beq.w	800720e <_strtod_l+0x476>
 80073c6:	9b04      	ldr	r3, [sp, #16]
 80073c8:	f04f 0b00 	mov.w	fp, #0
 80073cc:	1b5d      	subs	r5, r3, r5
 80073ce:	9b07      	ldr	r3, [sp, #28]
 80073d0:	f8cd b010 	str.w	fp, [sp, #16]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	bfb4      	ite	lt
 80073d8:	462b      	movlt	r3, r5
 80073da:	2300      	movge	r3, #0
 80073dc:	930e      	str	r3, [sp, #56]	; 0x38
 80073de:	9b07      	ldr	r3, [sp, #28]
 80073e0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80073e4:	9316      	str	r3, [sp, #88]	; 0x58
 80073e6:	9b08      	ldr	r3, [sp, #32]
 80073e8:	4650      	mov	r0, sl
 80073ea:	6859      	ldr	r1, [r3, #4]
 80073ec:	f002 f88a 	bl	8009504 <_Balloc>
 80073f0:	9006      	str	r0, [sp, #24]
 80073f2:	2800      	cmp	r0, #0
 80073f4:	f43f af13 	beq.w	800721e <_strtod_l+0x486>
 80073f8:	9b08      	ldr	r3, [sp, #32]
 80073fa:	300c      	adds	r0, #12
 80073fc:	691a      	ldr	r2, [r3, #16]
 80073fe:	f103 010c 	add.w	r1, r3, #12
 8007402:	3202      	adds	r2, #2
 8007404:	0092      	lsls	r2, r2, #2
 8007406:	f7fe fe5f 	bl	80060c8 <memcpy>
 800740a:	ab1e      	add	r3, sp, #120	; 0x78
 800740c:	9301      	str	r3, [sp, #4]
 800740e:	ab1d      	add	r3, sp, #116	; 0x74
 8007410:	9300      	str	r3, [sp, #0]
 8007412:	4642      	mov	r2, r8
 8007414:	464b      	mov	r3, r9
 8007416:	4650      	mov	r0, sl
 8007418:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 800741c:	f002 fc5c 	bl	8009cd8 <__d2b>
 8007420:	901c      	str	r0, [sp, #112]	; 0x70
 8007422:	2800      	cmp	r0, #0
 8007424:	f43f aefb 	beq.w	800721e <_strtod_l+0x486>
 8007428:	2101      	movs	r1, #1
 800742a:	4650      	mov	r0, sl
 800742c:	f002 f9ae 	bl	800978c <__i2b>
 8007430:	4603      	mov	r3, r0
 8007432:	9004      	str	r0, [sp, #16]
 8007434:	2800      	cmp	r0, #0
 8007436:	f43f aef2 	beq.w	800721e <_strtod_l+0x486>
 800743a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800743c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800743e:	2d00      	cmp	r5, #0
 8007440:	bfab      	itete	ge
 8007442:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8007444:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8007446:	18ee      	addge	r6, r5, r3
 8007448:	1b5c      	sublt	r4, r3, r5
 800744a:	9b05      	ldr	r3, [sp, #20]
 800744c:	bfa8      	it	ge
 800744e:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8007450:	eba5 0503 	sub.w	r5, r5, r3
 8007454:	4415      	add	r5, r2
 8007456:	4b71      	ldr	r3, [pc, #452]	; (800761c <_strtod_l+0x884>)
 8007458:	f105 35ff 	add.w	r5, r5, #4294967295
 800745c:	bfb8      	it	lt
 800745e:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8007460:	429d      	cmp	r5, r3
 8007462:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007466:	f280 80c9 	bge.w	80075fc <_strtod_l+0x864>
 800746a:	1b5b      	subs	r3, r3, r5
 800746c:	2b1f      	cmp	r3, #31
 800746e:	f04f 0701 	mov.w	r7, #1
 8007472:	eba2 0203 	sub.w	r2, r2, r3
 8007476:	f300 80b6 	bgt.w	80075e6 <_strtod_l+0x84e>
 800747a:	2500      	movs	r5, #0
 800747c:	fa07 f303 	lsl.w	r3, r7, r3
 8007480:	930f      	str	r3, [sp, #60]	; 0x3c
 8007482:	18b7      	adds	r7, r6, r2
 8007484:	9b05      	ldr	r3, [sp, #20]
 8007486:	42be      	cmp	r6, r7
 8007488:	4414      	add	r4, r2
 800748a:	441c      	add	r4, r3
 800748c:	4633      	mov	r3, r6
 800748e:	bfa8      	it	ge
 8007490:	463b      	movge	r3, r7
 8007492:	42a3      	cmp	r3, r4
 8007494:	bfa8      	it	ge
 8007496:	4623      	movge	r3, r4
 8007498:	2b00      	cmp	r3, #0
 800749a:	bfc2      	ittt	gt
 800749c:	1aff      	subgt	r7, r7, r3
 800749e:	1ae4      	subgt	r4, r4, r3
 80074a0:	1af6      	subgt	r6, r6, r3
 80074a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	dd17      	ble.n	80074d8 <_strtod_l+0x740>
 80074a8:	461a      	mov	r2, r3
 80074aa:	4650      	mov	r0, sl
 80074ac:	9904      	ldr	r1, [sp, #16]
 80074ae:	f002 fa27 	bl	8009900 <__pow5mult>
 80074b2:	9004      	str	r0, [sp, #16]
 80074b4:	2800      	cmp	r0, #0
 80074b6:	f43f aeb2 	beq.w	800721e <_strtod_l+0x486>
 80074ba:	4601      	mov	r1, r0
 80074bc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80074be:	4650      	mov	r0, sl
 80074c0:	f002 f97a 	bl	80097b8 <__multiply>
 80074c4:	9009      	str	r0, [sp, #36]	; 0x24
 80074c6:	2800      	cmp	r0, #0
 80074c8:	f43f aea9 	beq.w	800721e <_strtod_l+0x486>
 80074cc:	4650      	mov	r0, sl
 80074ce:	991c      	ldr	r1, [sp, #112]	; 0x70
 80074d0:	f002 f858 	bl	8009584 <_Bfree>
 80074d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074d6:	931c      	str	r3, [sp, #112]	; 0x70
 80074d8:	2f00      	cmp	r7, #0
 80074da:	f300 8093 	bgt.w	8007604 <_strtod_l+0x86c>
 80074de:	9b07      	ldr	r3, [sp, #28]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	dd08      	ble.n	80074f6 <_strtod_l+0x75e>
 80074e4:	4650      	mov	r0, sl
 80074e6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80074e8:	9906      	ldr	r1, [sp, #24]
 80074ea:	f002 fa09 	bl	8009900 <__pow5mult>
 80074ee:	9006      	str	r0, [sp, #24]
 80074f0:	2800      	cmp	r0, #0
 80074f2:	f43f ae94 	beq.w	800721e <_strtod_l+0x486>
 80074f6:	2c00      	cmp	r4, #0
 80074f8:	dd08      	ble.n	800750c <_strtod_l+0x774>
 80074fa:	4622      	mov	r2, r4
 80074fc:	4650      	mov	r0, sl
 80074fe:	9906      	ldr	r1, [sp, #24]
 8007500:	f002 fa58 	bl	80099b4 <__lshift>
 8007504:	9006      	str	r0, [sp, #24]
 8007506:	2800      	cmp	r0, #0
 8007508:	f43f ae89 	beq.w	800721e <_strtod_l+0x486>
 800750c:	2e00      	cmp	r6, #0
 800750e:	dd08      	ble.n	8007522 <_strtod_l+0x78a>
 8007510:	4632      	mov	r2, r6
 8007512:	4650      	mov	r0, sl
 8007514:	9904      	ldr	r1, [sp, #16]
 8007516:	f002 fa4d 	bl	80099b4 <__lshift>
 800751a:	9004      	str	r0, [sp, #16]
 800751c:	2800      	cmp	r0, #0
 800751e:	f43f ae7e 	beq.w	800721e <_strtod_l+0x486>
 8007522:	4650      	mov	r0, sl
 8007524:	9a06      	ldr	r2, [sp, #24]
 8007526:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007528:	f002 facc 	bl	8009ac4 <__mdiff>
 800752c:	4683      	mov	fp, r0
 800752e:	2800      	cmp	r0, #0
 8007530:	f43f ae75 	beq.w	800721e <_strtod_l+0x486>
 8007534:	2400      	movs	r4, #0
 8007536:	68c3      	ldr	r3, [r0, #12]
 8007538:	9904      	ldr	r1, [sp, #16]
 800753a:	60c4      	str	r4, [r0, #12]
 800753c:	930d      	str	r3, [sp, #52]	; 0x34
 800753e:	f002 faa5 	bl	8009a8c <__mcmp>
 8007542:	42a0      	cmp	r0, r4
 8007544:	da70      	bge.n	8007628 <_strtod_l+0x890>
 8007546:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007548:	ea53 0308 	orrs.w	r3, r3, r8
 800754c:	f040 8096 	bne.w	800767c <_strtod_l+0x8e4>
 8007550:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007554:	2b00      	cmp	r3, #0
 8007556:	f040 8091 	bne.w	800767c <_strtod_l+0x8e4>
 800755a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800755e:	0d1b      	lsrs	r3, r3, #20
 8007560:	051b      	lsls	r3, r3, #20
 8007562:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007566:	f240 8089 	bls.w	800767c <_strtod_l+0x8e4>
 800756a:	f8db 3014 	ldr.w	r3, [fp, #20]
 800756e:	b923      	cbnz	r3, 800757a <_strtod_l+0x7e2>
 8007570:	f8db 3010 	ldr.w	r3, [fp, #16]
 8007574:	2b01      	cmp	r3, #1
 8007576:	f340 8081 	ble.w	800767c <_strtod_l+0x8e4>
 800757a:	4659      	mov	r1, fp
 800757c:	2201      	movs	r2, #1
 800757e:	4650      	mov	r0, sl
 8007580:	f002 fa18 	bl	80099b4 <__lshift>
 8007584:	9904      	ldr	r1, [sp, #16]
 8007586:	4683      	mov	fp, r0
 8007588:	f002 fa80 	bl	8009a8c <__mcmp>
 800758c:	2800      	cmp	r0, #0
 800758e:	dd75      	ble.n	800767c <_strtod_l+0x8e4>
 8007590:	9905      	ldr	r1, [sp, #20]
 8007592:	464b      	mov	r3, r9
 8007594:	4a22      	ldr	r2, [pc, #136]	; (8007620 <_strtod_l+0x888>)
 8007596:	2900      	cmp	r1, #0
 8007598:	f000 8091 	beq.w	80076be <_strtod_l+0x926>
 800759c:	ea02 0109 	and.w	r1, r2, r9
 80075a0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80075a4:	f300 808b 	bgt.w	80076be <_strtod_l+0x926>
 80075a8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80075ac:	f77f aea9 	ble.w	8007302 <_strtod_l+0x56a>
 80075b0:	2300      	movs	r3, #0
 80075b2:	4a1c      	ldr	r2, [pc, #112]	; (8007624 <_strtod_l+0x88c>)
 80075b4:	4640      	mov	r0, r8
 80075b6:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80075ba:	4649      	mov	r1, r9
 80075bc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80075c0:	f7f8 ff94 	bl	80004ec <__aeabi_dmul>
 80075c4:	460b      	mov	r3, r1
 80075c6:	4303      	orrs	r3, r0
 80075c8:	bf08      	it	eq
 80075ca:	2322      	moveq	r3, #34	; 0x22
 80075cc:	4680      	mov	r8, r0
 80075ce:	4689      	mov	r9, r1
 80075d0:	bf08      	it	eq
 80075d2:	f8ca 3000 	streq.w	r3, [sl]
 80075d6:	e62d      	b.n	8007234 <_strtod_l+0x49c>
 80075d8:	f04f 32ff 	mov.w	r2, #4294967295
 80075dc:	fa02 f303 	lsl.w	r3, r2, r3
 80075e0:	ea03 0808 	and.w	r8, r3, r8
 80075e4:	e6db      	b.n	800739e <_strtod_l+0x606>
 80075e6:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80075ea:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80075ee:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80075f2:	35e2      	adds	r5, #226	; 0xe2
 80075f4:	fa07 f505 	lsl.w	r5, r7, r5
 80075f8:	970f      	str	r7, [sp, #60]	; 0x3c
 80075fa:	e742      	b.n	8007482 <_strtod_l+0x6ea>
 80075fc:	2301      	movs	r3, #1
 80075fe:	2500      	movs	r5, #0
 8007600:	930f      	str	r3, [sp, #60]	; 0x3c
 8007602:	e73e      	b.n	8007482 <_strtod_l+0x6ea>
 8007604:	463a      	mov	r2, r7
 8007606:	4650      	mov	r0, sl
 8007608:	991c      	ldr	r1, [sp, #112]	; 0x70
 800760a:	f002 f9d3 	bl	80099b4 <__lshift>
 800760e:	901c      	str	r0, [sp, #112]	; 0x70
 8007610:	2800      	cmp	r0, #0
 8007612:	f47f af64 	bne.w	80074de <_strtod_l+0x746>
 8007616:	e602      	b.n	800721e <_strtod_l+0x486>
 8007618:	0800a878 	.word	0x0800a878
 800761c:	fffffc02 	.word	0xfffffc02
 8007620:	7ff00000 	.word	0x7ff00000
 8007624:	39500000 	.word	0x39500000
 8007628:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800762c:	d166      	bne.n	80076fc <_strtod_l+0x964>
 800762e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007630:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007634:	b35a      	cbz	r2, 800768e <_strtod_l+0x8f6>
 8007636:	4a9c      	ldr	r2, [pc, #624]	; (80078a8 <_strtod_l+0xb10>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d12c      	bne.n	8007696 <_strtod_l+0x8fe>
 800763c:	9b05      	ldr	r3, [sp, #20]
 800763e:	4640      	mov	r0, r8
 8007640:	b303      	cbz	r3, 8007684 <_strtod_l+0x8ec>
 8007642:	464b      	mov	r3, r9
 8007644:	4a99      	ldr	r2, [pc, #612]	; (80078ac <_strtod_l+0xb14>)
 8007646:	f04f 31ff 	mov.w	r1, #4294967295
 800764a:	401a      	ands	r2, r3
 800764c:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8007650:	d81b      	bhi.n	800768a <_strtod_l+0x8f2>
 8007652:	0d12      	lsrs	r2, r2, #20
 8007654:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007658:	fa01 f303 	lsl.w	r3, r1, r3
 800765c:	4298      	cmp	r0, r3
 800765e:	d11a      	bne.n	8007696 <_strtod_l+0x8fe>
 8007660:	4b93      	ldr	r3, [pc, #588]	; (80078b0 <_strtod_l+0xb18>)
 8007662:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007664:	429a      	cmp	r2, r3
 8007666:	d102      	bne.n	800766e <_strtod_l+0x8d6>
 8007668:	3001      	adds	r0, #1
 800766a:	f43f add8 	beq.w	800721e <_strtod_l+0x486>
 800766e:	f04f 0800 	mov.w	r8, #0
 8007672:	4b8e      	ldr	r3, [pc, #568]	; (80078ac <_strtod_l+0xb14>)
 8007674:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007676:	401a      	ands	r2, r3
 8007678:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800767c:	9b05      	ldr	r3, [sp, #20]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d196      	bne.n	80075b0 <_strtod_l+0x818>
 8007682:	e5d7      	b.n	8007234 <_strtod_l+0x49c>
 8007684:	f04f 33ff 	mov.w	r3, #4294967295
 8007688:	e7e8      	b.n	800765c <_strtod_l+0x8c4>
 800768a:	460b      	mov	r3, r1
 800768c:	e7e6      	b.n	800765c <_strtod_l+0x8c4>
 800768e:	ea53 0308 	orrs.w	r3, r3, r8
 8007692:	f43f af7d 	beq.w	8007590 <_strtod_l+0x7f8>
 8007696:	b1e5      	cbz	r5, 80076d2 <_strtod_l+0x93a>
 8007698:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800769a:	421d      	tst	r5, r3
 800769c:	d0ee      	beq.n	800767c <_strtod_l+0x8e4>
 800769e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076a0:	4640      	mov	r0, r8
 80076a2:	4649      	mov	r1, r9
 80076a4:	9a05      	ldr	r2, [sp, #20]
 80076a6:	b1c3      	cbz	r3, 80076da <_strtod_l+0x942>
 80076a8:	f7ff fb54 	bl	8006d54 <sulp>
 80076ac:	4602      	mov	r2, r0
 80076ae:	460b      	mov	r3, r1
 80076b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80076b4:	f7f8 fd64 	bl	8000180 <__adddf3>
 80076b8:	4680      	mov	r8, r0
 80076ba:	4689      	mov	r9, r1
 80076bc:	e7de      	b.n	800767c <_strtod_l+0x8e4>
 80076be:	4013      	ands	r3, r2
 80076c0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80076c4:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80076c8:	f04f 38ff 	mov.w	r8, #4294967295
 80076cc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80076d0:	e7d4      	b.n	800767c <_strtod_l+0x8e4>
 80076d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80076d4:	ea13 0f08 	tst.w	r3, r8
 80076d8:	e7e0      	b.n	800769c <_strtod_l+0x904>
 80076da:	f7ff fb3b 	bl	8006d54 <sulp>
 80076de:	4602      	mov	r2, r0
 80076e0:	460b      	mov	r3, r1
 80076e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80076e6:	f7f8 fd49 	bl	800017c <__aeabi_dsub>
 80076ea:	2200      	movs	r2, #0
 80076ec:	2300      	movs	r3, #0
 80076ee:	4680      	mov	r8, r0
 80076f0:	4689      	mov	r9, r1
 80076f2:	f7f9 f963 	bl	80009bc <__aeabi_dcmpeq>
 80076f6:	2800      	cmp	r0, #0
 80076f8:	d0c0      	beq.n	800767c <_strtod_l+0x8e4>
 80076fa:	e602      	b.n	8007302 <_strtod_l+0x56a>
 80076fc:	4658      	mov	r0, fp
 80076fe:	9904      	ldr	r1, [sp, #16]
 8007700:	f002 fb46 	bl	8009d90 <__ratio>
 8007704:	2200      	movs	r2, #0
 8007706:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800770a:	4606      	mov	r6, r0
 800770c:	460f      	mov	r7, r1
 800770e:	f7f9 f969 	bl	80009e4 <__aeabi_dcmple>
 8007712:	2800      	cmp	r0, #0
 8007714:	d075      	beq.n	8007802 <_strtod_l+0xa6a>
 8007716:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007718:	2b00      	cmp	r3, #0
 800771a:	d047      	beq.n	80077ac <_strtod_l+0xa14>
 800771c:	2600      	movs	r6, #0
 800771e:	4f65      	ldr	r7, [pc, #404]	; (80078b4 <_strtod_l+0xb1c>)
 8007720:	4d64      	ldr	r5, [pc, #400]	; (80078b4 <_strtod_l+0xb1c>)
 8007722:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007724:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007728:	0d1b      	lsrs	r3, r3, #20
 800772a:	051b      	lsls	r3, r3, #20
 800772c:	930f      	str	r3, [sp, #60]	; 0x3c
 800772e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007730:	4b61      	ldr	r3, [pc, #388]	; (80078b8 <_strtod_l+0xb20>)
 8007732:	429a      	cmp	r2, r3
 8007734:	f040 80c8 	bne.w	80078c8 <_strtod_l+0xb30>
 8007738:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800773c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8007740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007742:	4640      	mov	r0, r8
 8007744:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8007748:	4649      	mov	r1, r9
 800774a:	f002 fa4b 	bl	8009be4 <__ulp>
 800774e:	4602      	mov	r2, r0
 8007750:	460b      	mov	r3, r1
 8007752:	4630      	mov	r0, r6
 8007754:	4639      	mov	r1, r7
 8007756:	f7f8 fec9 	bl	80004ec <__aeabi_dmul>
 800775a:	4642      	mov	r2, r8
 800775c:	464b      	mov	r3, r9
 800775e:	f7f8 fd0f 	bl	8000180 <__adddf3>
 8007762:	460b      	mov	r3, r1
 8007764:	4951      	ldr	r1, [pc, #324]	; (80078ac <_strtod_l+0xb14>)
 8007766:	4a55      	ldr	r2, [pc, #340]	; (80078bc <_strtod_l+0xb24>)
 8007768:	4019      	ands	r1, r3
 800776a:	4291      	cmp	r1, r2
 800776c:	4680      	mov	r8, r0
 800776e:	d95e      	bls.n	800782e <_strtod_l+0xa96>
 8007770:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007772:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007776:	4293      	cmp	r3, r2
 8007778:	d103      	bne.n	8007782 <_strtod_l+0x9ea>
 800777a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800777c:	3301      	adds	r3, #1
 800777e:	f43f ad4e 	beq.w	800721e <_strtod_l+0x486>
 8007782:	f04f 38ff 	mov.w	r8, #4294967295
 8007786:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80078b0 <_strtod_l+0xb18>
 800778a:	4650      	mov	r0, sl
 800778c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800778e:	f001 fef9 	bl	8009584 <_Bfree>
 8007792:	4650      	mov	r0, sl
 8007794:	9906      	ldr	r1, [sp, #24]
 8007796:	f001 fef5 	bl	8009584 <_Bfree>
 800779a:	4650      	mov	r0, sl
 800779c:	9904      	ldr	r1, [sp, #16]
 800779e:	f001 fef1 	bl	8009584 <_Bfree>
 80077a2:	4659      	mov	r1, fp
 80077a4:	4650      	mov	r0, sl
 80077a6:	f001 feed 	bl	8009584 <_Bfree>
 80077aa:	e61c      	b.n	80073e6 <_strtod_l+0x64e>
 80077ac:	f1b8 0f00 	cmp.w	r8, #0
 80077b0:	d119      	bne.n	80077e6 <_strtod_l+0xa4e>
 80077b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80077b8:	b9e3      	cbnz	r3, 80077f4 <_strtod_l+0xa5c>
 80077ba:	2200      	movs	r2, #0
 80077bc:	4630      	mov	r0, r6
 80077be:	4639      	mov	r1, r7
 80077c0:	4b3c      	ldr	r3, [pc, #240]	; (80078b4 <_strtod_l+0xb1c>)
 80077c2:	f7f9 f905 	bl	80009d0 <__aeabi_dcmplt>
 80077c6:	b9c8      	cbnz	r0, 80077fc <_strtod_l+0xa64>
 80077c8:	2200      	movs	r2, #0
 80077ca:	4630      	mov	r0, r6
 80077cc:	4639      	mov	r1, r7
 80077ce:	4b3c      	ldr	r3, [pc, #240]	; (80078c0 <_strtod_l+0xb28>)
 80077d0:	f7f8 fe8c 	bl	80004ec <__aeabi_dmul>
 80077d4:	4604      	mov	r4, r0
 80077d6:	460d      	mov	r5, r1
 80077d8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80077dc:	9418      	str	r4, [sp, #96]	; 0x60
 80077de:	9319      	str	r3, [sp, #100]	; 0x64
 80077e0:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 80077e4:	e79d      	b.n	8007722 <_strtod_l+0x98a>
 80077e6:	f1b8 0f01 	cmp.w	r8, #1
 80077ea:	d103      	bne.n	80077f4 <_strtod_l+0xa5c>
 80077ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	f43f ad87 	beq.w	8007302 <_strtod_l+0x56a>
 80077f4:	2600      	movs	r6, #0
 80077f6:	2400      	movs	r4, #0
 80077f8:	4f32      	ldr	r7, [pc, #200]	; (80078c4 <_strtod_l+0xb2c>)
 80077fa:	e791      	b.n	8007720 <_strtod_l+0x988>
 80077fc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80077fe:	4d30      	ldr	r5, [pc, #192]	; (80078c0 <_strtod_l+0xb28>)
 8007800:	e7ea      	b.n	80077d8 <_strtod_l+0xa40>
 8007802:	4b2f      	ldr	r3, [pc, #188]	; (80078c0 <_strtod_l+0xb28>)
 8007804:	2200      	movs	r2, #0
 8007806:	4630      	mov	r0, r6
 8007808:	4639      	mov	r1, r7
 800780a:	f7f8 fe6f 	bl	80004ec <__aeabi_dmul>
 800780e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007810:	4604      	mov	r4, r0
 8007812:	460d      	mov	r5, r1
 8007814:	b933      	cbnz	r3, 8007824 <_strtod_l+0xa8c>
 8007816:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800781a:	9010      	str	r0, [sp, #64]	; 0x40
 800781c:	9311      	str	r3, [sp, #68]	; 0x44
 800781e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007822:	e77e      	b.n	8007722 <_strtod_l+0x98a>
 8007824:	4602      	mov	r2, r0
 8007826:	460b      	mov	r3, r1
 8007828:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800782c:	e7f7      	b.n	800781e <_strtod_l+0xa86>
 800782e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8007832:	9b05      	ldr	r3, [sp, #20]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d1a8      	bne.n	800778a <_strtod_l+0x9f2>
 8007838:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800783c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800783e:	0d1b      	lsrs	r3, r3, #20
 8007840:	051b      	lsls	r3, r3, #20
 8007842:	429a      	cmp	r2, r3
 8007844:	d1a1      	bne.n	800778a <_strtod_l+0x9f2>
 8007846:	4620      	mov	r0, r4
 8007848:	4629      	mov	r1, r5
 800784a:	f7f9 f947 	bl	8000adc <__aeabi_d2lz>
 800784e:	f7f8 fe1f 	bl	8000490 <__aeabi_l2d>
 8007852:	4602      	mov	r2, r0
 8007854:	460b      	mov	r3, r1
 8007856:	4620      	mov	r0, r4
 8007858:	4629      	mov	r1, r5
 800785a:	f7f8 fc8f 	bl	800017c <__aeabi_dsub>
 800785e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007860:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007864:	ea43 0308 	orr.w	r3, r3, r8
 8007868:	4313      	orrs	r3, r2
 800786a:	4604      	mov	r4, r0
 800786c:	460d      	mov	r5, r1
 800786e:	d066      	beq.n	800793e <_strtod_l+0xba6>
 8007870:	a309      	add	r3, pc, #36	; (adr r3, 8007898 <_strtod_l+0xb00>)
 8007872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007876:	f7f9 f8ab 	bl	80009d0 <__aeabi_dcmplt>
 800787a:	2800      	cmp	r0, #0
 800787c:	f47f acda 	bne.w	8007234 <_strtod_l+0x49c>
 8007880:	a307      	add	r3, pc, #28	; (adr r3, 80078a0 <_strtod_l+0xb08>)
 8007882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007886:	4620      	mov	r0, r4
 8007888:	4629      	mov	r1, r5
 800788a:	f7f9 f8bf 	bl	8000a0c <__aeabi_dcmpgt>
 800788e:	2800      	cmp	r0, #0
 8007890:	f43f af7b 	beq.w	800778a <_strtod_l+0x9f2>
 8007894:	e4ce      	b.n	8007234 <_strtod_l+0x49c>
 8007896:	bf00      	nop
 8007898:	94a03595 	.word	0x94a03595
 800789c:	3fdfffff 	.word	0x3fdfffff
 80078a0:	35afe535 	.word	0x35afe535
 80078a4:	3fe00000 	.word	0x3fe00000
 80078a8:	000fffff 	.word	0x000fffff
 80078ac:	7ff00000 	.word	0x7ff00000
 80078b0:	7fefffff 	.word	0x7fefffff
 80078b4:	3ff00000 	.word	0x3ff00000
 80078b8:	7fe00000 	.word	0x7fe00000
 80078bc:	7c9fffff 	.word	0x7c9fffff
 80078c0:	3fe00000 	.word	0x3fe00000
 80078c4:	bff00000 	.word	0xbff00000
 80078c8:	9b05      	ldr	r3, [sp, #20]
 80078ca:	b313      	cbz	r3, 8007912 <_strtod_l+0xb7a>
 80078cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80078ce:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80078d2:	d81e      	bhi.n	8007912 <_strtod_l+0xb7a>
 80078d4:	a326      	add	r3, pc, #152	; (adr r3, 8007970 <_strtod_l+0xbd8>)
 80078d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078da:	4620      	mov	r0, r4
 80078dc:	4629      	mov	r1, r5
 80078de:	f7f9 f881 	bl	80009e4 <__aeabi_dcmple>
 80078e2:	b190      	cbz	r0, 800790a <_strtod_l+0xb72>
 80078e4:	4629      	mov	r1, r5
 80078e6:	4620      	mov	r0, r4
 80078e8:	f7f9 f8d8 	bl	8000a9c <__aeabi_d2uiz>
 80078ec:	2801      	cmp	r0, #1
 80078ee:	bf38      	it	cc
 80078f0:	2001      	movcc	r0, #1
 80078f2:	f7f8 fd81 	bl	80003f8 <__aeabi_ui2d>
 80078f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078f8:	4604      	mov	r4, r0
 80078fa:	460d      	mov	r5, r1
 80078fc:	b9d3      	cbnz	r3, 8007934 <_strtod_l+0xb9c>
 80078fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007902:	9012      	str	r0, [sp, #72]	; 0x48
 8007904:	9313      	str	r3, [sp, #76]	; 0x4c
 8007906:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800790a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800790c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8007910:	1a9f      	subs	r7, r3, r2
 8007912:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007916:	f002 f965 	bl	8009be4 <__ulp>
 800791a:	4602      	mov	r2, r0
 800791c:	460b      	mov	r3, r1
 800791e:	4630      	mov	r0, r6
 8007920:	4639      	mov	r1, r7
 8007922:	f7f8 fde3 	bl	80004ec <__aeabi_dmul>
 8007926:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800792a:	f7f8 fc29 	bl	8000180 <__adddf3>
 800792e:	4680      	mov	r8, r0
 8007930:	4689      	mov	r9, r1
 8007932:	e77e      	b.n	8007832 <_strtod_l+0xa9a>
 8007934:	4602      	mov	r2, r0
 8007936:	460b      	mov	r3, r1
 8007938:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800793c:	e7e3      	b.n	8007906 <_strtod_l+0xb6e>
 800793e:	a30e      	add	r3, pc, #56	; (adr r3, 8007978 <_strtod_l+0xbe0>)
 8007940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007944:	f7f9 f844 	bl	80009d0 <__aeabi_dcmplt>
 8007948:	e7a1      	b.n	800788e <_strtod_l+0xaf6>
 800794a:	2300      	movs	r3, #0
 800794c:	930c      	str	r3, [sp, #48]	; 0x30
 800794e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007950:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007952:	6013      	str	r3, [r2, #0]
 8007954:	f7ff ba65 	b.w	8006e22 <_strtod_l+0x8a>
 8007958:	2b65      	cmp	r3, #101	; 0x65
 800795a:	f43f ab5c 	beq.w	8007016 <_strtod_l+0x27e>
 800795e:	2b45      	cmp	r3, #69	; 0x45
 8007960:	f43f ab59 	beq.w	8007016 <_strtod_l+0x27e>
 8007964:	2201      	movs	r2, #1
 8007966:	f7ff bb8d 	b.w	8007084 <_strtod_l+0x2ec>
 800796a:	bf00      	nop
 800796c:	f3af 8000 	nop.w
 8007970:	ffc00000 	.word	0xffc00000
 8007974:	41dfffff 	.word	0x41dfffff
 8007978:	94a03595 	.word	0x94a03595
 800797c:	3fcfffff 	.word	0x3fcfffff

08007980 <strtod>:
 8007980:	460a      	mov	r2, r1
 8007982:	4601      	mov	r1, r0
 8007984:	4802      	ldr	r0, [pc, #8]	; (8007990 <strtod+0x10>)
 8007986:	4b03      	ldr	r3, [pc, #12]	; (8007994 <strtod+0x14>)
 8007988:	6800      	ldr	r0, [r0, #0]
 800798a:	f7ff ba05 	b.w	8006d98 <_strtod_l>
 800798e:	bf00      	nop
 8007990:	20000018 	.word	0x20000018
 8007994:	20000080 	.word	0x20000080

08007998 <_strtol_l.isra.0>:
 8007998:	2b01      	cmp	r3, #1
 800799a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800799e:	4686      	mov	lr, r0
 80079a0:	d001      	beq.n	80079a6 <_strtol_l.isra.0+0xe>
 80079a2:	2b24      	cmp	r3, #36	; 0x24
 80079a4:	d906      	bls.n	80079b4 <_strtol_l.isra.0+0x1c>
 80079a6:	f7fe fb55 	bl	8006054 <__errno>
 80079aa:	2316      	movs	r3, #22
 80079ac:	6003      	str	r3, [r0, #0]
 80079ae:	2000      	movs	r0, #0
 80079b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079b4:	468c      	mov	ip, r1
 80079b6:	4e3a      	ldr	r6, [pc, #232]	; (8007aa0 <_strtol_l.isra.0+0x108>)
 80079b8:	4660      	mov	r0, ip
 80079ba:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80079be:	5da5      	ldrb	r5, [r4, r6]
 80079c0:	f015 0508 	ands.w	r5, r5, #8
 80079c4:	d1f8      	bne.n	80079b8 <_strtol_l.isra.0+0x20>
 80079c6:	2c2d      	cmp	r4, #45	; 0x2d
 80079c8:	d133      	bne.n	8007a32 <_strtol_l.isra.0+0x9a>
 80079ca:	f04f 0801 	mov.w	r8, #1
 80079ce:	f89c 4000 	ldrb.w	r4, [ip]
 80079d2:	f100 0c02 	add.w	ip, r0, #2
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d05d      	beq.n	8007a96 <_strtol_l.isra.0+0xfe>
 80079da:	2b10      	cmp	r3, #16
 80079dc:	d10c      	bne.n	80079f8 <_strtol_l.isra.0+0x60>
 80079de:	2c30      	cmp	r4, #48	; 0x30
 80079e0:	d10a      	bne.n	80079f8 <_strtol_l.isra.0+0x60>
 80079e2:	f89c 0000 	ldrb.w	r0, [ip]
 80079e6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80079ea:	2858      	cmp	r0, #88	; 0x58
 80079ec:	d14e      	bne.n	8007a8c <_strtol_l.isra.0+0xf4>
 80079ee:	2310      	movs	r3, #16
 80079f0:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80079f4:	f10c 0c02 	add.w	ip, ip, #2
 80079f8:	2500      	movs	r5, #0
 80079fa:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 80079fe:	3f01      	subs	r7, #1
 8007a00:	fbb7 f9f3 	udiv	r9, r7, r3
 8007a04:	4628      	mov	r0, r5
 8007a06:	fb03 7a19 	mls	sl, r3, r9, r7
 8007a0a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8007a0e:	2e09      	cmp	r6, #9
 8007a10:	d818      	bhi.n	8007a44 <_strtol_l.isra.0+0xac>
 8007a12:	4634      	mov	r4, r6
 8007a14:	42a3      	cmp	r3, r4
 8007a16:	dd24      	ble.n	8007a62 <_strtol_l.isra.0+0xca>
 8007a18:	2d00      	cmp	r5, #0
 8007a1a:	db1f      	blt.n	8007a5c <_strtol_l.isra.0+0xc4>
 8007a1c:	4581      	cmp	r9, r0
 8007a1e:	d31d      	bcc.n	8007a5c <_strtol_l.isra.0+0xc4>
 8007a20:	d101      	bne.n	8007a26 <_strtol_l.isra.0+0x8e>
 8007a22:	45a2      	cmp	sl, r4
 8007a24:	db1a      	blt.n	8007a5c <_strtol_l.isra.0+0xc4>
 8007a26:	2501      	movs	r5, #1
 8007a28:	fb00 4003 	mla	r0, r0, r3, r4
 8007a2c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8007a30:	e7eb      	b.n	8007a0a <_strtol_l.isra.0+0x72>
 8007a32:	2c2b      	cmp	r4, #43	; 0x2b
 8007a34:	bf08      	it	eq
 8007a36:	f89c 4000 	ldrbeq.w	r4, [ip]
 8007a3a:	46a8      	mov	r8, r5
 8007a3c:	bf08      	it	eq
 8007a3e:	f100 0c02 	addeq.w	ip, r0, #2
 8007a42:	e7c8      	b.n	80079d6 <_strtol_l.isra.0+0x3e>
 8007a44:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8007a48:	2e19      	cmp	r6, #25
 8007a4a:	d801      	bhi.n	8007a50 <_strtol_l.isra.0+0xb8>
 8007a4c:	3c37      	subs	r4, #55	; 0x37
 8007a4e:	e7e1      	b.n	8007a14 <_strtol_l.isra.0+0x7c>
 8007a50:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8007a54:	2e19      	cmp	r6, #25
 8007a56:	d804      	bhi.n	8007a62 <_strtol_l.isra.0+0xca>
 8007a58:	3c57      	subs	r4, #87	; 0x57
 8007a5a:	e7db      	b.n	8007a14 <_strtol_l.isra.0+0x7c>
 8007a5c:	f04f 35ff 	mov.w	r5, #4294967295
 8007a60:	e7e4      	b.n	8007a2c <_strtol_l.isra.0+0x94>
 8007a62:	2d00      	cmp	r5, #0
 8007a64:	da08      	bge.n	8007a78 <_strtol_l.isra.0+0xe0>
 8007a66:	2322      	movs	r3, #34	; 0x22
 8007a68:	4638      	mov	r0, r7
 8007a6a:	f8ce 3000 	str.w	r3, [lr]
 8007a6e:	2a00      	cmp	r2, #0
 8007a70:	d09e      	beq.n	80079b0 <_strtol_l.isra.0+0x18>
 8007a72:	f10c 31ff 	add.w	r1, ip, #4294967295
 8007a76:	e007      	b.n	8007a88 <_strtol_l.isra.0+0xf0>
 8007a78:	f1b8 0f00 	cmp.w	r8, #0
 8007a7c:	d000      	beq.n	8007a80 <_strtol_l.isra.0+0xe8>
 8007a7e:	4240      	negs	r0, r0
 8007a80:	2a00      	cmp	r2, #0
 8007a82:	d095      	beq.n	80079b0 <_strtol_l.isra.0+0x18>
 8007a84:	2d00      	cmp	r5, #0
 8007a86:	d1f4      	bne.n	8007a72 <_strtol_l.isra.0+0xda>
 8007a88:	6011      	str	r1, [r2, #0]
 8007a8a:	e791      	b.n	80079b0 <_strtol_l.isra.0+0x18>
 8007a8c:	2430      	movs	r4, #48	; 0x30
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d1b2      	bne.n	80079f8 <_strtol_l.isra.0+0x60>
 8007a92:	2308      	movs	r3, #8
 8007a94:	e7b0      	b.n	80079f8 <_strtol_l.isra.0+0x60>
 8007a96:	2c30      	cmp	r4, #48	; 0x30
 8007a98:	d0a3      	beq.n	80079e2 <_strtol_l.isra.0+0x4a>
 8007a9a:	230a      	movs	r3, #10
 8007a9c:	e7ac      	b.n	80079f8 <_strtol_l.isra.0+0x60>
 8007a9e:	bf00      	nop
 8007aa0:	0800a715 	.word	0x0800a715

08007aa4 <strtol>:
 8007aa4:	4613      	mov	r3, r2
 8007aa6:	460a      	mov	r2, r1
 8007aa8:	4601      	mov	r1, r0
 8007aaa:	4802      	ldr	r0, [pc, #8]	; (8007ab4 <strtol+0x10>)
 8007aac:	6800      	ldr	r0, [r0, #0]
 8007aae:	f7ff bf73 	b.w	8007998 <_strtol_l.isra.0>
 8007ab2:	bf00      	nop
 8007ab4:	20000018 	.word	0x20000018

08007ab8 <__swbuf_r>:
 8007ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aba:	460e      	mov	r6, r1
 8007abc:	4614      	mov	r4, r2
 8007abe:	4605      	mov	r5, r0
 8007ac0:	b118      	cbz	r0, 8007aca <__swbuf_r+0x12>
 8007ac2:	6983      	ldr	r3, [r0, #24]
 8007ac4:	b90b      	cbnz	r3, 8007aca <__swbuf_r+0x12>
 8007ac6:	f001 f86f 	bl	8008ba8 <__sinit>
 8007aca:	4b21      	ldr	r3, [pc, #132]	; (8007b50 <__swbuf_r+0x98>)
 8007acc:	429c      	cmp	r4, r3
 8007ace:	d12b      	bne.n	8007b28 <__swbuf_r+0x70>
 8007ad0:	686c      	ldr	r4, [r5, #4]
 8007ad2:	69a3      	ldr	r3, [r4, #24]
 8007ad4:	60a3      	str	r3, [r4, #8]
 8007ad6:	89a3      	ldrh	r3, [r4, #12]
 8007ad8:	071a      	lsls	r2, r3, #28
 8007ada:	d52f      	bpl.n	8007b3c <__swbuf_r+0x84>
 8007adc:	6923      	ldr	r3, [r4, #16]
 8007ade:	b36b      	cbz	r3, 8007b3c <__swbuf_r+0x84>
 8007ae0:	6923      	ldr	r3, [r4, #16]
 8007ae2:	6820      	ldr	r0, [r4, #0]
 8007ae4:	b2f6      	uxtb	r6, r6
 8007ae6:	1ac0      	subs	r0, r0, r3
 8007ae8:	6963      	ldr	r3, [r4, #20]
 8007aea:	4637      	mov	r7, r6
 8007aec:	4283      	cmp	r3, r0
 8007aee:	dc04      	bgt.n	8007afa <__swbuf_r+0x42>
 8007af0:	4621      	mov	r1, r4
 8007af2:	4628      	mov	r0, r5
 8007af4:	f000 ffc4 	bl	8008a80 <_fflush_r>
 8007af8:	bb30      	cbnz	r0, 8007b48 <__swbuf_r+0x90>
 8007afa:	68a3      	ldr	r3, [r4, #8]
 8007afc:	3001      	adds	r0, #1
 8007afe:	3b01      	subs	r3, #1
 8007b00:	60a3      	str	r3, [r4, #8]
 8007b02:	6823      	ldr	r3, [r4, #0]
 8007b04:	1c5a      	adds	r2, r3, #1
 8007b06:	6022      	str	r2, [r4, #0]
 8007b08:	701e      	strb	r6, [r3, #0]
 8007b0a:	6963      	ldr	r3, [r4, #20]
 8007b0c:	4283      	cmp	r3, r0
 8007b0e:	d004      	beq.n	8007b1a <__swbuf_r+0x62>
 8007b10:	89a3      	ldrh	r3, [r4, #12]
 8007b12:	07db      	lsls	r3, r3, #31
 8007b14:	d506      	bpl.n	8007b24 <__swbuf_r+0x6c>
 8007b16:	2e0a      	cmp	r6, #10
 8007b18:	d104      	bne.n	8007b24 <__swbuf_r+0x6c>
 8007b1a:	4621      	mov	r1, r4
 8007b1c:	4628      	mov	r0, r5
 8007b1e:	f000 ffaf 	bl	8008a80 <_fflush_r>
 8007b22:	b988      	cbnz	r0, 8007b48 <__swbuf_r+0x90>
 8007b24:	4638      	mov	r0, r7
 8007b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b28:	4b0a      	ldr	r3, [pc, #40]	; (8007b54 <__swbuf_r+0x9c>)
 8007b2a:	429c      	cmp	r4, r3
 8007b2c:	d101      	bne.n	8007b32 <__swbuf_r+0x7a>
 8007b2e:	68ac      	ldr	r4, [r5, #8]
 8007b30:	e7cf      	b.n	8007ad2 <__swbuf_r+0x1a>
 8007b32:	4b09      	ldr	r3, [pc, #36]	; (8007b58 <__swbuf_r+0xa0>)
 8007b34:	429c      	cmp	r4, r3
 8007b36:	bf08      	it	eq
 8007b38:	68ec      	ldreq	r4, [r5, #12]
 8007b3a:	e7ca      	b.n	8007ad2 <__swbuf_r+0x1a>
 8007b3c:	4621      	mov	r1, r4
 8007b3e:	4628      	mov	r0, r5
 8007b40:	f000 f81e 	bl	8007b80 <__swsetup_r>
 8007b44:	2800      	cmp	r0, #0
 8007b46:	d0cb      	beq.n	8007ae0 <__swbuf_r+0x28>
 8007b48:	f04f 37ff 	mov.w	r7, #4294967295
 8007b4c:	e7ea      	b.n	8007b24 <__swbuf_r+0x6c>
 8007b4e:	bf00      	nop
 8007b50:	0800a954 	.word	0x0800a954
 8007b54:	0800a974 	.word	0x0800a974
 8007b58:	0800a934 	.word	0x0800a934

08007b5c <_write_r>:
 8007b5c:	b538      	push	{r3, r4, r5, lr}
 8007b5e:	4604      	mov	r4, r0
 8007b60:	4608      	mov	r0, r1
 8007b62:	4611      	mov	r1, r2
 8007b64:	2200      	movs	r2, #0
 8007b66:	4d05      	ldr	r5, [pc, #20]	; (8007b7c <_write_r+0x20>)
 8007b68:	602a      	str	r2, [r5, #0]
 8007b6a:	461a      	mov	r2, r3
 8007b6c:	f7fb f910 	bl	8002d90 <_write>
 8007b70:	1c43      	adds	r3, r0, #1
 8007b72:	d102      	bne.n	8007b7a <_write_r+0x1e>
 8007b74:	682b      	ldr	r3, [r5, #0]
 8007b76:	b103      	cbz	r3, 8007b7a <_write_r+0x1e>
 8007b78:	6023      	str	r3, [r4, #0]
 8007b7a:	bd38      	pop	{r3, r4, r5, pc}
 8007b7c:	20000554 	.word	0x20000554

08007b80 <__swsetup_r>:
 8007b80:	4b32      	ldr	r3, [pc, #200]	; (8007c4c <__swsetup_r+0xcc>)
 8007b82:	b570      	push	{r4, r5, r6, lr}
 8007b84:	681d      	ldr	r5, [r3, #0]
 8007b86:	4606      	mov	r6, r0
 8007b88:	460c      	mov	r4, r1
 8007b8a:	b125      	cbz	r5, 8007b96 <__swsetup_r+0x16>
 8007b8c:	69ab      	ldr	r3, [r5, #24]
 8007b8e:	b913      	cbnz	r3, 8007b96 <__swsetup_r+0x16>
 8007b90:	4628      	mov	r0, r5
 8007b92:	f001 f809 	bl	8008ba8 <__sinit>
 8007b96:	4b2e      	ldr	r3, [pc, #184]	; (8007c50 <__swsetup_r+0xd0>)
 8007b98:	429c      	cmp	r4, r3
 8007b9a:	d10f      	bne.n	8007bbc <__swsetup_r+0x3c>
 8007b9c:	686c      	ldr	r4, [r5, #4]
 8007b9e:	89a3      	ldrh	r3, [r4, #12]
 8007ba0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ba4:	0719      	lsls	r1, r3, #28
 8007ba6:	d42c      	bmi.n	8007c02 <__swsetup_r+0x82>
 8007ba8:	06dd      	lsls	r5, r3, #27
 8007baa:	d411      	bmi.n	8007bd0 <__swsetup_r+0x50>
 8007bac:	2309      	movs	r3, #9
 8007bae:	6033      	str	r3, [r6, #0]
 8007bb0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8007bb8:	81a3      	strh	r3, [r4, #12]
 8007bba:	e03e      	b.n	8007c3a <__swsetup_r+0xba>
 8007bbc:	4b25      	ldr	r3, [pc, #148]	; (8007c54 <__swsetup_r+0xd4>)
 8007bbe:	429c      	cmp	r4, r3
 8007bc0:	d101      	bne.n	8007bc6 <__swsetup_r+0x46>
 8007bc2:	68ac      	ldr	r4, [r5, #8]
 8007bc4:	e7eb      	b.n	8007b9e <__swsetup_r+0x1e>
 8007bc6:	4b24      	ldr	r3, [pc, #144]	; (8007c58 <__swsetup_r+0xd8>)
 8007bc8:	429c      	cmp	r4, r3
 8007bca:	bf08      	it	eq
 8007bcc:	68ec      	ldreq	r4, [r5, #12]
 8007bce:	e7e6      	b.n	8007b9e <__swsetup_r+0x1e>
 8007bd0:	0758      	lsls	r0, r3, #29
 8007bd2:	d512      	bpl.n	8007bfa <__swsetup_r+0x7a>
 8007bd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007bd6:	b141      	cbz	r1, 8007bea <__swsetup_r+0x6a>
 8007bd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007bdc:	4299      	cmp	r1, r3
 8007bde:	d002      	beq.n	8007be6 <__swsetup_r+0x66>
 8007be0:	4630      	mov	r0, r6
 8007be2:	f7fe fa87 	bl	80060f4 <_free_r>
 8007be6:	2300      	movs	r3, #0
 8007be8:	6363      	str	r3, [r4, #52]	; 0x34
 8007bea:	89a3      	ldrh	r3, [r4, #12]
 8007bec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007bf0:	81a3      	strh	r3, [r4, #12]
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	6063      	str	r3, [r4, #4]
 8007bf6:	6923      	ldr	r3, [r4, #16]
 8007bf8:	6023      	str	r3, [r4, #0]
 8007bfa:	89a3      	ldrh	r3, [r4, #12]
 8007bfc:	f043 0308 	orr.w	r3, r3, #8
 8007c00:	81a3      	strh	r3, [r4, #12]
 8007c02:	6923      	ldr	r3, [r4, #16]
 8007c04:	b94b      	cbnz	r3, 8007c1a <__swsetup_r+0x9a>
 8007c06:	89a3      	ldrh	r3, [r4, #12]
 8007c08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007c0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c10:	d003      	beq.n	8007c1a <__swsetup_r+0x9a>
 8007c12:	4621      	mov	r1, r4
 8007c14:	4630      	mov	r0, r6
 8007c16:	f001 fc09 	bl	800942c <__smakebuf_r>
 8007c1a:	89a0      	ldrh	r0, [r4, #12]
 8007c1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c20:	f010 0301 	ands.w	r3, r0, #1
 8007c24:	d00a      	beq.n	8007c3c <__swsetup_r+0xbc>
 8007c26:	2300      	movs	r3, #0
 8007c28:	60a3      	str	r3, [r4, #8]
 8007c2a:	6963      	ldr	r3, [r4, #20]
 8007c2c:	425b      	negs	r3, r3
 8007c2e:	61a3      	str	r3, [r4, #24]
 8007c30:	6923      	ldr	r3, [r4, #16]
 8007c32:	b943      	cbnz	r3, 8007c46 <__swsetup_r+0xc6>
 8007c34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007c38:	d1ba      	bne.n	8007bb0 <__swsetup_r+0x30>
 8007c3a:	bd70      	pop	{r4, r5, r6, pc}
 8007c3c:	0781      	lsls	r1, r0, #30
 8007c3e:	bf58      	it	pl
 8007c40:	6963      	ldrpl	r3, [r4, #20]
 8007c42:	60a3      	str	r3, [r4, #8]
 8007c44:	e7f4      	b.n	8007c30 <__swsetup_r+0xb0>
 8007c46:	2000      	movs	r0, #0
 8007c48:	e7f7      	b.n	8007c3a <__swsetup_r+0xba>
 8007c4a:	bf00      	nop
 8007c4c:	20000018 	.word	0x20000018
 8007c50:	0800a954 	.word	0x0800a954
 8007c54:	0800a974 	.word	0x0800a974
 8007c58:	0800a934 	.word	0x0800a934

08007c5c <_close_r>:
 8007c5c:	b538      	push	{r3, r4, r5, lr}
 8007c5e:	2300      	movs	r3, #0
 8007c60:	4d05      	ldr	r5, [pc, #20]	; (8007c78 <_close_r+0x1c>)
 8007c62:	4604      	mov	r4, r0
 8007c64:	4608      	mov	r0, r1
 8007c66:	602b      	str	r3, [r5, #0]
 8007c68:	f7fb f8ae 	bl	8002dc8 <_close>
 8007c6c:	1c43      	adds	r3, r0, #1
 8007c6e:	d102      	bne.n	8007c76 <_close_r+0x1a>
 8007c70:	682b      	ldr	r3, [r5, #0]
 8007c72:	b103      	cbz	r3, 8007c76 <_close_r+0x1a>
 8007c74:	6023      	str	r3, [r4, #0]
 8007c76:	bd38      	pop	{r3, r4, r5, pc}
 8007c78:	20000554 	.word	0x20000554

08007c7c <quorem>:
 8007c7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c80:	6903      	ldr	r3, [r0, #16]
 8007c82:	690c      	ldr	r4, [r1, #16]
 8007c84:	4607      	mov	r7, r0
 8007c86:	42a3      	cmp	r3, r4
 8007c88:	f2c0 8083 	blt.w	8007d92 <quorem+0x116>
 8007c8c:	3c01      	subs	r4, #1
 8007c8e:	f100 0514 	add.w	r5, r0, #20
 8007c92:	f101 0814 	add.w	r8, r1, #20
 8007c96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c9a:	9301      	str	r3, [sp, #4]
 8007c9c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007ca0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ca4:	3301      	adds	r3, #1
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	fbb2 f6f3 	udiv	r6, r2, r3
 8007cac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007cb0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007cb4:	d332      	bcc.n	8007d1c <quorem+0xa0>
 8007cb6:	f04f 0e00 	mov.w	lr, #0
 8007cba:	4640      	mov	r0, r8
 8007cbc:	46ac      	mov	ip, r5
 8007cbe:	46f2      	mov	sl, lr
 8007cc0:	f850 2b04 	ldr.w	r2, [r0], #4
 8007cc4:	b293      	uxth	r3, r2
 8007cc6:	fb06 e303 	mla	r3, r6, r3, lr
 8007cca:	0c12      	lsrs	r2, r2, #16
 8007ccc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007cd0:	fb06 e202 	mla	r2, r6, r2, lr
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	ebaa 0303 	sub.w	r3, sl, r3
 8007cda:	f8dc a000 	ldr.w	sl, [ip]
 8007cde:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007ce2:	fa1f fa8a 	uxth.w	sl, sl
 8007ce6:	4453      	add	r3, sl
 8007ce8:	fa1f fa82 	uxth.w	sl, r2
 8007cec:	f8dc 2000 	ldr.w	r2, [ip]
 8007cf0:	4581      	cmp	r9, r0
 8007cf2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007cf6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d00:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007d04:	f84c 3b04 	str.w	r3, [ip], #4
 8007d08:	d2da      	bcs.n	8007cc0 <quorem+0x44>
 8007d0a:	f855 300b 	ldr.w	r3, [r5, fp]
 8007d0e:	b92b      	cbnz	r3, 8007d1c <quorem+0xa0>
 8007d10:	9b01      	ldr	r3, [sp, #4]
 8007d12:	3b04      	subs	r3, #4
 8007d14:	429d      	cmp	r5, r3
 8007d16:	461a      	mov	r2, r3
 8007d18:	d32f      	bcc.n	8007d7a <quorem+0xfe>
 8007d1a:	613c      	str	r4, [r7, #16]
 8007d1c:	4638      	mov	r0, r7
 8007d1e:	f001 feb5 	bl	8009a8c <__mcmp>
 8007d22:	2800      	cmp	r0, #0
 8007d24:	db25      	blt.n	8007d72 <quorem+0xf6>
 8007d26:	4628      	mov	r0, r5
 8007d28:	f04f 0c00 	mov.w	ip, #0
 8007d2c:	3601      	adds	r6, #1
 8007d2e:	f858 1b04 	ldr.w	r1, [r8], #4
 8007d32:	f8d0 e000 	ldr.w	lr, [r0]
 8007d36:	b28b      	uxth	r3, r1
 8007d38:	ebac 0303 	sub.w	r3, ip, r3
 8007d3c:	fa1f f28e 	uxth.w	r2, lr
 8007d40:	4413      	add	r3, r2
 8007d42:	0c0a      	lsrs	r2, r1, #16
 8007d44:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007d48:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007d4c:	b29b      	uxth	r3, r3
 8007d4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d52:	45c1      	cmp	r9, r8
 8007d54:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007d58:	f840 3b04 	str.w	r3, [r0], #4
 8007d5c:	d2e7      	bcs.n	8007d2e <quorem+0xb2>
 8007d5e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d66:	b922      	cbnz	r2, 8007d72 <quorem+0xf6>
 8007d68:	3b04      	subs	r3, #4
 8007d6a:	429d      	cmp	r5, r3
 8007d6c:	461a      	mov	r2, r3
 8007d6e:	d30a      	bcc.n	8007d86 <quorem+0x10a>
 8007d70:	613c      	str	r4, [r7, #16]
 8007d72:	4630      	mov	r0, r6
 8007d74:	b003      	add	sp, #12
 8007d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d7a:	6812      	ldr	r2, [r2, #0]
 8007d7c:	3b04      	subs	r3, #4
 8007d7e:	2a00      	cmp	r2, #0
 8007d80:	d1cb      	bne.n	8007d1a <quorem+0x9e>
 8007d82:	3c01      	subs	r4, #1
 8007d84:	e7c6      	b.n	8007d14 <quorem+0x98>
 8007d86:	6812      	ldr	r2, [r2, #0]
 8007d88:	3b04      	subs	r3, #4
 8007d8a:	2a00      	cmp	r2, #0
 8007d8c:	d1f0      	bne.n	8007d70 <quorem+0xf4>
 8007d8e:	3c01      	subs	r4, #1
 8007d90:	e7eb      	b.n	8007d6a <quorem+0xee>
 8007d92:	2000      	movs	r0, #0
 8007d94:	e7ee      	b.n	8007d74 <quorem+0xf8>
	...

08007d98 <_dtoa_r>:
 8007d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d9c:	4616      	mov	r6, r2
 8007d9e:	461f      	mov	r7, r3
 8007da0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007da2:	b099      	sub	sp, #100	; 0x64
 8007da4:	4605      	mov	r5, r0
 8007da6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007daa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8007dae:	b974      	cbnz	r4, 8007dce <_dtoa_r+0x36>
 8007db0:	2010      	movs	r0, #16
 8007db2:	f7fe f979 	bl	80060a8 <malloc>
 8007db6:	4602      	mov	r2, r0
 8007db8:	6268      	str	r0, [r5, #36]	; 0x24
 8007dba:	b920      	cbnz	r0, 8007dc6 <_dtoa_r+0x2e>
 8007dbc:	21ea      	movs	r1, #234	; 0xea
 8007dbe:	4bae      	ldr	r3, [pc, #696]	; (8008078 <_dtoa_r+0x2e0>)
 8007dc0:	48ae      	ldr	r0, [pc, #696]	; (800807c <_dtoa_r+0x2e4>)
 8007dc2:	f002 fb65 	bl	800a490 <__assert_func>
 8007dc6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007dca:	6004      	str	r4, [r0, #0]
 8007dcc:	60c4      	str	r4, [r0, #12]
 8007dce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007dd0:	6819      	ldr	r1, [r3, #0]
 8007dd2:	b151      	cbz	r1, 8007dea <_dtoa_r+0x52>
 8007dd4:	685a      	ldr	r2, [r3, #4]
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	4093      	lsls	r3, r2
 8007dda:	604a      	str	r2, [r1, #4]
 8007ddc:	608b      	str	r3, [r1, #8]
 8007dde:	4628      	mov	r0, r5
 8007de0:	f001 fbd0 	bl	8009584 <_Bfree>
 8007de4:	2200      	movs	r2, #0
 8007de6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007de8:	601a      	str	r2, [r3, #0]
 8007dea:	1e3b      	subs	r3, r7, #0
 8007dec:	bfaf      	iteee	ge
 8007dee:	2300      	movge	r3, #0
 8007df0:	2201      	movlt	r2, #1
 8007df2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007df6:	9305      	strlt	r3, [sp, #20]
 8007df8:	bfa8      	it	ge
 8007dfa:	f8c8 3000 	strge.w	r3, [r8]
 8007dfe:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007e02:	4b9f      	ldr	r3, [pc, #636]	; (8008080 <_dtoa_r+0x2e8>)
 8007e04:	bfb8      	it	lt
 8007e06:	f8c8 2000 	strlt.w	r2, [r8]
 8007e0a:	ea33 0309 	bics.w	r3, r3, r9
 8007e0e:	d119      	bne.n	8007e44 <_dtoa_r+0xac>
 8007e10:	f242 730f 	movw	r3, #9999	; 0x270f
 8007e14:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007e16:	6013      	str	r3, [r2, #0]
 8007e18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007e1c:	4333      	orrs	r3, r6
 8007e1e:	f000 8580 	beq.w	8008922 <_dtoa_r+0xb8a>
 8007e22:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007e24:	b953      	cbnz	r3, 8007e3c <_dtoa_r+0xa4>
 8007e26:	4b97      	ldr	r3, [pc, #604]	; (8008084 <_dtoa_r+0x2ec>)
 8007e28:	e022      	b.n	8007e70 <_dtoa_r+0xd8>
 8007e2a:	4b97      	ldr	r3, [pc, #604]	; (8008088 <_dtoa_r+0x2f0>)
 8007e2c:	9308      	str	r3, [sp, #32]
 8007e2e:	3308      	adds	r3, #8
 8007e30:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007e32:	6013      	str	r3, [r2, #0]
 8007e34:	9808      	ldr	r0, [sp, #32]
 8007e36:	b019      	add	sp, #100	; 0x64
 8007e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e3c:	4b91      	ldr	r3, [pc, #580]	; (8008084 <_dtoa_r+0x2ec>)
 8007e3e:	9308      	str	r3, [sp, #32]
 8007e40:	3303      	adds	r3, #3
 8007e42:	e7f5      	b.n	8007e30 <_dtoa_r+0x98>
 8007e44:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007e48:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007e4c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007e50:	2200      	movs	r2, #0
 8007e52:	2300      	movs	r3, #0
 8007e54:	f7f8 fdb2 	bl	80009bc <__aeabi_dcmpeq>
 8007e58:	4680      	mov	r8, r0
 8007e5a:	b158      	cbz	r0, 8007e74 <_dtoa_r+0xdc>
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007e60:	6013      	str	r3, [r2, #0]
 8007e62:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	f000 8559 	beq.w	800891c <_dtoa_r+0xb84>
 8007e6a:	4888      	ldr	r0, [pc, #544]	; (800808c <_dtoa_r+0x2f4>)
 8007e6c:	6018      	str	r0, [r3, #0]
 8007e6e:	1e43      	subs	r3, r0, #1
 8007e70:	9308      	str	r3, [sp, #32]
 8007e72:	e7df      	b.n	8007e34 <_dtoa_r+0x9c>
 8007e74:	ab16      	add	r3, sp, #88	; 0x58
 8007e76:	9301      	str	r3, [sp, #4]
 8007e78:	ab17      	add	r3, sp, #92	; 0x5c
 8007e7a:	9300      	str	r3, [sp, #0]
 8007e7c:	4628      	mov	r0, r5
 8007e7e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007e82:	f001 ff29 	bl	8009cd8 <__d2b>
 8007e86:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007e8a:	4682      	mov	sl, r0
 8007e8c:	2c00      	cmp	r4, #0
 8007e8e:	d07e      	beq.n	8007f8e <_dtoa_r+0x1f6>
 8007e90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007e94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e96:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007e9a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e9e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8007ea2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007ea6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007eaa:	2200      	movs	r2, #0
 8007eac:	4b78      	ldr	r3, [pc, #480]	; (8008090 <_dtoa_r+0x2f8>)
 8007eae:	f7f8 f965 	bl	800017c <__aeabi_dsub>
 8007eb2:	a36b      	add	r3, pc, #428	; (adr r3, 8008060 <_dtoa_r+0x2c8>)
 8007eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eb8:	f7f8 fb18 	bl	80004ec <__aeabi_dmul>
 8007ebc:	a36a      	add	r3, pc, #424	; (adr r3, 8008068 <_dtoa_r+0x2d0>)
 8007ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec2:	f7f8 f95d 	bl	8000180 <__adddf3>
 8007ec6:	4606      	mov	r6, r0
 8007ec8:	4620      	mov	r0, r4
 8007eca:	460f      	mov	r7, r1
 8007ecc:	f7f8 faa4 	bl	8000418 <__aeabi_i2d>
 8007ed0:	a367      	add	r3, pc, #412	; (adr r3, 8008070 <_dtoa_r+0x2d8>)
 8007ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed6:	f7f8 fb09 	bl	80004ec <__aeabi_dmul>
 8007eda:	4602      	mov	r2, r0
 8007edc:	460b      	mov	r3, r1
 8007ede:	4630      	mov	r0, r6
 8007ee0:	4639      	mov	r1, r7
 8007ee2:	f7f8 f94d 	bl	8000180 <__adddf3>
 8007ee6:	4606      	mov	r6, r0
 8007ee8:	460f      	mov	r7, r1
 8007eea:	f7f8 fdaf 	bl	8000a4c <__aeabi_d2iz>
 8007eee:	2200      	movs	r2, #0
 8007ef0:	4681      	mov	r9, r0
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	4630      	mov	r0, r6
 8007ef6:	4639      	mov	r1, r7
 8007ef8:	f7f8 fd6a 	bl	80009d0 <__aeabi_dcmplt>
 8007efc:	b148      	cbz	r0, 8007f12 <_dtoa_r+0x17a>
 8007efe:	4648      	mov	r0, r9
 8007f00:	f7f8 fa8a 	bl	8000418 <__aeabi_i2d>
 8007f04:	4632      	mov	r2, r6
 8007f06:	463b      	mov	r3, r7
 8007f08:	f7f8 fd58 	bl	80009bc <__aeabi_dcmpeq>
 8007f0c:	b908      	cbnz	r0, 8007f12 <_dtoa_r+0x17a>
 8007f0e:	f109 39ff 	add.w	r9, r9, #4294967295
 8007f12:	f1b9 0f16 	cmp.w	r9, #22
 8007f16:	d857      	bhi.n	8007fc8 <_dtoa_r+0x230>
 8007f18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007f1c:	4b5d      	ldr	r3, [pc, #372]	; (8008094 <_dtoa_r+0x2fc>)
 8007f1e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8007f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f26:	f7f8 fd53 	bl	80009d0 <__aeabi_dcmplt>
 8007f2a:	2800      	cmp	r0, #0
 8007f2c:	d04e      	beq.n	8007fcc <_dtoa_r+0x234>
 8007f2e:	2300      	movs	r3, #0
 8007f30:	f109 39ff 	add.w	r9, r9, #4294967295
 8007f34:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f36:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007f38:	1b1c      	subs	r4, r3, r4
 8007f3a:	1e63      	subs	r3, r4, #1
 8007f3c:	9309      	str	r3, [sp, #36]	; 0x24
 8007f3e:	bf49      	itett	mi
 8007f40:	f1c4 0301 	rsbmi	r3, r4, #1
 8007f44:	2300      	movpl	r3, #0
 8007f46:	9306      	strmi	r3, [sp, #24]
 8007f48:	2300      	movmi	r3, #0
 8007f4a:	bf54      	ite	pl
 8007f4c:	9306      	strpl	r3, [sp, #24]
 8007f4e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007f50:	f1b9 0f00 	cmp.w	r9, #0
 8007f54:	db3c      	blt.n	8007fd0 <_dtoa_r+0x238>
 8007f56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f58:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007f5c:	444b      	add	r3, r9
 8007f5e:	9309      	str	r3, [sp, #36]	; 0x24
 8007f60:	2300      	movs	r3, #0
 8007f62:	930a      	str	r3, [sp, #40]	; 0x28
 8007f64:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007f66:	2b09      	cmp	r3, #9
 8007f68:	d86c      	bhi.n	8008044 <_dtoa_r+0x2ac>
 8007f6a:	2b05      	cmp	r3, #5
 8007f6c:	bfc4      	itt	gt
 8007f6e:	3b04      	subgt	r3, #4
 8007f70:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007f72:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007f74:	bfc8      	it	gt
 8007f76:	2400      	movgt	r4, #0
 8007f78:	f1a3 0302 	sub.w	r3, r3, #2
 8007f7c:	bfd8      	it	le
 8007f7e:	2401      	movle	r4, #1
 8007f80:	2b03      	cmp	r3, #3
 8007f82:	f200 808b 	bhi.w	800809c <_dtoa_r+0x304>
 8007f86:	e8df f003 	tbb	[pc, r3]
 8007f8a:	4f2d      	.short	0x4f2d
 8007f8c:	5b4d      	.short	0x5b4d
 8007f8e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007f92:	441c      	add	r4, r3
 8007f94:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007f98:	2b20      	cmp	r3, #32
 8007f9a:	bfc3      	ittte	gt
 8007f9c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007fa0:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8007fa4:	fa09 f303 	lslgt.w	r3, r9, r3
 8007fa8:	f1c3 0320 	rsble	r3, r3, #32
 8007fac:	bfc6      	itte	gt
 8007fae:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007fb2:	4318      	orrgt	r0, r3
 8007fb4:	fa06 f003 	lslle.w	r0, r6, r3
 8007fb8:	f7f8 fa1e 	bl	80003f8 <__aeabi_ui2d>
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007fc2:	3c01      	subs	r4, #1
 8007fc4:	9313      	str	r3, [sp, #76]	; 0x4c
 8007fc6:	e770      	b.n	8007eaa <_dtoa_r+0x112>
 8007fc8:	2301      	movs	r3, #1
 8007fca:	e7b3      	b.n	8007f34 <_dtoa_r+0x19c>
 8007fcc:	900f      	str	r0, [sp, #60]	; 0x3c
 8007fce:	e7b2      	b.n	8007f36 <_dtoa_r+0x19e>
 8007fd0:	9b06      	ldr	r3, [sp, #24]
 8007fd2:	eba3 0309 	sub.w	r3, r3, r9
 8007fd6:	9306      	str	r3, [sp, #24]
 8007fd8:	f1c9 0300 	rsb	r3, r9, #0
 8007fdc:	930a      	str	r3, [sp, #40]	; 0x28
 8007fde:	2300      	movs	r3, #0
 8007fe0:	930e      	str	r3, [sp, #56]	; 0x38
 8007fe2:	e7bf      	b.n	8007f64 <_dtoa_r+0x1cc>
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	930b      	str	r3, [sp, #44]	; 0x2c
 8007fe8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	dc59      	bgt.n	80080a2 <_dtoa_r+0x30a>
 8007fee:	f04f 0b01 	mov.w	fp, #1
 8007ff2:	465b      	mov	r3, fp
 8007ff4:	f8cd b008 	str.w	fp, [sp, #8]
 8007ff8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8008000:	6042      	str	r2, [r0, #4]
 8008002:	2204      	movs	r2, #4
 8008004:	f102 0614 	add.w	r6, r2, #20
 8008008:	429e      	cmp	r6, r3
 800800a:	6841      	ldr	r1, [r0, #4]
 800800c:	d94f      	bls.n	80080ae <_dtoa_r+0x316>
 800800e:	4628      	mov	r0, r5
 8008010:	f001 fa78 	bl	8009504 <_Balloc>
 8008014:	9008      	str	r0, [sp, #32]
 8008016:	2800      	cmp	r0, #0
 8008018:	d14d      	bne.n	80080b6 <_dtoa_r+0x31e>
 800801a:	4602      	mov	r2, r0
 800801c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008020:	4b1d      	ldr	r3, [pc, #116]	; (8008098 <_dtoa_r+0x300>)
 8008022:	e6cd      	b.n	8007dc0 <_dtoa_r+0x28>
 8008024:	2301      	movs	r3, #1
 8008026:	e7de      	b.n	8007fe6 <_dtoa_r+0x24e>
 8008028:	2300      	movs	r3, #0
 800802a:	930b      	str	r3, [sp, #44]	; 0x2c
 800802c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800802e:	eb09 0b03 	add.w	fp, r9, r3
 8008032:	f10b 0301 	add.w	r3, fp, #1
 8008036:	2b01      	cmp	r3, #1
 8008038:	9302      	str	r3, [sp, #8]
 800803a:	bfb8      	it	lt
 800803c:	2301      	movlt	r3, #1
 800803e:	e7dd      	b.n	8007ffc <_dtoa_r+0x264>
 8008040:	2301      	movs	r3, #1
 8008042:	e7f2      	b.n	800802a <_dtoa_r+0x292>
 8008044:	2401      	movs	r4, #1
 8008046:	2300      	movs	r3, #0
 8008048:	940b      	str	r4, [sp, #44]	; 0x2c
 800804a:	9322      	str	r3, [sp, #136]	; 0x88
 800804c:	f04f 3bff 	mov.w	fp, #4294967295
 8008050:	2200      	movs	r2, #0
 8008052:	2312      	movs	r3, #18
 8008054:	f8cd b008 	str.w	fp, [sp, #8]
 8008058:	9223      	str	r2, [sp, #140]	; 0x8c
 800805a:	e7cf      	b.n	8007ffc <_dtoa_r+0x264>
 800805c:	f3af 8000 	nop.w
 8008060:	636f4361 	.word	0x636f4361
 8008064:	3fd287a7 	.word	0x3fd287a7
 8008068:	8b60c8b3 	.word	0x8b60c8b3
 800806c:	3fc68a28 	.word	0x3fc68a28
 8008070:	509f79fb 	.word	0x509f79fb
 8008074:	3fd34413 	.word	0x3fd34413
 8008078:	0800a8ad 	.word	0x0800a8ad
 800807c:	0800a8c4 	.word	0x0800a8c4
 8008080:	7ff00000 	.word	0x7ff00000
 8008084:	0800a8a9 	.word	0x0800a8a9
 8008088:	0800a8a0 	.word	0x0800a8a0
 800808c:	0800a82d 	.word	0x0800a82d
 8008090:	3ff80000 	.word	0x3ff80000
 8008094:	0800aaa0 	.word	0x0800aaa0
 8008098:	0800a923 	.word	0x0800a923
 800809c:	2301      	movs	r3, #1
 800809e:	930b      	str	r3, [sp, #44]	; 0x2c
 80080a0:	e7d4      	b.n	800804c <_dtoa_r+0x2b4>
 80080a2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80080a6:	465b      	mov	r3, fp
 80080a8:	f8cd b008 	str.w	fp, [sp, #8]
 80080ac:	e7a6      	b.n	8007ffc <_dtoa_r+0x264>
 80080ae:	3101      	adds	r1, #1
 80080b0:	6041      	str	r1, [r0, #4]
 80080b2:	0052      	lsls	r2, r2, #1
 80080b4:	e7a6      	b.n	8008004 <_dtoa_r+0x26c>
 80080b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80080b8:	9a08      	ldr	r2, [sp, #32]
 80080ba:	601a      	str	r2, [r3, #0]
 80080bc:	9b02      	ldr	r3, [sp, #8]
 80080be:	2b0e      	cmp	r3, #14
 80080c0:	f200 80a8 	bhi.w	8008214 <_dtoa_r+0x47c>
 80080c4:	2c00      	cmp	r4, #0
 80080c6:	f000 80a5 	beq.w	8008214 <_dtoa_r+0x47c>
 80080ca:	f1b9 0f00 	cmp.w	r9, #0
 80080ce:	dd34      	ble.n	800813a <_dtoa_r+0x3a2>
 80080d0:	4a9a      	ldr	r2, [pc, #616]	; (800833c <_dtoa_r+0x5a4>)
 80080d2:	f009 030f 	and.w	r3, r9, #15
 80080d6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80080da:	f419 7f80 	tst.w	r9, #256	; 0x100
 80080de:	e9d3 3400 	ldrd	r3, r4, [r3]
 80080e2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80080e6:	ea4f 1429 	mov.w	r4, r9, asr #4
 80080ea:	d016      	beq.n	800811a <_dtoa_r+0x382>
 80080ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80080f0:	4b93      	ldr	r3, [pc, #588]	; (8008340 <_dtoa_r+0x5a8>)
 80080f2:	2703      	movs	r7, #3
 80080f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80080f8:	f7f8 fb22 	bl	8000740 <__aeabi_ddiv>
 80080fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008100:	f004 040f 	and.w	r4, r4, #15
 8008104:	4e8e      	ldr	r6, [pc, #568]	; (8008340 <_dtoa_r+0x5a8>)
 8008106:	b954      	cbnz	r4, 800811e <_dtoa_r+0x386>
 8008108:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800810c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008110:	f7f8 fb16 	bl	8000740 <__aeabi_ddiv>
 8008114:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008118:	e029      	b.n	800816e <_dtoa_r+0x3d6>
 800811a:	2702      	movs	r7, #2
 800811c:	e7f2      	b.n	8008104 <_dtoa_r+0x36c>
 800811e:	07e1      	lsls	r1, r4, #31
 8008120:	d508      	bpl.n	8008134 <_dtoa_r+0x39c>
 8008122:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008126:	e9d6 2300 	ldrd	r2, r3, [r6]
 800812a:	f7f8 f9df 	bl	80004ec <__aeabi_dmul>
 800812e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008132:	3701      	adds	r7, #1
 8008134:	1064      	asrs	r4, r4, #1
 8008136:	3608      	adds	r6, #8
 8008138:	e7e5      	b.n	8008106 <_dtoa_r+0x36e>
 800813a:	f000 80a5 	beq.w	8008288 <_dtoa_r+0x4f0>
 800813e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008142:	f1c9 0400 	rsb	r4, r9, #0
 8008146:	4b7d      	ldr	r3, [pc, #500]	; (800833c <_dtoa_r+0x5a4>)
 8008148:	f004 020f 	and.w	r2, r4, #15
 800814c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008154:	f7f8 f9ca 	bl	80004ec <__aeabi_dmul>
 8008158:	2702      	movs	r7, #2
 800815a:	2300      	movs	r3, #0
 800815c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008160:	4e77      	ldr	r6, [pc, #476]	; (8008340 <_dtoa_r+0x5a8>)
 8008162:	1124      	asrs	r4, r4, #4
 8008164:	2c00      	cmp	r4, #0
 8008166:	f040 8084 	bne.w	8008272 <_dtoa_r+0x4da>
 800816a:	2b00      	cmp	r3, #0
 800816c:	d1d2      	bne.n	8008114 <_dtoa_r+0x37c>
 800816e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008170:	2b00      	cmp	r3, #0
 8008172:	f000 808b 	beq.w	800828c <_dtoa_r+0x4f4>
 8008176:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800817a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800817e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008182:	2200      	movs	r2, #0
 8008184:	4b6f      	ldr	r3, [pc, #444]	; (8008344 <_dtoa_r+0x5ac>)
 8008186:	f7f8 fc23 	bl	80009d0 <__aeabi_dcmplt>
 800818a:	2800      	cmp	r0, #0
 800818c:	d07e      	beq.n	800828c <_dtoa_r+0x4f4>
 800818e:	9b02      	ldr	r3, [sp, #8]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d07b      	beq.n	800828c <_dtoa_r+0x4f4>
 8008194:	f1bb 0f00 	cmp.w	fp, #0
 8008198:	dd38      	ble.n	800820c <_dtoa_r+0x474>
 800819a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800819e:	2200      	movs	r2, #0
 80081a0:	4b69      	ldr	r3, [pc, #420]	; (8008348 <_dtoa_r+0x5b0>)
 80081a2:	f7f8 f9a3 	bl	80004ec <__aeabi_dmul>
 80081a6:	465c      	mov	r4, fp
 80081a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80081ac:	f109 38ff 	add.w	r8, r9, #4294967295
 80081b0:	3701      	adds	r7, #1
 80081b2:	4638      	mov	r0, r7
 80081b4:	f7f8 f930 	bl	8000418 <__aeabi_i2d>
 80081b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081bc:	f7f8 f996 	bl	80004ec <__aeabi_dmul>
 80081c0:	2200      	movs	r2, #0
 80081c2:	4b62      	ldr	r3, [pc, #392]	; (800834c <_dtoa_r+0x5b4>)
 80081c4:	f7f7 ffdc 	bl	8000180 <__adddf3>
 80081c8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80081cc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80081d0:	9611      	str	r6, [sp, #68]	; 0x44
 80081d2:	2c00      	cmp	r4, #0
 80081d4:	d15d      	bne.n	8008292 <_dtoa_r+0x4fa>
 80081d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80081da:	2200      	movs	r2, #0
 80081dc:	4b5c      	ldr	r3, [pc, #368]	; (8008350 <_dtoa_r+0x5b8>)
 80081de:	f7f7 ffcd 	bl	800017c <__aeabi_dsub>
 80081e2:	4602      	mov	r2, r0
 80081e4:	460b      	mov	r3, r1
 80081e6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80081ea:	4633      	mov	r3, r6
 80081ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80081ee:	f7f8 fc0d 	bl	8000a0c <__aeabi_dcmpgt>
 80081f2:	2800      	cmp	r0, #0
 80081f4:	f040 829e 	bne.w	8008734 <_dtoa_r+0x99c>
 80081f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80081fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80081fe:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008202:	f7f8 fbe5 	bl	80009d0 <__aeabi_dcmplt>
 8008206:	2800      	cmp	r0, #0
 8008208:	f040 8292 	bne.w	8008730 <_dtoa_r+0x998>
 800820c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008210:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008214:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008216:	2b00      	cmp	r3, #0
 8008218:	f2c0 8153 	blt.w	80084c2 <_dtoa_r+0x72a>
 800821c:	f1b9 0f0e 	cmp.w	r9, #14
 8008220:	f300 814f 	bgt.w	80084c2 <_dtoa_r+0x72a>
 8008224:	4b45      	ldr	r3, [pc, #276]	; (800833c <_dtoa_r+0x5a4>)
 8008226:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800822a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800822e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8008232:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008234:	2b00      	cmp	r3, #0
 8008236:	f280 80db 	bge.w	80083f0 <_dtoa_r+0x658>
 800823a:	9b02      	ldr	r3, [sp, #8]
 800823c:	2b00      	cmp	r3, #0
 800823e:	f300 80d7 	bgt.w	80083f0 <_dtoa_r+0x658>
 8008242:	f040 8274 	bne.w	800872e <_dtoa_r+0x996>
 8008246:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800824a:	2200      	movs	r2, #0
 800824c:	4b40      	ldr	r3, [pc, #256]	; (8008350 <_dtoa_r+0x5b8>)
 800824e:	f7f8 f94d 	bl	80004ec <__aeabi_dmul>
 8008252:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008256:	f7f8 fbcf 	bl	80009f8 <__aeabi_dcmpge>
 800825a:	9c02      	ldr	r4, [sp, #8]
 800825c:	4626      	mov	r6, r4
 800825e:	2800      	cmp	r0, #0
 8008260:	f040 824a 	bne.w	80086f8 <_dtoa_r+0x960>
 8008264:	2331      	movs	r3, #49	; 0x31
 8008266:	9f08      	ldr	r7, [sp, #32]
 8008268:	f109 0901 	add.w	r9, r9, #1
 800826c:	f807 3b01 	strb.w	r3, [r7], #1
 8008270:	e246      	b.n	8008700 <_dtoa_r+0x968>
 8008272:	07e2      	lsls	r2, r4, #31
 8008274:	d505      	bpl.n	8008282 <_dtoa_r+0x4ea>
 8008276:	e9d6 2300 	ldrd	r2, r3, [r6]
 800827a:	f7f8 f937 	bl	80004ec <__aeabi_dmul>
 800827e:	2301      	movs	r3, #1
 8008280:	3701      	adds	r7, #1
 8008282:	1064      	asrs	r4, r4, #1
 8008284:	3608      	adds	r6, #8
 8008286:	e76d      	b.n	8008164 <_dtoa_r+0x3cc>
 8008288:	2702      	movs	r7, #2
 800828a:	e770      	b.n	800816e <_dtoa_r+0x3d6>
 800828c:	46c8      	mov	r8, r9
 800828e:	9c02      	ldr	r4, [sp, #8]
 8008290:	e78f      	b.n	80081b2 <_dtoa_r+0x41a>
 8008292:	9908      	ldr	r1, [sp, #32]
 8008294:	4b29      	ldr	r3, [pc, #164]	; (800833c <_dtoa_r+0x5a4>)
 8008296:	4421      	add	r1, r4
 8008298:	9112      	str	r1, [sp, #72]	; 0x48
 800829a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800829c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80082a0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80082a4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80082a8:	2900      	cmp	r1, #0
 80082aa:	d055      	beq.n	8008358 <_dtoa_r+0x5c0>
 80082ac:	2000      	movs	r0, #0
 80082ae:	4929      	ldr	r1, [pc, #164]	; (8008354 <_dtoa_r+0x5bc>)
 80082b0:	f7f8 fa46 	bl	8000740 <__aeabi_ddiv>
 80082b4:	463b      	mov	r3, r7
 80082b6:	4632      	mov	r2, r6
 80082b8:	f7f7 ff60 	bl	800017c <__aeabi_dsub>
 80082bc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80082c0:	9f08      	ldr	r7, [sp, #32]
 80082c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80082c6:	f7f8 fbc1 	bl	8000a4c <__aeabi_d2iz>
 80082ca:	4604      	mov	r4, r0
 80082cc:	f7f8 f8a4 	bl	8000418 <__aeabi_i2d>
 80082d0:	4602      	mov	r2, r0
 80082d2:	460b      	mov	r3, r1
 80082d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80082d8:	f7f7 ff50 	bl	800017c <__aeabi_dsub>
 80082dc:	4602      	mov	r2, r0
 80082de:	460b      	mov	r3, r1
 80082e0:	3430      	adds	r4, #48	; 0x30
 80082e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80082e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80082ea:	f807 4b01 	strb.w	r4, [r7], #1
 80082ee:	f7f8 fb6f 	bl	80009d0 <__aeabi_dcmplt>
 80082f2:	2800      	cmp	r0, #0
 80082f4:	d174      	bne.n	80083e0 <_dtoa_r+0x648>
 80082f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80082fa:	2000      	movs	r0, #0
 80082fc:	4911      	ldr	r1, [pc, #68]	; (8008344 <_dtoa_r+0x5ac>)
 80082fe:	f7f7 ff3d 	bl	800017c <__aeabi_dsub>
 8008302:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008306:	f7f8 fb63 	bl	80009d0 <__aeabi_dcmplt>
 800830a:	2800      	cmp	r0, #0
 800830c:	f040 80b6 	bne.w	800847c <_dtoa_r+0x6e4>
 8008310:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008312:	429f      	cmp	r7, r3
 8008314:	f43f af7a 	beq.w	800820c <_dtoa_r+0x474>
 8008318:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800831c:	2200      	movs	r2, #0
 800831e:	4b0a      	ldr	r3, [pc, #40]	; (8008348 <_dtoa_r+0x5b0>)
 8008320:	f7f8 f8e4 	bl	80004ec <__aeabi_dmul>
 8008324:	2200      	movs	r2, #0
 8008326:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800832a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800832e:	4b06      	ldr	r3, [pc, #24]	; (8008348 <_dtoa_r+0x5b0>)
 8008330:	f7f8 f8dc 	bl	80004ec <__aeabi_dmul>
 8008334:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008338:	e7c3      	b.n	80082c2 <_dtoa_r+0x52a>
 800833a:	bf00      	nop
 800833c:	0800aaa0 	.word	0x0800aaa0
 8008340:	0800aa78 	.word	0x0800aa78
 8008344:	3ff00000 	.word	0x3ff00000
 8008348:	40240000 	.word	0x40240000
 800834c:	401c0000 	.word	0x401c0000
 8008350:	40140000 	.word	0x40140000
 8008354:	3fe00000 	.word	0x3fe00000
 8008358:	4630      	mov	r0, r6
 800835a:	4639      	mov	r1, r7
 800835c:	f7f8 f8c6 	bl	80004ec <__aeabi_dmul>
 8008360:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008362:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008366:	9c08      	ldr	r4, [sp, #32]
 8008368:	9314      	str	r3, [sp, #80]	; 0x50
 800836a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800836e:	f7f8 fb6d 	bl	8000a4c <__aeabi_d2iz>
 8008372:	9015      	str	r0, [sp, #84]	; 0x54
 8008374:	f7f8 f850 	bl	8000418 <__aeabi_i2d>
 8008378:	4602      	mov	r2, r0
 800837a:	460b      	mov	r3, r1
 800837c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008380:	f7f7 fefc 	bl	800017c <__aeabi_dsub>
 8008384:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008386:	4606      	mov	r6, r0
 8008388:	3330      	adds	r3, #48	; 0x30
 800838a:	f804 3b01 	strb.w	r3, [r4], #1
 800838e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008390:	460f      	mov	r7, r1
 8008392:	429c      	cmp	r4, r3
 8008394:	f04f 0200 	mov.w	r2, #0
 8008398:	d124      	bne.n	80083e4 <_dtoa_r+0x64c>
 800839a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800839e:	4bb3      	ldr	r3, [pc, #716]	; (800866c <_dtoa_r+0x8d4>)
 80083a0:	f7f7 feee 	bl	8000180 <__adddf3>
 80083a4:	4602      	mov	r2, r0
 80083a6:	460b      	mov	r3, r1
 80083a8:	4630      	mov	r0, r6
 80083aa:	4639      	mov	r1, r7
 80083ac:	f7f8 fb2e 	bl	8000a0c <__aeabi_dcmpgt>
 80083b0:	2800      	cmp	r0, #0
 80083b2:	d162      	bne.n	800847a <_dtoa_r+0x6e2>
 80083b4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80083b8:	2000      	movs	r0, #0
 80083ba:	49ac      	ldr	r1, [pc, #688]	; (800866c <_dtoa_r+0x8d4>)
 80083bc:	f7f7 fede 	bl	800017c <__aeabi_dsub>
 80083c0:	4602      	mov	r2, r0
 80083c2:	460b      	mov	r3, r1
 80083c4:	4630      	mov	r0, r6
 80083c6:	4639      	mov	r1, r7
 80083c8:	f7f8 fb02 	bl	80009d0 <__aeabi_dcmplt>
 80083cc:	2800      	cmp	r0, #0
 80083ce:	f43f af1d 	beq.w	800820c <_dtoa_r+0x474>
 80083d2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80083d4:	1e7b      	subs	r3, r7, #1
 80083d6:	9314      	str	r3, [sp, #80]	; 0x50
 80083d8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80083dc:	2b30      	cmp	r3, #48	; 0x30
 80083de:	d0f8      	beq.n	80083d2 <_dtoa_r+0x63a>
 80083e0:	46c1      	mov	r9, r8
 80083e2:	e03a      	b.n	800845a <_dtoa_r+0x6c2>
 80083e4:	4ba2      	ldr	r3, [pc, #648]	; (8008670 <_dtoa_r+0x8d8>)
 80083e6:	f7f8 f881 	bl	80004ec <__aeabi_dmul>
 80083ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80083ee:	e7bc      	b.n	800836a <_dtoa_r+0x5d2>
 80083f0:	9f08      	ldr	r7, [sp, #32]
 80083f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80083f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80083fa:	f7f8 f9a1 	bl	8000740 <__aeabi_ddiv>
 80083fe:	f7f8 fb25 	bl	8000a4c <__aeabi_d2iz>
 8008402:	4604      	mov	r4, r0
 8008404:	f7f8 f808 	bl	8000418 <__aeabi_i2d>
 8008408:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800840c:	f7f8 f86e 	bl	80004ec <__aeabi_dmul>
 8008410:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8008414:	460b      	mov	r3, r1
 8008416:	4602      	mov	r2, r0
 8008418:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800841c:	f7f7 feae 	bl	800017c <__aeabi_dsub>
 8008420:	f807 6b01 	strb.w	r6, [r7], #1
 8008424:	9e08      	ldr	r6, [sp, #32]
 8008426:	9b02      	ldr	r3, [sp, #8]
 8008428:	1bbe      	subs	r6, r7, r6
 800842a:	42b3      	cmp	r3, r6
 800842c:	d13a      	bne.n	80084a4 <_dtoa_r+0x70c>
 800842e:	4602      	mov	r2, r0
 8008430:	460b      	mov	r3, r1
 8008432:	f7f7 fea5 	bl	8000180 <__adddf3>
 8008436:	4602      	mov	r2, r0
 8008438:	460b      	mov	r3, r1
 800843a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800843e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008442:	f7f8 fae3 	bl	8000a0c <__aeabi_dcmpgt>
 8008446:	bb58      	cbnz	r0, 80084a0 <_dtoa_r+0x708>
 8008448:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800844c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008450:	f7f8 fab4 	bl	80009bc <__aeabi_dcmpeq>
 8008454:	b108      	cbz	r0, 800845a <_dtoa_r+0x6c2>
 8008456:	07e1      	lsls	r1, r4, #31
 8008458:	d422      	bmi.n	80084a0 <_dtoa_r+0x708>
 800845a:	4628      	mov	r0, r5
 800845c:	4651      	mov	r1, sl
 800845e:	f001 f891 	bl	8009584 <_Bfree>
 8008462:	2300      	movs	r3, #0
 8008464:	703b      	strb	r3, [r7, #0]
 8008466:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008468:	f109 0001 	add.w	r0, r9, #1
 800846c:	6018      	str	r0, [r3, #0]
 800846e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008470:	2b00      	cmp	r3, #0
 8008472:	f43f acdf 	beq.w	8007e34 <_dtoa_r+0x9c>
 8008476:	601f      	str	r7, [r3, #0]
 8008478:	e4dc      	b.n	8007e34 <_dtoa_r+0x9c>
 800847a:	4627      	mov	r7, r4
 800847c:	463b      	mov	r3, r7
 800847e:	461f      	mov	r7, r3
 8008480:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008484:	2a39      	cmp	r2, #57	; 0x39
 8008486:	d107      	bne.n	8008498 <_dtoa_r+0x700>
 8008488:	9a08      	ldr	r2, [sp, #32]
 800848a:	429a      	cmp	r2, r3
 800848c:	d1f7      	bne.n	800847e <_dtoa_r+0x6e6>
 800848e:	2230      	movs	r2, #48	; 0x30
 8008490:	9908      	ldr	r1, [sp, #32]
 8008492:	f108 0801 	add.w	r8, r8, #1
 8008496:	700a      	strb	r2, [r1, #0]
 8008498:	781a      	ldrb	r2, [r3, #0]
 800849a:	3201      	adds	r2, #1
 800849c:	701a      	strb	r2, [r3, #0]
 800849e:	e79f      	b.n	80083e0 <_dtoa_r+0x648>
 80084a0:	46c8      	mov	r8, r9
 80084a2:	e7eb      	b.n	800847c <_dtoa_r+0x6e4>
 80084a4:	2200      	movs	r2, #0
 80084a6:	4b72      	ldr	r3, [pc, #456]	; (8008670 <_dtoa_r+0x8d8>)
 80084a8:	f7f8 f820 	bl	80004ec <__aeabi_dmul>
 80084ac:	4602      	mov	r2, r0
 80084ae:	460b      	mov	r3, r1
 80084b0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80084b4:	2200      	movs	r2, #0
 80084b6:	2300      	movs	r3, #0
 80084b8:	f7f8 fa80 	bl	80009bc <__aeabi_dcmpeq>
 80084bc:	2800      	cmp	r0, #0
 80084be:	d098      	beq.n	80083f2 <_dtoa_r+0x65a>
 80084c0:	e7cb      	b.n	800845a <_dtoa_r+0x6c2>
 80084c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80084c4:	2a00      	cmp	r2, #0
 80084c6:	f000 80cd 	beq.w	8008664 <_dtoa_r+0x8cc>
 80084ca:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80084cc:	2a01      	cmp	r2, #1
 80084ce:	f300 80af 	bgt.w	8008630 <_dtoa_r+0x898>
 80084d2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80084d4:	2a00      	cmp	r2, #0
 80084d6:	f000 80a7 	beq.w	8008628 <_dtoa_r+0x890>
 80084da:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80084de:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80084e0:	9f06      	ldr	r7, [sp, #24]
 80084e2:	9a06      	ldr	r2, [sp, #24]
 80084e4:	2101      	movs	r1, #1
 80084e6:	441a      	add	r2, r3
 80084e8:	9206      	str	r2, [sp, #24]
 80084ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084ec:	4628      	mov	r0, r5
 80084ee:	441a      	add	r2, r3
 80084f0:	9209      	str	r2, [sp, #36]	; 0x24
 80084f2:	f001 f94b 	bl	800978c <__i2b>
 80084f6:	4606      	mov	r6, r0
 80084f8:	2f00      	cmp	r7, #0
 80084fa:	dd0c      	ble.n	8008516 <_dtoa_r+0x77e>
 80084fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084fe:	2b00      	cmp	r3, #0
 8008500:	dd09      	ble.n	8008516 <_dtoa_r+0x77e>
 8008502:	42bb      	cmp	r3, r7
 8008504:	bfa8      	it	ge
 8008506:	463b      	movge	r3, r7
 8008508:	9a06      	ldr	r2, [sp, #24]
 800850a:	1aff      	subs	r7, r7, r3
 800850c:	1ad2      	subs	r2, r2, r3
 800850e:	9206      	str	r2, [sp, #24]
 8008510:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008512:	1ad3      	subs	r3, r2, r3
 8008514:	9309      	str	r3, [sp, #36]	; 0x24
 8008516:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008518:	b1f3      	cbz	r3, 8008558 <_dtoa_r+0x7c0>
 800851a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800851c:	2b00      	cmp	r3, #0
 800851e:	f000 80a9 	beq.w	8008674 <_dtoa_r+0x8dc>
 8008522:	2c00      	cmp	r4, #0
 8008524:	dd10      	ble.n	8008548 <_dtoa_r+0x7b0>
 8008526:	4631      	mov	r1, r6
 8008528:	4622      	mov	r2, r4
 800852a:	4628      	mov	r0, r5
 800852c:	f001 f9e8 	bl	8009900 <__pow5mult>
 8008530:	4652      	mov	r2, sl
 8008532:	4601      	mov	r1, r0
 8008534:	4606      	mov	r6, r0
 8008536:	4628      	mov	r0, r5
 8008538:	f001 f93e 	bl	80097b8 <__multiply>
 800853c:	4680      	mov	r8, r0
 800853e:	4651      	mov	r1, sl
 8008540:	4628      	mov	r0, r5
 8008542:	f001 f81f 	bl	8009584 <_Bfree>
 8008546:	46c2      	mov	sl, r8
 8008548:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800854a:	1b1a      	subs	r2, r3, r4
 800854c:	d004      	beq.n	8008558 <_dtoa_r+0x7c0>
 800854e:	4651      	mov	r1, sl
 8008550:	4628      	mov	r0, r5
 8008552:	f001 f9d5 	bl	8009900 <__pow5mult>
 8008556:	4682      	mov	sl, r0
 8008558:	2101      	movs	r1, #1
 800855a:	4628      	mov	r0, r5
 800855c:	f001 f916 	bl	800978c <__i2b>
 8008560:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008562:	4604      	mov	r4, r0
 8008564:	2b00      	cmp	r3, #0
 8008566:	f340 8087 	ble.w	8008678 <_dtoa_r+0x8e0>
 800856a:	461a      	mov	r2, r3
 800856c:	4601      	mov	r1, r0
 800856e:	4628      	mov	r0, r5
 8008570:	f001 f9c6 	bl	8009900 <__pow5mult>
 8008574:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008576:	4604      	mov	r4, r0
 8008578:	2b01      	cmp	r3, #1
 800857a:	f340 8080 	ble.w	800867e <_dtoa_r+0x8e6>
 800857e:	f04f 0800 	mov.w	r8, #0
 8008582:	6923      	ldr	r3, [r4, #16]
 8008584:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008588:	6918      	ldr	r0, [r3, #16]
 800858a:	f001 f8b1 	bl	80096f0 <__hi0bits>
 800858e:	f1c0 0020 	rsb	r0, r0, #32
 8008592:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008594:	4418      	add	r0, r3
 8008596:	f010 001f 	ands.w	r0, r0, #31
 800859a:	f000 8092 	beq.w	80086c2 <_dtoa_r+0x92a>
 800859e:	f1c0 0320 	rsb	r3, r0, #32
 80085a2:	2b04      	cmp	r3, #4
 80085a4:	f340 808a 	ble.w	80086bc <_dtoa_r+0x924>
 80085a8:	f1c0 001c 	rsb	r0, r0, #28
 80085ac:	9b06      	ldr	r3, [sp, #24]
 80085ae:	4407      	add	r7, r0
 80085b0:	4403      	add	r3, r0
 80085b2:	9306      	str	r3, [sp, #24]
 80085b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085b6:	4403      	add	r3, r0
 80085b8:	9309      	str	r3, [sp, #36]	; 0x24
 80085ba:	9b06      	ldr	r3, [sp, #24]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	dd05      	ble.n	80085cc <_dtoa_r+0x834>
 80085c0:	4651      	mov	r1, sl
 80085c2:	461a      	mov	r2, r3
 80085c4:	4628      	mov	r0, r5
 80085c6:	f001 f9f5 	bl	80099b4 <__lshift>
 80085ca:	4682      	mov	sl, r0
 80085cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	dd05      	ble.n	80085de <_dtoa_r+0x846>
 80085d2:	4621      	mov	r1, r4
 80085d4:	461a      	mov	r2, r3
 80085d6:	4628      	mov	r0, r5
 80085d8:	f001 f9ec 	bl	80099b4 <__lshift>
 80085dc:	4604      	mov	r4, r0
 80085de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d070      	beq.n	80086c6 <_dtoa_r+0x92e>
 80085e4:	4621      	mov	r1, r4
 80085e6:	4650      	mov	r0, sl
 80085e8:	f001 fa50 	bl	8009a8c <__mcmp>
 80085ec:	2800      	cmp	r0, #0
 80085ee:	da6a      	bge.n	80086c6 <_dtoa_r+0x92e>
 80085f0:	2300      	movs	r3, #0
 80085f2:	4651      	mov	r1, sl
 80085f4:	220a      	movs	r2, #10
 80085f6:	4628      	mov	r0, r5
 80085f8:	f000 ffe6 	bl	80095c8 <__multadd>
 80085fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085fe:	4682      	mov	sl, r0
 8008600:	f109 39ff 	add.w	r9, r9, #4294967295
 8008604:	2b00      	cmp	r3, #0
 8008606:	f000 8193 	beq.w	8008930 <_dtoa_r+0xb98>
 800860a:	4631      	mov	r1, r6
 800860c:	2300      	movs	r3, #0
 800860e:	220a      	movs	r2, #10
 8008610:	4628      	mov	r0, r5
 8008612:	f000 ffd9 	bl	80095c8 <__multadd>
 8008616:	f1bb 0f00 	cmp.w	fp, #0
 800861a:	4606      	mov	r6, r0
 800861c:	f300 8093 	bgt.w	8008746 <_dtoa_r+0x9ae>
 8008620:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008622:	2b02      	cmp	r3, #2
 8008624:	dc57      	bgt.n	80086d6 <_dtoa_r+0x93e>
 8008626:	e08e      	b.n	8008746 <_dtoa_r+0x9ae>
 8008628:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800862a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800862e:	e756      	b.n	80084de <_dtoa_r+0x746>
 8008630:	9b02      	ldr	r3, [sp, #8]
 8008632:	1e5c      	subs	r4, r3, #1
 8008634:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008636:	42a3      	cmp	r3, r4
 8008638:	bfb7      	itett	lt
 800863a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800863c:	1b1c      	subge	r4, r3, r4
 800863e:	1ae2      	sublt	r2, r4, r3
 8008640:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008642:	bfbe      	ittt	lt
 8008644:	940a      	strlt	r4, [sp, #40]	; 0x28
 8008646:	189b      	addlt	r3, r3, r2
 8008648:	930e      	strlt	r3, [sp, #56]	; 0x38
 800864a:	9b02      	ldr	r3, [sp, #8]
 800864c:	bfb8      	it	lt
 800864e:	2400      	movlt	r4, #0
 8008650:	2b00      	cmp	r3, #0
 8008652:	bfbb      	ittet	lt
 8008654:	9b06      	ldrlt	r3, [sp, #24]
 8008656:	9a02      	ldrlt	r2, [sp, #8]
 8008658:	9f06      	ldrge	r7, [sp, #24]
 800865a:	1a9f      	sublt	r7, r3, r2
 800865c:	bfac      	ite	ge
 800865e:	9b02      	ldrge	r3, [sp, #8]
 8008660:	2300      	movlt	r3, #0
 8008662:	e73e      	b.n	80084e2 <_dtoa_r+0x74a>
 8008664:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008666:	9f06      	ldr	r7, [sp, #24]
 8008668:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800866a:	e745      	b.n	80084f8 <_dtoa_r+0x760>
 800866c:	3fe00000 	.word	0x3fe00000
 8008670:	40240000 	.word	0x40240000
 8008674:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008676:	e76a      	b.n	800854e <_dtoa_r+0x7b6>
 8008678:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800867a:	2b01      	cmp	r3, #1
 800867c:	dc19      	bgt.n	80086b2 <_dtoa_r+0x91a>
 800867e:	9b04      	ldr	r3, [sp, #16]
 8008680:	b9bb      	cbnz	r3, 80086b2 <_dtoa_r+0x91a>
 8008682:	9b05      	ldr	r3, [sp, #20]
 8008684:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008688:	b99b      	cbnz	r3, 80086b2 <_dtoa_r+0x91a>
 800868a:	9b05      	ldr	r3, [sp, #20]
 800868c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008690:	0d1b      	lsrs	r3, r3, #20
 8008692:	051b      	lsls	r3, r3, #20
 8008694:	b183      	cbz	r3, 80086b8 <_dtoa_r+0x920>
 8008696:	f04f 0801 	mov.w	r8, #1
 800869a:	9b06      	ldr	r3, [sp, #24]
 800869c:	3301      	adds	r3, #1
 800869e:	9306      	str	r3, [sp, #24]
 80086a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086a2:	3301      	adds	r3, #1
 80086a4:	9309      	str	r3, [sp, #36]	; 0x24
 80086a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	f47f af6a 	bne.w	8008582 <_dtoa_r+0x7ea>
 80086ae:	2001      	movs	r0, #1
 80086b0:	e76f      	b.n	8008592 <_dtoa_r+0x7fa>
 80086b2:	f04f 0800 	mov.w	r8, #0
 80086b6:	e7f6      	b.n	80086a6 <_dtoa_r+0x90e>
 80086b8:	4698      	mov	r8, r3
 80086ba:	e7f4      	b.n	80086a6 <_dtoa_r+0x90e>
 80086bc:	f43f af7d 	beq.w	80085ba <_dtoa_r+0x822>
 80086c0:	4618      	mov	r0, r3
 80086c2:	301c      	adds	r0, #28
 80086c4:	e772      	b.n	80085ac <_dtoa_r+0x814>
 80086c6:	9b02      	ldr	r3, [sp, #8]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	dc36      	bgt.n	800873a <_dtoa_r+0x9a2>
 80086cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80086ce:	2b02      	cmp	r3, #2
 80086d0:	dd33      	ble.n	800873a <_dtoa_r+0x9a2>
 80086d2:	f8dd b008 	ldr.w	fp, [sp, #8]
 80086d6:	f1bb 0f00 	cmp.w	fp, #0
 80086da:	d10d      	bne.n	80086f8 <_dtoa_r+0x960>
 80086dc:	4621      	mov	r1, r4
 80086de:	465b      	mov	r3, fp
 80086e0:	2205      	movs	r2, #5
 80086e2:	4628      	mov	r0, r5
 80086e4:	f000 ff70 	bl	80095c8 <__multadd>
 80086e8:	4601      	mov	r1, r0
 80086ea:	4604      	mov	r4, r0
 80086ec:	4650      	mov	r0, sl
 80086ee:	f001 f9cd 	bl	8009a8c <__mcmp>
 80086f2:	2800      	cmp	r0, #0
 80086f4:	f73f adb6 	bgt.w	8008264 <_dtoa_r+0x4cc>
 80086f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80086fa:	9f08      	ldr	r7, [sp, #32]
 80086fc:	ea6f 0903 	mvn.w	r9, r3
 8008700:	f04f 0800 	mov.w	r8, #0
 8008704:	4621      	mov	r1, r4
 8008706:	4628      	mov	r0, r5
 8008708:	f000 ff3c 	bl	8009584 <_Bfree>
 800870c:	2e00      	cmp	r6, #0
 800870e:	f43f aea4 	beq.w	800845a <_dtoa_r+0x6c2>
 8008712:	f1b8 0f00 	cmp.w	r8, #0
 8008716:	d005      	beq.n	8008724 <_dtoa_r+0x98c>
 8008718:	45b0      	cmp	r8, r6
 800871a:	d003      	beq.n	8008724 <_dtoa_r+0x98c>
 800871c:	4641      	mov	r1, r8
 800871e:	4628      	mov	r0, r5
 8008720:	f000 ff30 	bl	8009584 <_Bfree>
 8008724:	4631      	mov	r1, r6
 8008726:	4628      	mov	r0, r5
 8008728:	f000 ff2c 	bl	8009584 <_Bfree>
 800872c:	e695      	b.n	800845a <_dtoa_r+0x6c2>
 800872e:	2400      	movs	r4, #0
 8008730:	4626      	mov	r6, r4
 8008732:	e7e1      	b.n	80086f8 <_dtoa_r+0x960>
 8008734:	46c1      	mov	r9, r8
 8008736:	4626      	mov	r6, r4
 8008738:	e594      	b.n	8008264 <_dtoa_r+0x4cc>
 800873a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800873c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8008740:	2b00      	cmp	r3, #0
 8008742:	f000 80fc 	beq.w	800893e <_dtoa_r+0xba6>
 8008746:	2f00      	cmp	r7, #0
 8008748:	dd05      	ble.n	8008756 <_dtoa_r+0x9be>
 800874a:	4631      	mov	r1, r6
 800874c:	463a      	mov	r2, r7
 800874e:	4628      	mov	r0, r5
 8008750:	f001 f930 	bl	80099b4 <__lshift>
 8008754:	4606      	mov	r6, r0
 8008756:	f1b8 0f00 	cmp.w	r8, #0
 800875a:	d05c      	beq.n	8008816 <_dtoa_r+0xa7e>
 800875c:	4628      	mov	r0, r5
 800875e:	6871      	ldr	r1, [r6, #4]
 8008760:	f000 fed0 	bl	8009504 <_Balloc>
 8008764:	4607      	mov	r7, r0
 8008766:	b928      	cbnz	r0, 8008774 <_dtoa_r+0x9dc>
 8008768:	4602      	mov	r2, r0
 800876a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800876e:	4b7e      	ldr	r3, [pc, #504]	; (8008968 <_dtoa_r+0xbd0>)
 8008770:	f7ff bb26 	b.w	8007dc0 <_dtoa_r+0x28>
 8008774:	6932      	ldr	r2, [r6, #16]
 8008776:	f106 010c 	add.w	r1, r6, #12
 800877a:	3202      	adds	r2, #2
 800877c:	0092      	lsls	r2, r2, #2
 800877e:	300c      	adds	r0, #12
 8008780:	f7fd fca2 	bl	80060c8 <memcpy>
 8008784:	2201      	movs	r2, #1
 8008786:	4639      	mov	r1, r7
 8008788:	4628      	mov	r0, r5
 800878a:	f001 f913 	bl	80099b4 <__lshift>
 800878e:	46b0      	mov	r8, r6
 8008790:	4606      	mov	r6, r0
 8008792:	9b08      	ldr	r3, [sp, #32]
 8008794:	3301      	adds	r3, #1
 8008796:	9302      	str	r3, [sp, #8]
 8008798:	9b08      	ldr	r3, [sp, #32]
 800879a:	445b      	add	r3, fp
 800879c:	930a      	str	r3, [sp, #40]	; 0x28
 800879e:	9b04      	ldr	r3, [sp, #16]
 80087a0:	f003 0301 	and.w	r3, r3, #1
 80087a4:	9309      	str	r3, [sp, #36]	; 0x24
 80087a6:	9b02      	ldr	r3, [sp, #8]
 80087a8:	4621      	mov	r1, r4
 80087aa:	4650      	mov	r0, sl
 80087ac:	f103 3bff 	add.w	fp, r3, #4294967295
 80087b0:	f7ff fa64 	bl	8007c7c <quorem>
 80087b4:	4603      	mov	r3, r0
 80087b6:	4641      	mov	r1, r8
 80087b8:	3330      	adds	r3, #48	; 0x30
 80087ba:	9004      	str	r0, [sp, #16]
 80087bc:	4650      	mov	r0, sl
 80087be:	930b      	str	r3, [sp, #44]	; 0x2c
 80087c0:	f001 f964 	bl	8009a8c <__mcmp>
 80087c4:	4632      	mov	r2, r6
 80087c6:	9006      	str	r0, [sp, #24]
 80087c8:	4621      	mov	r1, r4
 80087ca:	4628      	mov	r0, r5
 80087cc:	f001 f97a 	bl	8009ac4 <__mdiff>
 80087d0:	68c2      	ldr	r2, [r0, #12]
 80087d2:	4607      	mov	r7, r0
 80087d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087d6:	bb02      	cbnz	r2, 800881a <_dtoa_r+0xa82>
 80087d8:	4601      	mov	r1, r0
 80087da:	4650      	mov	r0, sl
 80087dc:	f001 f956 	bl	8009a8c <__mcmp>
 80087e0:	4602      	mov	r2, r0
 80087e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087e4:	4639      	mov	r1, r7
 80087e6:	4628      	mov	r0, r5
 80087e8:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80087ec:	f000 feca 	bl	8009584 <_Bfree>
 80087f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80087f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80087f4:	9f02      	ldr	r7, [sp, #8]
 80087f6:	ea43 0102 	orr.w	r1, r3, r2
 80087fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087fc:	430b      	orrs	r3, r1
 80087fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008800:	d10d      	bne.n	800881e <_dtoa_r+0xa86>
 8008802:	2b39      	cmp	r3, #57	; 0x39
 8008804:	d027      	beq.n	8008856 <_dtoa_r+0xabe>
 8008806:	9a06      	ldr	r2, [sp, #24]
 8008808:	2a00      	cmp	r2, #0
 800880a:	dd01      	ble.n	8008810 <_dtoa_r+0xa78>
 800880c:	9b04      	ldr	r3, [sp, #16]
 800880e:	3331      	adds	r3, #49	; 0x31
 8008810:	f88b 3000 	strb.w	r3, [fp]
 8008814:	e776      	b.n	8008704 <_dtoa_r+0x96c>
 8008816:	4630      	mov	r0, r6
 8008818:	e7b9      	b.n	800878e <_dtoa_r+0x9f6>
 800881a:	2201      	movs	r2, #1
 800881c:	e7e2      	b.n	80087e4 <_dtoa_r+0xa4c>
 800881e:	9906      	ldr	r1, [sp, #24]
 8008820:	2900      	cmp	r1, #0
 8008822:	db04      	blt.n	800882e <_dtoa_r+0xa96>
 8008824:	9822      	ldr	r0, [sp, #136]	; 0x88
 8008826:	4301      	orrs	r1, r0
 8008828:	9809      	ldr	r0, [sp, #36]	; 0x24
 800882a:	4301      	orrs	r1, r0
 800882c:	d120      	bne.n	8008870 <_dtoa_r+0xad8>
 800882e:	2a00      	cmp	r2, #0
 8008830:	ddee      	ble.n	8008810 <_dtoa_r+0xa78>
 8008832:	4651      	mov	r1, sl
 8008834:	2201      	movs	r2, #1
 8008836:	4628      	mov	r0, r5
 8008838:	9302      	str	r3, [sp, #8]
 800883a:	f001 f8bb 	bl	80099b4 <__lshift>
 800883e:	4621      	mov	r1, r4
 8008840:	4682      	mov	sl, r0
 8008842:	f001 f923 	bl	8009a8c <__mcmp>
 8008846:	2800      	cmp	r0, #0
 8008848:	9b02      	ldr	r3, [sp, #8]
 800884a:	dc02      	bgt.n	8008852 <_dtoa_r+0xaba>
 800884c:	d1e0      	bne.n	8008810 <_dtoa_r+0xa78>
 800884e:	07da      	lsls	r2, r3, #31
 8008850:	d5de      	bpl.n	8008810 <_dtoa_r+0xa78>
 8008852:	2b39      	cmp	r3, #57	; 0x39
 8008854:	d1da      	bne.n	800880c <_dtoa_r+0xa74>
 8008856:	2339      	movs	r3, #57	; 0x39
 8008858:	f88b 3000 	strb.w	r3, [fp]
 800885c:	463b      	mov	r3, r7
 800885e:	461f      	mov	r7, r3
 8008860:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8008864:	3b01      	subs	r3, #1
 8008866:	2a39      	cmp	r2, #57	; 0x39
 8008868:	d050      	beq.n	800890c <_dtoa_r+0xb74>
 800886a:	3201      	adds	r2, #1
 800886c:	701a      	strb	r2, [r3, #0]
 800886e:	e749      	b.n	8008704 <_dtoa_r+0x96c>
 8008870:	2a00      	cmp	r2, #0
 8008872:	dd03      	ble.n	800887c <_dtoa_r+0xae4>
 8008874:	2b39      	cmp	r3, #57	; 0x39
 8008876:	d0ee      	beq.n	8008856 <_dtoa_r+0xabe>
 8008878:	3301      	adds	r3, #1
 800887a:	e7c9      	b.n	8008810 <_dtoa_r+0xa78>
 800887c:	9a02      	ldr	r2, [sp, #8]
 800887e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008880:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008884:	428a      	cmp	r2, r1
 8008886:	d02a      	beq.n	80088de <_dtoa_r+0xb46>
 8008888:	4651      	mov	r1, sl
 800888a:	2300      	movs	r3, #0
 800888c:	220a      	movs	r2, #10
 800888e:	4628      	mov	r0, r5
 8008890:	f000 fe9a 	bl	80095c8 <__multadd>
 8008894:	45b0      	cmp	r8, r6
 8008896:	4682      	mov	sl, r0
 8008898:	f04f 0300 	mov.w	r3, #0
 800889c:	f04f 020a 	mov.w	r2, #10
 80088a0:	4641      	mov	r1, r8
 80088a2:	4628      	mov	r0, r5
 80088a4:	d107      	bne.n	80088b6 <_dtoa_r+0xb1e>
 80088a6:	f000 fe8f 	bl	80095c8 <__multadd>
 80088aa:	4680      	mov	r8, r0
 80088ac:	4606      	mov	r6, r0
 80088ae:	9b02      	ldr	r3, [sp, #8]
 80088b0:	3301      	adds	r3, #1
 80088b2:	9302      	str	r3, [sp, #8]
 80088b4:	e777      	b.n	80087a6 <_dtoa_r+0xa0e>
 80088b6:	f000 fe87 	bl	80095c8 <__multadd>
 80088ba:	4631      	mov	r1, r6
 80088bc:	4680      	mov	r8, r0
 80088be:	2300      	movs	r3, #0
 80088c0:	220a      	movs	r2, #10
 80088c2:	4628      	mov	r0, r5
 80088c4:	f000 fe80 	bl	80095c8 <__multadd>
 80088c8:	4606      	mov	r6, r0
 80088ca:	e7f0      	b.n	80088ae <_dtoa_r+0xb16>
 80088cc:	f1bb 0f00 	cmp.w	fp, #0
 80088d0:	bfcc      	ite	gt
 80088d2:	465f      	movgt	r7, fp
 80088d4:	2701      	movle	r7, #1
 80088d6:	f04f 0800 	mov.w	r8, #0
 80088da:	9a08      	ldr	r2, [sp, #32]
 80088dc:	4417      	add	r7, r2
 80088de:	4651      	mov	r1, sl
 80088e0:	2201      	movs	r2, #1
 80088e2:	4628      	mov	r0, r5
 80088e4:	9302      	str	r3, [sp, #8]
 80088e6:	f001 f865 	bl	80099b4 <__lshift>
 80088ea:	4621      	mov	r1, r4
 80088ec:	4682      	mov	sl, r0
 80088ee:	f001 f8cd 	bl	8009a8c <__mcmp>
 80088f2:	2800      	cmp	r0, #0
 80088f4:	dcb2      	bgt.n	800885c <_dtoa_r+0xac4>
 80088f6:	d102      	bne.n	80088fe <_dtoa_r+0xb66>
 80088f8:	9b02      	ldr	r3, [sp, #8]
 80088fa:	07db      	lsls	r3, r3, #31
 80088fc:	d4ae      	bmi.n	800885c <_dtoa_r+0xac4>
 80088fe:	463b      	mov	r3, r7
 8008900:	461f      	mov	r7, r3
 8008902:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008906:	2a30      	cmp	r2, #48	; 0x30
 8008908:	d0fa      	beq.n	8008900 <_dtoa_r+0xb68>
 800890a:	e6fb      	b.n	8008704 <_dtoa_r+0x96c>
 800890c:	9a08      	ldr	r2, [sp, #32]
 800890e:	429a      	cmp	r2, r3
 8008910:	d1a5      	bne.n	800885e <_dtoa_r+0xac6>
 8008912:	2331      	movs	r3, #49	; 0x31
 8008914:	f109 0901 	add.w	r9, r9, #1
 8008918:	7013      	strb	r3, [r2, #0]
 800891a:	e6f3      	b.n	8008704 <_dtoa_r+0x96c>
 800891c:	4b13      	ldr	r3, [pc, #76]	; (800896c <_dtoa_r+0xbd4>)
 800891e:	f7ff baa7 	b.w	8007e70 <_dtoa_r+0xd8>
 8008922:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008924:	2b00      	cmp	r3, #0
 8008926:	f47f aa80 	bne.w	8007e2a <_dtoa_r+0x92>
 800892a:	4b11      	ldr	r3, [pc, #68]	; (8008970 <_dtoa_r+0xbd8>)
 800892c:	f7ff baa0 	b.w	8007e70 <_dtoa_r+0xd8>
 8008930:	f1bb 0f00 	cmp.w	fp, #0
 8008934:	dc03      	bgt.n	800893e <_dtoa_r+0xba6>
 8008936:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008938:	2b02      	cmp	r3, #2
 800893a:	f73f aecc 	bgt.w	80086d6 <_dtoa_r+0x93e>
 800893e:	9f08      	ldr	r7, [sp, #32]
 8008940:	4621      	mov	r1, r4
 8008942:	4650      	mov	r0, sl
 8008944:	f7ff f99a 	bl	8007c7c <quorem>
 8008948:	9a08      	ldr	r2, [sp, #32]
 800894a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800894e:	f807 3b01 	strb.w	r3, [r7], #1
 8008952:	1aba      	subs	r2, r7, r2
 8008954:	4593      	cmp	fp, r2
 8008956:	ddb9      	ble.n	80088cc <_dtoa_r+0xb34>
 8008958:	4651      	mov	r1, sl
 800895a:	2300      	movs	r3, #0
 800895c:	220a      	movs	r2, #10
 800895e:	4628      	mov	r0, r5
 8008960:	f000 fe32 	bl	80095c8 <__multadd>
 8008964:	4682      	mov	sl, r0
 8008966:	e7eb      	b.n	8008940 <_dtoa_r+0xba8>
 8008968:	0800a923 	.word	0x0800a923
 800896c:	0800a82c 	.word	0x0800a82c
 8008970:	0800a8a0 	.word	0x0800a8a0

08008974 <__sflush_r>:
 8008974:	898a      	ldrh	r2, [r1, #12]
 8008976:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800897a:	4605      	mov	r5, r0
 800897c:	0710      	lsls	r0, r2, #28
 800897e:	460c      	mov	r4, r1
 8008980:	d458      	bmi.n	8008a34 <__sflush_r+0xc0>
 8008982:	684b      	ldr	r3, [r1, #4]
 8008984:	2b00      	cmp	r3, #0
 8008986:	dc05      	bgt.n	8008994 <__sflush_r+0x20>
 8008988:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800898a:	2b00      	cmp	r3, #0
 800898c:	dc02      	bgt.n	8008994 <__sflush_r+0x20>
 800898e:	2000      	movs	r0, #0
 8008990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008994:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008996:	2e00      	cmp	r6, #0
 8008998:	d0f9      	beq.n	800898e <__sflush_r+0x1a>
 800899a:	2300      	movs	r3, #0
 800899c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80089a0:	682f      	ldr	r7, [r5, #0]
 80089a2:	602b      	str	r3, [r5, #0]
 80089a4:	d032      	beq.n	8008a0c <__sflush_r+0x98>
 80089a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80089a8:	89a3      	ldrh	r3, [r4, #12]
 80089aa:	075a      	lsls	r2, r3, #29
 80089ac:	d505      	bpl.n	80089ba <__sflush_r+0x46>
 80089ae:	6863      	ldr	r3, [r4, #4]
 80089b0:	1ac0      	subs	r0, r0, r3
 80089b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80089b4:	b10b      	cbz	r3, 80089ba <__sflush_r+0x46>
 80089b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80089b8:	1ac0      	subs	r0, r0, r3
 80089ba:	2300      	movs	r3, #0
 80089bc:	4602      	mov	r2, r0
 80089be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80089c0:	4628      	mov	r0, r5
 80089c2:	6a21      	ldr	r1, [r4, #32]
 80089c4:	47b0      	blx	r6
 80089c6:	1c43      	adds	r3, r0, #1
 80089c8:	89a3      	ldrh	r3, [r4, #12]
 80089ca:	d106      	bne.n	80089da <__sflush_r+0x66>
 80089cc:	6829      	ldr	r1, [r5, #0]
 80089ce:	291d      	cmp	r1, #29
 80089d0:	d82c      	bhi.n	8008a2c <__sflush_r+0xb8>
 80089d2:	4a2a      	ldr	r2, [pc, #168]	; (8008a7c <__sflush_r+0x108>)
 80089d4:	40ca      	lsrs	r2, r1
 80089d6:	07d6      	lsls	r6, r2, #31
 80089d8:	d528      	bpl.n	8008a2c <__sflush_r+0xb8>
 80089da:	2200      	movs	r2, #0
 80089dc:	6062      	str	r2, [r4, #4]
 80089de:	6922      	ldr	r2, [r4, #16]
 80089e0:	04d9      	lsls	r1, r3, #19
 80089e2:	6022      	str	r2, [r4, #0]
 80089e4:	d504      	bpl.n	80089f0 <__sflush_r+0x7c>
 80089e6:	1c42      	adds	r2, r0, #1
 80089e8:	d101      	bne.n	80089ee <__sflush_r+0x7a>
 80089ea:	682b      	ldr	r3, [r5, #0]
 80089ec:	b903      	cbnz	r3, 80089f0 <__sflush_r+0x7c>
 80089ee:	6560      	str	r0, [r4, #84]	; 0x54
 80089f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80089f2:	602f      	str	r7, [r5, #0]
 80089f4:	2900      	cmp	r1, #0
 80089f6:	d0ca      	beq.n	800898e <__sflush_r+0x1a>
 80089f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80089fc:	4299      	cmp	r1, r3
 80089fe:	d002      	beq.n	8008a06 <__sflush_r+0x92>
 8008a00:	4628      	mov	r0, r5
 8008a02:	f7fd fb77 	bl	80060f4 <_free_r>
 8008a06:	2000      	movs	r0, #0
 8008a08:	6360      	str	r0, [r4, #52]	; 0x34
 8008a0a:	e7c1      	b.n	8008990 <__sflush_r+0x1c>
 8008a0c:	6a21      	ldr	r1, [r4, #32]
 8008a0e:	2301      	movs	r3, #1
 8008a10:	4628      	mov	r0, r5
 8008a12:	47b0      	blx	r6
 8008a14:	1c41      	adds	r1, r0, #1
 8008a16:	d1c7      	bne.n	80089a8 <__sflush_r+0x34>
 8008a18:	682b      	ldr	r3, [r5, #0]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d0c4      	beq.n	80089a8 <__sflush_r+0x34>
 8008a1e:	2b1d      	cmp	r3, #29
 8008a20:	d001      	beq.n	8008a26 <__sflush_r+0xb2>
 8008a22:	2b16      	cmp	r3, #22
 8008a24:	d101      	bne.n	8008a2a <__sflush_r+0xb6>
 8008a26:	602f      	str	r7, [r5, #0]
 8008a28:	e7b1      	b.n	800898e <__sflush_r+0x1a>
 8008a2a:	89a3      	ldrh	r3, [r4, #12]
 8008a2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a30:	81a3      	strh	r3, [r4, #12]
 8008a32:	e7ad      	b.n	8008990 <__sflush_r+0x1c>
 8008a34:	690f      	ldr	r7, [r1, #16]
 8008a36:	2f00      	cmp	r7, #0
 8008a38:	d0a9      	beq.n	800898e <__sflush_r+0x1a>
 8008a3a:	0793      	lsls	r3, r2, #30
 8008a3c:	bf18      	it	ne
 8008a3e:	2300      	movne	r3, #0
 8008a40:	680e      	ldr	r6, [r1, #0]
 8008a42:	bf08      	it	eq
 8008a44:	694b      	ldreq	r3, [r1, #20]
 8008a46:	eba6 0807 	sub.w	r8, r6, r7
 8008a4a:	600f      	str	r7, [r1, #0]
 8008a4c:	608b      	str	r3, [r1, #8]
 8008a4e:	f1b8 0f00 	cmp.w	r8, #0
 8008a52:	dd9c      	ble.n	800898e <__sflush_r+0x1a>
 8008a54:	4643      	mov	r3, r8
 8008a56:	463a      	mov	r2, r7
 8008a58:	4628      	mov	r0, r5
 8008a5a:	6a21      	ldr	r1, [r4, #32]
 8008a5c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008a5e:	47b0      	blx	r6
 8008a60:	2800      	cmp	r0, #0
 8008a62:	dc06      	bgt.n	8008a72 <__sflush_r+0xfe>
 8008a64:	89a3      	ldrh	r3, [r4, #12]
 8008a66:	f04f 30ff 	mov.w	r0, #4294967295
 8008a6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a6e:	81a3      	strh	r3, [r4, #12]
 8008a70:	e78e      	b.n	8008990 <__sflush_r+0x1c>
 8008a72:	4407      	add	r7, r0
 8008a74:	eba8 0800 	sub.w	r8, r8, r0
 8008a78:	e7e9      	b.n	8008a4e <__sflush_r+0xda>
 8008a7a:	bf00      	nop
 8008a7c:	20400001 	.word	0x20400001

08008a80 <_fflush_r>:
 8008a80:	b538      	push	{r3, r4, r5, lr}
 8008a82:	690b      	ldr	r3, [r1, #16]
 8008a84:	4605      	mov	r5, r0
 8008a86:	460c      	mov	r4, r1
 8008a88:	b913      	cbnz	r3, 8008a90 <_fflush_r+0x10>
 8008a8a:	2500      	movs	r5, #0
 8008a8c:	4628      	mov	r0, r5
 8008a8e:	bd38      	pop	{r3, r4, r5, pc}
 8008a90:	b118      	cbz	r0, 8008a9a <_fflush_r+0x1a>
 8008a92:	6983      	ldr	r3, [r0, #24]
 8008a94:	b90b      	cbnz	r3, 8008a9a <_fflush_r+0x1a>
 8008a96:	f000 f887 	bl	8008ba8 <__sinit>
 8008a9a:	4b14      	ldr	r3, [pc, #80]	; (8008aec <_fflush_r+0x6c>)
 8008a9c:	429c      	cmp	r4, r3
 8008a9e:	d11b      	bne.n	8008ad8 <_fflush_r+0x58>
 8008aa0:	686c      	ldr	r4, [r5, #4]
 8008aa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d0ef      	beq.n	8008a8a <_fflush_r+0xa>
 8008aaa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008aac:	07d0      	lsls	r0, r2, #31
 8008aae:	d404      	bmi.n	8008aba <_fflush_r+0x3a>
 8008ab0:	0599      	lsls	r1, r3, #22
 8008ab2:	d402      	bmi.n	8008aba <_fflush_r+0x3a>
 8008ab4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ab6:	f000 fc80 	bl	80093ba <__retarget_lock_acquire_recursive>
 8008aba:	4628      	mov	r0, r5
 8008abc:	4621      	mov	r1, r4
 8008abe:	f7ff ff59 	bl	8008974 <__sflush_r>
 8008ac2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ac4:	4605      	mov	r5, r0
 8008ac6:	07da      	lsls	r2, r3, #31
 8008ac8:	d4e0      	bmi.n	8008a8c <_fflush_r+0xc>
 8008aca:	89a3      	ldrh	r3, [r4, #12]
 8008acc:	059b      	lsls	r3, r3, #22
 8008ace:	d4dd      	bmi.n	8008a8c <_fflush_r+0xc>
 8008ad0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ad2:	f000 fc73 	bl	80093bc <__retarget_lock_release_recursive>
 8008ad6:	e7d9      	b.n	8008a8c <_fflush_r+0xc>
 8008ad8:	4b05      	ldr	r3, [pc, #20]	; (8008af0 <_fflush_r+0x70>)
 8008ada:	429c      	cmp	r4, r3
 8008adc:	d101      	bne.n	8008ae2 <_fflush_r+0x62>
 8008ade:	68ac      	ldr	r4, [r5, #8]
 8008ae0:	e7df      	b.n	8008aa2 <_fflush_r+0x22>
 8008ae2:	4b04      	ldr	r3, [pc, #16]	; (8008af4 <_fflush_r+0x74>)
 8008ae4:	429c      	cmp	r4, r3
 8008ae6:	bf08      	it	eq
 8008ae8:	68ec      	ldreq	r4, [r5, #12]
 8008aea:	e7da      	b.n	8008aa2 <_fflush_r+0x22>
 8008aec:	0800a954 	.word	0x0800a954
 8008af0:	0800a974 	.word	0x0800a974
 8008af4:	0800a934 	.word	0x0800a934

08008af8 <std>:
 8008af8:	2300      	movs	r3, #0
 8008afa:	b510      	push	{r4, lr}
 8008afc:	4604      	mov	r4, r0
 8008afe:	e9c0 3300 	strd	r3, r3, [r0]
 8008b02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008b06:	6083      	str	r3, [r0, #8]
 8008b08:	8181      	strh	r1, [r0, #12]
 8008b0a:	6643      	str	r3, [r0, #100]	; 0x64
 8008b0c:	81c2      	strh	r2, [r0, #14]
 8008b0e:	6183      	str	r3, [r0, #24]
 8008b10:	4619      	mov	r1, r3
 8008b12:	2208      	movs	r2, #8
 8008b14:	305c      	adds	r0, #92	; 0x5c
 8008b16:	f7fd fae5 	bl	80060e4 <memset>
 8008b1a:	4b05      	ldr	r3, [pc, #20]	; (8008b30 <std+0x38>)
 8008b1c:	6224      	str	r4, [r4, #32]
 8008b1e:	6263      	str	r3, [r4, #36]	; 0x24
 8008b20:	4b04      	ldr	r3, [pc, #16]	; (8008b34 <std+0x3c>)
 8008b22:	62a3      	str	r3, [r4, #40]	; 0x28
 8008b24:	4b04      	ldr	r3, [pc, #16]	; (8008b38 <std+0x40>)
 8008b26:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008b28:	4b04      	ldr	r3, [pc, #16]	; (8008b3c <std+0x44>)
 8008b2a:	6323      	str	r3, [r4, #48]	; 0x30
 8008b2c:	bd10      	pop	{r4, pc}
 8008b2e:	bf00      	nop
 8008b30:	08006c8d 	.word	0x08006c8d
 8008b34:	08006caf 	.word	0x08006caf
 8008b38:	08006ce7 	.word	0x08006ce7
 8008b3c:	08006d0b 	.word	0x08006d0b

08008b40 <_cleanup_r>:
 8008b40:	4901      	ldr	r1, [pc, #4]	; (8008b48 <_cleanup_r+0x8>)
 8008b42:	f000 b8af 	b.w	8008ca4 <_fwalk_reent>
 8008b46:	bf00      	nop
 8008b48:	08008a81 	.word	0x08008a81

08008b4c <__sfmoreglue>:
 8008b4c:	b570      	push	{r4, r5, r6, lr}
 8008b4e:	2568      	movs	r5, #104	; 0x68
 8008b50:	1e4a      	subs	r2, r1, #1
 8008b52:	4355      	muls	r5, r2
 8008b54:	460e      	mov	r6, r1
 8008b56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008b5a:	f7fd fb17 	bl	800618c <_malloc_r>
 8008b5e:	4604      	mov	r4, r0
 8008b60:	b140      	cbz	r0, 8008b74 <__sfmoreglue+0x28>
 8008b62:	2100      	movs	r1, #0
 8008b64:	e9c0 1600 	strd	r1, r6, [r0]
 8008b68:	300c      	adds	r0, #12
 8008b6a:	60a0      	str	r0, [r4, #8]
 8008b6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008b70:	f7fd fab8 	bl	80060e4 <memset>
 8008b74:	4620      	mov	r0, r4
 8008b76:	bd70      	pop	{r4, r5, r6, pc}

08008b78 <__sfp_lock_acquire>:
 8008b78:	4801      	ldr	r0, [pc, #4]	; (8008b80 <__sfp_lock_acquire+0x8>)
 8008b7a:	f000 bc1e 	b.w	80093ba <__retarget_lock_acquire_recursive>
 8008b7e:	bf00      	nop
 8008b80:	20000550 	.word	0x20000550

08008b84 <__sfp_lock_release>:
 8008b84:	4801      	ldr	r0, [pc, #4]	; (8008b8c <__sfp_lock_release+0x8>)
 8008b86:	f000 bc19 	b.w	80093bc <__retarget_lock_release_recursive>
 8008b8a:	bf00      	nop
 8008b8c:	20000550 	.word	0x20000550

08008b90 <__sinit_lock_acquire>:
 8008b90:	4801      	ldr	r0, [pc, #4]	; (8008b98 <__sinit_lock_acquire+0x8>)
 8008b92:	f000 bc12 	b.w	80093ba <__retarget_lock_acquire_recursive>
 8008b96:	bf00      	nop
 8008b98:	2000054b 	.word	0x2000054b

08008b9c <__sinit_lock_release>:
 8008b9c:	4801      	ldr	r0, [pc, #4]	; (8008ba4 <__sinit_lock_release+0x8>)
 8008b9e:	f000 bc0d 	b.w	80093bc <__retarget_lock_release_recursive>
 8008ba2:	bf00      	nop
 8008ba4:	2000054b 	.word	0x2000054b

08008ba8 <__sinit>:
 8008ba8:	b510      	push	{r4, lr}
 8008baa:	4604      	mov	r4, r0
 8008bac:	f7ff fff0 	bl	8008b90 <__sinit_lock_acquire>
 8008bb0:	69a3      	ldr	r3, [r4, #24]
 8008bb2:	b11b      	cbz	r3, 8008bbc <__sinit+0x14>
 8008bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bb8:	f7ff bff0 	b.w	8008b9c <__sinit_lock_release>
 8008bbc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008bc0:	6523      	str	r3, [r4, #80]	; 0x50
 8008bc2:	4b13      	ldr	r3, [pc, #76]	; (8008c10 <__sinit+0x68>)
 8008bc4:	4a13      	ldr	r2, [pc, #76]	; (8008c14 <__sinit+0x6c>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	62a2      	str	r2, [r4, #40]	; 0x28
 8008bca:	42a3      	cmp	r3, r4
 8008bcc:	bf08      	it	eq
 8008bce:	2301      	moveq	r3, #1
 8008bd0:	4620      	mov	r0, r4
 8008bd2:	bf08      	it	eq
 8008bd4:	61a3      	streq	r3, [r4, #24]
 8008bd6:	f000 f81f 	bl	8008c18 <__sfp>
 8008bda:	6060      	str	r0, [r4, #4]
 8008bdc:	4620      	mov	r0, r4
 8008bde:	f000 f81b 	bl	8008c18 <__sfp>
 8008be2:	60a0      	str	r0, [r4, #8]
 8008be4:	4620      	mov	r0, r4
 8008be6:	f000 f817 	bl	8008c18 <__sfp>
 8008bea:	2200      	movs	r2, #0
 8008bec:	2104      	movs	r1, #4
 8008bee:	60e0      	str	r0, [r4, #12]
 8008bf0:	6860      	ldr	r0, [r4, #4]
 8008bf2:	f7ff ff81 	bl	8008af8 <std>
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	2109      	movs	r1, #9
 8008bfa:	68a0      	ldr	r0, [r4, #8]
 8008bfc:	f7ff ff7c 	bl	8008af8 <std>
 8008c00:	2202      	movs	r2, #2
 8008c02:	2112      	movs	r1, #18
 8008c04:	68e0      	ldr	r0, [r4, #12]
 8008c06:	f7ff ff77 	bl	8008af8 <std>
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	61a3      	str	r3, [r4, #24]
 8008c0e:	e7d1      	b.n	8008bb4 <__sinit+0xc>
 8008c10:	0800a818 	.word	0x0800a818
 8008c14:	08008b41 	.word	0x08008b41

08008c18 <__sfp>:
 8008c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c1a:	4607      	mov	r7, r0
 8008c1c:	f7ff ffac 	bl	8008b78 <__sfp_lock_acquire>
 8008c20:	4b1e      	ldr	r3, [pc, #120]	; (8008c9c <__sfp+0x84>)
 8008c22:	681e      	ldr	r6, [r3, #0]
 8008c24:	69b3      	ldr	r3, [r6, #24]
 8008c26:	b913      	cbnz	r3, 8008c2e <__sfp+0x16>
 8008c28:	4630      	mov	r0, r6
 8008c2a:	f7ff ffbd 	bl	8008ba8 <__sinit>
 8008c2e:	3648      	adds	r6, #72	; 0x48
 8008c30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008c34:	3b01      	subs	r3, #1
 8008c36:	d503      	bpl.n	8008c40 <__sfp+0x28>
 8008c38:	6833      	ldr	r3, [r6, #0]
 8008c3a:	b30b      	cbz	r3, 8008c80 <__sfp+0x68>
 8008c3c:	6836      	ldr	r6, [r6, #0]
 8008c3e:	e7f7      	b.n	8008c30 <__sfp+0x18>
 8008c40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008c44:	b9d5      	cbnz	r5, 8008c7c <__sfp+0x64>
 8008c46:	4b16      	ldr	r3, [pc, #88]	; (8008ca0 <__sfp+0x88>)
 8008c48:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008c4c:	60e3      	str	r3, [r4, #12]
 8008c4e:	6665      	str	r5, [r4, #100]	; 0x64
 8008c50:	f000 fbb2 	bl	80093b8 <__retarget_lock_init_recursive>
 8008c54:	f7ff ff96 	bl	8008b84 <__sfp_lock_release>
 8008c58:	2208      	movs	r2, #8
 8008c5a:	4629      	mov	r1, r5
 8008c5c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008c60:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008c64:	6025      	str	r5, [r4, #0]
 8008c66:	61a5      	str	r5, [r4, #24]
 8008c68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008c6c:	f7fd fa3a 	bl	80060e4 <memset>
 8008c70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008c74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008c78:	4620      	mov	r0, r4
 8008c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c7c:	3468      	adds	r4, #104	; 0x68
 8008c7e:	e7d9      	b.n	8008c34 <__sfp+0x1c>
 8008c80:	2104      	movs	r1, #4
 8008c82:	4638      	mov	r0, r7
 8008c84:	f7ff ff62 	bl	8008b4c <__sfmoreglue>
 8008c88:	4604      	mov	r4, r0
 8008c8a:	6030      	str	r0, [r6, #0]
 8008c8c:	2800      	cmp	r0, #0
 8008c8e:	d1d5      	bne.n	8008c3c <__sfp+0x24>
 8008c90:	f7ff ff78 	bl	8008b84 <__sfp_lock_release>
 8008c94:	230c      	movs	r3, #12
 8008c96:	603b      	str	r3, [r7, #0]
 8008c98:	e7ee      	b.n	8008c78 <__sfp+0x60>
 8008c9a:	bf00      	nop
 8008c9c:	0800a818 	.word	0x0800a818
 8008ca0:	ffff0001 	.word	0xffff0001

08008ca4 <_fwalk_reent>:
 8008ca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ca8:	4606      	mov	r6, r0
 8008caa:	4688      	mov	r8, r1
 8008cac:	2700      	movs	r7, #0
 8008cae:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008cb2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008cb6:	f1b9 0901 	subs.w	r9, r9, #1
 8008cba:	d505      	bpl.n	8008cc8 <_fwalk_reent+0x24>
 8008cbc:	6824      	ldr	r4, [r4, #0]
 8008cbe:	2c00      	cmp	r4, #0
 8008cc0:	d1f7      	bne.n	8008cb2 <_fwalk_reent+0xe>
 8008cc2:	4638      	mov	r0, r7
 8008cc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cc8:	89ab      	ldrh	r3, [r5, #12]
 8008cca:	2b01      	cmp	r3, #1
 8008ccc:	d907      	bls.n	8008cde <_fwalk_reent+0x3a>
 8008cce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	d003      	beq.n	8008cde <_fwalk_reent+0x3a>
 8008cd6:	4629      	mov	r1, r5
 8008cd8:	4630      	mov	r0, r6
 8008cda:	47c0      	blx	r8
 8008cdc:	4307      	orrs	r7, r0
 8008cde:	3568      	adds	r5, #104	; 0x68
 8008ce0:	e7e9      	b.n	8008cb6 <_fwalk_reent+0x12>

08008ce2 <rshift>:
 8008ce2:	6903      	ldr	r3, [r0, #16]
 8008ce4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008ce8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008cec:	f100 0414 	add.w	r4, r0, #20
 8008cf0:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008cf4:	dd46      	ble.n	8008d84 <rshift+0xa2>
 8008cf6:	f011 011f 	ands.w	r1, r1, #31
 8008cfa:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008cfe:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008d02:	d10c      	bne.n	8008d1e <rshift+0x3c>
 8008d04:	4629      	mov	r1, r5
 8008d06:	f100 0710 	add.w	r7, r0, #16
 8008d0a:	42b1      	cmp	r1, r6
 8008d0c:	d335      	bcc.n	8008d7a <rshift+0x98>
 8008d0e:	1a9b      	subs	r3, r3, r2
 8008d10:	009b      	lsls	r3, r3, #2
 8008d12:	1eea      	subs	r2, r5, #3
 8008d14:	4296      	cmp	r6, r2
 8008d16:	bf38      	it	cc
 8008d18:	2300      	movcc	r3, #0
 8008d1a:	4423      	add	r3, r4
 8008d1c:	e015      	b.n	8008d4a <rshift+0x68>
 8008d1e:	46a1      	mov	r9, r4
 8008d20:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008d24:	f1c1 0820 	rsb	r8, r1, #32
 8008d28:	40cf      	lsrs	r7, r1
 8008d2a:	f105 0e04 	add.w	lr, r5, #4
 8008d2e:	4576      	cmp	r6, lr
 8008d30:	46f4      	mov	ip, lr
 8008d32:	d816      	bhi.n	8008d62 <rshift+0x80>
 8008d34:	1a9b      	subs	r3, r3, r2
 8008d36:	009a      	lsls	r2, r3, #2
 8008d38:	3a04      	subs	r2, #4
 8008d3a:	3501      	adds	r5, #1
 8008d3c:	42ae      	cmp	r6, r5
 8008d3e:	bf38      	it	cc
 8008d40:	2200      	movcc	r2, #0
 8008d42:	18a3      	adds	r3, r4, r2
 8008d44:	50a7      	str	r7, [r4, r2]
 8008d46:	b107      	cbz	r7, 8008d4a <rshift+0x68>
 8008d48:	3304      	adds	r3, #4
 8008d4a:	42a3      	cmp	r3, r4
 8008d4c:	eba3 0204 	sub.w	r2, r3, r4
 8008d50:	bf08      	it	eq
 8008d52:	2300      	moveq	r3, #0
 8008d54:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008d58:	6102      	str	r2, [r0, #16]
 8008d5a:	bf08      	it	eq
 8008d5c:	6143      	streq	r3, [r0, #20]
 8008d5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d62:	f8dc c000 	ldr.w	ip, [ip]
 8008d66:	fa0c fc08 	lsl.w	ip, ip, r8
 8008d6a:	ea4c 0707 	orr.w	r7, ip, r7
 8008d6e:	f849 7b04 	str.w	r7, [r9], #4
 8008d72:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008d76:	40cf      	lsrs	r7, r1
 8008d78:	e7d9      	b.n	8008d2e <rshift+0x4c>
 8008d7a:	f851 cb04 	ldr.w	ip, [r1], #4
 8008d7e:	f847 cf04 	str.w	ip, [r7, #4]!
 8008d82:	e7c2      	b.n	8008d0a <rshift+0x28>
 8008d84:	4623      	mov	r3, r4
 8008d86:	e7e0      	b.n	8008d4a <rshift+0x68>

08008d88 <__hexdig_fun>:
 8008d88:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008d8c:	2b09      	cmp	r3, #9
 8008d8e:	d802      	bhi.n	8008d96 <__hexdig_fun+0xe>
 8008d90:	3820      	subs	r0, #32
 8008d92:	b2c0      	uxtb	r0, r0
 8008d94:	4770      	bx	lr
 8008d96:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008d9a:	2b05      	cmp	r3, #5
 8008d9c:	d801      	bhi.n	8008da2 <__hexdig_fun+0x1a>
 8008d9e:	3847      	subs	r0, #71	; 0x47
 8008da0:	e7f7      	b.n	8008d92 <__hexdig_fun+0xa>
 8008da2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008da6:	2b05      	cmp	r3, #5
 8008da8:	d801      	bhi.n	8008dae <__hexdig_fun+0x26>
 8008daa:	3827      	subs	r0, #39	; 0x27
 8008dac:	e7f1      	b.n	8008d92 <__hexdig_fun+0xa>
 8008dae:	2000      	movs	r0, #0
 8008db0:	4770      	bx	lr
	...

08008db4 <__gethex>:
 8008db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008db8:	b08b      	sub	sp, #44	; 0x2c
 8008dba:	9306      	str	r3, [sp, #24]
 8008dbc:	4bb9      	ldr	r3, [pc, #740]	; (80090a4 <__gethex+0x2f0>)
 8008dbe:	9002      	str	r0, [sp, #8]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	468b      	mov	fp, r1
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	4690      	mov	r8, r2
 8008dc8:	9303      	str	r3, [sp, #12]
 8008dca:	f7f7 f9cb 	bl	8000164 <strlen>
 8008dce:	4682      	mov	sl, r0
 8008dd0:	9b03      	ldr	r3, [sp, #12]
 8008dd2:	f8db 2000 	ldr.w	r2, [fp]
 8008dd6:	4403      	add	r3, r0
 8008dd8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008ddc:	9307      	str	r3, [sp, #28]
 8008dde:	1c93      	adds	r3, r2, #2
 8008de0:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008de4:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008de8:	32fe      	adds	r2, #254	; 0xfe
 8008dea:	18d1      	adds	r1, r2, r3
 8008dec:	461f      	mov	r7, r3
 8008dee:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008df2:	9101      	str	r1, [sp, #4]
 8008df4:	2830      	cmp	r0, #48	; 0x30
 8008df6:	d0f8      	beq.n	8008dea <__gethex+0x36>
 8008df8:	f7ff ffc6 	bl	8008d88 <__hexdig_fun>
 8008dfc:	4604      	mov	r4, r0
 8008dfe:	2800      	cmp	r0, #0
 8008e00:	d13a      	bne.n	8008e78 <__gethex+0xc4>
 8008e02:	4652      	mov	r2, sl
 8008e04:	4638      	mov	r0, r7
 8008e06:	9903      	ldr	r1, [sp, #12]
 8008e08:	f7fd ff92 	bl	8006d30 <strncmp>
 8008e0c:	4605      	mov	r5, r0
 8008e0e:	2800      	cmp	r0, #0
 8008e10:	d166      	bne.n	8008ee0 <__gethex+0x12c>
 8008e12:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008e16:	eb07 060a 	add.w	r6, r7, sl
 8008e1a:	f7ff ffb5 	bl	8008d88 <__hexdig_fun>
 8008e1e:	2800      	cmp	r0, #0
 8008e20:	d060      	beq.n	8008ee4 <__gethex+0x130>
 8008e22:	4633      	mov	r3, r6
 8008e24:	7818      	ldrb	r0, [r3, #0]
 8008e26:	461f      	mov	r7, r3
 8008e28:	2830      	cmp	r0, #48	; 0x30
 8008e2a:	f103 0301 	add.w	r3, r3, #1
 8008e2e:	d0f9      	beq.n	8008e24 <__gethex+0x70>
 8008e30:	f7ff ffaa 	bl	8008d88 <__hexdig_fun>
 8008e34:	2301      	movs	r3, #1
 8008e36:	fab0 f480 	clz	r4, r0
 8008e3a:	4635      	mov	r5, r6
 8008e3c:	0964      	lsrs	r4, r4, #5
 8008e3e:	9301      	str	r3, [sp, #4]
 8008e40:	463a      	mov	r2, r7
 8008e42:	4616      	mov	r6, r2
 8008e44:	7830      	ldrb	r0, [r6, #0]
 8008e46:	3201      	adds	r2, #1
 8008e48:	f7ff ff9e 	bl	8008d88 <__hexdig_fun>
 8008e4c:	2800      	cmp	r0, #0
 8008e4e:	d1f8      	bne.n	8008e42 <__gethex+0x8e>
 8008e50:	4652      	mov	r2, sl
 8008e52:	4630      	mov	r0, r6
 8008e54:	9903      	ldr	r1, [sp, #12]
 8008e56:	f7fd ff6b 	bl	8006d30 <strncmp>
 8008e5a:	b980      	cbnz	r0, 8008e7e <__gethex+0xca>
 8008e5c:	b94d      	cbnz	r5, 8008e72 <__gethex+0xbe>
 8008e5e:	eb06 050a 	add.w	r5, r6, sl
 8008e62:	462a      	mov	r2, r5
 8008e64:	4616      	mov	r6, r2
 8008e66:	7830      	ldrb	r0, [r6, #0]
 8008e68:	3201      	adds	r2, #1
 8008e6a:	f7ff ff8d 	bl	8008d88 <__hexdig_fun>
 8008e6e:	2800      	cmp	r0, #0
 8008e70:	d1f8      	bne.n	8008e64 <__gethex+0xb0>
 8008e72:	1bad      	subs	r5, r5, r6
 8008e74:	00ad      	lsls	r5, r5, #2
 8008e76:	e004      	b.n	8008e82 <__gethex+0xce>
 8008e78:	2400      	movs	r4, #0
 8008e7a:	4625      	mov	r5, r4
 8008e7c:	e7e0      	b.n	8008e40 <__gethex+0x8c>
 8008e7e:	2d00      	cmp	r5, #0
 8008e80:	d1f7      	bne.n	8008e72 <__gethex+0xbe>
 8008e82:	7833      	ldrb	r3, [r6, #0]
 8008e84:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008e88:	2b50      	cmp	r3, #80	; 0x50
 8008e8a:	d139      	bne.n	8008f00 <__gethex+0x14c>
 8008e8c:	7873      	ldrb	r3, [r6, #1]
 8008e8e:	2b2b      	cmp	r3, #43	; 0x2b
 8008e90:	d02a      	beq.n	8008ee8 <__gethex+0x134>
 8008e92:	2b2d      	cmp	r3, #45	; 0x2d
 8008e94:	d02c      	beq.n	8008ef0 <__gethex+0x13c>
 8008e96:	f04f 0900 	mov.w	r9, #0
 8008e9a:	1c71      	adds	r1, r6, #1
 8008e9c:	7808      	ldrb	r0, [r1, #0]
 8008e9e:	f7ff ff73 	bl	8008d88 <__hexdig_fun>
 8008ea2:	1e43      	subs	r3, r0, #1
 8008ea4:	b2db      	uxtb	r3, r3
 8008ea6:	2b18      	cmp	r3, #24
 8008ea8:	d82a      	bhi.n	8008f00 <__gethex+0x14c>
 8008eaa:	f1a0 0210 	sub.w	r2, r0, #16
 8008eae:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008eb2:	f7ff ff69 	bl	8008d88 <__hexdig_fun>
 8008eb6:	1e43      	subs	r3, r0, #1
 8008eb8:	b2db      	uxtb	r3, r3
 8008eba:	2b18      	cmp	r3, #24
 8008ebc:	d91b      	bls.n	8008ef6 <__gethex+0x142>
 8008ebe:	f1b9 0f00 	cmp.w	r9, #0
 8008ec2:	d000      	beq.n	8008ec6 <__gethex+0x112>
 8008ec4:	4252      	negs	r2, r2
 8008ec6:	4415      	add	r5, r2
 8008ec8:	f8cb 1000 	str.w	r1, [fp]
 8008ecc:	b1d4      	cbz	r4, 8008f04 <__gethex+0x150>
 8008ece:	9b01      	ldr	r3, [sp, #4]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	bf14      	ite	ne
 8008ed4:	2700      	movne	r7, #0
 8008ed6:	2706      	moveq	r7, #6
 8008ed8:	4638      	mov	r0, r7
 8008eda:	b00b      	add	sp, #44	; 0x2c
 8008edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ee0:	463e      	mov	r6, r7
 8008ee2:	4625      	mov	r5, r4
 8008ee4:	2401      	movs	r4, #1
 8008ee6:	e7cc      	b.n	8008e82 <__gethex+0xce>
 8008ee8:	f04f 0900 	mov.w	r9, #0
 8008eec:	1cb1      	adds	r1, r6, #2
 8008eee:	e7d5      	b.n	8008e9c <__gethex+0xe8>
 8008ef0:	f04f 0901 	mov.w	r9, #1
 8008ef4:	e7fa      	b.n	8008eec <__gethex+0x138>
 8008ef6:	230a      	movs	r3, #10
 8008ef8:	fb03 0202 	mla	r2, r3, r2, r0
 8008efc:	3a10      	subs	r2, #16
 8008efe:	e7d6      	b.n	8008eae <__gethex+0xfa>
 8008f00:	4631      	mov	r1, r6
 8008f02:	e7e1      	b.n	8008ec8 <__gethex+0x114>
 8008f04:	4621      	mov	r1, r4
 8008f06:	1bf3      	subs	r3, r6, r7
 8008f08:	3b01      	subs	r3, #1
 8008f0a:	2b07      	cmp	r3, #7
 8008f0c:	dc0a      	bgt.n	8008f24 <__gethex+0x170>
 8008f0e:	9802      	ldr	r0, [sp, #8]
 8008f10:	f000 faf8 	bl	8009504 <_Balloc>
 8008f14:	4604      	mov	r4, r0
 8008f16:	b940      	cbnz	r0, 8008f2a <__gethex+0x176>
 8008f18:	4602      	mov	r2, r0
 8008f1a:	21de      	movs	r1, #222	; 0xde
 8008f1c:	4b62      	ldr	r3, [pc, #392]	; (80090a8 <__gethex+0x2f4>)
 8008f1e:	4863      	ldr	r0, [pc, #396]	; (80090ac <__gethex+0x2f8>)
 8008f20:	f001 fab6 	bl	800a490 <__assert_func>
 8008f24:	3101      	adds	r1, #1
 8008f26:	105b      	asrs	r3, r3, #1
 8008f28:	e7ef      	b.n	8008f0a <__gethex+0x156>
 8008f2a:	f04f 0b00 	mov.w	fp, #0
 8008f2e:	f100 0914 	add.w	r9, r0, #20
 8008f32:	f1ca 0301 	rsb	r3, sl, #1
 8008f36:	f8cd 9010 	str.w	r9, [sp, #16]
 8008f3a:	f8cd b004 	str.w	fp, [sp, #4]
 8008f3e:	9308      	str	r3, [sp, #32]
 8008f40:	42b7      	cmp	r7, r6
 8008f42:	d33f      	bcc.n	8008fc4 <__gethex+0x210>
 8008f44:	9f04      	ldr	r7, [sp, #16]
 8008f46:	9b01      	ldr	r3, [sp, #4]
 8008f48:	f847 3b04 	str.w	r3, [r7], #4
 8008f4c:	eba7 0709 	sub.w	r7, r7, r9
 8008f50:	10bf      	asrs	r7, r7, #2
 8008f52:	6127      	str	r7, [r4, #16]
 8008f54:	4618      	mov	r0, r3
 8008f56:	f000 fbcb 	bl	80096f0 <__hi0bits>
 8008f5a:	017f      	lsls	r7, r7, #5
 8008f5c:	f8d8 6000 	ldr.w	r6, [r8]
 8008f60:	1a3f      	subs	r7, r7, r0
 8008f62:	42b7      	cmp	r7, r6
 8008f64:	dd62      	ble.n	800902c <__gethex+0x278>
 8008f66:	1bbf      	subs	r7, r7, r6
 8008f68:	4639      	mov	r1, r7
 8008f6a:	4620      	mov	r0, r4
 8008f6c:	f000 ff61 	bl	8009e32 <__any_on>
 8008f70:	4682      	mov	sl, r0
 8008f72:	b1a8      	cbz	r0, 8008fa0 <__gethex+0x1ec>
 8008f74:	f04f 0a01 	mov.w	sl, #1
 8008f78:	1e7b      	subs	r3, r7, #1
 8008f7a:	1159      	asrs	r1, r3, #5
 8008f7c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008f80:	f003 021f 	and.w	r2, r3, #31
 8008f84:	fa0a f202 	lsl.w	r2, sl, r2
 8008f88:	420a      	tst	r2, r1
 8008f8a:	d009      	beq.n	8008fa0 <__gethex+0x1ec>
 8008f8c:	4553      	cmp	r3, sl
 8008f8e:	dd05      	ble.n	8008f9c <__gethex+0x1e8>
 8008f90:	4620      	mov	r0, r4
 8008f92:	1eb9      	subs	r1, r7, #2
 8008f94:	f000 ff4d 	bl	8009e32 <__any_on>
 8008f98:	2800      	cmp	r0, #0
 8008f9a:	d144      	bne.n	8009026 <__gethex+0x272>
 8008f9c:	f04f 0a02 	mov.w	sl, #2
 8008fa0:	4639      	mov	r1, r7
 8008fa2:	4620      	mov	r0, r4
 8008fa4:	f7ff fe9d 	bl	8008ce2 <rshift>
 8008fa8:	443d      	add	r5, r7
 8008faa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008fae:	42ab      	cmp	r3, r5
 8008fb0:	da4a      	bge.n	8009048 <__gethex+0x294>
 8008fb2:	4621      	mov	r1, r4
 8008fb4:	9802      	ldr	r0, [sp, #8]
 8008fb6:	f000 fae5 	bl	8009584 <_Bfree>
 8008fba:	2300      	movs	r3, #0
 8008fbc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008fbe:	27a3      	movs	r7, #163	; 0xa3
 8008fc0:	6013      	str	r3, [r2, #0]
 8008fc2:	e789      	b.n	8008ed8 <__gethex+0x124>
 8008fc4:	1e73      	subs	r3, r6, #1
 8008fc6:	9a07      	ldr	r2, [sp, #28]
 8008fc8:	9305      	str	r3, [sp, #20]
 8008fca:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	d019      	beq.n	8009006 <__gethex+0x252>
 8008fd2:	f1bb 0f20 	cmp.w	fp, #32
 8008fd6:	d107      	bne.n	8008fe8 <__gethex+0x234>
 8008fd8:	9b04      	ldr	r3, [sp, #16]
 8008fda:	9a01      	ldr	r2, [sp, #4]
 8008fdc:	f843 2b04 	str.w	r2, [r3], #4
 8008fe0:	9304      	str	r3, [sp, #16]
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	469b      	mov	fp, r3
 8008fe6:	9301      	str	r3, [sp, #4]
 8008fe8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008fec:	f7ff fecc 	bl	8008d88 <__hexdig_fun>
 8008ff0:	9b01      	ldr	r3, [sp, #4]
 8008ff2:	f000 000f 	and.w	r0, r0, #15
 8008ff6:	fa00 f00b 	lsl.w	r0, r0, fp
 8008ffa:	4303      	orrs	r3, r0
 8008ffc:	9301      	str	r3, [sp, #4]
 8008ffe:	f10b 0b04 	add.w	fp, fp, #4
 8009002:	9b05      	ldr	r3, [sp, #20]
 8009004:	e00d      	b.n	8009022 <__gethex+0x26e>
 8009006:	9b05      	ldr	r3, [sp, #20]
 8009008:	9a08      	ldr	r2, [sp, #32]
 800900a:	4413      	add	r3, r2
 800900c:	42bb      	cmp	r3, r7
 800900e:	d3e0      	bcc.n	8008fd2 <__gethex+0x21e>
 8009010:	4618      	mov	r0, r3
 8009012:	4652      	mov	r2, sl
 8009014:	9903      	ldr	r1, [sp, #12]
 8009016:	9309      	str	r3, [sp, #36]	; 0x24
 8009018:	f7fd fe8a 	bl	8006d30 <strncmp>
 800901c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800901e:	2800      	cmp	r0, #0
 8009020:	d1d7      	bne.n	8008fd2 <__gethex+0x21e>
 8009022:	461e      	mov	r6, r3
 8009024:	e78c      	b.n	8008f40 <__gethex+0x18c>
 8009026:	f04f 0a03 	mov.w	sl, #3
 800902a:	e7b9      	b.n	8008fa0 <__gethex+0x1ec>
 800902c:	da09      	bge.n	8009042 <__gethex+0x28e>
 800902e:	1bf7      	subs	r7, r6, r7
 8009030:	4621      	mov	r1, r4
 8009032:	463a      	mov	r2, r7
 8009034:	9802      	ldr	r0, [sp, #8]
 8009036:	f000 fcbd 	bl	80099b4 <__lshift>
 800903a:	4604      	mov	r4, r0
 800903c:	1bed      	subs	r5, r5, r7
 800903e:	f100 0914 	add.w	r9, r0, #20
 8009042:	f04f 0a00 	mov.w	sl, #0
 8009046:	e7b0      	b.n	8008faa <__gethex+0x1f6>
 8009048:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800904c:	42a8      	cmp	r0, r5
 800904e:	dd71      	ble.n	8009134 <__gethex+0x380>
 8009050:	1b45      	subs	r5, r0, r5
 8009052:	42ae      	cmp	r6, r5
 8009054:	dc34      	bgt.n	80090c0 <__gethex+0x30c>
 8009056:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800905a:	2b02      	cmp	r3, #2
 800905c:	d028      	beq.n	80090b0 <__gethex+0x2fc>
 800905e:	2b03      	cmp	r3, #3
 8009060:	d02a      	beq.n	80090b8 <__gethex+0x304>
 8009062:	2b01      	cmp	r3, #1
 8009064:	d115      	bne.n	8009092 <__gethex+0x2de>
 8009066:	42ae      	cmp	r6, r5
 8009068:	d113      	bne.n	8009092 <__gethex+0x2de>
 800906a:	2e01      	cmp	r6, #1
 800906c:	d10b      	bne.n	8009086 <__gethex+0x2d2>
 800906e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009072:	9a06      	ldr	r2, [sp, #24]
 8009074:	2762      	movs	r7, #98	; 0x62
 8009076:	6013      	str	r3, [r2, #0]
 8009078:	2301      	movs	r3, #1
 800907a:	6123      	str	r3, [r4, #16]
 800907c:	f8c9 3000 	str.w	r3, [r9]
 8009080:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009082:	601c      	str	r4, [r3, #0]
 8009084:	e728      	b.n	8008ed8 <__gethex+0x124>
 8009086:	4620      	mov	r0, r4
 8009088:	1e71      	subs	r1, r6, #1
 800908a:	f000 fed2 	bl	8009e32 <__any_on>
 800908e:	2800      	cmp	r0, #0
 8009090:	d1ed      	bne.n	800906e <__gethex+0x2ba>
 8009092:	4621      	mov	r1, r4
 8009094:	9802      	ldr	r0, [sp, #8]
 8009096:	f000 fa75 	bl	8009584 <_Bfree>
 800909a:	2300      	movs	r3, #0
 800909c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800909e:	2750      	movs	r7, #80	; 0x50
 80090a0:	6013      	str	r3, [r2, #0]
 80090a2:	e719      	b.n	8008ed8 <__gethex+0x124>
 80090a4:	0800aa00 	.word	0x0800aa00
 80090a8:	0800a923 	.word	0x0800a923
 80090ac:	0800a994 	.word	0x0800a994
 80090b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d1ed      	bne.n	8009092 <__gethex+0x2de>
 80090b6:	e7da      	b.n	800906e <__gethex+0x2ba>
 80090b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d1d7      	bne.n	800906e <__gethex+0x2ba>
 80090be:	e7e8      	b.n	8009092 <__gethex+0x2de>
 80090c0:	1e6f      	subs	r7, r5, #1
 80090c2:	f1ba 0f00 	cmp.w	sl, #0
 80090c6:	d132      	bne.n	800912e <__gethex+0x37a>
 80090c8:	b127      	cbz	r7, 80090d4 <__gethex+0x320>
 80090ca:	4639      	mov	r1, r7
 80090cc:	4620      	mov	r0, r4
 80090ce:	f000 feb0 	bl	8009e32 <__any_on>
 80090d2:	4682      	mov	sl, r0
 80090d4:	2101      	movs	r1, #1
 80090d6:	117b      	asrs	r3, r7, #5
 80090d8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80090dc:	f007 071f 	and.w	r7, r7, #31
 80090e0:	fa01 f707 	lsl.w	r7, r1, r7
 80090e4:	421f      	tst	r7, r3
 80090e6:	f04f 0702 	mov.w	r7, #2
 80090ea:	4629      	mov	r1, r5
 80090ec:	4620      	mov	r0, r4
 80090ee:	bf18      	it	ne
 80090f0:	f04a 0a02 	orrne.w	sl, sl, #2
 80090f4:	1b76      	subs	r6, r6, r5
 80090f6:	f7ff fdf4 	bl	8008ce2 <rshift>
 80090fa:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80090fe:	f1ba 0f00 	cmp.w	sl, #0
 8009102:	d048      	beq.n	8009196 <__gethex+0x3e2>
 8009104:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009108:	2b02      	cmp	r3, #2
 800910a:	d015      	beq.n	8009138 <__gethex+0x384>
 800910c:	2b03      	cmp	r3, #3
 800910e:	d017      	beq.n	8009140 <__gethex+0x38c>
 8009110:	2b01      	cmp	r3, #1
 8009112:	d109      	bne.n	8009128 <__gethex+0x374>
 8009114:	f01a 0f02 	tst.w	sl, #2
 8009118:	d006      	beq.n	8009128 <__gethex+0x374>
 800911a:	f8d9 0000 	ldr.w	r0, [r9]
 800911e:	ea4a 0a00 	orr.w	sl, sl, r0
 8009122:	f01a 0f01 	tst.w	sl, #1
 8009126:	d10e      	bne.n	8009146 <__gethex+0x392>
 8009128:	f047 0710 	orr.w	r7, r7, #16
 800912c:	e033      	b.n	8009196 <__gethex+0x3e2>
 800912e:	f04f 0a01 	mov.w	sl, #1
 8009132:	e7cf      	b.n	80090d4 <__gethex+0x320>
 8009134:	2701      	movs	r7, #1
 8009136:	e7e2      	b.n	80090fe <__gethex+0x34a>
 8009138:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800913a:	f1c3 0301 	rsb	r3, r3, #1
 800913e:	9315      	str	r3, [sp, #84]	; 0x54
 8009140:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009142:	2b00      	cmp	r3, #0
 8009144:	d0f0      	beq.n	8009128 <__gethex+0x374>
 8009146:	f04f 0c00 	mov.w	ip, #0
 800914a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800914e:	f104 0314 	add.w	r3, r4, #20
 8009152:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009156:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800915a:	4618      	mov	r0, r3
 800915c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009160:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009164:	d01c      	beq.n	80091a0 <__gethex+0x3ec>
 8009166:	3201      	adds	r2, #1
 8009168:	6002      	str	r2, [r0, #0]
 800916a:	2f02      	cmp	r7, #2
 800916c:	f104 0314 	add.w	r3, r4, #20
 8009170:	d13d      	bne.n	80091ee <__gethex+0x43a>
 8009172:	f8d8 2000 	ldr.w	r2, [r8]
 8009176:	3a01      	subs	r2, #1
 8009178:	42b2      	cmp	r2, r6
 800917a:	d10a      	bne.n	8009192 <__gethex+0x3de>
 800917c:	2201      	movs	r2, #1
 800917e:	1171      	asrs	r1, r6, #5
 8009180:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009184:	f006 061f 	and.w	r6, r6, #31
 8009188:	fa02 f606 	lsl.w	r6, r2, r6
 800918c:	421e      	tst	r6, r3
 800918e:	bf18      	it	ne
 8009190:	4617      	movne	r7, r2
 8009192:	f047 0720 	orr.w	r7, r7, #32
 8009196:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009198:	601c      	str	r4, [r3, #0]
 800919a:	9b06      	ldr	r3, [sp, #24]
 800919c:	601d      	str	r5, [r3, #0]
 800919e:	e69b      	b.n	8008ed8 <__gethex+0x124>
 80091a0:	4299      	cmp	r1, r3
 80091a2:	f843 cc04 	str.w	ip, [r3, #-4]
 80091a6:	d8d8      	bhi.n	800915a <__gethex+0x3a6>
 80091a8:	68a3      	ldr	r3, [r4, #8]
 80091aa:	459b      	cmp	fp, r3
 80091ac:	db17      	blt.n	80091de <__gethex+0x42a>
 80091ae:	6861      	ldr	r1, [r4, #4]
 80091b0:	9802      	ldr	r0, [sp, #8]
 80091b2:	3101      	adds	r1, #1
 80091b4:	f000 f9a6 	bl	8009504 <_Balloc>
 80091b8:	4681      	mov	r9, r0
 80091ba:	b918      	cbnz	r0, 80091c4 <__gethex+0x410>
 80091bc:	4602      	mov	r2, r0
 80091be:	2184      	movs	r1, #132	; 0x84
 80091c0:	4b19      	ldr	r3, [pc, #100]	; (8009228 <__gethex+0x474>)
 80091c2:	e6ac      	b.n	8008f1e <__gethex+0x16a>
 80091c4:	6922      	ldr	r2, [r4, #16]
 80091c6:	f104 010c 	add.w	r1, r4, #12
 80091ca:	3202      	adds	r2, #2
 80091cc:	0092      	lsls	r2, r2, #2
 80091ce:	300c      	adds	r0, #12
 80091d0:	f7fc ff7a 	bl	80060c8 <memcpy>
 80091d4:	4621      	mov	r1, r4
 80091d6:	9802      	ldr	r0, [sp, #8]
 80091d8:	f000 f9d4 	bl	8009584 <_Bfree>
 80091dc:	464c      	mov	r4, r9
 80091de:	6923      	ldr	r3, [r4, #16]
 80091e0:	1c5a      	adds	r2, r3, #1
 80091e2:	6122      	str	r2, [r4, #16]
 80091e4:	2201      	movs	r2, #1
 80091e6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80091ea:	615a      	str	r2, [r3, #20]
 80091ec:	e7bd      	b.n	800916a <__gethex+0x3b6>
 80091ee:	6922      	ldr	r2, [r4, #16]
 80091f0:	455a      	cmp	r2, fp
 80091f2:	dd0b      	ble.n	800920c <__gethex+0x458>
 80091f4:	2101      	movs	r1, #1
 80091f6:	4620      	mov	r0, r4
 80091f8:	f7ff fd73 	bl	8008ce2 <rshift>
 80091fc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009200:	3501      	adds	r5, #1
 8009202:	42ab      	cmp	r3, r5
 8009204:	f6ff aed5 	blt.w	8008fb2 <__gethex+0x1fe>
 8009208:	2701      	movs	r7, #1
 800920a:	e7c2      	b.n	8009192 <__gethex+0x3de>
 800920c:	f016 061f 	ands.w	r6, r6, #31
 8009210:	d0fa      	beq.n	8009208 <__gethex+0x454>
 8009212:	449a      	add	sl, r3
 8009214:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8009218:	f000 fa6a 	bl	80096f0 <__hi0bits>
 800921c:	f1c6 0620 	rsb	r6, r6, #32
 8009220:	42b0      	cmp	r0, r6
 8009222:	dbe7      	blt.n	80091f4 <__gethex+0x440>
 8009224:	e7f0      	b.n	8009208 <__gethex+0x454>
 8009226:	bf00      	nop
 8009228:	0800a923 	.word	0x0800a923

0800922c <L_shift>:
 800922c:	f1c2 0208 	rsb	r2, r2, #8
 8009230:	0092      	lsls	r2, r2, #2
 8009232:	b570      	push	{r4, r5, r6, lr}
 8009234:	f1c2 0620 	rsb	r6, r2, #32
 8009238:	6843      	ldr	r3, [r0, #4]
 800923a:	6804      	ldr	r4, [r0, #0]
 800923c:	fa03 f506 	lsl.w	r5, r3, r6
 8009240:	432c      	orrs	r4, r5
 8009242:	40d3      	lsrs	r3, r2
 8009244:	6004      	str	r4, [r0, #0]
 8009246:	f840 3f04 	str.w	r3, [r0, #4]!
 800924a:	4288      	cmp	r0, r1
 800924c:	d3f4      	bcc.n	8009238 <L_shift+0xc>
 800924e:	bd70      	pop	{r4, r5, r6, pc}

08009250 <__match>:
 8009250:	b530      	push	{r4, r5, lr}
 8009252:	6803      	ldr	r3, [r0, #0]
 8009254:	3301      	adds	r3, #1
 8009256:	f811 4b01 	ldrb.w	r4, [r1], #1
 800925a:	b914      	cbnz	r4, 8009262 <__match+0x12>
 800925c:	6003      	str	r3, [r0, #0]
 800925e:	2001      	movs	r0, #1
 8009260:	bd30      	pop	{r4, r5, pc}
 8009262:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009266:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800926a:	2d19      	cmp	r5, #25
 800926c:	bf98      	it	ls
 800926e:	3220      	addls	r2, #32
 8009270:	42a2      	cmp	r2, r4
 8009272:	d0f0      	beq.n	8009256 <__match+0x6>
 8009274:	2000      	movs	r0, #0
 8009276:	e7f3      	b.n	8009260 <__match+0x10>

08009278 <__hexnan>:
 8009278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800927c:	2500      	movs	r5, #0
 800927e:	680b      	ldr	r3, [r1, #0]
 8009280:	4682      	mov	sl, r0
 8009282:	115e      	asrs	r6, r3, #5
 8009284:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009288:	f013 031f 	ands.w	r3, r3, #31
 800928c:	bf18      	it	ne
 800928e:	3604      	addne	r6, #4
 8009290:	1f37      	subs	r7, r6, #4
 8009292:	4690      	mov	r8, r2
 8009294:	46b9      	mov	r9, r7
 8009296:	463c      	mov	r4, r7
 8009298:	46ab      	mov	fp, r5
 800929a:	b087      	sub	sp, #28
 800929c:	6801      	ldr	r1, [r0, #0]
 800929e:	9301      	str	r3, [sp, #4]
 80092a0:	f846 5c04 	str.w	r5, [r6, #-4]
 80092a4:	9502      	str	r5, [sp, #8]
 80092a6:	784a      	ldrb	r2, [r1, #1]
 80092a8:	1c4b      	adds	r3, r1, #1
 80092aa:	9303      	str	r3, [sp, #12]
 80092ac:	b342      	cbz	r2, 8009300 <__hexnan+0x88>
 80092ae:	4610      	mov	r0, r2
 80092b0:	9105      	str	r1, [sp, #20]
 80092b2:	9204      	str	r2, [sp, #16]
 80092b4:	f7ff fd68 	bl	8008d88 <__hexdig_fun>
 80092b8:	2800      	cmp	r0, #0
 80092ba:	d14f      	bne.n	800935c <__hexnan+0xe4>
 80092bc:	9a04      	ldr	r2, [sp, #16]
 80092be:	9905      	ldr	r1, [sp, #20]
 80092c0:	2a20      	cmp	r2, #32
 80092c2:	d818      	bhi.n	80092f6 <__hexnan+0x7e>
 80092c4:	9b02      	ldr	r3, [sp, #8]
 80092c6:	459b      	cmp	fp, r3
 80092c8:	dd13      	ble.n	80092f2 <__hexnan+0x7a>
 80092ca:	454c      	cmp	r4, r9
 80092cc:	d206      	bcs.n	80092dc <__hexnan+0x64>
 80092ce:	2d07      	cmp	r5, #7
 80092d0:	dc04      	bgt.n	80092dc <__hexnan+0x64>
 80092d2:	462a      	mov	r2, r5
 80092d4:	4649      	mov	r1, r9
 80092d6:	4620      	mov	r0, r4
 80092d8:	f7ff ffa8 	bl	800922c <L_shift>
 80092dc:	4544      	cmp	r4, r8
 80092de:	d950      	bls.n	8009382 <__hexnan+0x10a>
 80092e0:	2300      	movs	r3, #0
 80092e2:	f1a4 0904 	sub.w	r9, r4, #4
 80092e6:	f844 3c04 	str.w	r3, [r4, #-4]
 80092ea:	461d      	mov	r5, r3
 80092ec:	464c      	mov	r4, r9
 80092ee:	f8cd b008 	str.w	fp, [sp, #8]
 80092f2:	9903      	ldr	r1, [sp, #12]
 80092f4:	e7d7      	b.n	80092a6 <__hexnan+0x2e>
 80092f6:	2a29      	cmp	r2, #41	; 0x29
 80092f8:	d156      	bne.n	80093a8 <__hexnan+0x130>
 80092fa:	3102      	adds	r1, #2
 80092fc:	f8ca 1000 	str.w	r1, [sl]
 8009300:	f1bb 0f00 	cmp.w	fp, #0
 8009304:	d050      	beq.n	80093a8 <__hexnan+0x130>
 8009306:	454c      	cmp	r4, r9
 8009308:	d206      	bcs.n	8009318 <__hexnan+0xa0>
 800930a:	2d07      	cmp	r5, #7
 800930c:	dc04      	bgt.n	8009318 <__hexnan+0xa0>
 800930e:	462a      	mov	r2, r5
 8009310:	4649      	mov	r1, r9
 8009312:	4620      	mov	r0, r4
 8009314:	f7ff ff8a 	bl	800922c <L_shift>
 8009318:	4544      	cmp	r4, r8
 800931a:	d934      	bls.n	8009386 <__hexnan+0x10e>
 800931c:	4623      	mov	r3, r4
 800931e:	f1a8 0204 	sub.w	r2, r8, #4
 8009322:	f853 1b04 	ldr.w	r1, [r3], #4
 8009326:	429f      	cmp	r7, r3
 8009328:	f842 1f04 	str.w	r1, [r2, #4]!
 800932c:	d2f9      	bcs.n	8009322 <__hexnan+0xaa>
 800932e:	1b3b      	subs	r3, r7, r4
 8009330:	f023 0303 	bic.w	r3, r3, #3
 8009334:	3304      	adds	r3, #4
 8009336:	3401      	adds	r4, #1
 8009338:	3e03      	subs	r6, #3
 800933a:	42b4      	cmp	r4, r6
 800933c:	bf88      	it	hi
 800933e:	2304      	movhi	r3, #4
 8009340:	2200      	movs	r2, #0
 8009342:	4443      	add	r3, r8
 8009344:	f843 2b04 	str.w	r2, [r3], #4
 8009348:	429f      	cmp	r7, r3
 800934a:	d2fb      	bcs.n	8009344 <__hexnan+0xcc>
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	b91b      	cbnz	r3, 8009358 <__hexnan+0xe0>
 8009350:	4547      	cmp	r7, r8
 8009352:	d127      	bne.n	80093a4 <__hexnan+0x12c>
 8009354:	2301      	movs	r3, #1
 8009356:	603b      	str	r3, [r7, #0]
 8009358:	2005      	movs	r0, #5
 800935a:	e026      	b.n	80093aa <__hexnan+0x132>
 800935c:	3501      	adds	r5, #1
 800935e:	2d08      	cmp	r5, #8
 8009360:	f10b 0b01 	add.w	fp, fp, #1
 8009364:	dd06      	ble.n	8009374 <__hexnan+0xfc>
 8009366:	4544      	cmp	r4, r8
 8009368:	d9c3      	bls.n	80092f2 <__hexnan+0x7a>
 800936a:	2300      	movs	r3, #0
 800936c:	2501      	movs	r5, #1
 800936e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009372:	3c04      	subs	r4, #4
 8009374:	6822      	ldr	r2, [r4, #0]
 8009376:	f000 000f 	and.w	r0, r0, #15
 800937a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800937e:	6022      	str	r2, [r4, #0]
 8009380:	e7b7      	b.n	80092f2 <__hexnan+0x7a>
 8009382:	2508      	movs	r5, #8
 8009384:	e7b5      	b.n	80092f2 <__hexnan+0x7a>
 8009386:	9b01      	ldr	r3, [sp, #4]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d0df      	beq.n	800934c <__hexnan+0xd4>
 800938c:	f04f 32ff 	mov.w	r2, #4294967295
 8009390:	f1c3 0320 	rsb	r3, r3, #32
 8009394:	fa22 f303 	lsr.w	r3, r2, r3
 8009398:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800939c:	401a      	ands	r2, r3
 800939e:	f846 2c04 	str.w	r2, [r6, #-4]
 80093a2:	e7d3      	b.n	800934c <__hexnan+0xd4>
 80093a4:	3f04      	subs	r7, #4
 80093a6:	e7d1      	b.n	800934c <__hexnan+0xd4>
 80093a8:	2004      	movs	r0, #4
 80093aa:	b007      	add	sp, #28
 80093ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080093b0 <_localeconv_r>:
 80093b0:	4800      	ldr	r0, [pc, #0]	; (80093b4 <_localeconv_r+0x4>)
 80093b2:	4770      	bx	lr
 80093b4:	20000170 	.word	0x20000170

080093b8 <__retarget_lock_init_recursive>:
 80093b8:	4770      	bx	lr

080093ba <__retarget_lock_acquire_recursive>:
 80093ba:	4770      	bx	lr

080093bc <__retarget_lock_release_recursive>:
 80093bc:	4770      	bx	lr
	...

080093c0 <_lseek_r>:
 80093c0:	b538      	push	{r3, r4, r5, lr}
 80093c2:	4604      	mov	r4, r0
 80093c4:	4608      	mov	r0, r1
 80093c6:	4611      	mov	r1, r2
 80093c8:	2200      	movs	r2, #0
 80093ca:	4d05      	ldr	r5, [pc, #20]	; (80093e0 <_lseek_r+0x20>)
 80093cc:	602a      	str	r2, [r5, #0]
 80093ce:	461a      	mov	r2, r3
 80093d0:	f7f9 fd1e 	bl	8002e10 <_lseek>
 80093d4:	1c43      	adds	r3, r0, #1
 80093d6:	d102      	bne.n	80093de <_lseek_r+0x1e>
 80093d8:	682b      	ldr	r3, [r5, #0]
 80093da:	b103      	cbz	r3, 80093de <_lseek_r+0x1e>
 80093dc:	6023      	str	r3, [r4, #0]
 80093de:	bd38      	pop	{r3, r4, r5, pc}
 80093e0:	20000554 	.word	0x20000554

080093e4 <__swhatbuf_r>:
 80093e4:	b570      	push	{r4, r5, r6, lr}
 80093e6:	460e      	mov	r6, r1
 80093e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093ec:	4614      	mov	r4, r2
 80093ee:	2900      	cmp	r1, #0
 80093f0:	461d      	mov	r5, r3
 80093f2:	b096      	sub	sp, #88	; 0x58
 80093f4:	da07      	bge.n	8009406 <__swhatbuf_r+0x22>
 80093f6:	2300      	movs	r3, #0
 80093f8:	602b      	str	r3, [r5, #0]
 80093fa:	89b3      	ldrh	r3, [r6, #12]
 80093fc:	061a      	lsls	r2, r3, #24
 80093fe:	d410      	bmi.n	8009422 <__swhatbuf_r+0x3e>
 8009400:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009404:	e00e      	b.n	8009424 <__swhatbuf_r+0x40>
 8009406:	466a      	mov	r2, sp
 8009408:	f001 f872 	bl	800a4f0 <_fstat_r>
 800940c:	2800      	cmp	r0, #0
 800940e:	dbf2      	blt.n	80093f6 <__swhatbuf_r+0x12>
 8009410:	9a01      	ldr	r2, [sp, #4]
 8009412:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009416:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800941a:	425a      	negs	r2, r3
 800941c:	415a      	adcs	r2, r3
 800941e:	602a      	str	r2, [r5, #0]
 8009420:	e7ee      	b.n	8009400 <__swhatbuf_r+0x1c>
 8009422:	2340      	movs	r3, #64	; 0x40
 8009424:	2000      	movs	r0, #0
 8009426:	6023      	str	r3, [r4, #0]
 8009428:	b016      	add	sp, #88	; 0x58
 800942a:	bd70      	pop	{r4, r5, r6, pc}

0800942c <__smakebuf_r>:
 800942c:	898b      	ldrh	r3, [r1, #12]
 800942e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009430:	079d      	lsls	r5, r3, #30
 8009432:	4606      	mov	r6, r0
 8009434:	460c      	mov	r4, r1
 8009436:	d507      	bpl.n	8009448 <__smakebuf_r+0x1c>
 8009438:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800943c:	6023      	str	r3, [r4, #0]
 800943e:	6123      	str	r3, [r4, #16]
 8009440:	2301      	movs	r3, #1
 8009442:	6163      	str	r3, [r4, #20]
 8009444:	b002      	add	sp, #8
 8009446:	bd70      	pop	{r4, r5, r6, pc}
 8009448:	466a      	mov	r2, sp
 800944a:	ab01      	add	r3, sp, #4
 800944c:	f7ff ffca 	bl	80093e4 <__swhatbuf_r>
 8009450:	9900      	ldr	r1, [sp, #0]
 8009452:	4605      	mov	r5, r0
 8009454:	4630      	mov	r0, r6
 8009456:	f7fc fe99 	bl	800618c <_malloc_r>
 800945a:	b948      	cbnz	r0, 8009470 <__smakebuf_r+0x44>
 800945c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009460:	059a      	lsls	r2, r3, #22
 8009462:	d4ef      	bmi.n	8009444 <__smakebuf_r+0x18>
 8009464:	f023 0303 	bic.w	r3, r3, #3
 8009468:	f043 0302 	orr.w	r3, r3, #2
 800946c:	81a3      	strh	r3, [r4, #12]
 800946e:	e7e3      	b.n	8009438 <__smakebuf_r+0xc>
 8009470:	4b0d      	ldr	r3, [pc, #52]	; (80094a8 <__smakebuf_r+0x7c>)
 8009472:	62b3      	str	r3, [r6, #40]	; 0x28
 8009474:	89a3      	ldrh	r3, [r4, #12]
 8009476:	6020      	str	r0, [r4, #0]
 8009478:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800947c:	81a3      	strh	r3, [r4, #12]
 800947e:	9b00      	ldr	r3, [sp, #0]
 8009480:	6120      	str	r0, [r4, #16]
 8009482:	6163      	str	r3, [r4, #20]
 8009484:	9b01      	ldr	r3, [sp, #4]
 8009486:	b15b      	cbz	r3, 80094a0 <__smakebuf_r+0x74>
 8009488:	4630      	mov	r0, r6
 800948a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800948e:	f001 f841 	bl	800a514 <_isatty_r>
 8009492:	b128      	cbz	r0, 80094a0 <__smakebuf_r+0x74>
 8009494:	89a3      	ldrh	r3, [r4, #12]
 8009496:	f023 0303 	bic.w	r3, r3, #3
 800949a:	f043 0301 	orr.w	r3, r3, #1
 800949e:	81a3      	strh	r3, [r4, #12]
 80094a0:	89a0      	ldrh	r0, [r4, #12]
 80094a2:	4305      	orrs	r5, r0
 80094a4:	81a5      	strh	r5, [r4, #12]
 80094a6:	e7cd      	b.n	8009444 <__smakebuf_r+0x18>
 80094a8:	08008b41 	.word	0x08008b41

080094ac <__ascii_mbtowc>:
 80094ac:	b082      	sub	sp, #8
 80094ae:	b901      	cbnz	r1, 80094b2 <__ascii_mbtowc+0x6>
 80094b0:	a901      	add	r1, sp, #4
 80094b2:	b142      	cbz	r2, 80094c6 <__ascii_mbtowc+0x1a>
 80094b4:	b14b      	cbz	r3, 80094ca <__ascii_mbtowc+0x1e>
 80094b6:	7813      	ldrb	r3, [r2, #0]
 80094b8:	600b      	str	r3, [r1, #0]
 80094ba:	7812      	ldrb	r2, [r2, #0]
 80094bc:	1e10      	subs	r0, r2, #0
 80094be:	bf18      	it	ne
 80094c0:	2001      	movne	r0, #1
 80094c2:	b002      	add	sp, #8
 80094c4:	4770      	bx	lr
 80094c6:	4610      	mov	r0, r2
 80094c8:	e7fb      	b.n	80094c2 <__ascii_mbtowc+0x16>
 80094ca:	f06f 0001 	mvn.w	r0, #1
 80094ce:	e7f8      	b.n	80094c2 <__ascii_mbtowc+0x16>

080094d0 <memchr>:
 80094d0:	4603      	mov	r3, r0
 80094d2:	b510      	push	{r4, lr}
 80094d4:	b2c9      	uxtb	r1, r1
 80094d6:	4402      	add	r2, r0
 80094d8:	4293      	cmp	r3, r2
 80094da:	4618      	mov	r0, r3
 80094dc:	d101      	bne.n	80094e2 <memchr+0x12>
 80094de:	2000      	movs	r0, #0
 80094e0:	e003      	b.n	80094ea <memchr+0x1a>
 80094e2:	7804      	ldrb	r4, [r0, #0]
 80094e4:	3301      	adds	r3, #1
 80094e6:	428c      	cmp	r4, r1
 80094e8:	d1f6      	bne.n	80094d8 <memchr+0x8>
 80094ea:	bd10      	pop	{r4, pc}

080094ec <__malloc_lock>:
 80094ec:	4801      	ldr	r0, [pc, #4]	; (80094f4 <__malloc_lock+0x8>)
 80094ee:	f7ff bf64 	b.w	80093ba <__retarget_lock_acquire_recursive>
 80094f2:	bf00      	nop
 80094f4:	2000054c 	.word	0x2000054c

080094f8 <__malloc_unlock>:
 80094f8:	4801      	ldr	r0, [pc, #4]	; (8009500 <__malloc_unlock+0x8>)
 80094fa:	f7ff bf5f 	b.w	80093bc <__retarget_lock_release_recursive>
 80094fe:	bf00      	nop
 8009500:	2000054c 	.word	0x2000054c

08009504 <_Balloc>:
 8009504:	b570      	push	{r4, r5, r6, lr}
 8009506:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009508:	4604      	mov	r4, r0
 800950a:	460d      	mov	r5, r1
 800950c:	b976      	cbnz	r6, 800952c <_Balloc+0x28>
 800950e:	2010      	movs	r0, #16
 8009510:	f7fc fdca 	bl	80060a8 <malloc>
 8009514:	4602      	mov	r2, r0
 8009516:	6260      	str	r0, [r4, #36]	; 0x24
 8009518:	b920      	cbnz	r0, 8009524 <_Balloc+0x20>
 800951a:	2166      	movs	r1, #102	; 0x66
 800951c:	4b17      	ldr	r3, [pc, #92]	; (800957c <_Balloc+0x78>)
 800951e:	4818      	ldr	r0, [pc, #96]	; (8009580 <_Balloc+0x7c>)
 8009520:	f000 ffb6 	bl	800a490 <__assert_func>
 8009524:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009528:	6006      	str	r6, [r0, #0]
 800952a:	60c6      	str	r6, [r0, #12]
 800952c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800952e:	68f3      	ldr	r3, [r6, #12]
 8009530:	b183      	cbz	r3, 8009554 <_Balloc+0x50>
 8009532:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009534:	68db      	ldr	r3, [r3, #12]
 8009536:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800953a:	b9b8      	cbnz	r0, 800956c <_Balloc+0x68>
 800953c:	2101      	movs	r1, #1
 800953e:	fa01 f605 	lsl.w	r6, r1, r5
 8009542:	1d72      	adds	r2, r6, #5
 8009544:	4620      	mov	r0, r4
 8009546:	0092      	lsls	r2, r2, #2
 8009548:	f000 fc94 	bl	8009e74 <_calloc_r>
 800954c:	b160      	cbz	r0, 8009568 <_Balloc+0x64>
 800954e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009552:	e00e      	b.n	8009572 <_Balloc+0x6e>
 8009554:	2221      	movs	r2, #33	; 0x21
 8009556:	2104      	movs	r1, #4
 8009558:	4620      	mov	r0, r4
 800955a:	f000 fc8b 	bl	8009e74 <_calloc_r>
 800955e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009560:	60f0      	str	r0, [r6, #12]
 8009562:	68db      	ldr	r3, [r3, #12]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d1e4      	bne.n	8009532 <_Balloc+0x2e>
 8009568:	2000      	movs	r0, #0
 800956a:	bd70      	pop	{r4, r5, r6, pc}
 800956c:	6802      	ldr	r2, [r0, #0]
 800956e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009572:	2300      	movs	r3, #0
 8009574:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009578:	e7f7      	b.n	800956a <_Balloc+0x66>
 800957a:	bf00      	nop
 800957c:	0800a8ad 	.word	0x0800a8ad
 8009580:	0800aa14 	.word	0x0800aa14

08009584 <_Bfree>:
 8009584:	b570      	push	{r4, r5, r6, lr}
 8009586:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009588:	4605      	mov	r5, r0
 800958a:	460c      	mov	r4, r1
 800958c:	b976      	cbnz	r6, 80095ac <_Bfree+0x28>
 800958e:	2010      	movs	r0, #16
 8009590:	f7fc fd8a 	bl	80060a8 <malloc>
 8009594:	4602      	mov	r2, r0
 8009596:	6268      	str	r0, [r5, #36]	; 0x24
 8009598:	b920      	cbnz	r0, 80095a4 <_Bfree+0x20>
 800959a:	218a      	movs	r1, #138	; 0x8a
 800959c:	4b08      	ldr	r3, [pc, #32]	; (80095c0 <_Bfree+0x3c>)
 800959e:	4809      	ldr	r0, [pc, #36]	; (80095c4 <_Bfree+0x40>)
 80095a0:	f000 ff76 	bl	800a490 <__assert_func>
 80095a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80095a8:	6006      	str	r6, [r0, #0]
 80095aa:	60c6      	str	r6, [r0, #12]
 80095ac:	b13c      	cbz	r4, 80095be <_Bfree+0x3a>
 80095ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80095b0:	6862      	ldr	r2, [r4, #4]
 80095b2:	68db      	ldr	r3, [r3, #12]
 80095b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80095b8:	6021      	str	r1, [r4, #0]
 80095ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80095be:	bd70      	pop	{r4, r5, r6, pc}
 80095c0:	0800a8ad 	.word	0x0800a8ad
 80095c4:	0800aa14 	.word	0x0800aa14

080095c8 <__multadd>:
 80095c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095cc:	4698      	mov	r8, r3
 80095ce:	460c      	mov	r4, r1
 80095d0:	2300      	movs	r3, #0
 80095d2:	690e      	ldr	r6, [r1, #16]
 80095d4:	4607      	mov	r7, r0
 80095d6:	f101 0014 	add.w	r0, r1, #20
 80095da:	6805      	ldr	r5, [r0, #0]
 80095dc:	3301      	adds	r3, #1
 80095de:	b2a9      	uxth	r1, r5
 80095e0:	fb02 8101 	mla	r1, r2, r1, r8
 80095e4:	0c2d      	lsrs	r5, r5, #16
 80095e6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80095ea:	fb02 c505 	mla	r5, r2, r5, ip
 80095ee:	b289      	uxth	r1, r1
 80095f0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80095f4:	429e      	cmp	r6, r3
 80095f6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80095fa:	f840 1b04 	str.w	r1, [r0], #4
 80095fe:	dcec      	bgt.n	80095da <__multadd+0x12>
 8009600:	f1b8 0f00 	cmp.w	r8, #0
 8009604:	d022      	beq.n	800964c <__multadd+0x84>
 8009606:	68a3      	ldr	r3, [r4, #8]
 8009608:	42b3      	cmp	r3, r6
 800960a:	dc19      	bgt.n	8009640 <__multadd+0x78>
 800960c:	6861      	ldr	r1, [r4, #4]
 800960e:	4638      	mov	r0, r7
 8009610:	3101      	adds	r1, #1
 8009612:	f7ff ff77 	bl	8009504 <_Balloc>
 8009616:	4605      	mov	r5, r0
 8009618:	b928      	cbnz	r0, 8009626 <__multadd+0x5e>
 800961a:	4602      	mov	r2, r0
 800961c:	21b5      	movs	r1, #181	; 0xb5
 800961e:	4b0d      	ldr	r3, [pc, #52]	; (8009654 <__multadd+0x8c>)
 8009620:	480d      	ldr	r0, [pc, #52]	; (8009658 <__multadd+0x90>)
 8009622:	f000 ff35 	bl	800a490 <__assert_func>
 8009626:	6922      	ldr	r2, [r4, #16]
 8009628:	f104 010c 	add.w	r1, r4, #12
 800962c:	3202      	adds	r2, #2
 800962e:	0092      	lsls	r2, r2, #2
 8009630:	300c      	adds	r0, #12
 8009632:	f7fc fd49 	bl	80060c8 <memcpy>
 8009636:	4621      	mov	r1, r4
 8009638:	4638      	mov	r0, r7
 800963a:	f7ff ffa3 	bl	8009584 <_Bfree>
 800963e:	462c      	mov	r4, r5
 8009640:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009644:	3601      	adds	r6, #1
 8009646:	f8c3 8014 	str.w	r8, [r3, #20]
 800964a:	6126      	str	r6, [r4, #16]
 800964c:	4620      	mov	r0, r4
 800964e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009652:	bf00      	nop
 8009654:	0800a923 	.word	0x0800a923
 8009658:	0800aa14 	.word	0x0800aa14

0800965c <__s2b>:
 800965c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009660:	4615      	mov	r5, r2
 8009662:	2209      	movs	r2, #9
 8009664:	461f      	mov	r7, r3
 8009666:	3308      	adds	r3, #8
 8009668:	460c      	mov	r4, r1
 800966a:	fb93 f3f2 	sdiv	r3, r3, r2
 800966e:	4606      	mov	r6, r0
 8009670:	2201      	movs	r2, #1
 8009672:	2100      	movs	r1, #0
 8009674:	429a      	cmp	r2, r3
 8009676:	db09      	blt.n	800968c <__s2b+0x30>
 8009678:	4630      	mov	r0, r6
 800967a:	f7ff ff43 	bl	8009504 <_Balloc>
 800967e:	b940      	cbnz	r0, 8009692 <__s2b+0x36>
 8009680:	4602      	mov	r2, r0
 8009682:	21ce      	movs	r1, #206	; 0xce
 8009684:	4b18      	ldr	r3, [pc, #96]	; (80096e8 <__s2b+0x8c>)
 8009686:	4819      	ldr	r0, [pc, #100]	; (80096ec <__s2b+0x90>)
 8009688:	f000 ff02 	bl	800a490 <__assert_func>
 800968c:	0052      	lsls	r2, r2, #1
 800968e:	3101      	adds	r1, #1
 8009690:	e7f0      	b.n	8009674 <__s2b+0x18>
 8009692:	9b08      	ldr	r3, [sp, #32]
 8009694:	2d09      	cmp	r5, #9
 8009696:	6143      	str	r3, [r0, #20]
 8009698:	f04f 0301 	mov.w	r3, #1
 800969c:	6103      	str	r3, [r0, #16]
 800969e:	dd16      	ble.n	80096ce <__s2b+0x72>
 80096a0:	f104 0909 	add.w	r9, r4, #9
 80096a4:	46c8      	mov	r8, r9
 80096a6:	442c      	add	r4, r5
 80096a8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80096ac:	4601      	mov	r1, r0
 80096ae:	220a      	movs	r2, #10
 80096b0:	4630      	mov	r0, r6
 80096b2:	3b30      	subs	r3, #48	; 0x30
 80096b4:	f7ff ff88 	bl	80095c8 <__multadd>
 80096b8:	45a0      	cmp	r8, r4
 80096ba:	d1f5      	bne.n	80096a8 <__s2b+0x4c>
 80096bc:	f1a5 0408 	sub.w	r4, r5, #8
 80096c0:	444c      	add	r4, r9
 80096c2:	1b2d      	subs	r5, r5, r4
 80096c4:	1963      	adds	r3, r4, r5
 80096c6:	42bb      	cmp	r3, r7
 80096c8:	db04      	blt.n	80096d4 <__s2b+0x78>
 80096ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096ce:	2509      	movs	r5, #9
 80096d0:	340a      	adds	r4, #10
 80096d2:	e7f6      	b.n	80096c2 <__s2b+0x66>
 80096d4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80096d8:	4601      	mov	r1, r0
 80096da:	220a      	movs	r2, #10
 80096dc:	4630      	mov	r0, r6
 80096de:	3b30      	subs	r3, #48	; 0x30
 80096e0:	f7ff ff72 	bl	80095c8 <__multadd>
 80096e4:	e7ee      	b.n	80096c4 <__s2b+0x68>
 80096e6:	bf00      	nop
 80096e8:	0800a923 	.word	0x0800a923
 80096ec:	0800aa14 	.word	0x0800aa14

080096f0 <__hi0bits>:
 80096f0:	0c02      	lsrs	r2, r0, #16
 80096f2:	0412      	lsls	r2, r2, #16
 80096f4:	4603      	mov	r3, r0
 80096f6:	b9ca      	cbnz	r2, 800972c <__hi0bits+0x3c>
 80096f8:	0403      	lsls	r3, r0, #16
 80096fa:	2010      	movs	r0, #16
 80096fc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009700:	bf04      	itt	eq
 8009702:	021b      	lsleq	r3, r3, #8
 8009704:	3008      	addeq	r0, #8
 8009706:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800970a:	bf04      	itt	eq
 800970c:	011b      	lsleq	r3, r3, #4
 800970e:	3004      	addeq	r0, #4
 8009710:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009714:	bf04      	itt	eq
 8009716:	009b      	lsleq	r3, r3, #2
 8009718:	3002      	addeq	r0, #2
 800971a:	2b00      	cmp	r3, #0
 800971c:	db05      	blt.n	800972a <__hi0bits+0x3a>
 800971e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8009722:	f100 0001 	add.w	r0, r0, #1
 8009726:	bf08      	it	eq
 8009728:	2020      	moveq	r0, #32
 800972a:	4770      	bx	lr
 800972c:	2000      	movs	r0, #0
 800972e:	e7e5      	b.n	80096fc <__hi0bits+0xc>

08009730 <__lo0bits>:
 8009730:	6803      	ldr	r3, [r0, #0]
 8009732:	4602      	mov	r2, r0
 8009734:	f013 0007 	ands.w	r0, r3, #7
 8009738:	d00b      	beq.n	8009752 <__lo0bits+0x22>
 800973a:	07d9      	lsls	r1, r3, #31
 800973c:	d422      	bmi.n	8009784 <__lo0bits+0x54>
 800973e:	0798      	lsls	r0, r3, #30
 8009740:	bf49      	itett	mi
 8009742:	085b      	lsrmi	r3, r3, #1
 8009744:	089b      	lsrpl	r3, r3, #2
 8009746:	2001      	movmi	r0, #1
 8009748:	6013      	strmi	r3, [r2, #0]
 800974a:	bf5c      	itt	pl
 800974c:	2002      	movpl	r0, #2
 800974e:	6013      	strpl	r3, [r2, #0]
 8009750:	4770      	bx	lr
 8009752:	b299      	uxth	r1, r3
 8009754:	b909      	cbnz	r1, 800975a <__lo0bits+0x2a>
 8009756:	2010      	movs	r0, #16
 8009758:	0c1b      	lsrs	r3, r3, #16
 800975a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800975e:	bf04      	itt	eq
 8009760:	0a1b      	lsreq	r3, r3, #8
 8009762:	3008      	addeq	r0, #8
 8009764:	0719      	lsls	r1, r3, #28
 8009766:	bf04      	itt	eq
 8009768:	091b      	lsreq	r3, r3, #4
 800976a:	3004      	addeq	r0, #4
 800976c:	0799      	lsls	r1, r3, #30
 800976e:	bf04      	itt	eq
 8009770:	089b      	lsreq	r3, r3, #2
 8009772:	3002      	addeq	r0, #2
 8009774:	07d9      	lsls	r1, r3, #31
 8009776:	d403      	bmi.n	8009780 <__lo0bits+0x50>
 8009778:	085b      	lsrs	r3, r3, #1
 800977a:	f100 0001 	add.w	r0, r0, #1
 800977e:	d003      	beq.n	8009788 <__lo0bits+0x58>
 8009780:	6013      	str	r3, [r2, #0]
 8009782:	4770      	bx	lr
 8009784:	2000      	movs	r0, #0
 8009786:	4770      	bx	lr
 8009788:	2020      	movs	r0, #32
 800978a:	4770      	bx	lr

0800978c <__i2b>:
 800978c:	b510      	push	{r4, lr}
 800978e:	460c      	mov	r4, r1
 8009790:	2101      	movs	r1, #1
 8009792:	f7ff feb7 	bl	8009504 <_Balloc>
 8009796:	4602      	mov	r2, r0
 8009798:	b928      	cbnz	r0, 80097a6 <__i2b+0x1a>
 800979a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800979e:	4b04      	ldr	r3, [pc, #16]	; (80097b0 <__i2b+0x24>)
 80097a0:	4804      	ldr	r0, [pc, #16]	; (80097b4 <__i2b+0x28>)
 80097a2:	f000 fe75 	bl	800a490 <__assert_func>
 80097a6:	2301      	movs	r3, #1
 80097a8:	6144      	str	r4, [r0, #20]
 80097aa:	6103      	str	r3, [r0, #16]
 80097ac:	bd10      	pop	{r4, pc}
 80097ae:	bf00      	nop
 80097b0:	0800a923 	.word	0x0800a923
 80097b4:	0800aa14 	.word	0x0800aa14

080097b8 <__multiply>:
 80097b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097bc:	4614      	mov	r4, r2
 80097be:	690a      	ldr	r2, [r1, #16]
 80097c0:	6923      	ldr	r3, [r4, #16]
 80097c2:	460d      	mov	r5, r1
 80097c4:	429a      	cmp	r2, r3
 80097c6:	bfbe      	ittt	lt
 80097c8:	460b      	movlt	r3, r1
 80097ca:	4625      	movlt	r5, r4
 80097cc:	461c      	movlt	r4, r3
 80097ce:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80097d2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80097d6:	68ab      	ldr	r3, [r5, #8]
 80097d8:	6869      	ldr	r1, [r5, #4]
 80097da:	eb0a 0709 	add.w	r7, sl, r9
 80097de:	42bb      	cmp	r3, r7
 80097e0:	b085      	sub	sp, #20
 80097e2:	bfb8      	it	lt
 80097e4:	3101      	addlt	r1, #1
 80097e6:	f7ff fe8d 	bl	8009504 <_Balloc>
 80097ea:	b930      	cbnz	r0, 80097fa <__multiply+0x42>
 80097ec:	4602      	mov	r2, r0
 80097ee:	f240 115d 	movw	r1, #349	; 0x15d
 80097f2:	4b41      	ldr	r3, [pc, #260]	; (80098f8 <__multiply+0x140>)
 80097f4:	4841      	ldr	r0, [pc, #260]	; (80098fc <__multiply+0x144>)
 80097f6:	f000 fe4b 	bl	800a490 <__assert_func>
 80097fa:	f100 0614 	add.w	r6, r0, #20
 80097fe:	4633      	mov	r3, r6
 8009800:	2200      	movs	r2, #0
 8009802:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009806:	4543      	cmp	r3, r8
 8009808:	d31e      	bcc.n	8009848 <__multiply+0x90>
 800980a:	f105 0c14 	add.w	ip, r5, #20
 800980e:	f104 0314 	add.w	r3, r4, #20
 8009812:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009816:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800981a:	9202      	str	r2, [sp, #8]
 800981c:	ebac 0205 	sub.w	r2, ip, r5
 8009820:	3a15      	subs	r2, #21
 8009822:	f022 0203 	bic.w	r2, r2, #3
 8009826:	3204      	adds	r2, #4
 8009828:	f105 0115 	add.w	r1, r5, #21
 800982c:	458c      	cmp	ip, r1
 800982e:	bf38      	it	cc
 8009830:	2204      	movcc	r2, #4
 8009832:	9201      	str	r2, [sp, #4]
 8009834:	9a02      	ldr	r2, [sp, #8]
 8009836:	9303      	str	r3, [sp, #12]
 8009838:	429a      	cmp	r2, r3
 800983a:	d808      	bhi.n	800984e <__multiply+0x96>
 800983c:	2f00      	cmp	r7, #0
 800983e:	dc55      	bgt.n	80098ec <__multiply+0x134>
 8009840:	6107      	str	r7, [r0, #16]
 8009842:	b005      	add	sp, #20
 8009844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009848:	f843 2b04 	str.w	r2, [r3], #4
 800984c:	e7db      	b.n	8009806 <__multiply+0x4e>
 800984e:	f8b3 a000 	ldrh.w	sl, [r3]
 8009852:	f1ba 0f00 	cmp.w	sl, #0
 8009856:	d020      	beq.n	800989a <__multiply+0xe2>
 8009858:	46b1      	mov	r9, r6
 800985a:	2200      	movs	r2, #0
 800985c:	f105 0e14 	add.w	lr, r5, #20
 8009860:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009864:	f8d9 b000 	ldr.w	fp, [r9]
 8009868:	b2a1      	uxth	r1, r4
 800986a:	fa1f fb8b 	uxth.w	fp, fp
 800986e:	fb0a b101 	mla	r1, sl, r1, fp
 8009872:	4411      	add	r1, r2
 8009874:	f8d9 2000 	ldr.w	r2, [r9]
 8009878:	0c24      	lsrs	r4, r4, #16
 800987a:	0c12      	lsrs	r2, r2, #16
 800987c:	fb0a 2404 	mla	r4, sl, r4, r2
 8009880:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009884:	b289      	uxth	r1, r1
 8009886:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800988a:	45f4      	cmp	ip, lr
 800988c:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009890:	f849 1b04 	str.w	r1, [r9], #4
 8009894:	d8e4      	bhi.n	8009860 <__multiply+0xa8>
 8009896:	9901      	ldr	r1, [sp, #4]
 8009898:	5072      	str	r2, [r6, r1]
 800989a:	9a03      	ldr	r2, [sp, #12]
 800989c:	3304      	adds	r3, #4
 800989e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80098a2:	f1b9 0f00 	cmp.w	r9, #0
 80098a6:	d01f      	beq.n	80098e8 <__multiply+0x130>
 80098a8:	46b6      	mov	lr, r6
 80098aa:	f04f 0a00 	mov.w	sl, #0
 80098ae:	6834      	ldr	r4, [r6, #0]
 80098b0:	f105 0114 	add.w	r1, r5, #20
 80098b4:	880a      	ldrh	r2, [r1, #0]
 80098b6:	f8be b002 	ldrh.w	fp, [lr, #2]
 80098ba:	b2a4      	uxth	r4, r4
 80098bc:	fb09 b202 	mla	r2, r9, r2, fp
 80098c0:	4492      	add	sl, r2
 80098c2:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80098c6:	f84e 4b04 	str.w	r4, [lr], #4
 80098ca:	f851 4b04 	ldr.w	r4, [r1], #4
 80098ce:	f8be 2000 	ldrh.w	r2, [lr]
 80098d2:	0c24      	lsrs	r4, r4, #16
 80098d4:	fb09 2404 	mla	r4, r9, r4, r2
 80098d8:	458c      	cmp	ip, r1
 80098da:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80098de:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80098e2:	d8e7      	bhi.n	80098b4 <__multiply+0xfc>
 80098e4:	9a01      	ldr	r2, [sp, #4]
 80098e6:	50b4      	str	r4, [r6, r2]
 80098e8:	3604      	adds	r6, #4
 80098ea:	e7a3      	b.n	8009834 <__multiply+0x7c>
 80098ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d1a5      	bne.n	8009840 <__multiply+0x88>
 80098f4:	3f01      	subs	r7, #1
 80098f6:	e7a1      	b.n	800983c <__multiply+0x84>
 80098f8:	0800a923 	.word	0x0800a923
 80098fc:	0800aa14 	.word	0x0800aa14

08009900 <__pow5mult>:
 8009900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009904:	4615      	mov	r5, r2
 8009906:	f012 0203 	ands.w	r2, r2, #3
 800990a:	4606      	mov	r6, r0
 800990c:	460f      	mov	r7, r1
 800990e:	d007      	beq.n	8009920 <__pow5mult+0x20>
 8009910:	4c25      	ldr	r4, [pc, #148]	; (80099a8 <__pow5mult+0xa8>)
 8009912:	3a01      	subs	r2, #1
 8009914:	2300      	movs	r3, #0
 8009916:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800991a:	f7ff fe55 	bl	80095c8 <__multadd>
 800991e:	4607      	mov	r7, r0
 8009920:	10ad      	asrs	r5, r5, #2
 8009922:	d03d      	beq.n	80099a0 <__pow5mult+0xa0>
 8009924:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009926:	b97c      	cbnz	r4, 8009948 <__pow5mult+0x48>
 8009928:	2010      	movs	r0, #16
 800992a:	f7fc fbbd 	bl	80060a8 <malloc>
 800992e:	4602      	mov	r2, r0
 8009930:	6270      	str	r0, [r6, #36]	; 0x24
 8009932:	b928      	cbnz	r0, 8009940 <__pow5mult+0x40>
 8009934:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009938:	4b1c      	ldr	r3, [pc, #112]	; (80099ac <__pow5mult+0xac>)
 800993a:	481d      	ldr	r0, [pc, #116]	; (80099b0 <__pow5mult+0xb0>)
 800993c:	f000 fda8 	bl	800a490 <__assert_func>
 8009940:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009944:	6004      	str	r4, [r0, #0]
 8009946:	60c4      	str	r4, [r0, #12]
 8009948:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800994c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009950:	b94c      	cbnz	r4, 8009966 <__pow5mult+0x66>
 8009952:	f240 2171 	movw	r1, #625	; 0x271
 8009956:	4630      	mov	r0, r6
 8009958:	f7ff ff18 	bl	800978c <__i2b>
 800995c:	2300      	movs	r3, #0
 800995e:	4604      	mov	r4, r0
 8009960:	f8c8 0008 	str.w	r0, [r8, #8]
 8009964:	6003      	str	r3, [r0, #0]
 8009966:	f04f 0900 	mov.w	r9, #0
 800996a:	07eb      	lsls	r3, r5, #31
 800996c:	d50a      	bpl.n	8009984 <__pow5mult+0x84>
 800996e:	4639      	mov	r1, r7
 8009970:	4622      	mov	r2, r4
 8009972:	4630      	mov	r0, r6
 8009974:	f7ff ff20 	bl	80097b8 <__multiply>
 8009978:	4680      	mov	r8, r0
 800997a:	4639      	mov	r1, r7
 800997c:	4630      	mov	r0, r6
 800997e:	f7ff fe01 	bl	8009584 <_Bfree>
 8009982:	4647      	mov	r7, r8
 8009984:	106d      	asrs	r5, r5, #1
 8009986:	d00b      	beq.n	80099a0 <__pow5mult+0xa0>
 8009988:	6820      	ldr	r0, [r4, #0]
 800998a:	b938      	cbnz	r0, 800999c <__pow5mult+0x9c>
 800998c:	4622      	mov	r2, r4
 800998e:	4621      	mov	r1, r4
 8009990:	4630      	mov	r0, r6
 8009992:	f7ff ff11 	bl	80097b8 <__multiply>
 8009996:	6020      	str	r0, [r4, #0]
 8009998:	f8c0 9000 	str.w	r9, [r0]
 800999c:	4604      	mov	r4, r0
 800999e:	e7e4      	b.n	800996a <__pow5mult+0x6a>
 80099a0:	4638      	mov	r0, r7
 80099a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099a6:	bf00      	nop
 80099a8:	0800ab68 	.word	0x0800ab68
 80099ac:	0800a8ad 	.word	0x0800a8ad
 80099b0:	0800aa14 	.word	0x0800aa14

080099b4 <__lshift>:
 80099b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099b8:	460c      	mov	r4, r1
 80099ba:	4607      	mov	r7, r0
 80099bc:	4691      	mov	r9, r2
 80099be:	6923      	ldr	r3, [r4, #16]
 80099c0:	6849      	ldr	r1, [r1, #4]
 80099c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80099c6:	68a3      	ldr	r3, [r4, #8]
 80099c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80099cc:	f108 0601 	add.w	r6, r8, #1
 80099d0:	42b3      	cmp	r3, r6
 80099d2:	db0b      	blt.n	80099ec <__lshift+0x38>
 80099d4:	4638      	mov	r0, r7
 80099d6:	f7ff fd95 	bl	8009504 <_Balloc>
 80099da:	4605      	mov	r5, r0
 80099dc:	b948      	cbnz	r0, 80099f2 <__lshift+0x3e>
 80099de:	4602      	mov	r2, r0
 80099e0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80099e4:	4b27      	ldr	r3, [pc, #156]	; (8009a84 <__lshift+0xd0>)
 80099e6:	4828      	ldr	r0, [pc, #160]	; (8009a88 <__lshift+0xd4>)
 80099e8:	f000 fd52 	bl	800a490 <__assert_func>
 80099ec:	3101      	adds	r1, #1
 80099ee:	005b      	lsls	r3, r3, #1
 80099f0:	e7ee      	b.n	80099d0 <__lshift+0x1c>
 80099f2:	2300      	movs	r3, #0
 80099f4:	f100 0114 	add.w	r1, r0, #20
 80099f8:	f100 0210 	add.w	r2, r0, #16
 80099fc:	4618      	mov	r0, r3
 80099fe:	4553      	cmp	r3, sl
 8009a00:	db33      	blt.n	8009a6a <__lshift+0xb6>
 8009a02:	6920      	ldr	r0, [r4, #16]
 8009a04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009a08:	f104 0314 	add.w	r3, r4, #20
 8009a0c:	f019 091f 	ands.w	r9, r9, #31
 8009a10:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009a14:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009a18:	d02b      	beq.n	8009a72 <__lshift+0xbe>
 8009a1a:	468a      	mov	sl, r1
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	f1c9 0e20 	rsb	lr, r9, #32
 8009a22:	6818      	ldr	r0, [r3, #0]
 8009a24:	fa00 f009 	lsl.w	r0, r0, r9
 8009a28:	4302      	orrs	r2, r0
 8009a2a:	f84a 2b04 	str.w	r2, [sl], #4
 8009a2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a32:	459c      	cmp	ip, r3
 8009a34:	fa22 f20e 	lsr.w	r2, r2, lr
 8009a38:	d8f3      	bhi.n	8009a22 <__lshift+0x6e>
 8009a3a:	ebac 0304 	sub.w	r3, ip, r4
 8009a3e:	3b15      	subs	r3, #21
 8009a40:	f023 0303 	bic.w	r3, r3, #3
 8009a44:	3304      	adds	r3, #4
 8009a46:	f104 0015 	add.w	r0, r4, #21
 8009a4a:	4584      	cmp	ip, r0
 8009a4c:	bf38      	it	cc
 8009a4e:	2304      	movcc	r3, #4
 8009a50:	50ca      	str	r2, [r1, r3]
 8009a52:	b10a      	cbz	r2, 8009a58 <__lshift+0xa4>
 8009a54:	f108 0602 	add.w	r6, r8, #2
 8009a58:	3e01      	subs	r6, #1
 8009a5a:	4638      	mov	r0, r7
 8009a5c:	4621      	mov	r1, r4
 8009a5e:	612e      	str	r6, [r5, #16]
 8009a60:	f7ff fd90 	bl	8009584 <_Bfree>
 8009a64:	4628      	mov	r0, r5
 8009a66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a6a:	f842 0f04 	str.w	r0, [r2, #4]!
 8009a6e:	3301      	adds	r3, #1
 8009a70:	e7c5      	b.n	80099fe <__lshift+0x4a>
 8009a72:	3904      	subs	r1, #4
 8009a74:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a78:	459c      	cmp	ip, r3
 8009a7a:	f841 2f04 	str.w	r2, [r1, #4]!
 8009a7e:	d8f9      	bhi.n	8009a74 <__lshift+0xc0>
 8009a80:	e7ea      	b.n	8009a58 <__lshift+0xa4>
 8009a82:	bf00      	nop
 8009a84:	0800a923 	.word	0x0800a923
 8009a88:	0800aa14 	.word	0x0800aa14

08009a8c <__mcmp>:
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	690a      	ldr	r2, [r1, #16]
 8009a90:	6900      	ldr	r0, [r0, #16]
 8009a92:	b530      	push	{r4, r5, lr}
 8009a94:	1a80      	subs	r0, r0, r2
 8009a96:	d10d      	bne.n	8009ab4 <__mcmp+0x28>
 8009a98:	3314      	adds	r3, #20
 8009a9a:	3114      	adds	r1, #20
 8009a9c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009aa0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009aa4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009aa8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009aac:	4295      	cmp	r5, r2
 8009aae:	d002      	beq.n	8009ab6 <__mcmp+0x2a>
 8009ab0:	d304      	bcc.n	8009abc <__mcmp+0x30>
 8009ab2:	2001      	movs	r0, #1
 8009ab4:	bd30      	pop	{r4, r5, pc}
 8009ab6:	42a3      	cmp	r3, r4
 8009ab8:	d3f4      	bcc.n	8009aa4 <__mcmp+0x18>
 8009aba:	e7fb      	b.n	8009ab4 <__mcmp+0x28>
 8009abc:	f04f 30ff 	mov.w	r0, #4294967295
 8009ac0:	e7f8      	b.n	8009ab4 <__mcmp+0x28>
	...

08009ac4 <__mdiff>:
 8009ac4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ac8:	460c      	mov	r4, r1
 8009aca:	4606      	mov	r6, r0
 8009acc:	4611      	mov	r1, r2
 8009ace:	4620      	mov	r0, r4
 8009ad0:	4692      	mov	sl, r2
 8009ad2:	f7ff ffdb 	bl	8009a8c <__mcmp>
 8009ad6:	1e05      	subs	r5, r0, #0
 8009ad8:	d111      	bne.n	8009afe <__mdiff+0x3a>
 8009ada:	4629      	mov	r1, r5
 8009adc:	4630      	mov	r0, r6
 8009ade:	f7ff fd11 	bl	8009504 <_Balloc>
 8009ae2:	4602      	mov	r2, r0
 8009ae4:	b928      	cbnz	r0, 8009af2 <__mdiff+0x2e>
 8009ae6:	f240 2132 	movw	r1, #562	; 0x232
 8009aea:	4b3c      	ldr	r3, [pc, #240]	; (8009bdc <__mdiff+0x118>)
 8009aec:	483c      	ldr	r0, [pc, #240]	; (8009be0 <__mdiff+0x11c>)
 8009aee:	f000 fccf 	bl	800a490 <__assert_func>
 8009af2:	2301      	movs	r3, #1
 8009af4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009af8:	4610      	mov	r0, r2
 8009afa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009afe:	bfa4      	itt	ge
 8009b00:	4653      	movge	r3, sl
 8009b02:	46a2      	movge	sl, r4
 8009b04:	4630      	mov	r0, r6
 8009b06:	f8da 1004 	ldr.w	r1, [sl, #4]
 8009b0a:	bfa6      	itte	ge
 8009b0c:	461c      	movge	r4, r3
 8009b0e:	2500      	movge	r5, #0
 8009b10:	2501      	movlt	r5, #1
 8009b12:	f7ff fcf7 	bl	8009504 <_Balloc>
 8009b16:	4602      	mov	r2, r0
 8009b18:	b918      	cbnz	r0, 8009b22 <__mdiff+0x5e>
 8009b1a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009b1e:	4b2f      	ldr	r3, [pc, #188]	; (8009bdc <__mdiff+0x118>)
 8009b20:	e7e4      	b.n	8009aec <__mdiff+0x28>
 8009b22:	f100 0814 	add.w	r8, r0, #20
 8009b26:	f8da 7010 	ldr.w	r7, [sl, #16]
 8009b2a:	60c5      	str	r5, [r0, #12]
 8009b2c:	f04f 0c00 	mov.w	ip, #0
 8009b30:	f10a 0514 	add.w	r5, sl, #20
 8009b34:	f10a 0010 	add.w	r0, sl, #16
 8009b38:	46c2      	mov	sl, r8
 8009b3a:	6926      	ldr	r6, [r4, #16]
 8009b3c:	f104 0914 	add.w	r9, r4, #20
 8009b40:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8009b44:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009b48:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8009b4c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009b50:	fa1f f18b 	uxth.w	r1, fp
 8009b54:	4461      	add	r1, ip
 8009b56:	fa1f fc83 	uxth.w	ip, r3
 8009b5a:	0c1b      	lsrs	r3, r3, #16
 8009b5c:	eba1 010c 	sub.w	r1, r1, ip
 8009b60:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009b64:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009b68:	b289      	uxth	r1, r1
 8009b6a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009b6e:	454e      	cmp	r6, r9
 8009b70:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009b74:	f84a 3b04 	str.w	r3, [sl], #4
 8009b78:	d8e6      	bhi.n	8009b48 <__mdiff+0x84>
 8009b7a:	1b33      	subs	r3, r6, r4
 8009b7c:	3b15      	subs	r3, #21
 8009b7e:	f023 0303 	bic.w	r3, r3, #3
 8009b82:	3415      	adds	r4, #21
 8009b84:	3304      	adds	r3, #4
 8009b86:	42a6      	cmp	r6, r4
 8009b88:	bf38      	it	cc
 8009b8a:	2304      	movcc	r3, #4
 8009b8c:	441d      	add	r5, r3
 8009b8e:	4443      	add	r3, r8
 8009b90:	461e      	mov	r6, r3
 8009b92:	462c      	mov	r4, r5
 8009b94:	4574      	cmp	r4, lr
 8009b96:	d30e      	bcc.n	8009bb6 <__mdiff+0xf2>
 8009b98:	f10e 0103 	add.w	r1, lr, #3
 8009b9c:	1b49      	subs	r1, r1, r5
 8009b9e:	f021 0103 	bic.w	r1, r1, #3
 8009ba2:	3d03      	subs	r5, #3
 8009ba4:	45ae      	cmp	lr, r5
 8009ba6:	bf38      	it	cc
 8009ba8:	2100      	movcc	r1, #0
 8009baa:	4419      	add	r1, r3
 8009bac:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009bb0:	b18b      	cbz	r3, 8009bd6 <__mdiff+0x112>
 8009bb2:	6117      	str	r7, [r2, #16]
 8009bb4:	e7a0      	b.n	8009af8 <__mdiff+0x34>
 8009bb6:	f854 8b04 	ldr.w	r8, [r4], #4
 8009bba:	fa1f f188 	uxth.w	r1, r8
 8009bbe:	4461      	add	r1, ip
 8009bc0:	1408      	asrs	r0, r1, #16
 8009bc2:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8009bc6:	b289      	uxth	r1, r1
 8009bc8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009bcc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009bd0:	f846 1b04 	str.w	r1, [r6], #4
 8009bd4:	e7de      	b.n	8009b94 <__mdiff+0xd0>
 8009bd6:	3f01      	subs	r7, #1
 8009bd8:	e7e8      	b.n	8009bac <__mdiff+0xe8>
 8009bda:	bf00      	nop
 8009bdc:	0800a923 	.word	0x0800a923
 8009be0:	0800aa14 	.word	0x0800aa14

08009be4 <__ulp>:
 8009be4:	4b11      	ldr	r3, [pc, #68]	; (8009c2c <__ulp+0x48>)
 8009be6:	400b      	ands	r3, r1
 8009be8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	dd02      	ble.n	8009bf6 <__ulp+0x12>
 8009bf0:	2000      	movs	r0, #0
 8009bf2:	4619      	mov	r1, r3
 8009bf4:	4770      	bx	lr
 8009bf6:	425b      	negs	r3, r3
 8009bf8:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8009bfc:	f04f 0000 	mov.w	r0, #0
 8009c00:	f04f 0100 	mov.w	r1, #0
 8009c04:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009c08:	da04      	bge.n	8009c14 <__ulp+0x30>
 8009c0a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009c0e:	fa43 f102 	asr.w	r1, r3, r2
 8009c12:	4770      	bx	lr
 8009c14:	f1a2 0314 	sub.w	r3, r2, #20
 8009c18:	2b1e      	cmp	r3, #30
 8009c1a:	bfd6      	itet	le
 8009c1c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8009c20:	2301      	movgt	r3, #1
 8009c22:	fa22 f303 	lsrle.w	r3, r2, r3
 8009c26:	4618      	mov	r0, r3
 8009c28:	4770      	bx	lr
 8009c2a:	bf00      	nop
 8009c2c:	7ff00000 	.word	0x7ff00000

08009c30 <__b2d>:
 8009c30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c34:	6907      	ldr	r7, [r0, #16]
 8009c36:	f100 0914 	add.w	r9, r0, #20
 8009c3a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8009c3e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8009c42:	f1a7 0804 	sub.w	r8, r7, #4
 8009c46:	4630      	mov	r0, r6
 8009c48:	f7ff fd52 	bl	80096f0 <__hi0bits>
 8009c4c:	f1c0 0320 	rsb	r3, r0, #32
 8009c50:	280a      	cmp	r0, #10
 8009c52:	600b      	str	r3, [r1, #0]
 8009c54:	491f      	ldr	r1, [pc, #124]	; (8009cd4 <__b2d+0xa4>)
 8009c56:	dc17      	bgt.n	8009c88 <__b2d+0x58>
 8009c58:	45c1      	cmp	r9, r8
 8009c5a:	bf28      	it	cs
 8009c5c:	2200      	movcs	r2, #0
 8009c5e:	f1c0 0c0b 	rsb	ip, r0, #11
 8009c62:	fa26 f30c 	lsr.w	r3, r6, ip
 8009c66:	bf38      	it	cc
 8009c68:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009c6c:	ea43 0501 	orr.w	r5, r3, r1
 8009c70:	f100 0315 	add.w	r3, r0, #21
 8009c74:	fa06 f303 	lsl.w	r3, r6, r3
 8009c78:	fa22 f20c 	lsr.w	r2, r2, ip
 8009c7c:	ea43 0402 	orr.w	r4, r3, r2
 8009c80:	4620      	mov	r0, r4
 8009c82:	4629      	mov	r1, r5
 8009c84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c88:	45c1      	cmp	r9, r8
 8009c8a:	bf2e      	itee	cs
 8009c8c:	2200      	movcs	r2, #0
 8009c8e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009c92:	f1a7 0808 	subcc.w	r8, r7, #8
 8009c96:	f1b0 030b 	subs.w	r3, r0, #11
 8009c9a:	d016      	beq.n	8009cca <__b2d+0x9a>
 8009c9c:	f1c3 0720 	rsb	r7, r3, #32
 8009ca0:	fa22 f107 	lsr.w	r1, r2, r7
 8009ca4:	45c8      	cmp	r8, r9
 8009ca6:	fa06 f603 	lsl.w	r6, r6, r3
 8009caa:	ea46 0601 	orr.w	r6, r6, r1
 8009cae:	bf94      	ite	ls
 8009cb0:	2100      	movls	r1, #0
 8009cb2:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8009cb6:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8009cba:	fa02 f003 	lsl.w	r0, r2, r3
 8009cbe:	40f9      	lsrs	r1, r7
 8009cc0:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009cc4:	ea40 0401 	orr.w	r4, r0, r1
 8009cc8:	e7da      	b.n	8009c80 <__b2d+0x50>
 8009cca:	4614      	mov	r4, r2
 8009ccc:	ea46 0501 	orr.w	r5, r6, r1
 8009cd0:	e7d6      	b.n	8009c80 <__b2d+0x50>
 8009cd2:	bf00      	nop
 8009cd4:	3ff00000 	.word	0x3ff00000

08009cd8 <__d2b>:
 8009cd8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009cdc:	2101      	movs	r1, #1
 8009cde:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8009ce2:	4690      	mov	r8, r2
 8009ce4:	461d      	mov	r5, r3
 8009ce6:	f7ff fc0d 	bl	8009504 <_Balloc>
 8009cea:	4604      	mov	r4, r0
 8009cec:	b930      	cbnz	r0, 8009cfc <__d2b+0x24>
 8009cee:	4602      	mov	r2, r0
 8009cf0:	f240 310a 	movw	r1, #778	; 0x30a
 8009cf4:	4b24      	ldr	r3, [pc, #144]	; (8009d88 <__d2b+0xb0>)
 8009cf6:	4825      	ldr	r0, [pc, #148]	; (8009d8c <__d2b+0xb4>)
 8009cf8:	f000 fbca 	bl	800a490 <__assert_func>
 8009cfc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8009d00:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8009d04:	bb2d      	cbnz	r5, 8009d52 <__d2b+0x7a>
 8009d06:	9301      	str	r3, [sp, #4]
 8009d08:	f1b8 0300 	subs.w	r3, r8, #0
 8009d0c:	d026      	beq.n	8009d5c <__d2b+0x84>
 8009d0e:	4668      	mov	r0, sp
 8009d10:	9300      	str	r3, [sp, #0]
 8009d12:	f7ff fd0d 	bl	8009730 <__lo0bits>
 8009d16:	9900      	ldr	r1, [sp, #0]
 8009d18:	b1f0      	cbz	r0, 8009d58 <__d2b+0x80>
 8009d1a:	9a01      	ldr	r2, [sp, #4]
 8009d1c:	f1c0 0320 	rsb	r3, r0, #32
 8009d20:	fa02 f303 	lsl.w	r3, r2, r3
 8009d24:	430b      	orrs	r3, r1
 8009d26:	40c2      	lsrs	r2, r0
 8009d28:	6163      	str	r3, [r4, #20]
 8009d2a:	9201      	str	r2, [sp, #4]
 8009d2c:	9b01      	ldr	r3, [sp, #4]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	bf14      	ite	ne
 8009d32:	2102      	movne	r1, #2
 8009d34:	2101      	moveq	r1, #1
 8009d36:	61a3      	str	r3, [r4, #24]
 8009d38:	6121      	str	r1, [r4, #16]
 8009d3a:	b1c5      	cbz	r5, 8009d6e <__d2b+0x96>
 8009d3c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009d40:	4405      	add	r5, r0
 8009d42:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009d46:	603d      	str	r5, [r7, #0]
 8009d48:	6030      	str	r0, [r6, #0]
 8009d4a:	4620      	mov	r0, r4
 8009d4c:	b002      	add	sp, #8
 8009d4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009d56:	e7d6      	b.n	8009d06 <__d2b+0x2e>
 8009d58:	6161      	str	r1, [r4, #20]
 8009d5a:	e7e7      	b.n	8009d2c <__d2b+0x54>
 8009d5c:	a801      	add	r0, sp, #4
 8009d5e:	f7ff fce7 	bl	8009730 <__lo0bits>
 8009d62:	2101      	movs	r1, #1
 8009d64:	9b01      	ldr	r3, [sp, #4]
 8009d66:	6121      	str	r1, [r4, #16]
 8009d68:	6163      	str	r3, [r4, #20]
 8009d6a:	3020      	adds	r0, #32
 8009d6c:	e7e5      	b.n	8009d3a <__d2b+0x62>
 8009d6e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8009d72:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009d76:	6038      	str	r0, [r7, #0]
 8009d78:	6918      	ldr	r0, [r3, #16]
 8009d7a:	f7ff fcb9 	bl	80096f0 <__hi0bits>
 8009d7e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8009d82:	6031      	str	r1, [r6, #0]
 8009d84:	e7e1      	b.n	8009d4a <__d2b+0x72>
 8009d86:	bf00      	nop
 8009d88:	0800a923 	.word	0x0800a923
 8009d8c:	0800aa14 	.word	0x0800aa14

08009d90 <__ratio>:
 8009d90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d94:	4688      	mov	r8, r1
 8009d96:	4669      	mov	r1, sp
 8009d98:	4681      	mov	r9, r0
 8009d9a:	f7ff ff49 	bl	8009c30 <__b2d>
 8009d9e:	460f      	mov	r7, r1
 8009da0:	4604      	mov	r4, r0
 8009da2:	460d      	mov	r5, r1
 8009da4:	4640      	mov	r0, r8
 8009da6:	a901      	add	r1, sp, #4
 8009da8:	f7ff ff42 	bl	8009c30 <__b2d>
 8009dac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009db0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009db4:	468b      	mov	fp, r1
 8009db6:	eba3 0c02 	sub.w	ip, r3, r2
 8009dba:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009dbe:	1a9b      	subs	r3, r3, r2
 8009dc0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	bfd5      	itete	le
 8009dc8:	460a      	movle	r2, r1
 8009dca:	462a      	movgt	r2, r5
 8009dcc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009dd0:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009dd4:	bfd8      	it	le
 8009dd6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009dda:	465b      	mov	r3, fp
 8009ddc:	4602      	mov	r2, r0
 8009dde:	4639      	mov	r1, r7
 8009de0:	4620      	mov	r0, r4
 8009de2:	f7f6 fcad 	bl	8000740 <__aeabi_ddiv>
 8009de6:	b003      	add	sp, #12
 8009de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009dec <__copybits>:
 8009dec:	3901      	subs	r1, #1
 8009dee:	b570      	push	{r4, r5, r6, lr}
 8009df0:	1149      	asrs	r1, r1, #5
 8009df2:	6914      	ldr	r4, [r2, #16]
 8009df4:	3101      	adds	r1, #1
 8009df6:	f102 0314 	add.w	r3, r2, #20
 8009dfa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009dfe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009e02:	1f05      	subs	r5, r0, #4
 8009e04:	42a3      	cmp	r3, r4
 8009e06:	d30c      	bcc.n	8009e22 <__copybits+0x36>
 8009e08:	1aa3      	subs	r3, r4, r2
 8009e0a:	3b11      	subs	r3, #17
 8009e0c:	f023 0303 	bic.w	r3, r3, #3
 8009e10:	3211      	adds	r2, #17
 8009e12:	42a2      	cmp	r2, r4
 8009e14:	bf88      	it	hi
 8009e16:	2300      	movhi	r3, #0
 8009e18:	4418      	add	r0, r3
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	4288      	cmp	r0, r1
 8009e1e:	d305      	bcc.n	8009e2c <__copybits+0x40>
 8009e20:	bd70      	pop	{r4, r5, r6, pc}
 8009e22:	f853 6b04 	ldr.w	r6, [r3], #4
 8009e26:	f845 6f04 	str.w	r6, [r5, #4]!
 8009e2a:	e7eb      	b.n	8009e04 <__copybits+0x18>
 8009e2c:	f840 3b04 	str.w	r3, [r0], #4
 8009e30:	e7f4      	b.n	8009e1c <__copybits+0x30>

08009e32 <__any_on>:
 8009e32:	f100 0214 	add.w	r2, r0, #20
 8009e36:	6900      	ldr	r0, [r0, #16]
 8009e38:	114b      	asrs	r3, r1, #5
 8009e3a:	4298      	cmp	r0, r3
 8009e3c:	b510      	push	{r4, lr}
 8009e3e:	db11      	blt.n	8009e64 <__any_on+0x32>
 8009e40:	dd0a      	ble.n	8009e58 <__any_on+0x26>
 8009e42:	f011 011f 	ands.w	r1, r1, #31
 8009e46:	d007      	beq.n	8009e58 <__any_on+0x26>
 8009e48:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009e4c:	fa24 f001 	lsr.w	r0, r4, r1
 8009e50:	fa00 f101 	lsl.w	r1, r0, r1
 8009e54:	428c      	cmp	r4, r1
 8009e56:	d10b      	bne.n	8009e70 <__any_on+0x3e>
 8009e58:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009e5c:	4293      	cmp	r3, r2
 8009e5e:	d803      	bhi.n	8009e68 <__any_on+0x36>
 8009e60:	2000      	movs	r0, #0
 8009e62:	bd10      	pop	{r4, pc}
 8009e64:	4603      	mov	r3, r0
 8009e66:	e7f7      	b.n	8009e58 <__any_on+0x26>
 8009e68:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009e6c:	2900      	cmp	r1, #0
 8009e6e:	d0f5      	beq.n	8009e5c <__any_on+0x2a>
 8009e70:	2001      	movs	r0, #1
 8009e72:	e7f6      	b.n	8009e62 <__any_on+0x30>

08009e74 <_calloc_r>:
 8009e74:	b538      	push	{r3, r4, r5, lr}
 8009e76:	fb02 f501 	mul.w	r5, r2, r1
 8009e7a:	4629      	mov	r1, r5
 8009e7c:	f7fc f986 	bl	800618c <_malloc_r>
 8009e80:	4604      	mov	r4, r0
 8009e82:	b118      	cbz	r0, 8009e8c <_calloc_r+0x18>
 8009e84:	462a      	mov	r2, r5
 8009e86:	2100      	movs	r1, #0
 8009e88:	f7fc f92c 	bl	80060e4 <memset>
 8009e8c:	4620      	mov	r0, r4
 8009e8e:	bd38      	pop	{r3, r4, r5, pc}

08009e90 <_realloc_r>:
 8009e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e92:	4607      	mov	r7, r0
 8009e94:	4614      	mov	r4, r2
 8009e96:	460e      	mov	r6, r1
 8009e98:	b921      	cbnz	r1, 8009ea4 <_realloc_r+0x14>
 8009e9a:	4611      	mov	r1, r2
 8009e9c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009ea0:	f7fc b974 	b.w	800618c <_malloc_r>
 8009ea4:	b922      	cbnz	r2, 8009eb0 <_realloc_r+0x20>
 8009ea6:	f7fc f925 	bl	80060f4 <_free_r>
 8009eaa:	4625      	mov	r5, r4
 8009eac:	4628      	mov	r0, r5
 8009eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009eb0:	f000 fb5a 	bl	800a568 <_malloc_usable_size_r>
 8009eb4:	42a0      	cmp	r0, r4
 8009eb6:	d20f      	bcs.n	8009ed8 <_realloc_r+0x48>
 8009eb8:	4621      	mov	r1, r4
 8009eba:	4638      	mov	r0, r7
 8009ebc:	f7fc f966 	bl	800618c <_malloc_r>
 8009ec0:	4605      	mov	r5, r0
 8009ec2:	2800      	cmp	r0, #0
 8009ec4:	d0f2      	beq.n	8009eac <_realloc_r+0x1c>
 8009ec6:	4631      	mov	r1, r6
 8009ec8:	4622      	mov	r2, r4
 8009eca:	f7fc f8fd 	bl	80060c8 <memcpy>
 8009ece:	4631      	mov	r1, r6
 8009ed0:	4638      	mov	r0, r7
 8009ed2:	f7fc f90f 	bl	80060f4 <_free_r>
 8009ed6:	e7e9      	b.n	8009eac <_realloc_r+0x1c>
 8009ed8:	4635      	mov	r5, r6
 8009eda:	e7e7      	b.n	8009eac <_realloc_r+0x1c>

08009edc <__ssputs_r>:
 8009edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ee0:	688e      	ldr	r6, [r1, #8]
 8009ee2:	4682      	mov	sl, r0
 8009ee4:	429e      	cmp	r6, r3
 8009ee6:	460c      	mov	r4, r1
 8009ee8:	4690      	mov	r8, r2
 8009eea:	461f      	mov	r7, r3
 8009eec:	d838      	bhi.n	8009f60 <__ssputs_r+0x84>
 8009eee:	898a      	ldrh	r2, [r1, #12]
 8009ef0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009ef4:	d032      	beq.n	8009f5c <__ssputs_r+0x80>
 8009ef6:	6825      	ldr	r5, [r4, #0]
 8009ef8:	6909      	ldr	r1, [r1, #16]
 8009efa:	3301      	adds	r3, #1
 8009efc:	eba5 0901 	sub.w	r9, r5, r1
 8009f00:	6965      	ldr	r5, [r4, #20]
 8009f02:	444b      	add	r3, r9
 8009f04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f08:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009f0c:	106d      	asrs	r5, r5, #1
 8009f0e:	429d      	cmp	r5, r3
 8009f10:	bf38      	it	cc
 8009f12:	461d      	movcc	r5, r3
 8009f14:	0553      	lsls	r3, r2, #21
 8009f16:	d531      	bpl.n	8009f7c <__ssputs_r+0xa0>
 8009f18:	4629      	mov	r1, r5
 8009f1a:	f7fc f937 	bl	800618c <_malloc_r>
 8009f1e:	4606      	mov	r6, r0
 8009f20:	b950      	cbnz	r0, 8009f38 <__ssputs_r+0x5c>
 8009f22:	230c      	movs	r3, #12
 8009f24:	f04f 30ff 	mov.w	r0, #4294967295
 8009f28:	f8ca 3000 	str.w	r3, [sl]
 8009f2c:	89a3      	ldrh	r3, [r4, #12]
 8009f2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f32:	81a3      	strh	r3, [r4, #12]
 8009f34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f38:	464a      	mov	r2, r9
 8009f3a:	6921      	ldr	r1, [r4, #16]
 8009f3c:	f7fc f8c4 	bl	80060c8 <memcpy>
 8009f40:	89a3      	ldrh	r3, [r4, #12]
 8009f42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009f46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f4a:	81a3      	strh	r3, [r4, #12]
 8009f4c:	6126      	str	r6, [r4, #16]
 8009f4e:	444e      	add	r6, r9
 8009f50:	6026      	str	r6, [r4, #0]
 8009f52:	463e      	mov	r6, r7
 8009f54:	6165      	str	r5, [r4, #20]
 8009f56:	eba5 0509 	sub.w	r5, r5, r9
 8009f5a:	60a5      	str	r5, [r4, #8]
 8009f5c:	42be      	cmp	r6, r7
 8009f5e:	d900      	bls.n	8009f62 <__ssputs_r+0x86>
 8009f60:	463e      	mov	r6, r7
 8009f62:	4632      	mov	r2, r6
 8009f64:	4641      	mov	r1, r8
 8009f66:	6820      	ldr	r0, [r4, #0]
 8009f68:	f000 fae4 	bl	800a534 <memmove>
 8009f6c:	68a3      	ldr	r3, [r4, #8]
 8009f6e:	6822      	ldr	r2, [r4, #0]
 8009f70:	1b9b      	subs	r3, r3, r6
 8009f72:	4432      	add	r2, r6
 8009f74:	2000      	movs	r0, #0
 8009f76:	60a3      	str	r3, [r4, #8]
 8009f78:	6022      	str	r2, [r4, #0]
 8009f7a:	e7db      	b.n	8009f34 <__ssputs_r+0x58>
 8009f7c:	462a      	mov	r2, r5
 8009f7e:	f7ff ff87 	bl	8009e90 <_realloc_r>
 8009f82:	4606      	mov	r6, r0
 8009f84:	2800      	cmp	r0, #0
 8009f86:	d1e1      	bne.n	8009f4c <__ssputs_r+0x70>
 8009f88:	4650      	mov	r0, sl
 8009f8a:	6921      	ldr	r1, [r4, #16]
 8009f8c:	f7fc f8b2 	bl	80060f4 <_free_r>
 8009f90:	e7c7      	b.n	8009f22 <__ssputs_r+0x46>
	...

08009f94 <_svfiprintf_r>:
 8009f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f98:	4698      	mov	r8, r3
 8009f9a:	898b      	ldrh	r3, [r1, #12]
 8009f9c:	4607      	mov	r7, r0
 8009f9e:	061b      	lsls	r3, r3, #24
 8009fa0:	460d      	mov	r5, r1
 8009fa2:	4614      	mov	r4, r2
 8009fa4:	b09d      	sub	sp, #116	; 0x74
 8009fa6:	d50e      	bpl.n	8009fc6 <_svfiprintf_r+0x32>
 8009fa8:	690b      	ldr	r3, [r1, #16]
 8009faa:	b963      	cbnz	r3, 8009fc6 <_svfiprintf_r+0x32>
 8009fac:	2140      	movs	r1, #64	; 0x40
 8009fae:	f7fc f8ed 	bl	800618c <_malloc_r>
 8009fb2:	6028      	str	r0, [r5, #0]
 8009fb4:	6128      	str	r0, [r5, #16]
 8009fb6:	b920      	cbnz	r0, 8009fc2 <_svfiprintf_r+0x2e>
 8009fb8:	230c      	movs	r3, #12
 8009fba:	603b      	str	r3, [r7, #0]
 8009fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8009fc0:	e0d1      	b.n	800a166 <_svfiprintf_r+0x1d2>
 8009fc2:	2340      	movs	r3, #64	; 0x40
 8009fc4:	616b      	str	r3, [r5, #20]
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	9309      	str	r3, [sp, #36]	; 0x24
 8009fca:	2320      	movs	r3, #32
 8009fcc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009fd0:	2330      	movs	r3, #48	; 0x30
 8009fd2:	f04f 0901 	mov.w	r9, #1
 8009fd6:	f8cd 800c 	str.w	r8, [sp, #12]
 8009fda:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a180 <_svfiprintf_r+0x1ec>
 8009fde:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009fe2:	4623      	mov	r3, r4
 8009fe4:	469a      	mov	sl, r3
 8009fe6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fea:	b10a      	cbz	r2, 8009ff0 <_svfiprintf_r+0x5c>
 8009fec:	2a25      	cmp	r2, #37	; 0x25
 8009fee:	d1f9      	bne.n	8009fe4 <_svfiprintf_r+0x50>
 8009ff0:	ebba 0b04 	subs.w	fp, sl, r4
 8009ff4:	d00b      	beq.n	800a00e <_svfiprintf_r+0x7a>
 8009ff6:	465b      	mov	r3, fp
 8009ff8:	4622      	mov	r2, r4
 8009ffa:	4629      	mov	r1, r5
 8009ffc:	4638      	mov	r0, r7
 8009ffe:	f7ff ff6d 	bl	8009edc <__ssputs_r>
 800a002:	3001      	adds	r0, #1
 800a004:	f000 80aa 	beq.w	800a15c <_svfiprintf_r+0x1c8>
 800a008:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a00a:	445a      	add	r2, fp
 800a00c:	9209      	str	r2, [sp, #36]	; 0x24
 800a00e:	f89a 3000 	ldrb.w	r3, [sl]
 800a012:	2b00      	cmp	r3, #0
 800a014:	f000 80a2 	beq.w	800a15c <_svfiprintf_r+0x1c8>
 800a018:	2300      	movs	r3, #0
 800a01a:	f04f 32ff 	mov.w	r2, #4294967295
 800a01e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a022:	f10a 0a01 	add.w	sl, sl, #1
 800a026:	9304      	str	r3, [sp, #16]
 800a028:	9307      	str	r3, [sp, #28]
 800a02a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a02e:	931a      	str	r3, [sp, #104]	; 0x68
 800a030:	4654      	mov	r4, sl
 800a032:	2205      	movs	r2, #5
 800a034:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a038:	4851      	ldr	r0, [pc, #324]	; (800a180 <_svfiprintf_r+0x1ec>)
 800a03a:	f7ff fa49 	bl	80094d0 <memchr>
 800a03e:	9a04      	ldr	r2, [sp, #16]
 800a040:	b9d8      	cbnz	r0, 800a07a <_svfiprintf_r+0xe6>
 800a042:	06d0      	lsls	r0, r2, #27
 800a044:	bf44      	itt	mi
 800a046:	2320      	movmi	r3, #32
 800a048:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a04c:	0711      	lsls	r1, r2, #28
 800a04e:	bf44      	itt	mi
 800a050:	232b      	movmi	r3, #43	; 0x2b
 800a052:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a056:	f89a 3000 	ldrb.w	r3, [sl]
 800a05a:	2b2a      	cmp	r3, #42	; 0x2a
 800a05c:	d015      	beq.n	800a08a <_svfiprintf_r+0xf6>
 800a05e:	4654      	mov	r4, sl
 800a060:	2000      	movs	r0, #0
 800a062:	f04f 0c0a 	mov.w	ip, #10
 800a066:	9a07      	ldr	r2, [sp, #28]
 800a068:	4621      	mov	r1, r4
 800a06a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a06e:	3b30      	subs	r3, #48	; 0x30
 800a070:	2b09      	cmp	r3, #9
 800a072:	d94e      	bls.n	800a112 <_svfiprintf_r+0x17e>
 800a074:	b1b0      	cbz	r0, 800a0a4 <_svfiprintf_r+0x110>
 800a076:	9207      	str	r2, [sp, #28]
 800a078:	e014      	b.n	800a0a4 <_svfiprintf_r+0x110>
 800a07a:	eba0 0308 	sub.w	r3, r0, r8
 800a07e:	fa09 f303 	lsl.w	r3, r9, r3
 800a082:	4313      	orrs	r3, r2
 800a084:	46a2      	mov	sl, r4
 800a086:	9304      	str	r3, [sp, #16]
 800a088:	e7d2      	b.n	800a030 <_svfiprintf_r+0x9c>
 800a08a:	9b03      	ldr	r3, [sp, #12]
 800a08c:	1d19      	adds	r1, r3, #4
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	9103      	str	r1, [sp, #12]
 800a092:	2b00      	cmp	r3, #0
 800a094:	bfbb      	ittet	lt
 800a096:	425b      	neglt	r3, r3
 800a098:	f042 0202 	orrlt.w	r2, r2, #2
 800a09c:	9307      	strge	r3, [sp, #28]
 800a09e:	9307      	strlt	r3, [sp, #28]
 800a0a0:	bfb8      	it	lt
 800a0a2:	9204      	strlt	r2, [sp, #16]
 800a0a4:	7823      	ldrb	r3, [r4, #0]
 800a0a6:	2b2e      	cmp	r3, #46	; 0x2e
 800a0a8:	d10c      	bne.n	800a0c4 <_svfiprintf_r+0x130>
 800a0aa:	7863      	ldrb	r3, [r4, #1]
 800a0ac:	2b2a      	cmp	r3, #42	; 0x2a
 800a0ae:	d135      	bne.n	800a11c <_svfiprintf_r+0x188>
 800a0b0:	9b03      	ldr	r3, [sp, #12]
 800a0b2:	3402      	adds	r4, #2
 800a0b4:	1d1a      	adds	r2, r3, #4
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	9203      	str	r2, [sp, #12]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	bfb8      	it	lt
 800a0be:	f04f 33ff 	movlt.w	r3, #4294967295
 800a0c2:	9305      	str	r3, [sp, #20]
 800a0c4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a190 <_svfiprintf_r+0x1fc>
 800a0c8:	2203      	movs	r2, #3
 800a0ca:	4650      	mov	r0, sl
 800a0cc:	7821      	ldrb	r1, [r4, #0]
 800a0ce:	f7ff f9ff 	bl	80094d0 <memchr>
 800a0d2:	b140      	cbz	r0, 800a0e6 <_svfiprintf_r+0x152>
 800a0d4:	2340      	movs	r3, #64	; 0x40
 800a0d6:	eba0 000a 	sub.w	r0, r0, sl
 800a0da:	fa03 f000 	lsl.w	r0, r3, r0
 800a0de:	9b04      	ldr	r3, [sp, #16]
 800a0e0:	3401      	adds	r4, #1
 800a0e2:	4303      	orrs	r3, r0
 800a0e4:	9304      	str	r3, [sp, #16]
 800a0e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0ea:	2206      	movs	r2, #6
 800a0ec:	4825      	ldr	r0, [pc, #148]	; (800a184 <_svfiprintf_r+0x1f0>)
 800a0ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a0f2:	f7ff f9ed 	bl	80094d0 <memchr>
 800a0f6:	2800      	cmp	r0, #0
 800a0f8:	d038      	beq.n	800a16c <_svfiprintf_r+0x1d8>
 800a0fa:	4b23      	ldr	r3, [pc, #140]	; (800a188 <_svfiprintf_r+0x1f4>)
 800a0fc:	bb1b      	cbnz	r3, 800a146 <_svfiprintf_r+0x1b2>
 800a0fe:	9b03      	ldr	r3, [sp, #12]
 800a100:	3307      	adds	r3, #7
 800a102:	f023 0307 	bic.w	r3, r3, #7
 800a106:	3308      	adds	r3, #8
 800a108:	9303      	str	r3, [sp, #12]
 800a10a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a10c:	4433      	add	r3, r6
 800a10e:	9309      	str	r3, [sp, #36]	; 0x24
 800a110:	e767      	b.n	8009fe2 <_svfiprintf_r+0x4e>
 800a112:	460c      	mov	r4, r1
 800a114:	2001      	movs	r0, #1
 800a116:	fb0c 3202 	mla	r2, ip, r2, r3
 800a11a:	e7a5      	b.n	800a068 <_svfiprintf_r+0xd4>
 800a11c:	2300      	movs	r3, #0
 800a11e:	f04f 0c0a 	mov.w	ip, #10
 800a122:	4619      	mov	r1, r3
 800a124:	3401      	adds	r4, #1
 800a126:	9305      	str	r3, [sp, #20]
 800a128:	4620      	mov	r0, r4
 800a12a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a12e:	3a30      	subs	r2, #48	; 0x30
 800a130:	2a09      	cmp	r2, #9
 800a132:	d903      	bls.n	800a13c <_svfiprintf_r+0x1a8>
 800a134:	2b00      	cmp	r3, #0
 800a136:	d0c5      	beq.n	800a0c4 <_svfiprintf_r+0x130>
 800a138:	9105      	str	r1, [sp, #20]
 800a13a:	e7c3      	b.n	800a0c4 <_svfiprintf_r+0x130>
 800a13c:	4604      	mov	r4, r0
 800a13e:	2301      	movs	r3, #1
 800a140:	fb0c 2101 	mla	r1, ip, r1, r2
 800a144:	e7f0      	b.n	800a128 <_svfiprintf_r+0x194>
 800a146:	ab03      	add	r3, sp, #12
 800a148:	9300      	str	r3, [sp, #0]
 800a14a:	462a      	mov	r2, r5
 800a14c:	4638      	mov	r0, r7
 800a14e:	4b0f      	ldr	r3, [pc, #60]	; (800a18c <_svfiprintf_r+0x1f8>)
 800a150:	a904      	add	r1, sp, #16
 800a152:	f7fc f913 	bl	800637c <_printf_float>
 800a156:	1c42      	adds	r2, r0, #1
 800a158:	4606      	mov	r6, r0
 800a15a:	d1d6      	bne.n	800a10a <_svfiprintf_r+0x176>
 800a15c:	89ab      	ldrh	r3, [r5, #12]
 800a15e:	065b      	lsls	r3, r3, #25
 800a160:	f53f af2c 	bmi.w	8009fbc <_svfiprintf_r+0x28>
 800a164:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a166:	b01d      	add	sp, #116	; 0x74
 800a168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a16c:	ab03      	add	r3, sp, #12
 800a16e:	9300      	str	r3, [sp, #0]
 800a170:	462a      	mov	r2, r5
 800a172:	4638      	mov	r0, r7
 800a174:	4b05      	ldr	r3, [pc, #20]	; (800a18c <_svfiprintf_r+0x1f8>)
 800a176:	a904      	add	r1, sp, #16
 800a178:	f7fc fb9c 	bl	80068b4 <_printf_i>
 800a17c:	e7eb      	b.n	800a156 <_svfiprintf_r+0x1c2>
 800a17e:	bf00      	nop
 800a180:	0800ab74 	.word	0x0800ab74
 800a184:	0800ab7e 	.word	0x0800ab7e
 800a188:	0800637d 	.word	0x0800637d
 800a18c:	08009edd 	.word	0x08009edd
 800a190:	0800ab7a 	.word	0x0800ab7a

0800a194 <__sfputc_r>:
 800a194:	6893      	ldr	r3, [r2, #8]
 800a196:	b410      	push	{r4}
 800a198:	3b01      	subs	r3, #1
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	6093      	str	r3, [r2, #8]
 800a19e:	da07      	bge.n	800a1b0 <__sfputc_r+0x1c>
 800a1a0:	6994      	ldr	r4, [r2, #24]
 800a1a2:	42a3      	cmp	r3, r4
 800a1a4:	db01      	blt.n	800a1aa <__sfputc_r+0x16>
 800a1a6:	290a      	cmp	r1, #10
 800a1a8:	d102      	bne.n	800a1b0 <__sfputc_r+0x1c>
 800a1aa:	bc10      	pop	{r4}
 800a1ac:	f7fd bc84 	b.w	8007ab8 <__swbuf_r>
 800a1b0:	6813      	ldr	r3, [r2, #0]
 800a1b2:	1c58      	adds	r0, r3, #1
 800a1b4:	6010      	str	r0, [r2, #0]
 800a1b6:	7019      	strb	r1, [r3, #0]
 800a1b8:	4608      	mov	r0, r1
 800a1ba:	bc10      	pop	{r4}
 800a1bc:	4770      	bx	lr

0800a1be <__sfputs_r>:
 800a1be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1c0:	4606      	mov	r6, r0
 800a1c2:	460f      	mov	r7, r1
 800a1c4:	4614      	mov	r4, r2
 800a1c6:	18d5      	adds	r5, r2, r3
 800a1c8:	42ac      	cmp	r4, r5
 800a1ca:	d101      	bne.n	800a1d0 <__sfputs_r+0x12>
 800a1cc:	2000      	movs	r0, #0
 800a1ce:	e007      	b.n	800a1e0 <__sfputs_r+0x22>
 800a1d0:	463a      	mov	r2, r7
 800a1d2:	4630      	mov	r0, r6
 800a1d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1d8:	f7ff ffdc 	bl	800a194 <__sfputc_r>
 800a1dc:	1c43      	adds	r3, r0, #1
 800a1de:	d1f3      	bne.n	800a1c8 <__sfputs_r+0xa>
 800a1e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a1e4 <_vfiprintf_r>:
 800a1e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1e8:	460d      	mov	r5, r1
 800a1ea:	4614      	mov	r4, r2
 800a1ec:	4698      	mov	r8, r3
 800a1ee:	4606      	mov	r6, r0
 800a1f0:	b09d      	sub	sp, #116	; 0x74
 800a1f2:	b118      	cbz	r0, 800a1fc <_vfiprintf_r+0x18>
 800a1f4:	6983      	ldr	r3, [r0, #24]
 800a1f6:	b90b      	cbnz	r3, 800a1fc <_vfiprintf_r+0x18>
 800a1f8:	f7fe fcd6 	bl	8008ba8 <__sinit>
 800a1fc:	4b89      	ldr	r3, [pc, #548]	; (800a424 <_vfiprintf_r+0x240>)
 800a1fe:	429d      	cmp	r5, r3
 800a200:	d11b      	bne.n	800a23a <_vfiprintf_r+0x56>
 800a202:	6875      	ldr	r5, [r6, #4]
 800a204:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a206:	07d9      	lsls	r1, r3, #31
 800a208:	d405      	bmi.n	800a216 <_vfiprintf_r+0x32>
 800a20a:	89ab      	ldrh	r3, [r5, #12]
 800a20c:	059a      	lsls	r2, r3, #22
 800a20e:	d402      	bmi.n	800a216 <_vfiprintf_r+0x32>
 800a210:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a212:	f7ff f8d2 	bl	80093ba <__retarget_lock_acquire_recursive>
 800a216:	89ab      	ldrh	r3, [r5, #12]
 800a218:	071b      	lsls	r3, r3, #28
 800a21a:	d501      	bpl.n	800a220 <_vfiprintf_r+0x3c>
 800a21c:	692b      	ldr	r3, [r5, #16]
 800a21e:	b9eb      	cbnz	r3, 800a25c <_vfiprintf_r+0x78>
 800a220:	4629      	mov	r1, r5
 800a222:	4630      	mov	r0, r6
 800a224:	f7fd fcac 	bl	8007b80 <__swsetup_r>
 800a228:	b1c0      	cbz	r0, 800a25c <_vfiprintf_r+0x78>
 800a22a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a22c:	07dc      	lsls	r4, r3, #31
 800a22e:	d50e      	bpl.n	800a24e <_vfiprintf_r+0x6a>
 800a230:	f04f 30ff 	mov.w	r0, #4294967295
 800a234:	b01d      	add	sp, #116	; 0x74
 800a236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a23a:	4b7b      	ldr	r3, [pc, #492]	; (800a428 <_vfiprintf_r+0x244>)
 800a23c:	429d      	cmp	r5, r3
 800a23e:	d101      	bne.n	800a244 <_vfiprintf_r+0x60>
 800a240:	68b5      	ldr	r5, [r6, #8]
 800a242:	e7df      	b.n	800a204 <_vfiprintf_r+0x20>
 800a244:	4b79      	ldr	r3, [pc, #484]	; (800a42c <_vfiprintf_r+0x248>)
 800a246:	429d      	cmp	r5, r3
 800a248:	bf08      	it	eq
 800a24a:	68f5      	ldreq	r5, [r6, #12]
 800a24c:	e7da      	b.n	800a204 <_vfiprintf_r+0x20>
 800a24e:	89ab      	ldrh	r3, [r5, #12]
 800a250:	0598      	lsls	r0, r3, #22
 800a252:	d4ed      	bmi.n	800a230 <_vfiprintf_r+0x4c>
 800a254:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a256:	f7ff f8b1 	bl	80093bc <__retarget_lock_release_recursive>
 800a25a:	e7e9      	b.n	800a230 <_vfiprintf_r+0x4c>
 800a25c:	2300      	movs	r3, #0
 800a25e:	9309      	str	r3, [sp, #36]	; 0x24
 800a260:	2320      	movs	r3, #32
 800a262:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a266:	2330      	movs	r3, #48	; 0x30
 800a268:	f04f 0901 	mov.w	r9, #1
 800a26c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a270:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a430 <_vfiprintf_r+0x24c>
 800a274:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a278:	4623      	mov	r3, r4
 800a27a:	469a      	mov	sl, r3
 800a27c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a280:	b10a      	cbz	r2, 800a286 <_vfiprintf_r+0xa2>
 800a282:	2a25      	cmp	r2, #37	; 0x25
 800a284:	d1f9      	bne.n	800a27a <_vfiprintf_r+0x96>
 800a286:	ebba 0b04 	subs.w	fp, sl, r4
 800a28a:	d00b      	beq.n	800a2a4 <_vfiprintf_r+0xc0>
 800a28c:	465b      	mov	r3, fp
 800a28e:	4622      	mov	r2, r4
 800a290:	4629      	mov	r1, r5
 800a292:	4630      	mov	r0, r6
 800a294:	f7ff ff93 	bl	800a1be <__sfputs_r>
 800a298:	3001      	adds	r0, #1
 800a29a:	f000 80aa 	beq.w	800a3f2 <_vfiprintf_r+0x20e>
 800a29e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2a0:	445a      	add	r2, fp
 800a2a2:	9209      	str	r2, [sp, #36]	; 0x24
 800a2a4:	f89a 3000 	ldrb.w	r3, [sl]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	f000 80a2 	beq.w	800a3f2 <_vfiprintf_r+0x20e>
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	f04f 32ff 	mov.w	r2, #4294967295
 800a2b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2b8:	f10a 0a01 	add.w	sl, sl, #1
 800a2bc:	9304      	str	r3, [sp, #16]
 800a2be:	9307      	str	r3, [sp, #28]
 800a2c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a2c4:	931a      	str	r3, [sp, #104]	; 0x68
 800a2c6:	4654      	mov	r4, sl
 800a2c8:	2205      	movs	r2, #5
 800a2ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2ce:	4858      	ldr	r0, [pc, #352]	; (800a430 <_vfiprintf_r+0x24c>)
 800a2d0:	f7ff f8fe 	bl	80094d0 <memchr>
 800a2d4:	9a04      	ldr	r2, [sp, #16]
 800a2d6:	b9d8      	cbnz	r0, 800a310 <_vfiprintf_r+0x12c>
 800a2d8:	06d1      	lsls	r1, r2, #27
 800a2da:	bf44      	itt	mi
 800a2dc:	2320      	movmi	r3, #32
 800a2de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2e2:	0713      	lsls	r3, r2, #28
 800a2e4:	bf44      	itt	mi
 800a2e6:	232b      	movmi	r3, #43	; 0x2b
 800a2e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2ec:	f89a 3000 	ldrb.w	r3, [sl]
 800a2f0:	2b2a      	cmp	r3, #42	; 0x2a
 800a2f2:	d015      	beq.n	800a320 <_vfiprintf_r+0x13c>
 800a2f4:	4654      	mov	r4, sl
 800a2f6:	2000      	movs	r0, #0
 800a2f8:	f04f 0c0a 	mov.w	ip, #10
 800a2fc:	9a07      	ldr	r2, [sp, #28]
 800a2fe:	4621      	mov	r1, r4
 800a300:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a304:	3b30      	subs	r3, #48	; 0x30
 800a306:	2b09      	cmp	r3, #9
 800a308:	d94e      	bls.n	800a3a8 <_vfiprintf_r+0x1c4>
 800a30a:	b1b0      	cbz	r0, 800a33a <_vfiprintf_r+0x156>
 800a30c:	9207      	str	r2, [sp, #28]
 800a30e:	e014      	b.n	800a33a <_vfiprintf_r+0x156>
 800a310:	eba0 0308 	sub.w	r3, r0, r8
 800a314:	fa09 f303 	lsl.w	r3, r9, r3
 800a318:	4313      	orrs	r3, r2
 800a31a:	46a2      	mov	sl, r4
 800a31c:	9304      	str	r3, [sp, #16]
 800a31e:	e7d2      	b.n	800a2c6 <_vfiprintf_r+0xe2>
 800a320:	9b03      	ldr	r3, [sp, #12]
 800a322:	1d19      	adds	r1, r3, #4
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	9103      	str	r1, [sp, #12]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	bfbb      	ittet	lt
 800a32c:	425b      	neglt	r3, r3
 800a32e:	f042 0202 	orrlt.w	r2, r2, #2
 800a332:	9307      	strge	r3, [sp, #28]
 800a334:	9307      	strlt	r3, [sp, #28]
 800a336:	bfb8      	it	lt
 800a338:	9204      	strlt	r2, [sp, #16]
 800a33a:	7823      	ldrb	r3, [r4, #0]
 800a33c:	2b2e      	cmp	r3, #46	; 0x2e
 800a33e:	d10c      	bne.n	800a35a <_vfiprintf_r+0x176>
 800a340:	7863      	ldrb	r3, [r4, #1]
 800a342:	2b2a      	cmp	r3, #42	; 0x2a
 800a344:	d135      	bne.n	800a3b2 <_vfiprintf_r+0x1ce>
 800a346:	9b03      	ldr	r3, [sp, #12]
 800a348:	3402      	adds	r4, #2
 800a34a:	1d1a      	adds	r2, r3, #4
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	9203      	str	r2, [sp, #12]
 800a350:	2b00      	cmp	r3, #0
 800a352:	bfb8      	it	lt
 800a354:	f04f 33ff 	movlt.w	r3, #4294967295
 800a358:	9305      	str	r3, [sp, #20]
 800a35a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a440 <_vfiprintf_r+0x25c>
 800a35e:	2203      	movs	r2, #3
 800a360:	4650      	mov	r0, sl
 800a362:	7821      	ldrb	r1, [r4, #0]
 800a364:	f7ff f8b4 	bl	80094d0 <memchr>
 800a368:	b140      	cbz	r0, 800a37c <_vfiprintf_r+0x198>
 800a36a:	2340      	movs	r3, #64	; 0x40
 800a36c:	eba0 000a 	sub.w	r0, r0, sl
 800a370:	fa03 f000 	lsl.w	r0, r3, r0
 800a374:	9b04      	ldr	r3, [sp, #16]
 800a376:	3401      	adds	r4, #1
 800a378:	4303      	orrs	r3, r0
 800a37a:	9304      	str	r3, [sp, #16]
 800a37c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a380:	2206      	movs	r2, #6
 800a382:	482c      	ldr	r0, [pc, #176]	; (800a434 <_vfiprintf_r+0x250>)
 800a384:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a388:	f7ff f8a2 	bl	80094d0 <memchr>
 800a38c:	2800      	cmp	r0, #0
 800a38e:	d03f      	beq.n	800a410 <_vfiprintf_r+0x22c>
 800a390:	4b29      	ldr	r3, [pc, #164]	; (800a438 <_vfiprintf_r+0x254>)
 800a392:	bb1b      	cbnz	r3, 800a3dc <_vfiprintf_r+0x1f8>
 800a394:	9b03      	ldr	r3, [sp, #12]
 800a396:	3307      	adds	r3, #7
 800a398:	f023 0307 	bic.w	r3, r3, #7
 800a39c:	3308      	adds	r3, #8
 800a39e:	9303      	str	r3, [sp, #12]
 800a3a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3a2:	443b      	add	r3, r7
 800a3a4:	9309      	str	r3, [sp, #36]	; 0x24
 800a3a6:	e767      	b.n	800a278 <_vfiprintf_r+0x94>
 800a3a8:	460c      	mov	r4, r1
 800a3aa:	2001      	movs	r0, #1
 800a3ac:	fb0c 3202 	mla	r2, ip, r2, r3
 800a3b0:	e7a5      	b.n	800a2fe <_vfiprintf_r+0x11a>
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	f04f 0c0a 	mov.w	ip, #10
 800a3b8:	4619      	mov	r1, r3
 800a3ba:	3401      	adds	r4, #1
 800a3bc:	9305      	str	r3, [sp, #20]
 800a3be:	4620      	mov	r0, r4
 800a3c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3c4:	3a30      	subs	r2, #48	; 0x30
 800a3c6:	2a09      	cmp	r2, #9
 800a3c8:	d903      	bls.n	800a3d2 <_vfiprintf_r+0x1ee>
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d0c5      	beq.n	800a35a <_vfiprintf_r+0x176>
 800a3ce:	9105      	str	r1, [sp, #20]
 800a3d0:	e7c3      	b.n	800a35a <_vfiprintf_r+0x176>
 800a3d2:	4604      	mov	r4, r0
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a3da:	e7f0      	b.n	800a3be <_vfiprintf_r+0x1da>
 800a3dc:	ab03      	add	r3, sp, #12
 800a3de:	9300      	str	r3, [sp, #0]
 800a3e0:	462a      	mov	r2, r5
 800a3e2:	4630      	mov	r0, r6
 800a3e4:	4b15      	ldr	r3, [pc, #84]	; (800a43c <_vfiprintf_r+0x258>)
 800a3e6:	a904      	add	r1, sp, #16
 800a3e8:	f7fb ffc8 	bl	800637c <_printf_float>
 800a3ec:	4607      	mov	r7, r0
 800a3ee:	1c78      	adds	r0, r7, #1
 800a3f0:	d1d6      	bne.n	800a3a0 <_vfiprintf_r+0x1bc>
 800a3f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a3f4:	07d9      	lsls	r1, r3, #31
 800a3f6:	d405      	bmi.n	800a404 <_vfiprintf_r+0x220>
 800a3f8:	89ab      	ldrh	r3, [r5, #12]
 800a3fa:	059a      	lsls	r2, r3, #22
 800a3fc:	d402      	bmi.n	800a404 <_vfiprintf_r+0x220>
 800a3fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a400:	f7fe ffdc 	bl	80093bc <__retarget_lock_release_recursive>
 800a404:	89ab      	ldrh	r3, [r5, #12]
 800a406:	065b      	lsls	r3, r3, #25
 800a408:	f53f af12 	bmi.w	800a230 <_vfiprintf_r+0x4c>
 800a40c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a40e:	e711      	b.n	800a234 <_vfiprintf_r+0x50>
 800a410:	ab03      	add	r3, sp, #12
 800a412:	9300      	str	r3, [sp, #0]
 800a414:	462a      	mov	r2, r5
 800a416:	4630      	mov	r0, r6
 800a418:	4b08      	ldr	r3, [pc, #32]	; (800a43c <_vfiprintf_r+0x258>)
 800a41a:	a904      	add	r1, sp, #16
 800a41c:	f7fc fa4a 	bl	80068b4 <_printf_i>
 800a420:	e7e4      	b.n	800a3ec <_vfiprintf_r+0x208>
 800a422:	bf00      	nop
 800a424:	0800a954 	.word	0x0800a954
 800a428:	0800a974 	.word	0x0800a974
 800a42c:	0800a934 	.word	0x0800a934
 800a430:	0800ab74 	.word	0x0800ab74
 800a434:	0800ab7e 	.word	0x0800ab7e
 800a438:	0800637d 	.word	0x0800637d
 800a43c:	0800a1bf 	.word	0x0800a1bf
 800a440:	0800ab7a 	.word	0x0800ab7a

0800a444 <_read_r>:
 800a444:	b538      	push	{r3, r4, r5, lr}
 800a446:	4604      	mov	r4, r0
 800a448:	4608      	mov	r0, r1
 800a44a:	4611      	mov	r1, r2
 800a44c:	2200      	movs	r2, #0
 800a44e:	4d05      	ldr	r5, [pc, #20]	; (800a464 <_read_r+0x20>)
 800a450:	602a      	str	r2, [r5, #0]
 800a452:	461a      	mov	r2, r3
 800a454:	f7f8 fc7f 	bl	8002d56 <_read>
 800a458:	1c43      	adds	r3, r0, #1
 800a45a:	d102      	bne.n	800a462 <_read_r+0x1e>
 800a45c:	682b      	ldr	r3, [r5, #0]
 800a45e:	b103      	cbz	r3, 800a462 <_read_r+0x1e>
 800a460:	6023      	str	r3, [r4, #0]
 800a462:	bd38      	pop	{r3, r4, r5, pc}
 800a464:	20000554 	.word	0x20000554

0800a468 <nan>:
 800a468:	2000      	movs	r0, #0
 800a46a:	4901      	ldr	r1, [pc, #4]	; (800a470 <nan+0x8>)
 800a46c:	4770      	bx	lr
 800a46e:	bf00      	nop
 800a470:	7ff80000 	.word	0x7ff80000

0800a474 <__ascii_wctomb>:
 800a474:	4603      	mov	r3, r0
 800a476:	4608      	mov	r0, r1
 800a478:	b141      	cbz	r1, 800a48c <__ascii_wctomb+0x18>
 800a47a:	2aff      	cmp	r2, #255	; 0xff
 800a47c:	d904      	bls.n	800a488 <__ascii_wctomb+0x14>
 800a47e:	228a      	movs	r2, #138	; 0x8a
 800a480:	f04f 30ff 	mov.w	r0, #4294967295
 800a484:	601a      	str	r2, [r3, #0]
 800a486:	4770      	bx	lr
 800a488:	2001      	movs	r0, #1
 800a48a:	700a      	strb	r2, [r1, #0]
 800a48c:	4770      	bx	lr
	...

0800a490 <__assert_func>:
 800a490:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a492:	4614      	mov	r4, r2
 800a494:	461a      	mov	r2, r3
 800a496:	4b09      	ldr	r3, [pc, #36]	; (800a4bc <__assert_func+0x2c>)
 800a498:	4605      	mov	r5, r0
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	68d8      	ldr	r0, [r3, #12]
 800a49e:	b14c      	cbz	r4, 800a4b4 <__assert_func+0x24>
 800a4a0:	4b07      	ldr	r3, [pc, #28]	; (800a4c0 <__assert_func+0x30>)
 800a4a2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a4a6:	9100      	str	r1, [sp, #0]
 800a4a8:	462b      	mov	r3, r5
 800a4aa:	4906      	ldr	r1, [pc, #24]	; (800a4c4 <__assert_func+0x34>)
 800a4ac:	f000 f80e 	bl	800a4cc <fiprintf>
 800a4b0:	f000 f862 	bl	800a578 <abort>
 800a4b4:	4b04      	ldr	r3, [pc, #16]	; (800a4c8 <__assert_func+0x38>)
 800a4b6:	461c      	mov	r4, r3
 800a4b8:	e7f3      	b.n	800a4a2 <__assert_func+0x12>
 800a4ba:	bf00      	nop
 800a4bc:	20000018 	.word	0x20000018
 800a4c0:	0800ab85 	.word	0x0800ab85
 800a4c4:	0800ab92 	.word	0x0800ab92
 800a4c8:	0800abc0 	.word	0x0800abc0

0800a4cc <fiprintf>:
 800a4cc:	b40e      	push	{r1, r2, r3}
 800a4ce:	b503      	push	{r0, r1, lr}
 800a4d0:	4601      	mov	r1, r0
 800a4d2:	ab03      	add	r3, sp, #12
 800a4d4:	4805      	ldr	r0, [pc, #20]	; (800a4ec <fiprintf+0x20>)
 800a4d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4da:	6800      	ldr	r0, [r0, #0]
 800a4dc:	9301      	str	r3, [sp, #4]
 800a4de:	f7ff fe81 	bl	800a1e4 <_vfiprintf_r>
 800a4e2:	b002      	add	sp, #8
 800a4e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a4e8:	b003      	add	sp, #12
 800a4ea:	4770      	bx	lr
 800a4ec:	20000018 	.word	0x20000018

0800a4f0 <_fstat_r>:
 800a4f0:	b538      	push	{r3, r4, r5, lr}
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	4d06      	ldr	r5, [pc, #24]	; (800a510 <_fstat_r+0x20>)
 800a4f6:	4604      	mov	r4, r0
 800a4f8:	4608      	mov	r0, r1
 800a4fa:	4611      	mov	r1, r2
 800a4fc:	602b      	str	r3, [r5, #0]
 800a4fe:	f7f8 fc6e 	bl	8002dde <_fstat>
 800a502:	1c43      	adds	r3, r0, #1
 800a504:	d102      	bne.n	800a50c <_fstat_r+0x1c>
 800a506:	682b      	ldr	r3, [r5, #0]
 800a508:	b103      	cbz	r3, 800a50c <_fstat_r+0x1c>
 800a50a:	6023      	str	r3, [r4, #0]
 800a50c:	bd38      	pop	{r3, r4, r5, pc}
 800a50e:	bf00      	nop
 800a510:	20000554 	.word	0x20000554

0800a514 <_isatty_r>:
 800a514:	b538      	push	{r3, r4, r5, lr}
 800a516:	2300      	movs	r3, #0
 800a518:	4d05      	ldr	r5, [pc, #20]	; (800a530 <_isatty_r+0x1c>)
 800a51a:	4604      	mov	r4, r0
 800a51c:	4608      	mov	r0, r1
 800a51e:	602b      	str	r3, [r5, #0]
 800a520:	f7f8 fc6c 	bl	8002dfc <_isatty>
 800a524:	1c43      	adds	r3, r0, #1
 800a526:	d102      	bne.n	800a52e <_isatty_r+0x1a>
 800a528:	682b      	ldr	r3, [r5, #0]
 800a52a:	b103      	cbz	r3, 800a52e <_isatty_r+0x1a>
 800a52c:	6023      	str	r3, [r4, #0]
 800a52e:	bd38      	pop	{r3, r4, r5, pc}
 800a530:	20000554 	.word	0x20000554

0800a534 <memmove>:
 800a534:	4288      	cmp	r0, r1
 800a536:	b510      	push	{r4, lr}
 800a538:	eb01 0402 	add.w	r4, r1, r2
 800a53c:	d902      	bls.n	800a544 <memmove+0x10>
 800a53e:	4284      	cmp	r4, r0
 800a540:	4623      	mov	r3, r4
 800a542:	d807      	bhi.n	800a554 <memmove+0x20>
 800a544:	1e43      	subs	r3, r0, #1
 800a546:	42a1      	cmp	r1, r4
 800a548:	d008      	beq.n	800a55c <memmove+0x28>
 800a54a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a54e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a552:	e7f8      	b.n	800a546 <memmove+0x12>
 800a554:	4601      	mov	r1, r0
 800a556:	4402      	add	r2, r0
 800a558:	428a      	cmp	r2, r1
 800a55a:	d100      	bne.n	800a55e <memmove+0x2a>
 800a55c:	bd10      	pop	{r4, pc}
 800a55e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a562:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a566:	e7f7      	b.n	800a558 <memmove+0x24>

0800a568 <_malloc_usable_size_r>:
 800a568:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a56c:	1f18      	subs	r0, r3, #4
 800a56e:	2b00      	cmp	r3, #0
 800a570:	bfbc      	itt	lt
 800a572:	580b      	ldrlt	r3, [r1, r0]
 800a574:	18c0      	addlt	r0, r0, r3
 800a576:	4770      	bx	lr

0800a578 <abort>:
 800a578:	2006      	movs	r0, #6
 800a57a:	b508      	push	{r3, lr}
 800a57c:	f000 f82c 	bl	800a5d8 <raise>
 800a580:	2001      	movs	r0, #1
 800a582:	f7f8 fbde 	bl	8002d42 <_exit>

0800a586 <_raise_r>:
 800a586:	291f      	cmp	r1, #31
 800a588:	b538      	push	{r3, r4, r5, lr}
 800a58a:	4604      	mov	r4, r0
 800a58c:	460d      	mov	r5, r1
 800a58e:	d904      	bls.n	800a59a <_raise_r+0x14>
 800a590:	2316      	movs	r3, #22
 800a592:	6003      	str	r3, [r0, #0]
 800a594:	f04f 30ff 	mov.w	r0, #4294967295
 800a598:	bd38      	pop	{r3, r4, r5, pc}
 800a59a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a59c:	b112      	cbz	r2, 800a5a4 <_raise_r+0x1e>
 800a59e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a5a2:	b94b      	cbnz	r3, 800a5b8 <_raise_r+0x32>
 800a5a4:	4620      	mov	r0, r4
 800a5a6:	f000 f831 	bl	800a60c <_getpid_r>
 800a5aa:	462a      	mov	r2, r5
 800a5ac:	4601      	mov	r1, r0
 800a5ae:	4620      	mov	r0, r4
 800a5b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a5b4:	f000 b818 	b.w	800a5e8 <_kill_r>
 800a5b8:	2b01      	cmp	r3, #1
 800a5ba:	d00a      	beq.n	800a5d2 <_raise_r+0x4c>
 800a5bc:	1c59      	adds	r1, r3, #1
 800a5be:	d103      	bne.n	800a5c8 <_raise_r+0x42>
 800a5c0:	2316      	movs	r3, #22
 800a5c2:	6003      	str	r3, [r0, #0]
 800a5c4:	2001      	movs	r0, #1
 800a5c6:	e7e7      	b.n	800a598 <_raise_r+0x12>
 800a5c8:	2400      	movs	r4, #0
 800a5ca:	4628      	mov	r0, r5
 800a5cc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a5d0:	4798      	blx	r3
 800a5d2:	2000      	movs	r0, #0
 800a5d4:	e7e0      	b.n	800a598 <_raise_r+0x12>
	...

0800a5d8 <raise>:
 800a5d8:	4b02      	ldr	r3, [pc, #8]	; (800a5e4 <raise+0xc>)
 800a5da:	4601      	mov	r1, r0
 800a5dc:	6818      	ldr	r0, [r3, #0]
 800a5de:	f7ff bfd2 	b.w	800a586 <_raise_r>
 800a5e2:	bf00      	nop
 800a5e4:	20000018 	.word	0x20000018

0800a5e8 <_kill_r>:
 800a5e8:	b538      	push	{r3, r4, r5, lr}
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	4d06      	ldr	r5, [pc, #24]	; (800a608 <_kill_r+0x20>)
 800a5ee:	4604      	mov	r4, r0
 800a5f0:	4608      	mov	r0, r1
 800a5f2:	4611      	mov	r1, r2
 800a5f4:	602b      	str	r3, [r5, #0]
 800a5f6:	f7f8 fb94 	bl	8002d22 <_kill>
 800a5fa:	1c43      	adds	r3, r0, #1
 800a5fc:	d102      	bne.n	800a604 <_kill_r+0x1c>
 800a5fe:	682b      	ldr	r3, [r5, #0]
 800a600:	b103      	cbz	r3, 800a604 <_kill_r+0x1c>
 800a602:	6023      	str	r3, [r4, #0]
 800a604:	bd38      	pop	{r3, r4, r5, pc}
 800a606:	bf00      	nop
 800a608:	20000554 	.word	0x20000554

0800a60c <_getpid_r>:
 800a60c:	f7f8 bb82 	b.w	8002d14 <_getpid>

0800a610 <_init>:
 800a610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a612:	bf00      	nop
 800a614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a616:	bc08      	pop	{r3}
 800a618:	469e      	mov	lr, r3
 800a61a:	4770      	bx	lr

0800a61c <_fini>:
 800a61c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a61e:	bf00      	nop
 800a620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a622:	bc08      	pop	{r3}
 800a624:	469e      	mov	lr, r3
 800a626:	4770      	bx	lr
