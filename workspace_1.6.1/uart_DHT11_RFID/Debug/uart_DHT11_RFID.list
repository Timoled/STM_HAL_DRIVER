
uart_DHT11_RFID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093c4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ec  080094d8  080094d8  000194d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099c4  080099c4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  080099c4  080099c4  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080099c4  080099c4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099c4  080099c4  000199c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099c8  080099c8  000199c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080099cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  200001e0  08009bac  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000398  08009bac  00020398  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cc11  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000244e  00000000  00000000  0002ce1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b90  00000000  00000000  0002f268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000aa8  00000000  00000000  0002fdf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019018  00000000  00000000  000308a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cc8b  00000000  00000000  000498b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b2ae  00000000  00000000  00056543  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e17f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004380  00000000  00000000  000e1844  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	080094bc 	.word	0x080094bc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	080094bc 	.word	0x080094bc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_d2lz>:
 8000d84:	b538      	push	{r3, r4, r5, lr}
 8000d86:	460c      	mov	r4, r1
 8000d88:	4605      	mov	r5, r0
 8000d8a:	4621      	mov	r1, r4
 8000d8c:	4628      	mov	r0, r5
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2300      	movs	r3, #0
 8000d92:	f7ff fe13 	bl	80009bc <__aeabi_dcmplt>
 8000d96:	b928      	cbnz	r0, 8000da4 <__aeabi_d2lz+0x20>
 8000d98:	4628      	mov	r0, r5
 8000d9a:	4621      	mov	r1, r4
 8000d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000da0:	f000 b80a 	b.w	8000db8 <__aeabi_d2ulz>
 8000da4:	4628      	mov	r0, r5
 8000da6:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000daa:	f000 f805 	bl	8000db8 <__aeabi_d2ulz>
 8000dae:	4240      	negs	r0, r0
 8000db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db4:	bd38      	pop	{r3, r4, r5, pc}
 8000db6:	bf00      	nop

08000db8 <__aeabi_d2ulz>:
 8000db8:	b5d0      	push	{r4, r6, r7, lr}
 8000dba:	2200      	movs	r2, #0
 8000dbc:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <__aeabi_d2ulz+0x34>)
 8000dbe:	4606      	mov	r6, r0
 8000dc0:	460f      	mov	r7, r1
 8000dc2:	f7ff fb89 	bl	80004d8 <__aeabi_dmul>
 8000dc6:	f7ff fe5f 	bl	8000a88 <__aeabi_d2uiz>
 8000dca:	4604      	mov	r4, r0
 8000dcc:	f7ff fb0a 	bl	80003e4 <__aeabi_ui2d>
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <__aeabi_d2ulz+0x38>)
 8000dd4:	f7ff fb80 	bl	80004d8 <__aeabi_dmul>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4630      	mov	r0, r6
 8000dde:	4639      	mov	r1, r7
 8000de0:	f7ff f9c2 	bl	8000168 <__aeabi_dsub>
 8000de4:	f7ff fe50 	bl	8000a88 <__aeabi_d2uiz>
 8000de8:	4621      	mov	r1, r4
 8000dea:	bdd0      	pop	{r4, r6, r7, pc}
 8000dec:	3df00000 	.word	0x3df00000
 8000df0:	41f00000 	.word	0x41f00000

08000df4 <DWT_Delay_Init>:
uint16_t SUM; uint8_t Presence = 0;

#include "DHT.h"

uint32_t DWT_Delay_Init(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000df8:	4b14      	ldr	r3, [pc, #80]	; (8000e4c <DWT_Delay_Init+0x58>)
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	4a13      	ldr	r2, [pc, #76]	; (8000e4c <DWT_Delay_Init+0x58>)
 8000dfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000e02:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000e04:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <DWT_Delay_Init+0x58>)
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	4a10      	ldr	r2, [pc, #64]	; (8000e4c <DWT_Delay_Init+0x58>)
 8000e0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e0e:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000e10:	4b0f      	ldr	r3, [pc, #60]	; (8000e50 <DWT_Delay_Init+0x5c>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a0e      	ldr	r2, [pc, #56]	; (8000e50 <DWT_Delay_Init+0x5c>)
 8000e16:	f023 0301 	bic.w	r3, r3, #1
 8000e1a:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <DWT_Delay_Init+0x5c>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a0b      	ldr	r2, [pc, #44]	; (8000e50 <DWT_Delay_Init+0x5c>)
 8000e22:	f043 0301 	orr.w	r3, r3, #1
 8000e26:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000e28:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <DWT_Delay_Init+0x5c>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000e2e:	bf00      	nop
     __ASM volatile ("NOP");
 8000e30:	bf00      	nop
  __ASM volatile ("NOP");
 8000e32:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000e34:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <DWT_Delay_Init+0x5c>)
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	e000      	b.n	8000e42 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000e40:	2301      	movs	r3, #1
  }
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bc80      	pop	{r7}
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	e000edf0 	.word	0xe000edf0
 8000e50:	e0001000 	.word	0xe0001000

08000e54 <delay>:

__STATIC_INLINE void delay(volatile uint32_t microseconds)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000e5c:	4b0d      	ldr	r3, [pc, #52]	; (8000e94 <delay+0x40>)
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000e62:	f002 fde7 	bl	8003a34 <HAL_RCC_GetHCLKFreq>
 8000e66:	4603      	mov	r3, r0
 8000e68:	4a0b      	ldr	r2, [pc, #44]	; (8000e98 <delay+0x44>)
 8000e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e6e:	0c9b      	lsrs	r3, r3, #18
 8000e70:	687a      	ldr	r2, [r7, #4]
 8000e72:	fb02 f303 	mul.w	r3, r2, r3
 8000e76:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000e78:	bf00      	nop
 8000e7a:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <delay+0x40>)
 8000e7c:	685a      	ldr	r2, [r3, #4]
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	1ad2      	subs	r2, r2, r3
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d3f8      	bcc.n	8000e7a <delay+0x26>
}
 8000e88:	bf00      	nop
 8000e8a:	bf00      	nop
 8000e8c:	3710      	adds	r7, #16
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	e0001000 	.word	0xe0001000
 8000e98:	431bde83 	.word	0x431bde83

08000e9c <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea8:	f107 0308 	add.w	r3, r7, #8
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000eb6:	887b      	ldrh	r3, [r7, #2]
 8000eb8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000ec2:	f107 0308 	add.w	r3, r7, #8
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f002 f835 	bl	8002f38 <HAL_GPIO_Init>
}
 8000ece:	bf00      	nop
 8000ed0:	3718      	adds	r7, #24
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b086      	sub	sp, #24
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
 8000ede:	460b      	mov	r3, r1
 8000ee0:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee2:	f107 0308 	add.w	r3, r7, #8
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	609a      	str	r2, [r3, #8]
 8000eee:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000ef0:	887b      	ldrh	r3, [r7, #2]
 8000ef2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000efc:	f107 0308 	add.w	r3, r7, #8
 8000f00:	4619      	mov	r1, r3
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f002 f818 	bl	8002f38 <HAL_GPIO_Init>
}
 8000f08:	bf00      	nop
 8000f0a:	3718      	adds	r7, #24
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <DHT_Start>:


void DHT_Start (void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 8000f14:	f7ff ff6e 	bl	8000df4 <DWT_Delay_Init>
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 8000f18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f1c:	480e      	ldr	r0, [pc, #56]	; (8000f58 <DHT_Start+0x48>)
 8000f1e:	f7ff ffbd 	bl	8000e9c <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);   // pull the pin low
 8000f22:	2200      	movs	r2, #0
 8000f24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f28:	480b      	ldr	r0, [pc, #44]	; (8000f58 <DHT_Start+0x48>)
 8000f2a:	f002 f9a0 	bl	800326e <HAL_GPIO_WritePin>

#if defined(TYPE_DHT11)
	delay (18000);   // wait for 18ms
 8000f2e:	f244 6050 	movw	r0, #18000	; 0x4650
 8000f32:	f7ff ff8f 	bl	8000e54 <delay>

#if defined(TYPE_DHT22)
	delay (1200);  // >1ms delay
#endif

    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 1);   // pull the pin high
 8000f36:	2201      	movs	r2, #1
 8000f38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f3c:	4806      	ldr	r0, [pc, #24]	; (8000f58 <DHT_Start+0x48>)
 8000f3e:	f002 f996 	bl	800326e <HAL_GPIO_WritePin>
    delay (20);   // wait for 30us
 8000f42:	2014      	movs	r0, #20
 8000f44:	f7ff ff86 	bl	8000e54 <delay>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 8000f48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f4c:	4802      	ldr	r0, [pc, #8]	; (8000f58 <DHT_Start+0x48>)
 8000f4e:	f7ff ffc2 	bl	8000ed6 <Set_Pin_Input>
}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40010c00 	.word	0x40010c00

08000f5c <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	71fb      	strb	r3, [r7, #7]
	delay (40);
 8000f66:	2028      	movs	r0, #40	; 0x28
 8000f68:	f7ff ff74 	bl	8000e54 <delay>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 8000f6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f70:	4811      	ldr	r0, [pc, #68]	; (8000fb8 <DHT_Check_Response+0x5c>)
 8000f72:	f002 f965 	bl	8003240 <HAL_GPIO_ReadPin>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d10f      	bne.n	8000f9c <DHT_Check_Response+0x40>
	{
		delay (80);
 8000f7c:	2050      	movs	r0, #80	; 0x50
 8000f7e:	f7ff ff69 	bl	8000e54 <delay>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
 8000f82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f86:	480c      	ldr	r0, [pc, #48]	; (8000fb8 <DHT_Check_Response+0x5c>)
 8000f88:	f002 f95a 	bl	8003240 <HAL_GPIO_ReadPin>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d002      	beq.n	8000f98 <DHT_Check_Response+0x3c>
 8000f92:	2301      	movs	r3, #1
 8000f94:	71fb      	strb	r3, [r7, #7]
 8000f96:	e001      	b.n	8000f9c <DHT_Check_Response+0x40>
		else Response = -1;
 8000f98:	23ff      	movs	r3, #255	; 0xff
 8000f9a:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 8000f9c:	bf00      	nop
 8000f9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fa2:	4805      	ldr	r0, [pc, #20]	; (8000fb8 <DHT_Check_Response+0x5c>)
 8000fa4:	f002 f94c 	bl	8003240 <HAL_GPIO_ReadPin>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d1f7      	bne.n	8000f9e <DHT_Check_Response+0x42>

	return Response;
 8000fae:	79fb      	ldrb	r3, [r7, #7]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40010c00 	.word	0x40010c00

08000fbc <DHT_Read>:

uint8_t DHT_Read (void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	71bb      	strb	r3, [r7, #6]
 8000fc6:	e03a      	b.n	800103e <DHT_Read+0x82>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 8000fc8:	bf00      	nop
 8000fca:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fce:	4820      	ldr	r0, [pc, #128]	; (8001050 <DHT_Read+0x94>)
 8000fd0:	f002 f936 	bl	8003240 <HAL_GPIO_ReadPin>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d0f7      	beq.n	8000fca <DHT_Read+0xe>
		delay (40);   // wait for 40 us
 8000fda:	2028      	movs	r0, #40	; 0x28
 8000fdc:	f7ff ff3a 	bl	8000e54 <delay>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 8000fe0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fe4:	481a      	ldr	r0, [pc, #104]	; (8001050 <DHT_Read+0x94>)
 8000fe6:	f002 f92b 	bl	8003240 <HAL_GPIO_ReadPin>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d10e      	bne.n	800100e <DHT_Read+0x52>
		{
			i&= ~(1<<(7-j));   // write 0
 8000ff0:	79bb      	ldrb	r3, [r7, #6]
 8000ff2:	f1c3 0307 	rsb	r3, r3, #7
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	b25b      	sxtb	r3, r3
 8000ffe:	43db      	mvns	r3, r3
 8001000:	b25a      	sxtb	r2, r3
 8001002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001006:	4013      	ands	r3, r2
 8001008:	b25b      	sxtb	r3, r3
 800100a:	71fb      	strb	r3, [r7, #7]
 800100c:	e00b      	b.n	8001026 <DHT_Read+0x6a>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 800100e:	79bb      	ldrb	r3, [r7, #6]
 8001010:	f1c3 0307 	rsb	r3, r3, #7
 8001014:	2201      	movs	r2, #1
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	b25a      	sxtb	r2, r3
 800101c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001020:	4313      	orrs	r3, r2
 8001022:	b25b      	sxtb	r3, r3
 8001024:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 8001026:	bf00      	nop
 8001028:	f44f 7100 	mov.w	r1, #512	; 0x200
 800102c:	4808      	ldr	r0, [pc, #32]	; (8001050 <DHT_Read+0x94>)
 800102e:	f002 f907 	bl	8003240 <HAL_GPIO_ReadPin>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d1f7      	bne.n	8001028 <DHT_Read+0x6c>
	for (j=0;j<8;j++)
 8001038:	79bb      	ldrb	r3, [r7, #6]
 800103a:	3301      	adds	r3, #1
 800103c:	71bb      	strb	r3, [r7, #6]
 800103e:	79bb      	ldrb	r3, [r7, #6]
 8001040:	2b07      	cmp	r3, #7
 8001042:	d9c1      	bls.n	8000fc8 <DHT_Read+0xc>
	}
	return i;
 8001044:	79fb      	ldrb	r3, [r7, #7]
}
 8001046:	4618      	mov	r0, r3
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40010c00 	.word	0x40010c00

08001054 <DHT_GetData>:



void DHT_GetData (DHT_DataTypedef *DHT_Data)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
    DHT_Start ();
 800105c:	f7ff ff58 	bl	8000f10 <DHT_Start>
	Presence = DHT_Check_Response ();
 8001060:	f7ff ff7c 	bl	8000f5c <DHT_Check_Response>
 8001064:	4603      	mov	r3, r0
 8001066:	461a      	mov	r2, r3
 8001068:	4b22      	ldr	r3, [pc, #136]	; (80010f4 <DHT_GetData+0xa0>)
 800106a:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT_Read ();
 800106c:	f7ff ffa6 	bl	8000fbc <DHT_Read>
 8001070:	4603      	mov	r3, r0
 8001072:	461a      	mov	r2, r3
 8001074:	4b20      	ldr	r3, [pc, #128]	; (80010f8 <DHT_GetData+0xa4>)
 8001076:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 8001078:	f7ff ffa0 	bl	8000fbc <DHT_Read>
 800107c:	4603      	mov	r3, r0
 800107e:	461a      	mov	r2, r3
 8001080:	4b1e      	ldr	r3, [pc, #120]	; (80010fc <DHT_GetData+0xa8>)
 8001082:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 8001084:	f7ff ff9a 	bl	8000fbc <DHT_Read>
 8001088:	4603      	mov	r3, r0
 800108a:	461a      	mov	r2, r3
 800108c:	4b1c      	ldr	r3, [pc, #112]	; (8001100 <DHT_GetData+0xac>)
 800108e:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 8001090:	f7ff ff94 	bl	8000fbc <DHT_Read>
 8001094:	4603      	mov	r3, r0
 8001096:	461a      	mov	r2, r3
 8001098:	4b1a      	ldr	r3, [pc, #104]	; (8001104 <DHT_GetData+0xb0>)
 800109a:	701a      	strb	r2, [r3, #0]
	SUM = DHT_Read();
 800109c:	f7ff ff8e 	bl	8000fbc <DHT_Read>
 80010a0:	4603      	mov	r3, r0
 80010a2:	b29a      	uxth	r2, r3
 80010a4:	4b18      	ldr	r3, [pc, #96]	; (8001108 <DHT_GetData+0xb4>)
 80010a6:	801a      	strh	r2, [r3, #0]

	if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 80010a8:	4b17      	ldr	r3, [pc, #92]	; (8001108 <DHT_GetData+0xb4>)
 80010aa:	881b      	ldrh	r3, [r3, #0]
 80010ac:	4619      	mov	r1, r3
 80010ae:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <DHT_GetData+0xa4>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	461a      	mov	r2, r3
 80010b4:	4b11      	ldr	r3, [pc, #68]	; (80010fc <DHT_GetData+0xa8>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	4413      	add	r3, r2
 80010ba:	4a11      	ldr	r2, [pc, #68]	; (8001100 <DHT_GetData+0xac>)
 80010bc:	7812      	ldrb	r2, [r2, #0]
 80010be:	4413      	add	r3, r2
 80010c0:	4a10      	ldr	r2, [pc, #64]	; (8001104 <DHT_GetData+0xb0>)
 80010c2:	7812      	ldrb	r2, [r2, #0]
 80010c4:	4413      	add	r3, r2
 80010c6:	4299      	cmp	r1, r3
 80010c8:	d10f      	bne.n	80010ea <DHT_GetData+0x96>
	{
		#if defined(TYPE_DHT11)
			DHT_Data->Temperature = Temp_byte1;
 80010ca:	4b0d      	ldr	r3, [pc, #52]	; (8001100 <DHT_GetData+0xac>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff fe00 	bl	8000cd4 <__aeabi_ui2f>
 80010d4:	4602      	mov	r2, r0
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	601a      	str	r2, [r3, #0]
			DHT_Data->Humidity = Rh_byte1;
 80010da:	4b07      	ldr	r3, [pc, #28]	; (80010f8 <DHT_GetData+0xa4>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff fdf8 	bl	8000cd4 <__aeabi_ui2f>
 80010e4:	4602      	mov	r2, r0
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	605a      	str	r2, [r3, #4]
		#if defined(TYPE_DHT22)
			DHT_Data->Temperature = ((Temp_byte1<<8)|Temp_byte2);
			DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2);
		#endif
	}
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	200001fc 	.word	0x200001fc
 80010f8:	2000020c 	.word	0x2000020c
 80010fc:	2000020e 	.word	0x2000020e
 8001100:	2000020d 	.word	0x2000020d
 8001104:	20000212 	.word	0x20000212
 8001108:	20000210 	.word	0x20000210

0800110c <HAL_UART_RxCpltCallback>:
char sendo[20] ;
char rec,null;
char buffer[20];
uint8_t i=0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart1.Instance)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	4b19      	ldr	r3, [pc, #100]	; (8001180 <HAL_UART_RxCpltCallback+0x74>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	429a      	cmp	r2, r3
 800111e:	d12b      	bne.n	8001178 <HAL_UART_RxCpltCallback+0x6c>
		{
		if(rec!=13)
 8001120:	4b18      	ldr	r3, [pc, #96]	; (8001184 <HAL_UART_RxCpltCallback+0x78>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b0d      	cmp	r3, #13
 8001126:	d00b      	beq.n	8001140 <HAL_UART_RxCpltCallback+0x34>
		{
			buffer[i++] = rec;
 8001128:	4b17      	ldr	r3, [pc, #92]	; (8001188 <HAL_UART_RxCpltCallback+0x7c>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	1c5a      	adds	r2, r3, #1
 800112e:	b2d1      	uxtb	r1, r2
 8001130:	4a15      	ldr	r2, [pc, #84]	; (8001188 <HAL_UART_RxCpltCallback+0x7c>)
 8001132:	7011      	strb	r1, [r2, #0]
 8001134:	461a      	mov	r2, r3
 8001136:	4b13      	ldr	r3, [pc, #76]	; (8001184 <HAL_UART_RxCpltCallback+0x78>)
 8001138:	7819      	ldrb	r1, [r3, #0]
 800113a:	4b14      	ldr	r3, [pc, #80]	; (800118c <HAL_UART_RxCpltCallback+0x80>)
 800113c:	5499      	strb	r1, [r3, r2]
 800113e:	e016      	b.n	800116e <HAL_UART_RxCpltCallback+0x62>
		}

		else if(rec == 13){
 8001140:	4b10      	ldr	r3, [pc, #64]	; (8001184 <HAL_UART_RxCpltCallback+0x78>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b0d      	cmp	r3, #13
 8001146:	d112      	bne.n	800116e <HAL_UART_RxCpltCallback+0x62>
			i = 0;
 8001148:	4b0f      	ldr	r3, [pc, #60]	; (8001188 <HAL_UART_RxCpltCallback+0x7c>)
 800114a:	2200      	movs	r2, #0
 800114c:	701a      	strb	r2, [r3, #0]
			for(int cnt = 0; cnt < sizeof(buffer);cnt++)
 800114e:	2300      	movs	r3, #0
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	e009      	b.n	8001168 <HAL_UART_RxCpltCallback+0x5c>
			{
				buffer[cnt]= null;
 8001154:	4b0e      	ldr	r3, [pc, #56]	; (8001190 <HAL_UART_RxCpltCallback+0x84>)
 8001156:	7819      	ldrb	r1, [r3, #0]
 8001158:	4a0c      	ldr	r2, [pc, #48]	; (800118c <HAL_UART_RxCpltCallback+0x80>)
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	4413      	add	r3, r2
 800115e:	460a      	mov	r2, r1
 8001160:	701a      	strb	r2, [r3, #0]
			for(int cnt = 0; cnt < sizeof(buffer);cnt++)
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	3301      	adds	r3, #1
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	2b13      	cmp	r3, #19
 800116c:	d9f2      	bls.n	8001154 <HAL_UART_RxCpltCallback+0x48>
			}

		}
		HAL_UART_Receive_IT(&huart1,(uint8_t*)&rec,1);
 800116e:	2201      	movs	r2, #1
 8001170:	4904      	ldr	r1, [pc, #16]	; (8001184 <HAL_UART_RxCpltCallback+0x78>)
 8001172:	4803      	ldr	r0, [pc, #12]	; (8001180 <HAL_UART_RxCpltCallback+0x74>)
 8001174:	f003 f90f 	bl	8004396 <HAL_UART_Receive_IT>

	}
}
 8001178:	bf00      	nop
 800117a:	3710      	adds	r7, #16
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000268 	.word	0x20000268
 8001184:	20000378 	.word	0x20000378
 8001188:	200001fd 	.word	0x200001fd
 800118c:	200002b4 	.word	0x200002b4
 8001190:	2000022c 	.word	0x2000022c

08001194 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001198:	f000 fed0 	bl	8001f3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800119c:	f000 f898 	bl	80012d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011a0:	f000 f9ae 	bl	8001500 <MX_GPIO_Init>
  MX_DMA_Init();
 80011a4:	f000 f98e 	bl	80014c4 <MX_DMA_Init>
  MX_SPI1_Init();
 80011a8:	f000 f92c 	bl	8001404 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80011ac:	f000 f960 	bl	8001470 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80011b0:	f000 f8ea 	bl	8001388 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  MFRC522_Init();
 80011b4:	f000 fc29 	bl	8001a0a <MFRC522_Init>
  HAL_UART_Receive_IT(&huart1,(uint8_t*)&rec,1);
 80011b8:	2201      	movs	r2, #1
 80011ba:	4938      	ldr	r1, [pc, #224]	; (800129c <main+0x108>)
 80011bc:	4838      	ldr	r0, [pc, #224]	; (80012a0 <main+0x10c>)
 80011be:	f003 f8ea 	bl	8004396 <HAL_UART_Receive_IT>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)&adc, 1);
 80011c2:	2201      	movs	r2, #1
 80011c4:	4937      	ldr	r1, [pc, #220]	; (80012a4 <main+0x110>)
 80011c6:	4838      	ldr	r0, [pc, #224]	; (80012a8 <main+0x114>)
 80011c8:	f001 f816 	bl	80021f8 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		DHT_GetData(&DHT11_Data);
 80011cc:	4837      	ldr	r0, [pc, #220]	; (80012ac <main+0x118>)
 80011ce:	f7ff ff41 	bl	8001054 <DHT_GetData>
		Temperature = DHT11_Data.Temperature;
 80011d2:	4b36      	ldr	r3, [pc, #216]	; (80012ac <main+0x118>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a36      	ldr	r2, [pc, #216]	; (80012b0 <main+0x11c>)
 80011d8:	6013      	str	r3, [r2, #0]
		Humidity = DHT11_Data.Humidity;
 80011da:	4b34      	ldr	r3, [pc, #208]	; (80012ac <main+0x118>)
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	4a35      	ldr	r2, [pc, #212]	; (80012b4 <main+0x120>)
 80011e0:	6013      	str	r3, [r2, #0]
		sprintf(sendo,"NHIETDO%0.2f",Temperature);
 80011e2:	4b33      	ldr	r3, [pc, #204]	; (80012b0 <main+0x11c>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff f91e 	bl	8000428 <__aeabi_f2d>
 80011ec:	4602      	mov	r2, r0
 80011ee:	460b      	mov	r3, r1
 80011f0:	4931      	ldr	r1, [pc, #196]	; (80012b8 <main+0x124>)
 80011f2:	4832      	ldr	r0, [pc, #200]	; (80012bc <main+0x128>)
 80011f4:	f004 fbd0 	bl	8005998 <siprintf>
		HAL_Delay(500);
 80011f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011fc:	f000 ff00 	bl	8002000 <HAL_Delay>
		HAL_UART_Transmit(&huart1,(uint8_t *) sendo,sizeof(sendo),1000);
 8001200:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001204:	2214      	movs	r2, #20
 8001206:	492d      	ldr	r1, [pc, #180]	; (80012bc <main+0x128>)
 8001208:	4825      	ldr	r0, [pc, #148]	; (80012a0 <main+0x10c>)
 800120a:	f003 f832 	bl	8004272 <HAL_UART_Transmit>
		HAL_Delay(500);
 800120e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001212:	f000 fef5 	bl	8002000 <HAL_Delay>
		status = MFRC522_Request(PICC_REQIDL, str);	// Find cards, return card type
 8001216:	492a      	ldr	r1, [pc, #168]	; (80012c0 <main+0x12c>)
 8001218:	2026      	movs	r0, #38	; 0x26
 800121a:	f000 fabd 	bl	8001798 <MFRC522_Request>
 800121e:	4603      	mov	r3, r0
 8001220:	461a      	mov	r2, r3
 8001222:	4b28      	ldr	r3, [pc, #160]	; (80012c4 <main+0x130>)
 8001224:	701a      	strb	r2, [r3, #0]
		if (status == MI_OK)
 8001226:	4b27      	ldr	r3, [pc, #156]	; (80012c4 <main+0x130>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d106      	bne.n	800123c <main+0xa8>
			status = MFRC522_Anticoll(str);
 800122e:	4824      	ldr	r0, [pc, #144]	; (80012c0 <main+0x12c>)
 8001230:	f000 fba6 	bl	8001980 <MFRC522_Anticoll>
 8001234:	4603      	mov	r3, r0
 8001236:	461a      	mov	r2, r3
 8001238:	4b22      	ldr	r3, [pc, #136]	; (80012c4 <main+0x130>)
 800123a:	701a      	strb	r2, [r3, #0]
		memcpy(serNum, str, 5);
 800123c:	4b22      	ldr	r3, [pc, #136]	; (80012c8 <main+0x134>)
 800123e:	4a20      	ldr	r2, [pc, #128]	; (80012c0 <main+0x12c>)
 8001240:	6811      	ldr	r1, [r2, #0]
 8001242:	6019      	str	r1, [r3, #0]
 8001244:	7912      	ldrb	r2, [r2, #4]
 8001246:	711a      	strb	r2, [r3, #4]
		if (status == MI_OK) {
 8001248:	4b1e      	ldr	r3, [pc, #120]	; (80012c4 <main+0x130>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d11f      	bne.n	8001290 <main+0xfc>
			if (serNum[1] == 14 && serNum[2] == 70 && serNum[3] == 24
 8001250:	4b1d      	ldr	r3, [pc, #116]	; (80012c8 <main+0x134>)
 8001252:	785b      	ldrb	r3, [r3, #1]
 8001254:	2b0e      	cmp	r3, #14
 8001256:	d11b      	bne.n	8001290 <main+0xfc>
 8001258:	4b1b      	ldr	r3, [pc, #108]	; (80012c8 <main+0x134>)
 800125a:	789b      	ldrb	r3, [r3, #2]
 800125c:	2b46      	cmp	r3, #70	; 0x46
 800125e:	d117      	bne.n	8001290 <main+0xfc>
 8001260:	4b19      	ldr	r3, [pc, #100]	; (80012c8 <main+0x134>)
 8001262:	78db      	ldrb	r3, [r3, #3]
 8001264:	2b18      	cmp	r3, #24
 8001266:	d113      	bne.n	8001290 <main+0xfc>
					&& serNum[4] == 211) {
 8001268:	4b17      	ldr	r3, [pc, #92]	; (80012c8 <main+0x134>)
 800126a:	791b      	ldrb	r3, [r3, #4]
 800126c:	2bd3      	cmp	r3, #211	; 0xd3
 800126e:	d10f      	bne.n	8001290 <main+0xfc>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8001270:	2201      	movs	r2, #1
 8001272:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001276:	4815      	ldr	r0, [pc, #84]	; (80012cc <main+0x138>)
 8001278:	f001 fff9 	bl	800326e <HAL_GPIO_WritePin>
				HAL_Delay(500);
 800127c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001280:	f000 febe 	bl	8002000 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8001284:	2200      	movs	r2, #0
 8001286:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800128a:	4810      	ldr	r0, [pc, #64]	; (80012cc <main+0x138>)
 800128c:	f001 ffef 	bl	800326e <HAL_GPIO_WritePin>
			}
		}
		HAL_Delay(9000);
 8001290:	f242 3028 	movw	r0, #9000	; 0x2328
 8001294:	f000 feb4 	bl	8002000 <HAL_Delay>
		DHT_GetData(&DHT11_Data);
 8001298:	e798      	b.n	80011cc <main+0x38>
 800129a:	bf00      	nop
 800129c:	20000378 	.word	0x20000378
 80012a0:	20000268 	.word	0x20000268
 80012a4:	200002c8 	.word	0x200002c8
 80012a8:	20000238 	.word	0x20000238
 80012ac:	200002ac 	.word	0x200002ac
 80012b0:	20000228 	.word	0x20000228
 80012b4:	2000037c 	.word	0x2000037c
 80012b8:	080094d8 	.word	0x080094d8
 80012bc:	20000214 	.word	0x20000214
 80012c0:	20000368 	.word	0x20000368
 80012c4:	20000380 	.word	0x20000380
 80012c8:	20000230 	.word	0x20000230
 80012cc:	40011000 	.word	0x40011000

080012d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b094      	sub	sp, #80	; 0x50
 80012d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012da:	2228      	movs	r2, #40	; 0x28
 80012dc:	2100      	movs	r1, #0
 80012de:	4618      	mov	r0, r3
 80012e0:	f003 fcdc 	bl	8004c9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012e4:	f107 0314 	add.w	r3, r7, #20
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
 80012f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012f4:	1d3b      	adds	r3, r7, #4
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001300:	2301      	movs	r3, #1
 8001302:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001304:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001308:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800130a:	2300      	movs	r3, #0
 800130c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800130e:	2301      	movs	r3, #1
 8001310:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001312:	2302      	movs	r3, #2
 8001314:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001316:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800131a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800131c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001320:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001322:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001326:	4618      	mov	r0, r3
 8001328:	f001 ffba 	bl	80032a0 <HAL_RCC_OscConfig>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001332:	f000 f969 	bl	8001608 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001336:	230f      	movs	r3, #15
 8001338:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800133a:	2302      	movs	r3, #2
 800133c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800133e:	2300      	movs	r3, #0
 8001340:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001342:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001346:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001348:	2300      	movs	r3, #0
 800134a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800134c:	f107 0314 	add.w	r3, r7, #20
 8001350:	2102      	movs	r1, #2
 8001352:	4618      	mov	r0, r3
 8001354:	f002 fa24 	bl	80037a0 <HAL_RCC_ClockConfig>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800135e:	f000 f953 	bl	8001608 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001362:	2302      	movs	r3, #2
 8001364:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001366:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800136a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800136c:	1d3b      	adds	r3, r7, #4
 800136e:	4618      	mov	r0, r3
 8001370:	f002 fbb0 	bl	8003ad4 <HAL_RCCEx_PeriphCLKConfig>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800137a:	f000 f945 	bl	8001608 <Error_Handler>
  }
}
 800137e:	bf00      	nop
 8001380:	3750      	adds	r7, #80	; 0x50
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
	...

08001388 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800138e:	1d3b      	adds	r3, r7, #4
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001398:	4b18      	ldr	r3, [pc, #96]	; (80013fc <MX_ADC1_Init+0x74>)
 800139a:	4a19      	ldr	r2, [pc, #100]	; (8001400 <MX_ADC1_Init+0x78>)
 800139c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800139e:	4b17      	ldr	r3, [pc, #92]	; (80013fc <MX_ADC1_Init+0x74>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80013a4:	4b15      	ldr	r3, [pc, #84]	; (80013fc <MX_ADC1_Init+0x74>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013aa:	4b14      	ldr	r3, [pc, #80]	; (80013fc <MX_ADC1_Init+0x74>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013b0:	4b12      	ldr	r3, [pc, #72]	; (80013fc <MX_ADC1_Init+0x74>)
 80013b2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80013b6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013b8:	4b10      	ldr	r3, [pc, #64]	; (80013fc <MX_ADC1_Init+0x74>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80013be:	4b0f      	ldr	r3, [pc, #60]	; (80013fc <MX_ADC1_Init+0x74>)
 80013c0:	2201      	movs	r2, #1
 80013c2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013c4:	480d      	ldr	r0, [pc, #52]	; (80013fc <MX_ADC1_Init+0x74>)
 80013c6:	f000 fe3f 	bl	8002048 <HAL_ADC_Init>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80013d0:	f000 f91a 	bl	8001608 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80013d4:	2301      	movs	r3, #1
 80013d6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013d8:	2301      	movs	r3, #1
 80013da:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80013dc:	2307      	movs	r3, #7
 80013de:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013e0:	1d3b      	adds	r3, r7, #4
 80013e2:	4619      	mov	r1, r3
 80013e4:	4805      	ldr	r0, [pc, #20]	; (80013fc <MX_ADC1_Init+0x74>)
 80013e6:	f001 f801 	bl	80023ec <HAL_ADC_ConfigChannel>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80013f0:	f000 f90a 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013f4:	bf00      	nop
 80013f6:	3710      	adds	r7, #16
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	20000238 	.word	0x20000238
 8001400:	40012400 	.word	0x40012400

08001404 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001408:	4b17      	ldr	r3, [pc, #92]	; (8001468 <MX_SPI1_Init+0x64>)
 800140a:	4a18      	ldr	r2, [pc, #96]	; (800146c <MX_SPI1_Init+0x68>)
 800140c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800140e:	4b16      	ldr	r3, [pc, #88]	; (8001468 <MX_SPI1_Init+0x64>)
 8001410:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001414:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001416:	4b14      	ldr	r3, [pc, #80]	; (8001468 <MX_SPI1_Init+0x64>)
 8001418:	2200      	movs	r2, #0
 800141a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800141c:	4b12      	ldr	r3, [pc, #72]	; (8001468 <MX_SPI1_Init+0x64>)
 800141e:	2200      	movs	r2, #0
 8001420:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001422:	4b11      	ldr	r3, [pc, #68]	; (8001468 <MX_SPI1_Init+0x64>)
 8001424:	2200      	movs	r2, #0
 8001426:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001428:	4b0f      	ldr	r3, [pc, #60]	; (8001468 <MX_SPI1_Init+0x64>)
 800142a:	2200      	movs	r2, #0
 800142c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800142e:	4b0e      	ldr	r3, [pc, #56]	; (8001468 <MX_SPI1_Init+0x64>)
 8001430:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001434:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001436:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <MX_SPI1_Init+0x64>)
 8001438:	2210      	movs	r2, #16
 800143a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800143c:	4b0a      	ldr	r3, [pc, #40]	; (8001468 <MX_SPI1_Init+0x64>)
 800143e:	2200      	movs	r2, #0
 8001440:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001442:	4b09      	ldr	r3, [pc, #36]	; (8001468 <MX_SPI1_Init+0x64>)
 8001444:	2200      	movs	r2, #0
 8001446:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001448:	4b07      	ldr	r3, [pc, #28]	; (8001468 <MX_SPI1_Init+0x64>)
 800144a:	2200      	movs	r2, #0
 800144c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800144e:	4b06      	ldr	r3, [pc, #24]	; (8001468 <MX_SPI1_Init+0x64>)
 8001450:	220a      	movs	r2, #10
 8001452:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001454:	4804      	ldr	r0, [pc, #16]	; (8001468 <MX_SPI1_Init+0x64>)
 8001456:	f002 fbf3 	bl	8003c40 <HAL_SPI_Init>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001460:	f000 f8d2 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001464:	bf00      	nop
 8001466:	bd80      	pop	{r7, pc}
 8001468:	20000310 	.word	0x20000310
 800146c:	40013000 	.word	0x40013000

08001470 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001474:	4b11      	ldr	r3, [pc, #68]	; (80014bc <MX_USART1_UART_Init+0x4c>)
 8001476:	4a12      	ldr	r2, [pc, #72]	; (80014c0 <MX_USART1_UART_Init+0x50>)
 8001478:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800147a:	4b10      	ldr	r3, [pc, #64]	; (80014bc <MX_USART1_UART_Init+0x4c>)
 800147c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001480:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001482:	4b0e      	ldr	r3, [pc, #56]	; (80014bc <MX_USART1_UART_Init+0x4c>)
 8001484:	2200      	movs	r2, #0
 8001486:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001488:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <MX_USART1_UART_Init+0x4c>)
 800148a:	2200      	movs	r2, #0
 800148c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800148e:	4b0b      	ldr	r3, [pc, #44]	; (80014bc <MX_USART1_UART_Init+0x4c>)
 8001490:	2200      	movs	r2, #0
 8001492:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001494:	4b09      	ldr	r3, [pc, #36]	; (80014bc <MX_USART1_UART_Init+0x4c>)
 8001496:	220c      	movs	r2, #12
 8001498:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800149a:	4b08      	ldr	r3, [pc, #32]	; (80014bc <MX_USART1_UART_Init+0x4c>)
 800149c:	2200      	movs	r2, #0
 800149e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014a0:	4b06      	ldr	r3, [pc, #24]	; (80014bc <MX_USART1_UART_Init+0x4c>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014a6:	4805      	ldr	r0, [pc, #20]	; (80014bc <MX_USART1_UART_Init+0x4c>)
 80014a8:	f002 fe96 	bl	80041d8 <HAL_UART_Init>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80014b2:	f000 f8a9 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20000268 	.word	0x20000268
 80014c0:	40013800 	.word	0x40013800

080014c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014ca:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <MX_DMA_Init+0x38>)
 80014cc:	695b      	ldr	r3, [r3, #20]
 80014ce:	4a0b      	ldr	r2, [pc, #44]	; (80014fc <MX_DMA_Init+0x38>)
 80014d0:	f043 0301 	orr.w	r3, r3, #1
 80014d4:	6153      	str	r3, [r2, #20]
 80014d6:	4b09      	ldr	r3, [pc, #36]	; (80014fc <MX_DMA_Init+0x38>)
 80014d8:	695b      	ldr	r3, [r3, #20]
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	607b      	str	r3, [r7, #4]
 80014e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80014e2:	2200      	movs	r2, #0
 80014e4:	2100      	movs	r1, #0
 80014e6:	200b      	movs	r0, #11
 80014e8:	f001 fa51 	bl	800298e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80014ec:	200b      	movs	r0, #11
 80014ee:	f001 fa6a 	bl	80029c6 <HAL_NVIC_EnableIRQ>

}
 80014f2:	bf00      	nop
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40021000 	.word	0x40021000

08001500 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b088      	sub	sp, #32
 8001504:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001506:	f107 0310 	add.w	r3, r7, #16
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001514:	4b38      	ldr	r3, [pc, #224]	; (80015f8 <MX_GPIO_Init+0xf8>)
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	4a37      	ldr	r2, [pc, #220]	; (80015f8 <MX_GPIO_Init+0xf8>)
 800151a:	f043 0310 	orr.w	r3, r3, #16
 800151e:	6193      	str	r3, [r2, #24]
 8001520:	4b35      	ldr	r3, [pc, #212]	; (80015f8 <MX_GPIO_Init+0xf8>)
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	f003 0310 	and.w	r3, r3, #16
 8001528:	60fb      	str	r3, [r7, #12]
 800152a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800152c:	4b32      	ldr	r3, [pc, #200]	; (80015f8 <MX_GPIO_Init+0xf8>)
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	4a31      	ldr	r2, [pc, #196]	; (80015f8 <MX_GPIO_Init+0xf8>)
 8001532:	f043 0320 	orr.w	r3, r3, #32
 8001536:	6193      	str	r3, [r2, #24]
 8001538:	4b2f      	ldr	r3, [pc, #188]	; (80015f8 <MX_GPIO_Init+0xf8>)
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	f003 0320 	and.w	r3, r3, #32
 8001540:	60bb      	str	r3, [r7, #8]
 8001542:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001544:	4b2c      	ldr	r3, [pc, #176]	; (80015f8 <MX_GPIO_Init+0xf8>)
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	4a2b      	ldr	r2, [pc, #172]	; (80015f8 <MX_GPIO_Init+0xf8>)
 800154a:	f043 0304 	orr.w	r3, r3, #4
 800154e:	6193      	str	r3, [r2, #24]
 8001550:	4b29      	ldr	r3, [pc, #164]	; (80015f8 <MX_GPIO_Init+0xf8>)
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	f003 0304 	and.w	r3, r3, #4
 8001558:	607b      	str	r3, [r7, #4]
 800155a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800155c:	4b26      	ldr	r3, [pc, #152]	; (80015f8 <MX_GPIO_Init+0xf8>)
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	4a25      	ldr	r2, [pc, #148]	; (80015f8 <MX_GPIO_Init+0xf8>)
 8001562:	f043 0308 	orr.w	r3, r3, #8
 8001566:	6193      	str	r3, [r2, #24]
 8001568:	4b23      	ldr	r3, [pc, #140]	; (80015f8 <MX_GPIO_Init+0xf8>)
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	f003 0308 	and.w	r3, r3, #8
 8001570:	603b      	str	r3, [r7, #0]
 8001572:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001574:	2200      	movs	r2, #0
 8001576:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800157a:	4820      	ldr	r0, [pc, #128]	; (80015fc <MX_GPIO_Init+0xfc>)
 800157c:	f001 fe77 	bl	800326e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001580:	2200      	movs	r2, #0
 8001582:	2110      	movs	r1, #16
 8001584:	481e      	ldr	r0, [pc, #120]	; (8001600 <MX_GPIO_Init+0x100>)
 8001586:	f001 fe72 	bl	800326e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800158a:	2200      	movs	r2, #0
 800158c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001590:	481c      	ldr	r0, [pc, #112]	; (8001604 <MX_GPIO_Init+0x104>)
 8001592:	f001 fe6c 	bl	800326e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001596:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800159a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159c:	2301      	movs	r3, #1
 800159e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a4:	2302      	movs	r3, #2
 80015a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015a8:	f107 0310 	add.w	r3, r7, #16
 80015ac:	4619      	mov	r1, r3
 80015ae:	4813      	ldr	r0, [pc, #76]	; (80015fc <MX_GPIO_Init+0xfc>)
 80015b0:	f001 fcc2 	bl	8002f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015b4:	2310      	movs	r3, #16
 80015b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b8:	2301      	movs	r3, #1
 80015ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c0:	2302      	movs	r3, #2
 80015c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c4:	f107 0310 	add.w	r3, r7, #16
 80015c8:	4619      	mov	r1, r3
 80015ca:	480d      	ldr	r0, [pc, #52]	; (8001600 <MX_GPIO_Init+0x100>)
 80015cc:	f001 fcb4 	bl	8002f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d6:	2301      	movs	r3, #1
 80015d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015de:	2302      	movs	r3, #2
 80015e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e2:	f107 0310 	add.w	r3, r7, #16
 80015e6:	4619      	mov	r1, r3
 80015e8:	4806      	ldr	r0, [pc, #24]	; (8001604 <MX_GPIO_Init+0x104>)
 80015ea:	f001 fca5 	bl	8002f38 <HAL_GPIO_Init>

}
 80015ee:	bf00      	nop
 80015f0:	3720      	adds	r7, #32
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40021000 	.word	0x40021000
 80015fc:	40011000 	.word	0x40011000
 8001600:	40010800 	.word	0x40010800
 8001604:	40010c00 	.word	0x40010c00

08001608 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800160c:	b672      	cpsid	i
}
 800160e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001610:	e7fe      	b.n	8001610 <Error_Handler+0x8>
	...

08001614 <SPI1SendByte>:
extern SPI_HandleTypeDef hspi1;

// RC522


uint8_t SPI1SendByte(uint8_t data) {
 8001614:	b580      	push	{r7, lr}
 8001616:	b086      	sub	sp, #24
 8001618:	af02      	add	r7, sp, #8
 800161a:	4603      	mov	r3, r0
 800161c:	71fb      	strb	r3, [r7, #7]
	unsigned char writeCommand[1];
	unsigned char readValue[1];
	
	writeCommand[0] = data;
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	733b      	strb	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&writeCommand, (uint8_t*)&readValue, 1, 10);
 8001622:	f107 0208 	add.w	r2, r7, #8
 8001626:	f107 010c 	add.w	r1, r7, #12
 800162a:	230a      	movs	r3, #10
 800162c:	9300      	str	r3, [sp, #0]
 800162e:	2301      	movs	r3, #1
 8001630:	4803      	ldr	r0, [pc, #12]	; (8001640 <SPI1SendByte+0x2c>)
 8001632:	f002 fb89 	bl	8003d48 <HAL_SPI_TransmitReceive>
	return readValue[0];
 8001636:	7a3b      	ldrb	r3, [r7, #8]
	//SPI1->DR = data;															// вывод в SPI1
	//while (!(SPI1->SR & SPI_SR_RXNE));     				// ждем окончания обмена (STM32F103)
	//for (uint8_t i=0; i<50; i++) {};
	//data = SPI1->DR;															// читаем принятые данные
	//return data;
}
 8001638:	4618      	mov	r0, r3
 800163a:	3710      	adds	r7, #16
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	20000310 	.word	0x20000310

08001644 <SPI1_WriteReg>:

void SPI1_WriteReg(uint8_t address, uint8_t value) {
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	460a      	mov	r2, r1
 800164e:	71fb      	strb	r3, [r7, #7]
 8001650:	4613      	mov	r3, r2
 8001652:	71bb      	strb	r3, [r7, #6]
	cs_reset();
 8001654:	2200      	movs	r2, #0
 8001656:	2110      	movs	r1, #16
 8001658:	4809      	ldr	r0, [pc, #36]	; (8001680 <SPI1_WriteReg+0x3c>)
 800165a:	f001 fe08 	bl	800326e <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff ffd7 	bl	8001614 <SPI1SendByte>
	SPI1SendByte(value);
 8001666:	79bb      	ldrb	r3, [r7, #6]
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff ffd3 	bl	8001614 <SPI1SendByte>
	cs_set();
 800166e:	2201      	movs	r2, #1
 8001670:	2110      	movs	r1, #16
 8001672:	4803      	ldr	r0, [pc, #12]	; (8001680 <SPI1_WriteReg+0x3c>)
 8001674:	f001 fdfb 	bl	800326e <HAL_GPIO_WritePin>
}
 8001678:	bf00      	nop
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40010800 	.word	0x40010800

08001684 <SPI1_ReadReg>:

uint8_t SPI1_ReadReg(uint8_t address) {
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	71fb      	strb	r3, [r7, #7]
	uint8_t	val;

	cs_reset();
 800168e:	2200      	movs	r2, #0
 8001690:	2110      	movs	r1, #16
 8001692:	480b      	ldr	r0, [pc, #44]	; (80016c0 <SPI1_ReadReg+0x3c>)
 8001694:	f001 fdeb 	bl	800326e <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 8001698:	79fb      	ldrb	r3, [r7, #7]
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff ffba 	bl	8001614 <SPI1SendByte>
	val = SPI1SendByte(0x00);
 80016a0:	2000      	movs	r0, #0
 80016a2:	f7ff ffb7 	bl	8001614 <SPI1SendByte>
 80016a6:	4603      	mov	r3, r0
 80016a8:	73fb      	strb	r3, [r7, #15]
	cs_set();
 80016aa:	2201      	movs	r2, #1
 80016ac:	2110      	movs	r1, #16
 80016ae:	4804      	ldr	r0, [pc, #16]	; (80016c0 <SPI1_ReadReg+0x3c>)
 80016b0:	f001 fddd 	bl	800326e <HAL_GPIO_WritePin>
	return val;
 80016b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3710      	adds	r7, #16
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40010800 	.word	0x40010800

080016c4 <MFRC522_WriteRegister>:

void MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	460a      	mov	r2, r1
 80016ce:	71fb      	strb	r3, [r7, #7]
 80016d0:	4613      	mov	r3, r2
 80016d2:	71bb      	strb	r3, [r7, #6]
	addr = (addr << 1) & 0x7E;															// Address format: 0XXXXXX0
 80016d4:	79fb      	ldrb	r3, [r7, #7]
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80016de:	71fb      	strb	r3, [r7, #7]
  SPI1_WriteReg(addr, val);
 80016e0:	79ba      	ldrb	r2, [r7, #6]
 80016e2:	79fb      	ldrb	r3, [r7, #7]
 80016e4:	4611      	mov	r1, r2
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff ffac 	bl	8001644 <SPI1_WriteReg>
}
 80016ec:	bf00      	nop
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <MFRC522_ReadRegister>:

uint8_t MFRC522_ReadRegister(uint8_t addr) {
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	addr = ((addr << 1) & 0x7E) | 0x80;
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	b25b      	sxtb	r3, r3
 8001704:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8001708:	b25b      	sxtb	r3, r3
 800170a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800170e:	b25b      	sxtb	r3, r3
 8001710:	71fb      	strb	r3, [r7, #7]
	val = SPI1_ReadReg(addr);
 8001712:	79fb      	ldrb	r3, [r7, #7]
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff ffb5 	bl	8001684 <SPI1_ReadReg>
 800171a:	4603      	mov	r3, r0
 800171c:	73fb      	strb	r3, [r7, #15]
	return val;	
 800171e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001720:	4618      	mov	r0, r3
 8001722:	3710      	adds	r7, #16
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <MFRC522_SetBitMask>:
		if (CardID[i] != CompareID[i]) return MI_ERR;
	}
	return MI_OK;
}

void MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	460a      	mov	r2, r1
 8001732:	71fb      	strb	r3, [r7, #7]
 8001734:	4613      	mov	r3, r2
 8001736:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) | mask);
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	4618      	mov	r0, r3
 800173c:	f7ff ffda 	bl	80016f4 <MFRC522_ReadRegister>
 8001740:	4603      	mov	r3, r0
 8001742:	461a      	mov	r2, r3
 8001744:	79bb      	ldrb	r3, [r7, #6]
 8001746:	4313      	orrs	r3, r2
 8001748:	b2da      	uxtb	r2, r3
 800174a:	79fb      	ldrb	r3, [r7, #7]
 800174c:	4611      	mov	r1, r2
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff ffb8 	bl	80016c4 <MFRC522_WriteRegister>
}
 8001754:	bf00      	nop
 8001756:	3708      	adds	r7, #8
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}

0800175c <MFRC522_ClearBitMask>:

void MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	4603      	mov	r3, r0
 8001764:	460a      	mov	r2, r1
 8001766:	71fb      	strb	r3, [r7, #7]
 8001768:	4613      	mov	r3, r2
 800176a:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) & (~mask));
 800176c:	79fb      	ldrb	r3, [r7, #7]
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff ffc0 	bl	80016f4 <MFRC522_ReadRegister>
 8001774:	4603      	mov	r3, r0
 8001776:	b25a      	sxtb	r2, r3
 8001778:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800177c:	43db      	mvns	r3, r3
 800177e:	b25b      	sxtb	r3, r3
 8001780:	4013      	ands	r3, r2
 8001782:	b25b      	sxtb	r3, r3
 8001784:	b2da      	uxtb	r2, r3
 8001786:	79fb      	ldrb	r3, [r7, #7]
 8001788:	4611      	mov	r1, r2
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff ff9a 	bl	80016c4 <MFRC522_WriteRegister>
}
 8001790:	bf00      	nop
 8001792:	3708      	adds	r7, #8
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}

08001798 <MFRC522_Request>:

uint8_t MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af02      	add	r7, sp, #8
 800179e:	4603      	mov	r3, r0
 80017a0:	6039      	str	r1, [r7, #0]
 80017a2:	71fb      	strb	r3, [r7, #7]
	uint8_t status;  
	uint16_t backBits;																			// The received data bits

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		// TxLastBists = BitFramingReg[2..0]
 80017a4:	2107      	movs	r1, #7
 80017a6:	200d      	movs	r0, #13
 80017a8:	f7ff ff8c 	bl	80016c4 <MFRC522_WriteRegister>
	TagType[0] = reqMode;
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	79fa      	ldrb	r2, [r7, #7]
 80017b0:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 80017b2:	f107 030c 	add.w	r3, r7, #12
 80017b6:	9300      	str	r3, [sp, #0]
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	2201      	movs	r2, #1
 80017bc:	6839      	ldr	r1, [r7, #0]
 80017be:	200c      	movs	r0, #12
 80017c0:	f000 f80f 	bl	80017e2 <MFRC522_ToCard>
 80017c4:	4603      	mov	r3, r0
 80017c6:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) status = MI_ERR;
 80017c8:	7bfb      	ldrb	r3, [r7, #15]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d102      	bne.n	80017d4 <MFRC522_Request+0x3c>
 80017ce:	89bb      	ldrh	r3, [r7, #12]
 80017d0:	2b10      	cmp	r3, #16
 80017d2:	d001      	beq.n	80017d8 <MFRC522_Request+0x40>
 80017d4:	2302      	movs	r3, #2
 80017d6:	73fb      	strb	r3, [r7, #15]
	return status;
 80017d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3710      	adds	r7, #16
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <MFRC522_ToCard>:

uint8_t MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 80017e2:	b590      	push	{r4, r7, lr}
 80017e4:	b087      	sub	sp, #28
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607b      	str	r3, [r7, #4]
 80017ec:	4603      	mov	r3, r0
 80017ee:	73fb      	strb	r3, [r7, #15]
 80017f0:	4613      	mov	r3, r2
 80017f2:	73bb      	strb	r3, [r7, #14]
	uint8_t status = MI_ERR;
 80017f4:	2302      	movs	r3, #2
 80017f6:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 80017f8:	2300      	movs	r3, #0
 80017fa:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 80017fc:	2300      	movs	r3, #0
 80017fe:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 8001800:	7bfb      	ldrb	r3, [r7, #15]
 8001802:	2b0c      	cmp	r3, #12
 8001804:	d006      	beq.n	8001814 <MFRC522_ToCard+0x32>
 8001806:	2b0e      	cmp	r3, #14
 8001808:	d109      	bne.n	800181e <MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 800180a:	2312      	movs	r3, #18
 800180c:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 800180e:	2310      	movs	r3, #16
 8001810:	757b      	strb	r3, [r7, #21]
			break;
 8001812:	e005      	b.n	8001820 <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77;
 8001814:	2377      	movs	r3, #119	; 0x77
 8001816:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 8001818:	2330      	movs	r3, #48	; 0x30
 800181a:	757b      	strb	r3, [r7, #21]
			break;
 800181c:	e000      	b.n	8001820 <MFRC522_ToCard+0x3e>
		}
		default:
		break;
 800181e:	bf00      	nop
	}

	MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 8001820:	7dbb      	ldrb	r3, [r7, #22]
 8001822:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001826:	b2db      	uxtb	r3, r3
 8001828:	4619      	mov	r1, r3
 800182a:	2002      	movs	r0, #2
 800182c:	f7ff ff4a 	bl	80016c4 <MFRC522_WriteRegister>
	MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 8001830:	2180      	movs	r1, #128	; 0x80
 8001832:	2004      	movs	r0, #4
 8001834:	f7ff ff92 	bl	800175c <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 8001838:	2180      	movs	r1, #128	; 0x80
 800183a:	200a      	movs	r0, #10
 800183c:	f7ff ff74 	bl	8001728 <MFRC522_SetBitMask>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 8001840:	2100      	movs	r1, #0
 8001842:	2001      	movs	r0, #1
 8001844:	f7ff ff3e 	bl	80016c4 <MFRC522_WriteRegister>

	// Writing data to the FIFO
	for (i = 0; i < sendLen; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 8001848:	2300      	movs	r3, #0
 800184a:	827b      	strh	r3, [r7, #18]
 800184c:	e00a      	b.n	8001864 <MFRC522_ToCard+0x82>
 800184e:	8a7b      	ldrh	r3, [r7, #18]
 8001850:	68ba      	ldr	r2, [r7, #8]
 8001852:	4413      	add	r3, r2
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	4619      	mov	r1, r3
 8001858:	2009      	movs	r0, #9
 800185a:	f7ff ff33 	bl	80016c4 <MFRC522_WriteRegister>
 800185e:	8a7b      	ldrh	r3, [r7, #18]
 8001860:	3301      	adds	r3, #1
 8001862:	827b      	strh	r3, [r7, #18]
 8001864:	7bbb      	ldrb	r3, [r7, #14]
 8001866:	b29b      	uxth	r3, r3
 8001868:	8a7a      	ldrh	r2, [r7, #18]
 800186a:	429a      	cmp	r2, r3
 800186c:	d3ef      	bcc.n	800184e <MFRC522_ToCard+0x6c>

	// Execute the command
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 800186e:	7bfb      	ldrb	r3, [r7, #15]
 8001870:	4619      	mov	r1, r3
 8001872:	2001      	movs	r0, #1
 8001874:	f7ff ff26 	bl	80016c4 <MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		// StartSend=1,transmission of data starts 
 8001878:	7bfb      	ldrb	r3, [r7, #15]
 800187a:	2b0c      	cmp	r3, #12
 800187c:	d103      	bne.n	8001886 <MFRC522_ToCard+0xa4>
 800187e:	2180      	movs	r1, #128	; 0x80
 8001880:	200d      	movs	r0, #13
 8001882:	f7ff ff51 	bl	8001728 <MFRC522_SetBitMask>

	// Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 8001886:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800188a:	827b      	strh	r3, [r7, #18]
	do {
		// CommIrqReg[7..0]
		// Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 800188c:	2004      	movs	r0, #4
 800188e:	f7ff ff31 	bl	80016f4 <MFRC522_ReadRegister>
 8001892:	4603      	mov	r3, r0
 8001894:	753b      	strb	r3, [r7, #20]
		i--;
 8001896:	8a7b      	ldrh	r3, [r7, #18]
 8001898:	3b01      	subs	r3, #1
 800189a:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 800189c:	8a7b      	ldrh	r3, [r7, #18]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d00a      	beq.n	80018b8 <MFRC522_ToCard+0xd6>
 80018a2:	7d3b      	ldrb	r3, [r7, #20]
 80018a4:	f003 0301 	and.w	r3, r3, #1
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d105      	bne.n	80018b8 <MFRC522_ToCard+0xd6>
 80018ac:	7d3a      	ldrb	r2, [r7, #20]
 80018ae:	7d7b      	ldrb	r3, [r7, #21]
 80018b0:	4013      	ands	r3, r2
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d0e9      	beq.n	800188c <MFRC522_ToCard+0xaa>

	MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);																// StartSend=0
 80018b8:	2180      	movs	r1, #128	; 0x80
 80018ba:	200d      	movs	r0, #13
 80018bc:	f7ff ff4e 	bl	800175c <MFRC522_ClearBitMask>

	if (i != 0)  {
 80018c0:	8a7b      	ldrh	r3, [r7, #18]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d057      	beq.n	8001976 <MFRC522_ToCard+0x194>
		if (!(MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 80018c6:	2006      	movs	r0, #6
 80018c8:	f7ff ff14 	bl	80016f4 <MFRC522_ReadRegister>
 80018cc:	4603      	mov	r3, r0
 80018ce:	f003 031b 	and.w	r3, r3, #27
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d14d      	bne.n	8001972 <MFRC522_ToCard+0x190>
			status = MI_OK;
 80018d6:	2300      	movs	r3, #0
 80018d8:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) status = MI_NOTAGERR;
 80018da:	7d3a      	ldrb	r2, [r7, #20]
 80018dc:	7dbb      	ldrb	r3, [r7, #22]
 80018de:	4013      	ands	r3, r2
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MFRC522_ToCard+0x10c>
 80018ea:	2301      	movs	r3, #1
 80018ec:	75fb      	strb	r3, [r7, #23]
			if (command == PCD_TRANSCEIVE) {
 80018ee:	7bfb      	ldrb	r3, [r7, #15]
 80018f0:	2b0c      	cmp	r3, #12
 80018f2:	d140      	bne.n	8001976 <MFRC522_ToCard+0x194>
				n = MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 80018f4:	200a      	movs	r0, #10
 80018f6:	f7ff fefd 	bl	80016f4 <MFRC522_ReadRegister>
 80018fa:	4603      	mov	r3, r0
 80018fc:	753b      	strb	r3, [r7, #20]
				lastBits = MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 80018fe:	200c      	movs	r0, #12
 8001900:	f7ff fef8 	bl	80016f4 <MFRC522_ReadRegister>
 8001904:	4603      	mov	r3, r0
 8001906:	f003 0307 	and.w	r3, r3, #7
 800190a:	747b      	strb	r3, [r7, #17]
				if (lastBits) *backLen = (n-1)*8+lastBits; else *backLen = n*8;
 800190c:	7c7b      	ldrb	r3, [r7, #17]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d00b      	beq.n	800192a <MFRC522_ToCard+0x148>
 8001912:	7d3b      	ldrb	r3, [r7, #20]
 8001914:	3b01      	subs	r3, #1
 8001916:	b29b      	uxth	r3, r3
 8001918:	00db      	lsls	r3, r3, #3
 800191a:	b29a      	uxth	r2, r3
 800191c:	7c7b      	ldrb	r3, [r7, #17]
 800191e:	b29b      	uxth	r3, r3
 8001920:	4413      	add	r3, r2
 8001922:	b29a      	uxth	r2, r3
 8001924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001926:	801a      	strh	r2, [r3, #0]
 8001928:	e005      	b.n	8001936 <MFRC522_ToCard+0x154>
 800192a:	7d3b      	ldrb	r3, [r7, #20]
 800192c:	b29b      	uxth	r3, r3
 800192e:	00db      	lsls	r3, r3, #3
 8001930:	b29a      	uxth	r2, r3
 8001932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001934:	801a      	strh	r2, [r3, #0]
				if (n == 0) n = 1;
 8001936:	7d3b      	ldrb	r3, [r7, #20]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d101      	bne.n	8001940 <MFRC522_ToCard+0x15e>
 800193c:	2301      	movs	r3, #1
 800193e:	753b      	strb	r3, [r7, #20]
				if (n > MFRC522_MAX_LEN) n = MFRC522_MAX_LEN;
 8001940:	7d3b      	ldrb	r3, [r7, #20]
 8001942:	2b10      	cmp	r3, #16
 8001944:	d901      	bls.n	800194a <MFRC522_ToCard+0x168>
 8001946:	2310      	movs	r3, #16
 8001948:	753b      	strb	r3, [r7, #20]
				for (i = 0; i < n; i++) backData[i] = MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);		// Reading the received data in FIFO
 800194a:	2300      	movs	r3, #0
 800194c:	827b      	strh	r3, [r7, #18]
 800194e:	e00a      	b.n	8001966 <MFRC522_ToCard+0x184>
 8001950:	8a7b      	ldrh	r3, [r7, #18]
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	18d4      	adds	r4, r2, r3
 8001956:	2009      	movs	r0, #9
 8001958:	f7ff fecc 	bl	80016f4 <MFRC522_ReadRegister>
 800195c:	4603      	mov	r3, r0
 800195e:	7023      	strb	r3, [r4, #0]
 8001960:	8a7b      	ldrh	r3, [r7, #18]
 8001962:	3301      	adds	r3, #1
 8001964:	827b      	strh	r3, [r7, #18]
 8001966:	7d3b      	ldrb	r3, [r7, #20]
 8001968:	b29b      	uxth	r3, r3
 800196a:	8a7a      	ldrh	r2, [r7, #18]
 800196c:	429a      	cmp	r2, r3
 800196e:	d3ef      	bcc.n	8001950 <MFRC522_ToCard+0x16e>
 8001970:	e001      	b.n	8001976 <MFRC522_ToCard+0x194>
			}
		} else status = MI_ERR;
 8001972:	2302      	movs	r3, #2
 8001974:	75fb      	strb	r3, [r7, #23]
	}
	return status;
 8001976:	7dfb      	ldrb	r3, [r7, #23]
}
 8001978:	4618      	mov	r0, r3
 800197a:	371c      	adds	r7, #28
 800197c:	46bd      	mov	sp, r7
 800197e:	bd90      	pop	{r4, r7, pc}

08001980 <MFRC522_Anticoll>:

uint8_t MFRC522_Anticoll(uint8_t* serNum) {
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af02      	add	r7, sp, #8
 8001986:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 8001988:	2300      	movs	r3, #0
 800198a:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);												// TxLastBists = BitFramingReg[2..0]
 800198c:	2100      	movs	r1, #0
 800198e:	200d      	movs	r0, #13
 8001990:	f7ff fe98 	bl	80016c4 <MFRC522_WriteRegister>
	serNum[0] = PICC_ANTICOLL;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2293      	movs	r2, #147	; 0x93
 8001998:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	3301      	adds	r3, #1
 800199e:	2220      	movs	r2, #32
 80019a0:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 80019a2:	f107 030a 	add.w	r3, r7, #10
 80019a6:	9300      	str	r3, [sp, #0]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2202      	movs	r2, #2
 80019ac:	6879      	ldr	r1, [r7, #4]
 80019ae:	200c      	movs	r0, #12
 80019b0:	f7ff ff17 	bl	80017e2 <MFRC522_ToCard>
 80019b4:	4603      	mov	r3, r0
 80019b6:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) {
 80019b8:	7bfb      	ldrb	r3, [r7, #15]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d118      	bne.n	80019f0 <MFRC522_Anticoll+0x70>
		// Check card serial number
		for (i = 0; i < 4; i++) serNumCheck ^= serNum[i];
 80019be:	2300      	movs	r3, #0
 80019c0:	73bb      	strb	r3, [r7, #14]
 80019c2:	e009      	b.n	80019d8 <MFRC522_Anticoll+0x58>
 80019c4:	7bbb      	ldrb	r3, [r7, #14]
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	4413      	add	r3, r2
 80019ca:	781a      	ldrb	r2, [r3, #0]
 80019cc:	7b7b      	ldrb	r3, [r7, #13]
 80019ce:	4053      	eors	r3, r2
 80019d0:	737b      	strb	r3, [r7, #13]
 80019d2:	7bbb      	ldrb	r3, [r7, #14]
 80019d4:	3301      	adds	r3, #1
 80019d6:	73bb      	strb	r3, [r7, #14]
 80019d8:	7bbb      	ldrb	r3, [r7, #14]
 80019da:	2b03      	cmp	r3, #3
 80019dc:	d9f2      	bls.n	80019c4 <MFRC522_Anticoll+0x44>
		if (serNumCheck != serNum[i]) status = MI_ERR;
 80019de:	7bbb      	ldrb	r3, [r7, #14]
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	4413      	add	r3, r2
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	7b7a      	ldrb	r2, [r7, #13]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d001      	beq.n	80019f0 <MFRC522_Anticoll+0x70>
 80019ec:	2302      	movs	r3, #2
 80019ee:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 80019f0:	7bfb      	ldrb	r3, [r7, #15]
} 
 80019f2:	4618      	mov	r0, r3
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <MFRC522_Reset>:
		status = MFRC522_ToCard(PCD_TRANSCEIVE, buff, 18, buff, &recvBits);
		if ((status != MI_OK) || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A)) status = MI_ERR;
	}
	return status;
}
void MFRC522_Reset(void) {
 80019fa:	b580      	push	{r7, lr}
 80019fc:	af00      	add	r7, sp, #0
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 80019fe:	210f      	movs	r1, #15
 8001a00:	2001      	movs	r0, #1
 8001a02:	f7ff fe5f 	bl	80016c4 <MFRC522_WriteRegister>
}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <MFRC522_Init>:
void MFRC522_Init(void) {
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	af00      	add	r7, sp, #0
	MFRC522_Reset();
 8001a0e:	f7ff fff4 	bl	80019fa <MFRC522_Reset>
	MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 8001a12:	218d      	movs	r1, #141	; 0x8d
 8001a14:	202a      	movs	r0, #42	; 0x2a
 8001a16:	f7ff fe55 	bl	80016c4 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 8001a1a:	213e      	movs	r1, #62	; 0x3e
 8001a1c:	202b      	movs	r0, #43	; 0x2b
 8001a1e:	f7ff fe51 	bl	80016c4 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);           
 8001a22:	211e      	movs	r1, #30
 8001a24:	202d      	movs	r0, #45	; 0x2d
 8001a26:	f7ff fe4d 	bl	80016c4 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	202c      	movs	r0, #44	; 0x2c
 8001a2e:	f7ff fe49 	bl	80016c4 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);				// 48dB gain	
 8001a32:	2170      	movs	r1, #112	; 0x70
 8001a34:	2026      	movs	r0, #38	; 0x26
 8001a36:	f7ff fe45 	bl	80016c4 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 8001a3a:	2140      	movs	r1, #64	; 0x40
 8001a3c:	2015      	movs	r0, #21
 8001a3e:	f7ff fe41 	bl	80016c4 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 8001a42:	213d      	movs	r1, #61	; 0x3d
 8001a44:	2011      	movs	r0, #17
 8001a46:	f7ff fe3d 	bl	80016c4 <MFRC522_WriteRegister>
	MFRC522_AntennaOn();																		// Open the antenna
 8001a4a:	f000 f802 	bl	8001a52 <MFRC522_AntennaOn>
}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <MFRC522_AntennaOn>:

void MFRC522_AntennaOn(void) {
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b082      	sub	sp, #8
 8001a56:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 8001a58:	2014      	movs	r0, #20
 8001a5a:	f7ff fe4b 	bl	80016f4 <MFRC522_ReadRegister>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 8001a62:	79fb      	ldrb	r3, [r7, #7]
 8001a64:	f003 0303 	and.w	r3, r3, #3
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d103      	bne.n	8001a74 <MFRC522_AntennaOn+0x22>
 8001a6c:	2103      	movs	r1, #3
 8001a6e:	2014      	movs	r0, #20
 8001a70:	f7ff fe5a 	bl	8001728 <MFRC522_SetBitMask>
}
 8001a74:	bf00      	nop
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a82:	4b15      	ldr	r3, [pc, #84]	; (8001ad8 <HAL_MspInit+0x5c>)
 8001a84:	699b      	ldr	r3, [r3, #24]
 8001a86:	4a14      	ldr	r2, [pc, #80]	; (8001ad8 <HAL_MspInit+0x5c>)
 8001a88:	f043 0301 	orr.w	r3, r3, #1
 8001a8c:	6193      	str	r3, [r2, #24]
 8001a8e:	4b12      	ldr	r3, [pc, #72]	; (8001ad8 <HAL_MspInit+0x5c>)
 8001a90:	699b      	ldr	r3, [r3, #24]
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	60bb      	str	r3, [r7, #8]
 8001a98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a9a:	4b0f      	ldr	r3, [pc, #60]	; (8001ad8 <HAL_MspInit+0x5c>)
 8001a9c:	69db      	ldr	r3, [r3, #28]
 8001a9e:	4a0e      	ldr	r2, [pc, #56]	; (8001ad8 <HAL_MspInit+0x5c>)
 8001aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aa4:	61d3      	str	r3, [r2, #28]
 8001aa6:	4b0c      	ldr	r3, [pc, #48]	; (8001ad8 <HAL_MspInit+0x5c>)
 8001aa8:	69db      	ldr	r3, [r3, #28]
 8001aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aae:	607b      	str	r3, [r7, #4]
 8001ab0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001ab2:	4b0a      	ldr	r3, [pc, #40]	; (8001adc <HAL_MspInit+0x60>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001abe:	60fb      	str	r3, [r7, #12]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	4a04      	ldr	r2, [pc, #16]	; (8001adc <HAL_MspInit+0x60>)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	3714      	adds	r7, #20
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bc80      	pop	{r7}
 8001ad6:	4770      	bx	lr
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	40010000 	.word	0x40010000

08001ae0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b088      	sub	sp, #32
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae8:	f107 0310 	add.w	r3, r7, #16
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a28      	ldr	r2, [pc, #160]	; (8001b9c <HAL_ADC_MspInit+0xbc>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d149      	bne.n	8001b94 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b00:	4b27      	ldr	r3, [pc, #156]	; (8001ba0 <HAL_ADC_MspInit+0xc0>)
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	4a26      	ldr	r2, [pc, #152]	; (8001ba0 <HAL_ADC_MspInit+0xc0>)
 8001b06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b0a:	6193      	str	r3, [r2, #24]
 8001b0c:	4b24      	ldr	r3, [pc, #144]	; (8001ba0 <HAL_ADC_MspInit+0xc0>)
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b18:	4b21      	ldr	r3, [pc, #132]	; (8001ba0 <HAL_ADC_MspInit+0xc0>)
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	4a20      	ldr	r2, [pc, #128]	; (8001ba0 <HAL_ADC_MspInit+0xc0>)
 8001b1e:	f043 0304 	orr.w	r3, r3, #4
 8001b22:	6193      	str	r3, [r2, #24]
 8001b24:	4b1e      	ldr	r3, [pc, #120]	; (8001ba0 <HAL_ADC_MspInit+0xc0>)
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	f003 0304 	and.w	r3, r3, #4
 8001b2c:	60bb      	str	r3, [r7, #8]
 8001b2e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001b30:	2302      	movs	r3, #2
 8001b32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b34:	2303      	movs	r3, #3
 8001b36:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b38:	f107 0310 	add.w	r3, r7, #16
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4819      	ldr	r0, [pc, #100]	; (8001ba4 <HAL_ADC_MspInit+0xc4>)
 8001b40:	f001 f9fa 	bl	8002f38 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001b44:	4b18      	ldr	r3, [pc, #96]	; (8001ba8 <HAL_ADC_MspInit+0xc8>)
 8001b46:	4a19      	ldr	r2, [pc, #100]	; (8001bac <HAL_ADC_MspInit+0xcc>)
 8001b48:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b4a:	4b17      	ldr	r3, [pc, #92]	; (8001ba8 <HAL_ADC_MspInit+0xc8>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b50:	4b15      	ldr	r3, [pc, #84]	; (8001ba8 <HAL_ADC_MspInit+0xc8>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001b56:	4b14      	ldr	r3, [pc, #80]	; (8001ba8 <HAL_ADC_MspInit+0xc8>)
 8001b58:	2280      	movs	r2, #128	; 0x80
 8001b5a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b5c:	4b12      	ldr	r3, [pc, #72]	; (8001ba8 <HAL_ADC_MspInit+0xc8>)
 8001b5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b62:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b64:	4b10      	ldr	r3, [pc, #64]	; (8001ba8 <HAL_ADC_MspInit+0xc8>)
 8001b66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b6a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001b6c:	4b0e      	ldr	r3, [pc, #56]	; (8001ba8 <HAL_ADC_MspInit+0xc8>)
 8001b6e:	2220      	movs	r2, #32
 8001b70:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001b72:	4b0d      	ldr	r3, [pc, #52]	; (8001ba8 <HAL_ADC_MspInit+0xc8>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b78:	480b      	ldr	r0, [pc, #44]	; (8001ba8 <HAL_ADC_MspInit+0xc8>)
 8001b7a:	f000 ff3f 	bl	80029fc <HAL_DMA_Init>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001b84:	f7ff fd40 	bl	8001608 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	4a07      	ldr	r2, [pc, #28]	; (8001ba8 <HAL_ADC_MspInit+0xc8>)
 8001b8c:	621a      	str	r2, [r3, #32]
 8001b8e:	4a06      	ldr	r2, [pc, #24]	; (8001ba8 <HAL_ADC_MspInit+0xc8>)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b94:	bf00      	nop
 8001b96:	3720      	adds	r7, #32
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40012400 	.word	0x40012400
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	40010800 	.word	0x40010800
 8001ba8:	200002cc 	.word	0x200002cc
 8001bac:	40020008 	.word	0x40020008

08001bb0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b088      	sub	sp, #32
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb8:	f107 0310 	add.w	r3, r7, #16
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a1b      	ldr	r2, [pc, #108]	; (8001c38 <HAL_SPI_MspInit+0x88>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d12f      	bne.n	8001c30 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bd0:	4b1a      	ldr	r3, [pc, #104]	; (8001c3c <HAL_SPI_MspInit+0x8c>)
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	4a19      	ldr	r2, [pc, #100]	; (8001c3c <HAL_SPI_MspInit+0x8c>)
 8001bd6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bda:	6193      	str	r3, [r2, #24]
 8001bdc:	4b17      	ldr	r3, [pc, #92]	; (8001c3c <HAL_SPI_MspInit+0x8c>)
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be8:	4b14      	ldr	r3, [pc, #80]	; (8001c3c <HAL_SPI_MspInit+0x8c>)
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	4a13      	ldr	r2, [pc, #76]	; (8001c3c <HAL_SPI_MspInit+0x8c>)
 8001bee:	f043 0304 	orr.w	r3, r3, #4
 8001bf2:	6193      	str	r3, [r2, #24]
 8001bf4:	4b11      	ldr	r3, [pc, #68]	; (8001c3c <HAL_SPI_MspInit+0x8c>)
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	f003 0304 	and.w	r3, r3, #4
 8001bfc:	60bb      	str	r3, [r7, #8]
 8001bfe:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001c00:	23a0      	movs	r3, #160	; 0xa0
 8001c02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c04:	2302      	movs	r3, #2
 8001c06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c0c:	f107 0310 	add.w	r3, r7, #16
 8001c10:	4619      	mov	r1, r3
 8001c12:	480b      	ldr	r0, [pc, #44]	; (8001c40 <HAL_SPI_MspInit+0x90>)
 8001c14:	f001 f990 	bl	8002f38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c18:	2340      	movs	r3, #64	; 0x40
 8001c1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c20:	2300      	movs	r3, #0
 8001c22:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c24:	f107 0310 	add.w	r3, r7, #16
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4805      	ldr	r0, [pc, #20]	; (8001c40 <HAL_SPI_MspInit+0x90>)
 8001c2c:	f001 f984 	bl	8002f38 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001c30:	bf00      	nop
 8001c32:	3720      	adds	r7, #32
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40013000 	.word	0x40013000
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	40010800 	.word	0x40010800

08001c44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b088      	sub	sp, #32
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c4c:	f107 0310 	add.w	r3, r7, #16
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a20      	ldr	r2, [pc, #128]	; (8001ce0 <HAL_UART_MspInit+0x9c>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d139      	bne.n	8001cd8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c64:	4b1f      	ldr	r3, [pc, #124]	; (8001ce4 <HAL_UART_MspInit+0xa0>)
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	4a1e      	ldr	r2, [pc, #120]	; (8001ce4 <HAL_UART_MspInit+0xa0>)
 8001c6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c6e:	6193      	str	r3, [r2, #24]
 8001c70:	4b1c      	ldr	r3, [pc, #112]	; (8001ce4 <HAL_UART_MspInit+0xa0>)
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7c:	4b19      	ldr	r3, [pc, #100]	; (8001ce4 <HAL_UART_MspInit+0xa0>)
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	4a18      	ldr	r2, [pc, #96]	; (8001ce4 <HAL_UART_MspInit+0xa0>)
 8001c82:	f043 0304 	orr.w	r3, r3, #4
 8001c86:	6193      	str	r3, [r2, #24]
 8001c88:	4b16      	ldr	r3, [pc, #88]	; (8001ce4 <HAL_UART_MspInit+0xa0>)
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	f003 0304 	and.w	r3, r3, #4
 8001c90:	60bb      	str	r3, [r7, #8]
 8001c92:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c98:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca2:	f107 0310 	add.w	r3, r7, #16
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	480f      	ldr	r0, [pc, #60]	; (8001ce8 <HAL_UART_MspInit+0xa4>)
 8001caa:	f001 f945 	bl	8002f38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001cae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cb2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cbc:	f107 0310 	add.w	r3, r7, #16
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4809      	ldr	r0, [pc, #36]	; (8001ce8 <HAL_UART_MspInit+0xa4>)
 8001cc4:	f001 f938 	bl	8002f38 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001cc8:	2200      	movs	r2, #0
 8001cca:	2101      	movs	r1, #1
 8001ccc:	2025      	movs	r0, #37	; 0x25
 8001cce:	f000 fe5e 	bl	800298e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001cd2:	2025      	movs	r0, #37	; 0x25
 8001cd4:	f000 fe77 	bl	80029c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001cd8:	bf00      	nop
 8001cda:	3720      	adds	r7, #32
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	40013800 	.word	0x40013800
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	40010800 	.word	0x40010800

08001cec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cf0:	e7fe      	b.n	8001cf0 <NMI_Handler+0x4>

08001cf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cf6:	e7fe      	b.n	8001cf6 <HardFault_Handler+0x4>

08001cf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cfc:	e7fe      	b.n	8001cfc <MemManage_Handler+0x4>

08001cfe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d02:	e7fe      	b.n	8001d02 <BusFault_Handler+0x4>

08001d04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d08:	e7fe      	b.n	8001d08 <UsageFault_Handler+0x4>

08001d0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bc80      	pop	{r7}
 8001d14:	4770      	bx	lr

08001d16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d16:	b480      	push	{r7}
 8001d18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bc80      	pop	{r7}
 8001d20:	4770      	bx	lr

08001d22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d22:	b480      	push	{r7}
 8001d24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d26:	bf00      	nop
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bc80      	pop	{r7}
 8001d2c:	4770      	bx	lr

08001d2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d32:	f000 f949 	bl	8001fc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d36:	bf00      	nop
 8001d38:	bd80      	pop	{r7, pc}
	...

08001d3c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d40:	4802      	ldr	r0, [pc, #8]	; (8001d4c <DMA1_Channel1_IRQHandler+0x10>)
 8001d42:	f000 ffc5 	bl	8002cd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001d46:	bf00      	nop
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	200002cc 	.word	0x200002cc

08001d50 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d54:	4802      	ldr	r0, [pc, #8]	; (8001d60 <USART1_IRQHandler+0x10>)
 8001d56:	f002 fb4f 	bl	80043f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	20000268 	.word	0x20000268

08001d64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
	return 1;
 8001d68:	2301      	movs	r3, #1
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bc80      	pop	{r7}
 8001d70:	4770      	bx	lr

08001d72 <_kill>:

int _kill(int pid, int sig)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b082      	sub	sp, #8
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
 8001d7a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d7c:	f002 ff64 	bl	8004c48 <__errno>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2216      	movs	r2, #22
 8001d84:	601a      	str	r2, [r3, #0]
	return -1;
 8001d86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <_exit>:

void _exit (int status)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b082      	sub	sp, #8
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d9a:	f04f 31ff 	mov.w	r1, #4294967295
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f7ff ffe7 	bl	8001d72 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001da4:	e7fe      	b.n	8001da4 <_exit+0x12>

08001da6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b086      	sub	sp, #24
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	60f8      	str	r0, [r7, #12]
 8001dae:	60b9      	str	r1, [r7, #8]
 8001db0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001db2:	2300      	movs	r3, #0
 8001db4:	617b      	str	r3, [r7, #20]
 8001db6:	e00a      	b.n	8001dce <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001db8:	f3af 8000 	nop.w
 8001dbc:	4601      	mov	r1, r0
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	1c5a      	adds	r2, r3, #1
 8001dc2:	60ba      	str	r2, [r7, #8]
 8001dc4:	b2ca      	uxtb	r2, r1
 8001dc6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	3301      	adds	r3, #1
 8001dcc:	617b      	str	r3, [r7, #20]
 8001dce:	697a      	ldr	r2, [r7, #20]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	dbf0      	blt.n	8001db8 <_read+0x12>
	}

return len;
 8001dd6:	687b      	ldr	r3, [r7, #4]
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3718      	adds	r7, #24
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dec:	2300      	movs	r3, #0
 8001dee:	617b      	str	r3, [r7, #20]
 8001df0:	e009      	b.n	8001e06 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	1c5a      	adds	r2, r3, #1
 8001df6:	60ba      	str	r2, [r7, #8]
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	3301      	adds	r3, #1
 8001e04:	617b      	str	r3, [r7, #20]
 8001e06:	697a      	ldr	r2, [r7, #20]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	dbf1      	blt.n	8001df2 <_write+0x12>
	}
	return len;
 8001e0e:	687b      	ldr	r3, [r7, #4]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3718      	adds	r7, #24
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <_close>:

int _close(int file)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
	return -1;
 8001e20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bc80      	pop	{r7}
 8001e2c:	4770      	bx	lr

08001e2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	b083      	sub	sp, #12
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
 8001e36:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e3e:	605a      	str	r2, [r3, #4]
	return 0;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bc80      	pop	{r7}
 8001e4a:	4770      	bx	lr

08001e4c <_isatty>:

int _isatty(int file)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
	return 1;
 8001e54:	2301      	movs	r3, #1
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr

08001e60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	607a      	str	r2, [r7, #4]
	return 0;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3714      	adds	r7, #20
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bc80      	pop	{r7}
 8001e76:	4770      	bx	lr

08001e78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e80:	4a14      	ldr	r2, [pc, #80]	; (8001ed4 <_sbrk+0x5c>)
 8001e82:	4b15      	ldr	r3, [pc, #84]	; (8001ed8 <_sbrk+0x60>)
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e8c:	4b13      	ldr	r3, [pc, #76]	; (8001edc <_sbrk+0x64>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d102      	bne.n	8001e9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e94:	4b11      	ldr	r3, [pc, #68]	; (8001edc <_sbrk+0x64>)
 8001e96:	4a12      	ldr	r2, [pc, #72]	; (8001ee0 <_sbrk+0x68>)
 8001e98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e9a:	4b10      	ldr	r3, [pc, #64]	; (8001edc <_sbrk+0x64>)
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d207      	bcs.n	8001eb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ea8:	f002 fece 	bl	8004c48 <__errno>
 8001eac:	4603      	mov	r3, r0
 8001eae:	220c      	movs	r2, #12
 8001eb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001eb6:	e009      	b.n	8001ecc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001eb8:	4b08      	ldr	r3, [pc, #32]	; (8001edc <_sbrk+0x64>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ebe:	4b07      	ldr	r3, [pc, #28]	; (8001edc <_sbrk+0x64>)
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	4a05      	ldr	r2, [pc, #20]	; (8001edc <_sbrk+0x64>)
 8001ec8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eca:	68fb      	ldr	r3, [r7, #12]
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3718      	adds	r7, #24
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	20005000 	.word	0x20005000
 8001ed8:	00000400 	.word	0x00000400
 8001edc:	20000200 	.word	0x20000200
 8001ee0:	20000398 	.word	0x20000398

08001ee4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ee8:	bf00      	nop
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bc80      	pop	{r7}
 8001eee:	4770      	bx	lr

08001ef0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ef0:	480c      	ldr	r0, [pc, #48]	; (8001f24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ef2:	490d      	ldr	r1, [pc, #52]	; (8001f28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ef4:	4a0d      	ldr	r2, [pc, #52]	; (8001f2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ef6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ef8:	e002      	b.n	8001f00 <LoopCopyDataInit>

08001efa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001efa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001efc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001efe:	3304      	adds	r3, #4

08001f00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f04:	d3f9      	bcc.n	8001efa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f06:	4a0a      	ldr	r2, [pc, #40]	; (8001f30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f08:	4c0a      	ldr	r4, [pc, #40]	; (8001f34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f0c:	e001      	b.n	8001f12 <LoopFillZerobss>

08001f0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f10:	3204      	adds	r2, #4

08001f12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f14:	d3fb      	bcc.n	8001f0e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f16:	f7ff ffe5 	bl	8001ee4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f1a:	f002 fe9b 	bl	8004c54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f1e:	f7ff f939 	bl	8001194 <main>
  bx lr
 8001f22:	4770      	bx	lr
  ldr r0, =_sdata
 8001f24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f28:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001f2c:	080099cc 	.word	0x080099cc
  ldr r2, =_sbss
 8001f30:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001f34:	20000398 	.word	0x20000398

08001f38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f38:	e7fe      	b.n	8001f38 <ADC1_2_IRQHandler>
	...

08001f3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f40:	4b08      	ldr	r3, [pc, #32]	; (8001f64 <HAL_Init+0x28>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a07      	ldr	r2, [pc, #28]	; (8001f64 <HAL_Init+0x28>)
 8001f46:	f043 0310 	orr.w	r3, r3, #16
 8001f4a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f4c:	2003      	movs	r0, #3
 8001f4e:	f000 fd13 	bl	8002978 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f52:	2000      	movs	r0, #0
 8001f54:	f000 f808 	bl	8001f68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f58:	f7ff fd90 	bl	8001a7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40022000 	.word	0x40022000

08001f68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f70:	4b12      	ldr	r3, [pc, #72]	; (8001fbc <HAL_InitTick+0x54>)
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	4b12      	ldr	r3, [pc, #72]	; (8001fc0 <HAL_InitTick+0x58>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	4619      	mov	r1, r3
 8001f7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f86:	4618      	mov	r0, r3
 8001f88:	f000 fd2b 	bl	80029e2 <HAL_SYSTICK_Config>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e00e      	b.n	8001fb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2b0f      	cmp	r3, #15
 8001f9a:	d80a      	bhi.n	8001fb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	6879      	ldr	r1, [r7, #4]
 8001fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa4:	f000 fcf3 	bl	800298e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fa8:	4a06      	ldr	r2, [pc, #24]	; (8001fc4 <HAL_InitTick+0x5c>)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	e000      	b.n	8001fb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	20000000 	.word	0x20000000
 8001fc0:	20000008 	.word	0x20000008
 8001fc4:	20000004 	.word	0x20000004

08001fc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fcc:	4b05      	ldr	r3, [pc, #20]	; (8001fe4 <HAL_IncTick+0x1c>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	4b05      	ldr	r3, [pc, #20]	; (8001fe8 <HAL_IncTick+0x20>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	4a03      	ldr	r2, [pc, #12]	; (8001fe8 <HAL_IncTick+0x20>)
 8001fda:	6013      	str	r3, [r2, #0]
}
 8001fdc:	bf00      	nop
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bc80      	pop	{r7}
 8001fe2:	4770      	bx	lr
 8001fe4:	20000008 	.word	0x20000008
 8001fe8:	20000384 	.word	0x20000384

08001fec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  return uwTick;
 8001ff0:	4b02      	ldr	r3, [pc, #8]	; (8001ffc <HAL_GetTick+0x10>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bc80      	pop	{r7}
 8001ffa:	4770      	bx	lr
 8001ffc:	20000384 	.word	0x20000384

08002000 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002008:	f7ff fff0 	bl	8001fec <HAL_GetTick>
 800200c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002018:	d005      	beq.n	8002026 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800201a:	4b0a      	ldr	r3, [pc, #40]	; (8002044 <HAL_Delay+0x44>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	461a      	mov	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	4413      	add	r3, r2
 8002024:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002026:	bf00      	nop
 8002028:	f7ff ffe0 	bl	8001fec <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	429a      	cmp	r2, r3
 8002036:	d8f7      	bhi.n	8002028 <HAL_Delay+0x28>
  {
  }
}
 8002038:	bf00      	nop
 800203a:	bf00      	nop
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20000008 	.word	0x20000008

08002048 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002050:	2300      	movs	r3, #0
 8002052:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002054:	2300      	movs	r3, #0
 8002056:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002058:	2300      	movs	r3, #0
 800205a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800205c:	2300      	movs	r3, #0
 800205e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d101      	bne.n	800206a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e0be      	b.n	80021e8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002074:	2b00      	cmp	r3, #0
 8002076:	d109      	bne.n	800208c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f7ff fd2a 	bl	8001ae0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f000 faff 	bl	8002690 <ADC_ConversionStop_Disable>
 8002092:	4603      	mov	r3, r0
 8002094:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800209a:	f003 0310 	and.w	r3, r3, #16
 800209e:	2b00      	cmp	r3, #0
 80020a0:	f040 8099 	bne.w	80021d6 <HAL_ADC_Init+0x18e>
 80020a4:	7dfb      	ldrb	r3, [r7, #23]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f040 8095 	bne.w	80021d6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80020b4:	f023 0302 	bic.w	r3, r3, #2
 80020b8:	f043 0202 	orr.w	r2, r3, #2
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80020c8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	7b1b      	ldrb	r3, [r3, #12]
 80020ce:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80020d0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80020d2:	68ba      	ldr	r2, [r7, #8]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020e0:	d003      	beq.n	80020ea <HAL_ADC_Init+0xa2>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d102      	bne.n	80020f0 <HAL_ADC_Init+0xa8>
 80020ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020ee:	e000      	b.n	80020f2 <HAL_ADC_Init+0xaa>
 80020f0:	2300      	movs	r3, #0
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	7d1b      	ldrb	r3, [r3, #20]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d119      	bne.n	8002134 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	7b1b      	ldrb	r3, [r3, #12]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d109      	bne.n	800211c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	3b01      	subs	r3, #1
 800210e:	035a      	lsls	r2, r3, #13
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	4313      	orrs	r3, r2
 8002114:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002118:	613b      	str	r3, [r7, #16]
 800211a:	e00b      	b.n	8002134 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002120:	f043 0220 	orr.w	r2, r3, #32
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212c:	f043 0201 	orr.w	r2, r3, #1
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	693a      	ldr	r2, [r7, #16]
 8002144:	430a      	orrs	r2, r1
 8002146:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	689a      	ldr	r2, [r3, #8]
 800214e:	4b28      	ldr	r3, [pc, #160]	; (80021f0 <HAL_ADC_Init+0x1a8>)
 8002150:	4013      	ands	r3, r2
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	6812      	ldr	r2, [r2, #0]
 8002156:	68b9      	ldr	r1, [r7, #8]
 8002158:	430b      	orrs	r3, r1
 800215a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002164:	d003      	beq.n	800216e <HAL_ADC_Init+0x126>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d104      	bne.n	8002178 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	3b01      	subs	r3, #1
 8002174:	051b      	lsls	r3, r3, #20
 8002176:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	430a      	orrs	r2, r1
 800218a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	689a      	ldr	r2, [r3, #8]
 8002192:	4b18      	ldr	r3, [pc, #96]	; (80021f4 <HAL_ADC_Init+0x1ac>)
 8002194:	4013      	ands	r3, r2
 8002196:	68ba      	ldr	r2, [r7, #8]
 8002198:	429a      	cmp	r2, r3
 800219a:	d10b      	bne.n	80021b4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a6:	f023 0303 	bic.w	r3, r3, #3
 80021aa:	f043 0201 	orr.w	r2, r3, #1
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80021b2:	e018      	b.n	80021e6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b8:	f023 0312 	bic.w	r3, r3, #18
 80021bc:	f043 0210 	orr.w	r2, r3, #16
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c8:	f043 0201 	orr.w	r2, r3, #1
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80021d4:	e007      	b.n	80021e6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021da:	f043 0210 	orr.w	r2, r3, #16
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80021e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3718      	adds	r7, #24
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	ffe1f7fd 	.word	0xffe1f7fd
 80021f4:	ff1f0efe 	.word	0xff1f0efe

080021f8 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002204:	2300      	movs	r3, #0
 8002206:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a64      	ldr	r2, [pc, #400]	; (80023a0 <HAL_ADC_Start_DMA+0x1a8>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d004      	beq.n	800221c <HAL_ADC_Start_DMA+0x24>
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a63      	ldr	r2, [pc, #396]	; (80023a4 <HAL_ADC_Start_DMA+0x1ac>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d106      	bne.n	800222a <HAL_ADC_Start_DMA+0x32>
 800221c:	4b60      	ldr	r3, [pc, #384]	; (80023a0 <HAL_ADC_Start_DMA+0x1a8>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002224:	2b00      	cmp	r3, #0
 8002226:	f040 80b3 	bne.w	8002390 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002230:	2b01      	cmp	r3, #1
 8002232:	d101      	bne.n	8002238 <HAL_ADC_Start_DMA+0x40>
 8002234:	2302      	movs	r3, #2
 8002236:	e0ae      	b.n	8002396 <HAL_ADC_Start_DMA+0x19e>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002240:	68f8      	ldr	r0, [r7, #12]
 8002242:	f000 f9cb 	bl	80025dc <ADC_Enable>
 8002246:	4603      	mov	r3, r0
 8002248:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800224a:	7dfb      	ldrb	r3, [r7, #23]
 800224c:	2b00      	cmp	r3, #0
 800224e:	f040 809a 	bne.w	8002386 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002256:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800225a:	f023 0301 	bic.w	r3, r3, #1
 800225e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a4e      	ldr	r2, [pc, #312]	; (80023a4 <HAL_ADC_Start_DMA+0x1ac>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d105      	bne.n	800227c <HAL_ADC_Start_DMA+0x84>
 8002270:	4b4b      	ldr	r3, [pc, #300]	; (80023a0 <HAL_ADC_Start_DMA+0x1a8>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d115      	bne.n	80022a8 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002280:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002292:	2b00      	cmp	r3, #0
 8002294:	d026      	beq.n	80022e4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800229e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80022a6:	e01d      	b.n	80022e4 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ac:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a39      	ldr	r2, [pc, #228]	; (80023a0 <HAL_ADC_Start_DMA+0x1a8>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d004      	beq.n	80022c8 <HAL_ADC_Start_DMA+0xd0>
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a38      	ldr	r2, [pc, #224]	; (80023a4 <HAL_ADC_Start_DMA+0x1ac>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d10d      	bne.n	80022e4 <HAL_ADC_Start_DMA+0xec>
 80022c8:	4b35      	ldr	r3, [pc, #212]	; (80023a0 <HAL_ADC_Start_DMA+0x1a8>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d007      	beq.n	80022e4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80022dc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d006      	beq.n	80022fe <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f4:	f023 0206 	bic.w	r2, r3, #6
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	62da      	str	r2, [r3, #44]	; 0x2c
 80022fc:	e002      	b.n	8002304 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2200      	movs	r2, #0
 8002302:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6a1b      	ldr	r3, [r3, #32]
 8002310:	4a25      	ldr	r2, [pc, #148]	; (80023a8 <HAL_ADC_Start_DMA+0x1b0>)
 8002312:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6a1b      	ldr	r3, [r3, #32]
 8002318:	4a24      	ldr	r2, [pc, #144]	; (80023ac <HAL_ADC_Start_DMA+0x1b4>)
 800231a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	4a23      	ldr	r2, [pc, #140]	; (80023b0 <HAL_ADC_Start_DMA+0x1b8>)
 8002322:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f06f 0202 	mvn.w	r2, #2
 800232c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	689a      	ldr	r2, [r3, #8]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800233c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6a18      	ldr	r0, [r3, #32]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	334c      	adds	r3, #76	; 0x4c
 8002348:	4619      	mov	r1, r3
 800234a:	68ba      	ldr	r2, [r7, #8]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f000 fbaf 	bl	8002ab0 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800235c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002360:	d108      	bne.n	8002374 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	689a      	ldr	r2, [r3, #8]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002370:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002372:	e00f      	b.n	8002394 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	689a      	ldr	r2, [r3, #8]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002382:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002384:	e006      	b.n	8002394 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800238e:	e001      	b.n	8002394 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002394:	7dfb      	ldrb	r3, [r7, #23]
}
 8002396:	4618      	mov	r0, r3
 8002398:	3718      	adds	r7, #24
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40012400 	.word	0x40012400
 80023a4:	40012800 	.word	0x40012800
 80023a8:	08002713 	.word	0x08002713
 80023ac:	0800278f 	.word	0x0800278f
 80023b0:	080027ab 	.word	0x080027ab

080023b4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bc80      	pop	{r7}
 80023c4:	4770      	bx	lr

080023c6 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80023c6:	b480      	push	{r7}
 80023c8:	b083      	sub	sp, #12
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80023ce:	bf00      	nop
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bc80      	pop	{r7}
 80023d6:	4770      	bx	lr

080023d8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bc80      	pop	{r7}
 80023e8:	4770      	bx	lr
	...

080023ec <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023f6:	2300      	movs	r3, #0
 80023f8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80023fa:	2300      	movs	r3, #0
 80023fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002404:	2b01      	cmp	r3, #1
 8002406:	d101      	bne.n	800240c <HAL_ADC_ConfigChannel+0x20>
 8002408:	2302      	movs	r3, #2
 800240a:	e0dc      	b.n	80025c6 <HAL_ADC_ConfigChannel+0x1da>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	2b06      	cmp	r3, #6
 800241a:	d81c      	bhi.n	8002456 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685a      	ldr	r2, [r3, #4]
 8002426:	4613      	mov	r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	4413      	add	r3, r2
 800242c:	3b05      	subs	r3, #5
 800242e:	221f      	movs	r2, #31
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	43db      	mvns	r3, r3
 8002436:	4019      	ands	r1, r3
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	6818      	ldr	r0, [r3, #0]
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685a      	ldr	r2, [r3, #4]
 8002440:	4613      	mov	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4413      	add	r3, r2
 8002446:	3b05      	subs	r3, #5
 8002448:	fa00 f203 	lsl.w	r2, r0, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	430a      	orrs	r2, r1
 8002452:	635a      	str	r2, [r3, #52]	; 0x34
 8002454:	e03c      	b.n	80024d0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	2b0c      	cmp	r3, #12
 800245c:	d81c      	bhi.n	8002498 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685a      	ldr	r2, [r3, #4]
 8002468:	4613      	mov	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	4413      	add	r3, r2
 800246e:	3b23      	subs	r3, #35	; 0x23
 8002470:	221f      	movs	r2, #31
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	43db      	mvns	r3, r3
 8002478:	4019      	ands	r1, r3
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	6818      	ldr	r0, [r3, #0]
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685a      	ldr	r2, [r3, #4]
 8002482:	4613      	mov	r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	4413      	add	r3, r2
 8002488:	3b23      	subs	r3, #35	; 0x23
 800248a:	fa00 f203 	lsl.w	r2, r0, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	430a      	orrs	r2, r1
 8002494:	631a      	str	r2, [r3, #48]	; 0x30
 8002496:	e01b      	b.n	80024d0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685a      	ldr	r2, [r3, #4]
 80024a2:	4613      	mov	r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	4413      	add	r3, r2
 80024a8:	3b41      	subs	r3, #65	; 0x41
 80024aa:	221f      	movs	r2, #31
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	43db      	mvns	r3, r3
 80024b2:	4019      	ands	r1, r3
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	6818      	ldr	r0, [r3, #0]
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685a      	ldr	r2, [r3, #4]
 80024bc:	4613      	mov	r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	4413      	add	r3, r2
 80024c2:	3b41      	subs	r3, #65	; 0x41
 80024c4:	fa00 f203 	lsl.w	r2, r0, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	430a      	orrs	r2, r1
 80024ce:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2b09      	cmp	r3, #9
 80024d6:	d91c      	bls.n	8002512 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	68d9      	ldr	r1, [r3, #12]
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	4613      	mov	r3, r2
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	4413      	add	r3, r2
 80024e8:	3b1e      	subs	r3, #30
 80024ea:	2207      	movs	r2, #7
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	43db      	mvns	r3, r3
 80024f2:	4019      	ands	r1, r3
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	6898      	ldr	r0, [r3, #8]
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	4613      	mov	r3, r2
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	4413      	add	r3, r2
 8002502:	3b1e      	subs	r3, #30
 8002504:	fa00 f203 	lsl.w	r2, r0, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	430a      	orrs	r2, r1
 800250e:	60da      	str	r2, [r3, #12]
 8002510:	e019      	b.n	8002546 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	6919      	ldr	r1, [r3, #16]
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	4613      	mov	r3, r2
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	4413      	add	r3, r2
 8002522:	2207      	movs	r2, #7
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	43db      	mvns	r3, r3
 800252a:	4019      	ands	r1, r3
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	6898      	ldr	r0, [r3, #8]
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	4613      	mov	r3, r2
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	4413      	add	r3, r2
 800253a:	fa00 f203 	lsl.w	r2, r0, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	430a      	orrs	r2, r1
 8002544:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2b10      	cmp	r3, #16
 800254c:	d003      	beq.n	8002556 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002552:	2b11      	cmp	r3, #17
 8002554:	d132      	bne.n	80025bc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a1d      	ldr	r2, [pc, #116]	; (80025d0 <HAL_ADC_ConfigChannel+0x1e4>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d125      	bne.n	80025ac <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d126      	bne.n	80025bc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	689a      	ldr	r2, [r3, #8]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800257c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2b10      	cmp	r3, #16
 8002584:	d11a      	bne.n	80025bc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002586:	4b13      	ldr	r3, [pc, #76]	; (80025d4 <HAL_ADC_ConfigChannel+0x1e8>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a13      	ldr	r2, [pc, #76]	; (80025d8 <HAL_ADC_ConfigChannel+0x1ec>)
 800258c:	fba2 2303 	umull	r2, r3, r2, r3
 8002590:	0c9a      	lsrs	r2, r3, #18
 8002592:	4613      	mov	r3, r2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	4413      	add	r3, r2
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800259c:	e002      	b.n	80025a4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	3b01      	subs	r3, #1
 80025a2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1f9      	bne.n	800259e <HAL_ADC_ConfigChannel+0x1b2>
 80025aa:	e007      	b.n	80025bc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b0:	f043 0220 	orr.w	r2, r3, #32
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80025c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3714      	adds	r7, #20
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bc80      	pop	{r7}
 80025ce:	4770      	bx	lr
 80025d0:	40012400 	.word	0x40012400
 80025d4:	20000000 	.word	0x20000000
 80025d8:	431bde83 	.word	0x431bde83

080025dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025e4:	2300      	movs	r3, #0
 80025e6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80025e8:	2300      	movs	r3, #0
 80025ea:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d040      	beq.n	800267c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	689a      	ldr	r2, [r3, #8]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f042 0201 	orr.w	r2, r2, #1
 8002608:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800260a:	4b1f      	ldr	r3, [pc, #124]	; (8002688 <ADC_Enable+0xac>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a1f      	ldr	r2, [pc, #124]	; (800268c <ADC_Enable+0xb0>)
 8002610:	fba2 2303 	umull	r2, r3, r2, r3
 8002614:	0c9b      	lsrs	r3, r3, #18
 8002616:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002618:	e002      	b.n	8002620 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	3b01      	subs	r3, #1
 800261e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1f9      	bne.n	800261a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002626:	f7ff fce1 	bl	8001fec <HAL_GetTick>
 800262a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800262c:	e01f      	b.n	800266e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800262e:	f7ff fcdd 	bl	8001fec <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d918      	bls.n	800266e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	2b01      	cmp	r3, #1
 8002648:	d011      	beq.n	800266e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264e:	f043 0210 	orr.w	r2, r3, #16
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265a:	f043 0201 	orr.w	r2, r3, #1
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e007      	b.n	800267e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f003 0301 	and.w	r3, r3, #1
 8002678:	2b01      	cmp	r3, #1
 800267a:	d1d8      	bne.n	800262e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3710      	adds	r7, #16
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	20000000 	.word	0x20000000
 800268c:	431bde83 	.word	0x431bde83

08002690 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002698:	2300      	movs	r3, #0
 800269a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d12e      	bne.n	8002708 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	689a      	ldr	r2, [r3, #8]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f022 0201 	bic.w	r2, r2, #1
 80026b8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80026ba:	f7ff fc97 	bl	8001fec <HAL_GetTick>
 80026be:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80026c0:	e01b      	b.n	80026fa <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80026c2:	f7ff fc93 	bl	8001fec <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d914      	bls.n	80026fa <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d10d      	bne.n	80026fa <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e2:	f043 0210 	orr.w	r2, r3, #16
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ee:	f043 0201 	orr.w	r2, r3, #1
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e007      	b.n	800270a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	2b01      	cmp	r3, #1
 8002706:	d0dc      	beq.n	80026c2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b084      	sub	sp, #16
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002724:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002728:	2b00      	cmp	r3, #0
 800272a:	d127      	bne.n	800277c <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002730:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002742:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002746:	d115      	bne.n	8002774 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800274c:	2b00      	cmp	r3, #0
 800274e:	d111      	bne.n	8002774 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002754:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002760:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d105      	bne.n	8002774 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276c:	f043 0201 	orr.w	r2, r3, #1
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002774:	68f8      	ldr	r0, [r7, #12]
 8002776:	f7ff fe1d 	bl	80023b4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800277a:	e004      	b.n	8002786 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6a1b      	ldr	r3, [r3, #32]
 8002780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	4798      	blx	r3
}
 8002786:	bf00      	nop
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800278e:	b580      	push	{r7, lr}
 8002790:	b084      	sub	sp, #16
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800279c:	68f8      	ldr	r0, [r7, #12]
 800279e:	f7ff fe12 	bl	80023c6 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027a2:	bf00      	nop
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b084      	sub	sp, #16
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c8:	f043 0204 	orr.w	r2, r3, #4
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80027d0:	68f8      	ldr	r0, [r7, #12]
 80027d2:	f7ff fe01 	bl	80023d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027d6:	bf00      	nop
 80027d8:	3710      	adds	r7, #16
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
	...

080027e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f003 0307 	and.w	r3, r3, #7
 80027ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027f0:	4b0c      	ldr	r3, [pc, #48]	; (8002824 <__NVIC_SetPriorityGrouping+0x44>)
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027f6:	68ba      	ldr	r2, [r7, #8]
 80027f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027fc:	4013      	ands	r3, r2
 80027fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002808:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800280c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002810:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002812:	4a04      	ldr	r2, [pc, #16]	; (8002824 <__NVIC_SetPriorityGrouping+0x44>)
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	60d3      	str	r3, [r2, #12]
}
 8002818:	bf00      	nop
 800281a:	3714      	adds	r7, #20
 800281c:	46bd      	mov	sp, r7
 800281e:	bc80      	pop	{r7}
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	e000ed00 	.word	0xe000ed00

08002828 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800282c:	4b04      	ldr	r3, [pc, #16]	; (8002840 <__NVIC_GetPriorityGrouping+0x18>)
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	0a1b      	lsrs	r3, r3, #8
 8002832:	f003 0307 	and.w	r3, r3, #7
}
 8002836:	4618      	mov	r0, r3
 8002838:	46bd      	mov	sp, r7
 800283a:	bc80      	pop	{r7}
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	e000ed00 	.word	0xe000ed00

08002844 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	4603      	mov	r3, r0
 800284c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800284e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002852:	2b00      	cmp	r3, #0
 8002854:	db0b      	blt.n	800286e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002856:	79fb      	ldrb	r3, [r7, #7]
 8002858:	f003 021f 	and.w	r2, r3, #31
 800285c:	4906      	ldr	r1, [pc, #24]	; (8002878 <__NVIC_EnableIRQ+0x34>)
 800285e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002862:	095b      	lsrs	r3, r3, #5
 8002864:	2001      	movs	r0, #1
 8002866:	fa00 f202 	lsl.w	r2, r0, r2
 800286a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800286e:	bf00      	nop
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	bc80      	pop	{r7}
 8002876:	4770      	bx	lr
 8002878:	e000e100 	.word	0xe000e100

0800287c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	4603      	mov	r3, r0
 8002884:	6039      	str	r1, [r7, #0]
 8002886:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288c:	2b00      	cmp	r3, #0
 800288e:	db0a      	blt.n	80028a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	b2da      	uxtb	r2, r3
 8002894:	490c      	ldr	r1, [pc, #48]	; (80028c8 <__NVIC_SetPriority+0x4c>)
 8002896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289a:	0112      	lsls	r2, r2, #4
 800289c:	b2d2      	uxtb	r2, r2
 800289e:	440b      	add	r3, r1
 80028a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028a4:	e00a      	b.n	80028bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	b2da      	uxtb	r2, r3
 80028aa:	4908      	ldr	r1, [pc, #32]	; (80028cc <__NVIC_SetPriority+0x50>)
 80028ac:	79fb      	ldrb	r3, [r7, #7]
 80028ae:	f003 030f 	and.w	r3, r3, #15
 80028b2:	3b04      	subs	r3, #4
 80028b4:	0112      	lsls	r2, r2, #4
 80028b6:	b2d2      	uxtb	r2, r2
 80028b8:	440b      	add	r3, r1
 80028ba:	761a      	strb	r2, [r3, #24]
}
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bc80      	pop	{r7}
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	e000e100 	.word	0xe000e100
 80028cc:	e000ed00 	.word	0xe000ed00

080028d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b089      	sub	sp, #36	; 0x24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f003 0307 	and.w	r3, r3, #7
 80028e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	f1c3 0307 	rsb	r3, r3, #7
 80028ea:	2b04      	cmp	r3, #4
 80028ec:	bf28      	it	cs
 80028ee:	2304      	movcs	r3, #4
 80028f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	3304      	adds	r3, #4
 80028f6:	2b06      	cmp	r3, #6
 80028f8:	d902      	bls.n	8002900 <NVIC_EncodePriority+0x30>
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	3b03      	subs	r3, #3
 80028fe:	e000      	b.n	8002902 <NVIC_EncodePriority+0x32>
 8002900:	2300      	movs	r3, #0
 8002902:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002904:	f04f 32ff 	mov.w	r2, #4294967295
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	fa02 f303 	lsl.w	r3, r2, r3
 800290e:	43da      	mvns	r2, r3
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	401a      	ands	r2, r3
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002918:	f04f 31ff 	mov.w	r1, #4294967295
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	fa01 f303 	lsl.w	r3, r1, r3
 8002922:	43d9      	mvns	r1, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002928:	4313      	orrs	r3, r2
         );
}
 800292a:	4618      	mov	r0, r3
 800292c:	3724      	adds	r7, #36	; 0x24
 800292e:	46bd      	mov	sp, r7
 8002930:	bc80      	pop	{r7}
 8002932:	4770      	bx	lr

08002934 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	3b01      	subs	r3, #1
 8002940:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002944:	d301      	bcc.n	800294a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002946:	2301      	movs	r3, #1
 8002948:	e00f      	b.n	800296a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800294a:	4a0a      	ldr	r2, [pc, #40]	; (8002974 <SysTick_Config+0x40>)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	3b01      	subs	r3, #1
 8002950:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002952:	210f      	movs	r1, #15
 8002954:	f04f 30ff 	mov.w	r0, #4294967295
 8002958:	f7ff ff90 	bl	800287c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800295c:	4b05      	ldr	r3, [pc, #20]	; (8002974 <SysTick_Config+0x40>)
 800295e:	2200      	movs	r2, #0
 8002960:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002962:	4b04      	ldr	r3, [pc, #16]	; (8002974 <SysTick_Config+0x40>)
 8002964:	2207      	movs	r2, #7
 8002966:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	e000e010 	.word	0xe000e010

08002978 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f7ff ff2d 	bl	80027e0 <__NVIC_SetPriorityGrouping>
}
 8002986:	bf00      	nop
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}

0800298e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800298e:	b580      	push	{r7, lr}
 8002990:	b086      	sub	sp, #24
 8002992:	af00      	add	r7, sp, #0
 8002994:	4603      	mov	r3, r0
 8002996:	60b9      	str	r1, [r7, #8]
 8002998:	607a      	str	r2, [r7, #4]
 800299a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800299c:	2300      	movs	r3, #0
 800299e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029a0:	f7ff ff42 	bl	8002828 <__NVIC_GetPriorityGrouping>
 80029a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	68b9      	ldr	r1, [r7, #8]
 80029aa:	6978      	ldr	r0, [r7, #20]
 80029ac:	f7ff ff90 	bl	80028d0 <NVIC_EncodePriority>
 80029b0:	4602      	mov	r2, r0
 80029b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029b6:	4611      	mov	r1, r2
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7ff ff5f 	bl	800287c <__NVIC_SetPriority>
}
 80029be:	bf00      	nop
 80029c0:	3718      	adds	r7, #24
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b082      	sub	sp, #8
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	4603      	mov	r3, r0
 80029ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7ff ff35 	bl	8002844 <__NVIC_EnableIRQ>
}
 80029da:	bf00      	nop
 80029dc:	3708      	adds	r7, #8
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b082      	sub	sp, #8
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f7ff ffa2 	bl	8002934 <SysTick_Config>
 80029f0:	4603      	mov	r3, r0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
	...

080029fc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a04:	2300      	movs	r3, #0
 8002a06:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d101      	bne.n	8002a12 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e043      	b.n	8002a9a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	461a      	mov	r2, r3
 8002a18:	4b22      	ldr	r3, [pc, #136]	; (8002aa4 <HAL_DMA_Init+0xa8>)
 8002a1a:	4413      	add	r3, r2
 8002a1c:	4a22      	ldr	r2, [pc, #136]	; (8002aa8 <HAL_DMA_Init+0xac>)
 8002a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a22:	091b      	lsrs	r3, r3, #4
 8002a24:	009a      	lsls	r2, r3, #2
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a1f      	ldr	r2, [pc, #124]	; (8002aac <HAL_DMA_Init+0xb0>)
 8002a2e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2202      	movs	r2, #2
 8002a34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002a46:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002a4a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002a54:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	69db      	ldr	r3, [r3, #28]
 8002a72:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68fa      	ldr	r2, [r7, #12]
 8002a80:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3714      	adds	r7, #20
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bc80      	pop	{r7}
 8002aa2:	4770      	bx	lr
 8002aa4:	bffdfff8 	.word	0xbffdfff8
 8002aa8:	cccccccd 	.word	0xcccccccd
 8002aac:	40020000 	.word	0x40020000

08002ab0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
 8002abc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d101      	bne.n	8002ad0 <HAL_DMA_Start_IT+0x20>
 8002acc:	2302      	movs	r3, #2
 8002ace:	e04a      	b.n	8002b66 <HAL_DMA_Start_IT+0xb6>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d13a      	bne.n	8002b58 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2202      	movs	r2, #2
 8002ae6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2200      	movs	r2, #0
 8002aee:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f022 0201 	bic.w	r2, r2, #1
 8002afe:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	68b9      	ldr	r1, [r7, #8]
 8002b06:	68f8      	ldr	r0, [r7, #12]
 8002b08:	f000 f9e8 	bl	8002edc <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d008      	beq.n	8002b26 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f042 020e 	orr.w	r2, r2, #14
 8002b22:	601a      	str	r2, [r3, #0]
 8002b24:	e00f      	b.n	8002b46 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f022 0204 	bic.w	r2, r2, #4
 8002b34:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f042 020a 	orr.w	r2, r2, #10
 8002b44:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f042 0201 	orr.w	r2, r2, #1
 8002b54:	601a      	str	r2, [r3, #0]
 8002b56:	e005      	b.n	8002b64 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002b60:	2302      	movs	r3, #2
 8002b62:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002b64:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3718      	adds	r7, #24
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b085      	sub	sp, #20
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b76:	2300      	movs	r3, #0
 8002b78:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d008      	beq.n	8002b96 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2204      	movs	r2, #4
 8002b88:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e020      	b.n	8002bd8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f022 020e 	bic.w	r2, r2, #14
 8002ba4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f022 0201 	bic.w	r2, r2, #1
 8002bb4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	fa01 f202 	lsl.w	r2, r1, r2
 8002bc4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3714      	adds	r7, #20
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bc80      	pop	{r7}
 8002be0:	4770      	bx	lr
	...

08002be4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bec:	2300      	movs	r3, #0
 8002bee:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d005      	beq.n	8002c06 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2204      	movs	r2, #4
 8002bfe:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	73fb      	strb	r3, [r7, #15]
 8002c04:	e051      	b.n	8002caa <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f022 020e 	bic.w	r2, r2, #14
 8002c14:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f022 0201 	bic.w	r2, r2, #1
 8002c24:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a22      	ldr	r2, [pc, #136]	; (8002cb4 <HAL_DMA_Abort_IT+0xd0>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d029      	beq.n	8002c84 <HAL_DMA_Abort_IT+0xa0>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a20      	ldr	r2, [pc, #128]	; (8002cb8 <HAL_DMA_Abort_IT+0xd4>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d022      	beq.n	8002c80 <HAL_DMA_Abort_IT+0x9c>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a1f      	ldr	r2, [pc, #124]	; (8002cbc <HAL_DMA_Abort_IT+0xd8>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d01a      	beq.n	8002c7a <HAL_DMA_Abort_IT+0x96>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a1d      	ldr	r2, [pc, #116]	; (8002cc0 <HAL_DMA_Abort_IT+0xdc>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d012      	beq.n	8002c74 <HAL_DMA_Abort_IT+0x90>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a1c      	ldr	r2, [pc, #112]	; (8002cc4 <HAL_DMA_Abort_IT+0xe0>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d00a      	beq.n	8002c6e <HAL_DMA_Abort_IT+0x8a>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a1a      	ldr	r2, [pc, #104]	; (8002cc8 <HAL_DMA_Abort_IT+0xe4>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d102      	bne.n	8002c68 <HAL_DMA_Abort_IT+0x84>
 8002c62:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002c66:	e00e      	b.n	8002c86 <HAL_DMA_Abort_IT+0xa2>
 8002c68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c6c:	e00b      	b.n	8002c86 <HAL_DMA_Abort_IT+0xa2>
 8002c6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c72:	e008      	b.n	8002c86 <HAL_DMA_Abort_IT+0xa2>
 8002c74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c78:	e005      	b.n	8002c86 <HAL_DMA_Abort_IT+0xa2>
 8002c7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c7e:	e002      	b.n	8002c86 <HAL_DMA_Abort_IT+0xa2>
 8002c80:	2310      	movs	r3, #16
 8002c82:	e000      	b.n	8002c86 <HAL_DMA_Abort_IT+0xa2>
 8002c84:	2301      	movs	r3, #1
 8002c86:	4a11      	ldr	r2, [pc, #68]	; (8002ccc <HAL_DMA_Abort_IT+0xe8>)
 8002c88:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d003      	beq.n	8002caa <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	4798      	blx	r3
    } 
  }
  return status;
 8002caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3710      	adds	r7, #16
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	40020008 	.word	0x40020008
 8002cb8:	4002001c 	.word	0x4002001c
 8002cbc:	40020030 	.word	0x40020030
 8002cc0:	40020044 	.word	0x40020044
 8002cc4:	40020058 	.word	0x40020058
 8002cc8:	4002006c 	.word	0x4002006c
 8002ccc:	40020000 	.word	0x40020000

08002cd0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cec:	2204      	movs	r2, #4
 8002cee:	409a      	lsls	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d04f      	beq.n	8002d98 <HAL_DMA_IRQHandler+0xc8>
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	f003 0304 	and.w	r3, r3, #4
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d04a      	beq.n	8002d98 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0320 	and.w	r3, r3, #32
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d107      	bne.n	8002d20 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f022 0204 	bic.w	r2, r2, #4
 8002d1e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a66      	ldr	r2, [pc, #408]	; (8002ec0 <HAL_DMA_IRQHandler+0x1f0>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d029      	beq.n	8002d7e <HAL_DMA_IRQHandler+0xae>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a65      	ldr	r2, [pc, #404]	; (8002ec4 <HAL_DMA_IRQHandler+0x1f4>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d022      	beq.n	8002d7a <HAL_DMA_IRQHandler+0xaa>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a63      	ldr	r2, [pc, #396]	; (8002ec8 <HAL_DMA_IRQHandler+0x1f8>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d01a      	beq.n	8002d74 <HAL_DMA_IRQHandler+0xa4>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a62      	ldr	r2, [pc, #392]	; (8002ecc <HAL_DMA_IRQHandler+0x1fc>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d012      	beq.n	8002d6e <HAL_DMA_IRQHandler+0x9e>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a60      	ldr	r2, [pc, #384]	; (8002ed0 <HAL_DMA_IRQHandler+0x200>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d00a      	beq.n	8002d68 <HAL_DMA_IRQHandler+0x98>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a5f      	ldr	r2, [pc, #380]	; (8002ed4 <HAL_DMA_IRQHandler+0x204>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d102      	bne.n	8002d62 <HAL_DMA_IRQHandler+0x92>
 8002d5c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d60:	e00e      	b.n	8002d80 <HAL_DMA_IRQHandler+0xb0>
 8002d62:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002d66:	e00b      	b.n	8002d80 <HAL_DMA_IRQHandler+0xb0>
 8002d68:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002d6c:	e008      	b.n	8002d80 <HAL_DMA_IRQHandler+0xb0>
 8002d6e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d72:	e005      	b.n	8002d80 <HAL_DMA_IRQHandler+0xb0>
 8002d74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d78:	e002      	b.n	8002d80 <HAL_DMA_IRQHandler+0xb0>
 8002d7a:	2340      	movs	r3, #64	; 0x40
 8002d7c:	e000      	b.n	8002d80 <HAL_DMA_IRQHandler+0xb0>
 8002d7e:	2304      	movs	r3, #4
 8002d80:	4a55      	ldr	r2, [pc, #340]	; (8002ed8 <HAL_DMA_IRQHandler+0x208>)
 8002d82:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	f000 8094 	beq.w	8002eb6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002d96:	e08e      	b.n	8002eb6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9c:	2202      	movs	r2, #2
 8002d9e:	409a      	lsls	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	4013      	ands	r3, r2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d056      	beq.n	8002e56 <HAL_DMA_IRQHandler+0x186>
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d051      	beq.n	8002e56 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0320 	and.w	r3, r3, #32
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d10b      	bne.n	8002dd8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f022 020a 	bic.w	r2, r2, #10
 8002dce:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a38      	ldr	r2, [pc, #224]	; (8002ec0 <HAL_DMA_IRQHandler+0x1f0>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d029      	beq.n	8002e36 <HAL_DMA_IRQHandler+0x166>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a37      	ldr	r2, [pc, #220]	; (8002ec4 <HAL_DMA_IRQHandler+0x1f4>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d022      	beq.n	8002e32 <HAL_DMA_IRQHandler+0x162>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a35      	ldr	r2, [pc, #212]	; (8002ec8 <HAL_DMA_IRQHandler+0x1f8>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d01a      	beq.n	8002e2c <HAL_DMA_IRQHandler+0x15c>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a34      	ldr	r2, [pc, #208]	; (8002ecc <HAL_DMA_IRQHandler+0x1fc>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d012      	beq.n	8002e26 <HAL_DMA_IRQHandler+0x156>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a32      	ldr	r2, [pc, #200]	; (8002ed0 <HAL_DMA_IRQHandler+0x200>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d00a      	beq.n	8002e20 <HAL_DMA_IRQHandler+0x150>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a31      	ldr	r2, [pc, #196]	; (8002ed4 <HAL_DMA_IRQHandler+0x204>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d102      	bne.n	8002e1a <HAL_DMA_IRQHandler+0x14a>
 8002e14:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e18:	e00e      	b.n	8002e38 <HAL_DMA_IRQHandler+0x168>
 8002e1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e1e:	e00b      	b.n	8002e38 <HAL_DMA_IRQHandler+0x168>
 8002e20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e24:	e008      	b.n	8002e38 <HAL_DMA_IRQHandler+0x168>
 8002e26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e2a:	e005      	b.n	8002e38 <HAL_DMA_IRQHandler+0x168>
 8002e2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e30:	e002      	b.n	8002e38 <HAL_DMA_IRQHandler+0x168>
 8002e32:	2320      	movs	r3, #32
 8002e34:	e000      	b.n	8002e38 <HAL_DMA_IRQHandler+0x168>
 8002e36:	2302      	movs	r3, #2
 8002e38:	4a27      	ldr	r2, [pc, #156]	; (8002ed8 <HAL_DMA_IRQHandler+0x208>)
 8002e3a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d034      	beq.n	8002eb6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002e54:	e02f      	b.n	8002eb6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	2208      	movs	r2, #8
 8002e5c:	409a      	lsls	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	4013      	ands	r3, r2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d028      	beq.n	8002eb8 <HAL_DMA_IRQHandler+0x1e8>
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	f003 0308 	and.w	r3, r3, #8
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d023      	beq.n	8002eb8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f022 020e 	bic.w	r2, r2, #14
 8002e7e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e88:	2101      	movs	r1, #1
 8002e8a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e8e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d004      	beq.n	8002eb8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	4798      	blx	r3
    }
  }
  return;
 8002eb6:	bf00      	nop
 8002eb8:	bf00      	nop
}
 8002eba:	3710      	adds	r7, #16
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	40020008 	.word	0x40020008
 8002ec4:	4002001c 	.word	0x4002001c
 8002ec8:	40020030 	.word	0x40020030
 8002ecc:	40020044 	.word	0x40020044
 8002ed0:	40020058 	.word	0x40020058
 8002ed4:	4002006c 	.word	0x4002006c
 8002ed8:	40020000 	.word	0x40020000

08002edc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
 8002ee8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef2:	2101      	movs	r1, #1
 8002ef4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ef8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	683a      	ldr	r2, [r7, #0]
 8002f00:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	2b10      	cmp	r3, #16
 8002f08:	d108      	bne.n	8002f1c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68ba      	ldr	r2, [r7, #8]
 8002f18:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002f1a:	e007      	b.n	8002f2c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	68ba      	ldr	r2, [r7, #8]
 8002f22:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	60da      	str	r2, [r3, #12]
}
 8002f2c:	bf00      	nop
 8002f2e:	3714      	adds	r7, #20
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bc80      	pop	{r7}
 8002f34:	4770      	bx	lr
	...

08002f38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b08b      	sub	sp, #44	; 0x2c
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f42:	2300      	movs	r3, #0
 8002f44:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002f46:	2300      	movs	r3, #0
 8002f48:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f4a:	e169      	b.n	8003220 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	69fa      	ldr	r2, [r7, #28]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	f040 8158 	bne.w	800321a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	4a9a      	ldr	r2, [pc, #616]	; (80031d8 <HAL_GPIO_Init+0x2a0>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d05e      	beq.n	8003032 <HAL_GPIO_Init+0xfa>
 8002f74:	4a98      	ldr	r2, [pc, #608]	; (80031d8 <HAL_GPIO_Init+0x2a0>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d875      	bhi.n	8003066 <HAL_GPIO_Init+0x12e>
 8002f7a:	4a98      	ldr	r2, [pc, #608]	; (80031dc <HAL_GPIO_Init+0x2a4>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d058      	beq.n	8003032 <HAL_GPIO_Init+0xfa>
 8002f80:	4a96      	ldr	r2, [pc, #600]	; (80031dc <HAL_GPIO_Init+0x2a4>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d86f      	bhi.n	8003066 <HAL_GPIO_Init+0x12e>
 8002f86:	4a96      	ldr	r2, [pc, #600]	; (80031e0 <HAL_GPIO_Init+0x2a8>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d052      	beq.n	8003032 <HAL_GPIO_Init+0xfa>
 8002f8c:	4a94      	ldr	r2, [pc, #592]	; (80031e0 <HAL_GPIO_Init+0x2a8>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d869      	bhi.n	8003066 <HAL_GPIO_Init+0x12e>
 8002f92:	4a94      	ldr	r2, [pc, #592]	; (80031e4 <HAL_GPIO_Init+0x2ac>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d04c      	beq.n	8003032 <HAL_GPIO_Init+0xfa>
 8002f98:	4a92      	ldr	r2, [pc, #584]	; (80031e4 <HAL_GPIO_Init+0x2ac>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d863      	bhi.n	8003066 <HAL_GPIO_Init+0x12e>
 8002f9e:	4a92      	ldr	r2, [pc, #584]	; (80031e8 <HAL_GPIO_Init+0x2b0>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d046      	beq.n	8003032 <HAL_GPIO_Init+0xfa>
 8002fa4:	4a90      	ldr	r2, [pc, #576]	; (80031e8 <HAL_GPIO_Init+0x2b0>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d85d      	bhi.n	8003066 <HAL_GPIO_Init+0x12e>
 8002faa:	2b12      	cmp	r3, #18
 8002fac:	d82a      	bhi.n	8003004 <HAL_GPIO_Init+0xcc>
 8002fae:	2b12      	cmp	r3, #18
 8002fb0:	d859      	bhi.n	8003066 <HAL_GPIO_Init+0x12e>
 8002fb2:	a201      	add	r2, pc, #4	; (adr r2, 8002fb8 <HAL_GPIO_Init+0x80>)
 8002fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fb8:	08003033 	.word	0x08003033
 8002fbc:	0800300d 	.word	0x0800300d
 8002fc0:	0800301f 	.word	0x0800301f
 8002fc4:	08003061 	.word	0x08003061
 8002fc8:	08003067 	.word	0x08003067
 8002fcc:	08003067 	.word	0x08003067
 8002fd0:	08003067 	.word	0x08003067
 8002fd4:	08003067 	.word	0x08003067
 8002fd8:	08003067 	.word	0x08003067
 8002fdc:	08003067 	.word	0x08003067
 8002fe0:	08003067 	.word	0x08003067
 8002fe4:	08003067 	.word	0x08003067
 8002fe8:	08003067 	.word	0x08003067
 8002fec:	08003067 	.word	0x08003067
 8002ff0:	08003067 	.word	0x08003067
 8002ff4:	08003067 	.word	0x08003067
 8002ff8:	08003067 	.word	0x08003067
 8002ffc:	08003015 	.word	0x08003015
 8003000:	08003029 	.word	0x08003029
 8003004:	4a79      	ldr	r2, [pc, #484]	; (80031ec <HAL_GPIO_Init+0x2b4>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d013      	beq.n	8003032 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800300a:	e02c      	b.n	8003066 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	623b      	str	r3, [r7, #32]
          break;
 8003012:	e029      	b.n	8003068 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	3304      	adds	r3, #4
 800301a:	623b      	str	r3, [r7, #32]
          break;
 800301c:	e024      	b.n	8003068 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	3308      	adds	r3, #8
 8003024:	623b      	str	r3, [r7, #32]
          break;
 8003026:	e01f      	b.n	8003068 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	330c      	adds	r3, #12
 800302e:	623b      	str	r3, [r7, #32]
          break;
 8003030:	e01a      	b.n	8003068 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d102      	bne.n	8003040 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800303a:	2304      	movs	r3, #4
 800303c:	623b      	str	r3, [r7, #32]
          break;
 800303e:	e013      	b.n	8003068 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d105      	bne.n	8003054 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003048:	2308      	movs	r3, #8
 800304a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	69fa      	ldr	r2, [r7, #28]
 8003050:	611a      	str	r2, [r3, #16]
          break;
 8003052:	e009      	b.n	8003068 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003054:	2308      	movs	r3, #8
 8003056:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	69fa      	ldr	r2, [r7, #28]
 800305c:	615a      	str	r2, [r3, #20]
          break;
 800305e:	e003      	b.n	8003068 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003060:	2300      	movs	r3, #0
 8003062:	623b      	str	r3, [r7, #32]
          break;
 8003064:	e000      	b.n	8003068 <HAL_GPIO_Init+0x130>
          break;
 8003066:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	2bff      	cmp	r3, #255	; 0xff
 800306c:	d801      	bhi.n	8003072 <HAL_GPIO_Init+0x13a>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	e001      	b.n	8003076 <HAL_GPIO_Init+0x13e>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	3304      	adds	r3, #4
 8003076:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	2bff      	cmp	r3, #255	; 0xff
 800307c:	d802      	bhi.n	8003084 <HAL_GPIO_Init+0x14c>
 800307e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	e002      	b.n	800308a <HAL_GPIO_Init+0x152>
 8003084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003086:	3b08      	subs	r3, #8
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	210f      	movs	r1, #15
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	fa01 f303 	lsl.w	r3, r1, r3
 8003098:	43db      	mvns	r3, r3
 800309a:	401a      	ands	r2, r3
 800309c:	6a39      	ldr	r1, [r7, #32]
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	fa01 f303 	lsl.w	r3, r1, r3
 80030a4:	431a      	orrs	r2, r3
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	f000 80b1 	beq.w	800321a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80030b8:	4b4d      	ldr	r3, [pc, #308]	; (80031f0 <HAL_GPIO_Init+0x2b8>)
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	4a4c      	ldr	r2, [pc, #304]	; (80031f0 <HAL_GPIO_Init+0x2b8>)
 80030be:	f043 0301 	orr.w	r3, r3, #1
 80030c2:	6193      	str	r3, [r2, #24]
 80030c4:	4b4a      	ldr	r3, [pc, #296]	; (80031f0 <HAL_GPIO_Init+0x2b8>)
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	f003 0301 	and.w	r3, r3, #1
 80030cc:	60bb      	str	r3, [r7, #8]
 80030ce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80030d0:	4a48      	ldr	r2, [pc, #288]	; (80031f4 <HAL_GPIO_Init+0x2bc>)
 80030d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d4:	089b      	lsrs	r3, r3, #2
 80030d6:	3302      	adds	r3, #2
 80030d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030dc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80030de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e0:	f003 0303 	and.w	r3, r3, #3
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	220f      	movs	r2, #15
 80030e8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ec:	43db      	mvns	r3, r3
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	4013      	ands	r3, r2
 80030f2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a40      	ldr	r2, [pc, #256]	; (80031f8 <HAL_GPIO_Init+0x2c0>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d013      	beq.n	8003124 <HAL_GPIO_Init+0x1ec>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4a3f      	ldr	r2, [pc, #252]	; (80031fc <HAL_GPIO_Init+0x2c4>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d00d      	beq.n	8003120 <HAL_GPIO_Init+0x1e8>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a3e      	ldr	r2, [pc, #248]	; (8003200 <HAL_GPIO_Init+0x2c8>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d007      	beq.n	800311c <HAL_GPIO_Init+0x1e4>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a3d      	ldr	r2, [pc, #244]	; (8003204 <HAL_GPIO_Init+0x2cc>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d101      	bne.n	8003118 <HAL_GPIO_Init+0x1e0>
 8003114:	2303      	movs	r3, #3
 8003116:	e006      	b.n	8003126 <HAL_GPIO_Init+0x1ee>
 8003118:	2304      	movs	r3, #4
 800311a:	e004      	b.n	8003126 <HAL_GPIO_Init+0x1ee>
 800311c:	2302      	movs	r3, #2
 800311e:	e002      	b.n	8003126 <HAL_GPIO_Init+0x1ee>
 8003120:	2301      	movs	r3, #1
 8003122:	e000      	b.n	8003126 <HAL_GPIO_Init+0x1ee>
 8003124:	2300      	movs	r3, #0
 8003126:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003128:	f002 0203 	and.w	r2, r2, #3
 800312c:	0092      	lsls	r2, r2, #2
 800312e:	4093      	lsls	r3, r2
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	4313      	orrs	r3, r2
 8003134:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003136:	492f      	ldr	r1, [pc, #188]	; (80031f4 <HAL_GPIO_Init+0x2bc>)
 8003138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313a:	089b      	lsrs	r3, r3, #2
 800313c:	3302      	adds	r3, #2
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d006      	beq.n	800315e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003150:	4b2d      	ldr	r3, [pc, #180]	; (8003208 <HAL_GPIO_Init+0x2d0>)
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	492c      	ldr	r1, [pc, #176]	; (8003208 <HAL_GPIO_Init+0x2d0>)
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	4313      	orrs	r3, r2
 800315a:	600b      	str	r3, [r1, #0]
 800315c:	e006      	b.n	800316c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800315e:	4b2a      	ldr	r3, [pc, #168]	; (8003208 <HAL_GPIO_Init+0x2d0>)
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	43db      	mvns	r3, r3
 8003166:	4928      	ldr	r1, [pc, #160]	; (8003208 <HAL_GPIO_Init+0x2d0>)
 8003168:	4013      	ands	r3, r2
 800316a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d006      	beq.n	8003186 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003178:	4b23      	ldr	r3, [pc, #140]	; (8003208 <HAL_GPIO_Init+0x2d0>)
 800317a:	685a      	ldr	r2, [r3, #4]
 800317c:	4922      	ldr	r1, [pc, #136]	; (8003208 <HAL_GPIO_Init+0x2d0>)
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	4313      	orrs	r3, r2
 8003182:	604b      	str	r3, [r1, #4]
 8003184:	e006      	b.n	8003194 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003186:	4b20      	ldr	r3, [pc, #128]	; (8003208 <HAL_GPIO_Init+0x2d0>)
 8003188:	685a      	ldr	r2, [r3, #4]
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	43db      	mvns	r3, r3
 800318e:	491e      	ldr	r1, [pc, #120]	; (8003208 <HAL_GPIO_Init+0x2d0>)
 8003190:	4013      	ands	r3, r2
 8003192:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d006      	beq.n	80031ae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80031a0:	4b19      	ldr	r3, [pc, #100]	; (8003208 <HAL_GPIO_Init+0x2d0>)
 80031a2:	689a      	ldr	r2, [r3, #8]
 80031a4:	4918      	ldr	r1, [pc, #96]	; (8003208 <HAL_GPIO_Init+0x2d0>)
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	608b      	str	r3, [r1, #8]
 80031ac:	e006      	b.n	80031bc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80031ae:	4b16      	ldr	r3, [pc, #88]	; (8003208 <HAL_GPIO_Init+0x2d0>)
 80031b0:	689a      	ldr	r2, [r3, #8]
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	43db      	mvns	r3, r3
 80031b6:	4914      	ldr	r1, [pc, #80]	; (8003208 <HAL_GPIO_Init+0x2d0>)
 80031b8:	4013      	ands	r3, r2
 80031ba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d021      	beq.n	800320c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80031c8:	4b0f      	ldr	r3, [pc, #60]	; (8003208 <HAL_GPIO_Init+0x2d0>)
 80031ca:	68da      	ldr	r2, [r3, #12]
 80031cc:	490e      	ldr	r1, [pc, #56]	; (8003208 <HAL_GPIO_Init+0x2d0>)
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	60cb      	str	r3, [r1, #12]
 80031d4:	e021      	b.n	800321a <HAL_GPIO_Init+0x2e2>
 80031d6:	bf00      	nop
 80031d8:	10320000 	.word	0x10320000
 80031dc:	10310000 	.word	0x10310000
 80031e0:	10220000 	.word	0x10220000
 80031e4:	10210000 	.word	0x10210000
 80031e8:	10120000 	.word	0x10120000
 80031ec:	10110000 	.word	0x10110000
 80031f0:	40021000 	.word	0x40021000
 80031f4:	40010000 	.word	0x40010000
 80031f8:	40010800 	.word	0x40010800
 80031fc:	40010c00 	.word	0x40010c00
 8003200:	40011000 	.word	0x40011000
 8003204:	40011400 	.word	0x40011400
 8003208:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800320c:	4b0b      	ldr	r3, [pc, #44]	; (800323c <HAL_GPIO_Init+0x304>)
 800320e:	68da      	ldr	r2, [r3, #12]
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	43db      	mvns	r3, r3
 8003214:	4909      	ldr	r1, [pc, #36]	; (800323c <HAL_GPIO_Init+0x304>)
 8003216:	4013      	ands	r3, r2
 8003218:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800321a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321c:	3301      	adds	r3, #1
 800321e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003226:	fa22 f303 	lsr.w	r3, r2, r3
 800322a:	2b00      	cmp	r3, #0
 800322c:	f47f ae8e 	bne.w	8002f4c <HAL_GPIO_Init+0x14>
  }
}
 8003230:	bf00      	nop
 8003232:	bf00      	nop
 8003234:	372c      	adds	r7, #44	; 0x2c
 8003236:	46bd      	mov	sp, r7
 8003238:	bc80      	pop	{r7}
 800323a:	4770      	bx	lr
 800323c:	40010400 	.word	0x40010400

08003240 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	460b      	mov	r3, r1
 800324a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689a      	ldr	r2, [r3, #8]
 8003250:	887b      	ldrh	r3, [r7, #2]
 8003252:	4013      	ands	r3, r2
 8003254:	2b00      	cmp	r3, #0
 8003256:	d002      	beq.n	800325e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003258:	2301      	movs	r3, #1
 800325a:	73fb      	strb	r3, [r7, #15]
 800325c:	e001      	b.n	8003262 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800325e:	2300      	movs	r3, #0
 8003260:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003262:	7bfb      	ldrb	r3, [r7, #15]
}
 8003264:	4618      	mov	r0, r3
 8003266:	3714      	adds	r7, #20
 8003268:	46bd      	mov	sp, r7
 800326a:	bc80      	pop	{r7}
 800326c:	4770      	bx	lr

0800326e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800326e:	b480      	push	{r7}
 8003270:	b083      	sub	sp, #12
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
 8003276:	460b      	mov	r3, r1
 8003278:	807b      	strh	r3, [r7, #2]
 800327a:	4613      	mov	r3, r2
 800327c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800327e:	787b      	ldrb	r3, [r7, #1]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d003      	beq.n	800328c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003284:	887a      	ldrh	r2, [r7, #2]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800328a:	e003      	b.n	8003294 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800328c:	887b      	ldrh	r3, [r7, #2]
 800328e:	041a      	lsls	r2, r3, #16
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	611a      	str	r2, [r3, #16]
}
 8003294:	bf00      	nop
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	bc80      	pop	{r7}
 800329c:	4770      	bx	lr
	...

080032a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b086      	sub	sp, #24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e26c      	b.n	800378c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	f000 8087 	beq.w	80033ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032c0:	4b92      	ldr	r3, [pc, #584]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f003 030c 	and.w	r3, r3, #12
 80032c8:	2b04      	cmp	r3, #4
 80032ca:	d00c      	beq.n	80032e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80032cc:	4b8f      	ldr	r3, [pc, #572]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f003 030c 	and.w	r3, r3, #12
 80032d4:	2b08      	cmp	r3, #8
 80032d6:	d112      	bne.n	80032fe <HAL_RCC_OscConfig+0x5e>
 80032d8:	4b8c      	ldr	r3, [pc, #560]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e4:	d10b      	bne.n	80032fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032e6:	4b89      	ldr	r3, [pc, #548]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d06c      	beq.n	80033cc <HAL_RCC_OscConfig+0x12c>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d168      	bne.n	80033cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e246      	b.n	800378c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003306:	d106      	bne.n	8003316 <HAL_RCC_OscConfig+0x76>
 8003308:	4b80      	ldr	r3, [pc, #512]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a7f      	ldr	r2, [pc, #508]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 800330e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003312:	6013      	str	r3, [r2, #0]
 8003314:	e02e      	b.n	8003374 <HAL_RCC_OscConfig+0xd4>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d10c      	bne.n	8003338 <HAL_RCC_OscConfig+0x98>
 800331e:	4b7b      	ldr	r3, [pc, #492]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a7a      	ldr	r2, [pc, #488]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 8003324:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003328:	6013      	str	r3, [r2, #0]
 800332a:	4b78      	ldr	r3, [pc, #480]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a77      	ldr	r2, [pc, #476]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 8003330:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003334:	6013      	str	r3, [r2, #0]
 8003336:	e01d      	b.n	8003374 <HAL_RCC_OscConfig+0xd4>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003340:	d10c      	bne.n	800335c <HAL_RCC_OscConfig+0xbc>
 8003342:	4b72      	ldr	r3, [pc, #456]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a71      	ldr	r2, [pc, #452]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 8003348:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800334c:	6013      	str	r3, [r2, #0]
 800334e:	4b6f      	ldr	r3, [pc, #444]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a6e      	ldr	r2, [pc, #440]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 8003354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003358:	6013      	str	r3, [r2, #0]
 800335a:	e00b      	b.n	8003374 <HAL_RCC_OscConfig+0xd4>
 800335c:	4b6b      	ldr	r3, [pc, #428]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a6a      	ldr	r2, [pc, #424]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 8003362:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003366:	6013      	str	r3, [r2, #0]
 8003368:	4b68      	ldr	r3, [pc, #416]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a67      	ldr	r2, [pc, #412]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 800336e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003372:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d013      	beq.n	80033a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800337c:	f7fe fe36 	bl	8001fec <HAL_GetTick>
 8003380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003382:	e008      	b.n	8003396 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003384:	f7fe fe32 	bl	8001fec <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b64      	cmp	r3, #100	; 0x64
 8003390:	d901      	bls.n	8003396 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e1fa      	b.n	800378c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003396:	4b5d      	ldr	r3, [pc, #372]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d0f0      	beq.n	8003384 <HAL_RCC_OscConfig+0xe4>
 80033a2:	e014      	b.n	80033ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a4:	f7fe fe22 	bl	8001fec <HAL_GetTick>
 80033a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033aa:	e008      	b.n	80033be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033ac:	f7fe fe1e 	bl	8001fec <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b64      	cmp	r3, #100	; 0x64
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e1e6      	b.n	800378c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033be:	4b53      	ldr	r3, [pc, #332]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1f0      	bne.n	80033ac <HAL_RCC_OscConfig+0x10c>
 80033ca:	e000      	b.n	80033ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d063      	beq.n	80034a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033da:	4b4c      	ldr	r3, [pc, #304]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f003 030c 	and.w	r3, r3, #12
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00b      	beq.n	80033fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80033e6:	4b49      	ldr	r3, [pc, #292]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f003 030c 	and.w	r3, r3, #12
 80033ee:	2b08      	cmp	r3, #8
 80033f0:	d11c      	bne.n	800342c <HAL_RCC_OscConfig+0x18c>
 80033f2:	4b46      	ldr	r3, [pc, #280]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d116      	bne.n	800342c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033fe:	4b43      	ldr	r3, [pc, #268]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d005      	beq.n	8003416 <HAL_RCC_OscConfig+0x176>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d001      	beq.n	8003416 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e1ba      	b.n	800378c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003416:	4b3d      	ldr	r3, [pc, #244]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	695b      	ldr	r3, [r3, #20]
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	4939      	ldr	r1, [pc, #228]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 8003426:	4313      	orrs	r3, r2
 8003428:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800342a:	e03a      	b.n	80034a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d020      	beq.n	8003476 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003434:	4b36      	ldr	r3, [pc, #216]	; (8003510 <HAL_RCC_OscConfig+0x270>)
 8003436:	2201      	movs	r2, #1
 8003438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800343a:	f7fe fdd7 	bl	8001fec <HAL_GetTick>
 800343e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003440:	e008      	b.n	8003454 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003442:	f7fe fdd3 	bl	8001fec <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d901      	bls.n	8003454 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e19b      	b.n	800378c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003454:	4b2d      	ldr	r3, [pc, #180]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0302 	and.w	r3, r3, #2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d0f0      	beq.n	8003442 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003460:	4b2a      	ldr	r3, [pc, #168]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	695b      	ldr	r3, [r3, #20]
 800346c:	00db      	lsls	r3, r3, #3
 800346e:	4927      	ldr	r1, [pc, #156]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 8003470:	4313      	orrs	r3, r2
 8003472:	600b      	str	r3, [r1, #0]
 8003474:	e015      	b.n	80034a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003476:	4b26      	ldr	r3, [pc, #152]	; (8003510 <HAL_RCC_OscConfig+0x270>)
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800347c:	f7fe fdb6 	bl	8001fec <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003482:	e008      	b.n	8003496 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003484:	f7fe fdb2 	bl	8001fec <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e17a      	b.n	800378c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003496:	4b1d      	ldr	r3, [pc, #116]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1f0      	bne.n	8003484 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0308 	and.w	r3, r3, #8
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d03a      	beq.n	8003524 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d019      	beq.n	80034ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034b6:	4b17      	ldr	r3, [pc, #92]	; (8003514 <HAL_RCC_OscConfig+0x274>)
 80034b8:	2201      	movs	r2, #1
 80034ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034bc:	f7fe fd96 	bl	8001fec <HAL_GetTick>
 80034c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034c2:	e008      	b.n	80034d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034c4:	f7fe fd92 	bl	8001fec <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e15a      	b.n	800378c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034d6:	4b0d      	ldr	r3, [pc, #52]	; (800350c <HAL_RCC_OscConfig+0x26c>)
 80034d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d0f0      	beq.n	80034c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80034e2:	2001      	movs	r0, #1
 80034e4:	f000 fad8 	bl	8003a98 <RCC_Delay>
 80034e8:	e01c      	b.n	8003524 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034ea:	4b0a      	ldr	r3, [pc, #40]	; (8003514 <HAL_RCC_OscConfig+0x274>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034f0:	f7fe fd7c 	bl	8001fec <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034f6:	e00f      	b.n	8003518 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034f8:	f7fe fd78 	bl	8001fec <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b02      	cmp	r3, #2
 8003504:	d908      	bls.n	8003518 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e140      	b.n	800378c <HAL_RCC_OscConfig+0x4ec>
 800350a:	bf00      	nop
 800350c:	40021000 	.word	0x40021000
 8003510:	42420000 	.word	0x42420000
 8003514:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003518:	4b9e      	ldr	r3, [pc, #632]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 800351a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351c:	f003 0302 	and.w	r3, r3, #2
 8003520:	2b00      	cmp	r3, #0
 8003522:	d1e9      	bne.n	80034f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0304 	and.w	r3, r3, #4
 800352c:	2b00      	cmp	r3, #0
 800352e:	f000 80a6 	beq.w	800367e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003532:	2300      	movs	r3, #0
 8003534:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003536:	4b97      	ldr	r3, [pc, #604]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 8003538:	69db      	ldr	r3, [r3, #28]
 800353a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d10d      	bne.n	800355e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003542:	4b94      	ldr	r3, [pc, #592]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 8003544:	69db      	ldr	r3, [r3, #28]
 8003546:	4a93      	ldr	r2, [pc, #588]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 8003548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800354c:	61d3      	str	r3, [r2, #28]
 800354e:	4b91      	ldr	r3, [pc, #580]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 8003550:	69db      	ldr	r3, [r3, #28]
 8003552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003556:	60bb      	str	r3, [r7, #8]
 8003558:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800355a:	2301      	movs	r3, #1
 800355c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800355e:	4b8e      	ldr	r3, [pc, #568]	; (8003798 <HAL_RCC_OscConfig+0x4f8>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003566:	2b00      	cmp	r3, #0
 8003568:	d118      	bne.n	800359c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800356a:	4b8b      	ldr	r3, [pc, #556]	; (8003798 <HAL_RCC_OscConfig+0x4f8>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a8a      	ldr	r2, [pc, #552]	; (8003798 <HAL_RCC_OscConfig+0x4f8>)
 8003570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003574:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003576:	f7fe fd39 	bl	8001fec <HAL_GetTick>
 800357a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800357c:	e008      	b.n	8003590 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800357e:	f7fe fd35 	bl	8001fec <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	2b64      	cmp	r3, #100	; 0x64
 800358a:	d901      	bls.n	8003590 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e0fd      	b.n	800378c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003590:	4b81      	ldr	r3, [pc, #516]	; (8003798 <HAL_RCC_OscConfig+0x4f8>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003598:	2b00      	cmp	r3, #0
 800359a:	d0f0      	beq.n	800357e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d106      	bne.n	80035b2 <HAL_RCC_OscConfig+0x312>
 80035a4:	4b7b      	ldr	r3, [pc, #492]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 80035a6:	6a1b      	ldr	r3, [r3, #32]
 80035a8:	4a7a      	ldr	r2, [pc, #488]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 80035aa:	f043 0301 	orr.w	r3, r3, #1
 80035ae:	6213      	str	r3, [r2, #32]
 80035b0:	e02d      	b.n	800360e <HAL_RCC_OscConfig+0x36e>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d10c      	bne.n	80035d4 <HAL_RCC_OscConfig+0x334>
 80035ba:	4b76      	ldr	r3, [pc, #472]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 80035bc:	6a1b      	ldr	r3, [r3, #32]
 80035be:	4a75      	ldr	r2, [pc, #468]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 80035c0:	f023 0301 	bic.w	r3, r3, #1
 80035c4:	6213      	str	r3, [r2, #32]
 80035c6:	4b73      	ldr	r3, [pc, #460]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	4a72      	ldr	r2, [pc, #456]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 80035cc:	f023 0304 	bic.w	r3, r3, #4
 80035d0:	6213      	str	r3, [r2, #32]
 80035d2:	e01c      	b.n	800360e <HAL_RCC_OscConfig+0x36e>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	2b05      	cmp	r3, #5
 80035da:	d10c      	bne.n	80035f6 <HAL_RCC_OscConfig+0x356>
 80035dc:	4b6d      	ldr	r3, [pc, #436]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 80035de:	6a1b      	ldr	r3, [r3, #32]
 80035e0:	4a6c      	ldr	r2, [pc, #432]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 80035e2:	f043 0304 	orr.w	r3, r3, #4
 80035e6:	6213      	str	r3, [r2, #32]
 80035e8:	4b6a      	ldr	r3, [pc, #424]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 80035ea:	6a1b      	ldr	r3, [r3, #32]
 80035ec:	4a69      	ldr	r2, [pc, #420]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 80035ee:	f043 0301 	orr.w	r3, r3, #1
 80035f2:	6213      	str	r3, [r2, #32]
 80035f4:	e00b      	b.n	800360e <HAL_RCC_OscConfig+0x36e>
 80035f6:	4b67      	ldr	r3, [pc, #412]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 80035f8:	6a1b      	ldr	r3, [r3, #32]
 80035fa:	4a66      	ldr	r2, [pc, #408]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 80035fc:	f023 0301 	bic.w	r3, r3, #1
 8003600:	6213      	str	r3, [r2, #32]
 8003602:	4b64      	ldr	r3, [pc, #400]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 8003604:	6a1b      	ldr	r3, [r3, #32]
 8003606:	4a63      	ldr	r2, [pc, #396]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 8003608:	f023 0304 	bic.w	r3, r3, #4
 800360c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d015      	beq.n	8003642 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003616:	f7fe fce9 	bl	8001fec <HAL_GetTick>
 800361a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800361c:	e00a      	b.n	8003634 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800361e:	f7fe fce5 	bl	8001fec <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	f241 3288 	movw	r2, #5000	; 0x1388
 800362c:	4293      	cmp	r3, r2
 800362e:	d901      	bls.n	8003634 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e0ab      	b.n	800378c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003634:	4b57      	ldr	r3, [pc, #348]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 8003636:	6a1b      	ldr	r3, [r3, #32]
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d0ee      	beq.n	800361e <HAL_RCC_OscConfig+0x37e>
 8003640:	e014      	b.n	800366c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003642:	f7fe fcd3 	bl	8001fec <HAL_GetTick>
 8003646:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003648:	e00a      	b.n	8003660 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800364a:	f7fe fccf 	bl	8001fec <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	f241 3288 	movw	r2, #5000	; 0x1388
 8003658:	4293      	cmp	r3, r2
 800365a:	d901      	bls.n	8003660 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e095      	b.n	800378c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003660:	4b4c      	ldr	r3, [pc, #304]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 8003662:	6a1b      	ldr	r3, [r3, #32]
 8003664:	f003 0302 	and.w	r3, r3, #2
 8003668:	2b00      	cmp	r3, #0
 800366a:	d1ee      	bne.n	800364a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800366c:	7dfb      	ldrb	r3, [r7, #23]
 800366e:	2b01      	cmp	r3, #1
 8003670:	d105      	bne.n	800367e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003672:	4b48      	ldr	r3, [pc, #288]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 8003674:	69db      	ldr	r3, [r3, #28]
 8003676:	4a47      	ldr	r2, [pc, #284]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 8003678:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800367c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	69db      	ldr	r3, [r3, #28]
 8003682:	2b00      	cmp	r3, #0
 8003684:	f000 8081 	beq.w	800378a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003688:	4b42      	ldr	r3, [pc, #264]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f003 030c 	and.w	r3, r3, #12
 8003690:	2b08      	cmp	r3, #8
 8003692:	d061      	beq.n	8003758 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	69db      	ldr	r3, [r3, #28]
 8003698:	2b02      	cmp	r3, #2
 800369a:	d146      	bne.n	800372a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800369c:	4b3f      	ldr	r3, [pc, #252]	; (800379c <HAL_RCC_OscConfig+0x4fc>)
 800369e:	2200      	movs	r2, #0
 80036a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a2:	f7fe fca3 	bl	8001fec <HAL_GetTick>
 80036a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036a8:	e008      	b.n	80036bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036aa:	f7fe fc9f 	bl	8001fec <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d901      	bls.n	80036bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e067      	b.n	800378c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036bc:	4b35      	ldr	r3, [pc, #212]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d1f0      	bne.n	80036aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a1b      	ldr	r3, [r3, #32]
 80036cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036d0:	d108      	bne.n	80036e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80036d2:	4b30      	ldr	r3, [pc, #192]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	492d      	ldr	r1, [pc, #180]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036e4:	4b2b      	ldr	r3, [pc, #172]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a19      	ldr	r1, [r3, #32]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f4:	430b      	orrs	r3, r1
 80036f6:	4927      	ldr	r1, [pc, #156]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036fc:	4b27      	ldr	r3, [pc, #156]	; (800379c <HAL_RCC_OscConfig+0x4fc>)
 80036fe:	2201      	movs	r2, #1
 8003700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003702:	f7fe fc73 	bl	8001fec <HAL_GetTick>
 8003706:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003708:	e008      	b.n	800371c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800370a:	f7fe fc6f 	bl	8001fec <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	2b02      	cmp	r3, #2
 8003716:	d901      	bls.n	800371c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e037      	b.n	800378c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800371c:	4b1d      	ldr	r3, [pc, #116]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d0f0      	beq.n	800370a <HAL_RCC_OscConfig+0x46a>
 8003728:	e02f      	b.n	800378a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800372a:	4b1c      	ldr	r3, [pc, #112]	; (800379c <HAL_RCC_OscConfig+0x4fc>)
 800372c:	2200      	movs	r2, #0
 800372e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003730:	f7fe fc5c 	bl	8001fec <HAL_GetTick>
 8003734:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003736:	e008      	b.n	800374a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003738:	f7fe fc58 	bl	8001fec <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b02      	cmp	r3, #2
 8003744:	d901      	bls.n	800374a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e020      	b.n	800378c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800374a:	4b12      	ldr	r3, [pc, #72]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1f0      	bne.n	8003738 <HAL_RCC_OscConfig+0x498>
 8003756:	e018      	b.n	800378a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	69db      	ldr	r3, [r3, #28]
 800375c:	2b01      	cmp	r3, #1
 800375e:	d101      	bne.n	8003764 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e013      	b.n	800378c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003764:	4b0b      	ldr	r3, [pc, #44]	; (8003794 <HAL_RCC_OscConfig+0x4f4>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a1b      	ldr	r3, [r3, #32]
 8003774:	429a      	cmp	r2, r3
 8003776:	d106      	bne.n	8003786 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003782:	429a      	cmp	r2, r3
 8003784:	d001      	beq.n	800378a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e000      	b.n	800378c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	3718      	adds	r7, #24
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	40021000 	.word	0x40021000
 8003798:	40007000 	.word	0x40007000
 800379c:	42420060 	.word	0x42420060

080037a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d101      	bne.n	80037b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e0d0      	b.n	8003956 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037b4:	4b6a      	ldr	r3, [pc, #424]	; (8003960 <HAL_RCC_ClockConfig+0x1c0>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0307 	and.w	r3, r3, #7
 80037bc:	683a      	ldr	r2, [r7, #0]
 80037be:	429a      	cmp	r2, r3
 80037c0:	d910      	bls.n	80037e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037c2:	4b67      	ldr	r3, [pc, #412]	; (8003960 <HAL_RCC_ClockConfig+0x1c0>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f023 0207 	bic.w	r2, r3, #7
 80037ca:	4965      	ldr	r1, [pc, #404]	; (8003960 <HAL_RCC_ClockConfig+0x1c0>)
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037d2:	4b63      	ldr	r3, [pc, #396]	; (8003960 <HAL_RCC_ClockConfig+0x1c0>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0307 	and.w	r3, r3, #7
 80037da:	683a      	ldr	r2, [r7, #0]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d001      	beq.n	80037e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e0b8      	b.n	8003956 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0302 	and.w	r3, r3, #2
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d020      	beq.n	8003832 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0304 	and.w	r3, r3, #4
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d005      	beq.n	8003808 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037fc:	4b59      	ldr	r3, [pc, #356]	; (8003964 <HAL_RCC_ClockConfig+0x1c4>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	4a58      	ldr	r2, [pc, #352]	; (8003964 <HAL_RCC_ClockConfig+0x1c4>)
 8003802:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003806:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0308 	and.w	r3, r3, #8
 8003810:	2b00      	cmp	r3, #0
 8003812:	d005      	beq.n	8003820 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003814:	4b53      	ldr	r3, [pc, #332]	; (8003964 <HAL_RCC_ClockConfig+0x1c4>)
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	4a52      	ldr	r2, [pc, #328]	; (8003964 <HAL_RCC_ClockConfig+0x1c4>)
 800381a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800381e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003820:	4b50      	ldr	r3, [pc, #320]	; (8003964 <HAL_RCC_ClockConfig+0x1c4>)
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	494d      	ldr	r1, [pc, #308]	; (8003964 <HAL_RCC_ClockConfig+0x1c4>)
 800382e:	4313      	orrs	r3, r2
 8003830:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	2b00      	cmp	r3, #0
 800383c:	d040      	beq.n	80038c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	2b01      	cmp	r3, #1
 8003844:	d107      	bne.n	8003856 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003846:	4b47      	ldr	r3, [pc, #284]	; (8003964 <HAL_RCC_ClockConfig+0x1c4>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d115      	bne.n	800387e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e07f      	b.n	8003956 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	2b02      	cmp	r3, #2
 800385c:	d107      	bne.n	800386e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800385e:	4b41      	ldr	r3, [pc, #260]	; (8003964 <HAL_RCC_ClockConfig+0x1c4>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d109      	bne.n	800387e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e073      	b.n	8003956 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800386e:	4b3d      	ldr	r3, [pc, #244]	; (8003964 <HAL_RCC_ClockConfig+0x1c4>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b00      	cmp	r3, #0
 8003878:	d101      	bne.n	800387e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e06b      	b.n	8003956 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800387e:	4b39      	ldr	r3, [pc, #228]	; (8003964 <HAL_RCC_ClockConfig+0x1c4>)
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f023 0203 	bic.w	r2, r3, #3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	4936      	ldr	r1, [pc, #216]	; (8003964 <HAL_RCC_ClockConfig+0x1c4>)
 800388c:	4313      	orrs	r3, r2
 800388e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003890:	f7fe fbac 	bl	8001fec <HAL_GetTick>
 8003894:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003896:	e00a      	b.n	80038ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003898:	f7fe fba8 	bl	8001fec <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e053      	b.n	8003956 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ae:	4b2d      	ldr	r3, [pc, #180]	; (8003964 <HAL_RCC_ClockConfig+0x1c4>)
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f003 020c 	and.w	r2, r3, #12
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	429a      	cmp	r2, r3
 80038be:	d1eb      	bne.n	8003898 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038c0:	4b27      	ldr	r3, [pc, #156]	; (8003960 <HAL_RCC_ClockConfig+0x1c0>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0307 	and.w	r3, r3, #7
 80038c8:	683a      	ldr	r2, [r7, #0]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d210      	bcs.n	80038f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ce:	4b24      	ldr	r3, [pc, #144]	; (8003960 <HAL_RCC_ClockConfig+0x1c0>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f023 0207 	bic.w	r2, r3, #7
 80038d6:	4922      	ldr	r1, [pc, #136]	; (8003960 <HAL_RCC_ClockConfig+0x1c0>)
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	4313      	orrs	r3, r2
 80038dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038de:	4b20      	ldr	r3, [pc, #128]	; (8003960 <HAL_RCC_ClockConfig+0x1c0>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0307 	and.w	r3, r3, #7
 80038e6:	683a      	ldr	r2, [r7, #0]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d001      	beq.n	80038f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e032      	b.n	8003956 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0304 	and.w	r3, r3, #4
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d008      	beq.n	800390e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038fc:	4b19      	ldr	r3, [pc, #100]	; (8003964 <HAL_RCC_ClockConfig+0x1c4>)
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	4916      	ldr	r1, [pc, #88]	; (8003964 <HAL_RCC_ClockConfig+0x1c4>)
 800390a:	4313      	orrs	r3, r2
 800390c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0308 	and.w	r3, r3, #8
 8003916:	2b00      	cmp	r3, #0
 8003918:	d009      	beq.n	800392e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800391a:	4b12      	ldr	r3, [pc, #72]	; (8003964 <HAL_RCC_ClockConfig+0x1c4>)
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	00db      	lsls	r3, r3, #3
 8003928:	490e      	ldr	r1, [pc, #56]	; (8003964 <HAL_RCC_ClockConfig+0x1c4>)
 800392a:	4313      	orrs	r3, r2
 800392c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800392e:	f000 f821 	bl	8003974 <HAL_RCC_GetSysClockFreq>
 8003932:	4602      	mov	r2, r0
 8003934:	4b0b      	ldr	r3, [pc, #44]	; (8003964 <HAL_RCC_ClockConfig+0x1c4>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	091b      	lsrs	r3, r3, #4
 800393a:	f003 030f 	and.w	r3, r3, #15
 800393e:	490a      	ldr	r1, [pc, #40]	; (8003968 <HAL_RCC_ClockConfig+0x1c8>)
 8003940:	5ccb      	ldrb	r3, [r1, r3]
 8003942:	fa22 f303 	lsr.w	r3, r2, r3
 8003946:	4a09      	ldr	r2, [pc, #36]	; (800396c <HAL_RCC_ClockConfig+0x1cc>)
 8003948:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800394a:	4b09      	ldr	r3, [pc, #36]	; (8003970 <HAL_RCC_ClockConfig+0x1d0>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4618      	mov	r0, r3
 8003950:	f7fe fb0a 	bl	8001f68 <HAL_InitTick>

  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3710      	adds	r7, #16
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	40022000 	.word	0x40022000
 8003964:	40021000 	.word	0x40021000
 8003968:	080094f8 	.word	0x080094f8
 800396c:	20000000 	.word	0x20000000
 8003970:	20000004 	.word	0x20000004

08003974 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003974:	b490      	push	{r4, r7}
 8003976:	b08a      	sub	sp, #40	; 0x28
 8003978:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800397a:	4b2a      	ldr	r3, [pc, #168]	; (8003a24 <HAL_RCC_GetSysClockFreq+0xb0>)
 800397c:	1d3c      	adds	r4, r7, #4
 800397e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003980:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003984:	f240 2301 	movw	r3, #513	; 0x201
 8003988:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800398a:	2300      	movs	r3, #0
 800398c:	61fb      	str	r3, [r7, #28]
 800398e:	2300      	movs	r3, #0
 8003990:	61bb      	str	r3, [r7, #24]
 8003992:	2300      	movs	r3, #0
 8003994:	627b      	str	r3, [r7, #36]	; 0x24
 8003996:	2300      	movs	r3, #0
 8003998:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800399a:	2300      	movs	r3, #0
 800399c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800399e:	4b22      	ldr	r3, [pc, #136]	; (8003a28 <HAL_RCC_GetSysClockFreq+0xb4>)
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	f003 030c 	and.w	r3, r3, #12
 80039aa:	2b04      	cmp	r3, #4
 80039ac:	d002      	beq.n	80039b4 <HAL_RCC_GetSysClockFreq+0x40>
 80039ae:	2b08      	cmp	r3, #8
 80039b0:	d003      	beq.n	80039ba <HAL_RCC_GetSysClockFreq+0x46>
 80039b2:	e02d      	b.n	8003a10 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039b4:	4b1d      	ldr	r3, [pc, #116]	; (8003a2c <HAL_RCC_GetSysClockFreq+0xb8>)
 80039b6:	623b      	str	r3, [r7, #32]
      break;
 80039b8:	e02d      	b.n	8003a16 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	0c9b      	lsrs	r3, r3, #18
 80039be:	f003 030f 	and.w	r3, r3, #15
 80039c2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80039c6:	4413      	add	r3, r2
 80039c8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80039cc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d013      	beq.n	8003a00 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80039d8:	4b13      	ldr	r3, [pc, #76]	; (8003a28 <HAL_RCC_GetSysClockFreq+0xb4>)
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	0c5b      	lsrs	r3, r3, #17
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80039e6:	4413      	add	r3, r2
 80039e8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80039ec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	4a0e      	ldr	r2, [pc, #56]	; (8003a2c <HAL_RCC_GetSysClockFreq+0xb8>)
 80039f2:	fb02 f203 	mul.w	r2, r2, r3
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039fc:	627b      	str	r3, [r7, #36]	; 0x24
 80039fe:	e004      	b.n	8003a0a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	4a0b      	ldr	r2, [pc, #44]	; (8003a30 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a04:	fb02 f303 	mul.w	r3, r2, r3
 8003a08:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0c:	623b      	str	r3, [r7, #32]
      break;
 8003a0e:	e002      	b.n	8003a16 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a10:	4b06      	ldr	r3, [pc, #24]	; (8003a2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a12:	623b      	str	r3, [r7, #32]
      break;
 8003a14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a16:	6a3b      	ldr	r3, [r7, #32]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3728      	adds	r7, #40	; 0x28
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bc90      	pop	{r4, r7}
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	080094e8 	.word	0x080094e8
 8003a28:	40021000 	.word	0x40021000
 8003a2c:	007a1200 	.word	0x007a1200
 8003a30:	003d0900 	.word	0x003d0900

08003a34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a34:	b480      	push	{r7}
 8003a36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a38:	4b02      	ldr	r3, [pc, #8]	; (8003a44 <HAL_RCC_GetHCLKFreq+0x10>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bc80      	pop	{r7}
 8003a42:	4770      	bx	lr
 8003a44:	20000000 	.word	0x20000000

08003a48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a4c:	f7ff fff2 	bl	8003a34 <HAL_RCC_GetHCLKFreq>
 8003a50:	4602      	mov	r2, r0
 8003a52:	4b05      	ldr	r3, [pc, #20]	; (8003a68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	0a1b      	lsrs	r3, r3, #8
 8003a58:	f003 0307 	and.w	r3, r3, #7
 8003a5c:	4903      	ldr	r1, [pc, #12]	; (8003a6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a5e:	5ccb      	ldrb	r3, [r1, r3]
 8003a60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	40021000 	.word	0x40021000
 8003a6c:	08009508 	.word	0x08009508

08003a70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a74:	f7ff ffde 	bl	8003a34 <HAL_RCC_GetHCLKFreq>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	4b05      	ldr	r3, [pc, #20]	; (8003a90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	0adb      	lsrs	r3, r3, #11
 8003a80:	f003 0307 	and.w	r3, r3, #7
 8003a84:	4903      	ldr	r1, [pc, #12]	; (8003a94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a86:	5ccb      	ldrb	r3, [r1, r3]
 8003a88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	40021000 	.word	0x40021000
 8003a94:	08009508 	.word	0x08009508

08003a98 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b085      	sub	sp, #20
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003aa0:	4b0a      	ldr	r3, [pc, #40]	; (8003acc <RCC_Delay+0x34>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a0a      	ldr	r2, [pc, #40]	; (8003ad0 <RCC_Delay+0x38>)
 8003aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aaa:	0a5b      	lsrs	r3, r3, #9
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	fb02 f303 	mul.w	r3, r2, r3
 8003ab2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ab4:	bf00      	nop
  }
  while (Delay --);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	1e5a      	subs	r2, r3, #1
 8003aba:	60fa      	str	r2, [r7, #12]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1f9      	bne.n	8003ab4 <RCC_Delay+0x1c>
}
 8003ac0:	bf00      	nop
 8003ac2:	bf00      	nop
 8003ac4:	3714      	adds	r7, #20
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bc80      	pop	{r7}
 8003aca:	4770      	bx	lr
 8003acc:	20000000 	.word	0x20000000
 8003ad0:	10624dd3 	.word	0x10624dd3

08003ad4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b086      	sub	sp, #24
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003adc:	2300      	movs	r3, #0
 8003ade:	613b      	str	r3, [r7, #16]
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0301 	and.w	r3, r3, #1
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d07d      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003af0:	2300      	movs	r3, #0
 8003af2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003af4:	4b4f      	ldr	r3, [pc, #316]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003af6:	69db      	ldr	r3, [r3, #28]
 8003af8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d10d      	bne.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b00:	4b4c      	ldr	r3, [pc, #304]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b02:	69db      	ldr	r3, [r3, #28]
 8003b04:	4a4b      	ldr	r2, [pc, #300]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b0a:	61d3      	str	r3, [r2, #28]
 8003b0c:	4b49      	ldr	r3, [pc, #292]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b0e:	69db      	ldr	r3, [r3, #28]
 8003b10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b14:	60bb      	str	r3, [r7, #8]
 8003b16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b1c:	4b46      	ldr	r3, [pc, #280]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d118      	bne.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b28:	4b43      	ldr	r3, [pc, #268]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a42      	ldr	r2, [pc, #264]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b32:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b34:	f7fe fa5a 	bl	8001fec <HAL_GetTick>
 8003b38:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b3a:	e008      	b.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b3c:	f7fe fa56 	bl	8001fec <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	2b64      	cmp	r3, #100	; 0x64
 8003b48:	d901      	bls.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e06d      	b.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b4e:	4b3a      	ldr	r3, [pc, #232]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d0f0      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b5a:	4b36      	ldr	r3, [pc, #216]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b5c:	6a1b      	ldr	r3, [r3, #32]
 8003b5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b62:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d02e      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d027      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b78:	4b2e      	ldr	r3, [pc, #184]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b7a:	6a1b      	ldr	r3, [r3, #32]
 8003b7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b80:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b82:	4b2e      	ldr	r3, [pc, #184]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b84:	2201      	movs	r2, #1
 8003b86:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b88:	4b2c      	ldr	r3, [pc, #176]	; (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b8e:	4a29      	ldr	r2, [pc, #164]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f003 0301 	and.w	r3, r3, #1
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d014      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b9e:	f7fe fa25 	bl	8001fec <HAL_GetTick>
 8003ba2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ba4:	e00a      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ba6:	f7fe fa21 	bl	8001fec <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d901      	bls.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e036      	b.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bbc:	4b1d      	ldr	r3, [pc, #116]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bbe:	6a1b      	ldr	r3, [r3, #32]
 8003bc0:	f003 0302 	and.w	r3, r3, #2
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d0ee      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bc8:	4b1a      	ldr	r3, [pc, #104]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bca:	6a1b      	ldr	r3, [r3, #32]
 8003bcc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	4917      	ldr	r1, [pc, #92]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003bda:	7dfb      	ldrb	r3, [r7, #23]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d105      	bne.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003be0:	4b14      	ldr	r3, [pc, #80]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003be2:	69db      	ldr	r3, [r3, #28]
 8003be4:	4a13      	ldr	r2, [pc, #76]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003be6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0302 	and.w	r3, r3, #2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d008      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003bf8:	4b0e      	ldr	r3, [pc, #56]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	490b      	ldr	r1, [pc, #44]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0310 	and.w	r3, r3, #16
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d008      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c16:	4b07      	ldr	r3, [pc, #28]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	4904      	ldr	r1, [pc, #16]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3718      	adds	r7, #24
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	40021000 	.word	0x40021000
 8003c38:	40007000 	.word	0x40007000
 8003c3c:	42420440 	.word	0x42420440

08003c40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d101      	bne.n	8003c52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e076      	b.n	8003d40 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d108      	bne.n	8003c6c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c62:	d009      	beq.n	8003c78 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	61da      	str	r2, [r3, #28]
 8003c6a:	e005      	b.n	8003c78 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d106      	bne.n	8003c98 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f7fd ff8c 	bl	8001bb0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003cc0:	431a      	orrs	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cca:	431a      	orrs	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	691b      	ldr	r3, [r3, #16]
 8003cd0:	f003 0302 	and.w	r3, r3, #2
 8003cd4:	431a      	orrs	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	431a      	orrs	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ce8:	431a      	orrs	r2, r3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	69db      	ldr	r3, [r3, #28]
 8003cee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003cf2:	431a      	orrs	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a1b      	ldr	r3, [r3, #32]
 8003cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cfc:	ea42 0103 	orr.w	r1, r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d04:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	430a      	orrs	r2, r1
 8003d0e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	699b      	ldr	r3, [r3, #24]
 8003d14:	0c1a      	lsrs	r2, r3, #16
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f002 0204 	and.w	r2, r2, #4
 8003d1e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	69da      	ldr	r2, [r3, #28]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d2e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3708      	adds	r7, #8
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b08c      	sub	sp, #48	; 0x30
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	607a      	str	r2, [r7, #4]
 8003d54:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003d56:	2301      	movs	r3, #1
 8003d58:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d101      	bne.n	8003d6e <HAL_SPI_TransmitReceive+0x26>
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	e18a      	b.n	8004084 <HAL_SPI_TransmitReceive+0x33c>
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d76:	f7fe f939 	bl	8001fec <HAL_GetTick>
 8003d7a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003d8c:	887b      	ldrh	r3, [r7, #2]
 8003d8e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003d90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d00f      	beq.n	8003db8 <HAL_SPI_TransmitReceive+0x70>
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d9e:	d107      	bne.n	8003db0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d103      	bne.n	8003db0 <HAL_SPI_TransmitReceive+0x68>
 8003da8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003dac:	2b04      	cmp	r3, #4
 8003dae:	d003      	beq.n	8003db8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003db0:	2302      	movs	r3, #2
 8003db2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003db6:	e15b      	b.n	8004070 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d005      	beq.n	8003dca <HAL_SPI_TransmitReceive+0x82>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d002      	beq.n	8003dca <HAL_SPI_TransmitReceive+0x82>
 8003dc4:	887b      	ldrh	r3, [r7, #2]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d103      	bne.n	8003dd2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003dd0:	e14e      	b.n	8004070 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b04      	cmp	r3, #4
 8003ddc:	d003      	beq.n	8003de6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2205      	movs	r2, #5
 8003de2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2200      	movs	r2, #0
 8003dea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	887a      	ldrh	r2, [r7, #2]
 8003df6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	887a      	ldrh	r2, [r7, #2]
 8003dfc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	68ba      	ldr	r2, [r7, #8]
 8003e02:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	887a      	ldrh	r2, [r7, #2]
 8003e08:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	887a      	ldrh	r2, [r7, #2]
 8003e0e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2200      	movs	r2, #0
 8003e14:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e26:	2b40      	cmp	r3, #64	; 0x40
 8003e28:	d007      	beq.n	8003e3a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e38:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e42:	d178      	bne.n	8003f36 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d002      	beq.n	8003e52 <HAL_SPI_TransmitReceive+0x10a>
 8003e4c:	8b7b      	ldrh	r3, [r7, #26]
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d166      	bne.n	8003f20 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e56:	881a      	ldrh	r2, [r3, #0]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e62:	1c9a      	adds	r2, r3, #2
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	b29a      	uxth	r2, r3
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e76:	e053      	b.n	8003f20 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d11b      	bne.n	8003ebe <HAL_SPI_TransmitReceive+0x176>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d016      	beq.n	8003ebe <HAL_SPI_TransmitReceive+0x176>
 8003e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d113      	bne.n	8003ebe <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9a:	881a      	ldrh	r2, [r3, #0]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea6:	1c9a      	adds	r2, r3, #2
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	b29a      	uxth	r2, r3
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f003 0301 	and.w	r3, r3, #1
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d119      	bne.n	8003f00 <HAL_SPI_TransmitReceive+0x1b8>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d014      	beq.n	8003f00 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68da      	ldr	r2, [r3, #12]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee0:	b292      	uxth	r2, r2
 8003ee2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee8:	1c9a      	adds	r2, r3, #2
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	3b01      	subs	r3, #1
 8003ef6:	b29a      	uxth	r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003efc:	2301      	movs	r3, #1
 8003efe:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003f00:	f7fe f874 	bl	8001fec <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d807      	bhi.n	8003f20 <HAL_SPI_TransmitReceive+0x1d8>
 8003f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f16:	d003      	beq.n	8003f20 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003f1e:	e0a7      	b.n	8004070 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1a6      	bne.n	8003e78 <HAL_SPI_TransmitReceive+0x130>
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d1a1      	bne.n	8003e78 <HAL_SPI_TransmitReceive+0x130>
 8003f34:	e07c      	b.n	8004030 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d002      	beq.n	8003f44 <HAL_SPI_TransmitReceive+0x1fc>
 8003f3e:	8b7b      	ldrh	r3, [r7, #26]
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d16b      	bne.n	800401c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	330c      	adds	r3, #12
 8003f4e:	7812      	ldrb	r2, [r2, #0]
 8003f50:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f56:	1c5a      	adds	r2, r3, #1
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	3b01      	subs	r3, #1
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f6a:	e057      	b.n	800401c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d11c      	bne.n	8003fb4 <HAL_SPI_TransmitReceive+0x26c>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d017      	beq.n	8003fb4 <HAL_SPI_TransmitReceive+0x26c>
 8003f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d114      	bne.n	8003fb4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	330c      	adds	r3, #12
 8003f94:	7812      	ldrb	r2, [r2, #0]
 8003f96:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9c:	1c5a      	adds	r2, r3, #1
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	b29a      	uxth	r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d119      	bne.n	8003ff6 <HAL_SPI_TransmitReceive+0x2ae>
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d014      	beq.n	8003ff6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68da      	ldr	r2, [r3, #12]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd6:	b2d2      	uxtb	r2, r2
 8003fd8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fde:	1c5a      	adds	r2, r3, #1
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	3b01      	subs	r3, #1
 8003fec:	b29a      	uxth	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003ff6:	f7fd fff9 	bl	8001fec <HAL_GetTick>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004002:	429a      	cmp	r2, r3
 8004004:	d803      	bhi.n	800400e <HAL_SPI_TransmitReceive+0x2c6>
 8004006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800400c:	d102      	bne.n	8004014 <HAL_SPI_TransmitReceive+0x2cc>
 800400e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004010:	2b00      	cmp	r3, #0
 8004012:	d103      	bne.n	800401c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800401a:	e029      	b.n	8004070 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004020:	b29b      	uxth	r3, r3
 8004022:	2b00      	cmp	r3, #0
 8004024:	d1a2      	bne.n	8003f6c <HAL_SPI_TransmitReceive+0x224>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800402a:	b29b      	uxth	r3, r3
 800402c:	2b00      	cmp	r3, #0
 800402e:	d19d      	bne.n	8003f6c <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004032:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004034:	68f8      	ldr	r0, [r7, #12]
 8004036:	f000 f8b1 	bl	800419c <SPI_EndRxTxTransaction>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d006      	beq.n	800404e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2220      	movs	r2, #32
 800404a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800404c:	e010      	b.n	8004070 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d10b      	bne.n	800406e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004056:	2300      	movs	r3, #0
 8004058:	617b      	str	r3, [r7, #20]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	617b      	str	r3, [r7, #20]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	617b      	str	r3, [r7, #20]
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	e000      	b.n	8004070 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800406e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2200      	movs	r2, #0
 800407c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004080:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004084:	4618      	mov	r0, r3
 8004086:	3730      	adds	r7, #48	; 0x30
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b088      	sub	sp, #32
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	603b      	str	r3, [r7, #0]
 8004098:	4613      	mov	r3, r2
 800409a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800409c:	f7fd ffa6 	bl	8001fec <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a4:	1a9b      	subs	r3, r3, r2
 80040a6:	683a      	ldr	r2, [r7, #0]
 80040a8:	4413      	add	r3, r2
 80040aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80040ac:	f7fd ff9e 	bl	8001fec <HAL_GetTick>
 80040b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80040b2:	4b39      	ldr	r3, [pc, #228]	; (8004198 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	015b      	lsls	r3, r3, #5
 80040b8:	0d1b      	lsrs	r3, r3, #20
 80040ba:	69fa      	ldr	r2, [r7, #28]
 80040bc:	fb02 f303 	mul.w	r3, r2, r3
 80040c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040c2:	e054      	b.n	800416e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ca:	d050      	beq.n	800416e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80040cc:	f7fd ff8e 	bl	8001fec <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	69fa      	ldr	r2, [r7, #28]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d902      	bls.n	80040e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d13d      	bne.n	800415e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	685a      	ldr	r2, [r3, #4]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80040f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040fa:	d111      	bne.n	8004120 <SPI_WaitFlagStateUntilTimeout+0x94>
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004104:	d004      	beq.n	8004110 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800410e:	d107      	bne.n	8004120 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800411e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004124:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004128:	d10f      	bne.n	800414a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004138:	601a      	str	r2, [r3, #0]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004148:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2201      	movs	r2, #1
 800414e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e017      	b.n	800418e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d101      	bne.n	8004168 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004164:	2300      	movs	r3, #0
 8004166:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	3b01      	subs	r3, #1
 800416c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	689a      	ldr	r2, [r3, #8]
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	4013      	ands	r3, r2
 8004178:	68ba      	ldr	r2, [r7, #8]
 800417a:	429a      	cmp	r2, r3
 800417c:	bf0c      	ite	eq
 800417e:	2301      	moveq	r3, #1
 8004180:	2300      	movne	r3, #0
 8004182:	b2db      	uxtb	r3, r3
 8004184:	461a      	mov	r2, r3
 8004186:	79fb      	ldrb	r3, [r7, #7]
 8004188:	429a      	cmp	r2, r3
 800418a:	d19b      	bne.n	80040c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3720      	adds	r7, #32
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	20000000 	.word	0x20000000

0800419c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b086      	sub	sp, #24
 80041a0:	af02      	add	r7, sp, #8
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	9300      	str	r3, [sp, #0]
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	2200      	movs	r2, #0
 80041b0:	2180      	movs	r1, #128	; 0x80
 80041b2:	68f8      	ldr	r0, [r7, #12]
 80041b4:	f7ff ff6a 	bl	800408c <SPI_WaitFlagStateUntilTimeout>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d007      	beq.n	80041ce <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041c2:	f043 0220 	orr.w	r2, r3, #32
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e000      	b.n	80041d0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80041ce:	2300      	movs	r3, #0
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3710      	adds	r7, #16
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d101      	bne.n	80041ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e03f      	b.n	800426a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d106      	bne.n	8004204 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f7fd fd20 	bl	8001c44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2224      	movs	r2, #36	; 0x24
 8004208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68da      	ldr	r2, [r3, #12]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800421a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f000 fc85 	bl	8004b2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	691a      	ldr	r2, [r3, #16]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004230:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	695a      	ldr	r2, [r3, #20]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004240:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68da      	ldr	r2, [r3, #12]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004250:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2220      	movs	r2, #32
 800425c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2220      	movs	r2, #32
 8004264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3708      	adds	r7, #8
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}

08004272 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004272:	b580      	push	{r7, lr}
 8004274:	b08a      	sub	sp, #40	; 0x28
 8004276:	af02      	add	r7, sp, #8
 8004278:	60f8      	str	r0, [r7, #12]
 800427a:	60b9      	str	r1, [r7, #8]
 800427c:	603b      	str	r3, [r7, #0]
 800427e:	4613      	mov	r3, r2
 8004280:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004282:	2300      	movs	r3, #0
 8004284:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800428c:	b2db      	uxtb	r3, r3
 800428e:	2b20      	cmp	r3, #32
 8004290:	d17c      	bne.n	800438c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d002      	beq.n	800429e <HAL_UART_Transmit+0x2c>
 8004298:	88fb      	ldrh	r3, [r7, #6]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d101      	bne.n	80042a2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e075      	b.n	800438e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d101      	bne.n	80042b0 <HAL_UART_Transmit+0x3e>
 80042ac:	2302      	movs	r3, #2
 80042ae:	e06e      	b.n	800438e <HAL_UART_Transmit+0x11c>
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2200      	movs	r2, #0
 80042bc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2221      	movs	r2, #33	; 0x21
 80042c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042c6:	f7fd fe91 	bl	8001fec <HAL_GetTick>
 80042ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	88fa      	ldrh	r2, [r7, #6]
 80042d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	88fa      	ldrh	r2, [r7, #6]
 80042d6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042e0:	d108      	bne.n	80042f4 <HAL_UART_Transmit+0x82>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d104      	bne.n	80042f4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80042ea:	2300      	movs	r3, #0
 80042ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	61bb      	str	r3, [r7, #24]
 80042f2:	e003      	b.n	80042fc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042f8:	2300      	movs	r3, #0
 80042fa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004304:	e02a      	b.n	800435c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	9300      	str	r3, [sp, #0]
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	2200      	movs	r2, #0
 800430e:	2180      	movs	r1, #128	; 0x80
 8004310:	68f8      	ldr	r0, [r7, #12]
 8004312:	f000 fa38 	bl	8004786 <UART_WaitOnFlagUntilTimeout>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d001      	beq.n	8004320 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e036      	b.n	800438e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d10b      	bne.n	800433e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	881b      	ldrh	r3, [r3, #0]
 800432a:	461a      	mov	r2, r3
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004334:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	3302      	adds	r3, #2
 800433a:	61bb      	str	r3, [r7, #24]
 800433c:	e007      	b.n	800434e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	781a      	ldrb	r2, [r3, #0]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	3301      	adds	r3, #1
 800434c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004352:	b29b      	uxth	r3, r3
 8004354:	3b01      	subs	r3, #1
 8004356:	b29a      	uxth	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004360:	b29b      	uxth	r3, r3
 8004362:	2b00      	cmp	r3, #0
 8004364:	d1cf      	bne.n	8004306 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	9300      	str	r3, [sp, #0]
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	2200      	movs	r2, #0
 800436e:	2140      	movs	r1, #64	; 0x40
 8004370:	68f8      	ldr	r0, [r7, #12]
 8004372:	f000 fa08 	bl	8004786 <UART_WaitOnFlagUntilTimeout>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d001      	beq.n	8004380 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e006      	b.n	800438e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2220      	movs	r2, #32
 8004384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004388:	2300      	movs	r3, #0
 800438a:	e000      	b.n	800438e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800438c:	2302      	movs	r3, #2
  }
}
 800438e:	4618      	mov	r0, r3
 8004390:	3720      	adds	r7, #32
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}

08004396 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004396:	b580      	push	{r7, lr}
 8004398:	b084      	sub	sp, #16
 800439a:	af00      	add	r7, sp, #0
 800439c:	60f8      	str	r0, [r7, #12]
 800439e:	60b9      	str	r1, [r7, #8]
 80043a0:	4613      	mov	r3, r2
 80043a2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	2b20      	cmp	r3, #32
 80043ae:	d11d      	bne.n	80043ec <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d002      	beq.n	80043bc <HAL_UART_Receive_IT+0x26>
 80043b6:	88fb      	ldrh	r3, [r7, #6]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d101      	bne.n	80043c0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e016      	b.n	80043ee <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d101      	bne.n	80043ce <HAL_UART_Receive_IT+0x38>
 80043ca:	2302      	movs	r3, #2
 80043cc:	e00f      	b.n	80043ee <HAL_UART_Receive_IT+0x58>
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2201      	movs	r2, #1
 80043d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2200      	movs	r2, #0
 80043da:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80043dc:	88fb      	ldrh	r3, [r7, #6]
 80043de:	461a      	mov	r2, r3
 80043e0:	68b9      	ldr	r1, [r7, #8]
 80043e2:	68f8      	ldr	r0, [r7, #12]
 80043e4:	f000 fa19 	bl	800481a <UART_Start_Receive_IT>
 80043e8:	4603      	mov	r3, r0
 80043ea:	e000      	b.n	80043ee <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80043ec:	2302      	movs	r3, #2
  }
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3710      	adds	r7, #16
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
	...

080043f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b08a      	sub	sp, #40	; 0x28
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004418:	2300      	movs	r3, #0
 800441a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800441c:	2300      	movs	r3, #0
 800441e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004422:	f003 030f 	and.w	r3, r3, #15
 8004426:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d10d      	bne.n	800444a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800442e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004430:	f003 0320 	and.w	r3, r3, #32
 8004434:	2b00      	cmp	r3, #0
 8004436:	d008      	beq.n	800444a <HAL_UART_IRQHandler+0x52>
 8004438:	6a3b      	ldr	r3, [r7, #32]
 800443a:	f003 0320 	and.w	r3, r3, #32
 800443e:	2b00      	cmp	r3, #0
 8004440:	d003      	beq.n	800444a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 fac9 	bl	80049da <UART_Receive_IT>
      return;
 8004448:	e17b      	b.n	8004742 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	2b00      	cmp	r3, #0
 800444e:	f000 80b1 	beq.w	80045b4 <HAL_UART_IRQHandler+0x1bc>
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	f003 0301 	and.w	r3, r3, #1
 8004458:	2b00      	cmp	r3, #0
 800445a:	d105      	bne.n	8004468 <HAL_UART_IRQHandler+0x70>
 800445c:	6a3b      	ldr	r3, [r7, #32]
 800445e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004462:	2b00      	cmp	r3, #0
 8004464:	f000 80a6 	beq.w	80045b4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00a      	beq.n	8004488 <HAL_UART_IRQHandler+0x90>
 8004472:	6a3b      	ldr	r3, [r7, #32]
 8004474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004478:	2b00      	cmp	r3, #0
 800447a:	d005      	beq.n	8004488 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004480:	f043 0201 	orr.w	r2, r3, #1
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448a:	f003 0304 	and.w	r3, r3, #4
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00a      	beq.n	80044a8 <HAL_UART_IRQHandler+0xb0>
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	f003 0301 	and.w	r3, r3, #1
 8004498:	2b00      	cmp	r3, #0
 800449a:	d005      	beq.n	80044a8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a0:	f043 0202 	orr.w	r2, r3, #2
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044aa:	f003 0302 	and.w	r3, r3, #2
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00a      	beq.n	80044c8 <HAL_UART_IRQHandler+0xd0>
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	f003 0301 	and.w	r3, r3, #1
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d005      	beq.n	80044c8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c0:	f043 0204 	orr.w	r2, r3, #4
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80044c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ca:	f003 0308 	and.w	r3, r3, #8
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00f      	beq.n	80044f2 <HAL_UART_IRQHandler+0xfa>
 80044d2:	6a3b      	ldr	r3, [r7, #32]
 80044d4:	f003 0320 	and.w	r3, r3, #32
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d104      	bne.n	80044e6 <HAL_UART_IRQHandler+0xee>
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	f003 0301 	and.w	r3, r3, #1
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d005      	beq.n	80044f2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ea:	f043 0208 	orr.w	r2, r3, #8
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	f000 811e 	beq.w	8004738 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fe:	f003 0320 	and.w	r3, r3, #32
 8004502:	2b00      	cmp	r3, #0
 8004504:	d007      	beq.n	8004516 <HAL_UART_IRQHandler+0x11e>
 8004506:	6a3b      	ldr	r3, [r7, #32]
 8004508:	f003 0320 	and.w	r3, r3, #32
 800450c:	2b00      	cmp	r3, #0
 800450e:	d002      	beq.n	8004516 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f000 fa62 	bl	80049da <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	695b      	ldr	r3, [r3, #20]
 800451c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004520:	2b00      	cmp	r3, #0
 8004522:	bf14      	ite	ne
 8004524:	2301      	movne	r3, #1
 8004526:	2300      	moveq	r3, #0
 8004528:	b2db      	uxtb	r3, r3
 800452a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004530:	f003 0308 	and.w	r3, r3, #8
 8004534:	2b00      	cmp	r3, #0
 8004536:	d102      	bne.n	800453e <HAL_UART_IRQHandler+0x146>
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d031      	beq.n	80045a2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 f9a4 	bl	800488c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800454e:	2b00      	cmp	r3, #0
 8004550:	d023      	beq.n	800459a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	695a      	ldr	r2, [r3, #20]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004560:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004566:	2b00      	cmp	r3, #0
 8004568:	d013      	beq.n	8004592 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456e:	4a76      	ldr	r2, [pc, #472]	; (8004748 <HAL_UART_IRQHandler+0x350>)
 8004570:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004576:	4618      	mov	r0, r3
 8004578:	f7fe fb34 	bl	8002be4 <HAL_DMA_Abort_IT>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d016      	beq.n	80045b0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800458c:	4610      	mov	r0, r2
 800458e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004590:	e00e      	b.n	80045b0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 f8e3 	bl	800475e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004598:	e00a      	b.n	80045b0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 f8df 	bl	800475e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045a0:	e006      	b.n	80045b0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 f8db 	bl	800475e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80045ae:	e0c3      	b.n	8004738 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045b0:	bf00      	nop
    return;
 80045b2:	e0c1      	b.n	8004738 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	f040 80a1 	bne.w	8004700 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80045be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c0:	f003 0310 	and.w	r3, r3, #16
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	f000 809b 	beq.w	8004700 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80045ca:	6a3b      	ldr	r3, [r7, #32]
 80045cc:	f003 0310 	and.w	r3, r3, #16
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	f000 8095 	beq.w	8004700 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80045d6:	2300      	movs	r3, #0
 80045d8:	60fb      	str	r3, [r7, #12]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	60fb      	str	r3, [r7, #12]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	60fb      	str	r3, [r7, #12]
 80045ea:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d04e      	beq.n	8004698 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004604:	8a3b      	ldrh	r3, [r7, #16]
 8004606:	2b00      	cmp	r3, #0
 8004608:	f000 8098 	beq.w	800473c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004610:	8a3a      	ldrh	r2, [r7, #16]
 8004612:	429a      	cmp	r2, r3
 8004614:	f080 8092 	bcs.w	800473c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	8a3a      	ldrh	r2, [r7, #16]
 800461c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	2b20      	cmp	r3, #32
 8004626:	d02b      	beq.n	8004680 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	68da      	ldr	r2, [r3, #12]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004636:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	695a      	ldr	r2, [r3, #20]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f022 0201 	bic.w	r2, r2, #1
 8004646:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	695a      	ldr	r2, [r3, #20]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004656:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2220      	movs	r2, #32
 800465c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68da      	ldr	r2, [r3, #12]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f022 0210 	bic.w	r2, r2, #16
 8004674:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800467a:	4618      	mov	r0, r3
 800467c:	f7fe fa77 	bl	8002b6e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004688:	b29b      	uxth	r3, r3
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	b29b      	uxth	r3, r3
 800468e:	4619      	mov	r1, r3
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f000 f86d 	bl	8004770 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004696:	e051      	b.n	800473c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d047      	beq.n	8004740 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80046b0:	8a7b      	ldrh	r3, [r7, #18]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d044      	beq.n	8004740 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68da      	ldr	r2, [r3, #12]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80046c4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	695a      	ldr	r2, [r3, #20]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f022 0201 	bic.w	r2, r2, #1
 80046d4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2220      	movs	r2, #32
 80046da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68da      	ldr	r2, [r3, #12]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f022 0210 	bic.w	r2, r2, #16
 80046f2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80046f4:	8a7b      	ldrh	r3, [r7, #18]
 80046f6:	4619      	mov	r1, r3
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f000 f839 	bl	8004770 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80046fe:	e01f      	b.n	8004740 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004706:	2b00      	cmp	r3, #0
 8004708:	d008      	beq.n	800471c <HAL_UART_IRQHandler+0x324>
 800470a:	6a3b      	ldr	r3, [r7, #32]
 800470c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004710:	2b00      	cmp	r3, #0
 8004712:	d003      	beq.n	800471c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f000 f8f9 	bl	800490c <UART_Transmit_IT>
    return;
 800471a:	e012      	b.n	8004742 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800471c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00d      	beq.n	8004742 <HAL_UART_IRQHandler+0x34a>
 8004726:	6a3b      	ldr	r3, [r7, #32]
 8004728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800472c:	2b00      	cmp	r3, #0
 800472e:	d008      	beq.n	8004742 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f000 f93a 	bl	80049aa <UART_EndTransmit_IT>
    return;
 8004736:	e004      	b.n	8004742 <HAL_UART_IRQHandler+0x34a>
    return;
 8004738:	bf00      	nop
 800473a:	e002      	b.n	8004742 <HAL_UART_IRQHandler+0x34a>
      return;
 800473c:	bf00      	nop
 800473e:	e000      	b.n	8004742 <HAL_UART_IRQHandler+0x34a>
      return;
 8004740:	bf00      	nop
  }
}
 8004742:	3728      	adds	r7, #40	; 0x28
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}
 8004748:	080048e5 	.word	0x080048e5

0800474c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004754:	bf00      	nop
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	bc80      	pop	{r7}
 800475c:	4770      	bx	lr

0800475e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800475e:	b480      	push	{r7}
 8004760:	b083      	sub	sp, #12
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004766:	bf00      	nop
 8004768:	370c      	adds	r7, #12
 800476a:	46bd      	mov	sp, r7
 800476c:	bc80      	pop	{r7}
 800476e:	4770      	bx	lr

08004770 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	460b      	mov	r3, r1
 800477a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800477c:	bf00      	nop
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	bc80      	pop	{r7}
 8004784:	4770      	bx	lr

08004786 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004786:	b580      	push	{r7, lr}
 8004788:	b084      	sub	sp, #16
 800478a:	af00      	add	r7, sp, #0
 800478c:	60f8      	str	r0, [r7, #12]
 800478e:	60b9      	str	r1, [r7, #8]
 8004790:	603b      	str	r3, [r7, #0]
 8004792:	4613      	mov	r3, r2
 8004794:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004796:	e02c      	b.n	80047f2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800479e:	d028      	beq.n	80047f2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d007      	beq.n	80047b6 <UART_WaitOnFlagUntilTimeout+0x30>
 80047a6:	f7fd fc21 	bl	8001fec <HAL_GetTick>
 80047aa:	4602      	mov	r2, r0
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	69ba      	ldr	r2, [r7, #24]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d21d      	bcs.n	80047f2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68da      	ldr	r2, [r3, #12]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80047c4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	695a      	ldr	r2, [r3, #20]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f022 0201 	bic.w	r2, r2, #1
 80047d4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2220      	movs	r2, #32
 80047da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2220      	movs	r2, #32
 80047e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e00f      	b.n	8004812 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	4013      	ands	r3, r2
 80047fc:	68ba      	ldr	r2, [r7, #8]
 80047fe:	429a      	cmp	r2, r3
 8004800:	bf0c      	ite	eq
 8004802:	2301      	moveq	r3, #1
 8004804:	2300      	movne	r3, #0
 8004806:	b2db      	uxtb	r3, r3
 8004808:	461a      	mov	r2, r3
 800480a:	79fb      	ldrb	r3, [r7, #7]
 800480c:	429a      	cmp	r2, r3
 800480e:	d0c3      	beq.n	8004798 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	3710      	adds	r7, #16
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}

0800481a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800481a:	b480      	push	{r7}
 800481c:	b085      	sub	sp, #20
 800481e:	af00      	add	r7, sp, #0
 8004820:	60f8      	str	r0, [r7, #12]
 8004822:	60b9      	str	r1, [r7, #8]
 8004824:	4613      	mov	r3, r2
 8004826:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	68ba      	ldr	r2, [r7, #8]
 800482c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	88fa      	ldrh	r2, [r7, #6]
 8004832:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	88fa      	ldrh	r2, [r7, #6]
 8004838:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2222      	movs	r2, #34	; 0x22
 8004844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2200      	movs	r2, #0
 800484c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	68da      	ldr	r2, [r3, #12]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800485e:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	695a      	ldr	r2, [r3, #20]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f042 0201 	orr.w	r2, r2, #1
 800486e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68da      	ldr	r2, [r3, #12]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f042 0220 	orr.w	r2, r2, #32
 800487e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3714      	adds	r7, #20
 8004886:	46bd      	mov	sp, r7
 8004888:	bc80      	pop	{r7}
 800488a:	4770      	bx	lr

0800488c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68da      	ldr	r2, [r3, #12]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80048a2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	695a      	ldr	r2, [r3, #20]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f022 0201 	bic.w	r2, r2, #1
 80048b2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d107      	bne.n	80048cc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68da      	ldr	r2, [r3, #12]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f022 0210 	bic.w	r2, r2, #16
 80048ca:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2220      	movs	r2, #32
 80048d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80048da:	bf00      	nop
 80048dc:	370c      	adds	r7, #12
 80048de:	46bd      	mov	sp, r7
 80048e0:	bc80      	pop	{r7}
 80048e2:	4770      	bx	lr

080048e4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2200      	movs	r2, #0
 80048f6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2200      	movs	r2, #0
 80048fc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048fe:	68f8      	ldr	r0, [r7, #12]
 8004900:	f7ff ff2d 	bl	800475e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004904:	bf00      	nop
 8004906:	3710      	adds	r7, #16
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}

0800490c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800490c:	b480      	push	{r7}
 800490e:	b085      	sub	sp, #20
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800491a:	b2db      	uxtb	r3, r3
 800491c:	2b21      	cmp	r3, #33	; 0x21
 800491e:	d13e      	bne.n	800499e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004928:	d114      	bne.n	8004954 <UART_Transmit_IT+0x48>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d110      	bne.n	8004954 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a1b      	ldr	r3, [r3, #32]
 8004936:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	881b      	ldrh	r3, [r3, #0]
 800493c:	461a      	mov	r2, r3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004946:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a1b      	ldr	r3, [r3, #32]
 800494c:	1c9a      	adds	r2, r3, #2
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	621a      	str	r2, [r3, #32]
 8004952:	e008      	b.n	8004966 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a1b      	ldr	r3, [r3, #32]
 8004958:	1c59      	adds	r1, r3, #1
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	6211      	str	r1, [r2, #32]
 800495e:	781a      	ldrb	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800496a:	b29b      	uxth	r3, r3
 800496c:	3b01      	subs	r3, #1
 800496e:	b29b      	uxth	r3, r3
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	4619      	mov	r1, r3
 8004974:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004976:	2b00      	cmp	r3, #0
 8004978:	d10f      	bne.n	800499a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68da      	ldr	r2, [r3, #12]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004988:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68da      	ldr	r2, [r3, #12]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004998:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800499a:	2300      	movs	r3, #0
 800499c:	e000      	b.n	80049a0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800499e:	2302      	movs	r3, #2
  }
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3714      	adds	r7, #20
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bc80      	pop	{r7}
 80049a8:	4770      	bx	lr

080049aa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80049aa:	b580      	push	{r7, lr}
 80049ac:	b082      	sub	sp, #8
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68da      	ldr	r2, [r3, #12]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049c0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2220      	movs	r2, #32
 80049c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f7ff febe 	bl	800474c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3708      	adds	r7, #8
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}

080049da <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80049da:	b580      	push	{r7, lr}
 80049dc:	b086      	sub	sp, #24
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	2b22      	cmp	r3, #34	; 0x22
 80049ec:	f040 8099 	bne.w	8004b22 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049f8:	d117      	bne.n	8004a2a <UART_Receive_IT+0x50>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d113      	bne.n	8004a2a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004a02:	2300      	movs	r3, #0
 8004a04:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a0a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a18:	b29a      	uxth	r2, r3
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a22:	1c9a      	adds	r2, r3, #2
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	629a      	str	r2, [r3, #40]	; 0x28
 8004a28:	e026      	b.n	8004a78 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a2e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004a30:	2300      	movs	r3, #0
 8004a32:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a3c:	d007      	beq.n	8004a4e <UART_Receive_IT+0x74>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d10a      	bne.n	8004a5c <UART_Receive_IT+0x82>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d106      	bne.n	8004a5c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	b2da      	uxtb	r2, r3
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	701a      	strb	r2, [r3, #0]
 8004a5a:	e008      	b.n	8004a6e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a68:	b2da      	uxtb	r2, r3
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a72:	1c5a      	adds	r2, r3, #1
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	4619      	mov	r1, r3
 8004a86:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d148      	bne.n	8004b1e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68da      	ldr	r2, [r3, #12]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f022 0220 	bic.w	r2, r2, #32
 8004a9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	68da      	ldr	r2, [r3, #12]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004aaa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	695a      	ldr	r2, [r3, #20]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f022 0201 	bic.w	r2, r2, #1
 8004aba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2220      	movs	r2, #32
 8004ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d123      	bne.n	8004b14 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68da      	ldr	r2, [r3, #12]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f022 0210 	bic.w	r2, r2, #16
 8004ae0:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0310 	and.w	r3, r3, #16
 8004aec:	2b10      	cmp	r3, #16
 8004aee:	d10a      	bne.n	8004b06 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004af0:	2300      	movs	r3, #0
 8004af2:	60fb      	str	r3, [r7, #12]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	60fb      	str	r3, [r7, #12]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	60fb      	str	r3, [r7, #12]
 8004b04:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f7ff fe2f 	bl	8004770 <HAL_UARTEx_RxEventCallback>
 8004b12:	e002      	b.n	8004b1a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f7fc faf9 	bl	800110c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	e002      	b.n	8004b24 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	e000      	b.n	8004b24 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004b22:	2302      	movs	r3, #2
  }
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3718      	adds	r7, #24
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	68da      	ldr	r2, [r3, #12]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	430a      	orrs	r2, r1
 8004b48:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	689a      	ldr	r2, [r3, #8]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	431a      	orrs	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	695b      	ldr	r3, [r3, #20]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004b66:	f023 030c 	bic.w	r3, r3, #12
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	6812      	ldr	r2, [r2, #0]
 8004b6e:	68b9      	ldr	r1, [r7, #8]
 8004b70:	430b      	orrs	r3, r1
 8004b72:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	695b      	ldr	r3, [r3, #20]
 8004b7a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	699a      	ldr	r2, [r3, #24]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	430a      	orrs	r2, r1
 8004b88:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a2c      	ldr	r2, [pc, #176]	; (8004c40 <UART_SetConfig+0x114>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d103      	bne.n	8004b9c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004b94:	f7fe ff6c 	bl	8003a70 <HAL_RCC_GetPCLK2Freq>
 8004b98:	60f8      	str	r0, [r7, #12]
 8004b9a:	e002      	b.n	8004ba2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004b9c:	f7fe ff54 	bl	8003a48 <HAL_RCC_GetPCLK1Freq>
 8004ba0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ba2:	68fa      	ldr	r2, [r7, #12]
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	4413      	add	r3, r2
 8004baa:	009a      	lsls	r2, r3, #2
 8004bac:	441a      	add	r2, r3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb8:	4a22      	ldr	r2, [pc, #136]	; (8004c44 <UART_SetConfig+0x118>)
 8004bba:	fba2 2303 	umull	r2, r3, r2, r3
 8004bbe:	095b      	lsrs	r3, r3, #5
 8004bc0:	0119      	lsls	r1, r3, #4
 8004bc2:	68fa      	ldr	r2, [r7, #12]
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	4413      	add	r3, r2
 8004bca:	009a      	lsls	r2, r3, #2
 8004bcc:	441a      	add	r2, r3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004bd8:	4b1a      	ldr	r3, [pc, #104]	; (8004c44 <UART_SetConfig+0x118>)
 8004bda:	fba3 0302 	umull	r0, r3, r3, r2
 8004bde:	095b      	lsrs	r3, r3, #5
 8004be0:	2064      	movs	r0, #100	; 0x64
 8004be2:	fb00 f303 	mul.w	r3, r0, r3
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	011b      	lsls	r3, r3, #4
 8004bea:	3332      	adds	r3, #50	; 0x32
 8004bec:	4a15      	ldr	r2, [pc, #84]	; (8004c44 <UART_SetConfig+0x118>)
 8004bee:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf2:	095b      	lsrs	r3, r3, #5
 8004bf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bf8:	4419      	add	r1, r3
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	4413      	add	r3, r2
 8004c02:	009a      	lsls	r2, r3, #2
 8004c04:	441a      	add	r2, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c10:	4b0c      	ldr	r3, [pc, #48]	; (8004c44 <UART_SetConfig+0x118>)
 8004c12:	fba3 0302 	umull	r0, r3, r3, r2
 8004c16:	095b      	lsrs	r3, r3, #5
 8004c18:	2064      	movs	r0, #100	; 0x64
 8004c1a:	fb00 f303 	mul.w	r3, r0, r3
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	011b      	lsls	r3, r3, #4
 8004c22:	3332      	adds	r3, #50	; 0x32
 8004c24:	4a07      	ldr	r2, [pc, #28]	; (8004c44 <UART_SetConfig+0x118>)
 8004c26:	fba2 2303 	umull	r2, r3, r2, r3
 8004c2a:	095b      	lsrs	r3, r3, #5
 8004c2c:	f003 020f 	and.w	r2, r3, #15
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	440a      	add	r2, r1
 8004c36:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004c38:	bf00      	nop
 8004c3a:	3710      	adds	r7, #16
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	40013800 	.word	0x40013800
 8004c44:	51eb851f 	.word	0x51eb851f

08004c48 <__errno>:
 8004c48:	4b01      	ldr	r3, [pc, #4]	; (8004c50 <__errno+0x8>)
 8004c4a:	6818      	ldr	r0, [r3, #0]
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop
 8004c50:	2000000c 	.word	0x2000000c

08004c54 <__libc_init_array>:
 8004c54:	b570      	push	{r4, r5, r6, lr}
 8004c56:	2600      	movs	r6, #0
 8004c58:	4d0c      	ldr	r5, [pc, #48]	; (8004c8c <__libc_init_array+0x38>)
 8004c5a:	4c0d      	ldr	r4, [pc, #52]	; (8004c90 <__libc_init_array+0x3c>)
 8004c5c:	1b64      	subs	r4, r4, r5
 8004c5e:	10a4      	asrs	r4, r4, #2
 8004c60:	42a6      	cmp	r6, r4
 8004c62:	d109      	bne.n	8004c78 <__libc_init_array+0x24>
 8004c64:	f004 fc2a 	bl	80094bc <_init>
 8004c68:	2600      	movs	r6, #0
 8004c6a:	4d0a      	ldr	r5, [pc, #40]	; (8004c94 <__libc_init_array+0x40>)
 8004c6c:	4c0a      	ldr	r4, [pc, #40]	; (8004c98 <__libc_init_array+0x44>)
 8004c6e:	1b64      	subs	r4, r4, r5
 8004c70:	10a4      	asrs	r4, r4, #2
 8004c72:	42a6      	cmp	r6, r4
 8004c74:	d105      	bne.n	8004c82 <__libc_init_array+0x2e>
 8004c76:	bd70      	pop	{r4, r5, r6, pc}
 8004c78:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c7c:	4798      	blx	r3
 8004c7e:	3601      	adds	r6, #1
 8004c80:	e7ee      	b.n	8004c60 <__libc_init_array+0xc>
 8004c82:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c86:	4798      	blx	r3
 8004c88:	3601      	adds	r6, #1
 8004c8a:	e7f2      	b.n	8004c72 <__libc_init_array+0x1e>
 8004c8c:	080099c4 	.word	0x080099c4
 8004c90:	080099c4 	.word	0x080099c4
 8004c94:	080099c4 	.word	0x080099c4
 8004c98:	080099c8 	.word	0x080099c8

08004c9c <memset>:
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	4402      	add	r2, r0
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d100      	bne.n	8004ca6 <memset+0xa>
 8004ca4:	4770      	bx	lr
 8004ca6:	f803 1b01 	strb.w	r1, [r3], #1
 8004caa:	e7f9      	b.n	8004ca0 <memset+0x4>

08004cac <__cvt>:
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cb2:	461f      	mov	r7, r3
 8004cb4:	bfbb      	ittet	lt
 8004cb6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004cba:	461f      	movlt	r7, r3
 8004cbc:	2300      	movge	r3, #0
 8004cbe:	232d      	movlt	r3, #45	; 0x2d
 8004cc0:	b088      	sub	sp, #32
 8004cc2:	4614      	mov	r4, r2
 8004cc4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004cc6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004cc8:	7013      	strb	r3, [r2, #0]
 8004cca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004ccc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004cd0:	f023 0820 	bic.w	r8, r3, #32
 8004cd4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004cd8:	d005      	beq.n	8004ce6 <__cvt+0x3a>
 8004cda:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004cde:	d100      	bne.n	8004ce2 <__cvt+0x36>
 8004ce0:	3501      	adds	r5, #1
 8004ce2:	2302      	movs	r3, #2
 8004ce4:	e000      	b.n	8004ce8 <__cvt+0x3c>
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	aa07      	add	r2, sp, #28
 8004cea:	9204      	str	r2, [sp, #16]
 8004cec:	aa06      	add	r2, sp, #24
 8004cee:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004cf2:	e9cd 3500 	strd	r3, r5, [sp]
 8004cf6:	4622      	mov	r2, r4
 8004cf8:	463b      	mov	r3, r7
 8004cfa:	f001 fda1 	bl	8006840 <_dtoa_r>
 8004cfe:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004d02:	4606      	mov	r6, r0
 8004d04:	d102      	bne.n	8004d0c <__cvt+0x60>
 8004d06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004d08:	07db      	lsls	r3, r3, #31
 8004d0a:	d522      	bpl.n	8004d52 <__cvt+0xa6>
 8004d0c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004d10:	eb06 0905 	add.w	r9, r6, r5
 8004d14:	d110      	bne.n	8004d38 <__cvt+0x8c>
 8004d16:	7833      	ldrb	r3, [r6, #0]
 8004d18:	2b30      	cmp	r3, #48	; 0x30
 8004d1a:	d10a      	bne.n	8004d32 <__cvt+0x86>
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	2300      	movs	r3, #0
 8004d20:	4620      	mov	r0, r4
 8004d22:	4639      	mov	r1, r7
 8004d24:	f7fb fe40 	bl	80009a8 <__aeabi_dcmpeq>
 8004d28:	b918      	cbnz	r0, 8004d32 <__cvt+0x86>
 8004d2a:	f1c5 0501 	rsb	r5, r5, #1
 8004d2e:	f8ca 5000 	str.w	r5, [sl]
 8004d32:	f8da 3000 	ldr.w	r3, [sl]
 8004d36:	4499      	add	r9, r3
 8004d38:	2200      	movs	r2, #0
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	4620      	mov	r0, r4
 8004d3e:	4639      	mov	r1, r7
 8004d40:	f7fb fe32 	bl	80009a8 <__aeabi_dcmpeq>
 8004d44:	b108      	cbz	r0, 8004d4a <__cvt+0x9e>
 8004d46:	f8cd 901c 	str.w	r9, [sp, #28]
 8004d4a:	2230      	movs	r2, #48	; 0x30
 8004d4c:	9b07      	ldr	r3, [sp, #28]
 8004d4e:	454b      	cmp	r3, r9
 8004d50:	d307      	bcc.n	8004d62 <__cvt+0xb6>
 8004d52:	4630      	mov	r0, r6
 8004d54:	9b07      	ldr	r3, [sp, #28]
 8004d56:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004d58:	1b9b      	subs	r3, r3, r6
 8004d5a:	6013      	str	r3, [r2, #0]
 8004d5c:	b008      	add	sp, #32
 8004d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d62:	1c59      	adds	r1, r3, #1
 8004d64:	9107      	str	r1, [sp, #28]
 8004d66:	701a      	strb	r2, [r3, #0]
 8004d68:	e7f0      	b.n	8004d4c <__cvt+0xa0>

08004d6a <__exponent>:
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d6e:	2900      	cmp	r1, #0
 8004d70:	f803 2b02 	strb.w	r2, [r3], #2
 8004d74:	bfb6      	itet	lt
 8004d76:	222d      	movlt	r2, #45	; 0x2d
 8004d78:	222b      	movge	r2, #43	; 0x2b
 8004d7a:	4249      	neglt	r1, r1
 8004d7c:	2909      	cmp	r1, #9
 8004d7e:	7042      	strb	r2, [r0, #1]
 8004d80:	dd2b      	ble.n	8004dda <__exponent+0x70>
 8004d82:	f10d 0407 	add.w	r4, sp, #7
 8004d86:	46a4      	mov	ip, r4
 8004d88:	270a      	movs	r7, #10
 8004d8a:	fb91 f6f7 	sdiv	r6, r1, r7
 8004d8e:	460a      	mov	r2, r1
 8004d90:	46a6      	mov	lr, r4
 8004d92:	fb07 1516 	mls	r5, r7, r6, r1
 8004d96:	2a63      	cmp	r2, #99	; 0x63
 8004d98:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004d9c:	4631      	mov	r1, r6
 8004d9e:	f104 34ff 	add.w	r4, r4, #4294967295
 8004da2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004da6:	dcf0      	bgt.n	8004d8a <__exponent+0x20>
 8004da8:	3130      	adds	r1, #48	; 0x30
 8004daa:	f1ae 0502 	sub.w	r5, lr, #2
 8004dae:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004db2:	4629      	mov	r1, r5
 8004db4:	1c44      	adds	r4, r0, #1
 8004db6:	4561      	cmp	r1, ip
 8004db8:	d30a      	bcc.n	8004dd0 <__exponent+0x66>
 8004dba:	f10d 0209 	add.w	r2, sp, #9
 8004dbe:	eba2 020e 	sub.w	r2, r2, lr
 8004dc2:	4565      	cmp	r5, ip
 8004dc4:	bf88      	it	hi
 8004dc6:	2200      	movhi	r2, #0
 8004dc8:	4413      	add	r3, r2
 8004dca:	1a18      	subs	r0, r3, r0
 8004dcc:	b003      	add	sp, #12
 8004dce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dd0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004dd4:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004dd8:	e7ed      	b.n	8004db6 <__exponent+0x4c>
 8004dda:	2330      	movs	r3, #48	; 0x30
 8004ddc:	3130      	adds	r1, #48	; 0x30
 8004dde:	7083      	strb	r3, [r0, #2]
 8004de0:	70c1      	strb	r1, [r0, #3]
 8004de2:	1d03      	adds	r3, r0, #4
 8004de4:	e7f1      	b.n	8004dca <__exponent+0x60>
	...

08004de8 <_printf_float>:
 8004de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dec:	b091      	sub	sp, #68	; 0x44
 8004dee:	460c      	mov	r4, r1
 8004df0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004df4:	4616      	mov	r6, r2
 8004df6:	461f      	mov	r7, r3
 8004df8:	4605      	mov	r5, r0
 8004dfa:	f002 fe75 	bl	8007ae8 <_localeconv_r>
 8004dfe:	6803      	ldr	r3, [r0, #0]
 8004e00:	4618      	mov	r0, r3
 8004e02:	9309      	str	r3, [sp, #36]	; 0x24
 8004e04:	f7fb f9a4 	bl	8000150 <strlen>
 8004e08:	2300      	movs	r3, #0
 8004e0a:	930e      	str	r3, [sp, #56]	; 0x38
 8004e0c:	f8d8 3000 	ldr.w	r3, [r8]
 8004e10:	900a      	str	r0, [sp, #40]	; 0x28
 8004e12:	3307      	adds	r3, #7
 8004e14:	f023 0307 	bic.w	r3, r3, #7
 8004e18:	f103 0208 	add.w	r2, r3, #8
 8004e1c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004e20:	f8d4 b000 	ldr.w	fp, [r4]
 8004e24:	f8c8 2000 	str.w	r2, [r8]
 8004e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e2c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004e30:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004e34:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004e38:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e3a:	f04f 32ff 	mov.w	r2, #4294967295
 8004e3e:	4640      	mov	r0, r8
 8004e40:	4b9c      	ldr	r3, [pc, #624]	; (80050b4 <_printf_float+0x2cc>)
 8004e42:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004e44:	f7fb fde2 	bl	8000a0c <__aeabi_dcmpun>
 8004e48:	bb70      	cbnz	r0, 8004ea8 <_printf_float+0xc0>
 8004e4a:	f04f 32ff 	mov.w	r2, #4294967295
 8004e4e:	4640      	mov	r0, r8
 8004e50:	4b98      	ldr	r3, [pc, #608]	; (80050b4 <_printf_float+0x2cc>)
 8004e52:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004e54:	f7fb fdbc 	bl	80009d0 <__aeabi_dcmple>
 8004e58:	bb30      	cbnz	r0, 8004ea8 <_printf_float+0xc0>
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	4640      	mov	r0, r8
 8004e60:	4651      	mov	r1, sl
 8004e62:	f7fb fdab 	bl	80009bc <__aeabi_dcmplt>
 8004e66:	b110      	cbz	r0, 8004e6e <_printf_float+0x86>
 8004e68:	232d      	movs	r3, #45	; 0x2d
 8004e6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e6e:	4b92      	ldr	r3, [pc, #584]	; (80050b8 <_printf_float+0x2d0>)
 8004e70:	4892      	ldr	r0, [pc, #584]	; (80050bc <_printf_float+0x2d4>)
 8004e72:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004e76:	bf94      	ite	ls
 8004e78:	4698      	movls	r8, r3
 8004e7a:	4680      	movhi	r8, r0
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	f04f 0a00 	mov.w	sl, #0
 8004e82:	6123      	str	r3, [r4, #16]
 8004e84:	f02b 0304 	bic.w	r3, fp, #4
 8004e88:	6023      	str	r3, [r4, #0]
 8004e8a:	4633      	mov	r3, r6
 8004e8c:	4621      	mov	r1, r4
 8004e8e:	4628      	mov	r0, r5
 8004e90:	9700      	str	r7, [sp, #0]
 8004e92:	aa0f      	add	r2, sp, #60	; 0x3c
 8004e94:	f000 f9d4 	bl	8005240 <_printf_common>
 8004e98:	3001      	adds	r0, #1
 8004e9a:	f040 8090 	bne.w	8004fbe <_printf_float+0x1d6>
 8004e9e:	f04f 30ff 	mov.w	r0, #4294967295
 8004ea2:	b011      	add	sp, #68	; 0x44
 8004ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ea8:	4642      	mov	r2, r8
 8004eaa:	4653      	mov	r3, sl
 8004eac:	4640      	mov	r0, r8
 8004eae:	4651      	mov	r1, sl
 8004eb0:	f7fb fdac 	bl	8000a0c <__aeabi_dcmpun>
 8004eb4:	b148      	cbz	r0, 8004eca <_printf_float+0xe2>
 8004eb6:	f1ba 0f00 	cmp.w	sl, #0
 8004eba:	bfb8      	it	lt
 8004ebc:	232d      	movlt	r3, #45	; 0x2d
 8004ebe:	4880      	ldr	r0, [pc, #512]	; (80050c0 <_printf_float+0x2d8>)
 8004ec0:	bfb8      	it	lt
 8004ec2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004ec6:	4b7f      	ldr	r3, [pc, #508]	; (80050c4 <_printf_float+0x2dc>)
 8004ec8:	e7d3      	b.n	8004e72 <_printf_float+0x8a>
 8004eca:	6863      	ldr	r3, [r4, #4]
 8004ecc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004ed0:	1c5a      	adds	r2, r3, #1
 8004ed2:	d142      	bne.n	8004f5a <_printf_float+0x172>
 8004ed4:	2306      	movs	r3, #6
 8004ed6:	6063      	str	r3, [r4, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	9206      	str	r2, [sp, #24]
 8004edc:	aa0e      	add	r2, sp, #56	; 0x38
 8004ede:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004ee2:	aa0d      	add	r2, sp, #52	; 0x34
 8004ee4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004ee8:	9203      	str	r2, [sp, #12]
 8004eea:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004eee:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004ef2:	6023      	str	r3, [r4, #0]
 8004ef4:	6863      	ldr	r3, [r4, #4]
 8004ef6:	4642      	mov	r2, r8
 8004ef8:	9300      	str	r3, [sp, #0]
 8004efa:	4628      	mov	r0, r5
 8004efc:	4653      	mov	r3, sl
 8004efe:	910b      	str	r1, [sp, #44]	; 0x2c
 8004f00:	f7ff fed4 	bl	8004cac <__cvt>
 8004f04:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004f06:	4680      	mov	r8, r0
 8004f08:	2947      	cmp	r1, #71	; 0x47
 8004f0a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004f0c:	d108      	bne.n	8004f20 <_printf_float+0x138>
 8004f0e:	1cc8      	adds	r0, r1, #3
 8004f10:	db02      	blt.n	8004f18 <_printf_float+0x130>
 8004f12:	6863      	ldr	r3, [r4, #4]
 8004f14:	4299      	cmp	r1, r3
 8004f16:	dd40      	ble.n	8004f9a <_printf_float+0x1b2>
 8004f18:	f1a9 0902 	sub.w	r9, r9, #2
 8004f1c:	fa5f f989 	uxtb.w	r9, r9
 8004f20:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004f24:	d81f      	bhi.n	8004f66 <_printf_float+0x17e>
 8004f26:	464a      	mov	r2, r9
 8004f28:	3901      	subs	r1, #1
 8004f2a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004f2e:	910d      	str	r1, [sp, #52]	; 0x34
 8004f30:	f7ff ff1b 	bl	8004d6a <__exponent>
 8004f34:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f36:	4682      	mov	sl, r0
 8004f38:	1813      	adds	r3, r2, r0
 8004f3a:	2a01      	cmp	r2, #1
 8004f3c:	6123      	str	r3, [r4, #16]
 8004f3e:	dc02      	bgt.n	8004f46 <_printf_float+0x15e>
 8004f40:	6822      	ldr	r2, [r4, #0]
 8004f42:	07d2      	lsls	r2, r2, #31
 8004f44:	d501      	bpl.n	8004f4a <_printf_float+0x162>
 8004f46:	3301      	adds	r3, #1
 8004f48:	6123      	str	r3, [r4, #16]
 8004f4a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d09b      	beq.n	8004e8a <_printf_float+0xa2>
 8004f52:	232d      	movs	r3, #45	; 0x2d
 8004f54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f58:	e797      	b.n	8004e8a <_printf_float+0xa2>
 8004f5a:	2947      	cmp	r1, #71	; 0x47
 8004f5c:	d1bc      	bne.n	8004ed8 <_printf_float+0xf0>
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1ba      	bne.n	8004ed8 <_printf_float+0xf0>
 8004f62:	2301      	movs	r3, #1
 8004f64:	e7b7      	b.n	8004ed6 <_printf_float+0xee>
 8004f66:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004f6a:	d118      	bne.n	8004f9e <_printf_float+0x1b6>
 8004f6c:	2900      	cmp	r1, #0
 8004f6e:	6863      	ldr	r3, [r4, #4]
 8004f70:	dd0b      	ble.n	8004f8a <_printf_float+0x1a2>
 8004f72:	6121      	str	r1, [r4, #16]
 8004f74:	b913      	cbnz	r3, 8004f7c <_printf_float+0x194>
 8004f76:	6822      	ldr	r2, [r4, #0]
 8004f78:	07d0      	lsls	r0, r2, #31
 8004f7a:	d502      	bpl.n	8004f82 <_printf_float+0x19a>
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	440b      	add	r3, r1
 8004f80:	6123      	str	r3, [r4, #16]
 8004f82:	f04f 0a00 	mov.w	sl, #0
 8004f86:	65a1      	str	r1, [r4, #88]	; 0x58
 8004f88:	e7df      	b.n	8004f4a <_printf_float+0x162>
 8004f8a:	b913      	cbnz	r3, 8004f92 <_printf_float+0x1aa>
 8004f8c:	6822      	ldr	r2, [r4, #0]
 8004f8e:	07d2      	lsls	r2, r2, #31
 8004f90:	d501      	bpl.n	8004f96 <_printf_float+0x1ae>
 8004f92:	3302      	adds	r3, #2
 8004f94:	e7f4      	b.n	8004f80 <_printf_float+0x198>
 8004f96:	2301      	movs	r3, #1
 8004f98:	e7f2      	b.n	8004f80 <_printf_float+0x198>
 8004f9a:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004f9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004fa0:	4299      	cmp	r1, r3
 8004fa2:	db05      	blt.n	8004fb0 <_printf_float+0x1c8>
 8004fa4:	6823      	ldr	r3, [r4, #0]
 8004fa6:	6121      	str	r1, [r4, #16]
 8004fa8:	07d8      	lsls	r0, r3, #31
 8004faa:	d5ea      	bpl.n	8004f82 <_printf_float+0x19a>
 8004fac:	1c4b      	adds	r3, r1, #1
 8004fae:	e7e7      	b.n	8004f80 <_printf_float+0x198>
 8004fb0:	2900      	cmp	r1, #0
 8004fb2:	bfcc      	ite	gt
 8004fb4:	2201      	movgt	r2, #1
 8004fb6:	f1c1 0202 	rsble	r2, r1, #2
 8004fba:	4413      	add	r3, r2
 8004fbc:	e7e0      	b.n	8004f80 <_printf_float+0x198>
 8004fbe:	6823      	ldr	r3, [r4, #0]
 8004fc0:	055a      	lsls	r2, r3, #21
 8004fc2:	d407      	bmi.n	8004fd4 <_printf_float+0x1ec>
 8004fc4:	6923      	ldr	r3, [r4, #16]
 8004fc6:	4642      	mov	r2, r8
 8004fc8:	4631      	mov	r1, r6
 8004fca:	4628      	mov	r0, r5
 8004fcc:	47b8      	blx	r7
 8004fce:	3001      	adds	r0, #1
 8004fd0:	d12b      	bne.n	800502a <_printf_float+0x242>
 8004fd2:	e764      	b.n	8004e9e <_printf_float+0xb6>
 8004fd4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004fd8:	f240 80dd 	bls.w	8005196 <_printf_float+0x3ae>
 8004fdc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	f7fb fce0 	bl	80009a8 <__aeabi_dcmpeq>
 8004fe8:	2800      	cmp	r0, #0
 8004fea:	d033      	beq.n	8005054 <_printf_float+0x26c>
 8004fec:	2301      	movs	r3, #1
 8004fee:	4631      	mov	r1, r6
 8004ff0:	4628      	mov	r0, r5
 8004ff2:	4a35      	ldr	r2, [pc, #212]	; (80050c8 <_printf_float+0x2e0>)
 8004ff4:	47b8      	blx	r7
 8004ff6:	3001      	adds	r0, #1
 8004ff8:	f43f af51 	beq.w	8004e9e <_printf_float+0xb6>
 8004ffc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005000:	429a      	cmp	r2, r3
 8005002:	db02      	blt.n	800500a <_printf_float+0x222>
 8005004:	6823      	ldr	r3, [r4, #0]
 8005006:	07d8      	lsls	r0, r3, #31
 8005008:	d50f      	bpl.n	800502a <_printf_float+0x242>
 800500a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800500e:	4631      	mov	r1, r6
 8005010:	4628      	mov	r0, r5
 8005012:	47b8      	blx	r7
 8005014:	3001      	adds	r0, #1
 8005016:	f43f af42 	beq.w	8004e9e <_printf_float+0xb6>
 800501a:	f04f 0800 	mov.w	r8, #0
 800501e:	f104 091a 	add.w	r9, r4, #26
 8005022:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005024:	3b01      	subs	r3, #1
 8005026:	4543      	cmp	r3, r8
 8005028:	dc09      	bgt.n	800503e <_printf_float+0x256>
 800502a:	6823      	ldr	r3, [r4, #0]
 800502c:	079b      	lsls	r3, r3, #30
 800502e:	f100 8102 	bmi.w	8005236 <_printf_float+0x44e>
 8005032:	68e0      	ldr	r0, [r4, #12]
 8005034:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005036:	4298      	cmp	r0, r3
 8005038:	bfb8      	it	lt
 800503a:	4618      	movlt	r0, r3
 800503c:	e731      	b.n	8004ea2 <_printf_float+0xba>
 800503e:	2301      	movs	r3, #1
 8005040:	464a      	mov	r2, r9
 8005042:	4631      	mov	r1, r6
 8005044:	4628      	mov	r0, r5
 8005046:	47b8      	blx	r7
 8005048:	3001      	adds	r0, #1
 800504a:	f43f af28 	beq.w	8004e9e <_printf_float+0xb6>
 800504e:	f108 0801 	add.w	r8, r8, #1
 8005052:	e7e6      	b.n	8005022 <_printf_float+0x23a>
 8005054:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005056:	2b00      	cmp	r3, #0
 8005058:	dc38      	bgt.n	80050cc <_printf_float+0x2e4>
 800505a:	2301      	movs	r3, #1
 800505c:	4631      	mov	r1, r6
 800505e:	4628      	mov	r0, r5
 8005060:	4a19      	ldr	r2, [pc, #100]	; (80050c8 <_printf_float+0x2e0>)
 8005062:	47b8      	blx	r7
 8005064:	3001      	adds	r0, #1
 8005066:	f43f af1a 	beq.w	8004e9e <_printf_float+0xb6>
 800506a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800506e:	4313      	orrs	r3, r2
 8005070:	d102      	bne.n	8005078 <_printf_float+0x290>
 8005072:	6823      	ldr	r3, [r4, #0]
 8005074:	07d9      	lsls	r1, r3, #31
 8005076:	d5d8      	bpl.n	800502a <_printf_float+0x242>
 8005078:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800507c:	4631      	mov	r1, r6
 800507e:	4628      	mov	r0, r5
 8005080:	47b8      	blx	r7
 8005082:	3001      	adds	r0, #1
 8005084:	f43f af0b 	beq.w	8004e9e <_printf_float+0xb6>
 8005088:	f04f 0900 	mov.w	r9, #0
 800508c:	f104 0a1a 	add.w	sl, r4, #26
 8005090:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005092:	425b      	negs	r3, r3
 8005094:	454b      	cmp	r3, r9
 8005096:	dc01      	bgt.n	800509c <_printf_float+0x2b4>
 8005098:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800509a:	e794      	b.n	8004fc6 <_printf_float+0x1de>
 800509c:	2301      	movs	r3, #1
 800509e:	4652      	mov	r2, sl
 80050a0:	4631      	mov	r1, r6
 80050a2:	4628      	mov	r0, r5
 80050a4:	47b8      	blx	r7
 80050a6:	3001      	adds	r0, #1
 80050a8:	f43f aef9 	beq.w	8004e9e <_printf_float+0xb6>
 80050ac:	f109 0901 	add.w	r9, r9, #1
 80050b0:	e7ee      	b.n	8005090 <_printf_float+0x2a8>
 80050b2:	bf00      	nop
 80050b4:	7fefffff 	.word	0x7fefffff
 80050b8:	08009514 	.word	0x08009514
 80050bc:	08009518 	.word	0x08009518
 80050c0:	08009520 	.word	0x08009520
 80050c4:	0800951c 	.word	0x0800951c
 80050c8:	08009524 	.word	0x08009524
 80050cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80050ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80050d0:	429a      	cmp	r2, r3
 80050d2:	bfa8      	it	ge
 80050d4:	461a      	movge	r2, r3
 80050d6:	2a00      	cmp	r2, #0
 80050d8:	4691      	mov	r9, r2
 80050da:	dc37      	bgt.n	800514c <_printf_float+0x364>
 80050dc:	f04f 0b00 	mov.w	fp, #0
 80050e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80050e4:	f104 021a 	add.w	r2, r4, #26
 80050e8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80050ec:	ebaa 0309 	sub.w	r3, sl, r9
 80050f0:	455b      	cmp	r3, fp
 80050f2:	dc33      	bgt.n	800515c <_printf_float+0x374>
 80050f4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80050f8:	429a      	cmp	r2, r3
 80050fa:	db3b      	blt.n	8005174 <_printf_float+0x38c>
 80050fc:	6823      	ldr	r3, [r4, #0]
 80050fe:	07da      	lsls	r2, r3, #31
 8005100:	d438      	bmi.n	8005174 <_printf_float+0x38c>
 8005102:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005104:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005106:	eba2 030a 	sub.w	r3, r2, sl
 800510a:	eba2 0901 	sub.w	r9, r2, r1
 800510e:	4599      	cmp	r9, r3
 8005110:	bfa8      	it	ge
 8005112:	4699      	movge	r9, r3
 8005114:	f1b9 0f00 	cmp.w	r9, #0
 8005118:	dc34      	bgt.n	8005184 <_printf_float+0x39c>
 800511a:	f04f 0800 	mov.w	r8, #0
 800511e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005122:	f104 0a1a 	add.w	sl, r4, #26
 8005126:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800512a:	1a9b      	subs	r3, r3, r2
 800512c:	eba3 0309 	sub.w	r3, r3, r9
 8005130:	4543      	cmp	r3, r8
 8005132:	f77f af7a 	ble.w	800502a <_printf_float+0x242>
 8005136:	2301      	movs	r3, #1
 8005138:	4652      	mov	r2, sl
 800513a:	4631      	mov	r1, r6
 800513c:	4628      	mov	r0, r5
 800513e:	47b8      	blx	r7
 8005140:	3001      	adds	r0, #1
 8005142:	f43f aeac 	beq.w	8004e9e <_printf_float+0xb6>
 8005146:	f108 0801 	add.w	r8, r8, #1
 800514a:	e7ec      	b.n	8005126 <_printf_float+0x33e>
 800514c:	4613      	mov	r3, r2
 800514e:	4631      	mov	r1, r6
 8005150:	4642      	mov	r2, r8
 8005152:	4628      	mov	r0, r5
 8005154:	47b8      	blx	r7
 8005156:	3001      	adds	r0, #1
 8005158:	d1c0      	bne.n	80050dc <_printf_float+0x2f4>
 800515a:	e6a0      	b.n	8004e9e <_printf_float+0xb6>
 800515c:	2301      	movs	r3, #1
 800515e:	4631      	mov	r1, r6
 8005160:	4628      	mov	r0, r5
 8005162:	920b      	str	r2, [sp, #44]	; 0x2c
 8005164:	47b8      	blx	r7
 8005166:	3001      	adds	r0, #1
 8005168:	f43f ae99 	beq.w	8004e9e <_printf_float+0xb6>
 800516c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800516e:	f10b 0b01 	add.w	fp, fp, #1
 8005172:	e7b9      	b.n	80050e8 <_printf_float+0x300>
 8005174:	4631      	mov	r1, r6
 8005176:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800517a:	4628      	mov	r0, r5
 800517c:	47b8      	blx	r7
 800517e:	3001      	adds	r0, #1
 8005180:	d1bf      	bne.n	8005102 <_printf_float+0x31a>
 8005182:	e68c      	b.n	8004e9e <_printf_float+0xb6>
 8005184:	464b      	mov	r3, r9
 8005186:	4631      	mov	r1, r6
 8005188:	4628      	mov	r0, r5
 800518a:	eb08 020a 	add.w	r2, r8, sl
 800518e:	47b8      	blx	r7
 8005190:	3001      	adds	r0, #1
 8005192:	d1c2      	bne.n	800511a <_printf_float+0x332>
 8005194:	e683      	b.n	8004e9e <_printf_float+0xb6>
 8005196:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005198:	2a01      	cmp	r2, #1
 800519a:	dc01      	bgt.n	80051a0 <_printf_float+0x3b8>
 800519c:	07db      	lsls	r3, r3, #31
 800519e:	d537      	bpl.n	8005210 <_printf_float+0x428>
 80051a0:	2301      	movs	r3, #1
 80051a2:	4642      	mov	r2, r8
 80051a4:	4631      	mov	r1, r6
 80051a6:	4628      	mov	r0, r5
 80051a8:	47b8      	blx	r7
 80051aa:	3001      	adds	r0, #1
 80051ac:	f43f ae77 	beq.w	8004e9e <_printf_float+0xb6>
 80051b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80051b4:	4631      	mov	r1, r6
 80051b6:	4628      	mov	r0, r5
 80051b8:	47b8      	blx	r7
 80051ba:	3001      	adds	r0, #1
 80051bc:	f43f ae6f 	beq.w	8004e9e <_printf_float+0xb6>
 80051c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80051c4:	2200      	movs	r2, #0
 80051c6:	2300      	movs	r3, #0
 80051c8:	f7fb fbee 	bl	80009a8 <__aeabi_dcmpeq>
 80051cc:	b9d8      	cbnz	r0, 8005206 <_printf_float+0x41e>
 80051ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80051d0:	f108 0201 	add.w	r2, r8, #1
 80051d4:	3b01      	subs	r3, #1
 80051d6:	4631      	mov	r1, r6
 80051d8:	4628      	mov	r0, r5
 80051da:	47b8      	blx	r7
 80051dc:	3001      	adds	r0, #1
 80051de:	d10e      	bne.n	80051fe <_printf_float+0x416>
 80051e0:	e65d      	b.n	8004e9e <_printf_float+0xb6>
 80051e2:	2301      	movs	r3, #1
 80051e4:	464a      	mov	r2, r9
 80051e6:	4631      	mov	r1, r6
 80051e8:	4628      	mov	r0, r5
 80051ea:	47b8      	blx	r7
 80051ec:	3001      	adds	r0, #1
 80051ee:	f43f ae56 	beq.w	8004e9e <_printf_float+0xb6>
 80051f2:	f108 0801 	add.w	r8, r8, #1
 80051f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80051f8:	3b01      	subs	r3, #1
 80051fa:	4543      	cmp	r3, r8
 80051fc:	dcf1      	bgt.n	80051e2 <_printf_float+0x3fa>
 80051fe:	4653      	mov	r3, sl
 8005200:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005204:	e6e0      	b.n	8004fc8 <_printf_float+0x1e0>
 8005206:	f04f 0800 	mov.w	r8, #0
 800520a:	f104 091a 	add.w	r9, r4, #26
 800520e:	e7f2      	b.n	80051f6 <_printf_float+0x40e>
 8005210:	2301      	movs	r3, #1
 8005212:	4642      	mov	r2, r8
 8005214:	e7df      	b.n	80051d6 <_printf_float+0x3ee>
 8005216:	2301      	movs	r3, #1
 8005218:	464a      	mov	r2, r9
 800521a:	4631      	mov	r1, r6
 800521c:	4628      	mov	r0, r5
 800521e:	47b8      	blx	r7
 8005220:	3001      	adds	r0, #1
 8005222:	f43f ae3c 	beq.w	8004e9e <_printf_float+0xb6>
 8005226:	f108 0801 	add.w	r8, r8, #1
 800522a:	68e3      	ldr	r3, [r4, #12]
 800522c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800522e:	1a5b      	subs	r3, r3, r1
 8005230:	4543      	cmp	r3, r8
 8005232:	dcf0      	bgt.n	8005216 <_printf_float+0x42e>
 8005234:	e6fd      	b.n	8005032 <_printf_float+0x24a>
 8005236:	f04f 0800 	mov.w	r8, #0
 800523a:	f104 0919 	add.w	r9, r4, #25
 800523e:	e7f4      	b.n	800522a <_printf_float+0x442>

08005240 <_printf_common>:
 8005240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005244:	4616      	mov	r6, r2
 8005246:	4699      	mov	r9, r3
 8005248:	688a      	ldr	r2, [r1, #8]
 800524a:	690b      	ldr	r3, [r1, #16]
 800524c:	4607      	mov	r7, r0
 800524e:	4293      	cmp	r3, r2
 8005250:	bfb8      	it	lt
 8005252:	4613      	movlt	r3, r2
 8005254:	6033      	str	r3, [r6, #0]
 8005256:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800525a:	460c      	mov	r4, r1
 800525c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005260:	b10a      	cbz	r2, 8005266 <_printf_common+0x26>
 8005262:	3301      	adds	r3, #1
 8005264:	6033      	str	r3, [r6, #0]
 8005266:	6823      	ldr	r3, [r4, #0]
 8005268:	0699      	lsls	r1, r3, #26
 800526a:	bf42      	ittt	mi
 800526c:	6833      	ldrmi	r3, [r6, #0]
 800526e:	3302      	addmi	r3, #2
 8005270:	6033      	strmi	r3, [r6, #0]
 8005272:	6825      	ldr	r5, [r4, #0]
 8005274:	f015 0506 	ands.w	r5, r5, #6
 8005278:	d106      	bne.n	8005288 <_printf_common+0x48>
 800527a:	f104 0a19 	add.w	sl, r4, #25
 800527e:	68e3      	ldr	r3, [r4, #12]
 8005280:	6832      	ldr	r2, [r6, #0]
 8005282:	1a9b      	subs	r3, r3, r2
 8005284:	42ab      	cmp	r3, r5
 8005286:	dc28      	bgt.n	80052da <_printf_common+0x9a>
 8005288:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800528c:	1e13      	subs	r3, r2, #0
 800528e:	6822      	ldr	r2, [r4, #0]
 8005290:	bf18      	it	ne
 8005292:	2301      	movne	r3, #1
 8005294:	0692      	lsls	r2, r2, #26
 8005296:	d42d      	bmi.n	80052f4 <_printf_common+0xb4>
 8005298:	4649      	mov	r1, r9
 800529a:	4638      	mov	r0, r7
 800529c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052a0:	47c0      	blx	r8
 80052a2:	3001      	adds	r0, #1
 80052a4:	d020      	beq.n	80052e8 <_printf_common+0xa8>
 80052a6:	6823      	ldr	r3, [r4, #0]
 80052a8:	68e5      	ldr	r5, [r4, #12]
 80052aa:	f003 0306 	and.w	r3, r3, #6
 80052ae:	2b04      	cmp	r3, #4
 80052b0:	bf18      	it	ne
 80052b2:	2500      	movne	r5, #0
 80052b4:	6832      	ldr	r2, [r6, #0]
 80052b6:	f04f 0600 	mov.w	r6, #0
 80052ba:	68a3      	ldr	r3, [r4, #8]
 80052bc:	bf08      	it	eq
 80052be:	1aad      	subeq	r5, r5, r2
 80052c0:	6922      	ldr	r2, [r4, #16]
 80052c2:	bf08      	it	eq
 80052c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052c8:	4293      	cmp	r3, r2
 80052ca:	bfc4      	itt	gt
 80052cc:	1a9b      	subgt	r3, r3, r2
 80052ce:	18ed      	addgt	r5, r5, r3
 80052d0:	341a      	adds	r4, #26
 80052d2:	42b5      	cmp	r5, r6
 80052d4:	d11a      	bne.n	800530c <_printf_common+0xcc>
 80052d6:	2000      	movs	r0, #0
 80052d8:	e008      	b.n	80052ec <_printf_common+0xac>
 80052da:	2301      	movs	r3, #1
 80052dc:	4652      	mov	r2, sl
 80052de:	4649      	mov	r1, r9
 80052e0:	4638      	mov	r0, r7
 80052e2:	47c0      	blx	r8
 80052e4:	3001      	adds	r0, #1
 80052e6:	d103      	bne.n	80052f0 <_printf_common+0xb0>
 80052e8:	f04f 30ff 	mov.w	r0, #4294967295
 80052ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052f0:	3501      	adds	r5, #1
 80052f2:	e7c4      	b.n	800527e <_printf_common+0x3e>
 80052f4:	2030      	movs	r0, #48	; 0x30
 80052f6:	18e1      	adds	r1, r4, r3
 80052f8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80052fc:	1c5a      	adds	r2, r3, #1
 80052fe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005302:	4422      	add	r2, r4
 8005304:	3302      	adds	r3, #2
 8005306:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800530a:	e7c5      	b.n	8005298 <_printf_common+0x58>
 800530c:	2301      	movs	r3, #1
 800530e:	4622      	mov	r2, r4
 8005310:	4649      	mov	r1, r9
 8005312:	4638      	mov	r0, r7
 8005314:	47c0      	blx	r8
 8005316:	3001      	adds	r0, #1
 8005318:	d0e6      	beq.n	80052e8 <_printf_common+0xa8>
 800531a:	3601      	adds	r6, #1
 800531c:	e7d9      	b.n	80052d2 <_printf_common+0x92>
	...

08005320 <_printf_i>:
 8005320:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005324:	460c      	mov	r4, r1
 8005326:	7e27      	ldrb	r7, [r4, #24]
 8005328:	4691      	mov	r9, r2
 800532a:	2f78      	cmp	r7, #120	; 0x78
 800532c:	4680      	mov	r8, r0
 800532e:	469a      	mov	sl, r3
 8005330:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005332:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005336:	d807      	bhi.n	8005348 <_printf_i+0x28>
 8005338:	2f62      	cmp	r7, #98	; 0x62
 800533a:	d80a      	bhi.n	8005352 <_printf_i+0x32>
 800533c:	2f00      	cmp	r7, #0
 800533e:	f000 80d9 	beq.w	80054f4 <_printf_i+0x1d4>
 8005342:	2f58      	cmp	r7, #88	; 0x58
 8005344:	f000 80a4 	beq.w	8005490 <_printf_i+0x170>
 8005348:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800534c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005350:	e03a      	b.n	80053c8 <_printf_i+0xa8>
 8005352:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005356:	2b15      	cmp	r3, #21
 8005358:	d8f6      	bhi.n	8005348 <_printf_i+0x28>
 800535a:	a001      	add	r0, pc, #4	; (adr r0, 8005360 <_printf_i+0x40>)
 800535c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005360:	080053b9 	.word	0x080053b9
 8005364:	080053cd 	.word	0x080053cd
 8005368:	08005349 	.word	0x08005349
 800536c:	08005349 	.word	0x08005349
 8005370:	08005349 	.word	0x08005349
 8005374:	08005349 	.word	0x08005349
 8005378:	080053cd 	.word	0x080053cd
 800537c:	08005349 	.word	0x08005349
 8005380:	08005349 	.word	0x08005349
 8005384:	08005349 	.word	0x08005349
 8005388:	08005349 	.word	0x08005349
 800538c:	080054db 	.word	0x080054db
 8005390:	080053fd 	.word	0x080053fd
 8005394:	080054bd 	.word	0x080054bd
 8005398:	08005349 	.word	0x08005349
 800539c:	08005349 	.word	0x08005349
 80053a0:	080054fd 	.word	0x080054fd
 80053a4:	08005349 	.word	0x08005349
 80053a8:	080053fd 	.word	0x080053fd
 80053ac:	08005349 	.word	0x08005349
 80053b0:	08005349 	.word	0x08005349
 80053b4:	080054c5 	.word	0x080054c5
 80053b8:	680b      	ldr	r3, [r1, #0]
 80053ba:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80053be:	1d1a      	adds	r2, r3, #4
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	600a      	str	r2, [r1, #0]
 80053c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053c8:	2301      	movs	r3, #1
 80053ca:	e0a4      	b.n	8005516 <_printf_i+0x1f6>
 80053cc:	6825      	ldr	r5, [r4, #0]
 80053ce:	6808      	ldr	r0, [r1, #0]
 80053d0:	062e      	lsls	r6, r5, #24
 80053d2:	f100 0304 	add.w	r3, r0, #4
 80053d6:	d50a      	bpl.n	80053ee <_printf_i+0xce>
 80053d8:	6805      	ldr	r5, [r0, #0]
 80053da:	600b      	str	r3, [r1, #0]
 80053dc:	2d00      	cmp	r5, #0
 80053de:	da03      	bge.n	80053e8 <_printf_i+0xc8>
 80053e0:	232d      	movs	r3, #45	; 0x2d
 80053e2:	426d      	negs	r5, r5
 80053e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053e8:	230a      	movs	r3, #10
 80053ea:	485e      	ldr	r0, [pc, #376]	; (8005564 <_printf_i+0x244>)
 80053ec:	e019      	b.n	8005422 <_printf_i+0x102>
 80053ee:	f015 0f40 	tst.w	r5, #64	; 0x40
 80053f2:	6805      	ldr	r5, [r0, #0]
 80053f4:	600b      	str	r3, [r1, #0]
 80053f6:	bf18      	it	ne
 80053f8:	b22d      	sxthne	r5, r5
 80053fa:	e7ef      	b.n	80053dc <_printf_i+0xbc>
 80053fc:	680b      	ldr	r3, [r1, #0]
 80053fe:	6825      	ldr	r5, [r4, #0]
 8005400:	1d18      	adds	r0, r3, #4
 8005402:	6008      	str	r0, [r1, #0]
 8005404:	0628      	lsls	r0, r5, #24
 8005406:	d501      	bpl.n	800540c <_printf_i+0xec>
 8005408:	681d      	ldr	r5, [r3, #0]
 800540a:	e002      	b.n	8005412 <_printf_i+0xf2>
 800540c:	0669      	lsls	r1, r5, #25
 800540e:	d5fb      	bpl.n	8005408 <_printf_i+0xe8>
 8005410:	881d      	ldrh	r5, [r3, #0]
 8005412:	2f6f      	cmp	r7, #111	; 0x6f
 8005414:	bf0c      	ite	eq
 8005416:	2308      	moveq	r3, #8
 8005418:	230a      	movne	r3, #10
 800541a:	4852      	ldr	r0, [pc, #328]	; (8005564 <_printf_i+0x244>)
 800541c:	2100      	movs	r1, #0
 800541e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005422:	6866      	ldr	r6, [r4, #4]
 8005424:	2e00      	cmp	r6, #0
 8005426:	bfa8      	it	ge
 8005428:	6821      	ldrge	r1, [r4, #0]
 800542a:	60a6      	str	r6, [r4, #8]
 800542c:	bfa4      	itt	ge
 800542e:	f021 0104 	bicge.w	r1, r1, #4
 8005432:	6021      	strge	r1, [r4, #0]
 8005434:	b90d      	cbnz	r5, 800543a <_printf_i+0x11a>
 8005436:	2e00      	cmp	r6, #0
 8005438:	d04d      	beq.n	80054d6 <_printf_i+0x1b6>
 800543a:	4616      	mov	r6, r2
 800543c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005440:	fb03 5711 	mls	r7, r3, r1, r5
 8005444:	5dc7      	ldrb	r7, [r0, r7]
 8005446:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800544a:	462f      	mov	r7, r5
 800544c:	42bb      	cmp	r3, r7
 800544e:	460d      	mov	r5, r1
 8005450:	d9f4      	bls.n	800543c <_printf_i+0x11c>
 8005452:	2b08      	cmp	r3, #8
 8005454:	d10b      	bne.n	800546e <_printf_i+0x14e>
 8005456:	6823      	ldr	r3, [r4, #0]
 8005458:	07df      	lsls	r7, r3, #31
 800545a:	d508      	bpl.n	800546e <_printf_i+0x14e>
 800545c:	6923      	ldr	r3, [r4, #16]
 800545e:	6861      	ldr	r1, [r4, #4]
 8005460:	4299      	cmp	r1, r3
 8005462:	bfde      	ittt	le
 8005464:	2330      	movle	r3, #48	; 0x30
 8005466:	f806 3c01 	strble.w	r3, [r6, #-1]
 800546a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800546e:	1b92      	subs	r2, r2, r6
 8005470:	6122      	str	r2, [r4, #16]
 8005472:	464b      	mov	r3, r9
 8005474:	4621      	mov	r1, r4
 8005476:	4640      	mov	r0, r8
 8005478:	f8cd a000 	str.w	sl, [sp]
 800547c:	aa03      	add	r2, sp, #12
 800547e:	f7ff fedf 	bl	8005240 <_printf_common>
 8005482:	3001      	adds	r0, #1
 8005484:	d14c      	bne.n	8005520 <_printf_i+0x200>
 8005486:	f04f 30ff 	mov.w	r0, #4294967295
 800548a:	b004      	add	sp, #16
 800548c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005490:	4834      	ldr	r0, [pc, #208]	; (8005564 <_printf_i+0x244>)
 8005492:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005496:	680e      	ldr	r6, [r1, #0]
 8005498:	6823      	ldr	r3, [r4, #0]
 800549a:	f856 5b04 	ldr.w	r5, [r6], #4
 800549e:	061f      	lsls	r7, r3, #24
 80054a0:	600e      	str	r6, [r1, #0]
 80054a2:	d514      	bpl.n	80054ce <_printf_i+0x1ae>
 80054a4:	07d9      	lsls	r1, r3, #31
 80054a6:	bf44      	itt	mi
 80054a8:	f043 0320 	orrmi.w	r3, r3, #32
 80054ac:	6023      	strmi	r3, [r4, #0]
 80054ae:	b91d      	cbnz	r5, 80054b8 <_printf_i+0x198>
 80054b0:	6823      	ldr	r3, [r4, #0]
 80054b2:	f023 0320 	bic.w	r3, r3, #32
 80054b6:	6023      	str	r3, [r4, #0]
 80054b8:	2310      	movs	r3, #16
 80054ba:	e7af      	b.n	800541c <_printf_i+0xfc>
 80054bc:	6823      	ldr	r3, [r4, #0]
 80054be:	f043 0320 	orr.w	r3, r3, #32
 80054c2:	6023      	str	r3, [r4, #0]
 80054c4:	2378      	movs	r3, #120	; 0x78
 80054c6:	4828      	ldr	r0, [pc, #160]	; (8005568 <_printf_i+0x248>)
 80054c8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80054cc:	e7e3      	b.n	8005496 <_printf_i+0x176>
 80054ce:	065e      	lsls	r6, r3, #25
 80054d0:	bf48      	it	mi
 80054d2:	b2ad      	uxthmi	r5, r5
 80054d4:	e7e6      	b.n	80054a4 <_printf_i+0x184>
 80054d6:	4616      	mov	r6, r2
 80054d8:	e7bb      	b.n	8005452 <_printf_i+0x132>
 80054da:	680b      	ldr	r3, [r1, #0]
 80054dc:	6826      	ldr	r6, [r4, #0]
 80054de:	1d1d      	adds	r5, r3, #4
 80054e0:	6960      	ldr	r0, [r4, #20]
 80054e2:	600d      	str	r5, [r1, #0]
 80054e4:	0635      	lsls	r5, r6, #24
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	d501      	bpl.n	80054ee <_printf_i+0x1ce>
 80054ea:	6018      	str	r0, [r3, #0]
 80054ec:	e002      	b.n	80054f4 <_printf_i+0x1d4>
 80054ee:	0671      	lsls	r1, r6, #25
 80054f0:	d5fb      	bpl.n	80054ea <_printf_i+0x1ca>
 80054f2:	8018      	strh	r0, [r3, #0]
 80054f4:	2300      	movs	r3, #0
 80054f6:	4616      	mov	r6, r2
 80054f8:	6123      	str	r3, [r4, #16]
 80054fa:	e7ba      	b.n	8005472 <_printf_i+0x152>
 80054fc:	680b      	ldr	r3, [r1, #0]
 80054fe:	1d1a      	adds	r2, r3, #4
 8005500:	600a      	str	r2, [r1, #0]
 8005502:	681e      	ldr	r6, [r3, #0]
 8005504:	2100      	movs	r1, #0
 8005506:	4630      	mov	r0, r6
 8005508:	6862      	ldr	r2, [r4, #4]
 800550a:	f002 fb0b 	bl	8007b24 <memchr>
 800550e:	b108      	cbz	r0, 8005514 <_printf_i+0x1f4>
 8005510:	1b80      	subs	r0, r0, r6
 8005512:	6060      	str	r0, [r4, #4]
 8005514:	6863      	ldr	r3, [r4, #4]
 8005516:	6123      	str	r3, [r4, #16]
 8005518:	2300      	movs	r3, #0
 800551a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800551e:	e7a8      	b.n	8005472 <_printf_i+0x152>
 8005520:	4632      	mov	r2, r6
 8005522:	4649      	mov	r1, r9
 8005524:	4640      	mov	r0, r8
 8005526:	6923      	ldr	r3, [r4, #16]
 8005528:	47d0      	blx	sl
 800552a:	3001      	adds	r0, #1
 800552c:	d0ab      	beq.n	8005486 <_printf_i+0x166>
 800552e:	6823      	ldr	r3, [r4, #0]
 8005530:	079b      	lsls	r3, r3, #30
 8005532:	d413      	bmi.n	800555c <_printf_i+0x23c>
 8005534:	68e0      	ldr	r0, [r4, #12]
 8005536:	9b03      	ldr	r3, [sp, #12]
 8005538:	4298      	cmp	r0, r3
 800553a:	bfb8      	it	lt
 800553c:	4618      	movlt	r0, r3
 800553e:	e7a4      	b.n	800548a <_printf_i+0x16a>
 8005540:	2301      	movs	r3, #1
 8005542:	4632      	mov	r2, r6
 8005544:	4649      	mov	r1, r9
 8005546:	4640      	mov	r0, r8
 8005548:	47d0      	blx	sl
 800554a:	3001      	adds	r0, #1
 800554c:	d09b      	beq.n	8005486 <_printf_i+0x166>
 800554e:	3501      	adds	r5, #1
 8005550:	68e3      	ldr	r3, [r4, #12]
 8005552:	9903      	ldr	r1, [sp, #12]
 8005554:	1a5b      	subs	r3, r3, r1
 8005556:	42ab      	cmp	r3, r5
 8005558:	dcf2      	bgt.n	8005540 <_printf_i+0x220>
 800555a:	e7eb      	b.n	8005534 <_printf_i+0x214>
 800555c:	2500      	movs	r5, #0
 800555e:	f104 0619 	add.w	r6, r4, #25
 8005562:	e7f5      	b.n	8005550 <_printf_i+0x230>
 8005564:	08009526 	.word	0x08009526
 8005568:	08009537 	.word	0x08009537

0800556c <_scanf_float>:
 800556c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005570:	b087      	sub	sp, #28
 8005572:	9303      	str	r3, [sp, #12]
 8005574:	688b      	ldr	r3, [r1, #8]
 8005576:	4617      	mov	r7, r2
 8005578:	1e5a      	subs	r2, r3, #1
 800557a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800557e:	bf85      	ittet	hi
 8005580:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005584:	195b      	addhi	r3, r3, r5
 8005586:	2300      	movls	r3, #0
 8005588:	9302      	strhi	r3, [sp, #8]
 800558a:	bf88      	it	hi
 800558c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005590:	468b      	mov	fp, r1
 8005592:	f04f 0500 	mov.w	r5, #0
 8005596:	bf8c      	ite	hi
 8005598:	608b      	strhi	r3, [r1, #8]
 800559a:	9302      	strls	r3, [sp, #8]
 800559c:	680b      	ldr	r3, [r1, #0]
 800559e:	4680      	mov	r8, r0
 80055a0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80055a4:	f84b 3b1c 	str.w	r3, [fp], #28
 80055a8:	460c      	mov	r4, r1
 80055aa:	465e      	mov	r6, fp
 80055ac:	46aa      	mov	sl, r5
 80055ae:	46a9      	mov	r9, r5
 80055b0:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80055b4:	9501      	str	r5, [sp, #4]
 80055b6:	68a2      	ldr	r2, [r4, #8]
 80055b8:	b152      	cbz	r2, 80055d0 <_scanf_float+0x64>
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	2b4e      	cmp	r3, #78	; 0x4e
 80055c0:	d864      	bhi.n	800568c <_scanf_float+0x120>
 80055c2:	2b40      	cmp	r3, #64	; 0x40
 80055c4:	d83c      	bhi.n	8005640 <_scanf_float+0xd4>
 80055c6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80055ca:	b2c8      	uxtb	r0, r1
 80055cc:	280e      	cmp	r0, #14
 80055ce:	d93a      	bls.n	8005646 <_scanf_float+0xda>
 80055d0:	f1b9 0f00 	cmp.w	r9, #0
 80055d4:	d003      	beq.n	80055de <_scanf_float+0x72>
 80055d6:	6823      	ldr	r3, [r4, #0]
 80055d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055dc:	6023      	str	r3, [r4, #0]
 80055de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80055e2:	f1ba 0f01 	cmp.w	sl, #1
 80055e6:	f200 8113 	bhi.w	8005810 <_scanf_float+0x2a4>
 80055ea:	455e      	cmp	r6, fp
 80055ec:	f200 8105 	bhi.w	80057fa <_scanf_float+0x28e>
 80055f0:	2501      	movs	r5, #1
 80055f2:	4628      	mov	r0, r5
 80055f4:	b007      	add	sp, #28
 80055f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055fa:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80055fe:	2a0d      	cmp	r2, #13
 8005600:	d8e6      	bhi.n	80055d0 <_scanf_float+0x64>
 8005602:	a101      	add	r1, pc, #4	; (adr r1, 8005608 <_scanf_float+0x9c>)
 8005604:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005608:	08005747 	.word	0x08005747
 800560c:	080055d1 	.word	0x080055d1
 8005610:	080055d1 	.word	0x080055d1
 8005614:	080055d1 	.word	0x080055d1
 8005618:	080057a7 	.word	0x080057a7
 800561c:	0800577f 	.word	0x0800577f
 8005620:	080055d1 	.word	0x080055d1
 8005624:	080055d1 	.word	0x080055d1
 8005628:	08005755 	.word	0x08005755
 800562c:	080055d1 	.word	0x080055d1
 8005630:	080055d1 	.word	0x080055d1
 8005634:	080055d1 	.word	0x080055d1
 8005638:	080055d1 	.word	0x080055d1
 800563c:	0800570d 	.word	0x0800570d
 8005640:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005644:	e7db      	b.n	80055fe <_scanf_float+0x92>
 8005646:	290e      	cmp	r1, #14
 8005648:	d8c2      	bhi.n	80055d0 <_scanf_float+0x64>
 800564a:	a001      	add	r0, pc, #4	; (adr r0, 8005650 <_scanf_float+0xe4>)
 800564c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005650:	080056ff 	.word	0x080056ff
 8005654:	080055d1 	.word	0x080055d1
 8005658:	080056ff 	.word	0x080056ff
 800565c:	08005793 	.word	0x08005793
 8005660:	080055d1 	.word	0x080055d1
 8005664:	080056ad 	.word	0x080056ad
 8005668:	080056e9 	.word	0x080056e9
 800566c:	080056e9 	.word	0x080056e9
 8005670:	080056e9 	.word	0x080056e9
 8005674:	080056e9 	.word	0x080056e9
 8005678:	080056e9 	.word	0x080056e9
 800567c:	080056e9 	.word	0x080056e9
 8005680:	080056e9 	.word	0x080056e9
 8005684:	080056e9 	.word	0x080056e9
 8005688:	080056e9 	.word	0x080056e9
 800568c:	2b6e      	cmp	r3, #110	; 0x6e
 800568e:	d809      	bhi.n	80056a4 <_scanf_float+0x138>
 8005690:	2b60      	cmp	r3, #96	; 0x60
 8005692:	d8b2      	bhi.n	80055fa <_scanf_float+0x8e>
 8005694:	2b54      	cmp	r3, #84	; 0x54
 8005696:	d077      	beq.n	8005788 <_scanf_float+0x21c>
 8005698:	2b59      	cmp	r3, #89	; 0x59
 800569a:	d199      	bne.n	80055d0 <_scanf_float+0x64>
 800569c:	2d07      	cmp	r5, #7
 800569e:	d197      	bne.n	80055d0 <_scanf_float+0x64>
 80056a0:	2508      	movs	r5, #8
 80056a2:	e029      	b.n	80056f8 <_scanf_float+0x18c>
 80056a4:	2b74      	cmp	r3, #116	; 0x74
 80056a6:	d06f      	beq.n	8005788 <_scanf_float+0x21c>
 80056a8:	2b79      	cmp	r3, #121	; 0x79
 80056aa:	e7f6      	b.n	800569a <_scanf_float+0x12e>
 80056ac:	6821      	ldr	r1, [r4, #0]
 80056ae:	05c8      	lsls	r0, r1, #23
 80056b0:	d51a      	bpl.n	80056e8 <_scanf_float+0x17c>
 80056b2:	9b02      	ldr	r3, [sp, #8]
 80056b4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80056b8:	6021      	str	r1, [r4, #0]
 80056ba:	f109 0901 	add.w	r9, r9, #1
 80056be:	b11b      	cbz	r3, 80056c8 <_scanf_float+0x15c>
 80056c0:	3b01      	subs	r3, #1
 80056c2:	3201      	adds	r2, #1
 80056c4:	9302      	str	r3, [sp, #8]
 80056c6:	60a2      	str	r2, [r4, #8]
 80056c8:	68a3      	ldr	r3, [r4, #8]
 80056ca:	3b01      	subs	r3, #1
 80056cc:	60a3      	str	r3, [r4, #8]
 80056ce:	6923      	ldr	r3, [r4, #16]
 80056d0:	3301      	adds	r3, #1
 80056d2:	6123      	str	r3, [r4, #16]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	3b01      	subs	r3, #1
 80056d8:	2b00      	cmp	r3, #0
 80056da:	607b      	str	r3, [r7, #4]
 80056dc:	f340 8084 	ble.w	80057e8 <_scanf_float+0x27c>
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	3301      	adds	r3, #1
 80056e4:	603b      	str	r3, [r7, #0]
 80056e6:	e766      	b.n	80055b6 <_scanf_float+0x4a>
 80056e8:	eb1a 0f05 	cmn.w	sl, r5
 80056ec:	f47f af70 	bne.w	80055d0 <_scanf_float+0x64>
 80056f0:	6822      	ldr	r2, [r4, #0]
 80056f2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80056f6:	6022      	str	r2, [r4, #0]
 80056f8:	f806 3b01 	strb.w	r3, [r6], #1
 80056fc:	e7e4      	b.n	80056c8 <_scanf_float+0x15c>
 80056fe:	6822      	ldr	r2, [r4, #0]
 8005700:	0610      	lsls	r0, r2, #24
 8005702:	f57f af65 	bpl.w	80055d0 <_scanf_float+0x64>
 8005706:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800570a:	e7f4      	b.n	80056f6 <_scanf_float+0x18a>
 800570c:	f1ba 0f00 	cmp.w	sl, #0
 8005710:	d10e      	bne.n	8005730 <_scanf_float+0x1c4>
 8005712:	f1b9 0f00 	cmp.w	r9, #0
 8005716:	d10e      	bne.n	8005736 <_scanf_float+0x1ca>
 8005718:	6822      	ldr	r2, [r4, #0]
 800571a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800571e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005722:	d108      	bne.n	8005736 <_scanf_float+0x1ca>
 8005724:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005728:	f04f 0a01 	mov.w	sl, #1
 800572c:	6022      	str	r2, [r4, #0]
 800572e:	e7e3      	b.n	80056f8 <_scanf_float+0x18c>
 8005730:	f1ba 0f02 	cmp.w	sl, #2
 8005734:	d055      	beq.n	80057e2 <_scanf_float+0x276>
 8005736:	2d01      	cmp	r5, #1
 8005738:	d002      	beq.n	8005740 <_scanf_float+0x1d4>
 800573a:	2d04      	cmp	r5, #4
 800573c:	f47f af48 	bne.w	80055d0 <_scanf_float+0x64>
 8005740:	3501      	adds	r5, #1
 8005742:	b2ed      	uxtb	r5, r5
 8005744:	e7d8      	b.n	80056f8 <_scanf_float+0x18c>
 8005746:	f1ba 0f01 	cmp.w	sl, #1
 800574a:	f47f af41 	bne.w	80055d0 <_scanf_float+0x64>
 800574e:	f04f 0a02 	mov.w	sl, #2
 8005752:	e7d1      	b.n	80056f8 <_scanf_float+0x18c>
 8005754:	b97d      	cbnz	r5, 8005776 <_scanf_float+0x20a>
 8005756:	f1b9 0f00 	cmp.w	r9, #0
 800575a:	f47f af3c 	bne.w	80055d6 <_scanf_float+0x6a>
 800575e:	6822      	ldr	r2, [r4, #0]
 8005760:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005764:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005768:	f47f af39 	bne.w	80055de <_scanf_float+0x72>
 800576c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005770:	2501      	movs	r5, #1
 8005772:	6022      	str	r2, [r4, #0]
 8005774:	e7c0      	b.n	80056f8 <_scanf_float+0x18c>
 8005776:	2d03      	cmp	r5, #3
 8005778:	d0e2      	beq.n	8005740 <_scanf_float+0x1d4>
 800577a:	2d05      	cmp	r5, #5
 800577c:	e7de      	b.n	800573c <_scanf_float+0x1d0>
 800577e:	2d02      	cmp	r5, #2
 8005780:	f47f af26 	bne.w	80055d0 <_scanf_float+0x64>
 8005784:	2503      	movs	r5, #3
 8005786:	e7b7      	b.n	80056f8 <_scanf_float+0x18c>
 8005788:	2d06      	cmp	r5, #6
 800578a:	f47f af21 	bne.w	80055d0 <_scanf_float+0x64>
 800578e:	2507      	movs	r5, #7
 8005790:	e7b2      	b.n	80056f8 <_scanf_float+0x18c>
 8005792:	6822      	ldr	r2, [r4, #0]
 8005794:	0591      	lsls	r1, r2, #22
 8005796:	f57f af1b 	bpl.w	80055d0 <_scanf_float+0x64>
 800579a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800579e:	6022      	str	r2, [r4, #0]
 80057a0:	f8cd 9004 	str.w	r9, [sp, #4]
 80057a4:	e7a8      	b.n	80056f8 <_scanf_float+0x18c>
 80057a6:	6822      	ldr	r2, [r4, #0]
 80057a8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80057ac:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80057b0:	d006      	beq.n	80057c0 <_scanf_float+0x254>
 80057b2:	0550      	lsls	r0, r2, #21
 80057b4:	f57f af0c 	bpl.w	80055d0 <_scanf_float+0x64>
 80057b8:	f1b9 0f00 	cmp.w	r9, #0
 80057bc:	f43f af0f 	beq.w	80055de <_scanf_float+0x72>
 80057c0:	0591      	lsls	r1, r2, #22
 80057c2:	bf58      	it	pl
 80057c4:	9901      	ldrpl	r1, [sp, #4]
 80057c6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80057ca:	bf58      	it	pl
 80057cc:	eba9 0101 	subpl.w	r1, r9, r1
 80057d0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80057d4:	f04f 0900 	mov.w	r9, #0
 80057d8:	bf58      	it	pl
 80057da:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80057de:	6022      	str	r2, [r4, #0]
 80057e0:	e78a      	b.n	80056f8 <_scanf_float+0x18c>
 80057e2:	f04f 0a03 	mov.w	sl, #3
 80057e6:	e787      	b.n	80056f8 <_scanf_float+0x18c>
 80057e8:	4639      	mov	r1, r7
 80057ea:	4640      	mov	r0, r8
 80057ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80057f0:	4798      	blx	r3
 80057f2:	2800      	cmp	r0, #0
 80057f4:	f43f aedf 	beq.w	80055b6 <_scanf_float+0x4a>
 80057f8:	e6ea      	b.n	80055d0 <_scanf_float+0x64>
 80057fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80057fe:	463a      	mov	r2, r7
 8005800:	4640      	mov	r0, r8
 8005802:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005806:	4798      	blx	r3
 8005808:	6923      	ldr	r3, [r4, #16]
 800580a:	3b01      	subs	r3, #1
 800580c:	6123      	str	r3, [r4, #16]
 800580e:	e6ec      	b.n	80055ea <_scanf_float+0x7e>
 8005810:	1e6b      	subs	r3, r5, #1
 8005812:	2b06      	cmp	r3, #6
 8005814:	d825      	bhi.n	8005862 <_scanf_float+0x2f6>
 8005816:	2d02      	cmp	r5, #2
 8005818:	d836      	bhi.n	8005888 <_scanf_float+0x31c>
 800581a:	455e      	cmp	r6, fp
 800581c:	f67f aee8 	bls.w	80055f0 <_scanf_float+0x84>
 8005820:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005824:	463a      	mov	r2, r7
 8005826:	4640      	mov	r0, r8
 8005828:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800582c:	4798      	blx	r3
 800582e:	6923      	ldr	r3, [r4, #16]
 8005830:	3b01      	subs	r3, #1
 8005832:	6123      	str	r3, [r4, #16]
 8005834:	e7f1      	b.n	800581a <_scanf_float+0x2ae>
 8005836:	9802      	ldr	r0, [sp, #8]
 8005838:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800583c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005840:	463a      	mov	r2, r7
 8005842:	9002      	str	r0, [sp, #8]
 8005844:	4640      	mov	r0, r8
 8005846:	4798      	blx	r3
 8005848:	6923      	ldr	r3, [r4, #16]
 800584a:	3b01      	subs	r3, #1
 800584c:	6123      	str	r3, [r4, #16]
 800584e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005852:	fa5f fa8a 	uxtb.w	sl, sl
 8005856:	f1ba 0f02 	cmp.w	sl, #2
 800585a:	d1ec      	bne.n	8005836 <_scanf_float+0x2ca>
 800585c:	3d03      	subs	r5, #3
 800585e:	b2ed      	uxtb	r5, r5
 8005860:	1b76      	subs	r6, r6, r5
 8005862:	6823      	ldr	r3, [r4, #0]
 8005864:	05da      	lsls	r2, r3, #23
 8005866:	d52f      	bpl.n	80058c8 <_scanf_float+0x35c>
 8005868:	055b      	lsls	r3, r3, #21
 800586a:	d510      	bpl.n	800588e <_scanf_float+0x322>
 800586c:	455e      	cmp	r6, fp
 800586e:	f67f aebf 	bls.w	80055f0 <_scanf_float+0x84>
 8005872:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005876:	463a      	mov	r2, r7
 8005878:	4640      	mov	r0, r8
 800587a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800587e:	4798      	blx	r3
 8005880:	6923      	ldr	r3, [r4, #16]
 8005882:	3b01      	subs	r3, #1
 8005884:	6123      	str	r3, [r4, #16]
 8005886:	e7f1      	b.n	800586c <_scanf_float+0x300>
 8005888:	46aa      	mov	sl, r5
 800588a:	9602      	str	r6, [sp, #8]
 800588c:	e7df      	b.n	800584e <_scanf_float+0x2e2>
 800588e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005892:	6923      	ldr	r3, [r4, #16]
 8005894:	2965      	cmp	r1, #101	; 0x65
 8005896:	f103 33ff 	add.w	r3, r3, #4294967295
 800589a:	f106 35ff 	add.w	r5, r6, #4294967295
 800589e:	6123      	str	r3, [r4, #16]
 80058a0:	d00c      	beq.n	80058bc <_scanf_float+0x350>
 80058a2:	2945      	cmp	r1, #69	; 0x45
 80058a4:	d00a      	beq.n	80058bc <_scanf_float+0x350>
 80058a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80058aa:	463a      	mov	r2, r7
 80058ac:	4640      	mov	r0, r8
 80058ae:	4798      	blx	r3
 80058b0:	6923      	ldr	r3, [r4, #16]
 80058b2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80058b6:	3b01      	subs	r3, #1
 80058b8:	1eb5      	subs	r5, r6, #2
 80058ba:	6123      	str	r3, [r4, #16]
 80058bc:	463a      	mov	r2, r7
 80058be:	4640      	mov	r0, r8
 80058c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80058c4:	4798      	blx	r3
 80058c6:	462e      	mov	r6, r5
 80058c8:	6825      	ldr	r5, [r4, #0]
 80058ca:	f015 0510 	ands.w	r5, r5, #16
 80058ce:	d159      	bne.n	8005984 <_scanf_float+0x418>
 80058d0:	7035      	strb	r5, [r6, #0]
 80058d2:	6823      	ldr	r3, [r4, #0]
 80058d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80058d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058dc:	d11c      	bne.n	8005918 <_scanf_float+0x3ac>
 80058de:	9b01      	ldr	r3, [sp, #4]
 80058e0:	454b      	cmp	r3, r9
 80058e2:	eba3 0209 	sub.w	r2, r3, r9
 80058e6:	d124      	bne.n	8005932 <_scanf_float+0x3c6>
 80058e8:	2200      	movs	r2, #0
 80058ea:	4659      	mov	r1, fp
 80058ec:	4640      	mov	r0, r8
 80058ee:	f000 fe8b 	bl	8006608 <_strtod_r>
 80058f2:	f8d4 c000 	ldr.w	ip, [r4]
 80058f6:	9b03      	ldr	r3, [sp, #12]
 80058f8:	f01c 0f02 	tst.w	ip, #2
 80058fc:	4606      	mov	r6, r0
 80058fe:	460f      	mov	r7, r1
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	d021      	beq.n	8005948 <_scanf_float+0x3dc>
 8005904:	9903      	ldr	r1, [sp, #12]
 8005906:	1d1a      	adds	r2, r3, #4
 8005908:	600a      	str	r2, [r1, #0]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	e9c3 6700 	strd	r6, r7, [r3]
 8005910:	68e3      	ldr	r3, [r4, #12]
 8005912:	3301      	adds	r3, #1
 8005914:	60e3      	str	r3, [r4, #12]
 8005916:	e66c      	b.n	80055f2 <_scanf_float+0x86>
 8005918:	9b04      	ldr	r3, [sp, #16]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d0e4      	beq.n	80058e8 <_scanf_float+0x37c>
 800591e:	9905      	ldr	r1, [sp, #20]
 8005920:	230a      	movs	r3, #10
 8005922:	462a      	mov	r2, r5
 8005924:	4640      	mov	r0, r8
 8005926:	3101      	adds	r1, #1
 8005928:	f000 fefa 	bl	8006720 <_strtol_r>
 800592c:	9b04      	ldr	r3, [sp, #16]
 800592e:	9e05      	ldr	r6, [sp, #20]
 8005930:	1ac2      	subs	r2, r0, r3
 8005932:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005936:	429e      	cmp	r6, r3
 8005938:	bf28      	it	cs
 800593a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800593e:	4630      	mov	r0, r6
 8005940:	4911      	ldr	r1, [pc, #68]	; (8005988 <_scanf_float+0x41c>)
 8005942:	f000 f829 	bl	8005998 <siprintf>
 8005946:	e7cf      	b.n	80058e8 <_scanf_float+0x37c>
 8005948:	f01c 0f04 	tst.w	ip, #4
 800594c:	f103 0e04 	add.w	lr, r3, #4
 8005950:	d003      	beq.n	800595a <_scanf_float+0x3ee>
 8005952:	9903      	ldr	r1, [sp, #12]
 8005954:	f8c1 e000 	str.w	lr, [r1]
 8005958:	e7d7      	b.n	800590a <_scanf_float+0x39e>
 800595a:	9a03      	ldr	r2, [sp, #12]
 800595c:	f8c2 e000 	str.w	lr, [r2]
 8005960:	f8d3 8000 	ldr.w	r8, [r3]
 8005964:	4602      	mov	r2, r0
 8005966:	460b      	mov	r3, r1
 8005968:	f7fb f850 	bl	8000a0c <__aeabi_dcmpun>
 800596c:	b128      	cbz	r0, 800597a <_scanf_float+0x40e>
 800596e:	4807      	ldr	r0, [pc, #28]	; (800598c <_scanf_float+0x420>)
 8005970:	f000 f80e 	bl	8005990 <nanf>
 8005974:	f8c8 0000 	str.w	r0, [r8]
 8005978:	e7ca      	b.n	8005910 <_scanf_float+0x3a4>
 800597a:	4630      	mov	r0, r6
 800597c:	4639      	mov	r1, r7
 800597e:	f7fb f8a3 	bl	8000ac8 <__aeabi_d2f>
 8005982:	e7f7      	b.n	8005974 <_scanf_float+0x408>
 8005984:	2500      	movs	r5, #0
 8005986:	e634      	b.n	80055f2 <_scanf_float+0x86>
 8005988:	08009548 	.word	0x08009548
 800598c:	08009960 	.word	0x08009960

08005990 <nanf>:
 8005990:	4800      	ldr	r0, [pc, #0]	; (8005994 <nanf+0x4>)
 8005992:	4770      	bx	lr
 8005994:	7fc00000 	.word	0x7fc00000

08005998 <siprintf>:
 8005998:	b40e      	push	{r1, r2, r3}
 800599a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800599e:	b500      	push	{lr}
 80059a0:	b09c      	sub	sp, #112	; 0x70
 80059a2:	ab1d      	add	r3, sp, #116	; 0x74
 80059a4:	9002      	str	r0, [sp, #8]
 80059a6:	9006      	str	r0, [sp, #24]
 80059a8:	9107      	str	r1, [sp, #28]
 80059aa:	9104      	str	r1, [sp, #16]
 80059ac:	4808      	ldr	r0, [pc, #32]	; (80059d0 <siprintf+0x38>)
 80059ae:	4909      	ldr	r1, [pc, #36]	; (80059d4 <siprintf+0x3c>)
 80059b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80059b4:	9105      	str	r1, [sp, #20]
 80059b6:	6800      	ldr	r0, [r0, #0]
 80059b8:	a902      	add	r1, sp, #8
 80059ba:	9301      	str	r3, [sp, #4]
 80059bc:	f002 fe96 	bl	80086ec <_svfiprintf_r>
 80059c0:	2200      	movs	r2, #0
 80059c2:	9b02      	ldr	r3, [sp, #8]
 80059c4:	701a      	strb	r2, [r3, #0]
 80059c6:	b01c      	add	sp, #112	; 0x70
 80059c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80059cc:	b003      	add	sp, #12
 80059ce:	4770      	bx	lr
 80059d0:	2000000c 	.word	0x2000000c
 80059d4:	ffff0208 	.word	0xffff0208

080059d8 <sulp>:
 80059d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059dc:	460f      	mov	r7, r1
 80059de:	4690      	mov	r8, r2
 80059e0:	f002 fc2c 	bl	800823c <__ulp>
 80059e4:	4604      	mov	r4, r0
 80059e6:	460d      	mov	r5, r1
 80059e8:	f1b8 0f00 	cmp.w	r8, #0
 80059ec:	d011      	beq.n	8005a12 <sulp+0x3a>
 80059ee:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80059f2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	dd0b      	ble.n	8005a12 <sulp+0x3a>
 80059fa:	2400      	movs	r4, #0
 80059fc:	051b      	lsls	r3, r3, #20
 80059fe:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005a02:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005a06:	4622      	mov	r2, r4
 8005a08:	462b      	mov	r3, r5
 8005a0a:	f7fa fd65 	bl	80004d8 <__aeabi_dmul>
 8005a0e:	4604      	mov	r4, r0
 8005a10:	460d      	mov	r5, r1
 8005a12:	4620      	mov	r0, r4
 8005a14:	4629      	mov	r1, r5
 8005a16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a1a:	0000      	movs	r0, r0
 8005a1c:	0000      	movs	r0, r0
	...

08005a20 <_strtod_l>:
 8005a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a24:	469b      	mov	fp, r3
 8005a26:	2300      	movs	r3, #0
 8005a28:	b0a1      	sub	sp, #132	; 0x84
 8005a2a:	931c      	str	r3, [sp, #112]	; 0x70
 8005a2c:	4ba1      	ldr	r3, [pc, #644]	; (8005cb4 <_strtod_l+0x294>)
 8005a2e:	4682      	mov	sl, r0
 8005a30:	681f      	ldr	r7, [r3, #0]
 8005a32:	460e      	mov	r6, r1
 8005a34:	4638      	mov	r0, r7
 8005a36:	9217      	str	r2, [sp, #92]	; 0x5c
 8005a38:	f7fa fb8a 	bl	8000150 <strlen>
 8005a3c:	f04f 0800 	mov.w	r8, #0
 8005a40:	4604      	mov	r4, r0
 8005a42:	f04f 0900 	mov.w	r9, #0
 8005a46:	961b      	str	r6, [sp, #108]	; 0x6c
 8005a48:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005a4a:	781a      	ldrb	r2, [r3, #0]
 8005a4c:	2a2b      	cmp	r2, #43	; 0x2b
 8005a4e:	d04c      	beq.n	8005aea <_strtod_l+0xca>
 8005a50:	d83a      	bhi.n	8005ac8 <_strtod_l+0xa8>
 8005a52:	2a0d      	cmp	r2, #13
 8005a54:	d833      	bhi.n	8005abe <_strtod_l+0x9e>
 8005a56:	2a08      	cmp	r2, #8
 8005a58:	d833      	bhi.n	8005ac2 <_strtod_l+0xa2>
 8005a5a:	2a00      	cmp	r2, #0
 8005a5c:	d03d      	beq.n	8005ada <_strtod_l+0xba>
 8005a5e:	2300      	movs	r3, #0
 8005a60:	930c      	str	r3, [sp, #48]	; 0x30
 8005a62:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8005a64:	782b      	ldrb	r3, [r5, #0]
 8005a66:	2b30      	cmp	r3, #48	; 0x30
 8005a68:	f040 80af 	bne.w	8005bca <_strtod_l+0x1aa>
 8005a6c:	786b      	ldrb	r3, [r5, #1]
 8005a6e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005a72:	2b58      	cmp	r3, #88	; 0x58
 8005a74:	d16c      	bne.n	8005b50 <_strtod_l+0x130>
 8005a76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a78:	4650      	mov	r0, sl
 8005a7a:	9301      	str	r3, [sp, #4]
 8005a7c:	ab1c      	add	r3, sp, #112	; 0x70
 8005a7e:	9300      	str	r3, [sp, #0]
 8005a80:	4a8d      	ldr	r2, [pc, #564]	; (8005cb8 <_strtod_l+0x298>)
 8005a82:	f8cd b008 	str.w	fp, [sp, #8]
 8005a86:	ab1d      	add	r3, sp, #116	; 0x74
 8005a88:	a91b      	add	r1, sp, #108	; 0x6c
 8005a8a:	f001 fd2f 	bl	80074ec <__gethex>
 8005a8e:	f010 0607 	ands.w	r6, r0, #7
 8005a92:	4604      	mov	r4, r0
 8005a94:	d005      	beq.n	8005aa2 <_strtod_l+0x82>
 8005a96:	2e06      	cmp	r6, #6
 8005a98:	d129      	bne.n	8005aee <_strtod_l+0xce>
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	3501      	adds	r5, #1
 8005a9e:	951b      	str	r5, [sp, #108]	; 0x6c
 8005aa0:	930c      	str	r3, [sp, #48]	; 0x30
 8005aa2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	f040 8596 	bne.w	80065d6 <_strtod_l+0xbb6>
 8005aaa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005aac:	b1d3      	cbz	r3, 8005ae4 <_strtod_l+0xc4>
 8005aae:	4642      	mov	r2, r8
 8005ab0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005ab4:	4610      	mov	r0, r2
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	b021      	add	sp, #132	; 0x84
 8005aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005abe:	2a20      	cmp	r2, #32
 8005ac0:	d1cd      	bne.n	8005a5e <_strtod_l+0x3e>
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	931b      	str	r3, [sp, #108]	; 0x6c
 8005ac6:	e7bf      	b.n	8005a48 <_strtod_l+0x28>
 8005ac8:	2a2d      	cmp	r2, #45	; 0x2d
 8005aca:	d1c8      	bne.n	8005a5e <_strtod_l+0x3e>
 8005acc:	2201      	movs	r2, #1
 8005ace:	920c      	str	r2, [sp, #48]	; 0x30
 8005ad0:	1c5a      	adds	r2, r3, #1
 8005ad2:	921b      	str	r2, [sp, #108]	; 0x6c
 8005ad4:	785b      	ldrb	r3, [r3, #1]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d1c3      	bne.n	8005a62 <_strtod_l+0x42>
 8005ada:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005adc:	961b      	str	r6, [sp, #108]	; 0x6c
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	f040 8577 	bne.w	80065d2 <_strtod_l+0xbb2>
 8005ae4:	4642      	mov	r2, r8
 8005ae6:	464b      	mov	r3, r9
 8005ae8:	e7e4      	b.n	8005ab4 <_strtod_l+0x94>
 8005aea:	2200      	movs	r2, #0
 8005aec:	e7ef      	b.n	8005ace <_strtod_l+0xae>
 8005aee:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005af0:	b13a      	cbz	r2, 8005b02 <_strtod_l+0xe2>
 8005af2:	2135      	movs	r1, #53	; 0x35
 8005af4:	a81e      	add	r0, sp, #120	; 0x78
 8005af6:	f002 fca5 	bl	8008444 <__copybits>
 8005afa:	4650      	mov	r0, sl
 8005afc:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005afe:	f002 f86d 	bl	8007bdc <_Bfree>
 8005b02:	3e01      	subs	r6, #1
 8005b04:	2e05      	cmp	r6, #5
 8005b06:	d807      	bhi.n	8005b18 <_strtod_l+0xf8>
 8005b08:	e8df f006 	tbb	[pc, r6]
 8005b0c:	1d180b0e 	.word	0x1d180b0e
 8005b10:	030e      	.short	0x030e
 8005b12:	f04f 0900 	mov.w	r9, #0
 8005b16:	46c8      	mov	r8, r9
 8005b18:	0721      	lsls	r1, r4, #28
 8005b1a:	d5c2      	bpl.n	8005aa2 <_strtod_l+0x82>
 8005b1c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8005b20:	e7bf      	b.n	8005aa2 <_strtod_l+0x82>
 8005b22:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 8005b26:	e7f7      	b.n	8005b18 <_strtod_l+0xf8>
 8005b28:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005b2a:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 8005b2e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005b32:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005b36:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8005b3a:	e7ed      	b.n	8005b18 <_strtod_l+0xf8>
 8005b3c:	f04f 0800 	mov.w	r8, #0
 8005b40:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8005cbc <_strtod_l+0x29c>
 8005b44:	e7e8      	b.n	8005b18 <_strtod_l+0xf8>
 8005b46:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8005b4a:	f04f 38ff 	mov.w	r8, #4294967295
 8005b4e:	e7e3      	b.n	8005b18 <_strtod_l+0xf8>
 8005b50:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005b52:	1c5a      	adds	r2, r3, #1
 8005b54:	921b      	str	r2, [sp, #108]	; 0x6c
 8005b56:	785b      	ldrb	r3, [r3, #1]
 8005b58:	2b30      	cmp	r3, #48	; 0x30
 8005b5a:	d0f9      	beq.n	8005b50 <_strtod_l+0x130>
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d0a0      	beq.n	8005aa2 <_strtod_l+0x82>
 8005b60:	2301      	movs	r3, #1
 8005b62:	9307      	str	r3, [sp, #28]
 8005b64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005b66:	220a      	movs	r2, #10
 8005b68:	9308      	str	r3, [sp, #32]
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	469b      	mov	fp, r3
 8005b6e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8005b72:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8005b74:	7805      	ldrb	r5, [r0, #0]
 8005b76:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8005b7a:	b2d9      	uxtb	r1, r3
 8005b7c:	2909      	cmp	r1, #9
 8005b7e:	d926      	bls.n	8005bce <_strtod_l+0x1ae>
 8005b80:	4622      	mov	r2, r4
 8005b82:	4639      	mov	r1, r7
 8005b84:	f002 fec8 	bl	8008918 <strncmp>
 8005b88:	2800      	cmp	r0, #0
 8005b8a:	d032      	beq.n	8005bf2 <_strtod_l+0x1d2>
 8005b8c:	2000      	movs	r0, #0
 8005b8e:	462b      	mov	r3, r5
 8005b90:	465c      	mov	r4, fp
 8005b92:	4602      	mov	r2, r0
 8005b94:	9004      	str	r0, [sp, #16]
 8005b96:	2b65      	cmp	r3, #101	; 0x65
 8005b98:	d001      	beq.n	8005b9e <_strtod_l+0x17e>
 8005b9a:	2b45      	cmp	r3, #69	; 0x45
 8005b9c:	d113      	bne.n	8005bc6 <_strtod_l+0x1a6>
 8005b9e:	b91c      	cbnz	r4, 8005ba8 <_strtod_l+0x188>
 8005ba0:	9b07      	ldr	r3, [sp, #28]
 8005ba2:	4303      	orrs	r3, r0
 8005ba4:	d099      	beq.n	8005ada <_strtod_l+0xba>
 8005ba6:	2400      	movs	r4, #0
 8005ba8:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8005baa:	1c73      	adds	r3, r6, #1
 8005bac:	931b      	str	r3, [sp, #108]	; 0x6c
 8005bae:	7873      	ldrb	r3, [r6, #1]
 8005bb0:	2b2b      	cmp	r3, #43	; 0x2b
 8005bb2:	d078      	beq.n	8005ca6 <_strtod_l+0x286>
 8005bb4:	2b2d      	cmp	r3, #45	; 0x2d
 8005bb6:	d07b      	beq.n	8005cb0 <_strtod_l+0x290>
 8005bb8:	2700      	movs	r7, #0
 8005bba:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8005bbe:	2909      	cmp	r1, #9
 8005bc0:	f240 8082 	bls.w	8005cc8 <_strtod_l+0x2a8>
 8005bc4:	961b      	str	r6, [sp, #108]	; 0x6c
 8005bc6:	2500      	movs	r5, #0
 8005bc8:	e09e      	b.n	8005d08 <_strtod_l+0x2e8>
 8005bca:	2300      	movs	r3, #0
 8005bcc:	e7c9      	b.n	8005b62 <_strtod_l+0x142>
 8005bce:	f1bb 0f08 	cmp.w	fp, #8
 8005bd2:	bfd5      	itete	le
 8005bd4:	9906      	ldrle	r1, [sp, #24]
 8005bd6:	9905      	ldrgt	r1, [sp, #20]
 8005bd8:	fb02 3301 	mlale	r3, r2, r1, r3
 8005bdc:	fb02 3301 	mlagt	r3, r2, r1, r3
 8005be0:	f100 0001 	add.w	r0, r0, #1
 8005be4:	bfd4      	ite	le
 8005be6:	9306      	strle	r3, [sp, #24]
 8005be8:	9305      	strgt	r3, [sp, #20]
 8005bea:	f10b 0b01 	add.w	fp, fp, #1
 8005bee:	901b      	str	r0, [sp, #108]	; 0x6c
 8005bf0:	e7bf      	b.n	8005b72 <_strtod_l+0x152>
 8005bf2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005bf4:	191a      	adds	r2, r3, r4
 8005bf6:	921b      	str	r2, [sp, #108]	; 0x6c
 8005bf8:	5d1b      	ldrb	r3, [r3, r4]
 8005bfa:	f1bb 0f00 	cmp.w	fp, #0
 8005bfe:	d036      	beq.n	8005c6e <_strtod_l+0x24e>
 8005c00:	465c      	mov	r4, fp
 8005c02:	9004      	str	r0, [sp, #16]
 8005c04:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005c08:	2a09      	cmp	r2, #9
 8005c0a:	d912      	bls.n	8005c32 <_strtod_l+0x212>
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	e7c2      	b.n	8005b96 <_strtod_l+0x176>
 8005c10:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005c12:	3001      	adds	r0, #1
 8005c14:	1c5a      	adds	r2, r3, #1
 8005c16:	921b      	str	r2, [sp, #108]	; 0x6c
 8005c18:	785b      	ldrb	r3, [r3, #1]
 8005c1a:	2b30      	cmp	r3, #48	; 0x30
 8005c1c:	d0f8      	beq.n	8005c10 <_strtod_l+0x1f0>
 8005c1e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8005c22:	2a08      	cmp	r2, #8
 8005c24:	f200 84dc 	bhi.w	80065e0 <_strtod_l+0xbc0>
 8005c28:	9004      	str	r0, [sp, #16]
 8005c2a:	2000      	movs	r0, #0
 8005c2c:	4604      	mov	r4, r0
 8005c2e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005c30:	9208      	str	r2, [sp, #32]
 8005c32:	3b30      	subs	r3, #48	; 0x30
 8005c34:	f100 0201 	add.w	r2, r0, #1
 8005c38:	d013      	beq.n	8005c62 <_strtod_l+0x242>
 8005c3a:	9904      	ldr	r1, [sp, #16]
 8005c3c:	1905      	adds	r5, r0, r4
 8005c3e:	4411      	add	r1, r2
 8005c40:	9104      	str	r1, [sp, #16]
 8005c42:	4622      	mov	r2, r4
 8005c44:	210a      	movs	r1, #10
 8005c46:	42aa      	cmp	r2, r5
 8005c48:	d113      	bne.n	8005c72 <_strtod_l+0x252>
 8005c4a:	1822      	adds	r2, r4, r0
 8005c4c:	2a08      	cmp	r2, #8
 8005c4e:	f104 0401 	add.w	r4, r4, #1
 8005c52:	4404      	add	r4, r0
 8005c54:	dc1b      	bgt.n	8005c8e <_strtod_l+0x26e>
 8005c56:	220a      	movs	r2, #10
 8005c58:	9906      	ldr	r1, [sp, #24]
 8005c5a:	fb02 3301 	mla	r3, r2, r1, r3
 8005c5e:	9306      	str	r3, [sp, #24]
 8005c60:	2200      	movs	r2, #0
 8005c62:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005c64:	4610      	mov	r0, r2
 8005c66:	1c59      	adds	r1, r3, #1
 8005c68:	911b      	str	r1, [sp, #108]	; 0x6c
 8005c6a:	785b      	ldrb	r3, [r3, #1]
 8005c6c:	e7ca      	b.n	8005c04 <_strtod_l+0x1e4>
 8005c6e:	4658      	mov	r0, fp
 8005c70:	e7d3      	b.n	8005c1a <_strtod_l+0x1fa>
 8005c72:	2a08      	cmp	r2, #8
 8005c74:	dc04      	bgt.n	8005c80 <_strtod_l+0x260>
 8005c76:	9f06      	ldr	r7, [sp, #24]
 8005c78:	434f      	muls	r7, r1
 8005c7a:	9706      	str	r7, [sp, #24]
 8005c7c:	3201      	adds	r2, #1
 8005c7e:	e7e2      	b.n	8005c46 <_strtod_l+0x226>
 8005c80:	1c57      	adds	r7, r2, #1
 8005c82:	2f10      	cmp	r7, #16
 8005c84:	bfde      	ittt	le
 8005c86:	9f05      	ldrle	r7, [sp, #20]
 8005c88:	434f      	mulle	r7, r1
 8005c8a:	9705      	strle	r7, [sp, #20]
 8005c8c:	e7f6      	b.n	8005c7c <_strtod_l+0x25c>
 8005c8e:	2c10      	cmp	r4, #16
 8005c90:	bfdf      	itttt	le
 8005c92:	220a      	movle	r2, #10
 8005c94:	9905      	ldrle	r1, [sp, #20]
 8005c96:	fb02 3301 	mlale	r3, r2, r1, r3
 8005c9a:	9305      	strle	r3, [sp, #20]
 8005c9c:	e7e0      	b.n	8005c60 <_strtod_l+0x240>
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	9304      	str	r3, [sp, #16]
 8005ca4:	e77c      	b.n	8005ba0 <_strtod_l+0x180>
 8005ca6:	2700      	movs	r7, #0
 8005ca8:	1cb3      	adds	r3, r6, #2
 8005caa:	931b      	str	r3, [sp, #108]	; 0x6c
 8005cac:	78b3      	ldrb	r3, [r6, #2]
 8005cae:	e784      	b.n	8005bba <_strtod_l+0x19a>
 8005cb0:	2701      	movs	r7, #1
 8005cb2:	e7f9      	b.n	8005ca8 <_strtod_l+0x288>
 8005cb4:	080097a0 	.word	0x080097a0
 8005cb8:	08009550 	.word	0x08009550
 8005cbc:	7ff00000 	.word	0x7ff00000
 8005cc0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005cc2:	1c59      	adds	r1, r3, #1
 8005cc4:	911b      	str	r1, [sp, #108]	; 0x6c
 8005cc6:	785b      	ldrb	r3, [r3, #1]
 8005cc8:	2b30      	cmp	r3, #48	; 0x30
 8005cca:	d0f9      	beq.n	8005cc0 <_strtod_l+0x2a0>
 8005ccc:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8005cd0:	2908      	cmp	r1, #8
 8005cd2:	f63f af78 	bhi.w	8005bc6 <_strtod_l+0x1a6>
 8005cd6:	f04f 0e0a 	mov.w	lr, #10
 8005cda:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8005cde:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005ce0:	9309      	str	r3, [sp, #36]	; 0x24
 8005ce2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005ce4:	1c59      	adds	r1, r3, #1
 8005ce6:	911b      	str	r1, [sp, #108]	; 0x6c
 8005ce8:	785b      	ldrb	r3, [r3, #1]
 8005cea:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8005cee:	2d09      	cmp	r5, #9
 8005cf0:	d935      	bls.n	8005d5e <_strtod_l+0x33e>
 8005cf2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005cf4:	1b49      	subs	r1, r1, r5
 8005cf6:	2908      	cmp	r1, #8
 8005cf8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8005cfc:	dc02      	bgt.n	8005d04 <_strtod_l+0x2e4>
 8005cfe:	4565      	cmp	r5, ip
 8005d00:	bfa8      	it	ge
 8005d02:	4665      	movge	r5, ip
 8005d04:	b107      	cbz	r7, 8005d08 <_strtod_l+0x2e8>
 8005d06:	426d      	negs	r5, r5
 8005d08:	2c00      	cmp	r4, #0
 8005d0a:	d14c      	bne.n	8005da6 <_strtod_l+0x386>
 8005d0c:	9907      	ldr	r1, [sp, #28]
 8005d0e:	4301      	orrs	r1, r0
 8005d10:	f47f aec7 	bne.w	8005aa2 <_strtod_l+0x82>
 8005d14:	2a00      	cmp	r2, #0
 8005d16:	f47f aee0 	bne.w	8005ada <_strtod_l+0xba>
 8005d1a:	2b69      	cmp	r3, #105	; 0x69
 8005d1c:	d026      	beq.n	8005d6c <_strtod_l+0x34c>
 8005d1e:	dc23      	bgt.n	8005d68 <_strtod_l+0x348>
 8005d20:	2b49      	cmp	r3, #73	; 0x49
 8005d22:	d023      	beq.n	8005d6c <_strtod_l+0x34c>
 8005d24:	2b4e      	cmp	r3, #78	; 0x4e
 8005d26:	f47f aed8 	bne.w	8005ada <_strtod_l+0xba>
 8005d2a:	499c      	ldr	r1, [pc, #624]	; (8005f9c <_strtod_l+0x57c>)
 8005d2c:	a81b      	add	r0, sp, #108	; 0x6c
 8005d2e:	f001 fe2b 	bl	8007988 <__match>
 8005d32:	2800      	cmp	r0, #0
 8005d34:	f43f aed1 	beq.w	8005ada <_strtod_l+0xba>
 8005d38:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	2b28      	cmp	r3, #40	; 0x28
 8005d3e:	d12c      	bne.n	8005d9a <_strtod_l+0x37a>
 8005d40:	4997      	ldr	r1, [pc, #604]	; (8005fa0 <_strtod_l+0x580>)
 8005d42:	aa1e      	add	r2, sp, #120	; 0x78
 8005d44:	a81b      	add	r0, sp, #108	; 0x6c
 8005d46:	f001 fe33 	bl	80079b0 <__hexnan>
 8005d4a:	2805      	cmp	r0, #5
 8005d4c:	d125      	bne.n	8005d9a <_strtod_l+0x37a>
 8005d4e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005d50:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8005d54:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8005d58:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8005d5c:	e6a1      	b.n	8005aa2 <_strtod_l+0x82>
 8005d5e:	fb0e 3c0c 	mla	ip, lr, ip, r3
 8005d62:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8005d66:	e7bc      	b.n	8005ce2 <_strtod_l+0x2c2>
 8005d68:	2b6e      	cmp	r3, #110	; 0x6e
 8005d6a:	e7dc      	b.n	8005d26 <_strtod_l+0x306>
 8005d6c:	498d      	ldr	r1, [pc, #564]	; (8005fa4 <_strtod_l+0x584>)
 8005d6e:	a81b      	add	r0, sp, #108	; 0x6c
 8005d70:	f001 fe0a 	bl	8007988 <__match>
 8005d74:	2800      	cmp	r0, #0
 8005d76:	f43f aeb0 	beq.w	8005ada <_strtod_l+0xba>
 8005d7a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005d7c:	498a      	ldr	r1, [pc, #552]	; (8005fa8 <_strtod_l+0x588>)
 8005d7e:	3b01      	subs	r3, #1
 8005d80:	a81b      	add	r0, sp, #108	; 0x6c
 8005d82:	931b      	str	r3, [sp, #108]	; 0x6c
 8005d84:	f001 fe00 	bl	8007988 <__match>
 8005d88:	b910      	cbnz	r0, 8005d90 <_strtod_l+0x370>
 8005d8a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	931b      	str	r3, [sp, #108]	; 0x6c
 8005d90:	f04f 0800 	mov.w	r8, #0
 8005d94:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8005fb8 <_strtod_l+0x598>
 8005d98:	e683      	b.n	8005aa2 <_strtod_l+0x82>
 8005d9a:	4884      	ldr	r0, [pc, #528]	; (8005fac <_strtod_l+0x58c>)
 8005d9c:	f002 fda6 	bl	80088ec <nan>
 8005da0:	4680      	mov	r8, r0
 8005da2:	4689      	mov	r9, r1
 8005da4:	e67d      	b.n	8005aa2 <_strtod_l+0x82>
 8005da6:	9b04      	ldr	r3, [sp, #16]
 8005da8:	f1bb 0f00 	cmp.w	fp, #0
 8005dac:	bf08      	it	eq
 8005dae:	46a3      	moveq	fp, r4
 8005db0:	1aeb      	subs	r3, r5, r3
 8005db2:	2c10      	cmp	r4, #16
 8005db4:	9806      	ldr	r0, [sp, #24]
 8005db6:	4626      	mov	r6, r4
 8005db8:	9307      	str	r3, [sp, #28]
 8005dba:	bfa8      	it	ge
 8005dbc:	2610      	movge	r6, #16
 8005dbe:	f7fa fb11 	bl	80003e4 <__aeabi_ui2d>
 8005dc2:	2c09      	cmp	r4, #9
 8005dc4:	4680      	mov	r8, r0
 8005dc6:	4689      	mov	r9, r1
 8005dc8:	dd13      	ble.n	8005df2 <_strtod_l+0x3d2>
 8005dca:	4b79      	ldr	r3, [pc, #484]	; (8005fb0 <_strtod_l+0x590>)
 8005dcc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005dd0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005dd4:	f7fa fb80 	bl	80004d8 <__aeabi_dmul>
 8005dd8:	4680      	mov	r8, r0
 8005dda:	9805      	ldr	r0, [sp, #20]
 8005ddc:	4689      	mov	r9, r1
 8005dde:	f7fa fb01 	bl	80003e4 <__aeabi_ui2d>
 8005de2:	4602      	mov	r2, r0
 8005de4:	460b      	mov	r3, r1
 8005de6:	4640      	mov	r0, r8
 8005de8:	4649      	mov	r1, r9
 8005dea:	f7fa f9bf 	bl	800016c <__adddf3>
 8005dee:	4680      	mov	r8, r0
 8005df0:	4689      	mov	r9, r1
 8005df2:	2c0f      	cmp	r4, #15
 8005df4:	dc36      	bgt.n	8005e64 <_strtod_l+0x444>
 8005df6:	9b07      	ldr	r3, [sp, #28]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	f43f ae52 	beq.w	8005aa2 <_strtod_l+0x82>
 8005dfe:	dd22      	ble.n	8005e46 <_strtod_l+0x426>
 8005e00:	2b16      	cmp	r3, #22
 8005e02:	dc09      	bgt.n	8005e18 <_strtod_l+0x3f8>
 8005e04:	4c6a      	ldr	r4, [pc, #424]	; (8005fb0 <_strtod_l+0x590>)
 8005e06:	4642      	mov	r2, r8
 8005e08:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8005e0c:	464b      	mov	r3, r9
 8005e0e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8005e12:	f7fa fb61 	bl	80004d8 <__aeabi_dmul>
 8005e16:	e7c3      	b.n	8005da0 <_strtod_l+0x380>
 8005e18:	9a07      	ldr	r2, [sp, #28]
 8005e1a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	db20      	blt.n	8005e64 <_strtod_l+0x444>
 8005e22:	4d63      	ldr	r5, [pc, #396]	; (8005fb0 <_strtod_l+0x590>)
 8005e24:	f1c4 040f 	rsb	r4, r4, #15
 8005e28:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8005e2c:	4642      	mov	r2, r8
 8005e2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e32:	464b      	mov	r3, r9
 8005e34:	f7fa fb50 	bl	80004d8 <__aeabi_dmul>
 8005e38:	9b07      	ldr	r3, [sp, #28]
 8005e3a:	1b1c      	subs	r4, r3, r4
 8005e3c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8005e40:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005e44:	e7e5      	b.n	8005e12 <_strtod_l+0x3f2>
 8005e46:	9b07      	ldr	r3, [sp, #28]
 8005e48:	3316      	adds	r3, #22
 8005e4a:	db0b      	blt.n	8005e64 <_strtod_l+0x444>
 8005e4c:	9b04      	ldr	r3, [sp, #16]
 8005e4e:	4a58      	ldr	r2, [pc, #352]	; (8005fb0 <_strtod_l+0x590>)
 8005e50:	1b5d      	subs	r5, r3, r5
 8005e52:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8005e56:	4640      	mov	r0, r8
 8005e58:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005e5c:	4649      	mov	r1, r9
 8005e5e:	f7fa fc65 	bl	800072c <__aeabi_ddiv>
 8005e62:	e79d      	b.n	8005da0 <_strtod_l+0x380>
 8005e64:	9b07      	ldr	r3, [sp, #28]
 8005e66:	1ba6      	subs	r6, r4, r6
 8005e68:	441e      	add	r6, r3
 8005e6a:	2e00      	cmp	r6, #0
 8005e6c:	dd71      	ble.n	8005f52 <_strtod_l+0x532>
 8005e6e:	f016 030f 	ands.w	r3, r6, #15
 8005e72:	d00a      	beq.n	8005e8a <_strtod_l+0x46a>
 8005e74:	494e      	ldr	r1, [pc, #312]	; (8005fb0 <_strtod_l+0x590>)
 8005e76:	4642      	mov	r2, r8
 8005e78:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005e7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e80:	464b      	mov	r3, r9
 8005e82:	f7fa fb29 	bl	80004d8 <__aeabi_dmul>
 8005e86:	4680      	mov	r8, r0
 8005e88:	4689      	mov	r9, r1
 8005e8a:	f036 060f 	bics.w	r6, r6, #15
 8005e8e:	d050      	beq.n	8005f32 <_strtod_l+0x512>
 8005e90:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8005e94:	dd27      	ble.n	8005ee6 <_strtod_l+0x4c6>
 8005e96:	f04f 0b00 	mov.w	fp, #0
 8005e9a:	f8cd b010 	str.w	fp, [sp, #16]
 8005e9e:	f8cd b020 	str.w	fp, [sp, #32]
 8005ea2:	f8cd b018 	str.w	fp, [sp, #24]
 8005ea6:	2322      	movs	r3, #34	; 0x22
 8005ea8:	f04f 0800 	mov.w	r8, #0
 8005eac:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8005fb8 <_strtod_l+0x598>
 8005eb0:	f8ca 3000 	str.w	r3, [sl]
 8005eb4:	9b08      	ldr	r3, [sp, #32]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	f43f adf3 	beq.w	8005aa2 <_strtod_l+0x82>
 8005ebc:	4650      	mov	r0, sl
 8005ebe:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005ec0:	f001 fe8c 	bl	8007bdc <_Bfree>
 8005ec4:	4650      	mov	r0, sl
 8005ec6:	9906      	ldr	r1, [sp, #24]
 8005ec8:	f001 fe88 	bl	8007bdc <_Bfree>
 8005ecc:	4650      	mov	r0, sl
 8005ece:	9904      	ldr	r1, [sp, #16]
 8005ed0:	f001 fe84 	bl	8007bdc <_Bfree>
 8005ed4:	4650      	mov	r0, sl
 8005ed6:	9908      	ldr	r1, [sp, #32]
 8005ed8:	f001 fe80 	bl	8007bdc <_Bfree>
 8005edc:	4659      	mov	r1, fp
 8005ede:	4650      	mov	r0, sl
 8005ee0:	f001 fe7c 	bl	8007bdc <_Bfree>
 8005ee4:	e5dd      	b.n	8005aa2 <_strtod_l+0x82>
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	4640      	mov	r0, r8
 8005eea:	4649      	mov	r1, r9
 8005eec:	461f      	mov	r7, r3
 8005eee:	1136      	asrs	r6, r6, #4
 8005ef0:	2e01      	cmp	r6, #1
 8005ef2:	dc21      	bgt.n	8005f38 <_strtod_l+0x518>
 8005ef4:	b10b      	cbz	r3, 8005efa <_strtod_l+0x4da>
 8005ef6:	4680      	mov	r8, r0
 8005ef8:	4689      	mov	r9, r1
 8005efa:	4b2e      	ldr	r3, [pc, #184]	; (8005fb4 <_strtod_l+0x594>)
 8005efc:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8005f00:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8005f04:	4642      	mov	r2, r8
 8005f06:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005f0a:	464b      	mov	r3, r9
 8005f0c:	f7fa fae4 	bl	80004d8 <__aeabi_dmul>
 8005f10:	4b29      	ldr	r3, [pc, #164]	; (8005fb8 <_strtod_l+0x598>)
 8005f12:	460a      	mov	r2, r1
 8005f14:	400b      	ands	r3, r1
 8005f16:	4929      	ldr	r1, [pc, #164]	; (8005fbc <_strtod_l+0x59c>)
 8005f18:	4680      	mov	r8, r0
 8005f1a:	428b      	cmp	r3, r1
 8005f1c:	d8bb      	bhi.n	8005e96 <_strtod_l+0x476>
 8005f1e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005f22:	428b      	cmp	r3, r1
 8005f24:	bf86      	itte	hi
 8005f26:	f04f 38ff 	movhi.w	r8, #4294967295
 8005f2a:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8005fc0 <_strtod_l+0x5a0>
 8005f2e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8005f32:	2300      	movs	r3, #0
 8005f34:	9305      	str	r3, [sp, #20]
 8005f36:	e07e      	b.n	8006036 <_strtod_l+0x616>
 8005f38:	07f2      	lsls	r2, r6, #31
 8005f3a:	d507      	bpl.n	8005f4c <_strtod_l+0x52c>
 8005f3c:	4b1d      	ldr	r3, [pc, #116]	; (8005fb4 <_strtod_l+0x594>)
 8005f3e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f46:	f7fa fac7 	bl	80004d8 <__aeabi_dmul>
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	3701      	adds	r7, #1
 8005f4e:	1076      	asrs	r6, r6, #1
 8005f50:	e7ce      	b.n	8005ef0 <_strtod_l+0x4d0>
 8005f52:	d0ee      	beq.n	8005f32 <_strtod_l+0x512>
 8005f54:	4276      	negs	r6, r6
 8005f56:	f016 020f 	ands.w	r2, r6, #15
 8005f5a:	d00a      	beq.n	8005f72 <_strtod_l+0x552>
 8005f5c:	4b14      	ldr	r3, [pc, #80]	; (8005fb0 <_strtod_l+0x590>)
 8005f5e:	4640      	mov	r0, r8
 8005f60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f64:	4649      	mov	r1, r9
 8005f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f6a:	f7fa fbdf 	bl	800072c <__aeabi_ddiv>
 8005f6e:	4680      	mov	r8, r0
 8005f70:	4689      	mov	r9, r1
 8005f72:	1136      	asrs	r6, r6, #4
 8005f74:	d0dd      	beq.n	8005f32 <_strtod_l+0x512>
 8005f76:	2e1f      	cmp	r6, #31
 8005f78:	dd24      	ble.n	8005fc4 <_strtod_l+0x5a4>
 8005f7a:	f04f 0b00 	mov.w	fp, #0
 8005f7e:	f8cd b010 	str.w	fp, [sp, #16]
 8005f82:	f8cd b020 	str.w	fp, [sp, #32]
 8005f86:	f8cd b018 	str.w	fp, [sp, #24]
 8005f8a:	2322      	movs	r3, #34	; 0x22
 8005f8c:	f04f 0800 	mov.w	r8, #0
 8005f90:	f04f 0900 	mov.w	r9, #0
 8005f94:	f8ca 3000 	str.w	r3, [sl]
 8005f98:	e78c      	b.n	8005eb4 <_strtod_l+0x494>
 8005f9a:	bf00      	nop
 8005f9c:	08009521 	.word	0x08009521
 8005fa0:	08009564 	.word	0x08009564
 8005fa4:	08009519 	.word	0x08009519
 8005fa8:	080096a4 	.word	0x080096a4
 8005fac:	08009960 	.word	0x08009960
 8005fb0:	08009840 	.word	0x08009840
 8005fb4:	08009818 	.word	0x08009818
 8005fb8:	7ff00000 	.word	0x7ff00000
 8005fbc:	7ca00000 	.word	0x7ca00000
 8005fc0:	7fefffff 	.word	0x7fefffff
 8005fc4:	f016 0310 	ands.w	r3, r6, #16
 8005fc8:	bf18      	it	ne
 8005fca:	236a      	movne	r3, #106	; 0x6a
 8005fcc:	4640      	mov	r0, r8
 8005fce:	9305      	str	r3, [sp, #20]
 8005fd0:	4649      	mov	r1, r9
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	4fb2      	ldr	r7, [pc, #712]	; (80062a0 <_strtod_l+0x880>)
 8005fd6:	07f2      	lsls	r2, r6, #31
 8005fd8:	d504      	bpl.n	8005fe4 <_strtod_l+0x5c4>
 8005fda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fde:	f7fa fa7b 	bl	80004d8 <__aeabi_dmul>
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	1076      	asrs	r6, r6, #1
 8005fe6:	f107 0708 	add.w	r7, r7, #8
 8005fea:	d1f4      	bne.n	8005fd6 <_strtod_l+0x5b6>
 8005fec:	b10b      	cbz	r3, 8005ff2 <_strtod_l+0x5d2>
 8005fee:	4680      	mov	r8, r0
 8005ff0:	4689      	mov	r9, r1
 8005ff2:	9b05      	ldr	r3, [sp, #20]
 8005ff4:	b1bb      	cbz	r3, 8006026 <_strtod_l+0x606>
 8005ff6:	f3c9 530a 	ubfx	r3, r9, #20, #11
 8005ffa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	4649      	mov	r1, r9
 8006002:	dd10      	ble.n	8006026 <_strtod_l+0x606>
 8006004:	2b1f      	cmp	r3, #31
 8006006:	f340 812b 	ble.w	8006260 <_strtod_l+0x840>
 800600a:	2b34      	cmp	r3, #52	; 0x34
 800600c:	bfd8      	it	le
 800600e:	f04f 32ff 	movle.w	r2, #4294967295
 8006012:	f04f 0800 	mov.w	r8, #0
 8006016:	bfcf      	iteee	gt
 8006018:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800601c:	3b20      	suble	r3, #32
 800601e:	fa02 f303 	lslle.w	r3, r2, r3
 8006022:	ea03 0901 	andle.w	r9, r3, r1
 8006026:	2200      	movs	r2, #0
 8006028:	2300      	movs	r3, #0
 800602a:	4640      	mov	r0, r8
 800602c:	4649      	mov	r1, r9
 800602e:	f7fa fcbb 	bl	80009a8 <__aeabi_dcmpeq>
 8006032:	2800      	cmp	r0, #0
 8006034:	d1a1      	bne.n	8005f7a <_strtod_l+0x55a>
 8006036:	9b06      	ldr	r3, [sp, #24]
 8006038:	465a      	mov	r2, fp
 800603a:	9300      	str	r3, [sp, #0]
 800603c:	4650      	mov	r0, sl
 800603e:	4623      	mov	r3, r4
 8006040:	9908      	ldr	r1, [sp, #32]
 8006042:	f001 fe37 	bl	8007cb4 <__s2b>
 8006046:	9008      	str	r0, [sp, #32]
 8006048:	2800      	cmp	r0, #0
 800604a:	f43f af24 	beq.w	8005e96 <_strtod_l+0x476>
 800604e:	9b04      	ldr	r3, [sp, #16]
 8006050:	f04f 0b00 	mov.w	fp, #0
 8006054:	1b5d      	subs	r5, r3, r5
 8006056:	9b07      	ldr	r3, [sp, #28]
 8006058:	f8cd b010 	str.w	fp, [sp, #16]
 800605c:	2b00      	cmp	r3, #0
 800605e:	bfb4      	ite	lt
 8006060:	462b      	movlt	r3, r5
 8006062:	2300      	movge	r3, #0
 8006064:	930e      	str	r3, [sp, #56]	; 0x38
 8006066:	9b07      	ldr	r3, [sp, #28]
 8006068:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800606c:	9316      	str	r3, [sp, #88]	; 0x58
 800606e:	9b08      	ldr	r3, [sp, #32]
 8006070:	4650      	mov	r0, sl
 8006072:	6859      	ldr	r1, [r3, #4]
 8006074:	f001 fd72 	bl	8007b5c <_Balloc>
 8006078:	9006      	str	r0, [sp, #24]
 800607a:	2800      	cmp	r0, #0
 800607c:	f43f af13 	beq.w	8005ea6 <_strtod_l+0x486>
 8006080:	9b08      	ldr	r3, [sp, #32]
 8006082:	300c      	adds	r0, #12
 8006084:	691a      	ldr	r2, [r3, #16]
 8006086:	f103 010c 	add.w	r1, r3, #12
 800608a:	3202      	adds	r2, #2
 800608c:	0092      	lsls	r2, r2, #2
 800608e:	f001 fd57 	bl	8007b40 <memcpy>
 8006092:	ab1e      	add	r3, sp, #120	; 0x78
 8006094:	9301      	str	r3, [sp, #4]
 8006096:	ab1d      	add	r3, sp, #116	; 0x74
 8006098:	9300      	str	r3, [sp, #0]
 800609a:	4642      	mov	r2, r8
 800609c:	464b      	mov	r3, r9
 800609e:	4650      	mov	r0, sl
 80060a0:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 80060a4:	f002 f944 	bl	8008330 <__d2b>
 80060a8:	901c      	str	r0, [sp, #112]	; 0x70
 80060aa:	2800      	cmp	r0, #0
 80060ac:	f43f aefb 	beq.w	8005ea6 <_strtod_l+0x486>
 80060b0:	2101      	movs	r1, #1
 80060b2:	4650      	mov	r0, sl
 80060b4:	f001 fe96 	bl	8007de4 <__i2b>
 80060b8:	4603      	mov	r3, r0
 80060ba:	9004      	str	r0, [sp, #16]
 80060bc:	2800      	cmp	r0, #0
 80060be:	f43f aef2 	beq.w	8005ea6 <_strtod_l+0x486>
 80060c2:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80060c4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80060c6:	2d00      	cmp	r5, #0
 80060c8:	bfab      	itete	ge
 80060ca:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80060cc:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80060ce:	18ee      	addge	r6, r5, r3
 80060d0:	1b5c      	sublt	r4, r3, r5
 80060d2:	9b05      	ldr	r3, [sp, #20]
 80060d4:	bfa8      	it	ge
 80060d6:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 80060d8:	eba5 0503 	sub.w	r5, r5, r3
 80060dc:	4415      	add	r5, r2
 80060de:	4b71      	ldr	r3, [pc, #452]	; (80062a4 <_strtod_l+0x884>)
 80060e0:	f105 35ff 	add.w	r5, r5, #4294967295
 80060e4:	bfb8      	it	lt
 80060e6:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80060e8:	429d      	cmp	r5, r3
 80060ea:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80060ee:	f280 80c9 	bge.w	8006284 <_strtod_l+0x864>
 80060f2:	1b5b      	subs	r3, r3, r5
 80060f4:	2b1f      	cmp	r3, #31
 80060f6:	f04f 0701 	mov.w	r7, #1
 80060fa:	eba2 0203 	sub.w	r2, r2, r3
 80060fe:	f300 80b6 	bgt.w	800626e <_strtod_l+0x84e>
 8006102:	2500      	movs	r5, #0
 8006104:	fa07 f303 	lsl.w	r3, r7, r3
 8006108:	930f      	str	r3, [sp, #60]	; 0x3c
 800610a:	18b7      	adds	r7, r6, r2
 800610c:	9b05      	ldr	r3, [sp, #20]
 800610e:	42be      	cmp	r6, r7
 8006110:	4414      	add	r4, r2
 8006112:	441c      	add	r4, r3
 8006114:	4633      	mov	r3, r6
 8006116:	bfa8      	it	ge
 8006118:	463b      	movge	r3, r7
 800611a:	42a3      	cmp	r3, r4
 800611c:	bfa8      	it	ge
 800611e:	4623      	movge	r3, r4
 8006120:	2b00      	cmp	r3, #0
 8006122:	bfc2      	ittt	gt
 8006124:	1aff      	subgt	r7, r7, r3
 8006126:	1ae4      	subgt	r4, r4, r3
 8006128:	1af6      	subgt	r6, r6, r3
 800612a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800612c:	2b00      	cmp	r3, #0
 800612e:	dd17      	ble.n	8006160 <_strtod_l+0x740>
 8006130:	461a      	mov	r2, r3
 8006132:	4650      	mov	r0, sl
 8006134:	9904      	ldr	r1, [sp, #16]
 8006136:	f001 ff0f 	bl	8007f58 <__pow5mult>
 800613a:	9004      	str	r0, [sp, #16]
 800613c:	2800      	cmp	r0, #0
 800613e:	f43f aeb2 	beq.w	8005ea6 <_strtod_l+0x486>
 8006142:	4601      	mov	r1, r0
 8006144:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006146:	4650      	mov	r0, sl
 8006148:	f001 fe62 	bl	8007e10 <__multiply>
 800614c:	9009      	str	r0, [sp, #36]	; 0x24
 800614e:	2800      	cmp	r0, #0
 8006150:	f43f aea9 	beq.w	8005ea6 <_strtod_l+0x486>
 8006154:	4650      	mov	r0, sl
 8006156:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006158:	f001 fd40 	bl	8007bdc <_Bfree>
 800615c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800615e:	931c      	str	r3, [sp, #112]	; 0x70
 8006160:	2f00      	cmp	r7, #0
 8006162:	f300 8093 	bgt.w	800628c <_strtod_l+0x86c>
 8006166:	9b07      	ldr	r3, [sp, #28]
 8006168:	2b00      	cmp	r3, #0
 800616a:	dd08      	ble.n	800617e <_strtod_l+0x75e>
 800616c:	4650      	mov	r0, sl
 800616e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006170:	9906      	ldr	r1, [sp, #24]
 8006172:	f001 fef1 	bl	8007f58 <__pow5mult>
 8006176:	9006      	str	r0, [sp, #24]
 8006178:	2800      	cmp	r0, #0
 800617a:	f43f ae94 	beq.w	8005ea6 <_strtod_l+0x486>
 800617e:	2c00      	cmp	r4, #0
 8006180:	dd08      	ble.n	8006194 <_strtod_l+0x774>
 8006182:	4622      	mov	r2, r4
 8006184:	4650      	mov	r0, sl
 8006186:	9906      	ldr	r1, [sp, #24]
 8006188:	f001 ff40 	bl	800800c <__lshift>
 800618c:	9006      	str	r0, [sp, #24]
 800618e:	2800      	cmp	r0, #0
 8006190:	f43f ae89 	beq.w	8005ea6 <_strtod_l+0x486>
 8006194:	2e00      	cmp	r6, #0
 8006196:	dd08      	ble.n	80061aa <_strtod_l+0x78a>
 8006198:	4632      	mov	r2, r6
 800619a:	4650      	mov	r0, sl
 800619c:	9904      	ldr	r1, [sp, #16]
 800619e:	f001 ff35 	bl	800800c <__lshift>
 80061a2:	9004      	str	r0, [sp, #16]
 80061a4:	2800      	cmp	r0, #0
 80061a6:	f43f ae7e 	beq.w	8005ea6 <_strtod_l+0x486>
 80061aa:	4650      	mov	r0, sl
 80061ac:	9a06      	ldr	r2, [sp, #24]
 80061ae:	991c      	ldr	r1, [sp, #112]	; 0x70
 80061b0:	f001 ffb4 	bl	800811c <__mdiff>
 80061b4:	4683      	mov	fp, r0
 80061b6:	2800      	cmp	r0, #0
 80061b8:	f43f ae75 	beq.w	8005ea6 <_strtod_l+0x486>
 80061bc:	2400      	movs	r4, #0
 80061be:	68c3      	ldr	r3, [r0, #12]
 80061c0:	9904      	ldr	r1, [sp, #16]
 80061c2:	60c4      	str	r4, [r0, #12]
 80061c4:	930d      	str	r3, [sp, #52]	; 0x34
 80061c6:	f001 ff8d 	bl	80080e4 <__mcmp>
 80061ca:	42a0      	cmp	r0, r4
 80061cc:	da70      	bge.n	80062b0 <_strtod_l+0x890>
 80061ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061d0:	ea53 0308 	orrs.w	r3, r3, r8
 80061d4:	f040 8096 	bne.w	8006304 <_strtod_l+0x8e4>
 80061d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80061dc:	2b00      	cmp	r3, #0
 80061de:	f040 8091 	bne.w	8006304 <_strtod_l+0x8e4>
 80061e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80061e6:	0d1b      	lsrs	r3, r3, #20
 80061e8:	051b      	lsls	r3, r3, #20
 80061ea:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80061ee:	f240 8089 	bls.w	8006304 <_strtod_l+0x8e4>
 80061f2:	f8db 3014 	ldr.w	r3, [fp, #20]
 80061f6:	b923      	cbnz	r3, 8006202 <_strtod_l+0x7e2>
 80061f8:	f8db 3010 	ldr.w	r3, [fp, #16]
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	f340 8081 	ble.w	8006304 <_strtod_l+0x8e4>
 8006202:	4659      	mov	r1, fp
 8006204:	2201      	movs	r2, #1
 8006206:	4650      	mov	r0, sl
 8006208:	f001 ff00 	bl	800800c <__lshift>
 800620c:	9904      	ldr	r1, [sp, #16]
 800620e:	4683      	mov	fp, r0
 8006210:	f001 ff68 	bl	80080e4 <__mcmp>
 8006214:	2800      	cmp	r0, #0
 8006216:	dd75      	ble.n	8006304 <_strtod_l+0x8e4>
 8006218:	9905      	ldr	r1, [sp, #20]
 800621a:	464b      	mov	r3, r9
 800621c:	4a22      	ldr	r2, [pc, #136]	; (80062a8 <_strtod_l+0x888>)
 800621e:	2900      	cmp	r1, #0
 8006220:	f000 8091 	beq.w	8006346 <_strtod_l+0x926>
 8006224:	ea02 0109 	and.w	r1, r2, r9
 8006228:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800622c:	f300 808b 	bgt.w	8006346 <_strtod_l+0x926>
 8006230:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006234:	f77f aea9 	ble.w	8005f8a <_strtod_l+0x56a>
 8006238:	2300      	movs	r3, #0
 800623a:	4a1c      	ldr	r2, [pc, #112]	; (80062ac <_strtod_l+0x88c>)
 800623c:	4640      	mov	r0, r8
 800623e:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8006242:	4649      	mov	r1, r9
 8006244:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006248:	f7fa f946 	bl	80004d8 <__aeabi_dmul>
 800624c:	460b      	mov	r3, r1
 800624e:	4303      	orrs	r3, r0
 8006250:	bf08      	it	eq
 8006252:	2322      	moveq	r3, #34	; 0x22
 8006254:	4680      	mov	r8, r0
 8006256:	4689      	mov	r9, r1
 8006258:	bf08      	it	eq
 800625a:	f8ca 3000 	streq.w	r3, [sl]
 800625e:	e62d      	b.n	8005ebc <_strtod_l+0x49c>
 8006260:	f04f 32ff 	mov.w	r2, #4294967295
 8006264:	fa02 f303 	lsl.w	r3, r2, r3
 8006268:	ea03 0808 	and.w	r8, r3, r8
 800626c:	e6db      	b.n	8006026 <_strtod_l+0x606>
 800626e:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8006272:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8006276:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800627a:	35e2      	adds	r5, #226	; 0xe2
 800627c:	fa07 f505 	lsl.w	r5, r7, r5
 8006280:	970f      	str	r7, [sp, #60]	; 0x3c
 8006282:	e742      	b.n	800610a <_strtod_l+0x6ea>
 8006284:	2301      	movs	r3, #1
 8006286:	2500      	movs	r5, #0
 8006288:	930f      	str	r3, [sp, #60]	; 0x3c
 800628a:	e73e      	b.n	800610a <_strtod_l+0x6ea>
 800628c:	463a      	mov	r2, r7
 800628e:	4650      	mov	r0, sl
 8006290:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006292:	f001 febb 	bl	800800c <__lshift>
 8006296:	901c      	str	r0, [sp, #112]	; 0x70
 8006298:	2800      	cmp	r0, #0
 800629a:	f47f af64 	bne.w	8006166 <_strtod_l+0x746>
 800629e:	e602      	b.n	8005ea6 <_strtod_l+0x486>
 80062a0:	08009578 	.word	0x08009578
 80062a4:	fffffc02 	.word	0xfffffc02
 80062a8:	7ff00000 	.word	0x7ff00000
 80062ac:	39500000 	.word	0x39500000
 80062b0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80062b4:	d166      	bne.n	8006384 <_strtod_l+0x964>
 80062b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80062b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80062bc:	b35a      	cbz	r2, 8006316 <_strtod_l+0x8f6>
 80062be:	4a9c      	ldr	r2, [pc, #624]	; (8006530 <_strtod_l+0xb10>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d12c      	bne.n	800631e <_strtod_l+0x8fe>
 80062c4:	9b05      	ldr	r3, [sp, #20]
 80062c6:	4640      	mov	r0, r8
 80062c8:	b303      	cbz	r3, 800630c <_strtod_l+0x8ec>
 80062ca:	464b      	mov	r3, r9
 80062cc:	4a99      	ldr	r2, [pc, #612]	; (8006534 <_strtod_l+0xb14>)
 80062ce:	f04f 31ff 	mov.w	r1, #4294967295
 80062d2:	401a      	ands	r2, r3
 80062d4:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80062d8:	d81b      	bhi.n	8006312 <_strtod_l+0x8f2>
 80062da:	0d12      	lsrs	r2, r2, #20
 80062dc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80062e0:	fa01 f303 	lsl.w	r3, r1, r3
 80062e4:	4298      	cmp	r0, r3
 80062e6:	d11a      	bne.n	800631e <_strtod_l+0x8fe>
 80062e8:	4b93      	ldr	r3, [pc, #588]	; (8006538 <_strtod_l+0xb18>)
 80062ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d102      	bne.n	80062f6 <_strtod_l+0x8d6>
 80062f0:	3001      	adds	r0, #1
 80062f2:	f43f add8 	beq.w	8005ea6 <_strtod_l+0x486>
 80062f6:	f04f 0800 	mov.w	r8, #0
 80062fa:	4b8e      	ldr	r3, [pc, #568]	; (8006534 <_strtod_l+0xb14>)
 80062fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062fe:	401a      	ands	r2, r3
 8006300:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8006304:	9b05      	ldr	r3, [sp, #20]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d196      	bne.n	8006238 <_strtod_l+0x818>
 800630a:	e5d7      	b.n	8005ebc <_strtod_l+0x49c>
 800630c:	f04f 33ff 	mov.w	r3, #4294967295
 8006310:	e7e8      	b.n	80062e4 <_strtod_l+0x8c4>
 8006312:	460b      	mov	r3, r1
 8006314:	e7e6      	b.n	80062e4 <_strtod_l+0x8c4>
 8006316:	ea53 0308 	orrs.w	r3, r3, r8
 800631a:	f43f af7d 	beq.w	8006218 <_strtod_l+0x7f8>
 800631e:	b1e5      	cbz	r5, 800635a <_strtod_l+0x93a>
 8006320:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006322:	421d      	tst	r5, r3
 8006324:	d0ee      	beq.n	8006304 <_strtod_l+0x8e4>
 8006326:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006328:	4640      	mov	r0, r8
 800632a:	4649      	mov	r1, r9
 800632c:	9a05      	ldr	r2, [sp, #20]
 800632e:	b1c3      	cbz	r3, 8006362 <_strtod_l+0x942>
 8006330:	f7ff fb52 	bl	80059d8 <sulp>
 8006334:	4602      	mov	r2, r0
 8006336:	460b      	mov	r3, r1
 8006338:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800633c:	f7f9 ff16 	bl	800016c <__adddf3>
 8006340:	4680      	mov	r8, r0
 8006342:	4689      	mov	r9, r1
 8006344:	e7de      	b.n	8006304 <_strtod_l+0x8e4>
 8006346:	4013      	ands	r3, r2
 8006348:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800634c:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8006350:	f04f 38ff 	mov.w	r8, #4294967295
 8006354:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8006358:	e7d4      	b.n	8006304 <_strtod_l+0x8e4>
 800635a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800635c:	ea13 0f08 	tst.w	r3, r8
 8006360:	e7e0      	b.n	8006324 <_strtod_l+0x904>
 8006362:	f7ff fb39 	bl	80059d8 <sulp>
 8006366:	4602      	mov	r2, r0
 8006368:	460b      	mov	r3, r1
 800636a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800636e:	f7f9 fefb 	bl	8000168 <__aeabi_dsub>
 8006372:	2200      	movs	r2, #0
 8006374:	2300      	movs	r3, #0
 8006376:	4680      	mov	r8, r0
 8006378:	4689      	mov	r9, r1
 800637a:	f7fa fb15 	bl	80009a8 <__aeabi_dcmpeq>
 800637e:	2800      	cmp	r0, #0
 8006380:	d0c0      	beq.n	8006304 <_strtod_l+0x8e4>
 8006382:	e602      	b.n	8005f8a <_strtod_l+0x56a>
 8006384:	4658      	mov	r0, fp
 8006386:	9904      	ldr	r1, [sp, #16]
 8006388:	f002 f82e 	bl	80083e8 <__ratio>
 800638c:	2200      	movs	r2, #0
 800638e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006392:	4606      	mov	r6, r0
 8006394:	460f      	mov	r7, r1
 8006396:	f7fa fb1b 	bl	80009d0 <__aeabi_dcmple>
 800639a:	2800      	cmp	r0, #0
 800639c:	d075      	beq.n	800648a <_strtod_l+0xa6a>
 800639e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d047      	beq.n	8006434 <_strtod_l+0xa14>
 80063a4:	2600      	movs	r6, #0
 80063a6:	4f65      	ldr	r7, [pc, #404]	; (800653c <_strtod_l+0xb1c>)
 80063a8:	4d64      	ldr	r5, [pc, #400]	; (800653c <_strtod_l+0xb1c>)
 80063aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80063b0:	0d1b      	lsrs	r3, r3, #20
 80063b2:	051b      	lsls	r3, r3, #20
 80063b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80063b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80063b8:	4b61      	ldr	r3, [pc, #388]	; (8006540 <_strtod_l+0xb20>)
 80063ba:	429a      	cmp	r2, r3
 80063bc:	f040 80c8 	bne.w	8006550 <_strtod_l+0xb30>
 80063c0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80063c4:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80063c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063ca:	4640      	mov	r0, r8
 80063cc:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 80063d0:	4649      	mov	r1, r9
 80063d2:	f001 ff33 	bl	800823c <__ulp>
 80063d6:	4602      	mov	r2, r0
 80063d8:	460b      	mov	r3, r1
 80063da:	4630      	mov	r0, r6
 80063dc:	4639      	mov	r1, r7
 80063de:	f7fa f87b 	bl	80004d8 <__aeabi_dmul>
 80063e2:	4642      	mov	r2, r8
 80063e4:	464b      	mov	r3, r9
 80063e6:	f7f9 fec1 	bl	800016c <__adddf3>
 80063ea:	460b      	mov	r3, r1
 80063ec:	4951      	ldr	r1, [pc, #324]	; (8006534 <_strtod_l+0xb14>)
 80063ee:	4a55      	ldr	r2, [pc, #340]	; (8006544 <_strtod_l+0xb24>)
 80063f0:	4019      	ands	r1, r3
 80063f2:	4291      	cmp	r1, r2
 80063f4:	4680      	mov	r8, r0
 80063f6:	d95e      	bls.n	80064b6 <_strtod_l+0xa96>
 80063f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063fa:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80063fe:	4293      	cmp	r3, r2
 8006400:	d103      	bne.n	800640a <_strtod_l+0x9ea>
 8006402:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006404:	3301      	adds	r3, #1
 8006406:	f43f ad4e 	beq.w	8005ea6 <_strtod_l+0x486>
 800640a:	f04f 38ff 	mov.w	r8, #4294967295
 800640e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8006538 <_strtod_l+0xb18>
 8006412:	4650      	mov	r0, sl
 8006414:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006416:	f001 fbe1 	bl	8007bdc <_Bfree>
 800641a:	4650      	mov	r0, sl
 800641c:	9906      	ldr	r1, [sp, #24]
 800641e:	f001 fbdd 	bl	8007bdc <_Bfree>
 8006422:	4650      	mov	r0, sl
 8006424:	9904      	ldr	r1, [sp, #16]
 8006426:	f001 fbd9 	bl	8007bdc <_Bfree>
 800642a:	4659      	mov	r1, fp
 800642c:	4650      	mov	r0, sl
 800642e:	f001 fbd5 	bl	8007bdc <_Bfree>
 8006432:	e61c      	b.n	800606e <_strtod_l+0x64e>
 8006434:	f1b8 0f00 	cmp.w	r8, #0
 8006438:	d119      	bne.n	800646e <_strtod_l+0xa4e>
 800643a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800643c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006440:	b9e3      	cbnz	r3, 800647c <_strtod_l+0xa5c>
 8006442:	2200      	movs	r2, #0
 8006444:	4630      	mov	r0, r6
 8006446:	4639      	mov	r1, r7
 8006448:	4b3c      	ldr	r3, [pc, #240]	; (800653c <_strtod_l+0xb1c>)
 800644a:	f7fa fab7 	bl	80009bc <__aeabi_dcmplt>
 800644e:	b9c8      	cbnz	r0, 8006484 <_strtod_l+0xa64>
 8006450:	2200      	movs	r2, #0
 8006452:	4630      	mov	r0, r6
 8006454:	4639      	mov	r1, r7
 8006456:	4b3c      	ldr	r3, [pc, #240]	; (8006548 <_strtod_l+0xb28>)
 8006458:	f7fa f83e 	bl	80004d8 <__aeabi_dmul>
 800645c:	4604      	mov	r4, r0
 800645e:	460d      	mov	r5, r1
 8006460:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006464:	9418      	str	r4, [sp, #96]	; 0x60
 8006466:	9319      	str	r3, [sp, #100]	; 0x64
 8006468:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800646c:	e79d      	b.n	80063aa <_strtod_l+0x98a>
 800646e:	f1b8 0f01 	cmp.w	r8, #1
 8006472:	d103      	bne.n	800647c <_strtod_l+0xa5c>
 8006474:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006476:	2b00      	cmp	r3, #0
 8006478:	f43f ad87 	beq.w	8005f8a <_strtod_l+0x56a>
 800647c:	2600      	movs	r6, #0
 800647e:	2400      	movs	r4, #0
 8006480:	4f32      	ldr	r7, [pc, #200]	; (800654c <_strtod_l+0xb2c>)
 8006482:	e791      	b.n	80063a8 <_strtod_l+0x988>
 8006484:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8006486:	4d30      	ldr	r5, [pc, #192]	; (8006548 <_strtod_l+0xb28>)
 8006488:	e7ea      	b.n	8006460 <_strtod_l+0xa40>
 800648a:	4b2f      	ldr	r3, [pc, #188]	; (8006548 <_strtod_l+0xb28>)
 800648c:	2200      	movs	r2, #0
 800648e:	4630      	mov	r0, r6
 8006490:	4639      	mov	r1, r7
 8006492:	f7fa f821 	bl	80004d8 <__aeabi_dmul>
 8006496:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006498:	4604      	mov	r4, r0
 800649a:	460d      	mov	r5, r1
 800649c:	b933      	cbnz	r3, 80064ac <_strtod_l+0xa8c>
 800649e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80064a2:	9010      	str	r0, [sp, #64]	; 0x40
 80064a4:	9311      	str	r3, [sp, #68]	; 0x44
 80064a6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80064aa:	e77e      	b.n	80063aa <_strtod_l+0x98a>
 80064ac:	4602      	mov	r2, r0
 80064ae:	460b      	mov	r3, r1
 80064b0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80064b4:	e7f7      	b.n	80064a6 <_strtod_l+0xa86>
 80064b6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80064ba:	9b05      	ldr	r3, [sp, #20]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d1a8      	bne.n	8006412 <_strtod_l+0x9f2>
 80064c0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80064c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80064c6:	0d1b      	lsrs	r3, r3, #20
 80064c8:	051b      	lsls	r3, r3, #20
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d1a1      	bne.n	8006412 <_strtod_l+0x9f2>
 80064ce:	4620      	mov	r0, r4
 80064d0:	4629      	mov	r1, r5
 80064d2:	f7fa fc57 	bl	8000d84 <__aeabi_d2lz>
 80064d6:	f7f9 ffd1 	bl	800047c <__aeabi_l2d>
 80064da:	4602      	mov	r2, r0
 80064dc:	460b      	mov	r3, r1
 80064de:	4620      	mov	r0, r4
 80064e0:	4629      	mov	r1, r5
 80064e2:	f7f9 fe41 	bl	8000168 <__aeabi_dsub>
 80064e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80064e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80064ec:	ea43 0308 	orr.w	r3, r3, r8
 80064f0:	4313      	orrs	r3, r2
 80064f2:	4604      	mov	r4, r0
 80064f4:	460d      	mov	r5, r1
 80064f6:	d066      	beq.n	80065c6 <_strtod_l+0xba6>
 80064f8:	a309      	add	r3, pc, #36	; (adr r3, 8006520 <_strtod_l+0xb00>)
 80064fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064fe:	f7fa fa5d 	bl	80009bc <__aeabi_dcmplt>
 8006502:	2800      	cmp	r0, #0
 8006504:	f47f acda 	bne.w	8005ebc <_strtod_l+0x49c>
 8006508:	a307      	add	r3, pc, #28	; (adr r3, 8006528 <_strtod_l+0xb08>)
 800650a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800650e:	4620      	mov	r0, r4
 8006510:	4629      	mov	r1, r5
 8006512:	f7fa fa71 	bl	80009f8 <__aeabi_dcmpgt>
 8006516:	2800      	cmp	r0, #0
 8006518:	f43f af7b 	beq.w	8006412 <_strtod_l+0x9f2>
 800651c:	e4ce      	b.n	8005ebc <_strtod_l+0x49c>
 800651e:	bf00      	nop
 8006520:	94a03595 	.word	0x94a03595
 8006524:	3fdfffff 	.word	0x3fdfffff
 8006528:	35afe535 	.word	0x35afe535
 800652c:	3fe00000 	.word	0x3fe00000
 8006530:	000fffff 	.word	0x000fffff
 8006534:	7ff00000 	.word	0x7ff00000
 8006538:	7fefffff 	.word	0x7fefffff
 800653c:	3ff00000 	.word	0x3ff00000
 8006540:	7fe00000 	.word	0x7fe00000
 8006544:	7c9fffff 	.word	0x7c9fffff
 8006548:	3fe00000 	.word	0x3fe00000
 800654c:	bff00000 	.word	0xbff00000
 8006550:	9b05      	ldr	r3, [sp, #20]
 8006552:	b313      	cbz	r3, 800659a <_strtod_l+0xb7a>
 8006554:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006556:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800655a:	d81e      	bhi.n	800659a <_strtod_l+0xb7a>
 800655c:	a326      	add	r3, pc, #152	; (adr r3, 80065f8 <_strtod_l+0xbd8>)
 800655e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006562:	4620      	mov	r0, r4
 8006564:	4629      	mov	r1, r5
 8006566:	f7fa fa33 	bl	80009d0 <__aeabi_dcmple>
 800656a:	b190      	cbz	r0, 8006592 <_strtod_l+0xb72>
 800656c:	4629      	mov	r1, r5
 800656e:	4620      	mov	r0, r4
 8006570:	f7fa fa8a 	bl	8000a88 <__aeabi_d2uiz>
 8006574:	2801      	cmp	r0, #1
 8006576:	bf38      	it	cc
 8006578:	2001      	movcc	r0, #1
 800657a:	f7f9 ff33 	bl	80003e4 <__aeabi_ui2d>
 800657e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006580:	4604      	mov	r4, r0
 8006582:	460d      	mov	r5, r1
 8006584:	b9d3      	cbnz	r3, 80065bc <_strtod_l+0xb9c>
 8006586:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800658a:	9012      	str	r0, [sp, #72]	; 0x48
 800658c:	9313      	str	r3, [sp, #76]	; 0x4c
 800658e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8006592:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006594:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8006598:	1a9f      	subs	r7, r3, r2
 800659a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800659e:	f001 fe4d 	bl	800823c <__ulp>
 80065a2:	4602      	mov	r2, r0
 80065a4:	460b      	mov	r3, r1
 80065a6:	4630      	mov	r0, r6
 80065a8:	4639      	mov	r1, r7
 80065aa:	f7f9 ff95 	bl	80004d8 <__aeabi_dmul>
 80065ae:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80065b2:	f7f9 fddb 	bl	800016c <__adddf3>
 80065b6:	4680      	mov	r8, r0
 80065b8:	4689      	mov	r9, r1
 80065ba:	e77e      	b.n	80064ba <_strtod_l+0xa9a>
 80065bc:	4602      	mov	r2, r0
 80065be:	460b      	mov	r3, r1
 80065c0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80065c4:	e7e3      	b.n	800658e <_strtod_l+0xb6e>
 80065c6:	a30e      	add	r3, pc, #56	; (adr r3, 8006600 <_strtod_l+0xbe0>)
 80065c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065cc:	f7fa f9f6 	bl	80009bc <__aeabi_dcmplt>
 80065d0:	e7a1      	b.n	8006516 <_strtod_l+0xaf6>
 80065d2:	2300      	movs	r3, #0
 80065d4:	930c      	str	r3, [sp, #48]	; 0x30
 80065d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80065d8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80065da:	6013      	str	r3, [r2, #0]
 80065dc:	f7ff ba65 	b.w	8005aaa <_strtod_l+0x8a>
 80065e0:	2b65      	cmp	r3, #101	; 0x65
 80065e2:	f43f ab5c 	beq.w	8005c9e <_strtod_l+0x27e>
 80065e6:	2b45      	cmp	r3, #69	; 0x45
 80065e8:	f43f ab59 	beq.w	8005c9e <_strtod_l+0x27e>
 80065ec:	2201      	movs	r2, #1
 80065ee:	f7ff bb8d 	b.w	8005d0c <_strtod_l+0x2ec>
 80065f2:	bf00      	nop
 80065f4:	f3af 8000 	nop.w
 80065f8:	ffc00000 	.word	0xffc00000
 80065fc:	41dfffff 	.word	0x41dfffff
 8006600:	94a03595 	.word	0x94a03595
 8006604:	3fcfffff 	.word	0x3fcfffff

08006608 <_strtod_r>:
 8006608:	4b01      	ldr	r3, [pc, #4]	; (8006610 <_strtod_r+0x8>)
 800660a:	f7ff ba09 	b.w	8005a20 <_strtod_l>
 800660e:	bf00      	nop
 8006610:	20000074 	.word	0x20000074

08006614 <_strtol_l.isra.0>:
 8006614:	2b01      	cmp	r3, #1
 8006616:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800661a:	4686      	mov	lr, r0
 800661c:	d001      	beq.n	8006622 <_strtol_l.isra.0+0xe>
 800661e:	2b24      	cmp	r3, #36	; 0x24
 8006620:	d906      	bls.n	8006630 <_strtol_l.isra.0+0x1c>
 8006622:	f7fe fb11 	bl	8004c48 <__errno>
 8006626:	2316      	movs	r3, #22
 8006628:	6003      	str	r3, [r0, #0]
 800662a:	2000      	movs	r0, #0
 800662c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006630:	468c      	mov	ip, r1
 8006632:	4e3a      	ldr	r6, [pc, #232]	; (800671c <_strtol_l.isra.0+0x108>)
 8006634:	4660      	mov	r0, ip
 8006636:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800663a:	5da5      	ldrb	r5, [r4, r6]
 800663c:	f015 0508 	ands.w	r5, r5, #8
 8006640:	d1f8      	bne.n	8006634 <_strtol_l.isra.0+0x20>
 8006642:	2c2d      	cmp	r4, #45	; 0x2d
 8006644:	d133      	bne.n	80066ae <_strtol_l.isra.0+0x9a>
 8006646:	f04f 0801 	mov.w	r8, #1
 800664a:	f89c 4000 	ldrb.w	r4, [ip]
 800664e:	f100 0c02 	add.w	ip, r0, #2
 8006652:	2b00      	cmp	r3, #0
 8006654:	d05d      	beq.n	8006712 <_strtol_l.isra.0+0xfe>
 8006656:	2b10      	cmp	r3, #16
 8006658:	d10c      	bne.n	8006674 <_strtol_l.isra.0+0x60>
 800665a:	2c30      	cmp	r4, #48	; 0x30
 800665c:	d10a      	bne.n	8006674 <_strtol_l.isra.0+0x60>
 800665e:	f89c 0000 	ldrb.w	r0, [ip]
 8006662:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006666:	2858      	cmp	r0, #88	; 0x58
 8006668:	d14e      	bne.n	8006708 <_strtol_l.isra.0+0xf4>
 800666a:	2310      	movs	r3, #16
 800666c:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8006670:	f10c 0c02 	add.w	ip, ip, #2
 8006674:	2500      	movs	r5, #0
 8006676:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800667a:	3f01      	subs	r7, #1
 800667c:	fbb7 f9f3 	udiv	r9, r7, r3
 8006680:	4628      	mov	r0, r5
 8006682:	fb03 7a19 	mls	sl, r3, r9, r7
 8006686:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800668a:	2e09      	cmp	r6, #9
 800668c:	d818      	bhi.n	80066c0 <_strtol_l.isra.0+0xac>
 800668e:	4634      	mov	r4, r6
 8006690:	42a3      	cmp	r3, r4
 8006692:	dd24      	ble.n	80066de <_strtol_l.isra.0+0xca>
 8006694:	2d00      	cmp	r5, #0
 8006696:	db1f      	blt.n	80066d8 <_strtol_l.isra.0+0xc4>
 8006698:	4581      	cmp	r9, r0
 800669a:	d31d      	bcc.n	80066d8 <_strtol_l.isra.0+0xc4>
 800669c:	d101      	bne.n	80066a2 <_strtol_l.isra.0+0x8e>
 800669e:	45a2      	cmp	sl, r4
 80066a0:	db1a      	blt.n	80066d8 <_strtol_l.isra.0+0xc4>
 80066a2:	2501      	movs	r5, #1
 80066a4:	fb00 4003 	mla	r0, r0, r3, r4
 80066a8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80066ac:	e7eb      	b.n	8006686 <_strtol_l.isra.0+0x72>
 80066ae:	2c2b      	cmp	r4, #43	; 0x2b
 80066b0:	bf08      	it	eq
 80066b2:	f89c 4000 	ldrbeq.w	r4, [ip]
 80066b6:	46a8      	mov	r8, r5
 80066b8:	bf08      	it	eq
 80066ba:	f100 0c02 	addeq.w	ip, r0, #2
 80066be:	e7c8      	b.n	8006652 <_strtol_l.isra.0+0x3e>
 80066c0:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80066c4:	2e19      	cmp	r6, #25
 80066c6:	d801      	bhi.n	80066cc <_strtol_l.isra.0+0xb8>
 80066c8:	3c37      	subs	r4, #55	; 0x37
 80066ca:	e7e1      	b.n	8006690 <_strtol_l.isra.0+0x7c>
 80066cc:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80066d0:	2e19      	cmp	r6, #25
 80066d2:	d804      	bhi.n	80066de <_strtol_l.isra.0+0xca>
 80066d4:	3c57      	subs	r4, #87	; 0x57
 80066d6:	e7db      	b.n	8006690 <_strtol_l.isra.0+0x7c>
 80066d8:	f04f 35ff 	mov.w	r5, #4294967295
 80066dc:	e7e4      	b.n	80066a8 <_strtol_l.isra.0+0x94>
 80066de:	2d00      	cmp	r5, #0
 80066e0:	da08      	bge.n	80066f4 <_strtol_l.isra.0+0xe0>
 80066e2:	2322      	movs	r3, #34	; 0x22
 80066e4:	4638      	mov	r0, r7
 80066e6:	f8ce 3000 	str.w	r3, [lr]
 80066ea:	2a00      	cmp	r2, #0
 80066ec:	d09e      	beq.n	800662c <_strtol_l.isra.0+0x18>
 80066ee:	f10c 31ff 	add.w	r1, ip, #4294967295
 80066f2:	e007      	b.n	8006704 <_strtol_l.isra.0+0xf0>
 80066f4:	f1b8 0f00 	cmp.w	r8, #0
 80066f8:	d000      	beq.n	80066fc <_strtol_l.isra.0+0xe8>
 80066fa:	4240      	negs	r0, r0
 80066fc:	2a00      	cmp	r2, #0
 80066fe:	d095      	beq.n	800662c <_strtol_l.isra.0+0x18>
 8006700:	2d00      	cmp	r5, #0
 8006702:	d1f4      	bne.n	80066ee <_strtol_l.isra.0+0xda>
 8006704:	6011      	str	r1, [r2, #0]
 8006706:	e791      	b.n	800662c <_strtol_l.isra.0+0x18>
 8006708:	2430      	movs	r4, #48	; 0x30
 800670a:	2b00      	cmp	r3, #0
 800670c:	d1b2      	bne.n	8006674 <_strtol_l.isra.0+0x60>
 800670e:	2308      	movs	r3, #8
 8006710:	e7b0      	b.n	8006674 <_strtol_l.isra.0+0x60>
 8006712:	2c30      	cmp	r4, #48	; 0x30
 8006714:	d0a3      	beq.n	800665e <_strtol_l.isra.0+0x4a>
 8006716:	230a      	movs	r3, #10
 8006718:	e7ac      	b.n	8006674 <_strtol_l.isra.0+0x60>
 800671a:	bf00      	nop
 800671c:	080095a1 	.word	0x080095a1

08006720 <_strtol_r>:
 8006720:	f7ff bf78 	b.w	8006614 <_strtol_l.isra.0>

08006724 <quorem>:
 8006724:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006728:	6903      	ldr	r3, [r0, #16]
 800672a:	690c      	ldr	r4, [r1, #16]
 800672c:	4607      	mov	r7, r0
 800672e:	42a3      	cmp	r3, r4
 8006730:	f2c0 8083 	blt.w	800683a <quorem+0x116>
 8006734:	3c01      	subs	r4, #1
 8006736:	f100 0514 	add.w	r5, r0, #20
 800673a:	f101 0814 	add.w	r8, r1, #20
 800673e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006742:	9301      	str	r3, [sp, #4]
 8006744:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006748:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800674c:	3301      	adds	r3, #1
 800674e:	429a      	cmp	r2, r3
 8006750:	fbb2 f6f3 	udiv	r6, r2, r3
 8006754:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006758:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800675c:	d332      	bcc.n	80067c4 <quorem+0xa0>
 800675e:	f04f 0e00 	mov.w	lr, #0
 8006762:	4640      	mov	r0, r8
 8006764:	46ac      	mov	ip, r5
 8006766:	46f2      	mov	sl, lr
 8006768:	f850 2b04 	ldr.w	r2, [r0], #4
 800676c:	b293      	uxth	r3, r2
 800676e:	fb06 e303 	mla	r3, r6, r3, lr
 8006772:	0c12      	lsrs	r2, r2, #16
 8006774:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006778:	fb06 e202 	mla	r2, r6, r2, lr
 800677c:	b29b      	uxth	r3, r3
 800677e:	ebaa 0303 	sub.w	r3, sl, r3
 8006782:	f8dc a000 	ldr.w	sl, [ip]
 8006786:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800678a:	fa1f fa8a 	uxth.w	sl, sl
 800678e:	4453      	add	r3, sl
 8006790:	fa1f fa82 	uxth.w	sl, r2
 8006794:	f8dc 2000 	ldr.w	r2, [ip]
 8006798:	4581      	cmp	r9, r0
 800679a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800679e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80067a8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80067ac:	f84c 3b04 	str.w	r3, [ip], #4
 80067b0:	d2da      	bcs.n	8006768 <quorem+0x44>
 80067b2:	f855 300b 	ldr.w	r3, [r5, fp]
 80067b6:	b92b      	cbnz	r3, 80067c4 <quorem+0xa0>
 80067b8:	9b01      	ldr	r3, [sp, #4]
 80067ba:	3b04      	subs	r3, #4
 80067bc:	429d      	cmp	r5, r3
 80067be:	461a      	mov	r2, r3
 80067c0:	d32f      	bcc.n	8006822 <quorem+0xfe>
 80067c2:	613c      	str	r4, [r7, #16]
 80067c4:	4638      	mov	r0, r7
 80067c6:	f001 fc8d 	bl	80080e4 <__mcmp>
 80067ca:	2800      	cmp	r0, #0
 80067cc:	db25      	blt.n	800681a <quorem+0xf6>
 80067ce:	4628      	mov	r0, r5
 80067d0:	f04f 0c00 	mov.w	ip, #0
 80067d4:	3601      	adds	r6, #1
 80067d6:	f858 1b04 	ldr.w	r1, [r8], #4
 80067da:	f8d0 e000 	ldr.w	lr, [r0]
 80067de:	b28b      	uxth	r3, r1
 80067e0:	ebac 0303 	sub.w	r3, ip, r3
 80067e4:	fa1f f28e 	uxth.w	r2, lr
 80067e8:	4413      	add	r3, r2
 80067ea:	0c0a      	lsrs	r2, r1, #16
 80067ec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80067f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80067fa:	45c1      	cmp	r9, r8
 80067fc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006800:	f840 3b04 	str.w	r3, [r0], #4
 8006804:	d2e7      	bcs.n	80067d6 <quorem+0xb2>
 8006806:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800680a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800680e:	b922      	cbnz	r2, 800681a <quorem+0xf6>
 8006810:	3b04      	subs	r3, #4
 8006812:	429d      	cmp	r5, r3
 8006814:	461a      	mov	r2, r3
 8006816:	d30a      	bcc.n	800682e <quorem+0x10a>
 8006818:	613c      	str	r4, [r7, #16]
 800681a:	4630      	mov	r0, r6
 800681c:	b003      	add	sp, #12
 800681e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006822:	6812      	ldr	r2, [r2, #0]
 8006824:	3b04      	subs	r3, #4
 8006826:	2a00      	cmp	r2, #0
 8006828:	d1cb      	bne.n	80067c2 <quorem+0x9e>
 800682a:	3c01      	subs	r4, #1
 800682c:	e7c6      	b.n	80067bc <quorem+0x98>
 800682e:	6812      	ldr	r2, [r2, #0]
 8006830:	3b04      	subs	r3, #4
 8006832:	2a00      	cmp	r2, #0
 8006834:	d1f0      	bne.n	8006818 <quorem+0xf4>
 8006836:	3c01      	subs	r4, #1
 8006838:	e7eb      	b.n	8006812 <quorem+0xee>
 800683a:	2000      	movs	r0, #0
 800683c:	e7ee      	b.n	800681c <quorem+0xf8>
	...

08006840 <_dtoa_r>:
 8006840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006844:	4616      	mov	r6, r2
 8006846:	461f      	mov	r7, r3
 8006848:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800684a:	b099      	sub	sp, #100	; 0x64
 800684c:	4605      	mov	r5, r0
 800684e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006852:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006856:	b974      	cbnz	r4, 8006876 <_dtoa_r+0x36>
 8006858:	2010      	movs	r0, #16
 800685a:	f001 f949 	bl	8007af0 <malloc>
 800685e:	4602      	mov	r2, r0
 8006860:	6268      	str	r0, [r5, #36]	; 0x24
 8006862:	b920      	cbnz	r0, 800686e <_dtoa_r+0x2e>
 8006864:	21ea      	movs	r1, #234	; 0xea
 8006866:	4bae      	ldr	r3, [pc, #696]	; (8006b20 <_dtoa_r+0x2e0>)
 8006868:	48ae      	ldr	r0, [pc, #696]	; (8006b24 <_dtoa_r+0x2e4>)
 800686a:	f002 f875 	bl	8008958 <__assert_func>
 800686e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006872:	6004      	str	r4, [r0, #0]
 8006874:	60c4      	str	r4, [r0, #12]
 8006876:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006878:	6819      	ldr	r1, [r3, #0]
 800687a:	b151      	cbz	r1, 8006892 <_dtoa_r+0x52>
 800687c:	685a      	ldr	r2, [r3, #4]
 800687e:	2301      	movs	r3, #1
 8006880:	4093      	lsls	r3, r2
 8006882:	604a      	str	r2, [r1, #4]
 8006884:	608b      	str	r3, [r1, #8]
 8006886:	4628      	mov	r0, r5
 8006888:	f001 f9a8 	bl	8007bdc <_Bfree>
 800688c:	2200      	movs	r2, #0
 800688e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006890:	601a      	str	r2, [r3, #0]
 8006892:	1e3b      	subs	r3, r7, #0
 8006894:	bfaf      	iteee	ge
 8006896:	2300      	movge	r3, #0
 8006898:	2201      	movlt	r2, #1
 800689a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800689e:	9305      	strlt	r3, [sp, #20]
 80068a0:	bfa8      	it	ge
 80068a2:	f8c8 3000 	strge.w	r3, [r8]
 80068a6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80068aa:	4b9f      	ldr	r3, [pc, #636]	; (8006b28 <_dtoa_r+0x2e8>)
 80068ac:	bfb8      	it	lt
 80068ae:	f8c8 2000 	strlt.w	r2, [r8]
 80068b2:	ea33 0309 	bics.w	r3, r3, r9
 80068b6:	d119      	bne.n	80068ec <_dtoa_r+0xac>
 80068b8:	f242 730f 	movw	r3, #9999	; 0x270f
 80068bc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80068be:	6013      	str	r3, [r2, #0]
 80068c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80068c4:	4333      	orrs	r3, r6
 80068c6:	f000 8580 	beq.w	80073ca <_dtoa_r+0xb8a>
 80068ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80068cc:	b953      	cbnz	r3, 80068e4 <_dtoa_r+0xa4>
 80068ce:	4b97      	ldr	r3, [pc, #604]	; (8006b2c <_dtoa_r+0x2ec>)
 80068d0:	e022      	b.n	8006918 <_dtoa_r+0xd8>
 80068d2:	4b97      	ldr	r3, [pc, #604]	; (8006b30 <_dtoa_r+0x2f0>)
 80068d4:	9308      	str	r3, [sp, #32]
 80068d6:	3308      	adds	r3, #8
 80068d8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80068da:	6013      	str	r3, [r2, #0]
 80068dc:	9808      	ldr	r0, [sp, #32]
 80068de:	b019      	add	sp, #100	; 0x64
 80068e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068e4:	4b91      	ldr	r3, [pc, #580]	; (8006b2c <_dtoa_r+0x2ec>)
 80068e6:	9308      	str	r3, [sp, #32]
 80068e8:	3303      	adds	r3, #3
 80068ea:	e7f5      	b.n	80068d8 <_dtoa_r+0x98>
 80068ec:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80068f0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80068f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80068f8:	2200      	movs	r2, #0
 80068fa:	2300      	movs	r3, #0
 80068fc:	f7fa f854 	bl	80009a8 <__aeabi_dcmpeq>
 8006900:	4680      	mov	r8, r0
 8006902:	b158      	cbz	r0, 800691c <_dtoa_r+0xdc>
 8006904:	2301      	movs	r3, #1
 8006906:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006908:	6013      	str	r3, [r2, #0]
 800690a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800690c:	2b00      	cmp	r3, #0
 800690e:	f000 8559 	beq.w	80073c4 <_dtoa_r+0xb84>
 8006912:	4888      	ldr	r0, [pc, #544]	; (8006b34 <_dtoa_r+0x2f4>)
 8006914:	6018      	str	r0, [r3, #0]
 8006916:	1e43      	subs	r3, r0, #1
 8006918:	9308      	str	r3, [sp, #32]
 800691a:	e7df      	b.n	80068dc <_dtoa_r+0x9c>
 800691c:	ab16      	add	r3, sp, #88	; 0x58
 800691e:	9301      	str	r3, [sp, #4]
 8006920:	ab17      	add	r3, sp, #92	; 0x5c
 8006922:	9300      	str	r3, [sp, #0]
 8006924:	4628      	mov	r0, r5
 8006926:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800692a:	f001 fd01 	bl	8008330 <__d2b>
 800692e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006932:	4682      	mov	sl, r0
 8006934:	2c00      	cmp	r4, #0
 8006936:	d07e      	beq.n	8006a36 <_dtoa_r+0x1f6>
 8006938:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800693c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800693e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006942:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006946:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800694a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800694e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006952:	2200      	movs	r2, #0
 8006954:	4b78      	ldr	r3, [pc, #480]	; (8006b38 <_dtoa_r+0x2f8>)
 8006956:	f7f9 fc07 	bl	8000168 <__aeabi_dsub>
 800695a:	a36b      	add	r3, pc, #428	; (adr r3, 8006b08 <_dtoa_r+0x2c8>)
 800695c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006960:	f7f9 fdba 	bl	80004d8 <__aeabi_dmul>
 8006964:	a36a      	add	r3, pc, #424	; (adr r3, 8006b10 <_dtoa_r+0x2d0>)
 8006966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800696a:	f7f9 fbff 	bl	800016c <__adddf3>
 800696e:	4606      	mov	r6, r0
 8006970:	4620      	mov	r0, r4
 8006972:	460f      	mov	r7, r1
 8006974:	f7f9 fd46 	bl	8000404 <__aeabi_i2d>
 8006978:	a367      	add	r3, pc, #412	; (adr r3, 8006b18 <_dtoa_r+0x2d8>)
 800697a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800697e:	f7f9 fdab 	bl	80004d8 <__aeabi_dmul>
 8006982:	4602      	mov	r2, r0
 8006984:	460b      	mov	r3, r1
 8006986:	4630      	mov	r0, r6
 8006988:	4639      	mov	r1, r7
 800698a:	f7f9 fbef 	bl	800016c <__adddf3>
 800698e:	4606      	mov	r6, r0
 8006990:	460f      	mov	r7, r1
 8006992:	f7fa f851 	bl	8000a38 <__aeabi_d2iz>
 8006996:	2200      	movs	r2, #0
 8006998:	4681      	mov	r9, r0
 800699a:	2300      	movs	r3, #0
 800699c:	4630      	mov	r0, r6
 800699e:	4639      	mov	r1, r7
 80069a0:	f7fa f80c 	bl	80009bc <__aeabi_dcmplt>
 80069a4:	b148      	cbz	r0, 80069ba <_dtoa_r+0x17a>
 80069a6:	4648      	mov	r0, r9
 80069a8:	f7f9 fd2c 	bl	8000404 <__aeabi_i2d>
 80069ac:	4632      	mov	r2, r6
 80069ae:	463b      	mov	r3, r7
 80069b0:	f7f9 fffa 	bl	80009a8 <__aeabi_dcmpeq>
 80069b4:	b908      	cbnz	r0, 80069ba <_dtoa_r+0x17a>
 80069b6:	f109 39ff 	add.w	r9, r9, #4294967295
 80069ba:	f1b9 0f16 	cmp.w	r9, #22
 80069be:	d857      	bhi.n	8006a70 <_dtoa_r+0x230>
 80069c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80069c4:	4b5d      	ldr	r3, [pc, #372]	; (8006b3c <_dtoa_r+0x2fc>)
 80069c6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80069ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ce:	f7f9 fff5 	bl	80009bc <__aeabi_dcmplt>
 80069d2:	2800      	cmp	r0, #0
 80069d4:	d04e      	beq.n	8006a74 <_dtoa_r+0x234>
 80069d6:	2300      	movs	r3, #0
 80069d8:	f109 39ff 	add.w	r9, r9, #4294967295
 80069dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80069de:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80069e0:	1b1c      	subs	r4, r3, r4
 80069e2:	1e63      	subs	r3, r4, #1
 80069e4:	9309      	str	r3, [sp, #36]	; 0x24
 80069e6:	bf49      	itett	mi
 80069e8:	f1c4 0301 	rsbmi	r3, r4, #1
 80069ec:	2300      	movpl	r3, #0
 80069ee:	9306      	strmi	r3, [sp, #24]
 80069f0:	2300      	movmi	r3, #0
 80069f2:	bf54      	ite	pl
 80069f4:	9306      	strpl	r3, [sp, #24]
 80069f6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80069f8:	f1b9 0f00 	cmp.w	r9, #0
 80069fc:	db3c      	blt.n	8006a78 <_dtoa_r+0x238>
 80069fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a00:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006a04:	444b      	add	r3, r9
 8006a06:	9309      	str	r3, [sp, #36]	; 0x24
 8006a08:	2300      	movs	r3, #0
 8006a0a:	930a      	str	r3, [sp, #40]	; 0x28
 8006a0c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a0e:	2b09      	cmp	r3, #9
 8006a10:	d86c      	bhi.n	8006aec <_dtoa_r+0x2ac>
 8006a12:	2b05      	cmp	r3, #5
 8006a14:	bfc4      	itt	gt
 8006a16:	3b04      	subgt	r3, #4
 8006a18:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006a1a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a1c:	bfc8      	it	gt
 8006a1e:	2400      	movgt	r4, #0
 8006a20:	f1a3 0302 	sub.w	r3, r3, #2
 8006a24:	bfd8      	it	le
 8006a26:	2401      	movle	r4, #1
 8006a28:	2b03      	cmp	r3, #3
 8006a2a:	f200 808b 	bhi.w	8006b44 <_dtoa_r+0x304>
 8006a2e:	e8df f003 	tbb	[pc, r3]
 8006a32:	4f2d      	.short	0x4f2d
 8006a34:	5b4d      	.short	0x5b4d
 8006a36:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006a3a:	441c      	add	r4, r3
 8006a3c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006a40:	2b20      	cmp	r3, #32
 8006a42:	bfc3      	ittte	gt
 8006a44:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006a48:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8006a4c:	fa09 f303 	lslgt.w	r3, r9, r3
 8006a50:	f1c3 0320 	rsble	r3, r3, #32
 8006a54:	bfc6      	itte	gt
 8006a56:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006a5a:	4318      	orrgt	r0, r3
 8006a5c:	fa06 f003 	lslle.w	r0, r6, r3
 8006a60:	f7f9 fcc0 	bl	80003e4 <__aeabi_ui2d>
 8006a64:	2301      	movs	r3, #1
 8006a66:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006a6a:	3c01      	subs	r4, #1
 8006a6c:	9313      	str	r3, [sp, #76]	; 0x4c
 8006a6e:	e770      	b.n	8006952 <_dtoa_r+0x112>
 8006a70:	2301      	movs	r3, #1
 8006a72:	e7b3      	b.n	80069dc <_dtoa_r+0x19c>
 8006a74:	900f      	str	r0, [sp, #60]	; 0x3c
 8006a76:	e7b2      	b.n	80069de <_dtoa_r+0x19e>
 8006a78:	9b06      	ldr	r3, [sp, #24]
 8006a7a:	eba3 0309 	sub.w	r3, r3, r9
 8006a7e:	9306      	str	r3, [sp, #24]
 8006a80:	f1c9 0300 	rsb	r3, r9, #0
 8006a84:	930a      	str	r3, [sp, #40]	; 0x28
 8006a86:	2300      	movs	r3, #0
 8006a88:	930e      	str	r3, [sp, #56]	; 0x38
 8006a8a:	e7bf      	b.n	8006a0c <_dtoa_r+0x1cc>
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a90:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	dc59      	bgt.n	8006b4a <_dtoa_r+0x30a>
 8006a96:	f04f 0b01 	mov.w	fp, #1
 8006a9a:	465b      	mov	r3, fp
 8006a9c:	f8cd b008 	str.w	fp, [sp, #8]
 8006aa0:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006aa8:	6042      	str	r2, [r0, #4]
 8006aaa:	2204      	movs	r2, #4
 8006aac:	f102 0614 	add.w	r6, r2, #20
 8006ab0:	429e      	cmp	r6, r3
 8006ab2:	6841      	ldr	r1, [r0, #4]
 8006ab4:	d94f      	bls.n	8006b56 <_dtoa_r+0x316>
 8006ab6:	4628      	mov	r0, r5
 8006ab8:	f001 f850 	bl	8007b5c <_Balloc>
 8006abc:	9008      	str	r0, [sp, #32]
 8006abe:	2800      	cmp	r0, #0
 8006ac0:	d14d      	bne.n	8006b5e <_dtoa_r+0x31e>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006ac8:	4b1d      	ldr	r3, [pc, #116]	; (8006b40 <_dtoa_r+0x300>)
 8006aca:	e6cd      	b.n	8006868 <_dtoa_r+0x28>
 8006acc:	2301      	movs	r3, #1
 8006ace:	e7de      	b.n	8006a8e <_dtoa_r+0x24e>
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ad4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006ad6:	eb09 0b03 	add.w	fp, r9, r3
 8006ada:	f10b 0301 	add.w	r3, fp, #1
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	9302      	str	r3, [sp, #8]
 8006ae2:	bfb8      	it	lt
 8006ae4:	2301      	movlt	r3, #1
 8006ae6:	e7dd      	b.n	8006aa4 <_dtoa_r+0x264>
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e7f2      	b.n	8006ad2 <_dtoa_r+0x292>
 8006aec:	2401      	movs	r4, #1
 8006aee:	2300      	movs	r3, #0
 8006af0:	940b      	str	r4, [sp, #44]	; 0x2c
 8006af2:	9322      	str	r3, [sp, #136]	; 0x88
 8006af4:	f04f 3bff 	mov.w	fp, #4294967295
 8006af8:	2200      	movs	r2, #0
 8006afa:	2312      	movs	r3, #18
 8006afc:	f8cd b008 	str.w	fp, [sp, #8]
 8006b00:	9223      	str	r2, [sp, #140]	; 0x8c
 8006b02:	e7cf      	b.n	8006aa4 <_dtoa_r+0x264>
 8006b04:	f3af 8000 	nop.w
 8006b08:	636f4361 	.word	0x636f4361
 8006b0c:	3fd287a7 	.word	0x3fd287a7
 8006b10:	8b60c8b3 	.word	0x8b60c8b3
 8006b14:	3fc68a28 	.word	0x3fc68a28
 8006b18:	509f79fb 	.word	0x509f79fb
 8006b1c:	3fd34413 	.word	0x3fd34413
 8006b20:	080096ae 	.word	0x080096ae
 8006b24:	080096c5 	.word	0x080096c5
 8006b28:	7ff00000 	.word	0x7ff00000
 8006b2c:	080096aa 	.word	0x080096aa
 8006b30:	080096a1 	.word	0x080096a1
 8006b34:	08009525 	.word	0x08009525
 8006b38:	3ff80000 	.word	0x3ff80000
 8006b3c:	08009840 	.word	0x08009840
 8006b40:	08009724 	.word	0x08009724
 8006b44:	2301      	movs	r3, #1
 8006b46:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b48:	e7d4      	b.n	8006af4 <_dtoa_r+0x2b4>
 8006b4a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8006b4e:	465b      	mov	r3, fp
 8006b50:	f8cd b008 	str.w	fp, [sp, #8]
 8006b54:	e7a6      	b.n	8006aa4 <_dtoa_r+0x264>
 8006b56:	3101      	adds	r1, #1
 8006b58:	6041      	str	r1, [r0, #4]
 8006b5a:	0052      	lsls	r2, r2, #1
 8006b5c:	e7a6      	b.n	8006aac <_dtoa_r+0x26c>
 8006b5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006b60:	9a08      	ldr	r2, [sp, #32]
 8006b62:	601a      	str	r2, [r3, #0]
 8006b64:	9b02      	ldr	r3, [sp, #8]
 8006b66:	2b0e      	cmp	r3, #14
 8006b68:	f200 80a8 	bhi.w	8006cbc <_dtoa_r+0x47c>
 8006b6c:	2c00      	cmp	r4, #0
 8006b6e:	f000 80a5 	beq.w	8006cbc <_dtoa_r+0x47c>
 8006b72:	f1b9 0f00 	cmp.w	r9, #0
 8006b76:	dd34      	ble.n	8006be2 <_dtoa_r+0x3a2>
 8006b78:	4a9a      	ldr	r2, [pc, #616]	; (8006de4 <_dtoa_r+0x5a4>)
 8006b7a:	f009 030f 	and.w	r3, r9, #15
 8006b7e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006b82:	f419 7f80 	tst.w	r9, #256	; 0x100
 8006b86:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006b8a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006b8e:	ea4f 1429 	mov.w	r4, r9, asr #4
 8006b92:	d016      	beq.n	8006bc2 <_dtoa_r+0x382>
 8006b94:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006b98:	4b93      	ldr	r3, [pc, #588]	; (8006de8 <_dtoa_r+0x5a8>)
 8006b9a:	2703      	movs	r7, #3
 8006b9c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006ba0:	f7f9 fdc4 	bl	800072c <__aeabi_ddiv>
 8006ba4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ba8:	f004 040f 	and.w	r4, r4, #15
 8006bac:	4e8e      	ldr	r6, [pc, #568]	; (8006de8 <_dtoa_r+0x5a8>)
 8006bae:	b954      	cbnz	r4, 8006bc6 <_dtoa_r+0x386>
 8006bb0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006bb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006bb8:	f7f9 fdb8 	bl	800072c <__aeabi_ddiv>
 8006bbc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006bc0:	e029      	b.n	8006c16 <_dtoa_r+0x3d6>
 8006bc2:	2702      	movs	r7, #2
 8006bc4:	e7f2      	b.n	8006bac <_dtoa_r+0x36c>
 8006bc6:	07e1      	lsls	r1, r4, #31
 8006bc8:	d508      	bpl.n	8006bdc <_dtoa_r+0x39c>
 8006bca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006bce:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006bd2:	f7f9 fc81 	bl	80004d8 <__aeabi_dmul>
 8006bd6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006bda:	3701      	adds	r7, #1
 8006bdc:	1064      	asrs	r4, r4, #1
 8006bde:	3608      	adds	r6, #8
 8006be0:	e7e5      	b.n	8006bae <_dtoa_r+0x36e>
 8006be2:	f000 80a5 	beq.w	8006d30 <_dtoa_r+0x4f0>
 8006be6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006bea:	f1c9 0400 	rsb	r4, r9, #0
 8006bee:	4b7d      	ldr	r3, [pc, #500]	; (8006de4 <_dtoa_r+0x5a4>)
 8006bf0:	f004 020f 	and.w	r2, r4, #15
 8006bf4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bfc:	f7f9 fc6c 	bl	80004d8 <__aeabi_dmul>
 8006c00:	2702      	movs	r7, #2
 8006c02:	2300      	movs	r3, #0
 8006c04:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c08:	4e77      	ldr	r6, [pc, #476]	; (8006de8 <_dtoa_r+0x5a8>)
 8006c0a:	1124      	asrs	r4, r4, #4
 8006c0c:	2c00      	cmp	r4, #0
 8006c0e:	f040 8084 	bne.w	8006d1a <_dtoa_r+0x4da>
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d1d2      	bne.n	8006bbc <_dtoa_r+0x37c>
 8006c16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	f000 808b 	beq.w	8006d34 <_dtoa_r+0x4f4>
 8006c1e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006c22:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006c26:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	4b6f      	ldr	r3, [pc, #444]	; (8006dec <_dtoa_r+0x5ac>)
 8006c2e:	f7f9 fec5 	bl	80009bc <__aeabi_dcmplt>
 8006c32:	2800      	cmp	r0, #0
 8006c34:	d07e      	beq.n	8006d34 <_dtoa_r+0x4f4>
 8006c36:	9b02      	ldr	r3, [sp, #8]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d07b      	beq.n	8006d34 <_dtoa_r+0x4f4>
 8006c3c:	f1bb 0f00 	cmp.w	fp, #0
 8006c40:	dd38      	ble.n	8006cb4 <_dtoa_r+0x474>
 8006c42:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006c46:	2200      	movs	r2, #0
 8006c48:	4b69      	ldr	r3, [pc, #420]	; (8006df0 <_dtoa_r+0x5b0>)
 8006c4a:	f7f9 fc45 	bl	80004d8 <__aeabi_dmul>
 8006c4e:	465c      	mov	r4, fp
 8006c50:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c54:	f109 38ff 	add.w	r8, r9, #4294967295
 8006c58:	3701      	adds	r7, #1
 8006c5a:	4638      	mov	r0, r7
 8006c5c:	f7f9 fbd2 	bl	8000404 <__aeabi_i2d>
 8006c60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c64:	f7f9 fc38 	bl	80004d8 <__aeabi_dmul>
 8006c68:	2200      	movs	r2, #0
 8006c6a:	4b62      	ldr	r3, [pc, #392]	; (8006df4 <_dtoa_r+0x5b4>)
 8006c6c:	f7f9 fa7e 	bl	800016c <__adddf3>
 8006c70:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006c74:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006c78:	9611      	str	r6, [sp, #68]	; 0x44
 8006c7a:	2c00      	cmp	r4, #0
 8006c7c:	d15d      	bne.n	8006d3a <_dtoa_r+0x4fa>
 8006c7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c82:	2200      	movs	r2, #0
 8006c84:	4b5c      	ldr	r3, [pc, #368]	; (8006df8 <_dtoa_r+0x5b8>)
 8006c86:	f7f9 fa6f 	bl	8000168 <__aeabi_dsub>
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	460b      	mov	r3, r1
 8006c8e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006c92:	4633      	mov	r3, r6
 8006c94:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006c96:	f7f9 feaf 	bl	80009f8 <__aeabi_dcmpgt>
 8006c9a:	2800      	cmp	r0, #0
 8006c9c:	f040 829e 	bne.w	80071dc <_dtoa_r+0x99c>
 8006ca0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ca4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006ca6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006caa:	f7f9 fe87 	bl	80009bc <__aeabi_dcmplt>
 8006cae:	2800      	cmp	r0, #0
 8006cb0:	f040 8292 	bne.w	80071d8 <_dtoa_r+0x998>
 8006cb4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006cb8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006cbc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	f2c0 8153 	blt.w	8006f6a <_dtoa_r+0x72a>
 8006cc4:	f1b9 0f0e 	cmp.w	r9, #14
 8006cc8:	f300 814f 	bgt.w	8006f6a <_dtoa_r+0x72a>
 8006ccc:	4b45      	ldr	r3, [pc, #276]	; (8006de4 <_dtoa_r+0x5a4>)
 8006cce:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8006cd2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006cd6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006cda:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	f280 80db 	bge.w	8006e98 <_dtoa_r+0x658>
 8006ce2:	9b02      	ldr	r3, [sp, #8]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	f300 80d7 	bgt.w	8006e98 <_dtoa_r+0x658>
 8006cea:	f040 8274 	bne.w	80071d6 <_dtoa_r+0x996>
 8006cee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	4b40      	ldr	r3, [pc, #256]	; (8006df8 <_dtoa_r+0x5b8>)
 8006cf6:	f7f9 fbef 	bl	80004d8 <__aeabi_dmul>
 8006cfa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006cfe:	f7f9 fe71 	bl	80009e4 <__aeabi_dcmpge>
 8006d02:	9c02      	ldr	r4, [sp, #8]
 8006d04:	4626      	mov	r6, r4
 8006d06:	2800      	cmp	r0, #0
 8006d08:	f040 824a 	bne.w	80071a0 <_dtoa_r+0x960>
 8006d0c:	2331      	movs	r3, #49	; 0x31
 8006d0e:	9f08      	ldr	r7, [sp, #32]
 8006d10:	f109 0901 	add.w	r9, r9, #1
 8006d14:	f807 3b01 	strb.w	r3, [r7], #1
 8006d18:	e246      	b.n	80071a8 <_dtoa_r+0x968>
 8006d1a:	07e2      	lsls	r2, r4, #31
 8006d1c:	d505      	bpl.n	8006d2a <_dtoa_r+0x4ea>
 8006d1e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006d22:	f7f9 fbd9 	bl	80004d8 <__aeabi_dmul>
 8006d26:	2301      	movs	r3, #1
 8006d28:	3701      	adds	r7, #1
 8006d2a:	1064      	asrs	r4, r4, #1
 8006d2c:	3608      	adds	r6, #8
 8006d2e:	e76d      	b.n	8006c0c <_dtoa_r+0x3cc>
 8006d30:	2702      	movs	r7, #2
 8006d32:	e770      	b.n	8006c16 <_dtoa_r+0x3d6>
 8006d34:	46c8      	mov	r8, r9
 8006d36:	9c02      	ldr	r4, [sp, #8]
 8006d38:	e78f      	b.n	8006c5a <_dtoa_r+0x41a>
 8006d3a:	9908      	ldr	r1, [sp, #32]
 8006d3c:	4b29      	ldr	r3, [pc, #164]	; (8006de4 <_dtoa_r+0x5a4>)
 8006d3e:	4421      	add	r1, r4
 8006d40:	9112      	str	r1, [sp, #72]	; 0x48
 8006d42:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006d44:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006d48:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006d4c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006d50:	2900      	cmp	r1, #0
 8006d52:	d055      	beq.n	8006e00 <_dtoa_r+0x5c0>
 8006d54:	2000      	movs	r0, #0
 8006d56:	4929      	ldr	r1, [pc, #164]	; (8006dfc <_dtoa_r+0x5bc>)
 8006d58:	f7f9 fce8 	bl	800072c <__aeabi_ddiv>
 8006d5c:	463b      	mov	r3, r7
 8006d5e:	4632      	mov	r2, r6
 8006d60:	f7f9 fa02 	bl	8000168 <__aeabi_dsub>
 8006d64:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006d68:	9f08      	ldr	r7, [sp, #32]
 8006d6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d6e:	f7f9 fe63 	bl	8000a38 <__aeabi_d2iz>
 8006d72:	4604      	mov	r4, r0
 8006d74:	f7f9 fb46 	bl	8000404 <__aeabi_i2d>
 8006d78:	4602      	mov	r2, r0
 8006d7a:	460b      	mov	r3, r1
 8006d7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d80:	f7f9 f9f2 	bl	8000168 <__aeabi_dsub>
 8006d84:	4602      	mov	r2, r0
 8006d86:	460b      	mov	r3, r1
 8006d88:	3430      	adds	r4, #48	; 0x30
 8006d8a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006d8e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006d92:	f807 4b01 	strb.w	r4, [r7], #1
 8006d96:	f7f9 fe11 	bl	80009bc <__aeabi_dcmplt>
 8006d9a:	2800      	cmp	r0, #0
 8006d9c:	d174      	bne.n	8006e88 <_dtoa_r+0x648>
 8006d9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006da2:	2000      	movs	r0, #0
 8006da4:	4911      	ldr	r1, [pc, #68]	; (8006dec <_dtoa_r+0x5ac>)
 8006da6:	f7f9 f9df 	bl	8000168 <__aeabi_dsub>
 8006daa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006dae:	f7f9 fe05 	bl	80009bc <__aeabi_dcmplt>
 8006db2:	2800      	cmp	r0, #0
 8006db4:	f040 80b6 	bne.w	8006f24 <_dtoa_r+0x6e4>
 8006db8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006dba:	429f      	cmp	r7, r3
 8006dbc:	f43f af7a 	beq.w	8006cb4 <_dtoa_r+0x474>
 8006dc0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	4b0a      	ldr	r3, [pc, #40]	; (8006df0 <_dtoa_r+0x5b0>)
 8006dc8:	f7f9 fb86 	bl	80004d8 <__aeabi_dmul>
 8006dcc:	2200      	movs	r2, #0
 8006dce:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006dd2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006dd6:	4b06      	ldr	r3, [pc, #24]	; (8006df0 <_dtoa_r+0x5b0>)
 8006dd8:	f7f9 fb7e 	bl	80004d8 <__aeabi_dmul>
 8006ddc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006de0:	e7c3      	b.n	8006d6a <_dtoa_r+0x52a>
 8006de2:	bf00      	nop
 8006de4:	08009840 	.word	0x08009840
 8006de8:	08009818 	.word	0x08009818
 8006dec:	3ff00000 	.word	0x3ff00000
 8006df0:	40240000 	.word	0x40240000
 8006df4:	401c0000 	.word	0x401c0000
 8006df8:	40140000 	.word	0x40140000
 8006dfc:	3fe00000 	.word	0x3fe00000
 8006e00:	4630      	mov	r0, r6
 8006e02:	4639      	mov	r1, r7
 8006e04:	f7f9 fb68 	bl	80004d8 <__aeabi_dmul>
 8006e08:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006e0a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006e0e:	9c08      	ldr	r4, [sp, #32]
 8006e10:	9314      	str	r3, [sp, #80]	; 0x50
 8006e12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e16:	f7f9 fe0f 	bl	8000a38 <__aeabi_d2iz>
 8006e1a:	9015      	str	r0, [sp, #84]	; 0x54
 8006e1c:	f7f9 faf2 	bl	8000404 <__aeabi_i2d>
 8006e20:	4602      	mov	r2, r0
 8006e22:	460b      	mov	r3, r1
 8006e24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e28:	f7f9 f99e 	bl	8000168 <__aeabi_dsub>
 8006e2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006e2e:	4606      	mov	r6, r0
 8006e30:	3330      	adds	r3, #48	; 0x30
 8006e32:	f804 3b01 	strb.w	r3, [r4], #1
 8006e36:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006e38:	460f      	mov	r7, r1
 8006e3a:	429c      	cmp	r4, r3
 8006e3c:	f04f 0200 	mov.w	r2, #0
 8006e40:	d124      	bne.n	8006e8c <_dtoa_r+0x64c>
 8006e42:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006e46:	4bb3      	ldr	r3, [pc, #716]	; (8007114 <_dtoa_r+0x8d4>)
 8006e48:	f7f9 f990 	bl	800016c <__adddf3>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	460b      	mov	r3, r1
 8006e50:	4630      	mov	r0, r6
 8006e52:	4639      	mov	r1, r7
 8006e54:	f7f9 fdd0 	bl	80009f8 <__aeabi_dcmpgt>
 8006e58:	2800      	cmp	r0, #0
 8006e5a:	d162      	bne.n	8006f22 <_dtoa_r+0x6e2>
 8006e5c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006e60:	2000      	movs	r0, #0
 8006e62:	49ac      	ldr	r1, [pc, #688]	; (8007114 <_dtoa_r+0x8d4>)
 8006e64:	f7f9 f980 	bl	8000168 <__aeabi_dsub>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	460b      	mov	r3, r1
 8006e6c:	4630      	mov	r0, r6
 8006e6e:	4639      	mov	r1, r7
 8006e70:	f7f9 fda4 	bl	80009bc <__aeabi_dcmplt>
 8006e74:	2800      	cmp	r0, #0
 8006e76:	f43f af1d 	beq.w	8006cb4 <_dtoa_r+0x474>
 8006e7a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006e7c:	1e7b      	subs	r3, r7, #1
 8006e7e:	9314      	str	r3, [sp, #80]	; 0x50
 8006e80:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006e84:	2b30      	cmp	r3, #48	; 0x30
 8006e86:	d0f8      	beq.n	8006e7a <_dtoa_r+0x63a>
 8006e88:	46c1      	mov	r9, r8
 8006e8a:	e03a      	b.n	8006f02 <_dtoa_r+0x6c2>
 8006e8c:	4ba2      	ldr	r3, [pc, #648]	; (8007118 <_dtoa_r+0x8d8>)
 8006e8e:	f7f9 fb23 	bl	80004d8 <__aeabi_dmul>
 8006e92:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e96:	e7bc      	b.n	8006e12 <_dtoa_r+0x5d2>
 8006e98:	9f08      	ldr	r7, [sp, #32]
 8006e9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006e9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ea2:	f7f9 fc43 	bl	800072c <__aeabi_ddiv>
 8006ea6:	f7f9 fdc7 	bl	8000a38 <__aeabi_d2iz>
 8006eaa:	4604      	mov	r4, r0
 8006eac:	f7f9 faaa 	bl	8000404 <__aeabi_i2d>
 8006eb0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006eb4:	f7f9 fb10 	bl	80004d8 <__aeabi_dmul>
 8006eb8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006ebc:	460b      	mov	r3, r1
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ec4:	f7f9 f950 	bl	8000168 <__aeabi_dsub>
 8006ec8:	f807 6b01 	strb.w	r6, [r7], #1
 8006ecc:	9e08      	ldr	r6, [sp, #32]
 8006ece:	9b02      	ldr	r3, [sp, #8]
 8006ed0:	1bbe      	subs	r6, r7, r6
 8006ed2:	42b3      	cmp	r3, r6
 8006ed4:	d13a      	bne.n	8006f4c <_dtoa_r+0x70c>
 8006ed6:	4602      	mov	r2, r0
 8006ed8:	460b      	mov	r3, r1
 8006eda:	f7f9 f947 	bl	800016c <__adddf3>
 8006ede:	4602      	mov	r2, r0
 8006ee0:	460b      	mov	r3, r1
 8006ee2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006ee6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006eea:	f7f9 fd85 	bl	80009f8 <__aeabi_dcmpgt>
 8006eee:	bb58      	cbnz	r0, 8006f48 <_dtoa_r+0x708>
 8006ef0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006ef4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ef8:	f7f9 fd56 	bl	80009a8 <__aeabi_dcmpeq>
 8006efc:	b108      	cbz	r0, 8006f02 <_dtoa_r+0x6c2>
 8006efe:	07e1      	lsls	r1, r4, #31
 8006f00:	d422      	bmi.n	8006f48 <_dtoa_r+0x708>
 8006f02:	4628      	mov	r0, r5
 8006f04:	4651      	mov	r1, sl
 8006f06:	f000 fe69 	bl	8007bdc <_Bfree>
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	703b      	strb	r3, [r7, #0]
 8006f0e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006f10:	f109 0001 	add.w	r0, r9, #1
 8006f14:	6018      	str	r0, [r3, #0]
 8006f16:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	f43f acdf 	beq.w	80068dc <_dtoa_r+0x9c>
 8006f1e:	601f      	str	r7, [r3, #0]
 8006f20:	e4dc      	b.n	80068dc <_dtoa_r+0x9c>
 8006f22:	4627      	mov	r7, r4
 8006f24:	463b      	mov	r3, r7
 8006f26:	461f      	mov	r7, r3
 8006f28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f2c:	2a39      	cmp	r2, #57	; 0x39
 8006f2e:	d107      	bne.n	8006f40 <_dtoa_r+0x700>
 8006f30:	9a08      	ldr	r2, [sp, #32]
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d1f7      	bne.n	8006f26 <_dtoa_r+0x6e6>
 8006f36:	2230      	movs	r2, #48	; 0x30
 8006f38:	9908      	ldr	r1, [sp, #32]
 8006f3a:	f108 0801 	add.w	r8, r8, #1
 8006f3e:	700a      	strb	r2, [r1, #0]
 8006f40:	781a      	ldrb	r2, [r3, #0]
 8006f42:	3201      	adds	r2, #1
 8006f44:	701a      	strb	r2, [r3, #0]
 8006f46:	e79f      	b.n	8006e88 <_dtoa_r+0x648>
 8006f48:	46c8      	mov	r8, r9
 8006f4a:	e7eb      	b.n	8006f24 <_dtoa_r+0x6e4>
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	4b72      	ldr	r3, [pc, #456]	; (8007118 <_dtoa_r+0x8d8>)
 8006f50:	f7f9 fac2 	bl	80004d8 <__aeabi_dmul>
 8006f54:	4602      	mov	r2, r0
 8006f56:	460b      	mov	r3, r1
 8006f58:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	2300      	movs	r3, #0
 8006f60:	f7f9 fd22 	bl	80009a8 <__aeabi_dcmpeq>
 8006f64:	2800      	cmp	r0, #0
 8006f66:	d098      	beq.n	8006e9a <_dtoa_r+0x65a>
 8006f68:	e7cb      	b.n	8006f02 <_dtoa_r+0x6c2>
 8006f6a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006f6c:	2a00      	cmp	r2, #0
 8006f6e:	f000 80cd 	beq.w	800710c <_dtoa_r+0x8cc>
 8006f72:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006f74:	2a01      	cmp	r2, #1
 8006f76:	f300 80af 	bgt.w	80070d8 <_dtoa_r+0x898>
 8006f7a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006f7c:	2a00      	cmp	r2, #0
 8006f7e:	f000 80a7 	beq.w	80070d0 <_dtoa_r+0x890>
 8006f82:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006f86:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006f88:	9f06      	ldr	r7, [sp, #24]
 8006f8a:	9a06      	ldr	r2, [sp, #24]
 8006f8c:	2101      	movs	r1, #1
 8006f8e:	441a      	add	r2, r3
 8006f90:	9206      	str	r2, [sp, #24]
 8006f92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f94:	4628      	mov	r0, r5
 8006f96:	441a      	add	r2, r3
 8006f98:	9209      	str	r2, [sp, #36]	; 0x24
 8006f9a:	f000 ff23 	bl	8007de4 <__i2b>
 8006f9e:	4606      	mov	r6, r0
 8006fa0:	2f00      	cmp	r7, #0
 8006fa2:	dd0c      	ble.n	8006fbe <_dtoa_r+0x77e>
 8006fa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	dd09      	ble.n	8006fbe <_dtoa_r+0x77e>
 8006faa:	42bb      	cmp	r3, r7
 8006fac:	bfa8      	it	ge
 8006fae:	463b      	movge	r3, r7
 8006fb0:	9a06      	ldr	r2, [sp, #24]
 8006fb2:	1aff      	subs	r7, r7, r3
 8006fb4:	1ad2      	subs	r2, r2, r3
 8006fb6:	9206      	str	r2, [sp, #24]
 8006fb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006fba:	1ad3      	subs	r3, r2, r3
 8006fbc:	9309      	str	r3, [sp, #36]	; 0x24
 8006fbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fc0:	b1f3      	cbz	r3, 8007000 <_dtoa_r+0x7c0>
 8006fc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	f000 80a9 	beq.w	800711c <_dtoa_r+0x8dc>
 8006fca:	2c00      	cmp	r4, #0
 8006fcc:	dd10      	ble.n	8006ff0 <_dtoa_r+0x7b0>
 8006fce:	4631      	mov	r1, r6
 8006fd0:	4622      	mov	r2, r4
 8006fd2:	4628      	mov	r0, r5
 8006fd4:	f000 ffc0 	bl	8007f58 <__pow5mult>
 8006fd8:	4652      	mov	r2, sl
 8006fda:	4601      	mov	r1, r0
 8006fdc:	4606      	mov	r6, r0
 8006fde:	4628      	mov	r0, r5
 8006fe0:	f000 ff16 	bl	8007e10 <__multiply>
 8006fe4:	4680      	mov	r8, r0
 8006fe6:	4651      	mov	r1, sl
 8006fe8:	4628      	mov	r0, r5
 8006fea:	f000 fdf7 	bl	8007bdc <_Bfree>
 8006fee:	46c2      	mov	sl, r8
 8006ff0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ff2:	1b1a      	subs	r2, r3, r4
 8006ff4:	d004      	beq.n	8007000 <_dtoa_r+0x7c0>
 8006ff6:	4651      	mov	r1, sl
 8006ff8:	4628      	mov	r0, r5
 8006ffa:	f000 ffad 	bl	8007f58 <__pow5mult>
 8006ffe:	4682      	mov	sl, r0
 8007000:	2101      	movs	r1, #1
 8007002:	4628      	mov	r0, r5
 8007004:	f000 feee 	bl	8007de4 <__i2b>
 8007008:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800700a:	4604      	mov	r4, r0
 800700c:	2b00      	cmp	r3, #0
 800700e:	f340 8087 	ble.w	8007120 <_dtoa_r+0x8e0>
 8007012:	461a      	mov	r2, r3
 8007014:	4601      	mov	r1, r0
 8007016:	4628      	mov	r0, r5
 8007018:	f000 ff9e 	bl	8007f58 <__pow5mult>
 800701c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800701e:	4604      	mov	r4, r0
 8007020:	2b01      	cmp	r3, #1
 8007022:	f340 8080 	ble.w	8007126 <_dtoa_r+0x8e6>
 8007026:	f04f 0800 	mov.w	r8, #0
 800702a:	6923      	ldr	r3, [r4, #16]
 800702c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007030:	6918      	ldr	r0, [r3, #16]
 8007032:	f000 fe89 	bl	8007d48 <__hi0bits>
 8007036:	f1c0 0020 	rsb	r0, r0, #32
 800703a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800703c:	4418      	add	r0, r3
 800703e:	f010 001f 	ands.w	r0, r0, #31
 8007042:	f000 8092 	beq.w	800716a <_dtoa_r+0x92a>
 8007046:	f1c0 0320 	rsb	r3, r0, #32
 800704a:	2b04      	cmp	r3, #4
 800704c:	f340 808a 	ble.w	8007164 <_dtoa_r+0x924>
 8007050:	f1c0 001c 	rsb	r0, r0, #28
 8007054:	9b06      	ldr	r3, [sp, #24]
 8007056:	4407      	add	r7, r0
 8007058:	4403      	add	r3, r0
 800705a:	9306      	str	r3, [sp, #24]
 800705c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800705e:	4403      	add	r3, r0
 8007060:	9309      	str	r3, [sp, #36]	; 0x24
 8007062:	9b06      	ldr	r3, [sp, #24]
 8007064:	2b00      	cmp	r3, #0
 8007066:	dd05      	ble.n	8007074 <_dtoa_r+0x834>
 8007068:	4651      	mov	r1, sl
 800706a:	461a      	mov	r2, r3
 800706c:	4628      	mov	r0, r5
 800706e:	f000 ffcd 	bl	800800c <__lshift>
 8007072:	4682      	mov	sl, r0
 8007074:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007076:	2b00      	cmp	r3, #0
 8007078:	dd05      	ble.n	8007086 <_dtoa_r+0x846>
 800707a:	4621      	mov	r1, r4
 800707c:	461a      	mov	r2, r3
 800707e:	4628      	mov	r0, r5
 8007080:	f000 ffc4 	bl	800800c <__lshift>
 8007084:	4604      	mov	r4, r0
 8007086:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007088:	2b00      	cmp	r3, #0
 800708a:	d070      	beq.n	800716e <_dtoa_r+0x92e>
 800708c:	4621      	mov	r1, r4
 800708e:	4650      	mov	r0, sl
 8007090:	f001 f828 	bl	80080e4 <__mcmp>
 8007094:	2800      	cmp	r0, #0
 8007096:	da6a      	bge.n	800716e <_dtoa_r+0x92e>
 8007098:	2300      	movs	r3, #0
 800709a:	4651      	mov	r1, sl
 800709c:	220a      	movs	r2, #10
 800709e:	4628      	mov	r0, r5
 80070a0:	f000 fdbe 	bl	8007c20 <__multadd>
 80070a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070a6:	4682      	mov	sl, r0
 80070a8:	f109 39ff 	add.w	r9, r9, #4294967295
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	f000 8193 	beq.w	80073d8 <_dtoa_r+0xb98>
 80070b2:	4631      	mov	r1, r6
 80070b4:	2300      	movs	r3, #0
 80070b6:	220a      	movs	r2, #10
 80070b8:	4628      	mov	r0, r5
 80070ba:	f000 fdb1 	bl	8007c20 <__multadd>
 80070be:	f1bb 0f00 	cmp.w	fp, #0
 80070c2:	4606      	mov	r6, r0
 80070c4:	f300 8093 	bgt.w	80071ee <_dtoa_r+0x9ae>
 80070c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80070ca:	2b02      	cmp	r3, #2
 80070cc:	dc57      	bgt.n	800717e <_dtoa_r+0x93e>
 80070ce:	e08e      	b.n	80071ee <_dtoa_r+0x9ae>
 80070d0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80070d2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80070d6:	e756      	b.n	8006f86 <_dtoa_r+0x746>
 80070d8:	9b02      	ldr	r3, [sp, #8]
 80070da:	1e5c      	subs	r4, r3, #1
 80070dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070de:	42a3      	cmp	r3, r4
 80070e0:	bfb7      	itett	lt
 80070e2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80070e4:	1b1c      	subge	r4, r3, r4
 80070e6:	1ae2      	sublt	r2, r4, r3
 80070e8:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80070ea:	bfbe      	ittt	lt
 80070ec:	940a      	strlt	r4, [sp, #40]	; 0x28
 80070ee:	189b      	addlt	r3, r3, r2
 80070f0:	930e      	strlt	r3, [sp, #56]	; 0x38
 80070f2:	9b02      	ldr	r3, [sp, #8]
 80070f4:	bfb8      	it	lt
 80070f6:	2400      	movlt	r4, #0
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	bfbb      	ittet	lt
 80070fc:	9b06      	ldrlt	r3, [sp, #24]
 80070fe:	9a02      	ldrlt	r2, [sp, #8]
 8007100:	9f06      	ldrge	r7, [sp, #24]
 8007102:	1a9f      	sublt	r7, r3, r2
 8007104:	bfac      	ite	ge
 8007106:	9b02      	ldrge	r3, [sp, #8]
 8007108:	2300      	movlt	r3, #0
 800710a:	e73e      	b.n	8006f8a <_dtoa_r+0x74a>
 800710c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800710e:	9f06      	ldr	r7, [sp, #24]
 8007110:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007112:	e745      	b.n	8006fa0 <_dtoa_r+0x760>
 8007114:	3fe00000 	.word	0x3fe00000
 8007118:	40240000 	.word	0x40240000
 800711c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800711e:	e76a      	b.n	8006ff6 <_dtoa_r+0x7b6>
 8007120:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007122:	2b01      	cmp	r3, #1
 8007124:	dc19      	bgt.n	800715a <_dtoa_r+0x91a>
 8007126:	9b04      	ldr	r3, [sp, #16]
 8007128:	b9bb      	cbnz	r3, 800715a <_dtoa_r+0x91a>
 800712a:	9b05      	ldr	r3, [sp, #20]
 800712c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007130:	b99b      	cbnz	r3, 800715a <_dtoa_r+0x91a>
 8007132:	9b05      	ldr	r3, [sp, #20]
 8007134:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007138:	0d1b      	lsrs	r3, r3, #20
 800713a:	051b      	lsls	r3, r3, #20
 800713c:	b183      	cbz	r3, 8007160 <_dtoa_r+0x920>
 800713e:	f04f 0801 	mov.w	r8, #1
 8007142:	9b06      	ldr	r3, [sp, #24]
 8007144:	3301      	adds	r3, #1
 8007146:	9306      	str	r3, [sp, #24]
 8007148:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800714a:	3301      	adds	r3, #1
 800714c:	9309      	str	r3, [sp, #36]	; 0x24
 800714e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007150:	2b00      	cmp	r3, #0
 8007152:	f47f af6a 	bne.w	800702a <_dtoa_r+0x7ea>
 8007156:	2001      	movs	r0, #1
 8007158:	e76f      	b.n	800703a <_dtoa_r+0x7fa>
 800715a:	f04f 0800 	mov.w	r8, #0
 800715e:	e7f6      	b.n	800714e <_dtoa_r+0x90e>
 8007160:	4698      	mov	r8, r3
 8007162:	e7f4      	b.n	800714e <_dtoa_r+0x90e>
 8007164:	f43f af7d 	beq.w	8007062 <_dtoa_r+0x822>
 8007168:	4618      	mov	r0, r3
 800716a:	301c      	adds	r0, #28
 800716c:	e772      	b.n	8007054 <_dtoa_r+0x814>
 800716e:	9b02      	ldr	r3, [sp, #8]
 8007170:	2b00      	cmp	r3, #0
 8007172:	dc36      	bgt.n	80071e2 <_dtoa_r+0x9a2>
 8007174:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007176:	2b02      	cmp	r3, #2
 8007178:	dd33      	ble.n	80071e2 <_dtoa_r+0x9a2>
 800717a:	f8dd b008 	ldr.w	fp, [sp, #8]
 800717e:	f1bb 0f00 	cmp.w	fp, #0
 8007182:	d10d      	bne.n	80071a0 <_dtoa_r+0x960>
 8007184:	4621      	mov	r1, r4
 8007186:	465b      	mov	r3, fp
 8007188:	2205      	movs	r2, #5
 800718a:	4628      	mov	r0, r5
 800718c:	f000 fd48 	bl	8007c20 <__multadd>
 8007190:	4601      	mov	r1, r0
 8007192:	4604      	mov	r4, r0
 8007194:	4650      	mov	r0, sl
 8007196:	f000 ffa5 	bl	80080e4 <__mcmp>
 800719a:	2800      	cmp	r0, #0
 800719c:	f73f adb6 	bgt.w	8006d0c <_dtoa_r+0x4cc>
 80071a0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80071a2:	9f08      	ldr	r7, [sp, #32]
 80071a4:	ea6f 0903 	mvn.w	r9, r3
 80071a8:	f04f 0800 	mov.w	r8, #0
 80071ac:	4621      	mov	r1, r4
 80071ae:	4628      	mov	r0, r5
 80071b0:	f000 fd14 	bl	8007bdc <_Bfree>
 80071b4:	2e00      	cmp	r6, #0
 80071b6:	f43f aea4 	beq.w	8006f02 <_dtoa_r+0x6c2>
 80071ba:	f1b8 0f00 	cmp.w	r8, #0
 80071be:	d005      	beq.n	80071cc <_dtoa_r+0x98c>
 80071c0:	45b0      	cmp	r8, r6
 80071c2:	d003      	beq.n	80071cc <_dtoa_r+0x98c>
 80071c4:	4641      	mov	r1, r8
 80071c6:	4628      	mov	r0, r5
 80071c8:	f000 fd08 	bl	8007bdc <_Bfree>
 80071cc:	4631      	mov	r1, r6
 80071ce:	4628      	mov	r0, r5
 80071d0:	f000 fd04 	bl	8007bdc <_Bfree>
 80071d4:	e695      	b.n	8006f02 <_dtoa_r+0x6c2>
 80071d6:	2400      	movs	r4, #0
 80071d8:	4626      	mov	r6, r4
 80071da:	e7e1      	b.n	80071a0 <_dtoa_r+0x960>
 80071dc:	46c1      	mov	r9, r8
 80071de:	4626      	mov	r6, r4
 80071e0:	e594      	b.n	8006d0c <_dtoa_r+0x4cc>
 80071e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071e4:	f8dd b008 	ldr.w	fp, [sp, #8]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	f000 80fc 	beq.w	80073e6 <_dtoa_r+0xba6>
 80071ee:	2f00      	cmp	r7, #0
 80071f0:	dd05      	ble.n	80071fe <_dtoa_r+0x9be>
 80071f2:	4631      	mov	r1, r6
 80071f4:	463a      	mov	r2, r7
 80071f6:	4628      	mov	r0, r5
 80071f8:	f000 ff08 	bl	800800c <__lshift>
 80071fc:	4606      	mov	r6, r0
 80071fe:	f1b8 0f00 	cmp.w	r8, #0
 8007202:	d05c      	beq.n	80072be <_dtoa_r+0xa7e>
 8007204:	4628      	mov	r0, r5
 8007206:	6871      	ldr	r1, [r6, #4]
 8007208:	f000 fca8 	bl	8007b5c <_Balloc>
 800720c:	4607      	mov	r7, r0
 800720e:	b928      	cbnz	r0, 800721c <_dtoa_r+0x9dc>
 8007210:	4602      	mov	r2, r0
 8007212:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007216:	4b7e      	ldr	r3, [pc, #504]	; (8007410 <_dtoa_r+0xbd0>)
 8007218:	f7ff bb26 	b.w	8006868 <_dtoa_r+0x28>
 800721c:	6932      	ldr	r2, [r6, #16]
 800721e:	f106 010c 	add.w	r1, r6, #12
 8007222:	3202      	adds	r2, #2
 8007224:	0092      	lsls	r2, r2, #2
 8007226:	300c      	adds	r0, #12
 8007228:	f000 fc8a 	bl	8007b40 <memcpy>
 800722c:	2201      	movs	r2, #1
 800722e:	4639      	mov	r1, r7
 8007230:	4628      	mov	r0, r5
 8007232:	f000 feeb 	bl	800800c <__lshift>
 8007236:	46b0      	mov	r8, r6
 8007238:	4606      	mov	r6, r0
 800723a:	9b08      	ldr	r3, [sp, #32]
 800723c:	3301      	adds	r3, #1
 800723e:	9302      	str	r3, [sp, #8]
 8007240:	9b08      	ldr	r3, [sp, #32]
 8007242:	445b      	add	r3, fp
 8007244:	930a      	str	r3, [sp, #40]	; 0x28
 8007246:	9b04      	ldr	r3, [sp, #16]
 8007248:	f003 0301 	and.w	r3, r3, #1
 800724c:	9309      	str	r3, [sp, #36]	; 0x24
 800724e:	9b02      	ldr	r3, [sp, #8]
 8007250:	4621      	mov	r1, r4
 8007252:	4650      	mov	r0, sl
 8007254:	f103 3bff 	add.w	fp, r3, #4294967295
 8007258:	f7ff fa64 	bl	8006724 <quorem>
 800725c:	4603      	mov	r3, r0
 800725e:	4641      	mov	r1, r8
 8007260:	3330      	adds	r3, #48	; 0x30
 8007262:	9004      	str	r0, [sp, #16]
 8007264:	4650      	mov	r0, sl
 8007266:	930b      	str	r3, [sp, #44]	; 0x2c
 8007268:	f000 ff3c 	bl	80080e4 <__mcmp>
 800726c:	4632      	mov	r2, r6
 800726e:	9006      	str	r0, [sp, #24]
 8007270:	4621      	mov	r1, r4
 8007272:	4628      	mov	r0, r5
 8007274:	f000 ff52 	bl	800811c <__mdiff>
 8007278:	68c2      	ldr	r2, [r0, #12]
 800727a:	4607      	mov	r7, r0
 800727c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800727e:	bb02      	cbnz	r2, 80072c2 <_dtoa_r+0xa82>
 8007280:	4601      	mov	r1, r0
 8007282:	4650      	mov	r0, sl
 8007284:	f000 ff2e 	bl	80080e4 <__mcmp>
 8007288:	4602      	mov	r2, r0
 800728a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800728c:	4639      	mov	r1, r7
 800728e:	4628      	mov	r0, r5
 8007290:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8007294:	f000 fca2 	bl	8007bdc <_Bfree>
 8007298:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800729a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800729c:	9f02      	ldr	r7, [sp, #8]
 800729e:	ea43 0102 	orr.w	r1, r3, r2
 80072a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072a4:	430b      	orrs	r3, r1
 80072a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072a8:	d10d      	bne.n	80072c6 <_dtoa_r+0xa86>
 80072aa:	2b39      	cmp	r3, #57	; 0x39
 80072ac:	d027      	beq.n	80072fe <_dtoa_r+0xabe>
 80072ae:	9a06      	ldr	r2, [sp, #24]
 80072b0:	2a00      	cmp	r2, #0
 80072b2:	dd01      	ble.n	80072b8 <_dtoa_r+0xa78>
 80072b4:	9b04      	ldr	r3, [sp, #16]
 80072b6:	3331      	adds	r3, #49	; 0x31
 80072b8:	f88b 3000 	strb.w	r3, [fp]
 80072bc:	e776      	b.n	80071ac <_dtoa_r+0x96c>
 80072be:	4630      	mov	r0, r6
 80072c0:	e7b9      	b.n	8007236 <_dtoa_r+0x9f6>
 80072c2:	2201      	movs	r2, #1
 80072c4:	e7e2      	b.n	800728c <_dtoa_r+0xa4c>
 80072c6:	9906      	ldr	r1, [sp, #24]
 80072c8:	2900      	cmp	r1, #0
 80072ca:	db04      	blt.n	80072d6 <_dtoa_r+0xa96>
 80072cc:	9822      	ldr	r0, [sp, #136]	; 0x88
 80072ce:	4301      	orrs	r1, r0
 80072d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80072d2:	4301      	orrs	r1, r0
 80072d4:	d120      	bne.n	8007318 <_dtoa_r+0xad8>
 80072d6:	2a00      	cmp	r2, #0
 80072d8:	ddee      	ble.n	80072b8 <_dtoa_r+0xa78>
 80072da:	4651      	mov	r1, sl
 80072dc:	2201      	movs	r2, #1
 80072de:	4628      	mov	r0, r5
 80072e0:	9302      	str	r3, [sp, #8]
 80072e2:	f000 fe93 	bl	800800c <__lshift>
 80072e6:	4621      	mov	r1, r4
 80072e8:	4682      	mov	sl, r0
 80072ea:	f000 fefb 	bl	80080e4 <__mcmp>
 80072ee:	2800      	cmp	r0, #0
 80072f0:	9b02      	ldr	r3, [sp, #8]
 80072f2:	dc02      	bgt.n	80072fa <_dtoa_r+0xaba>
 80072f4:	d1e0      	bne.n	80072b8 <_dtoa_r+0xa78>
 80072f6:	07da      	lsls	r2, r3, #31
 80072f8:	d5de      	bpl.n	80072b8 <_dtoa_r+0xa78>
 80072fa:	2b39      	cmp	r3, #57	; 0x39
 80072fc:	d1da      	bne.n	80072b4 <_dtoa_r+0xa74>
 80072fe:	2339      	movs	r3, #57	; 0x39
 8007300:	f88b 3000 	strb.w	r3, [fp]
 8007304:	463b      	mov	r3, r7
 8007306:	461f      	mov	r7, r3
 8007308:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800730c:	3b01      	subs	r3, #1
 800730e:	2a39      	cmp	r2, #57	; 0x39
 8007310:	d050      	beq.n	80073b4 <_dtoa_r+0xb74>
 8007312:	3201      	adds	r2, #1
 8007314:	701a      	strb	r2, [r3, #0]
 8007316:	e749      	b.n	80071ac <_dtoa_r+0x96c>
 8007318:	2a00      	cmp	r2, #0
 800731a:	dd03      	ble.n	8007324 <_dtoa_r+0xae4>
 800731c:	2b39      	cmp	r3, #57	; 0x39
 800731e:	d0ee      	beq.n	80072fe <_dtoa_r+0xabe>
 8007320:	3301      	adds	r3, #1
 8007322:	e7c9      	b.n	80072b8 <_dtoa_r+0xa78>
 8007324:	9a02      	ldr	r2, [sp, #8]
 8007326:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007328:	f802 3c01 	strb.w	r3, [r2, #-1]
 800732c:	428a      	cmp	r2, r1
 800732e:	d02a      	beq.n	8007386 <_dtoa_r+0xb46>
 8007330:	4651      	mov	r1, sl
 8007332:	2300      	movs	r3, #0
 8007334:	220a      	movs	r2, #10
 8007336:	4628      	mov	r0, r5
 8007338:	f000 fc72 	bl	8007c20 <__multadd>
 800733c:	45b0      	cmp	r8, r6
 800733e:	4682      	mov	sl, r0
 8007340:	f04f 0300 	mov.w	r3, #0
 8007344:	f04f 020a 	mov.w	r2, #10
 8007348:	4641      	mov	r1, r8
 800734a:	4628      	mov	r0, r5
 800734c:	d107      	bne.n	800735e <_dtoa_r+0xb1e>
 800734e:	f000 fc67 	bl	8007c20 <__multadd>
 8007352:	4680      	mov	r8, r0
 8007354:	4606      	mov	r6, r0
 8007356:	9b02      	ldr	r3, [sp, #8]
 8007358:	3301      	adds	r3, #1
 800735a:	9302      	str	r3, [sp, #8]
 800735c:	e777      	b.n	800724e <_dtoa_r+0xa0e>
 800735e:	f000 fc5f 	bl	8007c20 <__multadd>
 8007362:	4631      	mov	r1, r6
 8007364:	4680      	mov	r8, r0
 8007366:	2300      	movs	r3, #0
 8007368:	220a      	movs	r2, #10
 800736a:	4628      	mov	r0, r5
 800736c:	f000 fc58 	bl	8007c20 <__multadd>
 8007370:	4606      	mov	r6, r0
 8007372:	e7f0      	b.n	8007356 <_dtoa_r+0xb16>
 8007374:	f1bb 0f00 	cmp.w	fp, #0
 8007378:	bfcc      	ite	gt
 800737a:	465f      	movgt	r7, fp
 800737c:	2701      	movle	r7, #1
 800737e:	f04f 0800 	mov.w	r8, #0
 8007382:	9a08      	ldr	r2, [sp, #32]
 8007384:	4417      	add	r7, r2
 8007386:	4651      	mov	r1, sl
 8007388:	2201      	movs	r2, #1
 800738a:	4628      	mov	r0, r5
 800738c:	9302      	str	r3, [sp, #8]
 800738e:	f000 fe3d 	bl	800800c <__lshift>
 8007392:	4621      	mov	r1, r4
 8007394:	4682      	mov	sl, r0
 8007396:	f000 fea5 	bl	80080e4 <__mcmp>
 800739a:	2800      	cmp	r0, #0
 800739c:	dcb2      	bgt.n	8007304 <_dtoa_r+0xac4>
 800739e:	d102      	bne.n	80073a6 <_dtoa_r+0xb66>
 80073a0:	9b02      	ldr	r3, [sp, #8]
 80073a2:	07db      	lsls	r3, r3, #31
 80073a4:	d4ae      	bmi.n	8007304 <_dtoa_r+0xac4>
 80073a6:	463b      	mov	r3, r7
 80073a8:	461f      	mov	r7, r3
 80073aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80073ae:	2a30      	cmp	r2, #48	; 0x30
 80073b0:	d0fa      	beq.n	80073a8 <_dtoa_r+0xb68>
 80073b2:	e6fb      	b.n	80071ac <_dtoa_r+0x96c>
 80073b4:	9a08      	ldr	r2, [sp, #32]
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d1a5      	bne.n	8007306 <_dtoa_r+0xac6>
 80073ba:	2331      	movs	r3, #49	; 0x31
 80073bc:	f109 0901 	add.w	r9, r9, #1
 80073c0:	7013      	strb	r3, [r2, #0]
 80073c2:	e6f3      	b.n	80071ac <_dtoa_r+0x96c>
 80073c4:	4b13      	ldr	r3, [pc, #76]	; (8007414 <_dtoa_r+0xbd4>)
 80073c6:	f7ff baa7 	b.w	8006918 <_dtoa_r+0xd8>
 80073ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	f47f aa80 	bne.w	80068d2 <_dtoa_r+0x92>
 80073d2:	4b11      	ldr	r3, [pc, #68]	; (8007418 <_dtoa_r+0xbd8>)
 80073d4:	f7ff baa0 	b.w	8006918 <_dtoa_r+0xd8>
 80073d8:	f1bb 0f00 	cmp.w	fp, #0
 80073dc:	dc03      	bgt.n	80073e6 <_dtoa_r+0xba6>
 80073de:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80073e0:	2b02      	cmp	r3, #2
 80073e2:	f73f aecc 	bgt.w	800717e <_dtoa_r+0x93e>
 80073e6:	9f08      	ldr	r7, [sp, #32]
 80073e8:	4621      	mov	r1, r4
 80073ea:	4650      	mov	r0, sl
 80073ec:	f7ff f99a 	bl	8006724 <quorem>
 80073f0:	9a08      	ldr	r2, [sp, #32]
 80073f2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80073f6:	f807 3b01 	strb.w	r3, [r7], #1
 80073fa:	1aba      	subs	r2, r7, r2
 80073fc:	4593      	cmp	fp, r2
 80073fe:	ddb9      	ble.n	8007374 <_dtoa_r+0xb34>
 8007400:	4651      	mov	r1, sl
 8007402:	2300      	movs	r3, #0
 8007404:	220a      	movs	r2, #10
 8007406:	4628      	mov	r0, r5
 8007408:	f000 fc0a 	bl	8007c20 <__multadd>
 800740c:	4682      	mov	sl, r0
 800740e:	e7eb      	b.n	80073e8 <_dtoa_r+0xba8>
 8007410:	08009724 	.word	0x08009724
 8007414:	08009524 	.word	0x08009524
 8007418:	080096a1 	.word	0x080096a1

0800741c <rshift>:
 800741c:	6903      	ldr	r3, [r0, #16]
 800741e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007422:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007426:	f100 0414 	add.w	r4, r0, #20
 800742a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800742e:	dd46      	ble.n	80074be <rshift+0xa2>
 8007430:	f011 011f 	ands.w	r1, r1, #31
 8007434:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007438:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800743c:	d10c      	bne.n	8007458 <rshift+0x3c>
 800743e:	4629      	mov	r1, r5
 8007440:	f100 0710 	add.w	r7, r0, #16
 8007444:	42b1      	cmp	r1, r6
 8007446:	d335      	bcc.n	80074b4 <rshift+0x98>
 8007448:	1a9b      	subs	r3, r3, r2
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	1eea      	subs	r2, r5, #3
 800744e:	4296      	cmp	r6, r2
 8007450:	bf38      	it	cc
 8007452:	2300      	movcc	r3, #0
 8007454:	4423      	add	r3, r4
 8007456:	e015      	b.n	8007484 <rshift+0x68>
 8007458:	46a1      	mov	r9, r4
 800745a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800745e:	f1c1 0820 	rsb	r8, r1, #32
 8007462:	40cf      	lsrs	r7, r1
 8007464:	f105 0e04 	add.w	lr, r5, #4
 8007468:	4576      	cmp	r6, lr
 800746a:	46f4      	mov	ip, lr
 800746c:	d816      	bhi.n	800749c <rshift+0x80>
 800746e:	1a9b      	subs	r3, r3, r2
 8007470:	009a      	lsls	r2, r3, #2
 8007472:	3a04      	subs	r2, #4
 8007474:	3501      	adds	r5, #1
 8007476:	42ae      	cmp	r6, r5
 8007478:	bf38      	it	cc
 800747a:	2200      	movcc	r2, #0
 800747c:	18a3      	adds	r3, r4, r2
 800747e:	50a7      	str	r7, [r4, r2]
 8007480:	b107      	cbz	r7, 8007484 <rshift+0x68>
 8007482:	3304      	adds	r3, #4
 8007484:	42a3      	cmp	r3, r4
 8007486:	eba3 0204 	sub.w	r2, r3, r4
 800748a:	bf08      	it	eq
 800748c:	2300      	moveq	r3, #0
 800748e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007492:	6102      	str	r2, [r0, #16]
 8007494:	bf08      	it	eq
 8007496:	6143      	streq	r3, [r0, #20]
 8007498:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800749c:	f8dc c000 	ldr.w	ip, [ip]
 80074a0:	fa0c fc08 	lsl.w	ip, ip, r8
 80074a4:	ea4c 0707 	orr.w	r7, ip, r7
 80074a8:	f849 7b04 	str.w	r7, [r9], #4
 80074ac:	f85e 7b04 	ldr.w	r7, [lr], #4
 80074b0:	40cf      	lsrs	r7, r1
 80074b2:	e7d9      	b.n	8007468 <rshift+0x4c>
 80074b4:	f851 cb04 	ldr.w	ip, [r1], #4
 80074b8:	f847 cf04 	str.w	ip, [r7, #4]!
 80074bc:	e7c2      	b.n	8007444 <rshift+0x28>
 80074be:	4623      	mov	r3, r4
 80074c0:	e7e0      	b.n	8007484 <rshift+0x68>

080074c2 <__hexdig_fun>:
 80074c2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80074c6:	2b09      	cmp	r3, #9
 80074c8:	d802      	bhi.n	80074d0 <__hexdig_fun+0xe>
 80074ca:	3820      	subs	r0, #32
 80074cc:	b2c0      	uxtb	r0, r0
 80074ce:	4770      	bx	lr
 80074d0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80074d4:	2b05      	cmp	r3, #5
 80074d6:	d801      	bhi.n	80074dc <__hexdig_fun+0x1a>
 80074d8:	3847      	subs	r0, #71	; 0x47
 80074da:	e7f7      	b.n	80074cc <__hexdig_fun+0xa>
 80074dc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80074e0:	2b05      	cmp	r3, #5
 80074e2:	d801      	bhi.n	80074e8 <__hexdig_fun+0x26>
 80074e4:	3827      	subs	r0, #39	; 0x27
 80074e6:	e7f1      	b.n	80074cc <__hexdig_fun+0xa>
 80074e8:	2000      	movs	r0, #0
 80074ea:	4770      	bx	lr

080074ec <__gethex>:
 80074ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074f0:	b08b      	sub	sp, #44	; 0x2c
 80074f2:	9306      	str	r3, [sp, #24]
 80074f4:	4bb9      	ldr	r3, [pc, #740]	; (80077dc <__gethex+0x2f0>)
 80074f6:	9002      	str	r0, [sp, #8]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	468b      	mov	fp, r1
 80074fc:	4618      	mov	r0, r3
 80074fe:	4690      	mov	r8, r2
 8007500:	9303      	str	r3, [sp, #12]
 8007502:	f7f8 fe25 	bl	8000150 <strlen>
 8007506:	4682      	mov	sl, r0
 8007508:	9b03      	ldr	r3, [sp, #12]
 800750a:	f8db 2000 	ldr.w	r2, [fp]
 800750e:	4403      	add	r3, r0
 8007510:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007514:	9307      	str	r3, [sp, #28]
 8007516:	1c93      	adds	r3, r2, #2
 8007518:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800751c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007520:	32fe      	adds	r2, #254	; 0xfe
 8007522:	18d1      	adds	r1, r2, r3
 8007524:	461f      	mov	r7, r3
 8007526:	f813 0b01 	ldrb.w	r0, [r3], #1
 800752a:	9101      	str	r1, [sp, #4]
 800752c:	2830      	cmp	r0, #48	; 0x30
 800752e:	d0f8      	beq.n	8007522 <__gethex+0x36>
 8007530:	f7ff ffc7 	bl	80074c2 <__hexdig_fun>
 8007534:	4604      	mov	r4, r0
 8007536:	2800      	cmp	r0, #0
 8007538:	d13a      	bne.n	80075b0 <__gethex+0xc4>
 800753a:	4652      	mov	r2, sl
 800753c:	4638      	mov	r0, r7
 800753e:	9903      	ldr	r1, [sp, #12]
 8007540:	f001 f9ea 	bl	8008918 <strncmp>
 8007544:	4605      	mov	r5, r0
 8007546:	2800      	cmp	r0, #0
 8007548:	d166      	bne.n	8007618 <__gethex+0x12c>
 800754a:	f817 000a 	ldrb.w	r0, [r7, sl]
 800754e:	eb07 060a 	add.w	r6, r7, sl
 8007552:	f7ff ffb6 	bl	80074c2 <__hexdig_fun>
 8007556:	2800      	cmp	r0, #0
 8007558:	d060      	beq.n	800761c <__gethex+0x130>
 800755a:	4633      	mov	r3, r6
 800755c:	7818      	ldrb	r0, [r3, #0]
 800755e:	461f      	mov	r7, r3
 8007560:	2830      	cmp	r0, #48	; 0x30
 8007562:	f103 0301 	add.w	r3, r3, #1
 8007566:	d0f9      	beq.n	800755c <__gethex+0x70>
 8007568:	f7ff ffab 	bl	80074c2 <__hexdig_fun>
 800756c:	2301      	movs	r3, #1
 800756e:	fab0 f480 	clz	r4, r0
 8007572:	4635      	mov	r5, r6
 8007574:	0964      	lsrs	r4, r4, #5
 8007576:	9301      	str	r3, [sp, #4]
 8007578:	463a      	mov	r2, r7
 800757a:	4616      	mov	r6, r2
 800757c:	7830      	ldrb	r0, [r6, #0]
 800757e:	3201      	adds	r2, #1
 8007580:	f7ff ff9f 	bl	80074c2 <__hexdig_fun>
 8007584:	2800      	cmp	r0, #0
 8007586:	d1f8      	bne.n	800757a <__gethex+0x8e>
 8007588:	4652      	mov	r2, sl
 800758a:	4630      	mov	r0, r6
 800758c:	9903      	ldr	r1, [sp, #12]
 800758e:	f001 f9c3 	bl	8008918 <strncmp>
 8007592:	b980      	cbnz	r0, 80075b6 <__gethex+0xca>
 8007594:	b94d      	cbnz	r5, 80075aa <__gethex+0xbe>
 8007596:	eb06 050a 	add.w	r5, r6, sl
 800759a:	462a      	mov	r2, r5
 800759c:	4616      	mov	r6, r2
 800759e:	7830      	ldrb	r0, [r6, #0]
 80075a0:	3201      	adds	r2, #1
 80075a2:	f7ff ff8e 	bl	80074c2 <__hexdig_fun>
 80075a6:	2800      	cmp	r0, #0
 80075a8:	d1f8      	bne.n	800759c <__gethex+0xb0>
 80075aa:	1bad      	subs	r5, r5, r6
 80075ac:	00ad      	lsls	r5, r5, #2
 80075ae:	e004      	b.n	80075ba <__gethex+0xce>
 80075b0:	2400      	movs	r4, #0
 80075b2:	4625      	mov	r5, r4
 80075b4:	e7e0      	b.n	8007578 <__gethex+0x8c>
 80075b6:	2d00      	cmp	r5, #0
 80075b8:	d1f7      	bne.n	80075aa <__gethex+0xbe>
 80075ba:	7833      	ldrb	r3, [r6, #0]
 80075bc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80075c0:	2b50      	cmp	r3, #80	; 0x50
 80075c2:	d139      	bne.n	8007638 <__gethex+0x14c>
 80075c4:	7873      	ldrb	r3, [r6, #1]
 80075c6:	2b2b      	cmp	r3, #43	; 0x2b
 80075c8:	d02a      	beq.n	8007620 <__gethex+0x134>
 80075ca:	2b2d      	cmp	r3, #45	; 0x2d
 80075cc:	d02c      	beq.n	8007628 <__gethex+0x13c>
 80075ce:	f04f 0900 	mov.w	r9, #0
 80075d2:	1c71      	adds	r1, r6, #1
 80075d4:	7808      	ldrb	r0, [r1, #0]
 80075d6:	f7ff ff74 	bl	80074c2 <__hexdig_fun>
 80075da:	1e43      	subs	r3, r0, #1
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	2b18      	cmp	r3, #24
 80075e0:	d82a      	bhi.n	8007638 <__gethex+0x14c>
 80075e2:	f1a0 0210 	sub.w	r2, r0, #16
 80075e6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80075ea:	f7ff ff6a 	bl	80074c2 <__hexdig_fun>
 80075ee:	1e43      	subs	r3, r0, #1
 80075f0:	b2db      	uxtb	r3, r3
 80075f2:	2b18      	cmp	r3, #24
 80075f4:	d91b      	bls.n	800762e <__gethex+0x142>
 80075f6:	f1b9 0f00 	cmp.w	r9, #0
 80075fa:	d000      	beq.n	80075fe <__gethex+0x112>
 80075fc:	4252      	negs	r2, r2
 80075fe:	4415      	add	r5, r2
 8007600:	f8cb 1000 	str.w	r1, [fp]
 8007604:	b1d4      	cbz	r4, 800763c <__gethex+0x150>
 8007606:	9b01      	ldr	r3, [sp, #4]
 8007608:	2b00      	cmp	r3, #0
 800760a:	bf14      	ite	ne
 800760c:	2700      	movne	r7, #0
 800760e:	2706      	moveq	r7, #6
 8007610:	4638      	mov	r0, r7
 8007612:	b00b      	add	sp, #44	; 0x2c
 8007614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007618:	463e      	mov	r6, r7
 800761a:	4625      	mov	r5, r4
 800761c:	2401      	movs	r4, #1
 800761e:	e7cc      	b.n	80075ba <__gethex+0xce>
 8007620:	f04f 0900 	mov.w	r9, #0
 8007624:	1cb1      	adds	r1, r6, #2
 8007626:	e7d5      	b.n	80075d4 <__gethex+0xe8>
 8007628:	f04f 0901 	mov.w	r9, #1
 800762c:	e7fa      	b.n	8007624 <__gethex+0x138>
 800762e:	230a      	movs	r3, #10
 8007630:	fb03 0202 	mla	r2, r3, r2, r0
 8007634:	3a10      	subs	r2, #16
 8007636:	e7d6      	b.n	80075e6 <__gethex+0xfa>
 8007638:	4631      	mov	r1, r6
 800763a:	e7e1      	b.n	8007600 <__gethex+0x114>
 800763c:	4621      	mov	r1, r4
 800763e:	1bf3      	subs	r3, r6, r7
 8007640:	3b01      	subs	r3, #1
 8007642:	2b07      	cmp	r3, #7
 8007644:	dc0a      	bgt.n	800765c <__gethex+0x170>
 8007646:	9802      	ldr	r0, [sp, #8]
 8007648:	f000 fa88 	bl	8007b5c <_Balloc>
 800764c:	4604      	mov	r4, r0
 800764e:	b940      	cbnz	r0, 8007662 <__gethex+0x176>
 8007650:	4602      	mov	r2, r0
 8007652:	21de      	movs	r1, #222	; 0xde
 8007654:	4b62      	ldr	r3, [pc, #392]	; (80077e0 <__gethex+0x2f4>)
 8007656:	4863      	ldr	r0, [pc, #396]	; (80077e4 <__gethex+0x2f8>)
 8007658:	f001 f97e 	bl	8008958 <__assert_func>
 800765c:	3101      	adds	r1, #1
 800765e:	105b      	asrs	r3, r3, #1
 8007660:	e7ef      	b.n	8007642 <__gethex+0x156>
 8007662:	f04f 0b00 	mov.w	fp, #0
 8007666:	f100 0914 	add.w	r9, r0, #20
 800766a:	f1ca 0301 	rsb	r3, sl, #1
 800766e:	f8cd 9010 	str.w	r9, [sp, #16]
 8007672:	f8cd b004 	str.w	fp, [sp, #4]
 8007676:	9308      	str	r3, [sp, #32]
 8007678:	42b7      	cmp	r7, r6
 800767a:	d33f      	bcc.n	80076fc <__gethex+0x210>
 800767c:	9f04      	ldr	r7, [sp, #16]
 800767e:	9b01      	ldr	r3, [sp, #4]
 8007680:	f847 3b04 	str.w	r3, [r7], #4
 8007684:	eba7 0709 	sub.w	r7, r7, r9
 8007688:	10bf      	asrs	r7, r7, #2
 800768a:	6127      	str	r7, [r4, #16]
 800768c:	4618      	mov	r0, r3
 800768e:	f000 fb5b 	bl	8007d48 <__hi0bits>
 8007692:	017f      	lsls	r7, r7, #5
 8007694:	f8d8 6000 	ldr.w	r6, [r8]
 8007698:	1a3f      	subs	r7, r7, r0
 800769a:	42b7      	cmp	r7, r6
 800769c:	dd62      	ble.n	8007764 <__gethex+0x278>
 800769e:	1bbf      	subs	r7, r7, r6
 80076a0:	4639      	mov	r1, r7
 80076a2:	4620      	mov	r0, r4
 80076a4:	f000 fef1 	bl	800848a <__any_on>
 80076a8:	4682      	mov	sl, r0
 80076aa:	b1a8      	cbz	r0, 80076d8 <__gethex+0x1ec>
 80076ac:	f04f 0a01 	mov.w	sl, #1
 80076b0:	1e7b      	subs	r3, r7, #1
 80076b2:	1159      	asrs	r1, r3, #5
 80076b4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80076b8:	f003 021f 	and.w	r2, r3, #31
 80076bc:	fa0a f202 	lsl.w	r2, sl, r2
 80076c0:	420a      	tst	r2, r1
 80076c2:	d009      	beq.n	80076d8 <__gethex+0x1ec>
 80076c4:	4553      	cmp	r3, sl
 80076c6:	dd05      	ble.n	80076d4 <__gethex+0x1e8>
 80076c8:	4620      	mov	r0, r4
 80076ca:	1eb9      	subs	r1, r7, #2
 80076cc:	f000 fedd 	bl	800848a <__any_on>
 80076d0:	2800      	cmp	r0, #0
 80076d2:	d144      	bne.n	800775e <__gethex+0x272>
 80076d4:	f04f 0a02 	mov.w	sl, #2
 80076d8:	4639      	mov	r1, r7
 80076da:	4620      	mov	r0, r4
 80076dc:	f7ff fe9e 	bl	800741c <rshift>
 80076e0:	443d      	add	r5, r7
 80076e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80076e6:	42ab      	cmp	r3, r5
 80076e8:	da4a      	bge.n	8007780 <__gethex+0x294>
 80076ea:	4621      	mov	r1, r4
 80076ec:	9802      	ldr	r0, [sp, #8]
 80076ee:	f000 fa75 	bl	8007bdc <_Bfree>
 80076f2:	2300      	movs	r3, #0
 80076f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80076f6:	27a3      	movs	r7, #163	; 0xa3
 80076f8:	6013      	str	r3, [r2, #0]
 80076fa:	e789      	b.n	8007610 <__gethex+0x124>
 80076fc:	1e73      	subs	r3, r6, #1
 80076fe:	9a07      	ldr	r2, [sp, #28]
 8007700:	9305      	str	r3, [sp, #20]
 8007702:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007706:	4293      	cmp	r3, r2
 8007708:	d019      	beq.n	800773e <__gethex+0x252>
 800770a:	f1bb 0f20 	cmp.w	fp, #32
 800770e:	d107      	bne.n	8007720 <__gethex+0x234>
 8007710:	9b04      	ldr	r3, [sp, #16]
 8007712:	9a01      	ldr	r2, [sp, #4]
 8007714:	f843 2b04 	str.w	r2, [r3], #4
 8007718:	9304      	str	r3, [sp, #16]
 800771a:	2300      	movs	r3, #0
 800771c:	469b      	mov	fp, r3
 800771e:	9301      	str	r3, [sp, #4]
 8007720:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007724:	f7ff fecd 	bl	80074c2 <__hexdig_fun>
 8007728:	9b01      	ldr	r3, [sp, #4]
 800772a:	f000 000f 	and.w	r0, r0, #15
 800772e:	fa00 f00b 	lsl.w	r0, r0, fp
 8007732:	4303      	orrs	r3, r0
 8007734:	9301      	str	r3, [sp, #4]
 8007736:	f10b 0b04 	add.w	fp, fp, #4
 800773a:	9b05      	ldr	r3, [sp, #20]
 800773c:	e00d      	b.n	800775a <__gethex+0x26e>
 800773e:	9b05      	ldr	r3, [sp, #20]
 8007740:	9a08      	ldr	r2, [sp, #32]
 8007742:	4413      	add	r3, r2
 8007744:	42bb      	cmp	r3, r7
 8007746:	d3e0      	bcc.n	800770a <__gethex+0x21e>
 8007748:	4618      	mov	r0, r3
 800774a:	4652      	mov	r2, sl
 800774c:	9903      	ldr	r1, [sp, #12]
 800774e:	9309      	str	r3, [sp, #36]	; 0x24
 8007750:	f001 f8e2 	bl	8008918 <strncmp>
 8007754:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007756:	2800      	cmp	r0, #0
 8007758:	d1d7      	bne.n	800770a <__gethex+0x21e>
 800775a:	461e      	mov	r6, r3
 800775c:	e78c      	b.n	8007678 <__gethex+0x18c>
 800775e:	f04f 0a03 	mov.w	sl, #3
 8007762:	e7b9      	b.n	80076d8 <__gethex+0x1ec>
 8007764:	da09      	bge.n	800777a <__gethex+0x28e>
 8007766:	1bf7      	subs	r7, r6, r7
 8007768:	4621      	mov	r1, r4
 800776a:	463a      	mov	r2, r7
 800776c:	9802      	ldr	r0, [sp, #8]
 800776e:	f000 fc4d 	bl	800800c <__lshift>
 8007772:	4604      	mov	r4, r0
 8007774:	1bed      	subs	r5, r5, r7
 8007776:	f100 0914 	add.w	r9, r0, #20
 800777a:	f04f 0a00 	mov.w	sl, #0
 800777e:	e7b0      	b.n	80076e2 <__gethex+0x1f6>
 8007780:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007784:	42a8      	cmp	r0, r5
 8007786:	dd71      	ble.n	800786c <__gethex+0x380>
 8007788:	1b45      	subs	r5, r0, r5
 800778a:	42ae      	cmp	r6, r5
 800778c:	dc34      	bgt.n	80077f8 <__gethex+0x30c>
 800778e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007792:	2b02      	cmp	r3, #2
 8007794:	d028      	beq.n	80077e8 <__gethex+0x2fc>
 8007796:	2b03      	cmp	r3, #3
 8007798:	d02a      	beq.n	80077f0 <__gethex+0x304>
 800779a:	2b01      	cmp	r3, #1
 800779c:	d115      	bne.n	80077ca <__gethex+0x2de>
 800779e:	42ae      	cmp	r6, r5
 80077a0:	d113      	bne.n	80077ca <__gethex+0x2de>
 80077a2:	2e01      	cmp	r6, #1
 80077a4:	d10b      	bne.n	80077be <__gethex+0x2d2>
 80077a6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80077aa:	9a06      	ldr	r2, [sp, #24]
 80077ac:	2762      	movs	r7, #98	; 0x62
 80077ae:	6013      	str	r3, [r2, #0]
 80077b0:	2301      	movs	r3, #1
 80077b2:	6123      	str	r3, [r4, #16]
 80077b4:	f8c9 3000 	str.w	r3, [r9]
 80077b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80077ba:	601c      	str	r4, [r3, #0]
 80077bc:	e728      	b.n	8007610 <__gethex+0x124>
 80077be:	4620      	mov	r0, r4
 80077c0:	1e71      	subs	r1, r6, #1
 80077c2:	f000 fe62 	bl	800848a <__any_on>
 80077c6:	2800      	cmp	r0, #0
 80077c8:	d1ed      	bne.n	80077a6 <__gethex+0x2ba>
 80077ca:	4621      	mov	r1, r4
 80077cc:	9802      	ldr	r0, [sp, #8]
 80077ce:	f000 fa05 	bl	8007bdc <_Bfree>
 80077d2:	2300      	movs	r3, #0
 80077d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80077d6:	2750      	movs	r7, #80	; 0x50
 80077d8:	6013      	str	r3, [r2, #0]
 80077da:	e719      	b.n	8007610 <__gethex+0x124>
 80077dc:	080097a0 	.word	0x080097a0
 80077e0:	08009724 	.word	0x08009724
 80077e4:	08009735 	.word	0x08009735
 80077e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d1ed      	bne.n	80077ca <__gethex+0x2de>
 80077ee:	e7da      	b.n	80077a6 <__gethex+0x2ba>
 80077f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d1d7      	bne.n	80077a6 <__gethex+0x2ba>
 80077f6:	e7e8      	b.n	80077ca <__gethex+0x2de>
 80077f8:	1e6f      	subs	r7, r5, #1
 80077fa:	f1ba 0f00 	cmp.w	sl, #0
 80077fe:	d132      	bne.n	8007866 <__gethex+0x37a>
 8007800:	b127      	cbz	r7, 800780c <__gethex+0x320>
 8007802:	4639      	mov	r1, r7
 8007804:	4620      	mov	r0, r4
 8007806:	f000 fe40 	bl	800848a <__any_on>
 800780a:	4682      	mov	sl, r0
 800780c:	2101      	movs	r1, #1
 800780e:	117b      	asrs	r3, r7, #5
 8007810:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007814:	f007 071f 	and.w	r7, r7, #31
 8007818:	fa01 f707 	lsl.w	r7, r1, r7
 800781c:	421f      	tst	r7, r3
 800781e:	f04f 0702 	mov.w	r7, #2
 8007822:	4629      	mov	r1, r5
 8007824:	4620      	mov	r0, r4
 8007826:	bf18      	it	ne
 8007828:	f04a 0a02 	orrne.w	sl, sl, #2
 800782c:	1b76      	subs	r6, r6, r5
 800782e:	f7ff fdf5 	bl	800741c <rshift>
 8007832:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007836:	f1ba 0f00 	cmp.w	sl, #0
 800783a:	d048      	beq.n	80078ce <__gethex+0x3e2>
 800783c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007840:	2b02      	cmp	r3, #2
 8007842:	d015      	beq.n	8007870 <__gethex+0x384>
 8007844:	2b03      	cmp	r3, #3
 8007846:	d017      	beq.n	8007878 <__gethex+0x38c>
 8007848:	2b01      	cmp	r3, #1
 800784a:	d109      	bne.n	8007860 <__gethex+0x374>
 800784c:	f01a 0f02 	tst.w	sl, #2
 8007850:	d006      	beq.n	8007860 <__gethex+0x374>
 8007852:	f8d9 0000 	ldr.w	r0, [r9]
 8007856:	ea4a 0a00 	orr.w	sl, sl, r0
 800785a:	f01a 0f01 	tst.w	sl, #1
 800785e:	d10e      	bne.n	800787e <__gethex+0x392>
 8007860:	f047 0710 	orr.w	r7, r7, #16
 8007864:	e033      	b.n	80078ce <__gethex+0x3e2>
 8007866:	f04f 0a01 	mov.w	sl, #1
 800786a:	e7cf      	b.n	800780c <__gethex+0x320>
 800786c:	2701      	movs	r7, #1
 800786e:	e7e2      	b.n	8007836 <__gethex+0x34a>
 8007870:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007872:	f1c3 0301 	rsb	r3, r3, #1
 8007876:	9315      	str	r3, [sp, #84]	; 0x54
 8007878:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800787a:	2b00      	cmp	r3, #0
 800787c:	d0f0      	beq.n	8007860 <__gethex+0x374>
 800787e:	f04f 0c00 	mov.w	ip, #0
 8007882:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007886:	f104 0314 	add.w	r3, r4, #20
 800788a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800788e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007892:	4618      	mov	r0, r3
 8007894:	f853 2b04 	ldr.w	r2, [r3], #4
 8007898:	f1b2 3fff 	cmp.w	r2, #4294967295
 800789c:	d01c      	beq.n	80078d8 <__gethex+0x3ec>
 800789e:	3201      	adds	r2, #1
 80078a0:	6002      	str	r2, [r0, #0]
 80078a2:	2f02      	cmp	r7, #2
 80078a4:	f104 0314 	add.w	r3, r4, #20
 80078a8:	d13d      	bne.n	8007926 <__gethex+0x43a>
 80078aa:	f8d8 2000 	ldr.w	r2, [r8]
 80078ae:	3a01      	subs	r2, #1
 80078b0:	42b2      	cmp	r2, r6
 80078b2:	d10a      	bne.n	80078ca <__gethex+0x3de>
 80078b4:	2201      	movs	r2, #1
 80078b6:	1171      	asrs	r1, r6, #5
 80078b8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80078bc:	f006 061f 	and.w	r6, r6, #31
 80078c0:	fa02 f606 	lsl.w	r6, r2, r6
 80078c4:	421e      	tst	r6, r3
 80078c6:	bf18      	it	ne
 80078c8:	4617      	movne	r7, r2
 80078ca:	f047 0720 	orr.w	r7, r7, #32
 80078ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80078d0:	601c      	str	r4, [r3, #0]
 80078d2:	9b06      	ldr	r3, [sp, #24]
 80078d4:	601d      	str	r5, [r3, #0]
 80078d6:	e69b      	b.n	8007610 <__gethex+0x124>
 80078d8:	4299      	cmp	r1, r3
 80078da:	f843 cc04 	str.w	ip, [r3, #-4]
 80078de:	d8d8      	bhi.n	8007892 <__gethex+0x3a6>
 80078e0:	68a3      	ldr	r3, [r4, #8]
 80078e2:	459b      	cmp	fp, r3
 80078e4:	db17      	blt.n	8007916 <__gethex+0x42a>
 80078e6:	6861      	ldr	r1, [r4, #4]
 80078e8:	9802      	ldr	r0, [sp, #8]
 80078ea:	3101      	adds	r1, #1
 80078ec:	f000 f936 	bl	8007b5c <_Balloc>
 80078f0:	4681      	mov	r9, r0
 80078f2:	b918      	cbnz	r0, 80078fc <__gethex+0x410>
 80078f4:	4602      	mov	r2, r0
 80078f6:	2184      	movs	r1, #132	; 0x84
 80078f8:	4b19      	ldr	r3, [pc, #100]	; (8007960 <__gethex+0x474>)
 80078fa:	e6ac      	b.n	8007656 <__gethex+0x16a>
 80078fc:	6922      	ldr	r2, [r4, #16]
 80078fe:	f104 010c 	add.w	r1, r4, #12
 8007902:	3202      	adds	r2, #2
 8007904:	0092      	lsls	r2, r2, #2
 8007906:	300c      	adds	r0, #12
 8007908:	f000 f91a 	bl	8007b40 <memcpy>
 800790c:	4621      	mov	r1, r4
 800790e:	9802      	ldr	r0, [sp, #8]
 8007910:	f000 f964 	bl	8007bdc <_Bfree>
 8007914:	464c      	mov	r4, r9
 8007916:	6923      	ldr	r3, [r4, #16]
 8007918:	1c5a      	adds	r2, r3, #1
 800791a:	6122      	str	r2, [r4, #16]
 800791c:	2201      	movs	r2, #1
 800791e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007922:	615a      	str	r2, [r3, #20]
 8007924:	e7bd      	b.n	80078a2 <__gethex+0x3b6>
 8007926:	6922      	ldr	r2, [r4, #16]
 8007928:	455a      	cmp	r2, fp
 800792a:	dd0b      	ble.n	8007944 <__gethex+0x458>
 800792c:	2101      	movs	r1, #1
 800792e:	4620      	mov	r0, r4
 8007930:	f7ff fd74 	bl	800741c <rshift>
 8007934:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007938:	3501      	adds	r5, #1
 800793a:	42ab      	cmp	r3, r5
 800793c:	f6ff aed5 	blt.w	80076ea <__gethex+0x1fe>
 8007940:	2701      	movs	r7, #1
 8007942:	e7c2      	b.n	80078ca <__gethex+0x3de>
 8007944:	f016 061f 	ands.w	r6, r6, #31
 8007948:	d0fa      	beq.n	8007940 <__gethex+0x454>
 800794a:	449a      	add	sl, r3
 800794c:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8007950:	f000 f9fa 	bl	8007d48 <__hi0bits>
 8007954:	f1c6 0620 	rsb	r6, r6, #32
 8007958:	42b0      	cmp	r0, r6
 800795a:	dbe7      	blt.n	800792c <__gethex+0x440>
 800795c:	e7f0      	b.n	8007940 <__gethex+0x454>
 800795e:	bf00      	nop
 8007960:	08009724 	.word	0x08009724

08007964 <L_shift>:
 8007964:	f1c2 0208 	rsb	r2, r2, #8
 8007968:	0092      	lsls	r2, r2, #2
 800796a:	b570      	push	{r4, r5, r6, lr}
 800796c:	f1c2 0620 	rsb	r6, r2, #32
 8007970:	6843      	ldr	r3, [r0, #4]
 8007972:	6804      	ldr	r4, [r0, #0]
 8007974:	fa03 f506 	lsl.w	r5, r3, r6
 8007978:	432c      	orrs	r4, r5
 800797a:	40d3      	lsrs	r3, r2
 800797c:	6004      	str	r4, [r0, #0]
 800797e:	f840 3f04 	str.w	r3, [r0, #4]!
 8007982:	4288      	cmp	r0, r1
 8007984:	d3f4      	bcc.n	8007970 <L_shift+0xc>
 8007986:	bd70      	pop	{r4, r5, r6, pc}

08007988 <__match>:
 8007988:	b530      	push	{r4, r5, lr}
 800798a:	6803      	ldr	r3, [r0, #0]
 800798c:	3301      	adds	r3, #1
 800798e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007992:	b914      	cbnz	r4, 800799a <__match+0x12>
 8007994:	6003      	str	r3, [r0, #0]
 8007996:	2001      	movs	r0, #1
 8007998:	bd30      	pop	{r4, r5, pc}
 800799a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800799e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80079a2:	2d19      	cmp	r5, #25
 80079a4:	bf98      	it	ls
 80079a6:	3220      	addls	r2, #32
 80079a8:	42a2      	cmp	r2, r4
 80079aa:	d0f0      	beq.n	800798e <__match+0x6>
 80079ac:	2000      	movs	r0, #0
 80079ae:	e7f3      	b.n	8007998 <__match+0x10>

080079b0 <__hexnan>:
 80079b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079b4:	2500      	movs	r5, #0
 80079b6:	680b      	ldr	r3, [r1, #0]
 80079b8:	4682      	mov	sl, r0
 80079ba:	115e      	asrs	r6, r3, #5
 80079bc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80079c0:	f013 031f 	ands.w	r3, r3, #31
 80079c4:	bf18      	it	ne
 80079c6:	3604      	addne	r6, #4
 80079c8:	1f37      	subs	r7, r6, #4
 80079ca:	4690      	mov	r8, r2
 80079cc:	46b9      	mov	r9, r7
 80079ce:	463c      	mov	r4, r7
 80079d0:	46ab      	mov	fp, r5
 80079d2:	b087      	sub	sp, #28
 80079d4:	6801      	ldr	r1, [r0, #0]
 80079d6:	9301      	str	r3, [sp, #4]
 80079d8:	f846 5c04 	str.w	r5, [r6, #-4]
 80079dc:	9502      	str	r5, [sp, #8]
 80079de:	784a      	ldrb	r2, [r1, #1]
 80079e0:	1c4b      	adds	r3, r1, #1
 80079e2:	9303      	str	r3, [sp, #12]
 80079e4:	b342      	cbz	r2, 8007a38 <__hexnan+0x88>
 80079e6:	4610      	mov	r0, r2
 80079e8:	9105      	str	r1, [sp, #20]
 80079ea:	9204      	str	r2, [sp, #16]
 80079ec:	f7ff fd69 	bl	80074c2 <__hexdig_fun>
 80079f0:	2800      	cmp	r0, #0
 80079f2:	d14f      	bne.n	8007a94 <__hexnan+0xe4>
 80079f4:	9a04      	ldr	r2, [sp, #16]
 80079f6:	9905      	ldr	r1, [sp, #20]
 80079f8:	2a20      	cmp	r2, #32
 80079fa:	d818      	bhi.n	8007a2e <__hexnan+0x7e>
 80079fc:	9b02      	ldr	r3, [sp, #8]
 80079fe:	459b      	cmp	fp, r3
 8007a00:	dd13      	ble.n	8007a2a <__hexnan+0x7a>
 8007a02:	454c      	cmp	r4, r9
 8007a04:	d206      	bcs.n	8007a14 <__hexnan+0x64>
 8007a06:	2d07      	cmp	r5, #7
 8007a08:	dc04      	bgt.n	8007a14 <__hexnan+0x64>
 8007a0a:	462a      	mov	r2, r5
 8007a0c:	4649      	mov	r1, r9
 8007a0e:	4620      	mov	r0, r4
 8007a10:	f7ff ffa8 	bl	8007964 <L_shift>
 8007a14:	4544      	cmp	r4, r8
 8007a16:	d950      	bls.n	8007aba <__hexnan+0x10a>
 8007a18:	2300      	movs	r3, #0
 8007a1a:	f1a4 0904 	sub.w	r9, r4, #4
 8007a1e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007a22:	461d      	mov	r5, r3
 8007a24:	464c      	mov	r4, r9
 8007a26:	f8cd b008 	str.w	fp, [sp, #8]
 8007a2a:	9903      	ldr	r1, [sp, #12]
 8007a2c:	e7d7      	b.n	80079de <__hexnan+0x2e>
 8007a2e:	2a29      	cmp	r2, #41	; 0x29
 8007a30:	d156      	bne.n	8007ae0 <__hexnan+0x130>
 8007a32:	3102      	adds	r1, #2
 8007a34:	f8ca 1000 	str.w	r1, [sl]
 8007a38:	f1bb 0f00 	cmp.w	fp, #0
 8007a3c:	d050      	beq.n	8007ae0 <__hexnan+0x130>
 8007a3e:	454c      	cmp	r4, r9
 8007a40:	d206      	bcs.n	8007a50 <__hexnan+0xa0>
 8007a42:	2d07      	cmp	r5, #7
 8007a44:	dc04      	bgt.n	8007a50 <__hexnan+0xa0>
 8007a46:	462a      	mov	r2, r5
 8007a48:	4649      	mov	r1, r9
 8007a4a:	4620      	mov	r0, r4
 8007a4c:	f7ff ff8a 	bl	8007964 <L_shift>
 8007a50:	4544      	cmp	r4, r8
 8007a52:	d934      	bls.n	8007abe <__hexnan+0x10e>
 8007a54:	4623      	mov	r3, r4
 8007a56:	f1a8 0204 	sub.w	r2, r8, #4
 8007a5a:	f853 1b04 	ldr.w	r1, [r3], #4
 8007a5e:	429f      	cmp	r7, r3
 8007a60:	f842 1f04 	str.w	r1, [r2, #4]!
 8007a64:	d2f9      	bcs.n	8007a5a <__hexnan+0xaa>
 8007a66:	1b3b      	subs	r3, r7, r4
 8007a68:	f023 0303 	bic.w	r3, r3, #3
 8007a6c:	3304      	adds	r3, #4
 8007a6e:	3401      	adds	r4, #1
 8007a70:	3e03      	subs	r6, #3
 8007a72:	42b4      	cmp	r4, r6
 8007a74:	bf88      	it	hi
 8007a76:	2304      	movhi	r3, #4
 8007a78:	2200      	movs	r2, #0
 8007a7a:	4443      	add	r3, r8
 8007a7c:	f843 2b04 	str.w	r2, [r3], #4
 8007a80:	429f      	cmp	r7, r3
 8007a82:	d2fb      	bcs.n	8007a7c <__hexnan+0xcc>
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	b91b      	cbnz	r3, 8007a90 <__hexnan+0xe0>
 8007a88:	4547      	cmp	r7, r8
 8007a8a:	d127      	bne.n	8007adc <__hexnan+0x12c>
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	603b      	str	r3, [r7, #0]
 8007a90:	2005      	movs	r0, #5
 8007a92:	e026      	b.n	8007ae2 <__hexnan+0x132>
 8007a94:	3501      	adds	r5, #1
 8007a96:	2d08      	cmp	r5, #8
 8007a98:	f10b 0b01 	add.w	fp, fp, #1
 8007a9c:	dd06      	ble.n	8007aac <__hexnan+0xfc>
 8007a9e:	4544      	cmp	r4, r8
 8007aa0:	d9c3      	bls.n	8007a2a <__hexnan+0x7a>
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	2501      	movs	r5, #1
 8007aa6:	f844 3c04 	str.w	r3, [r4, #-4]
 8007aaa:	3c04      	subs	r4, #4
 8007aac:	6822      	ldr	r2, [r4, #0]
 8007aae:	f000 000f 	and.w	r0, r0, #15
 8007ab2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007ab6:	6022      	str	r2, [r4, #0]
 8007ab8:	e7b7      	b.n	8007a2a <__hexnan+0x7a>
 8007aba:	2508      	movs	r5, #8
 8007abc:	e7b5      	b.n	8007a2a <__hexnan+0x7a>
 8007abe:	9b01      	ldr	r3, [sp, #4]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d0df      	beq.n	8007a84 <__hexnan+0xd4>
 8007ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ac8:	f1c3 0320 	rsb	r3, r3, #32
 8007acc:	fa22 f303 	lsr.w	r3, r2, r3
 8007ad0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007ad4:	401a      	ands	r2, r3
 8007ad6:	f846 2c04 	str.w	r2, [r6, #-4]
 8007ada:	e7d3      	b.n	8007a84 <__hexnan+0xd4>
 8007adc:	3f04      	subs	r7, #4
 8007ade:	e7d1      	b.n	8007a84 <__hexnan+0xd4>
 8007ae0:	2004      	movs	r0, #4
 8007ae2:	b007      	add	sp, #28
 8007ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007ae8 <_localeconv_r>:
 8007ae8:	4800      	ldr	r0, [pc, #0]	; (8007aec <_localeconv_r+0x4>)
 8007aea:	4770      	bx	lr
 8007aec:	20000164 	.word	0x20000164

08007af0 <malloc>:
 8007af0:	4b02      	ldr	r3, [pc, #8]	; (8007afc <malloc+0xc>)
 8007af2:	4601      	mov	r1, r0
 8007af4:	6818      	ldr	r0, [r3, #0]
 8007af6:	f000 bd43 	b.w	8008580 <_malloc_r>
 8007afa:	bf00      	nop
 8007afc:	2000000c 	.word	0x2000000c

08007b00 <__ascii_mbtowc>:
 8007b00:	b082      	sub	sp, #8
 8007b02:	b901      	cbnz	r1, 8007b06 <__ascii_mbtowc+0x6>
 8007b04:	a901      	add	r1, sp, #4
 8007b06:	b142      	cbz	r2, 8007b1a <__ascii_mbtowc+0x1a>
 8007b08:	b14b      	cbz	r3, 8007b1e <__ascii_mbtowc+0x1e>
 8007b0a:	7813      	ldrb	r3, [r2, #0]
 8007b0c:	600b      	str	r3, [r1, #0]
 8007b0e:	7812      	ldrb	r2, [r2, #0]
 8007b10:	1e10      	subs	r0, r2, #0
 8007b12:	bf18      	it	ne
 8007b14:	2001      	movne	r0, #1
 8007b16:	b002      	add	sp, #8
 8007b18:	4770      	bx	lr
 8007b1a:	4610      	mov	r0, r2
 8007b1c:	e7fb      	b.n	8007b16 <__ascii_mbtowc+0x16>
 8007b1e:	f06f 0001 	mvn.w	r0, #1
 8007b22:	e7f8      	b.n	8007b16 <__ascii_mbtowc+0x16>

08007b24 <memchr>:
 8007b24:	4603      	mov	r3, r0
 8007b26:	b510      	push	{r4, lr}
 8007b28:	b2c9      	uxtb	r1, r1
 8007b2a:	4402      	add	r2, r0
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	4618      	mov	r0, r3
 8007b30:	d101      	bne.n	8007b36 <memchr+0x12>
 8007b32:	2000      	movs	r0, #0
 8007b34:	e003      	b.n	8007b3e <memchr+0x1a>
 8007b36:	7804      	ldrb	r4, [r0, #0]
 8007b38:	3301      	adds	r3, #1
 8007b3a:	428c      	cmp	r4, r1
 8007b3c:	d1f6      	bne.n	8007b2c <memchr+0x8>
 8007b3e:	bd10      	pop	{r4, pc}

08007b40 <memcpy>:
 8007b40:	440a      	add	r2, r1
 8007b42:	4291      	cmp	r1, r2
 8007b44:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b48:	d100      	bne.n	8007b4c <memcpy+0xc>
 8007b4a:	4770      	bx	lr
 8007b4c:	b510      	push	{r4, lr}
 8007b4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b52:	4291      	cmp	r1, r2
 8007b54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b58:	d1f9      	bne.n	8007b4e <memcpy+0xe>
 8007b5a:	bd10      	pop	{r4, pc}

08007b5c <_Balloc>:
 8007b5c:	b570      	push	{r4, r5, r6, lr}
 8007b5e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007b60:	4604      	mov	r4, r0
 8007b62:	460d      	mov	r5, r1
 8007b64:	b976      	cbnz	r6, 8007b84 <_Balloc+0x28>
 8007b66:	2010      	movs	r0, #16
 8007b68:	f7ff ffc2 	bl	8007af0 <malloc>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	6260      	str	r0, [r4, #36]	; 0x24
 8007b70:	b920      	cbnz	r0, 8007b7c <_Balloc+0x20>
 8007b72:	2166      	movs	r1, #102	; 0x66
 8007b74:	4b17      	ldr	r3, [pc, #92]	; (8007bd4 <_Balloc+0x78>)
 8007b76:	4818      	ldr	r0, [pc, #96]	; (8007bd8 <_Balloc+0x7c>)
 8007b78:	f000 feee 	bl	8008958 <__assert_func>
 8007b7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b80:	6006      	str	r6, [r0, #0]
 8007b82:	60c6      	str	r6, [r0, #12]
 8007b84:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007b86:	68f3      	ldr	r3, [r6, #12]
 8007b88:	b183      	cbz	r3, 8007bac <_Balloc+0x50>
 8007b8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b8c:	68db      	ldr	r3, [r3, #12]
 8007b8e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007b92:	b9b8      	cbnz	r0, 8007bc4 <_Balloc+0x68>
 8007b94:	2101      	movs	r1, #1
 8007b96:	fa01 f605 	lsl.w	r6, r1, r5
 8007b9a:	1d72      	adds	r2, r6, #5
 8007b9c:	4620      	mov	r0, r4
 8007b9e:	0092      	lsls	r2, r2, #2
 8007ba0:	f000 fc94 	bl	80084cc <_calloc_r>
 8007ba4:	b160      	cbz	r0, 8007bc0 <_Balloc+0x64>
 8007ba6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007baa:	e00e      	b.n	8007bca <_Balloc+0x6e>
 8007bac:	2221      	movs	r2, #33	; 0x21
 8007bae:	2104      	movs	r1, #4
 8007bb0:	4620      	mov	r0, r4
 8007bb2:	f000 fc8b 	bl	80084cc <_calloc_r>
 8007bb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007bb8:	60f0      	str	r0, [r6, #12]
 8007bba:	68db      	ldr	r3, [r3, #12]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d1e4      	bne.n	8007b8a <_Balloc+0x2e>
 8007bc0:	2000      	movs	r0, #0
 8007bc2:	bd70      	pop	{r4, r5, r6, pc}
 8007bc4:	6802      	ldr	r2, [r0, #0]
 8007bc6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007bca:	2300      	movs	r3, #0
 8007bcc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007bd0:	e7f7      	b.n	8007bc2 <_Balloc+0x66>
 8007bd2:	bf00      	nop
 8007bd4:	080096ae 	.word	0x080096ae
 8007bd8:	080097b4 	.word	0x080097b4

08007bdc <_Bfree>:
 8007bdc:	b570      	push	{r4, r5, r6, lr}
 8007bde:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007be0:	4605      	mov	r5, r0
 8007be2:	460c      	mov	r4, r1
 8007be4:	b976      	cbnz	r6, 8007c04 <_Bfree+0x28>
 8007be6:	2010      	movs	r0, #16
 8007be8:	f7ff ff82 	bl	8007af0 <malloc>
 8007bec:	4602      	mov	r2, r0
 8007bee:	6268      	str	r0, [r5, #36]	; 0x24
 8007bf0:	b920      	cbnz	r0, 8007bfc <_Bfree+0x20>
 8007bf2:	218a      	movs	r1, #138	; 0x8a
 8007bf4:	4b08      	ldr	r3, [pc, #32]	; (8007c18 <_Bfree+0x3c>)
 8007bf6:	4809      	ldr	r0, [pc, #36]	; (8007c1c <_Bfree+0x40>)
 8007bf8:	f000 feae 	bl	8008958 <__assert_func>
 8007bfc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c00:	6006      	str	r6, [r0, #0]
 8007c02:	60c6      	str	r6, [r0, #12]
 8007c04:	b13c      	cbz	r4, 8007c16 <_Bfree+0x3a>
 8007c06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007c08:	6862      	ldr	r2, [r4, #4]
 8007c0a:	68db      	ldr	r3, [r3, #12]
 8007c0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007c10:	6021      	str	r1, [r4, #0]
 8007c12:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007c16:	bd70      	pop	{r4, r5, r6, pc}
 8007c18:	080096ae 	.word	0x080096ae
 8007c1c:	080097b4 	.word	0x080097b4

08007c20 <__multadd>:
 8007c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c24:	4698      	mov	r8, r3
 8007c26:	460c      	mov	r4, r1
 8007c28:	2300      	movs	r3, #0
 8007c2a:	690e      	ldr	r6, [r1, #16]
 8007c2c:	4607      	mov	r7, r0
 8007c2e:	f101 0014 	add.w	r0, r1, #20
 8007c32:	6805      	ldr	r5, [r0, #0]
 8007c34:	3301      	adds	r3, #1
 8007c36:	b2a9      	uxth	r1, r5
 8007c38:	fb02 8101 	mla	r1, r2, r1, r8
 8007c3c:	0c2d      	lsrs	r5, r5, #16
 8007c3e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007c42:	fb02 c505 	mla	r5, r2, r5, ip
 8007c46:	b289      	uxth	r1, r1
 8007c48:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007c4c:	429e      	cmp	r6, r3
 8007c4e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007c52:	f840 1b04 	str.w	r1, [r0], #4
 8007c56:	dcec      	bgt.n	8007c32 <__multadd+0x12>
 8007c58:	f1b8 0f00 	cmp.w	r8, #0
 8007c5c:	d022      	beq.n	8007ca4 <__multadd+0x84>
 8007c5e:	68a3      	ldr	r3, [r4, #8]
 8007c60:	42b3      	cmp	r3, r6
 8007c62:	dc19      	bgt.n	8007c98 <__multadd+0x78>
 8007c64:	6861      	ldr	r1, [r4, #4]
 8007c66:	4638      	mov	r0, r7
 8007c68:	3101      	adds	r1, #1
 8007c6a:	f7ff ff77 	bl	8007b5c <_Balloc>
 8007c6e:	4605      	mov	r5, r0
 8007c70:	b928      	cbnz	r0, 8007c7e <__multadd+0x5e>
 8007c72:	4602      	mov	r2, r0
 8007c74:	21b5      	movs	r1, #181	; 0xb5
 8007c76:	4b0d      	ldr	r3, [pc, #52]	; (8007cac <__multadd+0x8c>)
 8007c78:	480d      	ldr	r0, [pc, #52]	; (8007cb0 <__multadd+0x90>)
 8007c7a:	f000 fe6d 	bl	8008958 <__assert_func>
 8007c7e:	6922      	ldr	r2, [r4, #16]
 8007c80:	f104 010c 	add.w	r1, r4, #12
 8007c84:	3202      	adds	r2, #2
 8007c86:	0092      	lsls	r2, r2, #2
 8007c88:	300c      	adds	r0, #12
 8007c8a:	f7ff ff59 	bl	8007b40 <memcpy>
 8007c8e:	4621      	mov	r1, r4
 8007c90:	4638      	mov	r0, r7
 8007c92:	f7ff ffa3 	bl	8007bdc <_Bfree>
 8007c96:	462c      	mov	r4, r5
 8007c98:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007c9c:	3601      	adds	r6, #1
 8007c9e:	f8c3 8014 	str.w	r8, [r3, #20]
 8007ca2:	6126      	str	r6, [r4, #16]
 8007ca4:	4620      	mov	r0, r4
 8007ca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007caa:	bf00      	nop
 8007cac:	08009724 	.word	0x08009724
 8007cb0:	080097b4 	.word	0x080097b4

08007cb4 <__s2b>:
 8007cb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cb8:	4615      	mov	r5, r2
 8007cba:	2209      	movs	r2, #9
 8007cbc:	461f      	mov	r7, r3
 8007cbe:	3308      	adds	r3, #8
 8007cc0:	460c      	mov	r4, r1
 8007cc2:	fb93 f3f2 	sdiv	r3, r3, r2
 8007cc6:	4606      	mov	r6, r0
 8007cc8:	2201      	movs	r2, #1
 8007cca:	2100      	movs	r1, #0
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	db09      	blt.n	8007ce4 <__s2b+0x30>
 8007cd0:	4630      	mov	r0, r6
 8007cd2:	f7ff ff43 	bl	8007b5c <_Balloc>
 8007cd6:	b940      	cbnz	r0, 8007cea <__s2b+0x36>
 8007cd8:	4602      	mov	r2, r0
 8007cda:	21ce      	movs	r1, #206	; 0xce
 8007cdc:	4b18      	ldr	r3, [pc, #96]	; (8007d40 <__s2b+0x8c>)
 8007cde:	4819      	ldr	r0, [pc, #100]	; (8007d44 <__s2b+0x90>)
 8007ce0:	f000 fe3a 	bl	8008958 <__assert_func>
 8007ce4:	0052      	lsls	r2, r2, #1
 8007ce6:	3101      	adds	r1, #1
 8007ce8:	e7f0      	b.n	8007ccc <__s2b+0x18>
 8007cea:	9b08      	ldr	r3, [sp, #32]
 8007cec:	2d09      	cmp	r5, #9
 8007cee:	6143      	str	r3, [r0, #20]
 8007cf0:	f04f 0301 	mov.w	r3, #1
 8007cf4:	6103      	str	r3, [r0, #16]
 8007cf6:	dd16      	ble.n	8007d26 <__s2b+0x72>
 8007cf8:	f104 0909 	add.w	r9, r4, #9
 8007cfc:	46c8      	mov	r8, r9
 8007cfe:	442c      	add	r4, r5
 8007d00:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007d04:	4601      	mov	r1, r0
 8007d06:	220a      	movs	r2, #10
 8007d08:	4630      	mov	r0, r6
 8007d0a:	3b30      	subs	r3, #48	; 0x30
 8007d0c:	f7ff ff88 	bl	8007c20 <__multadd>
 8007d10:	45a0      	cmp	r8, r4
 8007d12:	d1f5      	bne.n	8007d00 <__s2b+0x4c>
 8007d14:	f1a5 0408 	sub.w	r4, r5, #8
 8007d18:	444c      	add	r4, r9
 8007d1a:	1b2d      	subs	r5, r5, r4
 8007d1c:	1963      	adds	r3, r4, r5
 8007d1e:	42bb      	cmp	r3, r7
 8007d20:	db04      	blt.n	8007d2c <__s2b+0x78>
 8007d22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d26:	2509      	movs	r5, #9
 8007d28:	340a      	adds	r4, #10
 8007d2a:	e7f6      	b.n	8007d1a <__s2b+0x66>
 8007d2c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007d30:	4601      	mov	r1, r0
 8007d32:	220a      	movs	r2, #10
 8007d34:	4630      	mov	r0, r6
 8007d36:	3b30      	subs	r3, #48	; 0x30
 8007d38:	f7ff ff72 	bl	8007c20 <__multadd>
 8007d3c:	e7ee      	b.n	8007d1c <__s2b+0x68>
 8007d3e:	bf00      	nop
 8007d40:	08009724 	.word	0x08009724
 8007d44:	080097b4 	.word	0x080097b4

08007d48 <__hi0bits>:
 8007d48:	0c02      	lsrs	r2, r0, #16
 8007d4a:	0412      	lsls	r2, r2, #16
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	b9ca      	cbnz	r2, 8007d84 <__hi0bits+0x3c>
 8007d50:	0403      	lsls	r3, r0, #16
 8007d52:	2010      	movs	r0, #16
 8007d54:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007d58:	bf04      	itt	eq
 8007d5a:	021b      	lsleq	r3, r3, #8
 8007d5c:	3008      	addeq	r0, #8
 8007d5e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007d62:	bf04      	itt	eq
 8007d64:	011b      	lsleq	r3, r3, #4
 8007d66:	3004      	addeq	r0, #4
 8007d68:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007d6c:	bf04      	itt	eq
 8007d6e:	009b      	lsleq	r3, r3, #2
 8007d70:	3002      	addeq	r0, #2
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	db05      	blt.n	8007d82 <__hi0bits+0x3a>
 8007d76:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007d7a:	f100 0001 	add.w	r0, r0, #1
 8007d7e:	bf08      	it	eq
 8007d80:	2020      	moveq	r0, #32
 8007d82:	4770      	bx	lr
 8007d84:	2000      	movs	r0, #0
 8007d86:	e7e5      	b.n	8007d54 <__hi0bits+0xc>

08007d88 <__lo0bits>:
 8007d88:	6803      	ldr	r3, [r0, #0]
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	f013 0007 	ands.w	r0, r3, #7
 8007d90:	d00b      	beq.n	8007daa <__lo0bits+0x22>
 8007d92:	07d9      	lsls	r1, r3, #31
 8007d94:	d422      	bmi.n	8007ddc <__lo0bits+0x54>
 8007d96:	0798      	lsls	r0, r3, #30
 8007d98:	bf49      	itett	mi
 8007d9a:	085b      	lsrmi	r3, r3, #1
 8007d9c:	089b      	lsrpl	r3, r3, #2
 8007d9e:	2001      	movmi	r0, #1
 8007da0:	6013      	strmi	r3, [r2, #0]
 8007da2:	bf5c      	itt	pl
 8007da4:	2002      	movpl	r0, #2
 8007da6:	6013      	strpl	r3, [r2, #0]
 8007da8:	4770      	bx	lr
 8007daa:	b299      	uxth	r1, r3
 8007dac:	b909      	cbnz	r1, 8007db2 <__lo0bits+0x2a>
 8007dae:	2010      	movs	r0, #16
 8007db0:	0c1b      	lsrs	r3, r3, #16
 8007db2:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007db6:	bf04      	itt	eq
 8007db8:	0a1b      	lsreq	r3, r3, #8
 8007dba:	3008      	addeq	r0, #8
 8007dbc:	0719      	lsls	r1, r3, #28
 8007dbe:	bf04      	itt	eq
 8007dc0:	091b      	lsreq	r3, r3, #4
 8007dc2:	3004      	addeq	r0, #4
 8007dc4:	0799      	lsls	r1, r3, #30
 8007dc6:	bf04      	itt	eq
 8007dc8:	089b      	lsreq	r3, r3, #2
 8007dca:	3002      	addeq	r0, #2
 8007dcc:	07d9      	lsls	r1, r3, #31
 8007dce:	d403      	bmi.n	8007dd8 <__lo0bits+0x50>
 8007dd0:	085b      	lsrs	r3, r3, #1
 8007dd2:	f100 0001 	add.w	r0, r0, #1
 8007dd6:	d003      	beq.n	8007de0 <__lo0bits+0x58>
 8007dd8:	6013      	str	r3, [r2, #0]
 8007dda:	4770      	bx	lr
 8007ddc:	2000      	movs	r0, #0
 8007dde:	4770      	bx	lr
 8007de0:	2020      	movs	r0, #32
 8007de2:	4770      	bx	lr

08007de4 <__i2b>:
 8007de4:	b510      	push	{r4, lr}
 8007de6:	460c      	mov	r4, r1
 8007de8:	2101      	movs	r1, #1
 8007dea:	f7ff feb7 	bl	8007b5c <_Balloc>
 8007dee:	4602      	mov	r2, r0
 8007df0:	b928      	cbnz	r0, 8007dfe <__i2b+0x1a>
 8007df2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007df6:	4b04      	ldr	r3, [pc, #16]	; (8007e08 <__i2b+0x24>)
 8007df8:	4804      	ldr	r0, [pc, #16]	; (8007e0c <__i2b+0x28>)
 8007dfa:	f000 fdad 	bl	8008958 <__assert_func>
 8007dfe:	2301      	movs	r3, #1
 8007e00:	6144      	str	r4, [r0, #20]
 8007e02:	6103      	str	r3, [r0, #16]
 8007e04:	bd10      	pop	{r4, pc}
 8007e06:	bf00      	nop
 8007e08:	08009724 	.word	0x08009724
 8007e0c:	080097b4 	.word	0x080097b4

08007e10 <__multiply>:
 8007e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e14:	4614      	mov	r4, r2
 8007e16:	690a      	ldr	r2, [r1, #16]
 8007e18:	6923      	ldr	r3, [r4, #16]
 8007e1a:	460d      	mov	r5, r1
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	bfbe      	ittt	lt
 8007e20:	460b      	movlt	r3, r1
 8007e22:	4625      	movlt	r5, r4
 8007e24:	461c      	movlt	r4, r3
 8007e26:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007e2a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007e2e:	68ab      	ldr	r3, [r5, #8]
 8007e30:	6869      	ldr	r1, [r5, #4]
 8007e32:	eb0a 0709 	add.w	r7, sl, r9
 8007e36:	42bb      	cmp	r3, r7
 8007e38:	b085      	sub	sp, #20
 8007e3a:	bfb8      	it	lt
 8007e3c:	3101      	addlt	r1, #1
 8007e3e:	f7ff fe8d 	bl	8007b5c <_Balloc>
 8007e42:	b930      	cbnz	r0, 8007e52 <__multiply+0x42>
 8007e44:	4602      	mov	r2, r0
 8007e46:	f240 115d 	movw	r1, #349	; 0x15d
 8007e4a:	4b41      	ldr	r3, [pc, #260]	; (8007f50 <__multiply+0x140>)
 8007e4c:	4841      	ldr	r0, [pc, #260]	; (8007f54 <__multiply+0x144>)
 8007e4e:	f000 fd83 	bl	8008958 <__assert_func>
 8007e52:	f100 0614 	add.w	r6, r0, #20
 8007e56:	4633      	mov	r3, r6
 8007e58:	2200      	movs	r2, #0
 8007e5a:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007e5e:	4543      	cmp	r3, r8
 8007e60:	d31e      	bcc.n	8007ea0 <__multiply+0x90>
 8007e62:	f105 0c14 	add.w	ip, r5, #20
 8007e66:	f104 0314 	add.w	r3, r4, #20
 8007e6a:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007e6e:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007e72:	9202      	str	r2, [sp, #8]
 8007e74:	ebac 0205 	sub.w	r2, ip, r5
 8007e78:	3a15      	subs	r2, #21
 8007e7a:	f022 0203 	bic.w	r2, r2, #3
 8007e7e:	3204      	adds	r2, #4
 8007e80:	f105 0115 	add.w	r1, r5, #21
 8007e84:	458c      	cmp	ip, r1
 8007e86:	bf38      	it	cc
 8007e88:	2204      	movcc	r2, #4
 8007e8a:	9201      	str	r2, [sp, #4]
 8007e8c:	9a02      	ldr	r2, [sp, #8]
 8007e8e:	9303      	str	r3, [sp, #12]
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d808      	bhi.n	8007ea6 <__multiply+0x96>
 8007e94:	2f00      	cmp	r7, #0
 8007e96:	dc55      	bgt.n	8007f44 <__multiply+0x134>
 8007e98:	6107      	str	r7, [r0, #16]
 8007e9a:	b005      	add	sp, #20
 8007e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ea0:	f843 2b04 	str.w	r2, [r3], #4
 8007ea4:	e7db      	b.n	8007e5e <__multiply+0x4e>
 8007ea6:	f8b3 a000 	ldrh.w	sl, [r3]
 8007eaa:	f1ba 0f00 	cmp.w	sl, #0
 8007eae:	d020      	beq.n	8007ef2 <__multiply+0xe2>
 8007eb0:	46b1      	mov	r9, r6
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f105 0e14 	add.w	lr, r5, #20
 8007eb8:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007ebc:	f8d9 b000 	ldr.w	fp, [r9]
 8007ec0:	b2a1      	uxth	r1, r4
 8007ec2:	fa1f fb8b 	uxth.w	fp, fp
 8007ec6:	fb0a b101 	mla	r1, sl, r1, fp
 8007eca:	4411      	add	r1, r2
 8007ecc:	f8d9 2000 	ldr.w	r2, [r9]
 8007ed0:	0c24      	lsrs	r4, r4, #16
 8007ed2:	0c12      	lsrs	r2, r2, #16
 8007ed4:	fb0a 2404 	mla	r4, sl, r4, r2
 8007ed8:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007edc:	b289      	uxth	r1, r1
 8007ede:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007ee2:	45f4      	cmp	ip, lr
 8007ee4:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007ee8:	f849 1b04 	str.w	r1, [r9], #4
 8007eec:	d8e4      	bhi.n	8007eb8 <__multiply+0xa8>
 8007eee:	9901      	ldr	r1, [sp, #4]
 8007ef0:	5072      	str	r2, [r6, r1]
 8007ef2:	9a03      	ldr	r2, [sp, #12]
 8007ef4:	3304      	adds	r3, #4
 8007ef6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007efa:	f1b9 0f00 	cmp.w	r9, #0
 8007efe:	d01f      	beq.n	8007f40 <__multiply+0x130>
 8007f00:	46b6      	mov	lr, r6
 8007f02:	f04f 0a00 	mov.w	sl, #0
 8007f06:	6834      	ldr	r4, [r6, #0]
 8007f08:	f105 0114 	add.w	r1, r5, #20
 8007f0c:	880a      	ldrh	r2, [r1, #0]
 8007f0e:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007f12:	b2a4      	uxth	r4, r4
 8007f14:	fb09 b202 	mla	r2, r9, r2, fp
 8007f18:	4492      	add	sl, r2
 8007f1a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007f1e:	f84e 4b04 	str.w	r4, [lr], #4
 8007f22:	f851 4b04 	ldr.w	r4, [r1], #4
 8007f26:	f8be 2000 	ldrh.w	r2, [lr]
 8007f2a:	0c24      	lsrs	r4, r4, #16
 8007f2c:	fb09 2404 	mla	r4, r9, r4, r2
 8007f30:	458c      	cmp	ip, r1
 8007f32:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007f36:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007f3a:	d8e7      	bhi.n	8007f0c <__multiply+0xfc>
 8007f3c:	9a01      	ldr	r2, [sp, #4]
 8007f3e:	50b4      	str	r4, [r6, r2]
 8007f40:	3604      	adds	r6, #4
 8007f42:	e7a3      	b.n	8007e8c <__multiply+0x7c>
 8007f44:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d1a5      	bne.n	8007e98 <__multiply+0x88>
 8007f4c:	3f01      	subs	r7, #1
 8007f4e:	e7a1      	b.n	8007e94 <__multiply+0x84>
 8007f50:	08009724 	.word	0x08009724
 8007f54:	080097b4 	.word	0x080097b4

08007f58 <__pow5mult>:
 8007f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f5c:	4615      	mov	r5, r2
 8007f5e:	f012 0203 	ands.w	r2, r2, #3
 8007f62:	4606      	mov	r6, r0
 8007f64:	460f      	mov	r7, r1
 8007f66:	d007      	beq.n	8007f78 <__pow5mult+0x20>
 8007f68:	4c25      	ldr	r4, [pc, #148]	; (8008000 <__pow5mult+0xa8>)
 8007f6a:	3a01      	subs	r2, #1
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007f72:	f7ff fe55 	bl	8007c20 <__multadd>
 8007f76:	4607      	mov	r7, r0
 8007f78:	10ad      	asrs	r5, r5, #2
 8007f7a:	d03d      	beq.n	8007ff8 <__pow5mult+0xa0>
 8007f7c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007f7e:	b97c      	cbnz	r4, 8007fa0 <__pow5mult+0x48>
 8007f80:	2010      	movs	r0, #16
 8007f82:	f7ff fdb5 	bl	8007af0 <malloc>
 8007f86:	4602      	mov	r2, r0
 8007f88:	6270      	str	r0, [r6, #36]	; 0x24
 8007f8a:	b928      	cbnz	r0, 8007f98 <__pow5mult+0x40>
 8007f8c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007f90:	4b1c      	ldr	r3, [pc, #112]	; (8008004 <__pow5mult+0xac>)
 8007f92:	481d      	ldr	r0, [pc, #116]	; (8008008 <__pow5mult+0xb0>)
 8007f94:	f000 fce0 	bl	8008958 <__assert_func>
 8007f98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007f9c:	6004      	str	r4, [r0, #0]
 8007f9e:	60c4      	str	r4, [r0, #12]
 8007fa0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007fa4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007fa8:	b94c      	cbnz	r4, 8007fbe <__pow5mult+0x66>
 8007faa:	f240 2171 	movw	r1, #625	; 0x271
 8007fae:	4630      	mov	r0, r6
 8007fb0:	f7ff ff18 	bl	8007de4 <__i2b>
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	4604      	mov	r4, r0
 8007fb8:	f8c8 0008 	str.w	r0, [r8, #8]
 8007fbc:	6003      	str	r3, [r0, #0]
 8007fbe:	f04f 0900 	mov.w	r9, #0
 8007fc2:	07eb      	lsls	r3, r5, #31
 8007fc4:	d50a      	bpl.n	8007fdc <__pow5mult+0x84>
 8007fc6:	4639      	mov	r1, r7
 8007fc8:	4622      	mov	r2, r4
 8007fca:	4630      	mov	r0, r6
 8007fcc:	f7ff ff20 	bl	8007e10 <__multiply>
 8007fd0:	4680      	mov	r8, r0
 8007fd2:	4639      	mov	r1, r7
 8007fd4:	4630      	mov	r0, r6
 8007fd6:	f7ff fe01 	bl	8007bdc <_Bfree>
 8007fda:	4647      	mov	r7, r8
 8007fdc:	106d      	asrs	r5, r5, #1
 8007fde:	d00b      	beq.n	8007ff8 <__pow5mult+0xa0>
 8007fe0:	6820      	ldr	r0, [r4, #0]
 8007fe2:	b938      	cbnz	r0, 8007ff4 <__pow5mult+0x9c>
 8007fe4:	4622      	mov	r2, r4
 8007fe6:	4621      	mov	r1, r4
 8007fe8:	4630      	mov	r0, r6
 8007fea:	f7ff ff11 	bl	8007e10 <__multiply>
 8007fee:	6020      	str	r0, [r4, #0]
 8007ff0:	f8c0 9000 	str.w	r9, [r0]
 8007ff4:	4604      	mov	r4, r0
 8007ff6:	e7e4      	b.n	8007fc2 <__pow5mult+0x6a>
 8007ff8:	4638      	mov	r0, r7
 8007ffa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ffe:	bf00      	nop
 8008000:	08009908 	.word	0x08009908
 8008004:	080096ae 	.word	0x080096ae
 8008008:	080097b4 	.word	0x080097b4

0800800c <__lshift>:
 800800c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008010:	460c      	mov	r4, r1
 8008012:	4607      	mov	r7, r0
 8008014:	4691      	mov	r9, r2
 8008016:	6923      	ldr	r3, [r4, #16]
 8008018:	6849      	ldr	r1, [r1, #4]
 800801a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800801e:	68a3      	ldr	r3, [r4, #8]
 8008020:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008024:	f108 0601 	add.w	r6, r8, #1
 8008028:	42b3      	cmp	r3, r6
 800802a:	db0b      	blt.n	8008044 <__lshift+0x38>
 800802c:	4638      	mov	r0, r7
 800802e:	f7ff fd95 	bl	8007b5c <_Balloc>
 8008032:	4605      	mov	r5, r0
 8008034:	b948      	cbnz	r0, 800804a <__lshift+0x3e>
 8008036:	4602      	mov	r2, r0
 8008038:	f240 11d9 	movw	r1, #473	; 0x1d9
 800803c:	4b27      	ldr	r3, [pc, #156]	; (80080dc <__lshift+0xd0>)
 800803e:	4828      	ldr	r0, [pc, #160]	; (80080e0 <__lshift+0xd4>)
 8008040:	f000 fc8a 	bl	8008958 <__assert_func>
 8008044:	3101      	adds	r1, #1
 8008046:	005b      	lsls	r3, r3, #1
 8008048:	e7ee      	b.n	8008028 <__lshift+0x1c>
 800804a:	2300      	movs	r3, #0
 800804c:	f100 0114 	add.w	r1, r0, #20
 8008050:	f100 0210 	add.w	r2, r0, #16
 8008054:	4618      	mov	r0, r3
 8008056:	4553      	cmp	r3, sl
 8008058:	db33      	blt.n	80080c2 <__lshift+0xb6>
 800805a:	6920      	ldr	r0, [r4, #16]
 800805c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008060:	f104 0314 	add.w	r3, r4, #20
 8008064:	f019 091f 	ands.w	r9, r9, #31
 8008068:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800806c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008070:	d02b      	beq.n	80080ca <__lshift+0xbe>
 8008072:	468a      	mov	sl, r1
 8008074:	2200      	movs	r2, #0
 8008076:	f1c9 0e20 	rsb	lr, r9, #32
 800807a:	6818      	ldr	r0, [r3, #0]
 800807c:	fa00 f009 	lsl.w	r0, r0, r9
 8008080:	4302      	orrs	r2, r0
 8008082:	f84a 2b04 	str.w	r2, [sl], #4
 8008086:	f853 2b04 	ldr.w	r2, [r3], #4
 800808a:	459c      	cmp	ip, r3
 800808c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008090:	d8f3      	bhi.n	800807a <__lshift+0x6e>
 8008092:	ebac 0304 	sub.w	r3, ip, r4
 8008096:	3b15      	subs	r3, #21
 8008098:	f023 0303 	bic.w	r3, r3, #3
 800809c:	3304      	adds	r3, #4
 800809e:	f104 0015 	add.w	r0, r4, #21
 80080a2:	4584      	cmp	ip, r0
 80080a4:	bf38      	it	cc
 80080a6:	2304      	movcc	r3, #4
 80080a8:	50ca      	str	r2, [r1, r3]
 80080aa:	b10a      	cbz	r2, 80080b0 <__lshift+0xa4>
 80080ac:	f108 0602 	add.w	r6, r8, #2
 80080b0:	3e01      	subs	r6, #1
 80080b2:	4638      	mov	r0, r7
 80080b4:	4621      	mov	r1, r4
 80080b6:	612e      	str	r6, [r5, #16]
 80080b8:	f7ff fd90 	bl	8007bdc <_Bfree>
 80080bc:	4628      	mov	r0, r5
 80080be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080c2:	f842 0f04 	str.w	r0, [r2, #4]!
 80080c6:	3301      	adds	r3, #1
 80080c8:	e7c5      	b.n	8008056 <__lshift+0x4a>
 80080ca:	3904      	subs	r1, #4
 80080cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80080d0:	459c      	cmp	ip, r3
 80080d2:	f841 2f04 	str.w	r2, [r1, #4]!
 80080d6:	d8f9      	bhi.n	80080cc <__lshift+0xc0>
 80080d8:	e7ea      	b.n	80080b0 <__lshift+0xa4>
 80080da:	bf00      	nop
 80080dc:	08009724 	.word	0x08009724
 80080e0:	080097b4 	.word	0x080097b4

080080e4 <__mcmp>:
 80080e4:	4603      	mov	r3, r0
 80080e6:	690a      	ldr	r2, [r1, #16]
 80080e8:	6900      	ldr	r0, [r0, #16]
 80080ea:	b530      	push	{r4, r5, lr}
 80080ec:	1a80      	subs	r0, r0, r2
 80080ee:	d10d      	bne.n	800810c <__mcmp+0x28>
 80080f0:	3314      	adds	r3, #20
 80080f2:	3114      	adds	r1, #20
 80080f4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80080f8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80080fc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008100:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008104:	4295      	cmp	r5, r2
 8008106:	d002      	beq.n	800810e <__mcmp+0x2a>
 8008108:	d304      	bcc.n	8008114 <__mcmp+0x30>
 800810a:	2001      	movs	r0, #1
 800810c:	bd30      	pop	{r4, r5, pc}
 800810e:	42a3      	cmp	r3, r4
 8008110:	d3f4      	bcc.n	80080fc <__mcmp+0x18>
 8008112:	e7fb      	b.n	800810c <__mcmp+0x28>
 8008114:	f04f 30ff 	mov.w	r0, #4294967295
 8008118:	e7f8      	b.n	800810c <__mcmp+0x28>
	...

0800811c <__mdiff>:
 800811c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008120:	460c      	mov	r4, r1
 8008122:	4606      	mov	r6, r0
 8008124:	4611      	mov	r1, r2
 8008126:	4620      	mov	r0, r4
 8008128:	4692      	mov	sl, r2
 800812a:	f7ff ffdb 	bl	80080e4 <__mcmp>
 800812e:	1e05      	subs	r5, r0, #0
 8008130:	d111      	bne.n	8008156 <__mdiff+0x3a>
 8008132:	4629      	mov	r1, r5
 8008134:	4630      	mov	r0, r6
 8008136:	f7ff fd11 	bl	8007b5c <_Balloc>
 800813a:	4602      	mov	r2, r0
 800813c:	b928      	cbnz	r0, 800814a <__mdiff+0x2e>
 800813e:	f240 2132 	movw	r1, #562	; 0x232
 8008142:	4b3c      	ldr	r3, [pc, #240]	; (8008234 <__mdiff+0x118>)
 8008144:	483c      	ldr	r0, [pc, #240]	; (8008238 <__mdiff+0x11c>)
 8008146:	f000 fc07 	bl	8008958 <__assert_func>
 800814a:	2301      	movs	r3, #1
 800814c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008150:	4610      	mov	r0, r2
 8008152:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008156:	bfa4      	itt	ge
 8008158:	4653      	movge	r3, sl
 800815a:	46a2      	movge	sl, r4
 800815c:	4630      	mov	r0, r6
 800815e:	f8da 1004 	ldr.w	r1, [sl, #4]
 8008162:	bfa6      	itte	ge
 8008164:	461c      	movge	r4, r3
 8008166:	2500      	movge	r5, #0
 8008168:	2501      	movlt	r5, #1
 800816a:	f7ff fcf7 	bl	8007b5c <_Balloc>
 800816e:	4602      	mov	r2, r0
 8008170:	b918      	cbnz	r0, 800817a <__mdiff+0x5e>
 8008172:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008176:	4b2f      	ldr	r3, [pc, #188]	; (8008234 <__mdiff+0x118>)
 8008178:	e7e4      	b.n	8008144 <__mdiff+0x28>
 800817a:	f100 0814 	add.w	r8, r0, #20
 800817e:	f8da 7010 	ldr.w	r7, [sl, #16]
 8008182:	60c5      	str	r5, [r0, #12]
 8008184:	f04f 0c00 	mov.w	ip, #0
 8008188:	f10a 0514 	add.w	r5, sl, #20
 800818c:	f10a 0010 	add.w	r0, sl, #16
 8008190:	46c2      	mov	sl, r8
 8008192:	6926      	ldr	r6, [r4, #16]
 8008194:	f104 0914 	add.w	r9, r4, #20
 8008198:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800819c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80081a0:	f850 bf04 	ldr.w	fp, [r0, #4]!
 80081a4:	f859 3b04 	ldr.w	r3, [r9], #4
 80081a8:	fa1f f18b 	uxth.w	r1, fp
 80081ac:	4461      	add	r1, ip
 80081ae:	fa1f fc83 	uxth.w	ip, r3
 80081b2:	0c1b      	lsrs	r3, r3, #16
 80081b4:	eba1 010c 	sub.w	r1, r1, ip
 80081b8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80081bc:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80081c0:	b289      	uxth	r1, r1
 80081c2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80081c6:	454e      	cmp	r6, r9
 80081c8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80081cc:	f84a 3b04 	str.w	r3, [sl], #4
 80081d0:	d8e6      	bhi.n	80081a0 <__mdiff+0x84>
 80081d2:	1b33      	subs	r3, r6, r4
 80081d4:	3b15      	subs	r3, #21
 80081d6:	f023 0303 	bic.w	r3, r3, #3
 80081da:	3415      	adds	r4, #21
 80081dc:	3304      	adds	r3, #4
 80081de:	42a6      	cmp	r6, r4
 80081e0:	bf38      	it	cc
 80081e2:	2304      	movcc	r3, #4
 80081e4:	441d      	add	r5, r3
 80081e6:	4443      	add	r3, r8
 80081e8:	461e      	mov	r6, r3
 80081ea:	462c      	mov	r4, r5
 80081ec:	4574      	cmp	r4, lr
 80081ee:	d30e      	bcc.n	800820e <__mdiff+0xf2>
 80081f0:	f10e 0103 	add.w	r1, lr, #3
 80081f4:	1b49      	subs	r1, r1, r5
 80081f6:	f021 0103 	bic.w	r1, r1, #3
 80081fa:	3d03      	subs	r5, #3
 80081fc:	45ae      	cmp	lr, r5
 80081fe:	bf38      	it	cc
 8008200:	2100      	movcc	r1, #0
 8008202:	4419      	add	r1, r3
 8008204:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008208:	b18b      	cbz	r3, 800822e <__mdiff+0x112>
 800820a:	6117      	str	r7, [r2, #16]
 800820c:	e7a0      	b.n	8008150 <__mdiff+0x34>
 800820e:	f854 8b04 	ldr.w	r8, [r4], #4
 8008212:	fa1f f188 	uxth.w	r1, r8
 8008216:	4461      	add	r1, ip
 8008218:	1408      	asrs	r0, r1, #16
 800821a:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800821e:	b289      	uxth	r1, r1
 8008220:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008224:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008228:	f846 1b04 	str.w	r1, [r6], #4
 800822c:	e7de      	b.n	80081ec <__mdiff+0xd0>
 800822e:	3f01      	subs	r7, #1
 8008230:	e7e8      	b.n	8008204 <__mdiff+0xe8>
 8008232:	bf00      	nop
 8008234:	08009724 	.word	0x08009724
 8008238:	080097b4 	.word	0x080097b4

0800823c <__ulp>:
 800823c:	4b11      	ldr	r3, [pc, #68]	; (8008284 <__ulp+0x48>)
 800823e:	400b      	ands	r3, r1
 8008240:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008244:	2b00      	cmp	r3, #0
 8008246:	dd02      	ble.n	800824e <__ulp+0x12>
 8008248:	2000      	movs	r0, #0
 800824a:	4619      	mov	r1, r3
 800824c:	4770      	bx	lr
 800824e:	425b      	negs	r3, r3
 8008250:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008254:	f04f 0000 	mov.w	r0, #0
 8008258:	f04f 0100 	mov.w	r1, #0
 800825c:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008260:	da04      	bge.n	800826c <__ulp+0x30>
 8008262:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008266:	fa43 f102 	asr.w	r1, r3, r2
 800826a:	4770      	bx	lr
 800826c:	f1a2 0314 	sub.w	r3, r2, #20
 8008270:	2b1e      	cmp	r3, #30
 8008272:	bfd6      	itet	le
 8008274:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8008278:	2301      	movgt	r3, #1
 800827a:	fa22 f303 	lsrle.w	r3, r2, r3
 800827e:	4618      	mov	r0, r3
 8008280:	4770      	bx	lr
 8008282:	bf00      	nop
 8008284:	7ff00000 	.word	0x7ff00000

08008288 <__b2d>:
 8008288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800828c:	6907      	ldr	r7, [r0, #16]
 800828e:	f100 0914 	add.w	r9, r0, #20
 8008292:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8008296:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800829a:	f1a7 0804 	sub.w	r8, r7, #4
 800829e:	4630      	mov	r0, r6
 80082a0:	f7ff fd52 	bl	8007d48 <__hi0bits>
 80082a4:	f1c0 0320 	rsb	r3, r0, #32
 80082a8:	280a      	cmp	r0, #10
 80082aa:	600b      	str	r3, [r1, #0]
 80082ac:	491f      	ldr	r1, [pc, #124]	; (800832c <__b2d+0xa4>)
 80082ae:	dc17      	bgt.n	80082e0 <__b2d+0x58>
 80082b0:	45c1      	cmp	r9, r8
 80082b2:	bf28      	it	cs
 80082b4:	2200      	movcs	r2, #0
 80082b6:	f1c0 0c0b 	rsb	ip, r0, #11
 80082ba:	fa26 f30c 	lsr.w	r3, r6, ip
 80082be:	bf38      	it	cc
 80082c0:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80082c4:	ea43 0501 	orr.w	r5, r3, r1
 80082c8:	f100 0315 	add.w	r3, r0, #21
 80082cc:	fa06 f303 	lsl.w	r3, r6, r3
 80082d0:	fa22 f20c 	lsr.w	r2, r2, ip
 80082d4:	ea43 0402 	orr.w	r4, r3, r2
 80082d8:	4620      	mov	r0, r4
 80082da:	4629      	mov	r1, r5
 80082dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082e0:	45c1      	cmp	r9, r8
 80082e2:	bf2e      	itee	cs
 80082e4:	2200      	movcs	r2, #0
 80082e6:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80082ea:	f1a7 0808 	subcc.w	r8, r7, #8
 80082ee:	f1b0 030b 	subs.w	r3, r0, #11
 80082f2:	d016      	beq.n	8008322 <__b2d+0x9a>
 80082f4:	f1c3 0720 	rsb	r7, r3, #32
 80082f8:	fa22 f107 	lsr.w	r1, r2, r7
 80082fc:	45c8      	cmp	r8, r9
 80082fe:	fa06 f603 	lsl.w	r6, r6, r3
 8008302:	ea46 0601 	orr.w	r6, r6, r1
 8008306:	bf94      	ite	ls
 8008308:	2100      	movls	r1, #0
 800830a:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800830e:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8008312:	fa02 f003 	lsl.w	r0, r2, r3
 8008316:	40f9      	lsrs	r1, r7
 8008318:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800831c:	ea40 0401 	orr.w	r4, r0, r1
 8008320:	e7da      	b.n	80082d8 <__b2d+0x50>
 8008322:	4614      	mov	r4, r2
 8008324:	ea46 0501 	orr.w	r5, r6, r1
 8008328:	e7d6      	b.n	80082d8 <__b2d+0x50>
 800832a:	bf00      	nop
 800832c:	3ff00000 	.word	0x3ff00000

08008330 <__d2b>:
 8008330:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008334:	2101      	movs	r1, #1
 8008336:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800833a:	4690      	mov	r8, r2
 800833c:	461d      	mov	r5, r3
 800833e:	f7ff fc0d 	bl	8007b5c <_Balloc>
 8008342:	4604      	mov	r4, r0
 8008344:	b930      	cbnz	r0, 8008354 <__d2b+0x24>
 8008346:	4602      	mov	r2, r0
 8008348:	f240 310a 	movw	r1, #778	; 0x30a
 800834c:	4b24      	ldr	r3, [pc, #144]	; (80083e0 <__d2b+0xb0>)
 800834e:	4825      	ldr	r0, [pc, #148]	; (80083e4 <__d2b+0xb4>)
 8008350:	f000 fb02 	bl	8008958 <__assert_func>
 8008354:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008358:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800835c:	bb2d      	cbnz	r5, 80083aa <__d2b+0x7a>
 800835e:	9301      	str	r3, [sp, #4]
 8008360:	f1b8 0300 	subs.w	r3, r8, #0
 8008364:	d026      	beq.n	80083b4 <__d2b+0x84>
 8008366:	4668      	mov	r0, sp
 8008368:	9300      	str	r3, [sp, #0]
 800836a:	f7ff fd0d 	bl	8007d88 <__lo0bits>
 800836e:	9900      	ldr	r1, [sp, #0]
 8008370:	b1f0      	cbz	r0, 80083b0 <__d2b+0x80>
 8008372:	9a01      	ldr	r2, [sp, #4]
 8008374:	f1c0 0320 	rsb	r3, r0, #32
 8008378:	fa02 f303 	lsl.w	r3, r2, r3
 800837c:	430b      	orrs	r3, r1
 800837e:	40c2      	lsrs	r2, r0
 8008380:	6163      	str	r3, [r4, #20]
 8008382:	9201      	str	r2, [sp, #4]
 8008384:	9b01      	ldr	r3, [sp, #4]
 8008386:	2b00      	cmp	r3, #0
 8008388:	bf14      	ite	ne
 800838a:	2102      	movne	r1, #2
 800838c:	2101      	moveq	r1, #1
 800838e:	61a3      	str	r3, [r4, #24]
 8008390:	6121      	str	r1, [r4, #16]
 8008392:	b1c5      	cbz	r5, 80083c6 <__d2b+0x96>
 8008394:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008398:	4405      	add	r5, r0
 800839a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800839e:	603d      	str	r5, [r7, #0]
 80083a0:	6030      	str	r0, [r6, #0]
 80083a2:	4620      	mov	r0, r4
 80083a4:	b002      	add	sp, #8
 80083a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80083ae:	e7d6      	b.n	800835e <__d2b+0x2e>
 80083b0:	6161      	str	r1, [r4, #20]
 80083b2:	e7e7      	b.n	8008384 <__d2b+0x54>
 80083b4:	a801      	add	r0, sp, #4
 80083b6:	f7ff fce7 	bl	8007d88 <__lo0bits>
 80083ba:	2101      	movs	r1, #1
 80083bc:	9b01      	ldr	r3, [sp, #4]
 80083be:	6121      	str	r1, [r4, #16]
 80083c0:	6163      	str	r3, [r4, #20]
 80083c2:	3020      	adds	r0, #32
 80083c4:	e7e5      	b.n	8008392 <__d2b+0x62>
 80083c6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80083ca:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80083ce:	6038      	str	r0, [r7, #0]
 80083d0:	6918      	ldr	r0, [r3, #16]
 80083d2:	f7ff fcb9 	bl	8007d48 <__hi0bits>
 80083d6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80083da:	6031      	str	r1, [r6, #0]
 80083dc:	e7e1      	b.n	80083a2 <__d2b+0x72>
 80083de:	bf00      	nop
 80083e0:	08009724 	.word	0x08009724
 80083e4:	080097b4 	.word	0x080097b4

080083e8 <__ratio>:
 80083e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083ec:	4688      	mov	r8, r1
 80083ee:	4669      	mov	r1, sp
 80083f0:	4681      	mov	r9, r0
 80083f2:	f7ff ff49 	bl	8008288 <__b2d>
 80083f6:	460f      	mov	r7, r1
 80083f8:	4604      	mov	r4, r0
 80083fa:	460d      	mov	r5, r1
 80083fc:	4640      	mov	r0, r8
 80083fe:	a901      	add	r1, sp, #4
 8008400:	f7ff ff42 	bl	8008288 <__b2d>
 8008404:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008408:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800840c:	468b      	mov	fp, r1
 800840e:	eba3 0c02 	sub.w	ip, r3, r2
 8008412:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008416:	1a9b      	subs	r3, r3, r2
 8008418:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800841c:	2b00      	cmp	r3, #0
 800841e:	bfd5      	itete	le
 8008420:	460a      	movle	r2, r1
 8008422:	462a      	movgt	r2, r5
 8008424:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008428:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800842c:	bfd8      	it	le
 800842e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008432:	465b      	mov	r3, fp
 8008434:	4602      	mov	r2, r0
 8008436:	4639      	mov	r1, r7
 8008438:	4620      	mov	r0, r4
 800843a:	f7f8 f977 	bl	800072c <__aeabi_ddiv>
 800843e:	b003      	add	sp, #12
 8008440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008444 <__copybits>:
 8008444:	3901      	subs	r1, #1
 8008446:	b570      	push	{r4, r5, r6, lr}
 8008448:	1149      	asrs	r1, r1, #5
 800844a:	6914      	ldr	r4, [r2, #16]
 800844c:	3101      	adds	r1, #1
 800844e:	f102 0314 	add.w	r3, r2, #20
 8008452:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008456:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800845a:	1f05      	subs	r5, r0, #4
 800845c:	42a3      	cmp	r3, r4
 800845e:	d30c      	bcc.n	800847a <__copybits+0x36>
 8008460:	1aa3      	subs	r3, r4, r2
 8008462:	3b11      	subs	r3, #17
 8008464:	f023 0303 	bic.w	r3, r3, #3
 8008468:	3211      	adds	r2, #17
 800846a:	42a2      	cmp	r2, r4
 800846c:	bf88      	it	hi
 800846e:	2300      	movhi	r3, #0
 8008470:	4418      	add	r0, r3
 8008472:	2300      	movs	r3, #0
 8008474:	4288      	cmp	r0, r1
 8008476:	d305      	bcc.n	8008484 <__copybits+0x40>
 8008478:	bd70      	pop	{r4, r5, r6, pc}
 800847a:	f853 6b04 	ldr.w	r6, [r3], #4
 800847e:	f845 6f04 	str.w	r6, [r5, #4]!
 8008482:	e7eb      	b.n	800845c <__copybits+0x18>
 8008484:	f840 3b04 	str.w	r3, [r0], #4
 8008488:	e7f4      	b.n	8008474 <__copybits+0x30>

0800848a <__any_on>:
 800848a:	f100 0214 	add.w	r2, r0, #20
 800848e:	6900      	ldr	r0, [r0, #16]
 8008490:	114b      	asrs	r3, r1, #5
 8008492:	4298      	cmp	r0, r3
 8008494:	b510      	push	{r4, lr}
 8008496:	db11      	blt.n	80084bc <__any_on+0x32>
 8008498:	dd0a      	ble.n	80084b0 <__any_on+0x26>
 800849a:	f011 011f 	ands.w	r1, r1, #31
 800849e:	d007      	beq.n	80084b0 <__any_on+0x26>
 80084a0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80084a4:	fa24 f001 	lsr.w	r0, r4, r1
 80084a8:	fa00 f101 	lsl.w	r1, r0, r1
 80084ac:	428c      	cmp	r4, r1
 80084ae:	d10b      	bne.n	80084c8 <__any_on+0x3e>
 80084b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d803      	bhi.n	80084c0 <__any_on+0x36>
 80084b8:	2000      	movs	r0, #0
 80084ba:	bd10      	pop	{r4, pc}
 80084bc:	4603      	mov	r3, r0
 80084be:	e7f7      	b.n	80084b0 <__any_on+0x26>
 80084c0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80084c4:	2900      	cmp	r1, #0
 80084c6:	d0f5      	beq.n	80084b4 <__any_on+0x2a>
 80084c8:	2001      	movs	r0, #1
 80084ca:	e7f6      	b.n	80084ba <__any_on+0x30>

080084cc <_calloc_r>:
 80084cc:	b538      	push	{r3, r4, r5, lr}
 80084ce:	fb02 f501 	mul.w	r5, r2, r1
 80084d2:	4629      	mov	r1, r5
 80084d4:	f000 f854 	bl	8008580 <_malloc_r>
 80084d8:	4604      	mov	r4, r0
 80084da:	b118      	cbz	r0, 80084e4 <_calloc_r+0x18>
 80084dc:	462a      	mov	r2, r5
 80084de:	2100      	movs	r1, #0
 80084e0:	f7fc fbdc 	bl	8004c9c <memset>
 80084e4:	4620      	mov	r0, r4
 80084e6:	bd38      	pop	{r3, r4, r5, pc}

080084e8 <_free_r>:
 80084e8:	b538      	push	{r3, r4, r5, lr}
 80084ea:	4605      	mov	r5, r0
 80084ec:	2900      	cmp	r1, #0
 80084ee:	d043      	beq.n	8008578 <_free_r+0x90>
 80084f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084f4:	1f0c      	subs	r4, r1, #4
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	bfb8      	it	lt
 80084fa:	18e4      	addlt	r4, r4, r3
 80084fc:	f000 fa76 	bl	80089ec <__malloc_lock>
 8008500:	4a1e      	ldr	r2, [pc, #120]	; (800857c <_free_r+0x94>)
 8008502:	6813      	ldr	r3, [r2, #0]
 8008504:	4610      	mov	r0, r2
 8008506:	b933      	cbnz	r3, 8008516 <_free_r+0x2e>
 8008508:	6063      	str	r3, [r4, #4]
 800850a:	6014      	str	r4, [r2, #0]
 800850c:	4628      	mov	r0, r5
 800850e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008512:	f000 ba71 	b.w	80089f8 <__malloc_unlock>
 8008516:	42a3      	cmp	r3, r4
 8008518:	d90a      	bls.n	8008530 <_free_r+0x48>
 800851a:	6821      	ldr	r1, [r4, #0]
 800851c:	1862      	adds	r2, r4, r1
 800851e:	4293      	cmp	r3, r2
 8008520:	bf01      	itttt	eq
 8008522:	681a      	ldreq	r2, [r3, #0]
 8008524:	685b      	ldreq	r3, [r3, #4]
 8008526:	1852      	addeq	r2, r2, r1
 8008528:	6022      	streq	r2, [r4, #0]
 800852a:	6063      	str	r3, [r4, #4]
 800852c:	6004      	str	r4, [r0, #0]
 800852e:	e7ed      	b.n	800850c <_free_r+0x24>
 8008530:	461a      	mov	r2, r3
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	b10b      	cbz	r3, 800853a <_free_r+0x52>
 8008536:	42a3      	cmp	r3, r4
 8008538:	d9fa      	bls.n	8008530 <_free_r+0x48>
 800853a:	6811      	ldr	r1, [r2, #0]
 800853c:	1850      	adds	r0, r2, r1
 800853e:	42a0      	cmp	r0, r4
 8008540:	d10b      	bne.n	800855a <_free_r+0x72>
 8008542:	6820      	ldr	r0, [r4, #0]
 8008544:	4401      	add	r1, r0
 8008546:	1850      	adds	r0, r2, r1
 8008548:	4283      	cmp	r3, r0
 800854a:	6011      	str	r1, [r2, #0]
 800854c:	d1de      	bne.n	800850c <_free_r+0x24>
 800854e:	6818      	ldr	r0, [r3, #0]
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	4401      	add	r1, r0
 8008554:	6011      	str	r1, [r2, #0]
 8008556:	6053      	str	r3, [r2, #4]
 8008558:	e7d8      	b.n	800850c <_free_r+0x24>
 800855a:	d902      	bls.n	8008562 <_free_r+0x7a>
 800855c:	230c      	movs	r3, #12
 800855e:	602b      	str	r3, [r5, #0]
 8008560:	e7d4      	b.n	800850c <_free_r+0x24>
 8008562:	6820      	ldr	r0, [r4, #0]
 8008564:	1821      	adds	r1, r4, r0
 8008566:	428b      	cmp	r3, r1
 8008568:	bf01      	itttt	eq
 800856a:	6819      	ldreq	r1, [r3, #0]
 800856c:	685b      	ldreq	r3, [r3, #4]
 800856e:	1809      	addeq	r1, r1, r0
 8008570:	6021      	streq	r1, [r4, #0]
 8008572:	6063      	str	r3, [r4, #4]
 8008574:	6054      	str	r4, [r2, #4]
 8008576:	e7c9      	b.n	800850c <_free_r+0x24>
 8008578:	bd38      	pop	{r3, r4, r5, pc}
 800857a:	bf00      	nop
 800857c:	20000204 	.word	0x20000204

08008580 <_malloc_r>:
 8008580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008582:	1ccd      	adds	r5, r1, #3
 8008584:	f025 0503 	bic.w	r5, r5, #3
 8008588:	3508      	adds	r5, #8
 800858a:	2d0c      	cmp	r5, #12
 800858c:	bf38      	it	cc
 800858e:	250c      	movcc	r5, #12
 8008590:	2d00      	cmp	r5, #0
 8008592:	4606      	mov	r6, r0
 8008594:	db01      	blt.n	800859a <_malloc_r+0x1a>
 8008596:	42a9      	cmp	r1, r5
 8008598:	d903      	bls.n	80085a2 <_malloc_r+0x22>
 800859a:	230c      	movs	r3, #12
 800859c:	6033      	str	r3, [r6, #0]
 800859e:	2000      	movs	r0, #0
 80085a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085a2:	f000 fa23 	bl	80089ec <__malloc_lock>
 80085a6:	4921      	ldr	r1, [pc, #132]	; (800862c <_malloc_r+0xac>)
 80085a8:	680a      	ldr	r2, [r1, #0]
 80085aa:	4614      	mov	r4, r2
 80085ac:	b99c      	cbnz	r4, 80085d6 <_malloc_r+0x56>
 80085ae:	4f20      	ldr	r7, [pc, #128]	; (8008630 <_malloc_r+0xb0>)
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	b923      	cbnz	r3, 80085be <_malloc_r+0x3e>
 80085b4:	4621      	mov	r1, r4
 80085b6:	4630      	mov	r0, r6
 80085b8:	f000 f99e 	bl	80088f8 <_sbrk_r>
 80085bc:	6038      	str	r0, [r7, #0]
 80085be:	4629      	mov	r1, r5
 80085c0:	4630      	mov	r0, r6
 80085c2:	f000 f999 	bl	80088f8 <_sbrk_r>
 80085c6:	1c43      	adds	r3, r0, #1
 80085c8:	d123      	bne.n	8008612 <_malloc_r+0x92>
 80085ca:	230c      	movs	r3, #12
 80085cc:	4630      	mov	r0, r6
 80085ce:	6033      	str	r3, [r6, #0]
 80085d0:	f000 fa12 	bl	80089f8 <__malloc_unlock>
 80085d4:	e7e3      	b.n	800859e <_malloc_r+0x1e>
 80085d6:	6823      	ldr	r3, [r4, #0]
 80085d8:	1b5b      	subs	r3, r3, r5
 80085da:	d417      	bmi.n	800860c <_malloc_r+0x8c>
 80085dc:	2b0b      	cmp	r3, #11
 80085de:	d903      	bls.n	80085e8 <_malloc_r+0x68>
 80085e0:	6023      	str	r3, [r4, #0]
 80085e2:	441c      	add	r4, r3
 80085e4:	6025      	str	r5, [r4, #0]
 80085e6:	e004      	b.n	80085f2 <_malloc_r+0x72>
 80085e8:	6863      	ldr	r3, [r4, #4]
 80085ea:	42a2      	cmp	r2, r4
 80085ec:	bf0c      	ite	eq
 80085ee:	600b      	streq	r3, [r1, #0]
 80085f0:	6053      	strne	r3, [r2, #4]
 80085f2:	4630      	mov	r0, r6
 80085f4:	f000 fa00 	bl	80089f8 <__malloc_unlock>
 80085f8:	f104 000b 	add.w	r0, r4, #11
 80085fc:	1d23      	adds	r3, r4, #4
 80085fe:	f020 0007 	bic.w	r0, r0, #7
 8008602:	1ac2      	subs	r2, r0, r3
 8008604:	d0cc      	beq.n	80085a0 <_malloc_r+0x20>
 8008606:	1a1b      	subs	r3, r3, r0
 8008608:	50a3      	str	r3, [r4, r2]
 800860a:	e7c9      	b.n	80085a0 <_malloc_r+0x20>
 800860c:	4622      	mov	r2, r4
 800860e:	6864      	ldr	r4, [r4, #4]
 8008610:	e7cc      	b.n	80085ac <_malloc_r+0x2c>
 8008612:	1cc4      	adds	r4, r0, #3
 8008614:	f024 0403 	bic.w	r4, r4, #3
 8008618:	42a0      	cmp	r0, r4
 800861a:	d0e3      	beq.n	80085e4 <_malloc_r+0x64>
 800861c:	1a21      	subs	r1, r4, r0
 800861e:	4630      	mov	r0, r6
 8008620:	f000 f96a 	bl	80088f8 <_sbrk_r>
 8008624:	3001      	adds	r0, #1
 8008626:	d1dd      	bne.n	80085e4 <_malloc_r+0x64>
 8008628:	e7cf      	b.n	80085ca <_malloc_r+0x4a>
 800862a:	bf00      	nop
 800862c:	20000204 	.word	0x20000204
 8008630:	20000208 	.word	0x20000208

08008634 <__ssputs_r>:
 8008634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008638:	688e      	ldr	r6, [r1, #8]
 800863a:	4682      	mov	sl, r0
 800863c:	429e      	cmp	r6, r3
 800863e:	460c      	mov	r4, r1
 8008640:	4690      	mov	r8, r2
 8008642:	461f      	mov	r7, r3
 8008644:	d838      	bhi.n	80086b8 <__ssputs_r+0x84>
 8008646:	898a      	ldrh	r2, [r1, #12]
 8008648:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800864c:	d032      	beq.n	80086b4 <__ssputs_r+0x80>
 800864e:	6825      	ldr	r5, [r4, #0]
 8008650:	6909      	ldr	r1, [r1, #16]
 8008652:	3301      	adds	r3, #1
 8008654:	eba5 0901 	sub.w	r9, r5, r1
 8008658:	6965      	ldr	r5, [r4, #20]
 800865a:	444b      	add	r3, r9
 800865c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008660:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008664:	106d      	asrs	r5, r5, #1
 8008666:	429d      	cmp	r5, r3
 8008668:	bf38      	it	cc
 800866a:	461d      	movcc	r5, r3
 800866c:	0553      	lsls	r3, r2, #21
 800866e:	d531      	bpl.n	80086d4 <__ssputs_r+0xa0>
 8008670:	4629      	mov	r1, r5
 8008672:	f7ff ff85 	bl	8008580 <_malloc_r>
 8008676:	4606      	mov	r6, r0
 8008678:	b950      	cbnz	r0, 8008690 <__ssputs_r+0x5c>
 800867a:	230c      	movs	r3, #12
 800867c:	f04f 30ff 	mov.w	r0, #4294967295
 8008680:	f8ca 3000 	str.w	r3, [sl]
 8008684:	89a3      	ldrh	r3, [r4, #12]
 8008686:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800868a:	81a3      	strh	r3, [r4, #12]
 800868c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008690:	464a      	mov	r2, r9
 8008692:	6921      	ldr	r1, [r4, #16]
 8008694:	f7ff fa54 	bl	8007b40 <memcpy>
 8008698:	89a3      	ldrh	r3, [r4, #12]
 800869a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800869e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086a2:	81a3      	strh	r3, [r4, #12]
 80086a4:	6126      	str	r6, [r4, #16]
 80086a6:	444e      	add	r6, r9
 80086a8:	6026      	str	r6, [r4, #0]
 80086aa:	463e      	mov	r6, r7
 80086ac:	6165      	str	r5, [r4, #20]
 80086ae:	eba5 0509 	sub.w	r5, r5, r9
 80086b2:	60a5      	str	r5, [r4, #8]
 80086b4:	42be      	cmp	r6, r7
 80086b6:	d900      	bls.n	80086ba <__ssputs_r+0x86>
 80086b8:	463e      	mov	r6, r7
 80086ba:	4632      	mov	r2, r6
 80086bc:	4641      	mov	r1, r8
 80086be:	6820      	ldr	r0, [r4, #0]
 80086c0:	f000 f97a 	bl	80089b8 <memmove>
 80086c4:	68a3      	ldr	r3, [r4, #8]
 80086c6:	6822      	ldr	r2, [r4, #0]
 80086c8:	1b9b      	subs	r3, r3, r6
 80086ca:	4432      	add	r2, r6
 80086cc:	2000      	movs	r0, #0
 80086ce:	60a3      	str	r3, [r4, #8]
 80086d0:	6022      	str	r2, [r4, #0]
 80086d2:	e7db      	b.n	800868c <__ssputs_r+0x58>
 80086d4:	462a      	mov	r2, r5
 80086d6:	f000 f995 	bl	8008a04 <_realloc_r>
 80086da:	4606      	mov	r6, r0
 80086dc:	2800      	cmp	r0, #0
 80086de:	d1e1      	bne.n	80086a4 <__ssputs_r+0x70>
 80086e0:	4650      	mov	r0, sl
 80086e2:	6921      	ldr	r1, [r4, #16]
 80086e4:	f7ff ff00 	bl	80084e8 <_free_r>
 80086e8:	e7c7      	b.n	800867a <__ssputs_r+0x46>
	...

080086ec <_svfiprintf_r>:
 80086ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086f0:	4698      	mov	r8, r3
 80086f2:	898b      	ldrh	r3, [r1, #12]
 80086f4:	4607      	mov	r7, r0
 80086f6:	061b      	lsls	r3, r3, #24
 80086f8:	460d      	mov	r5, r1
 80086fa:	4614      	mov	r4, r2
 80086fc:	b09d      	sub	sp, #116	; 0x74
 80086fe:	d50e      	bpl.n	800871e <_svfiprintf_r+0x32>
 8008700:	690b      	ldr	r3, [r1, #16]
 8008702:	b963      	cbnz	r3, 800871e <_svfiprintf_r+0x32>
 8008704:	2140      	movs	r1, #64	; 0x40
 8008706:	f7ff ff3b 	bl	8008580 <_malloc_r>
 800870a:	6028      	str	r0, [r5, #0]
 800870c:	6128      	str	r0, [r5, #16]
 800870e:	b920      	cbnz	r0, 800871a <_svfiprintf_r+0x2e>
 8008710:	230c      	movs	r3, #12
 8008712:	603b      	str	r3, [r7, #0]
 8008714:	f04f 30ff 	mov.w	r0, #4294967295
 8008718:	e0d1      	b.n	80088be <_svfiprintf_r+0x1d2>
 800871a:	2340      	movs	r3, #64	; 0x40
 800871c:	616b      	str	r3, [r5, #20]
 800871e:	2300      	movs	r3, #0
 8008720:	9309      	str	r3, [sp, #36]	; 0x24
 8008722:	2320      	movs	r3, #32
 8008724:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008728:	2330      	movs	r3, #48	; 0x30
 800872a:	f04f 0901 	mov.w	r9, #1
 800872e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008732:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80088d8 <_svfiprintf_r+0x1ec>
 8008736:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800873a:	4623      	mov	r3, r4
 800873c:	469a      	mov	sl, r3
 800873e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008742:	b10a      	cbz	r2, 8008748 <_svfiprintf_r+0x5c>
 8008744:	2a25      	cmp	r2, #37	; 0x25
 8008746:	d1f9      	bne.n	800873c <_svfiprintf_r+0x50>
 8008748:	ebba 0b04 	subs.w	fp, sl, r4
 800874c:	d00b      	beq.n	8008766 <_svfiprintf_r+0x7a>
 800874e:	465b      	mov	r3, fp
 8008750:	4622      	mov	r2, r4
 8008752:	4629      	mov	r1, r5
 8008754:	4638      	mov	r0, r7
 8008756:	f7ff ff6d 	bl	8008634 <__ssputs_r>
 800875a:	3001      	adds	r0, #1
 800875c:	f000 80aa 	beq.w	80088b4 <_svfiprintf_r+0x1c8>
 8008760:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008762:	445a      	add	r2, fp
 8008764:	9209      	str	r2, [sp, #36]	; 0x24
 8008766:	f89a 3000 	ldrb.w	r3, [sl]
 800876a:	2b00      	cmp	r3, #0
 800876c:	f000 80a2 	beq.w	80088b4 <_svfiprintf_r+0x1c8>
 8008770:	2300      	movs	r3, #0
 8008772:	f04f 32ff 	mov.w	r2, #4294967295
 8008776:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800877a:	f10a 0a01 	add.w	sl, sl, #1
 800877e:	9304      	str	r3, [sp, #16]
 8008780:	9307      	str	r3, [sp, #28]
 8008782:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008786:	931a      	str	r3, [sp, #104]	; 0x68
 8008788:	4654      	mov	r4, sl
 800878a:	2205      	movs	r2, #5
 800878c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008790:	4851      	ldr	r0, [pc, #324]	; (80088d8 <_svfiprintf_r+0x1ec>)
 8008792:	f7ff f9c7 	bl	8007b24 <memchr>
 8008796:	9a04      	ldr	r2, [sp, #16]
 8008798:	b9d8      	cbnz	r0, 80087d2 <_svfiprintf_r+0xe6>
 800879a:	06d0      	lsls	r0, r2, #27
 800879c:	bf44      	itt	mi
 800879e:	2320      	movmi	r3, #32
 80087a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80087a4:	0711      	lsls	r1, r2, #28
 80087a6:	bf44      	itt	mi
 80087a8:	232b      	movmi	r3, #43	; 0x2b
 80087aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80087ae:	f89a 3000 	ldrb.w	r3, [sl]
 80087b2:	2b2a      	cmp	r3, #42	; 0x2a
 80087b4:	d015      	beq.n	80087e2 <_svfiprintf_r+0xf6>
 80087b6:	4654      	mov	r4, sl
 80087b8:	2000      	movs	r0, #0
 80087ba:	f04f 0c0a 	mov.w	ip, #10
 80087be:	9a07      	ldr	r2, [sp, #28]
 80087c0:	4621      	mov	r1, r4
 80087c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80087c6:	3b30      	subs	r3, #48	; 0x30
 80087c8:	2b09      	cmp	r3, #9
 80087ca:	d94e      	bls.n	800886a <_svfiprintf_r+0x17e>
 80087cc:	b1b0      	cbz	r0, 80087fc <_svfiprintf_r+0x110>
 80087ce:	9207      	str	r2, [sp, #28]
 80087d0:	e014      	b.n	80087fc <_svfiprintf_r+0x110>
 80087d2:	eba0 0308 	sub.w	r3, r0, r8
 80087d6:	fa09 f303 	lsl.w	r3, r9, r3
 80087da:	4313      	orrs	r3, r2
 80087dc:	46a2      	mov	sl, r4
 80087de:	9304      	str	r3, [sp, #16]
 80087e0:	e7d2      	b.n	8008788 <_svfiprintf_r+0x9c>
 80087e2:	9b03      	ldr	r3, [sp, #12]
 80087e4:	1d19      	adds	r1, r3, #4
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	9103      	str	r1, [sp, #12]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	bfbb      	ittet	lt
 80087ee:	425b      	neglt	r3, r3
 80087f0:	f042 0202 	orrlt.w	r2, r2, #2
 80087f4:	9307      	strge	r3, [sp, #28]
 80087f6:	9307      	strlt	r3, [sp, #28]
 80087f8:	bfb8      	it	lt
 80087fa:	9204      	strlt	r2, [sp, #16]
 80087fc:	7823      	ldrb	r3, [r4, #0]
 80087fe:	2b2e      	cmp	r3, #46	; 0x2e
 8008800:	d10c      	bne.n	800881c <_svfiprintf_r+0x130>
 8008802:	7863      	ldrb	r3, [r4, #1]
 8008804:	2b2a      	cmp	r3, #42	; 0x2a
 8008806:	d135      	bne.n	8008874 <_svfiprintf_r+0x188>
 8008808:	9b03      	ldr	r3, [sp, #12]
 800880a:	3402      	adds	r4, #2
 800880c:	1d1a      	adds	r2, r3, #4
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	9203      	str	r2, [sp, #12]
 8008812:	2b00      	cmp	r3, #0
 8008814:	bfb8      	it	lt
 8008816:	f04f 33ff 	movlt.w	r3, #4294967295
 800881a:	9305      	str	r3, [sp, #20]
 800881c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80088e8 <_svfiprintf_r+0x1fc>
 8008820:	2203      	movs	r2, #3
 8008822:	4650      	mov	r0, sl
 8008824:	7821      	ldrb	r1, [r4, #0]
 8008826:	f7ff f97d 	bl	8007b24 <memchr>
 800882a:	b140      	cbz	r0, 800883e <_svfiprintf_r+0x152>
 800882c:	2340      	movs	r3, #64	; 0x40
 800882e:	eba0 000a 	sub.w	r0, r0, sl
 8008832:	fa03 f000 	lsl.w	r0, r3, r0
 8008836:	9b04      	ldr	r3, [sp, #16]
 8008838:	3401      	adds	r4, #1
 800883a:	4303      	orrs	r3, r0
 800883c:	9304      	str	r3, [sp, #16]
 800883e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008842:	2206      	movs	r2, #6
 8008844:	4825      	ldr	r0, [pc, #148]	; (80088dc <_svfiprintf_r+0x1f0>)
 8008846:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800884a:	f7ff f96b 	bl	8007b24 <memchr>
 800884e:	2800      	cmp	r0, #0
 8008850:	d038      	beq.n	80088c4 <_svfiprintf_r+0x1d8>
 8008852:	4b23      	ldr	r3, [pc, #140]	; (80088e0 <_svfiprintf_r+0x1f4>)
 8008854:	bb1b      	cbnz	r3, 800889e <_svfiprintf_r+0x1b2>
 8008856:	9b03      	ldr	r3, [sp, #12]
 8008858:	3307      	adds	r3, #7
 800885a:	f023 0307 	bic.w	r3, r3, #7
 800885e:	3308      	adds	r3, #8
 8008860:	9303      	str	r3, [sp, #12]
 8008862:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008864:	4433      	add	r3, r6
 8008866:	9309      	str	r3, [sp, #36]	; 0x24
 8008868:	e767      	b.n	800873a <_svfiprintf_r+0x4e>
 800886a:	460c      	mov	r4, r1
 800886c:	2001      	movs	r0, #1
 800886e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008872:	e7a5      	b.n	80087c0 <_svfiprintf_r+0xd4>
 8008874:	2300      	movs	r3, #0
 8008876:	f04f 0c0a 	mov.w	ip, #10
 800887a:	4619      	mov	r1, r3
 800887c:	3401      	adds	r4, #1
 800887e:	9305      	str	r3, [sp, #20]
 8008880:	4620      	mov	r0, r4
 8008882:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008886:	3a30      	subs	r2, #48	; 0x30
 8008888:	2a09      	cmp	r2, #9
 800888a:	d903      	bls.n	8008894 <_svfiprintf_r+0x1a8>
 800888c:	2b00      	cmp	r3, #0
 800888e:	d0c5      	beq.n	800881c <_svfiprintf_r+0x130>
 8008890:	9105      	str	r1, [sp, #20]
 8008892:	e7c3      	b.n	800881c <_svfiprintf_r+0x130>
 8008894:	4604      	mov	r4, r0
 8008896:	2301      	movs	r3, #1
 8008898:	fb0c 2101 	mla	r1, ip, r1, r2
 800889c:	e7f0      	b.n	8008880 <_svfiprintf_r+0x194>
 800889e:	ab03      	add	r3, sp, #12
 80088a0:	9300      	str	r3, [sp, #0]
 80088a2:	462a      	mov	r2, r5
 80088a4:	4638      	mov	r0, r7
 80088a6:	4b0f      	ldr	r3, [pc, #60]	; (80088e4 <_svfiprintf_r+0x1f8>)
 80088a8:	a904      	add	r1, sp, #16
 80088aa:	f7fc fa9d 	bl	8004de8 <_printf_float>
 80088ae:	1c42      	adds	r2, r0, #1
 80088b0:	4606      	mov	r6, r0
 80088b2:	d1d6      	bne.n	8008862 <_svfiprintf_r+0x176>
 80088b4:	89ab      	ldrh	r3, [r5, #12]
 80088b6:	065b      	lsls	r3, r3, #25
 80088b8:	f53f af2c 	bmi.w	8008714 <_svfiprintf_r+0x28>
 80088bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80088be:	b01d      	add	sp, #116	; 0x74
 80088c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088c4:	ab03      	add	r3, sp, #12
 80088c6:	9300      	str	r3, [sp, #0]
 80088c8:	462a      	mov	r2, r5
 80088ca:	4638      	mov	r0, r7
 80088cc:	4b05      	ldr	r3, [pc, #20]	; (80088e4 <_svfiprintf_r+0x1f8>)
 80088ce:	a904      	add	r1, sp, #16
 80088d0:	f7fc fd26 	bl	8005320 <_printf_i>
 80088d4:	e7eb      	b.n	80088ae <_svfiprintf_r+0x1c2>
 80088d6:	bf00      	nop
 80088d8:	08009914 	.word	0x08009914
 80088dc:	0800991e 	.word	0x0800991e
 80088e0:	08004de9 	.word	0x08004de9
 80088e4:	08008635 	.word	0x08008635
 80088e8:	0800991a 	.word	0x0800991a

080088ec <nan>:
 80088ec:	2000      	movs	r0, #0
 80088ee:	4901      	ldr	r1, [pc, #4]	; (80088f4 <nan+0x8>)
 80088f0:	4770      	bx	lr
 80088f2:	bf00      	nop
 80088f4:	7ff80000 	.word	0x7ff80000

080088f8 <_sbrk_r>:
 80088f8:	b538      	push	{r3, r4, r5, lr}
 80088fa:	2300      	movs	r3, #0
 80088fc:	4d05      	ldr	r5, [pc, #20]	; (8008914 <_sbrk_r+0x1c>)
 80088fe:	4604      	mov	r4, r0
 8008900:	4608      	mov	r0, r1
 8008902:	602b      	str	r3, [r5, #0]
 8008904:	f7f9 fab8 	bl	8001e78 <_sbrk>
 8008908:	1c43      	adds	r3, r0, #1
 800890a:	d102      	bne.n	8008912 <_sbrk_r+0x1a>
 800890c:	682b      	ldr	r3, [r5, #0]
 800890e:	b103      	cbz	r3, 8008912 <_sbrk_r+0x1a>
 8008910:	6023      	str	r3, [r4, #0]
 8008912:	bd38      	pop	{r3, r4, r5, pc}
 8008914:	20000388 	.word	0x20000388

08008918 <strncmp>:
 8008918:	b510      	push	{r4, lr}
 800891a:	b16a      	cbz	r2, 8008938 <strncmp+0x20>
 800891c:	3901      	subs	r1, #1
 800891e:	1884      	adds	r4, r0, r2
 8008920:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008924:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008928:	4293      	cmp	r3, r2
 800892a:	d103      	bne.n	8008934 <strncmp+0x1c>
 800892c:	42a0      	cmp	r0, r4
 800892e:	d001      	beq.n	8008934 <strncmp+0x1c>
 8008930:	2b00      	cmp	r3, #0
 8008932:	d1f5      	bne.n	8008920 <strncmp+0x8>
 8008934:	1a98      	subs	r0, r3, r2
 8008936:	bd10      	pop	{r4, pc}
 8008938:	4610      	mov	r0, r2
 800893a:	e7fc      	b.n	8008936 <strncmp+0x1e>

0800893c <__ascii_wctomb>:
 800893c:	4603      	mov	r3, r0
 800893e:	4608      	mov	r0, r1
 8008940:	b141      	cbz	r1, 8008954 <__ascii_wctomb+0x18>
 8008942:	2aff      	cmp	r2, #255	; 0xff
 8008944:	d904      	bls.n	8008950 <__ascii_wctomb+0x14>
 8008946:	228a      	movs	r2, #138	; 0x8a
 8008948:	f04f 30ff 	mov.w	r0, #4294967295
 800894c:	601a      	str	r2, [r3, #0]
 800894e:	4770      	bx	lr
 8008950:	2001      	movs	r0, #1
 8008952:	700a      	strb	r2, [r1, #0]
 8008954:	4770      	bx	lr
	...

08008958 <__assert_func>:
 8008958:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800895a:	4614      	mov	r4, r2
 800895c:	461a      	mov	r2, r3
 800895e:	4b09      	ldr	r3, [pc, #36]	; (8008984 <__assert_func+0x2c>)
 8008960:	4605      	mov	r5, r0
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	68d8      	ldr	r0, [r3, #12]
 8008966:	b14c      	cbz	r4, 800897c <__assert_func+0x24>
 8008968:	4b07      	ldr	r3, [pc, #28]	; (8008988 <__assert_func+0x30>)
 800896a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800896e:	9100      	str	r1, [sp, #0]
 8008970:	462b      	mov	r3, r5
 8008972:	4906      	ldr	r1, [pc, #24]	; (800898c <__assert_func+0x34>)
 8008974:	f000 f80e 	bl	8008994 <fiprintf>
 8008978:	f000 fa82 	bl	8008e80 <abort>
 800897c:	4b04      	ldr	r3, [pc, #16]	; (8008990 <__assert_func+0x38>)
 800897e:	461c      	mov	r4, r3
 8008980:	e7f3      	b.n	800896a <__assert_func+0x12>
 8008982:	bf00      	nop
 8008984:	2000000c 	.word	0x2000000c
 8008988:	08009925 	.word	0x08009925
 800898c:	08009932 	.word	0x08009932
 8008990:	08009960 	.word	0x08009960

08008994 <fiprintf>:
 8008994:	b40e      	push	{r1, r2, r3}
 8008996:	b503      	push	{r0, r1, lr}
 8008998:	4601      	mov	r1, r0
 800899a:	ab03      	add	r3, sp, #12
 800899c:	4805      	ldr	r0, [pc, #20]	; (80089b4 <fiprintf+0x20>)
 800899e:	f853 2b04 	ldr.w	r2, [r3], #4
 80089a2:	6800      	ldr	r0, [r0, #0]
 80089a4:	9301      	str	r3, [sp, #4]
 80089a6:	f000 f87b 	bl	8008aa0 <_vfiprintf_r>
 80089aa:	b002      	add	sp, #8
 80089ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80089b0:	b003      	add	sp, #12
 80089b2:	4770      	bx	lr
 80089b4:	2000000c 	.word	0x2000000c

080089b8 <memmove>:
 80089b8:	4288      	cmp	r0, r1
 80089ba:	b510      	push	{r4, lr}
 80089bc:	eb01 0402 	add.w	r4, r1, r2
 80089c0:	d902      	bls.n	80089c8 <memmove+0x10>
 80089c2:	4284      	cmp	r4, r0
 80089c4:	4623      	mov	r3, r4
 80089c6:	d807      	bhi.n	80089d8 <memmove+0x20>
 80089c8:	1e43      	subs	r3, r0, #1
 80089ca:	42a1      	cmp	r1, r4
 80089cc:	d008      	beq.n	80089e0 <memmove+0x28>
 80089ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80089d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80089d6:	e7f8      	b.n	80089ca <memmove+0x12>
 80089d8:	4601      	mov	r1, r0
 80089da:	4402      	add	r2, r0
 80089dc:	428a      	cmp	r2, r1
 80089de:	d100      	bne.n	80089e2 <memmove+0x2a>
 80089e0:	bd10      	pop	{r4, pc}
 80089e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80089e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80089ea:	e7f7      	b.n	80089dc <memmove+0x24>

080089ec <__malloc_lock>:
 80089ec:	4801      	ldr	r0, [pc, #4]	; (80089f4 <__malloc_lock+0x8>)
 80089ee:	f000 bc07 	b.w	8009200 <__retarget_lock_acquire_recursive>
 80089f2:	bf00      	nop
 80089f4:	20000390 	.word	0x20000390

080089f8 <__malloc_unlock>:
 80089f8:	4801      	ldr	r0, [pc, #4]	; (8008a00 <__malloc_unlock+0x8>)
 80089fa:	f000 bc02 	b.w	8009202 <__retarget_lock_release_recursive>
 80089fe:	bf00      	nop
 8008a00:	20000390 	.word	0x20000390

08008a04 <_realloc_r>:
 8008a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a06:	4607      	mov	r7, r0
 8008a08:	4614      	mov	r4, r2
 8008a0a:	460e      	mov	r6, r1
 8008a0c:	b921      	cbnz	r1, 8008a18 <_realloc_r+0x14>
 8008a0e:	4611      	mov	r1, r2
 8008a10:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008a14:	f7ff bdb4 	b.w	8008580 <_malloc_r>
 8008a18:	b922      	cbnz	r2, 8008a24 <_realloc_r+0x20>
 8008a1a:	f7ff fd65 	bl	80084e8 <_free_r>
 8008a1e:	4625      	mov	r5, r4
 8008a20:	4628      	mov	r0, r5
 8008a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a24:	f000 fc52 	bl	80092cc <_malloc_usable_size_r>
 8008a28:	42a0      	cmp	r0, r4
 8008a2a:	d20f      	bcs.n	8008a4c <_realloc_r+0x48>
 8008a2c:	4621      	mov	r1, r4
 8008a2e:	4638      	mov	r0, r7
 8008a30:	f7ff fda6 	bl	8008580 <_malloc_r>
 8008a34:	4605      	mov	r5, r0
 8008a36:	2800      	cmp	r0, #0
 8008a38:	d0f2      	beq.n	8008a20 <_realloc_r+0x1c>
 8008a3a:	4631      	mov	r1, r6
 8008a3c:	4622      	mov	r2, r4
 8008a3e:	f7ff f87f 	bl	8007b40 <memcpy>
 8008a42:	4631      	mov	r1, r6
 8008a44:	4638      	mov	r0, r7
 8008a46:	f7ff fd4f 	bl	80084e8 <_free_r>
 8008a4a:	e7e9      	b.n	8008a20 <_realloc_r+0x1c>
 8008a4c:	4635      	mov	r5, r6
 8008a4e:	e7e7      	b.n	8008a20 <_realloc_r+0x1c>

08008a50 <__sfputc_r>:
 8008a50:	6893      	ldr	r3, [r2, #8]
 8008a52:	b410      	push	{r4}
 8008a54:	3b01      	subs	r3, #1
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	6093      	str	r3, [r2, #8]
 8008a5a:	da07      	bge.n	8008a6c <__sfputc_r+0x1c>
 8008a5c:	6994      	ldr	r4, [r2, #24]
 8008a5e:	42a3      	cmp	r3, r4
 8008a60:	db01      	blt.n	8008a66 <__sfputc_r+0x16>
 8008a62:	290a      	cmp	r1, #10
 8008a64:	d102      	bne.n	8008a6c <__sfputc_r+0x1c>
 8008a66:	bc10      	pop	{r4}
 8008a68:	f000 b94a 	b.w	8008d00 <__swbuf_r>
 8008a6c:	6813      	ldr	r3, [r2, #0]
 8008a6e:	1c58      	adds	r0, r3, #1
 8008a70:	6010      	str	r0, [r2, #0]
 8008a72:	7019      	strb	r1, [r3, #0]
 8008a74:	4608      	mov	r0, r1
 8008a76:	bc10      	pop	{r4}
 8008a78:	4770      	bx	lr

08008a7a <__sfputs_r>:
 8008a7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a7c:	4606      	mov	r6, r0
 8008a7e:	460f      	mov	r7, r1
 8008a80:	4614      	mov	r4, r2
 8008a82:	18d5      	adds	r5, r2, r3
 8008a84:	42ac      	cmp	r4, r5
 8008a86:	d101      	bne.n	8008a8c <__sfputs_r+0x12>
 8008a88:	2000      	movs	r0, #0
 8008a8a:	e007      	b.n	8008a9c <__sfputs_r+0x22>
 8008a8c:	463a      	mov	r2, r7
 8008a8e:	4630      	mov	r0, r6
 8008a90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a94:	f7ff ffdc 	bl	8008a50 <__sfputc_r>
 8008a98:	1c43      	adds	r3, r0, #1
 8008a9a:	d1f3      	bne.n	8008a84 <__sfputs_r+0xa>
 8008a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008aa0 <_vfiprintf_r>:
 8008aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aa4:	460d      	mov	r5, r1
 8008aa6:	4614      	mov	r4, r2
 8008aa8:	4698      	mov	r8, r3
 8008aaa:	4606      	mov	r6, r0
 8008aac:	b09d      	sub	sp, #116	; 0x74
 8008aae:	b118      	cbz	r0, 8008ab8 <_vfiprintf_r+0x18>
 8008ab0:	6983      	ldr	r3, [r0, #24]
 8008ab2:	b90b      	cbnz	r3, 8008ab8 <_vfiprintf_r+0x18>
 8008ab4:	f000 fb06 	bl	80090c4 <__sinit>
 8008ab8:	4b89      	ldr	r3, [pc, #548]	; (8008ce0 <_vfiprintf_r+0x240>)
 8008aba:	429d      	cmp	r5, r3
 8008abc:	d11b      	bne.n	8008af6 <_vfiprintf_r+0x56>
 8008abe:	6875      	ldr	r5, [r6, #4]
 8008ac0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ac2:	07d9      	lsls	r1, r3, #31
 8008ac4:	d405      	bmi.n	8008ad2 <_vfiprintf_r+0x32>
 8008ac6:	89ab      	ldrh	r3, [r5, #12]
 8008ac8:	059a      	lsls	r2, r3, #22
 8008aca:	d402      	bmi.n	8008ad2 <_vfiprintf_r+0x32>
 8008acc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ace:	f000 fb97 	bl	8009200 <__retarget_lock_acquire_recursive>
 8008ad2:	89ab      	ldrh	r3, [r5, #12]
 8008ad4:	071b      	lsls	r3, r3, #28
 8008ad6:	d501      	bpl.n	8008adc <_vfiprintf_r+0x3c>
 8008ad8:	692b      	ldr	r3, [r5, #16]
 8008ada:	b9eb      	cbnz	r3, 8008b18 <_vfiprintf_r+0x78>
 8008adc:	4629      	mov	r1, r5
 8008ade:	4630      	mov	r0, r6
 8008ae0:	f000 f960 	bl	8008da4 <__swsetup_r>
 8008ae4:	b1c0      	cbz	r0, 8008b18 <_vfiprintf_r+0x78>
 8008ae6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ae8:	07dc      	lsls	r4, r3, #31
 8008aea:	d50e      	bpl.n	8008b0a <_vfiprintf_r+0x6a>
 8008aec:	f04f 30ff 	mov.w	r0, #4294967295
 8008af0:	b01d      	add	sp, #116	; 0x74
 8008af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008af6:	4b7b      	ldr	r3, [pc, #492]	; (8008ce4 <_vfiprintf_r+0x244>)
 8008af8:	429d      	cmp	r5, r3
 8008afa:	d101      	bne.n	8008b00 <_vfiprintf_r+0x60>
 8008afc:	68b5      	ldr	r5, [r6, #8]
 8008afe:	e7df      	b.n	8008ac0 <_vfiprintf_r+0x20>
 8008b00:	4b79      	ldr	r3, [pc, #484]	; (8008ce8 <_vfiprintf_r+0x248>)
 8008b02:	429d      	cmp	r5, r3
 8008b04:	bf08      	it	eq
 8008b06:	68f5      	ldreq	r5, [r6, #12]
 8008b08:	e7da      	b.n	8008ac0 <_vfiprintf_r+0x20>
 8008b0a:	89ab      	ldrh	r3, [r5, #12]
 8008b0c:	0598      	lsls	r0, r3, #22
 8008b0e:	d4ed      	bmi.n	8008aec <_vfiprintf_r+0x4c>
 8008b10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b12:	f000 fb76 	bl	8009202 <__retarget_lock_release_recursive>
 8008b16:	e7e9      	b.n	8008aec <_vfiprintf_r+0x4c>
 8008b18:	2300      	movs	r3, #0
 8008b1a:	9309      	str	r3, [sp, #36]	; 0x24
 8008b1c:	2320      	movs	r3, #32
 8008b1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b22:	2330      	movs	r3, #48	; 0x30
 8008b24:	f04f 0901 	mov.w	r9, #1
 8008b28:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b2c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008cec <_vfiprintf_r+0x24c>
 8008b30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b34:	4623      	mov	r3, r4
 8008b36:	469a      	mov	sl, r3
 8008b38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b3c:	b10a      	cbz	r2, 8008b42 <_vfiprintf_r+0xa2>
 8008b3e:	2a25      	cmp	r2, #37	; 0x25
 8008b40:	d1f9      	bne.n	8008b36 <_vfiprintf_r+0x96>
 8008b42:	ebba 0b04 	subs.w	fp, sl, r4
 8008b46:	d00b      	beq.n	8008b60 <_vfiprintf_r+0xc0>
 8008b48:	465b      	mov	r3, fp
 8008b4a:	4622      	mov	r2, r4
 8008b4c:	4629      	mov	r1, r5
 8008b4e:	4630      	mov	r0, r6
 8008b50:	f7ff ff93 	bl	8008a7a <__sfputs_r>
 8008b54:	3001      	adds	r0, #1
 8008b56:	f000 80aa 	beq.w	8008cae <_vfiprintf_r+0x20e>
 8008b5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b5c:	445a      	add	r2, fp
 8008b5e:	9209      	str	r2, [sp, #36]	; 0x24
 8008b60:	f89a 3000 	ldrb.w	r3, [sl]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	f000 80a2 	beq.w	8008cae <_vfiprintf_r+0x20e>
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8008b70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b74:	f10a 0a01 	add.w	sl, sl, #1
 8008b78:	9304      	str	r3, [sp, #16]
 8008b7a:	9307      	str	r3, [sp, #28]
 8008b7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b80:	931a      	str	r3, [sp, #104]	; 0x68
 8008b82:	4654      	mov	r4, sl
 8008b84:	2205      	movs	r2, #5
 8008b86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b8a:	4858      	ldr	r0, [pc, #352]	; (8008cec <_vfiprintf_r+0x24c>)
 8008b8c:	f7fe ffca 	bl	8007b24 <memchr>
 8008b90:	9a04      	ldr	r2, [sp, #16]
 8008b92:	b9d8      	cbnz	r0, 8008bcc <_vfiprintf_r+0x12c>
 8008b94:	06d1      	lsls	r1, r2, #27
 8008b96:	bf44      	itt	mi
 8008b98:	2320      	movmi	r3, #32
 8008b9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b9e:	0713      	lsls	r3, r2, #28
 8008ba0:	bf44      	itt	mi
 8008ba2:	232b      	movmi	r3, #43	; 0x2b
 8008ba4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ba8:	f89a 3000 	ldrb.w	r3, [sl]
 8008bac:	2b2a      	cmp	r3, #42	; 0x2a
 8008bae:	d015      	beq.n	8008bdc <_vfiprintf_r+0x13c>
 8008bb0:	4654      	mov	r4, sl
 8008bb2:	2000      	movs	r0, #0
 8008bb4:	f04f 0c0a 	mov.w	ip, #10
 8008bb8:	9a07      	ldr	r2, [sp, #28]
 8008bba:	4621      	mov	r1, r4
 8008bbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008bc0:	3b30      	subs	r3, #48	; 0x30
 8008bc2:	2b09      	cmp	r3, #9
 8008bc4:	d94e      	bls.n	8008c64 <_vfiprintf_r+0x1c4>
 8008bc6:	b1b0      	cbz	r0, 8008bf6 <_vfiprintf_r+0x156>
 8008bc8:	9207      	str	r2, [sp, #28]
 8008bca:	e014      	b.n	8008bf6 <_vfiprintf_r+0x156>
 8008bcc:	eba0 0308 	sub.w	r3, r0, r8
 8008bd0:	fa09 f303 	lsl.w	r3, r9, r3
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	46a2      	mov	sl, r4
 8008bd8:	9304      	str	r3, [sp, #16]
 8008bda:	e7d2      	b.n	8008b82 <_vfiprintf_r+0xe2>
 8008bdc:	9b03      	ldr	r3, [sp, #12]
 8008bde:	1d19      	adds	r1, r3, #4
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	9103      	str	r1, [sp, #12]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	bfbb      	ittet	lt
 8008be8:	425b      	neglt	r3, r3
 8008bea:	f042 0202 	orrlt.w	r2, r2, #2
 8008bee:	9307      	strge	r3, [sp, #28]
 8008bf0:	9307      	strlt	r3, [sp, #28]
 8008bf2:	bfb8      	it	lt
 8008bf4:	9204      	strlt	r2, [sp, #16]
 8008bf6:	7823      	ldrb	r3, [r4, #0]
 8008bf8:	2b2e      	cmp	r3, #46	; 0x2e
 8008bfa:	d10c      	bne.n	8008c16 <_vfiprintf_r+0x176>
 8008bfc:	7863      	ldrb	r3, [r4, #1]
 8008bfe:	2b2a      	cmp	r3, #42	; 0x2a
 8008c00:	d135      	bne.n	8008c6e <_vfiprintf_r+0x1ce>
 8008c02:	9b03      	ldr	r3, [sp, #12]
 8008c04:	3402      	adds	r4, #2
 8008c06:	1d1a      	adds	r2, r3, #4
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	9203      	str	r2, [sp, #12]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	bfb8      	it	lt
 8008c10:	f04f 33ff 	movlt.w	r3, #4294967295
 8008c14:	9305      	str	r3, [sp, #20]
 8008c16:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008cfc <_vfiprintf_r+0x25c>
 8008c1a:	2203      	movs	r2, #3
 8008c1c:	4650      	mov	r0, sl
 8008c1e:	7821      	ldrb	r1, [r4, #0]
 8008c20:	f7fe ff80 	bl	8007b24 <memchr>
 8008c24:	b140      	cbz	r0, 8008c38 <_vfiprintf_r+0x198>
 8008c26:	2340      	movs	r3, #64	; 0x40
 8008c28:	eba0 000a 	sub.w	r0, r0, sl
 8008c2c:	fa03 f000 	lsl.w	r0, r3, r0
 8008c30:	9b04      	ldr	r3, [sp, #16]
 8008c32:	3401      	adds	r4, #1
 8008c34:	4303      	orrs	r3, r0
 8008c36:	9304      	str	r3, [sp, #16]
 8008c38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c3c:	2206      	movs	r2, #6
 8008c3e:	482c      	ldr	r0, [pc, #176]	; (8008cf0 <_vfiprintf_r+0x250>)
 8008c40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c44:	f7fe ff6e 	bl	8007b24 <memchr>
 8008c48:	2800      	cmp	r0, #0
 8008c4a:	d03f      	beq.n	8008ccc <_vfiprintf_r+0x22c>
 8008c4c:	4b29      	ldr	r3, [pc, #164]	; (8008cf4 <_vfiprintf_r+0x254>)
 8008c4e:	bb1b      	cbnz	r3, 8008c98 <_vfiprintf_r+0x1f8>
 8008c50:	9b03      	ldr	r3, [sp, #12]
 8008c52:	3307      	adds	r3, #7
 8008c54:	f023 0307 	bic.w	r3, r3, #7
 8008c58:	3308      	adds	r3, #8
 8008c5a:	9303      	str	r3, [sp, #12]
 8008c5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c5e:	443b      	add	r3, r7
 8008c60:	9309      	str	r3, [sp, #36]	; 0x24
 8008c62:	e767      	b.n	8008b34 <_vfiprintf_r+0x94>
 8008c64:	460c      	mov	r4, r1
 8008c66:	2001      	movs	r0, #1
 8008c68:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c6c:	e7a5      	b.n	8008bba <_vfiprintf_r+0x11a>
 8008c6e:	2300      	movs	r3, #0
 8008c70:	f04f 0c0a 	mov.w	ip, #10
 8008c74:	4619      	mov	r1, r3
 8008c76:	3401      	adds	r4, #1
 8008c78:	9305      	str	r3, [sp, #20]
 8008c7a:	4620      	mov	r0, r4
 8008c7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c80:	3a30      	subs	r2, #48	; 0x30
 8008c82:	2a09      	cmp	r2, #9
 8008c84:	d903      	bls.n	8008c8e <_vfiprintf_r+0x1ee>
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d0c5      	beq.n	8008c16 <_vfiprintf_r+0x176>
 8008c8a:	9105      	str	r1, [sp, #20]
 8008c8c:	e7c3      	b.n	8008c16 <_vfiprintf_r+0x176>
 8008c8e:	4604      	mov	r4, r0
 8008c90:	2301      	movs	r3, #1
 8008c92:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c96:	e7f0      	b.n	8008c7a <_vfiprintf_r+0x1da>
 8008c98:	ab03      	add	r3, sp, #12
 8008c9a:	9300      	str	r3, [sp, #0]
 8008c9c:	462a      	mov	r2, r5
 8008c9e:	4630      	mov	r0, r6
 8008ca0:	4b15      	ldr	r3, [pc, #84]	; (8008cf8 <_vfiprintf_r+0x258>)
 8008ca2:	a904      	add	r1, sp, #16
 8008ca4:	f7fc f8a0 	bl	8004de8 <_printf_float>
 8008ca8:	4607      	mov	r7, r0
 8008caa:	1c78      	adds	r0, r7, #1
 8008cac:	d1d6      	bne.n	8008c5c <_vfiprintf_r+0x1bc>
 8008cae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008cb0:	07d9      	lsls	r1, r3, #31
 8008cb2:	d405      	bmi.n	8008cc0 <_vfiprintf_r+0x220>
 8008cb4:	89ab      	ldrh	r3, [r5, #12]
 8008cb6:	059a      	lsls	r2, r3, #22
 8008cb8:	d402      	bmi.n	8008cc0 <_vfiprintf_r+0x220>
 8008cba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008cbc:	f000 faa1 	bl	8009202 <__retarget_lock_release_recursive>
 8008cc0:	89ab      	ldrh	r3, [r5, #12]
 8008cc2:	065b      	lsls	r3, r3, #25
 8008cc4:	f53f af12 	bmi.w	8008aec <_vfiprintf_r+0x4c>
 8008cc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008cca:	e711      	b.n	8008af0 <_vfiprintf_r+0x50>
 8008ccc:	ab03      	add	r3, sp, #12
 8008cce:	9300      	str	r3, [sp, #0]
 8008cd0:	462a      	mov	r2, r5
 8008cd2:	4630      	mov	r0, r6
 8008cd4:	4b08      	ldr	r3, [pc, #32]	; (8008cf8 <_vfiprintf_r+0x258>)
 8008cd6:	a904      	add	r1, sp, #16
 8008cd8:	f7fc fb22 	bl	8005320 <_printf_i>
 8008cdc:	e7e4      	b.n	8008ca8 <_vfiprintf_r+0x208>
 8008cde:	bf00      	nop
 8008ce0:	08009984 	.word	0x08009984
 8008ce4:	080099a4 	.word	0x080099a4
 8008ce8:	08009964 	.word	0x08009964
 8008cec:	08009914 	.word	0x08009914
 8008cf0:	0800991e 	.word	0x0800991e
 8008cf4:	08004de9 	.word	0x08004de9
 8008cf8:	08008a7b 	.word	0x08008a7b
 8008cfc:	0800991a 	.word	0x0800991a

08008d00 <__swbuf_r>:
 8008d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d02:	460e      	mov	r6, r1
 8008d04:	4614      	mov	r4, r2
 8008d06:	4605      	mov	r5, r0
 8008d08:	b118      	cbz	r0, 8008d12 <__swbuf_r+0x12>
 8008d0a:	6983      	ldr	r3, [r0, #24]
 8008d0c:	b90b      	cbnz	r3, 8008d12 <__swbuf_r+0x12>
 8008d0e:	f000 f9d9 	bl	80090c4 <__sinit>
 8008d12:	4b21      	ldr	r3, [pc, #132]	; (8008d98 <__swbuf_r+0x98>)
 8008d14:	429c      	cmp	r4, r3
 8008d16:	d12b      	bne.n	8008d70 <__swbuf_r+0x70>
 8008d18:	686c      	ldr	r4, [r5, #4]
 8008d1a:	69a3      	ldr	r3, [r4, #24]
 8008d1c:	60a3      	str	r3, [r4, #8]
 8008d1e:	89a3      	ldrh	r3, [r4, #12]
 8008d20:	071a      	lsls	r2, r3, #28
 8008d22:	d52f      	bpl.n	8008d84 <__swbuf_r+0x84>
 8008d24:	6923      	ldr	r3, [r4, #16]
 8008d26:	b36b      	cbz	r3, 8008d84 <__swbuf_r+0x84>
 8008d28:	6923      	ldr	r3, [r4, #16]
 8008d2a:	6820      	ldr	r0, [r4, #0]
 8008d2c:	b2f6      	uxtb	r6, r6
 8008d2e:	1ac0      	subs	r0, r0, r3
 8008d30:	6963      	ldr	r3, [r4, #20]
 8008d32:	4637      	mov	r7, r6
 8008d34:	4283      	cmp	r3, r0
 8008d36:	dc04      	bgt.n	8008d42 <__swbuf_r+0x42>
 8008d38:	4621      	mov	r1, r4
 8008d3a:	4628      	mov	r0, r5
 8008d3c:	f000 f92e 	bl	8008f9c <_fflush_r>
 8008d40:	bb30      	cbnz	r0, 8008d90 <__swbuf_r+0x90>
 8008d42:	68a3      	ldr	r3, [r4, #8]
 8008d44:	3001      	adds	r0, #1
 8008d46:	3b01      	subs	r3, #1
 8008d48:	60a3      	str	r3, [r4, #8]
 8008d4a:	6823      	ldr	r3, [r4, #0]
 8008d4c:	1c5a      	adds	r2, r3, #1
 8008d4e:	6022      	str	r2, [r4, #0]
 8008d50:	701e      	strb	r6, [r3, #0]
 8008d52:	6963      	ldr	r3, [r4, #20]
 8008d54:	4283      	cmp	r3, r0
 8008d56:	d004      	beq.n	8008d62 <__swbuf_r+0x62>
 8008d58:	89a3      	ldrh	r3, [r4, #12]
 8008d5a:	07db      	lsls	r3, r3, #31
 8008d5c:	d506      	bpl.n	8008d6c <__swbuf_r+0x6c>
 8008d5e:	2e0a      	cmp	r6, #10
 8008d60:	d104      	bne.n	8008d6c <__swbuf_r+0x6c>
 8008d62:	4621      	mov	r1, r4
 8008d64:	4628      	mov	r0, r5
 8008d66:	f000 f919 	bl	8008f9c <_fflush_r>
 8008d6a:	b988      	cbnz	r0, 8008d90 <__swbuf_r+0x90>
 8008d6c:	4638      	mov	r0, r7
 8008d6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d70:	4b0a      	ldr	r3, [pc, #40]	; (8008d9c <__swbuf_r+0x9c>)
 8008d72:	429c      	cmp	r4, r3
 8008d74:	d101      	bne.n	8008d7a <__swbuf_r+0x7a>
 8008d76:	68ac      	ldr	r4, [r5, #8]
 8008d78:	e7cf      	b.n	8008d1a <__swbuf_r+0x1a>
 8008d7a:	4b09      	ldr	r3, [pc, #36]	; (8008da0 <__swbuf_r+0xa0>)
 8008d7c:	429c      	cmp	r4, r3
 8008d7e:	bf08      	it	eq
 8008d80:	68ec      	ldreq	r4, [r5, #12]
 8008d82:	e7ca      	b.n	8008d1a <__swbuf_r+0x1a>
 8008d84:	4621      	mov	r1, r4
 8008d86:	4628      	mov	r0, r5
 8008d88:	f000 f80c 	bl	8008da4 <__swsetup_r>
 8008d8c:	2800      	cmp	r0, #0
 8008d8e:	d0cb      	beq.n	8008d28 <__swbuf_r+0x28>
 8008d90:	f04f 37ff 	mov.w	r7, #4294967295
 8008d94:	e7ea      	b.n	8008d6c <__swbuf_r+0x6c>
 8008d96:	bf00      	nop
 8008d98:	08009984 	.word	0x08009984
 8008d9c:	080099a4 	.word	0x080099a4
 8008da0:	08009964 	.word	0x08009964

08008da4 <__swsetup_r>:
 8008da4:	4b32      	ldr	r3, [pc, #200]	; (8008e70 <__swsetup_r+0xcc>)
 8008da6:	b570      	push	{r4, r5, r6, lr}
 8008da8:	681d      	ldr	r5, [r3, #0]
 8008daa:	4606      	mov	r6, r0
 8008dac:	460c      	mov	r4, r1
 8008dae:	b125      	cbz	r5, 8008dba <__swsetup_r+0x16>
 8008db0:	69ab      	ldr	r3, [r5, #24]
 8008db2:	b913      	cbnz	r3, 8008dba <__swsetup_r+0x16>
 8008db4:	4628      	mov	r0, r5
 8008db6:	f000 f985 	bl	80090c4 <__sinit>
 8008dba:	4b2e      	ldr	r3, [pc, #184]	; (8008e74 <__swsetup_r+0xd0>)
 8008dbc:	429c      	cmp	r4, r3
 8008dbe:	d10f      	bne.n	8008de0 <__swsetup_r+0x3c>
 8008dc0:	686c      	ldr	r4, [r5, #4]
 8008dc2:	89a3      	ldrh	r3, [r4, #12]
 8008dc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008dc8:	0719      	lsls	r1, r3, #28
 8008dca:	d42c      	bmi.n	8008e26 <__swsetup_r+0x82>
 8008dcc:	06dd      	lsls	r5, r3, #27
 8008dce:	d411      	bmi.n	8008df4 <__swsetup_r+0x50>
 8008dd0:	2309      	movs	r3, #9
 8008dd2:	6033      	str	r3, [r6, #0]
 8008dd4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8008ddc:	81a3      	strh	r3, [r4, #12]
 8008dde:	e03e      	b.n	8008e5e <__swsetup_r+0xba>
 8008de0:	4b25      	ldr	r3, [pc, #148]	; (8008e78 <__swsetup_r+0xd4>)
 8008de2:	429c      	cmp	r4, r3
 8008de4:	d101      	bne.n	8008dea <__swsetup_r+0x46>
 8008de6:	68ac      	ldr	r4, [r5, #8]
 8008de8:	e7eb      	b.n	8008dc2 <__swsetup_r+0x1e>
 8008dea:	4b24      	ldr	r3, [pc, #144]	; (8008e7c <__swsetup_r+0xd8>)
 8008dec:	429c      	cmp	r4, r3
 8008dee:	bf08      	it	eq
 8008df0:	68ec      	ldreq	r4, [r5, #12]
 8008df2:	e7e6      	b.n	8008dc2 <__swsetup_r+0x1e>
 8008df4:	0758      	lsls	r0, r3, #29
 8008df6:	d512      	bpl.n	8008e1e <__swsetup_r+0x7a>
 8008df8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008dfa:	b141      	cbz	r1, 8008e0e <__swsetup_r+0x6a>
 8008dfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e00:	4299      	cmp	r1, r3
 8008e02:	d002      	beq.n	8008e0a <__swsetup_r+0x66>
 8008e04:	4630      	mov	r0, r6
 8008e06:	f7ff fb6f 	bl	80084e8 <_free_r>
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	6363      	str	r3, [r4, #52]	; 0x34
 8008e0e:	89a3      	ldrh	r3, [r4, #12]
 8008e10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008e14:	81a3      	strh	r3, [r4, #12]
 8008e16:	2300      	movs	r3, #0
 8008e18:	6063      	str	r3, [r4, #4]
 8008e1a:	6923      	ldr	r3, [r4, #16]
 8008e1c:	6023      	str	r3, [r4, #0]
 8008e1e:	89a3      	ldrh	r3, [r4, #12]
 8008e20:	f043 0308 	orr.w	r3, r3, #8
 8008e24:	81a3      	strh	r3, [r4, #12]
 8008e26:	6923      	ldr	r3, [r4, #16]
 8008e28:	b94b      	cbnz	r3, 8008e3e <__swsetup_r+0x9a>
 8008e2a:	89a3      	ldrh	r3, [r4, #12]
 8008e2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008e30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e34:	d003      	beq.n	8008e3e <__swsetup_r+0x9a>
 8008e36:	4621      	mov	r1, r4
 8008e38:	4630      	mov	r0, r6
 8008e3a:	f000 fa07 	bl	800924c <__smakebuf_r>
 8008e3e:	89a0      	ldrh	r0, [r4, #12]
 8008e40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e44:	f010 0301 	ands.w	r3, r0, #1
 8008e48:	d00a      	beq.n	8008e60 <__swsetup_r+0xbc>
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	60a3      	str	r3, [r4, #8]
 8008e4e:	6963      	ldr	r3, [r4, #20]
 8008e50:	425b      	negs	r3, r3
 8008e52:	61a3      	str	r3, [r4, #24]
 8008e54:	6923      	ldr	r3, [r4, #16]
 8008e56:	b943      	cbnz	r3, 8008e6a <__swsetup_r+0xc6>
 8008e58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008e5c:	d1ba      	bne.n	8008dd4 <__swsetup_r+0x30>
 8008e5e:	bd70      	pop	{r4, r5, r6, pc}
 8008e60:	0781      	lsls	r1, r0, #30
 8008e62:	bf58      	it	pl
 8008e64:	6963      	ldrpl	r3, [r4, #20]
 8008e66:	60a3      	str	r3, [r4, #8]
 8008e68:	e7f4      	b.n	8008e54 <__swsetup_r+0xb0>
 8008e6a:	2000      	movs	r0, #0
 8008e6c:	e7f7      	b.n	8008e5e <__swsetup_r+0xba>
 8008e6e:	bf00      	nop
 8008e70:	2000000c 	.word	0x2000000c
 8008e74:	08009984 	.word	0x08009984
 8008e78:	080099a4 	.word	0x080099a4
 8008e7c:	08009964 	.word	0x08009964

08008e80 <abort>:
 8008e80:	2006      	movs	r0, #6
 8008e82:	b508      	push	{r3, lr}
 8008e84:	f000 fa52 	bl	800932c <raise>
 8008e88:	2001      	movs	r0, #1
 8008e8a:	f7f8 ff82 	bl	8001d92 <_exit>
	...

08008e90 <__sflush_r>:
 8008e90:	898a      	ldrh	r2, [r1, #12]
 8008e92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e96:	4605      	mov	r5, r0
 8008e98:	0710      	lsls	r0, r2, #28
 8008e9a:	460c      	mov	r4, r1
 8008e9c:	d458      	bmi.n	8008f50 <__sflush_r+0xc0>
 8008e9e:	684b      	ldr	r3, [r1, #4]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	dc05      	bgt.n	8008eb0 <__sflush_r+0x20>
 8008ea4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	dc02      	bgt.n	8008eb0 <__sflush_r+0x20>
 8008eaa:	2000      	movs	r0, #0
 8008eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008eb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008eb2:	2e00      	cmp	r6, #0
 8008eb4:	d0f9      	beq.n	8008eaa <__sflush_r+0x1a>
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008ebc:	682f      	ldr	r7, [r5, #0]
 8008ebe:	602b      	str	r3, [r5, #0]
 8008ec0:	d032      	beq.n	8008f28 <__sflush_r+0x98>
 8008ec2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008ec4:	89a3      	ldrh	r3, [r4, #12]
 8008ec6:	075a      	lsls	r2, r3, #29
 8008ec8:	d505      	bpl.n	8008ed6 <__sflush_r+0x46>
 8008eca:	6863      	ldr	r3, [r4, #4]
 8008ecc:	1ac0      	subs	r0, r0, r3
 8008ece:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008ed0:	b10b      	cbz	r3, 8008ed6 <__sflush_r+0x46>
 8008ed2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008ed4:	1ac0      	subs	r0, r0, r3
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	4602      	mov	r2, r0
 8008eda:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008edc:	4628      	mov	r0, r5
 8008ede:	6a21      	ldr	r1, [r4, #32]
 8008ee0:	47b0      	blx	r6
 8008ee2:	1c43      	adds	r3, r0, #1
 8008ee4:	89a3      	ldrh	r3, [r4, #12]
 8008ee6:	d106      	bne.n	8008ef6 <__sflush_r+0x66>
 8008ee8:	6829      	ldr	r1, [r5, #0]
 8008eea:	291d      	cmp	r1, #29
 8008eec:	d82c      	bhi.n	8008f48 <__sflush_r+0xb8>
 8008eee:	4a2a      	ldr	r2, [pc, #168]	; (8008f98 <__sflush_r+0x108>)
 8008ef0:	40ca      	lsrs	r2, r1
 8008ef2:	07d6      	lsls	r6, r2, #31
 8008ef4:	d528      	bpl.n	8008f48 <__sflush_r+0xb8>
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	6062      	str	r2, [r4, #4]
 8008efa:	6922      	ldr	r2, [r4, #16]
 8008efc:	04d9      	lsls	r1, r3, #19
 8008efe:	6022      	str	r2, [r4, #0]
 8008f00:	d504      	bpl.n	8008f0c <__sflush_r+0x7c>
 8008f02:	1c42      	adds	r2, r0, #1
 8008f04:	d101      	bne.n	8008f0a <__sflush_r+0x7a>
 8008f06:	682b      	ldr	r3, [r5, #0]
 8008f08:	b903      	cbnz	r3, 8008f0c <__sflush_r+0x7c>
 8008f0a:	6560      	str	r0, [r4, #84]	; 0x54
 8008f0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f0e:	602f      	str	r7, [r5, #0]
 8008f10:	2900      	cmp	r1, #0
 8008f12:	d0ca      	beq.n	8008eaa <__sflush_r+0x1a>
 8008f14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f18:	4299      	cmp	r1, r3
 8008f1a:	d002      	beq.n	8008f22 <__sflush_r+0x92>
 8008f1c:	4628      	mov	r0, r5
 8008f1e:	f7ff fae3 	bl	80084e8 <_free_r>
 8008f22:	2000      	movs	r0, #0
 8008f24:	6360      	str	r0, [r4, #52]	; 0x34
 8008f26:	e7c1      	b.n	8008eac <__sflush_r+0x1c>
 8008f28:	6a21      	ldr	r1, [r4, #32]
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	4628      	mov	r0, r5
 8008f2e:	47b0      	blx	r6
 8008f30:	1c41      	adds	r1, r0, #1
 8008f32:	d1c7      	bne.n	8008ec4 <__sflush_r+0x34>
 8008f34:	682b      	ldr	r3, [r5, #0]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d0c4      	beq.n	8008ec4 <__sflush_r+0x34>
 8008f3a:	2b1d      	cmp	r3, #29
 8008f3c:	d001      	beq.n	8008f42 <__sflush_r+0xb2>
 8008f3e:	2b16      	cmp	r3, #22
 8008f40:	d101      	bne.n	8008f46 <__sflush_r+0xb6>
 8008f42:	602f      	str	r7, [r5, #0]
 8008f44:	e7b1      	b.n	8008eaa <__sflush_r+0x1a>
 8008f46:	89a3      	ldrh	r3, [r4, #12]
 8008f48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f4c:	81a3      	strh	r3, [r4, #12]
 8008f4e:	e7ad      	b.n	8008eac <__sflush_r+0x1c>
 8008f50:	690f      	ldr	r7, [r1, #16]
 8008f52:	2f00      	cmp	r7, #0
 8008f54:	d0a9      	beq.n	8008eaa <__sflush_r+0x1a>
 8008f56:	0793      	lsls	r3, r2, #30
 8008f58:	bf18      	it	ne
 8008f5a:	2300      	movne	r3, #0
 8008f5c:	680e      	ldr	r6, [r1, #0]
 8008f5e:	bf08      	it	eq
 8008f60:	694b      	ldreq	r3, [r1, #20]
 8008f62:	eba6 0807 	sub.w	r8, r6, r7
 8008f66:	600f      	str	r7, [r1, #0]
 8008f68:	608b      	str	r3, [r1, #8]
 8008f6a:	f1b8 0f00 	cmp.w	r8, #0
 8008f6e:	dd9c      	ble.n	8008eaa <__sflush_r+0x1a>
 8008f70:	4643      	mov	r3, r8
 8008f72:	463a      	mov	r2, r7
 8008f74:	4628      	mov	r0, r5
 8008f76:	6a21      	ldr	r1, [r4, #32]
 8008f78:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008f7a:	47b0      	blx	r6
 8008f7c:	2800      	cmp	r0, #0
 8008f7e:	dc06      	bgt.n	8008f8e <__sflush_r+0xfe>
 8008f80:	89a3      	ldrh	r3, [r4, #12]
 8008f82:	f04f 30ff 	mov.w	r0, #4294967295
 8008f86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f8a:	81a3      	strh	r3, [r4, #12]
 8008f8c:	e78e      	b.n	8008eac <__sflush_r+0x1c>
 8008f8e:	4407      	add	r7, r0
 8008f90:	eba8 0800 	sub.w	r8, r8, r0
 8008f94:	e7e9      	b.n	8008f6a <__sflush_r+0xda>
 8008f96:	bf00      	nop
 8008f98:	20400001 	.word	0x20400001

08008f9c <_fflush_r>:
 8008f9c:	b538      	push	{r3, r4, r5, lr}
 8008f9e:	690b      	ldr	r3, [r1, #16]
 8008fa0:	4605      	mov	r5, r0
 8008fa2:	460c      	mov	r4, r1
 8008fa4:	b913      	cbnz	r3, 8008fac <_fflush_r+0x10>
 8008fa6:	2500      	movs	r5, #0
 8008fa8:	4628      	mov	r0, r5
 8008faa:	bd38      	pop	{r3, r4, r5, pc}
 8008fac:	b118      	cbz	r0, 8008fb6 <_fflush_r+0x1a>
 8008fae:	6983      	ldr	r3, [r0, #24]
 8008fb0:	b90b      	cbnz	r3, 8008fb6 <_fflush_r+0x1a>
 8008fb2:	f000 f887 	bl	80090c4 <__sinit>
 8008fb6:	4b14      	ldr	r3, [pc, #80]	; (8009008 <_fflush_r+0x6c>)
 8008fb8:	429c      	cmp	r4, r3
 8008fba:	d11b      	bne.n	8008ff4 <_fflush_r+0x58>
 8008fbc:	686c      	ldr	r4, [r5, #4]
 8008fbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d0ef      	beq.n	8008fa6 <_fflush_r+0xa>
 8008fc6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008fc8:	07d0      	lsls	r0, r2, #31
 8008fca:	d404      	bmi.n	8008fd6 <_fflush_r+0x3a>
 8008fcc:	0599      	lsls	r1, r3, #22
 8008fce:	d402      	bmi.n	8008fd6 <_fflush_r+0x3a>
 8008fd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008fd2:	f000 f915 	bl	8009200 <__retarget_lock_acquire_recursive>
 8008fd6:	4628      	mov	r0, r5
 8008fd8:	4621      	mov	r1, r4
 8008fda:	f7ff ff59 	bl	8008e90 <__sflush_r>
 8008fde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008fe0:	4605      	mov	r5, r0
 8008fe2:	07da      	lsls	r2, r3, #31
 8008fe4:	d4e0      	bmi.n	8008fa8 <_fflush_r+0xc>
 8008fe6:	89a3      	ldrh	r3, [r4, #12]
 8008fe8:	059b      	lsls	r3, r3, #22
 8008fea:	d4dd      	bmi.n	8008fa8 <_fflush_r+0xc>
 8008fec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008fee:	f000 f908 	bl	8009202 <__retarget_lock_release_recursive>
 8008ff2:	e7d9      	b.n	8008fa8 <_fflush_r+0xc>
 8008ff4:	4b05      	ldr	r3, [pc, #20]	; (800900c <_fflush_r+0x70>)
 8008ff6:	429c      	cmp	r4, r3
 8008ff8:	d101      	bne.n	8008ffe <_fflush_r+0x62>
 8008ffa:	68ac      	ldr	r4, [r5, #8]
 8008ffc:	e7df      	b.n	8008fbe <_fflush_r+0x22>
 8008ffe:	4b04      	ldr	r3, [pc, #16]	; (8009010 <_fflush_r+0x74>)
 8009000:	429c      	cmp	r4, r3
 8009002:	bf08      	it	eq
 8009004:	68ec      	ldreq	r4, [r5, #12]
 8009006:	e7da      	b.n	8008fbe <_fflush_r+0x22>
 8009008:	08009984 	.word	0x08009984
 800900c:	080099a4 	.word	0x080099a4
 8009010:	08009964 	.word	0x08009964

08009014 <std>:
 8009014:	2300      	movs	r3, #0
 8009016:	b510      	push	{r4, lr}
 8009018:	4604      	mov	r4, r0
 800901a:	e9c0 3300 	strd	r3, r3, [r0]
 800901e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009022:	6083      	str	r3, [r0, #8]
 8009024:	8181      	strh	r1, [r0, #12]
 8009026:	6643      	str	r3, [r0, #100]	; 0x64
 8009028:	81c2      	strh	r2, [r0, #14]
 800902a:	6183      	str	r3, [r0, #24]
 800902c:	4619      	mov	r1, r3
 800902e:	2208      	movs	r2, #8
 8009030:	305c      	adds	r0, #92	; 0x5c
 8009032:	f7fb fe33 	bl	8004c9c <memset>
 8009036:	4b05      	ldr	r3, [pc, #20]	; (800904c <std+0x38>)
 8009038:	6224      	str	r4, [r4, #32]
 800903a:	6263      	str	r3, [r4, #36]	; 0x24
 800903c:	4b04      	ldr	r3, [pc, #16]	; (8009050 <std+0x3c>)
 800903e:	62a3      	str	r3, [r4, #40]	; 0x28
 8009040:	4b04      	ldr	r3, [pc, #16]	; (8009054 <std+0x40>)
 8009042:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009044:	4b04      	ldr	r3, [pc, #16]	; (8009058 <std+0x44>)
 8009046:	6323      	str	r3, [r4, #48]	; 0x30
 8009048:	bd10      	pop	{r4, pc}
 800904a:	bf00      	nop
 800904c:	08009365 	.word	0x08009365
 8009050:	08009387 	.word	0x08009387
 8009054:	080093bf 	.word	0x080093bf
 8009058:	080093e3 	.word	0x080093e3

0800905c <_cleanup_r>:
 800905c:	4901      	ldr	r1, [pc, #4]	; (8009064 <_cleanup_r+0x8>)
 800905e:	f000 b8af 	b.w	80091c0 <_fwalk_reent>
 8009062:	bf00      	nop
 8009064:	08008f9d 	.word	0x08008f9d

08009068 <__sfmoreglue>:
 8009068:	b570      	push	{r4, r5, r6, lr}
 800906a:	2568      	movs	r5, #104	; 0x68
 800906c:	1e4a      	subs	r2, r1, #1
 800906e:	4355      	muls	r5, r2
 8009070:	460e      	mov	r6, r1
 8009072:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009076:	f7ff fa83 	bl	8008580 <_malloc_r>
 800907a:	4604      	mov	r4, r0
 800907c:	b140      	cbz	r0, 8009090 <__sfmoreglue+0x28>
 800907e:	2100      	movs	r1, #0
 8009080:	e9c0 1600 	strd	r1, r6, [r0]
 8009084:	300c      	adds	r0, #12
 8009086:	60a0      	str	r0, [r4, #8]
 8009088:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800908c:	f7fb fe06 	bl	8004c9c <memset>
 8009090:	4620      	mov	r0, r4
 8009092:	bd70      	pop	{r4, r5, r6, pc}

08009094 <__sfp_lock_acquire>:
 8009094:	4801      	ldr	r0, [pc, #4]	; (800909c <__sfp_lock_acquire+0x8>)
 8009096:	f000 b8b3 	b.w	8009200 <__retarget_lock_acquire_recursive>
 800909a:	bf00      	nop
 800909c:	20000394 	.word	0x20000394

080090a0 <__sfp_lock_release>:
 80090a0:	4801      	ldr	r0, [pc, #4]	; (80090a8 <__sfp_lock_release+0x8>)
 80090a2:	f000 b8ae 	b.w	8009202 <__retarget_lock_release_recursive>
 80090a6:	bf00      	nop
 80090a8:	20000394 	.word	0x20000394

080090ac <__sinit_lock_acquire>:
 80090ac:	4801      	ldr	r0, [pc, #4]	; (80090b4 <__sinit_lock_acquire+0x8>)
 80090ae:	f000 b8a7 	b.w	8009200 <__retarget_lock_acquire_recursive>
 80090b2:	bf00      	nop
 80090b4:	2000038f 	.word	0x2000038f

080090b8 <__sinit_lock_release>:
 80090b8:	4801      	ldr	r0, [pc, #4]	; (80090c0 <__sinit_lock_release+0x8>)
 80090ba:	f000 b8a2 	b.w	8009202 <__retarget_lock_release_recursive>
 80090be:	bf00      	nop
 80090c0:	2000038f 	.word	0x2000038f

080090c4 <__sinit>:
 80090c4:	b510      	push	{r4, lr}
 80090c6:	4604      	mov	r4, r0
 80090c8:	f7ff fff0 	bl	80090ac <__sinit_lock_acquire>
 80090cc:	69a3      	ldr	r3, [r4, #24]
 80090ce:	b11b      	cbz	r3, 80090d8 <__sinit+0x14>
 80090d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090d4:	f7ff bff0 	b.w	80090b8 <__sinit_lock_release>
 80090d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80090dc:	6523      	str	r3, [r4, #80]	; 0x50
 80090de:	4b13      	ldr	r3, [pc, #76]	; (800912c <__sinit+0x68>)
 80090e0:	4a13      	ldr	r2, [pc, #76]	; (8009130 <__sinit+0x6c>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	62a2      	str	r2, [r4, #40]	; 0x28
 80090e6:	42a3      	cmp	r3, r4
 80090e8:	bf08      	it	eq
 80090ea:	2301      	moveq	r3, #1
 80090ec:	4620      	mov	r0, r4
 80090ee:	bf08      	it	eq
 80090f0:	61a3      	streq	r3, [r4, #24]
 80090f2:	f000 f81f 	bl	8009134 <__sfp>
 80090f6:	6060      	str	r0, [r4, #4]
 80090f8:	4620      	mov	r0, r4
 80090fa:	f000 f81b 	bl	8009134 <__sfp>
 80090fe:	60a0      	str	r0, [r4, #8]
 8009100:	4620      	mov	r0, r4
 8009102:	f000 f817 	bl	8009134 <__sfp>
 8009106:	2200      	movs	r2, #0
 8009108:	2104      	movs	r1, #4
 800910a:	60e0      	str	r0, [r4, #12]
 800910c:	6860      	ldr	r0, [r4, #4]
 800910e:	f7ff ff81 	bl	8009014 <std>
 8009112:	2201      	movs	r2, #1
 8009114:	2109      	movs	r1, #9
 8009116:	68a0      	ldr	r0, [r4, #8]
 8009118:	f7ff ff7c 	bl	8009014 <std>
 800911c:	2202      	movs	r2, #2
 800911e:	2112      	movs	r1, #18
 8009120:	68e0      	ldr	r0, [r4, #12]
 8009122:	f7ff ff77 	bl	8009014 <std>
 8009126:	2301      	movs	r3, #1
 8009128:	61a3      	str	r3, [r4, #24]
 800912a:	e7d1      	b.n	80090d0 <__sinit+0xc>
 800912c:	08009510 	.word	0x08009510
 8009130:	0800905d 	.word	0x0800905d

08009134 <__sfp>:
 8009134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009136:	4607      	mov	r7, r0
 8009138:	f7ff ffac 	bl	8009094 <__sfp_lock_acquire>
 800913c:	4b1e      	ldr	r3, [pc, #120]	; (80091b8 <__sfp+0x84>)
 800913e:	681e      	ldr	r6, [r3, #0]
 8009140:	69b3      	ldr	r3, [r6, #24]
 8009142:	b913      	cbnz	r3, 800914a <__sfp+0x16>
 8009144:	4630      	mov	r0, r6
 8009146:	f7ff ffbd 	bl	80090c4 <__sinit>
 800914a:	3648      	adds	r6, #72	; 0x48
 800914c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009150:	3b01      	subs	r3, #1
 8009152:	d503      	bpl.n	800915c <__sfp+0x28>
 8009154:	6833      	ldr	r3, [r6, #0]
 8009156:	b30b      	cbz	r3, 800919c <__sfp+0x68>
 8009158:	6836      	ldr	r6, [r6, #0]
 800915a:	e7f7      	b.n	800914c <__sfp+0x18>
 800915c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009160:	b9d5      	cbnz	r5, 8009198 <__sfp+0x64>
 8009162:	4b16      	ldr	r3, [pc, #88]	; (80091bc <__sfp+0x88>)
 8009164:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009168:	60e3      	str	r3, [r4, #12]
 800916a:	6665      	str	r5, [r4, #100]	; 0x64
 800916c:	f000 f847 	bl	80091fe <__retarget_lock_init_recursive>
 8009170:	f7ff ff96 	bl	80090a0 <__sfp_lock_release>
 8009174:	2208      	movs	r2, #8
 8009176:	4629      	mov	r1, r5
 8009178:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800917c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009180:	6025      	str	r5, [r4, #0]
 8009182:	61a5      	str	r5, [r4, #24]
 8009184:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009188:	f7fb fd88 	bl	8004c9c <memset>
 800918c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009190:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009194:	4620      	mov	r0, r4
 8009196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009198:	3468      	adds	r4, #104	; 0x68
 800919a:	e7d9      	b.n	8009150 <__sfp+0x1c>
 800919c:	2104      	movs	r1, #4
 800919e:	4638      	mov	r0, r7
 80091a0:	f7ff ff62 	bl	8009068 <__sfmoreglue>
 80091a4:	4604      	mov	r4, r0
 80091a6:	6030      	str	r0, [r6, #0]
 80091a8:	2800      	cmp	r0, #0
 80091aa:	d1d5      	bne.n	8009158 <__sfp+0x24>
 80091ac:	f7ff ff78 	bl	80090a0 <__sfp_lock_release>
 80091b0:	230c      	movs	r3, #12
 80091b2:	603b      	str	r3, [r7, #0]
 80091b4:	e7ee      	b.n	8009194 <__sfp+0x60>
 80091b6:	bf00      	nop
 80091b8:	08009510 	.word	0x08009510
 80091bc:	ffff0001 	.word	0xffff0001

080091c0 <_fwalk_reent>:
 80091c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091c4:	4606      	mov	r6, r0
 80091c6:	4688      	mov	r8, r1
 80091c8:	2700      	movs	r7, #0
 80091ca:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80091ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80091d2:	f1b9 0901 	subs.w	r9, r9, #1
 80091d6:	d505      	bpl.n	80091e4 <_fwalk_reent+0x24>
 80091d8:	6824      	ldr	r4, [r4, #0]
 80091da:	2c00      	cmp	r4, #0
 80091dc:	d1f7      	bne.n	80091ce <_fwalk_reent+0xe>
 80091de:	4638      	mov	r0, r7
 80091e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091e4:	89ab      	ldrh	r3, [r5, #12]
 80091e6:	2b01      	cmp	r3, #1
 80091e8:	d907      	bls.n	80091fa <_fwalk_reent+0x3a>
 80091ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80091ee:	3301      	adds	r3, #1
 80091f0:	d003      	beq.n	80091fa <_fwalk_reent+0x3a>
 80091f2:	4629      	mov	r1, r5
 80091f4:	4630      	mov	r0, r6
 80091f6:	47c0      	blx	r8
 80091f8:	4307      	orrs	r7, r0
 80091fa:	3568      	adds	r5, #104	; 0x68
 80091fc:	e7e9      	b.n	80091d2 <_fwalk_reent+0x12>

080091fe <__retarget_lock_init_recursive>:
 80091fe:	4770      	bx	lr

08009200 <__retarget_lock_acquire_recursive>:
 8009200:	4770      	bx	lr

08009202 <__retarget_lock_release_recursive>:
 8009202:	4770      	bx	lr

08009204 <__swhatbuf_r>:
 8009204:	b570      	push	{r4, r5, r6, lr}
 8009206:	460e      	mov	r6, r1
 8009208:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800920c:	4614      	mov	r4, r2
 800920e:	2900      	cmp	r1, #0
 8009210:	461d      	mov	r5, r3
 8009212:	b096      	sub	sp, #88	; 0x58
 8009214:	da07      	bge.n	8009226 <__swhatbuf_r+0x22>
 8009216:	2300      	movs	r3, #0
 8009218:	602b      	str	r3, [r5, #0]
 800921a:	89b3      	ldrh	r3, [r6, #12]
 800921c:	061a      	lsls	r2, r3, #24
 800921e:	d410      	bmi.n	8009242 <__swhatbuf_r+0x3e>
 8009220:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009224:	e00e      	b.n	8009244 <__swhatbuf_r+0x40>
 8009226:	466a      	mov	r2, sp
 8009228:	f000 f902 	bl	8009430 <_fstat_r>
 800922c:	2800      	cmp	r0, #0
 800922e:	dbf2      	blt.n	8009216 <__swhatbuf_r+0x12>
 8009230:	9a01      	ldr	r2, [sp, #4]
 8009232:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009236:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800923a:	425a      	negs	r2, r3
 800923c:	415a      	adcs	r2, r3
 800923e:	602a      	str	r2, [r5, #0]
 8009240:	e7ee      	b.n	8009220 <__swhatbuf_r+0x1c>
 8009242:	2340      	movs	r3, #64	; 0x40
 8009244:	2000      	movs	r0, #0
 8009246:	6023      	str	r3, [r4, #0]
 8009248:	b016      	add	sp, #88	; 0x58
 800924a:	bd70      	pop	{r4, r5, r6, pc}

0800924c <__smakebuf_r>:
 800924c:	898b      	ldrh	r3, [r1, #12]
 800924e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009250:	079d      	lsls	r5, r3, #30
 8009252:	4606      	mov	r6, r0
 8009254:	460c      	mov	r4, r1
 8009256:	d507      	bpl.n	8009268 <__smakebuf_r+0x1c>
 8009258:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800925c:	6023      	str	r3, [r4, #0]
 800925e:	6123      	str	r3, [r4, #16]
 8009260:	2301      	movs	r3, #1
 8009262:	6163      	str	r3, [r4, #20]
 8009264:	b002      	add	sp, #8
 8009266:	bd70      	pop	{r4, r5, r6, pc}
 8009268:	466a      	mov	r2, sp
 800926a:	ab01      	add	r3, sp, #4
 800926c:	f7ff ffca 	bl	8009204 <__swhatbuf_r>
 8009270:	9900      	ldr	r1, [sp, #0]
 8009272:	4605      	mov	r5, r0
 8009274:	4630      	mov	r0, r6
 8009276:	f7ff f983 	bl	8008580 <_malloc_r>
 800927a:	b948      	cbnz	r0, 8009290 <__smakebuf_r+0x44>
 800927c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009280:	059a      	lsls	r2, r3, #22
 8009282:	d4ef      	bmi.n	8009264 <__smakebuf_r+0x18>
 8009284:	f023 0303 	bic.w	r3, r3, #3
 8009288:	f043 0302 	orr.w	r3, r3, #2
 800928c:	81a3      	strh	r3, [r4, #12]
 800928e:	e7e3      	b.n	8009258 <__smakebuf_r+0xc>
 8009290:	4b0d      	ldr	r3, [pc, #52]	; (80092c8 <__smakebuf_r+0x7c>)
 8009292:	62b3      	str	r3, [r6, #40]	; 0x28
 8009294:	89a3      	ldrh	r3, [r4, #12]
 8009296:	6020      	str	r0, [r4, #0]
 8009298:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800929c:	81a3      	strh	r3, [r4, #12]
 800929e:	9b00      	ldr	r3, [sp, #0]
 80092a0:	6120      	str	r0, [r4, #16]
 80092a2:	6163      	str	r3, [r4, #20]
 80092a4:	9b01      	ldr	r3, [sp, #4]
 80092a6:	b15b      	cbz	r3, 80092c0 <__smakebuf_r+0x74>
 80092a8:	4630      	mov	r0, r6
 80092aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092ae:	f000 f8d1 	bl	8009454 <_isatty_r>
 80092b2:	b128      	cbz	r0, 80092c0 <__smakebuf_r+0x74>
 80092b4:	89a3      	ldrh	r3, [r4, #12]
 80092b6:	f023 0303 	bic.w	r3, r3, #3
 80092ba:	f043 0301 	orr.w	r3, r3, #1
 80092be:	81a3      	strh	r3, [r4, #12]
 80092c0:	89a0      	ldrh	r0, [r4, #12]
 80092c2:	4305      	orrs	r5, r0
 80092c4:	81a5      	strh	r5, [r4, #12]
 80092c6:	e7cd      	b.n	8009264 <__smakebuf_r+0x18>
 80092c8:	0800905d 	.word	0x0800905d

080092cc <_malloc_usable_size_r>:
 80092cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092d0:	1f18      	subs	r0, r3, #4
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	bfbc      	itt	lt
 80092d6:	580b      	ldrlt	r3, [r1, r0]
 80092d8:	18c0      	addlt	r0, r0, r3
 80092da:	4770      	bx	lr

080092dc <_raise_r>:
 80092dc:	291f      	cmp	r1, #31
 80092de:	b538      	push	{r3, r4, r5, lr}
 80092e0:	4604      	mov	r4, r0
 80092e2:	460d      	mov	r5, r1
 80092e4:	d904      	bls.n	80092f0 <_raise_r+0x14>
 80092e6:	2316      	movs	r3, #22
 80092e8:	6003      	str	r3, [r0, #0]
 80092ea:	f04f 30ff 	mov.w	r0, #4294967295
 80092ee:	bd38      	pop	{r3, r4, r5, pc}
 80092f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80092f2:	b112      	cbz	r2, 80092fa <_raise_r+0x1e>
 80092f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80092f8:	b94b      	cbnz	r3, 800930e <_raise_r+0x32>
 80092fa:	4620      	mov	r0, r4
 80092fc:	f000 f830 	bl	8009360 <_getpid_r>
 8009300:	462a      	mov	r2, r5
 8009302:	4601      	mov	r1, r0
 8009304:	4620      	mov	r0, r4
 8009306:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800930a:	f000 b817 	b.w	800933c <_kill_r>
 800930e:	2b01      	cmp	r3, #1
 8009310:	d00a      	beq.n	8009328 <_raise_r+0x4c>
 8009312:	1c59      	adds	r1, r3, #1
 8009314:	d103      	bne.n	800931e <_raise_r+0x42>
 8009316:	2316      	movs	r3, #22
 8009318:	6003      	str	r3, [r0, #0]
 800931a:	2001      	movs	r0, #1
 800931c:	e7e7      	b.n	80092ee <_raise_r+0x12>
 800931e:	2400      	movs	r4, #0
 8009320:	4628      	mov	r0, r5
 8009322:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009326:	4798      	blx	r3
 8009328:	2000      	movs	r0, #0
 800932a:	e7e0      	b.n	80092ee <_raise_r+0x12>

0800932c <raise>:
 800932c:	4b02      	ldr	r3, [pc, #8]	; (8009338 <raise+0xc>)
 800932e:	4601      	mov	r1, r0
 8009330:	6818      	ldr	r0, [r3, #0]
 8009332:	f7ff bfd3 	b.w	80092dc <_raise_r>
 8009336:	bf00      	nop
 8009338:	2000000c 	.word	0x2000000c

0800933c <_kill_r>:
 800933c:	b538      	push	{r3, r4, r5, lr}
 800933e:	2300      	movs	r3, #0
 8009340:	4d06      	ldr	r5, [pc, #24]	; (800935c <_kill_r+0x20>)
 8009342:	4604      	mov	r4, r0
 8009344:	4608      	mov	r0, r1
 8009346:	4611      	mov	r1, r2
 8009348:	602b      	str	r3, [r5, #0]
 800934a:	f7f8 fd12 	bl	8001d72 <_kill>
 800934e:	1c43      	adds	r3, r0, #1
 8009350:	d102      	bne.n	8009358 <_kill_r+0x1c>
 8009352:	682b      	ldr	r3, [r5, #0]
 8009354:	b103      	cbz	r3, 8009358 <_kill_r+0x1c>
 8009356:	6023      	str	r3, [r4, #0]
 8009358:	bd38      	pop	{r3, r4, r5, pc}
 800935a:	bf00      	nop
 800935c:	20000388 	.word	0x20000388

08009360 <_getpid_r>:
 8009360:	f7f8 bd00 	b.w	8001d64 <_getpid>

08009364 <__sread>:
 8009364:	b510      	push	{r4, lr}
 8009366:	460c      	mov	r4, r1
 8009368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800936c:	f000 f894 	bl	8009498 <_read_r>
 8009370:	2800      	cmp	r0, #0
 8009372:	bfab      	itete	ge
 8009374:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009376:	89a3      	ldrhlt	r3, [r4, #12]
 8009378:	181b      	addge	r3, r3, r0
 800937a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800937e:	bfac      	ite	ge
 8009380:	6563      	strge	r3, [r4, #84]	; 0x54
 8009382:	81a3      	strhlt	r3, [r4, #12]
 8009384:	bd10      	pop	{r4, pc}

08009386 <__swrite>:
 8009386:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800938a:	461f      	mov	r7, r3
 800938c:	898b      	ldrh	r3, [r1, #12]
 800938e:	4605      	mov	r5, r0
 8009390:	05db      	lsls	r3, r3, #23
 8009392:	460c      	mov	r4, r1
 8009394:	4616      	mov	r6, r2
 8009396:	d505      	bpl.n	80093a4 <__swrite+0x1e>
 8009398:	2302      	movs	r3, #2
 800939a:	2200      	movs	r2, #0
 800939c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093a0:	f000 f868 	bl	8009474 <_lseek_r>
 80093a4:	89a3      	ldrh	r3, [r4, #12]
 80093a6:	4632      	mov	r2, r6
 80093a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80093ac:	81a3      	strh	r3, [r4, #12]
 80093ae:	4628      	mov	r0, r5
 80093b0:	463b      	mov	r3, r7
 80093b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093ba:	f000 b817 	b.w	80093ec <_write_r>

080093be <__sseek>:
 80093be:	b510      	push	{r4, lr}
 80093c0:	460c      	mov	r4, r1
 80093c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093c6:	f000 f855 	bl	8009474 <_lseek_r>
 80093ca:	1c43      	adds	r3, r0, #1
 80093cc:	89a3      	ldrh	r3, [r4, #12]
 80093ce:	bf15      	itete	ne
 80093d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80093d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80093d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80093da:	81a3      	strheq	r3, [r4, #12]
 80093dc:	bf18      	it	ne
 80093de:	81a3      	strhne	r3, [r4, #12]
 80093e0:	bd10      	pop	{r4, pc}

080093e2 <__sclose>:
 80093e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093e6:	f000 b813 	b.w	8009410 <_close_r>
	...

080093ec <_write_r>:
 80093ec:	b538      	push	{r3, r4, r5, lr}
 80093ee:	4604      	mov	r4, r0
 80093f0:	4608      	mov	r0, r1
 80093f2:	4611      	mov	r1, r2
 80093f4:	2200      	movs	r2, #0
 80093f6:	4d05      	ldr	r5, [pc, #20]	; (800940c <_write_r+0x20>)
 80093f8:	602a      	str	r2, [r5, #0]
 80093fa:	461a      	mov	r2, r3
 80093fc:	f7f8 fcf0 	bl	8001de0 <_write>
 8009400:	1c43      	adds	r3, r0, #1
 8009402:	d102      	bne.n	800940a <_write_r+0x1e>
 8009404:	682b      	ldr	r3, [r5, #0]
 8009406:	b103      	cbz	r3, 800940a <_write_r+0x1e>
 8009408:	6023      	str	r3, [r4, #0]
 800940a:	bd38      	pop	{r3, r4, r5, pc}
 800940c:	20000388 	.word	0x20000388

08009410 <_close_r>:
 8009410:	b538      	push	{r3, r4, r5, lr}
 8009412:	2300      	movs	r3, #0
 8009414:	4d05      	ldr	r5, [pc, #20]	; (800942c <_close_r+0x1c>)
 8009416:	4604      	mov	r4, r0
 8009418:	4608      	mov	r0, r1
 800941a:	602b      	str	r3, [r5, #0]
 800941c:	f7f8 fcfc 	bl	8001e18 <_close>
 8009420:	1c43      	adds	r3, r0, #1
 8009422:	d102      	bne.n	800942a <_close_r+0x1a>
 8009424:	682b      	ldr	r3, [r5, #0]
 8009426:	b103      	cbz	r3, 800942a <_close_r+0x1a>
 8009428:	6023      	str	r3, [r4, #0]
 800942a:	bd38      	pop	{r3, r4, r5, pc}
 800942c:	20000388 	.word	0x20000388

08009430 <_fstat_r>:
 8009430:	b538      	push	{r3, r4, r5, lr}
 8009432:	2300      	movs	r3, #0
 8009434:	4d06      	ldr	r5, [pc, #24]	; (8009450 <_fstat_r+0x20>)
 8009436:	4604      	mov	r4, r0
 8009438:	4608      	mov	r0, r1
 800943a:	4611      	mov	r1, r2
 800943c:	602b      	str	r3, [r5, #0]
 800943e:	f7f8 fcf6 	bl	8001e2e <_fstat>
 8009442:	1c43      	adds	r3, r0, #1
 8009444:	d102      	bne.n	800944c <_fstat_r+0x1c>
 8009446:	682b      	ldr	r3, [r5, #0]
 8009448:	b103      	cbz	r3, 800944c <_fstat_r+0x1c>
 800944a:	6023      	str	r3, [r4, #0]
 800944c:	bd38      	pop	{r3, r4, r5, pc}
 800944e:	bf00      	nop
 8009450:	20000388 	.word	0x20000388

08009454 <_isatty_r>:
 8009454:	b538      	push	{r3, r4, r5, lr}
 8009456:	2300      	movs	r3, #0
 8009458:	4d05      	ldr	r5, [pc, #20]	; (8009470 <_isatty_r+0x1c>)
 800945a:	4604      	mov	r4, r0
 800945c:	4608      	mov	r0, r1
 800945e:	602b      	str	r3, [r5, #0]
 8009460:	f7f8 fcf4 	bl	8001e4c <_isatty>
 8009464:	1c43      	adds	r3, r0, #1
 8009466:	d102      	bne.n	800946e <_isatty_r+0x1a>
 8009468:	682b      	ldr	r3, [r5, #0]
 800946a:	b103      	cbz	r3, 800946e <_isatty_r+0x1a>
 800946c:	6023      	str	r3, [r4, #0]
 800946e:	bd38      	pop	{r3, r4, r5, pc}
 8009470:	20000388 	.word	0x20000388

08009474 <_lseek_r>:
 8009474:	b538      	push	{r3, r4, r5, lr}
 8009476:	4604      	mov	r4, r0
 8009478:	4608      	mov	r0, r1
 800947a:	4611      	mov	r1, r2
 800947c:	2200      	movs	r2, #0
 800947e:	4d05      	ldr	r5, [pc, #20]	; (8009494 <_lseek_r+0x20>)
 8009480:	602a      	str	r2, [r5, #0]
 8009482:	461a      	mov	r2, r3
 8009484:	f7f8 fcec 	bl	8001e60 <_lseek>
 8009488:	1c43      	adds	r3, r0, #1
 800948a:	d102      	bne.n	8009492 <_lseek_r+0x1e>
 800948c:	682b      	ldr	r3, [r5, #0]
 800948e:	b103      	cbz	r3, 8009492 <_lseek_r+0x1e>
 8009490:	6023      	str	r3, [r4, #0]
 8009492:	bd38      	pop	{r3, r4, r5, pc}
 8009494:	20000388 	.word	0x20000388

08009498 <_read_r>:
 8009498:	b538      	push	{r3, r4, r5, lr}
 800949a:	4604      	mov	r4, r0
 800949c:	4608      	mov	r0, r1
 800949e:	4611      	mov	r1, r2
 80094a0:	2200      	movs	r2, #0
 80094a2:	4d05      	ldr	r5, [pc, #20]	; (80094b8 <_read_r+0x20>)
 80094a4:	602a      	str	r2, [r5, #0]
 80094a6:	461a      	mov	r2, r3
 80094a8:	f7f8 fc7d 	bl	8001da6 <_read>
 80094ac:	1c43      	adds	r3, r0, #1
 80094ae:	d102      	bne.n	80094b6 <_read_r+0x1e>
 80094b0:	682b      	ldr	r3, [r5, #0]
 80094b2:	b103      	cbz	r3, 80094b6 <_read_r+0x1e>
 80094b4:	6023      	str	r3, [r4, #0]
 80094b6:	bd38      	pop	{r3, r4, r5, pc}
 80094b8:	20000388 	.word	0x20000388

080094bc <_init>:
 80094bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094be:	bf00      	nop
 80094c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094c2:	bc08      	pop	{r3}
 80094c4:	469e      	mov	lr, r3
 80094c6:	4770      	bx	lr

080094c8 <_fini>:
 80094c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ca:	bf00      	nop
 80094cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094ce:	bc08      	pop	{r3}
 80094d0:	469e      	mov	lr, r3
 80094d2:	4770      	bx	lr
