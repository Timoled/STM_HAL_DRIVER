
UART_JSON.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000789c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000052c  080079b0  080079b0  000179b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007edc  08007edc  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  08007edc  08007edc  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007edc  08007edc  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007edc  08007edc  00017edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ee0  08007ee0  00017ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08007ee4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000280  200001ec  080080d0  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000046c  080080d0  0002046c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c9ce  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002151  00000000  00000000  0002cbe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c28  00000000  00000000  0002ed38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bd8  00000000  00000000  0002f960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019082  00000000  00000000  00030538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c67e  00000000  00000000  000495ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b7cb  00000000  00000000  00055c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e1403  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000465c  00000000  00000000  000e1458  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001ec 	.word	0x200001ec
 800012c:	00000000 	.word	0x00000000
 8000130:	08007994 	.word	0x08007994

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f0 	.word	0x200001f0
 800014c:	08007994 	.word	0x08007994

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_d2iz>:
 8000a20:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a24:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a28:	d215      	bcs.n	8000a56 <__aeabi_d2iz+0x36>
 8000a2a:	d511      	bpl.n	8000a50 <__aeabi_d2iz+0x30>
 8000a2c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a30:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a34:	d912      	bls.n	8000a5c <__aeabi_d2iz+0x3c>
 8000a36:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a42:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a46:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4a:	bf18      	it	ne
 8000a4c:	4240      	negne	r0, r0
 8000a4e:	4770      	bx	lr
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	4770      	bx	lr
 8000a56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5a:	d105      	bne.n	8000a68 <__aeabi_d2iz+0x48>
 8000a5c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a60:	bf08      	it	eq
 8000a62:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop

08000a70 <__aeabi_d2uiz>:
 8000a70:	004a      	lsls	r2, r1, #1
 8000a72:	d211      	bcs.n	8000a98 <__aeabi_d2uiz+0x28>
 8000a74:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a78:	d211      	bcs.n	8000a9e <__aeabi_d2uiz+0x2e>
 8000a7a:	d50d      	bpl.n	8000a98 <__aeabi_d2uiz+0x28>
 8000a7c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a80:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a84:	d40e      	bmi.n	8000aa4 <__aeabi_d2uiz+0x34>
 8000a86:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a8e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a92:	fa23 f002 	lsr.w	r0, r3, r2
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_d2uiz+0x3a>
 8000aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0000 	mov.w	r0, #0
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2lz>:
 8000ab0:	b538      	push	{r3, r4, r5, lr}
 8000ab2:	460c      	mov	r4, r1
 8000ab4:	4605      	mov	r5, r0
 8000ab6:	4621      	mov	r1, r4
 8000ab8:	4628      	mov	r0, r5
 8000aba:	2200      	movs	r2, #0
 8000abc:	2300      	movs	r3, #0
 8000abe:	f7ff ff87 	bl	80009d0 <__aeabi_dcmplt>
 8000ac2:	b928      	cbnz	r0, 8000ad0 <__aeabi_d2lz+0x20>
 8000ac4:	4628      	mov	r0, r5
 8000ac6:	4621      	mov	r1, r4
 8000ac8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000acc:	f000 b80a 	b.w	8000ae4 <__aeabi_d2ulz>
 8000ad0:	4628      	mov	r0, r5
 8000ad2:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000ad6:	f000 f805 	bl	8000ae4 <__aeabi_d2ulz>
 8000ada:	4240      	negs	r0, r0
 8000adc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ae0:	bd38      	pop	{r3, r4, r5, pc}
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_d2ulz>:
 8000ae4:	b5d0      	push	{r4, r6, r7, lr}
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <__aeabi_d2ulz+0x34>)
 8000aea:	4606      	mov	r6, r0
 8000aec:	460f      	mov	r7, r1
 8000aee:	f7ff fcfd 	bl	80004ec <__aeabi_dmul>
 8000af2:	f7ff ffbd 	bl	8000a70 <__aeabi_d2uiz>
 8000af6:	4604      	mov	r4, r0
 8000af8:	f7ff fc7e 	bl	80003f8 <__aeabi_ui2d>
 8000afc:	2200      	movs	r2, #0
 8000afe:	4b07      	ldr	r3, [pc, #28]	; (8000b1c <__aeabi_d2ulz+0x38>)
 8000b00:	f7ff fcf4 	bl	80004ec <__aeabi_dmul>
 8000b04:	4602      	mov	r2, r0
 8000b06:	460b      	mov	r3, r1
 8000b08:	4630      	mov	r0, r6
 8000b0a:	4639      	mov	r1, r7
 8000b0c:	f7ff fb36 	bl	800017c <__aeabi_dsub>
 8000b10:	f7ff ffae 	bl	8000a70 <__aeabi_d2uiz>
 8000b14:	4621      	mov	r1, r4
 8000b16:	bdd0      	pop	{r4, r6, r7, pc}
 8000b18:	3df00000 	.word	0x3df00000
 8000b1c:	41f00000 	.word	0x41f00000

08000b20 <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d002      	beq.n	8000b36 <case_insensitive_strcmp+0x16>
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d101      	bne.n	8000b3a <case_insensitive_strcmp+0x1a>
    {
        return 1;
 8000b36:	2301      	movs	r3, #1
 8000b38:	e056      	b.n	8000be8 <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	429a      	cmp	r2, r3
 8000b40:	d10d      	bne.n	8000b5e <case_insensitive_strcmp+0x3e>
    {
        return 0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	e050      	b.n	8000be8 <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d101      	bne.n	8000b52 <case_insensitive_strcmp+0x32>
        {
            return 0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	e04a      	b.n	8000be8 <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	3301      	adds	r3, #1
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	603b      	str	r3, [r7, #0]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	73fb      	strb	r3, [r7, #15]
 8000b64:	7bfb      	ldrb	r3, [r7, #15]
 8000b66:	3301      	adds	r3, #1
 8000b68:	4a22      	ldr	r2, [pc, #136]	; (8000bf4 <case_insensitive_strcmp+0xd4>)
 8000b6a:	4413      	add	r3, r2
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	f003 0303 	and.w	r3, r3, #3
 8000b72:	2b01      	cmp	r3, #1
 8000b74:	d103      	bne.n	8000b7e <case_insensitive_strcmp+0x5e>
 8000b76:	7bfb      	ldrb	r3, [r7, #15]
 8000b78:	f103 0220 	add.w	r2, r3, #32
 8000b7c:	e000      	b.n	8000b80 <case_insensitive_strcmp+0x60>
 8000b7e:	7bfa      	ldrb	r2, [r7, #15]
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	73bb      	strb	r3, [r7, #14]
 8000b86:	7bbb      	ldrb	r3, [r7, #14]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	491a      	ldr	r1, [pc, #104]	; (8000bf4 <case_insensitive_strcmp+0xd4>)
 8000b8c:	440b      	add	r3, r1
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	f003 0303 	and.w	r3, r3, #3
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d102      	bne.n	8000b9e <case_insensitive_strcmp+0x7e>
 8000b98:	7bbb      	ldrb	r3, [r7, #14]
 8000b9a:	3320      	adds	r3, #32
 8000b9c:	e000      	b.n	8000ba0 <case_insensitive_strcmp+0x80>
 8000b9e:	7bbb      	ldrb	r3, [r7, #14]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	d0d0      	beq.n	8000b46 <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	737b      	strb	r3, [r7, #13]
 8000baa:	7b7b      	ldrb	r3, [r7, #13]
 8000bac:	3301      	adds	r3, #1
 8000bae:	4a11      	ldr	r2, [pc, #68]	; (8000bf4 <case_insensitive_strcmp+0xd4>)
 8000bb0:	4413      	add	r3, r2
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	f003 0303 	and.w	r3, r3, #3
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d103      	bne.n	8000bc4 <case_insensitive_strcmp+0xa4>
 8000bbc:	7b7b      	ldrb	r3, [r7, #13]
 8000bbe:	f103 0220 	add.w	r2, r3, #32
 8000bc2:	e000      	b.n	8000bc6 <case_insensitive_strcmp+0xa6>
 8000bc4:	7b7a      	ldrb	r2, [r7, #13]
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	733b      	strb	r3, [r7, #12]
 8000bcc:	7b3b      	ldrb	r3, [r7, #12]
 8000bce:	3301      	adds	r3, #1
 8000bd0:	4908      	ldr	r1, [pc, #32]	; (8000bf4 <case_insensitive_strcmp+0xd4>)
 8000bd2:	440b      	add	r3, r1
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	f003 0303 	and.w	r3, r3, #3
 8000bda:	2b01      	cmp	r3, #1
 8000bdc:	d102      	bne.n	8000be4 <case_insensitive_strcmp+0xc4>
 8000bde:	7b3b      	ldrb	r3, [r7, #12]
 8000be0:	3320      	adds	r3, #32
 8000be2:	e000      	b.n	8000be6 <case_insensitive_strcmp+0xc6>
 8000be4:	7b3b      	ldrb	r3, [r7, #12]
 8000be6:	1ad3      	subs	r3, r2, r3
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3714      	adds	r7, #20
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bc80      	pop	{r7}
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	08007aa0 	.word	0x08007aa0

08000bf8 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	2028      	movs	r0, #40	; 0x28
 8000c06:	4798      	blx	r3
 8000c08:	60f8      	str	r0, [r7, #12]
    if (node)
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d004      	beq.n	8000c1a <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 8000c10:	2228      	movs	r2, #40	; 0x28
 8000c12:	2100      	movs	r1, #0
 8000c14:	68f8      	ldr	r0, [r7, #12]
 8000c16:	f003 fd63 	bl	80046e0 <memset>
    }

    return node;
 8000c1a:	68fb      	ldr	r3, [r7, #12]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3710      	adds	r7, #16
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8000c30:	e037      	b.n	8000ca2 <cJSON_Delete+0x7e>
    {
        next = item->next;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d108      	bne.n	8000c56 <cJSON_Delete+0x32>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d004      	beq.n	8000c56 <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	689b      	ldr	r3, [r3, #8]
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff ffe7 	bl	8000c24 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	68db      	ldr	r3, [r3, #12]
 8000c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d109      	bne.n	8000c76 <cJSON_Delete+0x52>
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	691b      	ldr	r3, [r3, #16]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d005      	beq.n	8000c76 <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 8000c6a:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <cJSON_Delete+0x90>)
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	687a      	ldr	r2, [r7, #4]
 8000c70:	6912      	ldr	r2, [r2, #16]
 8000c72:	4610      	mov	r0, r2
 8000c74:	4798      	blx	r3
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	68db      	ldr	r3, [r3, #12]
 8000c7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d109      	bne.n	8000c96 <cJSON_Delete+0x72>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6a1b      	ldr	r3, [r3, #32]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d005      	beq.n	8000c96 <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 8000c8a:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <cJSON_Delete+0x90>)
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	687a      	ldr	r2, [r7, #4]
 8000c90:	6a12      	ldr	r2, [r2, #32]
 8000c92:	4610      	mov	r0, r2
 8000c94:	4798      	blx	r3
        }
        global_hooks.deallocate(item);
 8000c96:	4b07      	ldr	r3, [pc, #28]	; (8000cb4 <cJSON_Delete+0x90>)
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	4798      	blx	r3
        item = next;
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d1c4      	bne.n	8000c32 <cJSON_Delete+0xe>
    }
}
 8000ca8:	bf00      	nop
 8000caa:	bf00      	nop
 8000cac:	3710      	adds	r7, #16
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000000 	.word	0x20000000

08000cb8 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 8000cbc:	232e      	movs	r3, #46	; 0x2e
#endif
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bc80      	pop	{r7}
 8000cc4:	4770      	bx	lr
	...

08000cc8 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b098      	sub	sp, #96	; 0x60
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	6039      	str	r1, [r7, #0]
    double number = 0;
 8000cd2:	f04f 0200 	mov.w	r2, #0
 8000cd6:	f04f 0300 	mov.w	r3, #0
 8000cda:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    unsigned char *after_end = NULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 8000ce2:	f7ff ffe9 	bl	8000cb8 <get_decimal_point>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    size_t i = 0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	65fb      	str	r3, [r7, #92]	; 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d003      	beq.n	8000cfe <parse_number+0x36>
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d101      	bne.n	8000d02 <parse_number+0x3a>
    {
        return false;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	e0c6      	b.n	8000e90 <parse_number+0x1c8>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8000d02:	2300      	movs	r3, #0
 8000d04:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000d06:	e063      	b.n	8000dd0 <parse_number+0x108>
    {
        switch (buffer_at_offset(input_buffer)[i])
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	6899      	ldr	r1, [r3, #8]
 8000d10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d12:	440b      	add	r3, r1
 8000d14:	4413      	add	r3, r2
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	2b45      	cmp	r3, #69	; 0x45
 8000d1a:	dc3d      	bgt.n	8000d98 <parse_number+0xd0>
 8000d1c:	2b2b      	cmp	r3, #43	; 0x2b
 8000d1e:	db66      	blt.n	8000dee <parse_number+0x126>
 8000d20:	3b2b      	subs	r3, #43	; 0x2b
 8000d22:	2b1a      	cmp	r3, #26
 8000d24:	d863      	bhi.n	8000dee <parse_number+0x126>
 8000d26:	a201      	add	r2, pc, #4	; (adr r2, 8000d2c <parse_number+0x64>)
 8000d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d2c:	08000d9d 	.word	0x08000d9d
 8000d30:	08000def 	.word	0x08000def
 8000d34:	08000d9d 	.word	0x08000d9d
 8000d38:	08000dbb 	.word	0x08000dbb
 8000d3c:	08000def 	.word	0x08000def
 8000d40:	08000d9d 	.word	0x08000d9d
 8000d44:	08000d9d 	.word	0x08000d9d
 8000d48:	08000d9d 	.word	0x08000d9d
 8000d4c:	08000d9d 	.word	0x08000d9d
 8000d50:	08000d9d 	.word	0x08000d9d
 8000d54:	08000d9d 	.word	0x08000d9d
 8000d58:	08000d9d 	.word	0x08000d9d
 8000d5c:	08000d9d 	.word	0x08000d9d
 8000d60:	08000d9d 	.word	0x08000d9d
 8000d64:	08000d9d 	.word	0x08000d9d
 8000d68:	08000def 	.word	0x08000def
 8000d6c:	08000def 	.word	0x08000def
 8000d70:	08000def 	.word	0x08000def
 8000d74:	08000def 	.word	0x08000def
 8000d78:	08000def 	.word	0x08000def
 8000d7c:	08000def 	.word	0x08000def
 8000d80:	08000def 	.word	0x08000def
 8000d84:	08000def 	.word	0x08000def
 8000d88:	08000def 	.word	0x08000def
 8000d8c:	08000def 	.word	0x08000def
 8000d90:	08000def 	.word	0x08000def
 8000d94:	08000d9d 	.word	0x08000d9d
 8000d98:	2b65      	cmp	r3, #101	; 0x65
 8000d9a:	d128      	bne.n	8000dee <parse_number+0x126>
            case '9':
            case '+':
            case '-':
            case 'e':
            case 'E':
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	6899      	ldr	r1, [r3, #8]
 8000da4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000da6:	440b      	add	r3, r1
 8000da8:	4413      	add	r3, r2
 8000daa:	7819      	ldrb	r1, [r3, #0]
 8000dac:	f107 0208 	add.w	r2, r7, #8
 8000db0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000db2:	4413      	add	r3, r2
 8000db4:	460a      	mov	r2, r1
 8000db6:	701a      	strb	r2, [r3, #0]
                break;
 8000db8:	e007      	b.n	8000dca <parse_number+0x102>

            case '.':
                number_c_string[i] = decimal_point;
 8000dba:	f107 0208 	add.w	r2, r7, #8
 8000dbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000dc0:	4413      	add	r3, r2
 8000dc2:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8000dc6:	701a      	strb	r2, [r3, #0]
                break;
 8000dc8:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8000dca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000dcc:	3301      	adds	r3, #1
 8000dce:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000dd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000dd2:	2b3e      	cmp	r3, #62	; 0x3e
 8000dd4:	d80d      	bhi.n	8000df2 <parse_number+0x12a>
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d00a      	beq.n	8000df2 <parse_number+0x12a>
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	689a      	ldr	r2, [r3, #8]
 8000de0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000de2:	441a      	add	r2, r3
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d38d      	bcc.n	8000d08 <parse_number+0x40>

            default:
                goto loop_end;
        }
    }
loop_end:
 8000dec:	e001      	b.n	8000df2 <parse_number+0x12a>
                goto loop_end;
 8000dee:	bf00      	nop
 8000df0:	e000      	b.n	8000df4 <parse_number+0x12c>
loop_end:
 8000df2:	bf00      	nop
    number_c_string[i] = '\0';
 8000df4:	f107 0208 	add.w	r2, r7, #8
 8000df8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000dfa:	4413      	add	r3, r2
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 8000e00:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000e04:	f107 0308 	add.w	r3, r7, #8
 8000e08:	4611      	mov	r1, r2
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f004 fc64 	bl	80056d8 <strtod>
 8000e10:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
    if (number_c_string == after_end)
 8000e14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000e16:	f107 0308 	add.w	r3, r7, #8
 8000e1a:	429a      	cmp	r2, r3
 8000e1c:	d101      	bne.n	8000e22 <parse_number+0x15a>
    {
        return false; /* parse_error */
 8000e1e:	2300      	movs	r3, #0
 8000e20:	e036      	b.n	8000e90 <parse_number+0x1c8>
    }

    item->valuedouble = number;
 8000e22:	6879      	ldr	r1, [r7, #4]
 8000e24:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8000e28:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 8000e2c:	a31a      	add	r3, pc, #104	; (adr r3, 8000e98 <parse_number+0x1d0>)
 8000e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e32:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8000e36:	f7ff fddf 	bl	80009f8 <__aeabi_dcmpge>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d004      	beq.n	8000e4a <parse_number+0x182>
    {
        item->valueint = INT_MAX;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8000e46:	615a      	str	r2, [r3, #20]
 8000e48:	e015      	b.n	8000e76 <parse_number+0x1ae>
    }
    else if (number <= (double)INT_MIN)
 8000e4a:	f04f 0200 	mov.w	r2, #0
 8000e4e:	4b14      	ldr	r3, [pc, #80]	; (8000ea0 <parse_number+0x1d8>)
 8000e50:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8000e54:	f7ff fdc6 	bl	80009e4 <__aeabi_dcmple>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d004      	beq.n	8000e68 <parse_number+0x1a0>
    {
        item->valueint = INT_MIN;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000e64:	615a      	str	r2, [r3, #20]
 8000e66:	e006      	b.n	8000e76 <parse_number+0x1ae>
    }
    else
    {
        item->valueint = (int)number;
 8000e68:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8000e6c:	f7ff fdd8 	bl	8000a20 <__aeabi_d2iz>
 8000e70:	4602      	mov	r2, r0
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2208      	movs	r2, #8
 8000e7a:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000e82:	f107 0208 	add.w	r2, r7, #8
 8000e86:	1a8a      	subs	r2, r1, r2
 8000e88:	441a      	add	r2, r3
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	609a      	str	r2, [r3, #8]
    return true;
 8000e8e:	2301      	movs	r3, #1
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3760      	adds	r7, #96	; 0x60
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	ffc00000 	.word	0xffc00000
 8000e9c:	41dfffff 	.word	0x41dfffff
 8000ea0:	c1e00000 	.word	0xc1e00000

08000ea4 <parse_hex4>:
    return true;
}

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 8000eac:	2300      	movs	r3, #0
 8000eae:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	60bb      	str	r3, [r7, #8]
 8000eb8:	e04c      	b.n	8000f54 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	2b2f      	cmp	r3, #47	; 0x2f
 8000ec4:	d90f      	bls.n	8000ee6 <parse_hex4+0x42>
 8000ec6:	687a      	ldr	r2, [r7, #4]
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	4413      	add	r3, r2
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	2b39      	cmp	r3, #57	; 0x39
 8000ed0:	d809      	bhi.n	8000ee6 <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	461a      	mov	r2, r3
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	4413      	add	r3, r2
 8000ee0:	3b30      	subs	r3, #48	; 0x30
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	e02d      	b.n	8000f42 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	4413      	add	r3, r2
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	2b40      	cmp	r3, #64	; 0x40
 8000ef0:	d90f      	bls.n	8000f12 <parse_hex4+0x6e>
 8000ef2:	687a      	ldr	r2, [r7, #4]
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	2b46      	cmp	r3, #70	; 0x46
 8000efc:	d809      	bhi.n	8000f12 <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 8000efe:	687a      	ldr	r2, [r7, #4]
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	4413      	add	r3, r2
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	461a      	mov	r2, r3
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	3b37      	subs	r3, #55	; 0x37
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	e017      	b.n	8000f42 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	4413      	add	r3, r2
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	2b60      	cmp	r3, #96	; 0x60
 8000f1c:	d90f      	bls.n	8000f3e <parse_hex4+0x9a>
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	4413      	add	r3, r2
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	2b66      	cmp	r3, #102	; 0x66
 8000f28:	d809      	bhi.n	8000f3e <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	4413      	add	r3, r2
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	461a      	mov	r2, r3
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	4413      	add	r3, r2
 8000f38:	3b57      	subs	r3, #87	; 0x57
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	e001      	b.n	8000f42 <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	e00c      	b.n	8000f5c <parse_hex4+0xb8>
        }

        if (i < 3)
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d802      	bhi.n	8000f4e <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	011b      	lsls	r3, r3, #4
 8000f4c:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	3301      	adds	r3, #1
 8000f52:	60bb      	str	r3, [r7, #8]
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	2b03      	cmp	r3, #3
 8000f58:	d9af      	bls.n	8000eba <parse_hex4+0x16>
        }
    }

    return h;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3714      	adds	r7, #20
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bc80      	pop	{r7}
 8000f64:	4770      	bx	lr
	...

08000f68 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08a      	sub	sp, #40	; 0x28
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 8000f74:	2300      	movs	r3, #0
 8000f76:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int first_code = 0;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    unsigned char utf8_position = 0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    unsigned char sequence_length = 0;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    unsigned char first_byte_mark = 0;
 8000f92:	2300      	movs	r3, #0
 8000f94:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 8000f98:	68ba      	ldr	r2, [r7, #8]
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	2b05      	cmp	r3, #5
 8000fa0:	f340 80b7 	ble.w	8001112 <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 8000fa4:	69bb      	ldr	r3, [r7, #24]
 8000fa6:	3302      	adds	r3, #2
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff ff7b 	bl	8000ea4 <parse_hex4>
 8000fae:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8000fb6:	d304      	bcc.n	8000fc2 <utf16_literal_to_utf8+0x5a>
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8000fbe:	f0c0 80aa 	bcc.w	8001116 <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 8000fc8:	d337      	bcc.n	800103a <utf16_literal_to_utf8+0xd2>
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8000fd0:	d233      	bcs.n	800103a <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 8000fd2:	69bb      	ldr	r3, [r7, #24]
 8000fd4:	3306      	adds	r3, #6
 8000fd6:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 8000fdc:	230c      	movs	r3, #12
 8000fde:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if ((input_end - second_sequence) < 6)
 8000fe2:	68ba      	ldr	r2, [r7, #8]
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	2b05      	cmp	r3, #5
 8000fea:	f340 8096 	ble.w	800111a <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	2b5c      	cmp	r3, #92	; 0x5c
 8000ff4:	f040 8093 	bne.w	800111e <utf16_literal_to_utf8+0x1b6>
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	2b75      	cmp	r3, #117	; 0x75
 8001000:	f040 808d 	bne.w	800111e <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	3302      	adds	r3, #2
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff ff4b 	bl	8000ea4 <parse_hex4>
 800100e:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8001016:	f0c0 8084 	bcc.w	8001122 <utf16_literal_to_utf8+0x1ba>
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8001020:	d27f      	bcs.n	8001122 <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	029a      	lsls	r2, r3, #10
 8001026:	4b43      	ldr	r3, [pc, #268]	; (8001134 <utf16_literal_to_utf8+0x1cc>)
 8001028:	4013      	ands	r3, r2
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001030:	4313      	orrs	r3, r2
 8001032:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001036:	627b      	str	r3, [r7, #36]	; 0x24
    {
 8001038:	e004      	b.n	8001044 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 800103a:	2306      	movs	r3, #6
 800103c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        codepoint = first_code;
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 8001044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001046:	2b7f      	cmp	r3, #127	; 0x7f
 8001048:	d803      	bhi.n	8001052 <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 800104a:	2301      	movs	r3, #1
 800104c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001050:	e01f      	b.n	8001092 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 8001052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001054:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001058:	d206      	bcs.n	8001068 <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 800105a:	2302      	movs	r3, #2
 800105c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 8001060:	23c0      	movs	r3, #192	; 0xc0
 8001062:	f887 3020 	strb.w	r3, [r7, #32]
 8001066:	e014      	b.n	8001092 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 8001068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800106e:	d206      	bcs.n	800107e <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 8001070:	2303      	movs	r3, #3
 8001072:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 8001076:	23e0      	movs	r3, #224	; 0xe0
 8001078:	f887 3020 	strb.w	r3, [r7, #32]
 800107c:	e009      	b.n	8001092 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 800107e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001080:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8001084:	d24f      	bcs.n	8001126 <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 8001086:	2304      	movs	r3, #4
 8001088:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 800108c:	23f0      	movs	r3, #240	; 0xf0
 800108e:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8001092:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001096:	3b01      	subs	r3, #1
 8001098:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800109c:	e015      	b.n	80010ca <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 800109e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80010a6:	b2da      	uxtb	r2, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6819      	ldr	r1, [r3, #0]
 80010ac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80010b0:	440b      	add	r3, r1
 80010b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80010b6:	b2d2      	uxtb	r2, r2
 80010b8:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 80010ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010bc:	099b      	lsrs	r3, r3, #6
 80010be:	627b      	str	r3, [r7, #36]	; 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80010c0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80010c4:	3b01      	subs	r3, #1
 80010c6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80010ca:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d1e5      	bne.n	800109e <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 80010d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d909      	bls.n	80010ee <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 80010da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010dc:	b2d9      	uxtb	r1, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80010e6:	430a      	orrs	r2, r1
 80010e8:	b2d2      	uxtb	r2, r2
 80010ea:	701a      	strb	r2, [r3, #0]
 80010ec:	e007      	b.n	80010fe <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 80010ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f0:	b2da      	uxtb	r2, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80010fa:	b2d2      	uxtb	r2, r2
 80010fc:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001106:	441a      	add	r2, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	601a      	str	r2, [r3, #0]

    return sequence_length;
 800110c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001110:	e00b      	b.n	800112a <utf16_literal_to_utf8+0x1c2>
        goto fail;
 8001112:	bf00      	nop
 8001114:	e008      	b.n	8001128 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 8001116:	bf00      	nop
 8001118:	e006      	b.n	8001128 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800111a:	bf00      	nop
 800111c:	e004      	b.n	8001128 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800111e:	bf00      	nop
 8001120:	e002      	b.n	8001128 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8001122:	bf00      	nop
 8001124:	e000      	b.n	8001128 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 8001126:	bf00      	nop

fail:
    return 0;
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	3728      	adds	r7, #40	; 0x28
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	000ffc00 	.word	0x000ffc00

08001138 <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b08a      	sub	sp, #40	; 0x28
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	3301      	adds	r3, #1
 800114c:	4413      	add	r3, r2
 800114e:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	3301      	adds	r3, #1
 800115a:	4413      	add	r3, r2
 800115c:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 800115e:	2300      	movs	r3, #0
 8001160:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 8001162:	2300      	movs	r3, #0
 8001164:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	4413      	add	r3, r2
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b22      	cmp	r3, #34	; 0x22
 8001174:	f040 8102 	bne.w	800137c <parse_string+0x244>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 8001178:	2300      	movs	r3, #0
 800117a:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 800117c:	2300      	movs	r3, #0
 800117e:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8001180:	e017      	b.n	80011b2 <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 8001182:	6a3b      	ldr	r3, [r7, #32]
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	2b5c      	cmp	r3, #92	; 0x5c
 8001188:	d110      	bne.n	80011ac <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 800118a:	6a3b      	ldr	r3, [r7, #32]
 800118c:	1c5a      	adds	r2, r3, #1
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	461a      	mov	r2, r3
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	429a      	cmp	r2, r3
 800119c:	f080 80f0 	bcs.w	8001380 <parse_string+0x248>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	3301      	adds	r3, #1
 80011a4:	61bb      	str	r3, [r7, #24]
                input_end++;
 80011a6:	6a3b      	ldr	r3, [r7, #32]
 80011a8:	3301      	adds	r3, #1
 80011aa:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 80011ac:	6a3b      	ldr	r3, [r7, #32]
 80011ae:	3301      	adds	r3, #1
 80011b0:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	6a3a      	ldr	r2, [r7, #32]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	461a      	mov	r2, r3
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d203      	bcs.n	80011cc <parse_string+0x94>
 80011c4:	6a3b      	ldr	r3, [r7, #32]
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b22      	cmp	r3, #34	; 0x22
 80011ca:	d1da      	bne.n	8001182 <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	6a3a      	ldr	r2, [r7, #32]
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	461a      	mov	r2, r3
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	429a      	cmp	r2, r3
 80011dc:	f080 80d2 	bcs.w	8001384 <parse_string+0x24c>
 80011e0:	6a3b      	ldr	r3, [r7, #32]
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2b22      	cmp	r3, #34	; 0x22
 80011e6:	f040 80cd 	bne.w	8001384 <parse_string+0x24c>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	4413      	add	r3, r2
 80011f4:	6a3a      	ldr	r2, [r7, #32]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	461a      	mov	r2, r3
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	691b      	ldr	r3, [r3, #16]
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	3201      	adds	r2, #1
 8001208:	4610      	mov	r0, r2
 800120a:	4798      	blx	r3
 800120c:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	2b00      	cmp	r3, #0
 8001212:	f000 80b9 	beq.w	8001388 <parse_string+0x250>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 800121a:	e093      	b.n	8001344 <parse_string+0x20c>
    {
        if (*input_pointer != '\\')
 800121c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b5c      	cmp	r3, #92	; 0x5c
 8001222:	d008      	beq.n	8001236 <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 8001224:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001226:	1c53      	adds	r3, r2, #1
 8001228:	627b      	str	r3, [r7, #36]	; 0x24
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	1c59      	adds	r1, r3, #1
 800122e:	60f9      	str	r1, [r7, #12]
 8001230:	7812      	ldrb	r2, [r2, #0]
 8001232:	701a      	strb	r2, [r3, #0]
 8001234:	e086      	b.n	8001344 <parse_string+0x20c>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 8001236:	2302      	movs	r3, #2
 8001238:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 800123a:	6a3a      	ldr	r2, [r7, #32]
 800123c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	2b00      	cmp	r3, #0
 8001242:	f340 80a3 	ble.w	800138c <parse_string+0x254>
            {
                goto fail;
            }

            switch (input_pointer[1])
 8001246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001248:	3301      	adds	r3, #1
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	2b75      	cmp	r3, #117	; 0x75
 800124e:	f300 809f 	bgt.w	8001390 <parse_string+0x258>
 8001252:	2b5c      	cmp	r3, #92	; 0x5c
 8001254:	da04      	bge.n	8001260 <parse_string+0x128>
 8001256:	2b22      	cmp	r3, #34	; 0x22
 8001258:	d05c      	beq.n	8001314 <parse_string+0x1dc>
 800125a:	2b2f      	cmp	r3, #47	; 0x2f
 800125c:	d05a      	beq.n	8001314 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 800125e:	e097      	b.n	8001390 <parse_string+0x258>
 8001260:	3b5c      	subs	r3, #92	; 0x5c
 8001262:	2b19      	cmp	r3, #25
 8001264:	f200 8094 	bhi.w	8001390 <parse_string+0x258>
 8001268:	a201      	add	r2, pc, #4	; (adr r2, 8001270 <parse_string+0x138>)
 800126a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800126e:	bf00      	nop
 8001270:	08001315 	.word	0x08001315
 8001274:	08001391 	.word	0x08001391
 8001278:	08001391 	.word	0x08001391
 800127c:	08001391 	.word	0x08001391
 8001280:	08001391 	.word	0x08001391
 8001284:	08001391 	.word	0x08001391
 8001288:	080012d9 	.word	0x080012d9
 800128c:	08001391 	.word	0x08001391
 8001290:	08001391 	.word	0x08001391
 8001294:	08001391 	.word	0x08001391
 8001298:	080012e5 	.word	0x080012e5
 800129c:	08001391 	.word	0x08001391
 80012a0:	08001391 	.word	0x08001391
 80012a4:	08001391 	.word	0x08001391
 80012a8:	08001391 	.word	0x08001391
 80012ac:	08001391 	.word	0x08001391
 80012b0:	08001391 	.word	0x08001391
 80012b4:	08001391 	.word	0x08001391
 80012b8:	080012f1 	.word	0x080012f1
 80012bc:	08001391 	.word	0x08001391
 80012c0:	08001391 	.word	0x08001391
 80012c4:	08001391 	.word	0x08001391
 80012c8:	080012fd 	.word	0x080012fd
 80012cc:	08001391 	.word	0x08001391
 80012d0:	08001309 	.word	0x08001309
 80012d4:	08001323 	.word	0x08001323
                    *output_pointer++ = '\b';
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	1c5a      	adds	r2, r3, #1
 80012dc:	60fa      	str	r2, [r7, #12]
 80012de:	2208      	movs	r2, #8
 80012e0:	701a      	strb	r2, [r3, #0]
                    break;
 80012e2:	e02b      	b.n	800133c <parse_string+0x204>
                    *output_pointer++ = '\f';
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	1c5a      	adds	r2, r3, #1
 80012e8:	60fa      	str	r2, [r7, #12]
 80012ea:	220c      	movs	r2, #12
 80012ec:	701a      	strb	r2, [r3, #0]
                    break;
 80012ee:	e025      	b.n	800133c <parse_string+0x204>
                    *output_pointer++ = '\n';
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	1c5a      	adds	r2, r3, #1
 80012f4:	60fa      	str	r2, [r7, #12]
 80012f6:	220a      	movs	r2, #10
 80012f8:	701a      	strb	r2, [r3, #0]
                    break;
 80012fa:	e01f      	b.n	800133c <parse_string+0x204>
                    *output_pointer++ = '\r';
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	1c5a      	adds	r2, r3, #1
 8001300:	60fa      	str	r2, [r7, #12]
 8001302:	220d      	movs	r2, #13
 8001304:	701a      	strb	r2, [r3, #0]
                    break;
 8001306:	e019      	b.n	800133c <parse_string+0x204>
                    *output_pointer++ = '\t';
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	1c5a      	adds	r2, r3, #1
 800130c:	60fa      	str	r2, [r7, #12]
 800130e:	2209      	movs	r2, #9
 8001310:	701a      	strb	r2, [r3, #0]
                    break;
 8001312:	e013      	b.n	800133c <parse_string+0x204>
                    *output_pointer++ = input_pointer[1];
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	1c5a      	adds	r2, r3, #1
 8001318:	60fa      	str	r2, [r7, #12]
 800131a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800131c:	7852      	ldrb	r2, [r2, #1]
 800131e:	701a      	strb	r2, [r3, #0]
                    break;
 8001320:	e00c      	b.n	800133c <parse_string+0x204>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 8001322:	f107 030c 	add.w	r3, r7, #12
 8001326:	461a      	mov	r2, r3
 8001328:	6a39      	ldr	r1, [r7, #32]
 800132a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800132c:	f7ff fe1c 	bl	8000f68 <utf16_literal_to_utf8>
 8001330:	4603      	mov	r3, r0
 8001332:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 8001334:	7dfb      	ldrb	r3, [r7, #23]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d02c      	beq.n	8001394 <parse_string+0x25c>
                    break;
 800133a:	bf00      	nop
            }
            input_pointer += sequence_length;
 800133c:	7dfb      	ldrb	r3, [r7, #23]
 800133e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001340:	4413      	add	r3, r2
 8001342:	627b      	str	r3, [r7, #36]	; 0x24
    while (input_pointer < input_end)
 8001344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001346:	6a3b      	ldr	r3, [r7, #32]
 8001348:	429a      	cmp	r2, r3
 800134a:	f4ff af67 	bcc.w	800121c <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	2200      	movs	r2, #0
 8001352:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2210      	movs	r2, #16
 8001358:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	69fa      	ldr	r2, [r7, #28]
 800135e:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	6a3a      	ldr	r2, [r7, #32]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	461a      	mov	r2, r3
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	1c5a      	adds	r2, r3, #1
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	609a      	str	r2, [r3, #8]

    return true;
 8001378:	2301      	movs	r3, #1
 800137a:	e01e      	b.n	80013ba <parse_string+0x282>
        goto fail;
 800137c:	bf00      	nop
 800137e:	e00a      	b.n	8001396 <parse_string+0x25e>
                    goto fail;
 8001380:	bf00      	nop
 8001382:	e008      	b.n	8001396 <parse_string+0x25e>
            goto fail; /* string ended unexpectedly */
 8001384:	bf00      	nop
 8001386:	e006      	b.n	8001396 <parse_string+0x25e>
            goto fail; /* allocation failure */
 8001388:	bf00      	nop
 800138a:	e004      	b.n	8001396 <parse_string+0x25e>
                goto fail;
 800138c:	bf00      	nop
 800138e:	e002      	b.n	8001396 <parse_string+0x25e>
                    goto fail;
 8001390:	bf00      	nop
 8001392:	e000      	b.n	8001396 <parse_string+0x25e>
                        goto fail;
 8001394:	bf00      	nop

fail:
    if (output != NULL)
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d003      	beq.n	80013a4 <parse_string+0x26c>
    {
        input_buffer->hooks.deallocate(output);
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	695b      	ldr	r3, [r3, #20]
 80013a0:	69f8      	ldr	r0, [r7, #28]
 80013a2:	4798      	blx	r3
    }

    if (input_pointer != NULL)
 80013a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d006      	beq.n	80013b8 <parse_string+0x280>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	461a      	mov	r2, r3
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	609a      	str	r2, [r3, #8]
    }

    return false;
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3728      	adds	r7, #40	; 0x28
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop

080013c4 <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d003      	beq.n	80013da <buffer_skip_whitespace+0x16>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d101      	bne.n	80013de <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	e02c      	b.n	8001438 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d005      	beq.n	80013f0 <buffer_skip_whitespace+0x2c>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	689a      	ldr	r2, [r3, #8]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d306      	bcc.n	80013fe <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	e021      	b.n	8001438 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	1c5a      	adds	r2, r3, #1
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d00d      	beq.n	8001420 <buffer_skip_whitespace+0x5c>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	689a      	ldr	r2, [r3, #8]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	429a      	cmp	r2, r3
 800140e:	d207      	bcs.n	8001420 <buffer_skip_whitespace+0x5c>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	4413      	add	r3, r2
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b20      	cmp	r3, #32
 800141e:	d9e9      	bls.n	80013f4 <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689a      	ldr	r2, [r3, #8]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	429a      	cmp	r2, r3
 800142a:	d104      	bne.n	8001436 <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	1e5a      	subs	r2, r3, #1
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8001436:	687b      	ldr	r3, [r7, #4]
}
 8001438:	4618      	mov	r0, r3
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	bc80      	pop	{r7}
 8001440:	4770      	bx	lr
	...

08001444 <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d007      	beq.n	8001462 <skip_utf8_bom+0x1e>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d003      	beq.n	8001462 <skip_utf8_bom+0x1e>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <skip_utf8_bom+0x22>
    {
        return NULL;
 8001462:	2300      	movs	r3, #0
 8001464:	e01c      	b.n	80014a0 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d018      	beq.n	800149e <skip_utf8_bom+0x5a>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	1d1a      	adds	r2, r3, #4
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	429a      	cmp	r2, r3
 8001478:	d211      	bcs.n	800149e <skip_utf8_bom+0x5a>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	4413      	add	r3, r2
 8001484:	2203      	movs	r2, #3
 8001486:	4908      	ldr	r1, [pc, #32]	; (80014a8 <skip_utf8_bom+0x64>)
 8001488:	4618      	mov	r0, r3
 800148a:	f003 fafc 	bl	8004a86 <strncmp>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d104      	bne.n	800149e <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	1cda      	adds	r2, r3, #3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 800149e:	687b      	ldr	r3, [r7, #4]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	080079e8 	.word	0x080079e8

080014ac <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d101      	bne.n	80014c2 <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	e00c      	b.n	80014dc <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 80014c2:	68f8      	ldr	r0, [r7, #12]
 80014c4:	f7fe fe4e 	bl	8000164 <strlen>
 80014c8:	4603      	mov	r3, r0
 80014ca:	3301      	adds	r3, #1
 80014cc:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	68ba      	ldr	r2, [r7, #8]
 80014d2:	6979      	ldr	r1, [r7, #20]
 80014d4:	68f8      	ldr	r0, [r7, #12]
 80014d6:	f000 f805 	bl	80014e4 <cJSON_ParseWithLengthOpts>
 80014da:	4603      	mov	r3, r0
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3718      	adds	r7, #24
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b08e      	sub	sp, #56	; 0x38
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	60b9      	str	r1, [r7, #8]
 80014ee:	607a      	str	r2, [r7, #4]
 80014f0:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 80014f2:	f107 0318 	add.w	r3, r7, #24
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]
 80014fc:	609a      	str	r2, [r3, #8]
 80014fe:	60da      	str	r2, [r3, #12]
 8001500:	611a      	str	r2, [r3, #16]
 8001502:	615a      	str	r2, [r3, #20]
 8001504:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 8001506:	2300      	movs	r3, #0
 8001508:	637b      	str	r3, [r7, #52]	; 0x34

    /* reset error position */
    global_error.json = NULL;
 800150a:	4b41      	ldr	r3, [pc, #260]	; (8001610 <cJSON_ParseWithLengthOpts+0x12c>)
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 8001510:	4b3f      	ldr	r3, [pc, #252]	; (8001610 <cJSON_ParseWithLengthOpts+0x12c>)
 8001512:	2200      	movs	r2, #0
 8001514:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d042      	beq.n	80015a2 <cJSON_ParseWithLengthOpts+0xbe>
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d03f      	beq.n	80015a2 <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 800152a:	2300      	movs	r3, #0
 800152c:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 800152e:	4a39      	ldr	r2, [pc, #228]	; (8001614 <cJSON_ParseWithLengthOpts+0x130>)
 8001530:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001534:	ca07      	ldmia	r2, {r0, r1, r2}
 8001536:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 800153a:	4836      	ldr	r0, [pc, #216]	; (8001614 <cJSON_ParseWithLengthOpts+0x130>)
 800153c:	f7ff fb5c 	bl	8000bf8 <cJSON_New_Item>
 8001540:	6378      	str	r0, [r7, #52]	; 0x34
    if (item == NULL) /* memory fail */
 8001542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001544:	2b00      	cmp	r3, #0
 8001546:	d02e      	beq.n	80015a6 <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 8001548:	f107 0318 	add.w	r3, r7, #24
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff ff79 	bl	8001444 <skip_utf8_bom>
 8001552:	4603      	mov	r3, r0
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff ff35 	bl	80013c4 <buffer_skip_whitespace>
 800155a:	4603      	mov	r3, r0
 800155c:	4619      	mov	r1, r3
 800155e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001560:	f000 f868 	bl	8001634 <parse_value>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d01f      	beq.n	80015aa <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d00e      	beq.n	800158e <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 8001570:	f107 0318 	add.w	r3, r7, #24
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff ff25 	bl	80013c4 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 800157a:	6a3a      	ldr	r2, [r7, #32]
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	429a      	cmp	r2, r3
 8001580:	d215      	bcs.n	80015ae <cJSON_ParseWithLengthOpts+0xca>
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	6a3b      	ldr	r3, [r7, #32]
 8001586:	4413      	add	r3, r2
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d10f      	bne.n	80015ae <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d004      	beq.n	800159e <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	6a3b      	ldr	r3, [r7, #32]
 8001598:	441a      	add	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	601a      	str	r2, [r3, #0]
    }

    return item;
 800159e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015a0:	e031      	b.n	8001606 <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 80015a2:	bf00      	nop
 80015a4:	e004      	b.n	80015b0 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 80015a6:	bf00      	nop
 80015a8:	e002      	b.n	80015b0 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 80015aa:	bf00      	nop
 80015ac:	e000      	b.n	80015b0 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 80015ae:	bf00      	nop

fail:
    if (item != NULL)
 80015b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d002      	beq.n	80015bc <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 80015b6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80015b8:	f7ff fb34 	bl	8000c24 <cJSON_Delete>
    }

    if (value != NULL)
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d020      	beq.n	8001604 <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 80015c6:	2300      	movs	r3, #0
 80015c8:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 80015ca:	6a3a      	ldr	r2, [r7, #32]
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d202      	bcs.n	80015d8 <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 80015d2:	6a3b      	ldr	r3, [r7, #32]
 80015d4:	617b      	str	r3, [r7, #20]
 80015d6:	e005      	b.n	80015e4 <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d002      	beq.n	80015e4 <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	3b01      	subs	r3, #1
 80015e2:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d004      	beq.n	80015f4 <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	441a      	add	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 80015f4:	4b06      	ldr	r3, [pc, #24]	; (8001610 <cJSON_ParseWithLengthOpts+0x12c>)
 80015f6:	461a      	mov	r2, r3
 80015f8:	f107 0310 	add.w	r3, r7, #16
 80015fc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001600:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3738      	adds	r7, #56	; 0x38
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	20000208 	.word	0x20000208
 8001614:	20000000 	.word	0x20000000

08001618 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 8001620:	2200      	movs	r2, #0
 8001622:	2100      	movs	r1, #0
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f7ff ff41 	bl	80014ac <cJSON_ParseWithOpts>
 800162a:	4603      	mov	r3, r0
}
 800162c:	4618      	mov	r0, r3
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d003      	beq.n	800164c <parse_value+0x18>
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d101      	bne.n	8001650 <parse_value+0x1c>
    {
        return false; /* no input */
 800164c:	2300      	movs	r3, #0
 800164e:	e0d2      	b.n	80017f6 <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d01d      	beq.n	8001692 <parse_value+0x5e>
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	1d1a      	adds	r2, r3, #4
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	429a      	cmp	r2, r3
 8001662:	d816      	bhi.n	8001692 <parse_value+0x5e>
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	4413      	add	r3, r2
 800166e:	2204      	movs	r2, #4
 8001670:	4963      	ldr	r1, [pc, #396]	; (8001800 <parse_value+0x1cc>)
 8001672:	4618      	mov	r0, r3
 8001674:	f003 fa07 	bl	8004a86 <strncmp>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d109      	bne.n	8001692 <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2204      	movs	r2, #4
 8001682:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	1d1a      	adds	r2, r3, #4
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	609a      	str	r2, [r3, #8]
        return true;
 800168e:	2301      	movs	r3, #1
 8001690:	e0b1      	b.n	80017f6 <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d01d      	beq.n	80016d4 <parse_value+0xa0>
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	1d5a      	adds	r2, r3, #5
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d816      	bhi.n	80016d4 <parse_value+0xa0>
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	4413      	add	r3, r2
 80016b0:	2205      	movs	r2, #5
 80016b2:	4954      	ldr	r1, [pc, #336]	; (8001804 <parse_value+0x1d0>)
 80016b4:	4618      	mov	r0, r3
 80016b6:	f003 f9e6 	bl	8004a86 <strncmp>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d109      	bne.n	80016d4 <parse_value+0xa0>
    {
        item->type = cJSON_False;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2201      	movs	r2, #1
 80016c4:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	1d5a      	adds	r2, r3, #5
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	609a      	str	r2, [r3, #8]
        return true;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e090      	b.n	80017f6 <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d020      	beq.n	800171c <parse_value+0xe8>
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	1d1a      	adds	r2, r3, #4
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d819      	bhi.n	800171c <parse_value+0xe8>
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	4413      	add	r3, r2
 80016f2:	2204      	movs	r2, #4
 80016f4:	4944      	ldr	r1, [pc, #272]	; (8001808 <parse_value+0x1d4>)
 80016f6:	4618      	mov	r0, r3
 80016f8:	f003 f9c5 	bl	8004a86 <strncmp>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d10c      	bne.n	800171c <parse_value+0xe8>
    {
        item->type = cJSON_True;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2202      	movs	r2, #2
 8001706:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2201      	movs	r2, #1
 800170c:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	1d1a      	adds	r2, r3, #4
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	609a      	str	r2, [r3, #8]
        return true;
 8001718:	2301      	movs	r3, #1
 800171a:	e06c      	b.n	80017f6 <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d013      	beq.n	800174a <parse_value+0x116>
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	689a      	ldr	r2, [r3, #8]
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	429a      	cmp	r2, r3
 800172c:	d20d      	bcs.n	800174a <parse_value+0x116>
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	4413      	add	r3, r2
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	2b22      	cmp	r3, #34	; 0x22
 800173c:	d105      	bne.n	800174a <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 800173e:	6839      	ldr	r1, [r7, #0]
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f7ff fcf9 	bl	8001138 <parse_string>
 8001746:	4603      	mov	r3, r0
 8001748:	e055      	b.n	80017f6 <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d023      	beq.n	8001798 <parse_value+0x164>
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	689a      	ldr	r2, [r3, #8]
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	429a      	cmp	r2, r3
 800175a:	d21d      	bcs.n	8001798 <parse_value+0x164>
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	4413      	add	r3, r2
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	2b2d      	cmp	r3, #45	; 0x2d
 800176a:	d00f      	beq.n	800178c <parse_value+0x158>
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	4413      	add	r3, r2
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b2f      	cmp	r3, #47	; 0x2f
 800177a:	d90d      	bls.n	8001798 <parse_value+0x164>
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	4413      	add	r3, r2
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b39      	cmp	r3, #57	; 0x39
 800178a:	d805      	bhi.n	8001798 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 800178c:	6839      	ldr	r1, [r7, #0]
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7ff fa9a 	bl	8000cc8 <parse_number>
 8001794:	4603      	mov	r3, r0
 8001796:	e02e      	b.n	80017f6 <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d013      	beq.n	80017c6 <parse_value+0x192>
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	689a      	ldr	r2, [r3, #8]
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d20d      	bcs.n	80017c6 <parse_value+0x192>
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	4413      	add	r3, r2
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	2b5b      	cmp	r3, #91	; 0x5b
 80017b8:	d105      	bne.n	80017c6 <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 80017ba:	6839      	ldr	r1, [r7, #0]
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f000 f825 	bl	800180c <parse_array>
 80017c2:	4603      	mov	r3, r0
 80017c4:	e017      	b.n	80017f6 <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d013      	beq.n	80017f4 <parse_value+0x1c0>
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	689a      	ldr	r2, [r3, #8]
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d20d      	bcs.n	80017f4 <parse_value+0x1c0>
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	4413      	add	r3, r2
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	2b7b      	cmp	r3, #123	; 0x7b
 80017e6:	d105      	bne.n	80017f4 <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 80017e8:	6839      	ldr	r1, [r7, #0]
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f000 f8d2 	bl	8001994 <parse_object>
 80017f0:	4603      	mov	r3, r0
 80017f2:	e000      	b.n	80017f6 <parse_value+0x1c2>
    }

    return false;
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	080079bc 	.word	0x080079bc
 8001804:	080079ec 	.word	0x080079ec
 8001808:	080079f4 	.word	0x080079f4

0800180c <parse_array>:
    }
}

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 8001816:	2300      	movs	r3, #0
 8001818:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 800181a:	2300      	movs	r3, #0
 800181c:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	68db      	ldr	r3, [r3, #12]
 8001822:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001826:	d301      	bcc.n	800182c <parse_array+0x20>
    {
        return false; /* to deeply nested */
 8001828:	2300      	movs	r3, #0
 800182a:	e0af      	b.n	800198c <parse_array+0x180>
    }
    input_buffer->depth++;
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	1c5a      	adds	r2, r3, #1
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	4413      	add	r3, r2
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	2b5b      	cmp	r3, #91	; 0x5b
 8001844:	f040 8094 	bne.w	8001970 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	1c5a      	adds	r2, r3, #1
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8001852:	6838      	ldr	r0, [r7, #0]
 8001854:	f7ff fdb6 	bl	80013c4 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d00d      	beq.n	800187a <parse_array+0x6e>
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	689a      	ldr	r2, [r3, #8]
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	429a      	cmp	r2, r3
 8001868:	d207      	bcs.n	800187a <parse_array+0x6e>
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	4413      	add	r3, r2
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	2b5d      	cmp	r3, #93	; 0x5d
 8001878:	d061      	beq.n	800193e <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d005      	beq.n	800188c <parse_array+0x80>
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	689a      	ldr	r2, [r3, #8]
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	429a      	cmp	r2, r3
 800188a:	d305      	bcc.n	8001898 <parse_array+0x8c>
    {
        input_buffer->offset--;
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	1e5a      	subs	r2, r3, #1
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	609a      	str	r2, [r3, #8]
        goto fail;
 8001896:	e072      	b.n	800197e <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	1e5a      	subs	r2, r3, #1
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	3310      	adds	r3, #16
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff f9a6 	bl	8000bf8 <cJSON_New_Item>
 80018ac:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d05f      	beq.n	8001974 <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d104      	bne.n	80018c4 <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	617b      	str	r3, [r7, #20]
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	613b      	str	r3, [r7, #16]
 80018c2:	e007      	b.n	80018d4 <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	68fa      	ldr	r2, [r7, #12]
 80018c8:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	1c5a      	adds	r2, r3, #1
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 80018de:	6838      	ldr	r0, [r7, #0]
 80018e0:	f7ff fd70 	bl	80013c4 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 80018e4:	6839      	ldr	r1, [r7, #0]
 80018e6:	6938      	ldr	r0, [r7, #16]
 80018e8:	f7ff fea4 	bl	8001634 <parse_value>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d042      	beq.n	8001978 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 80018f2:	6838      	ldr	r0, [r7, #0]
 80018f4:	f7ff fd66 	bl	80013c4 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d00d      	beq.n	800191a <parse_array+0x10e>
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	689a      	ldr	r2, [r3, #8]
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	429a      	cmp	r2, r3
 8001908:	d207      	bcs.n	800191a <parse_array+0x10e>
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	4413      	add	r3, r2
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	2b2c      	cmp	r3, #44	; 0x2c
 8001918:	d0c3      	beq.n	80018a2 <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d02d      	beq.n	800197c <parse_array+0x170>
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	689a      	ldr	r2, [r3, #8]
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	429a      	cmp	r2, r3
 800192a:	d227      	bcs.n	800197c <parse_array+0x170>
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	4413      	add	r3, r2
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b5d      	cmp	r3, #93	; 0x5d
 800193a:	d11f      	bne.n	800197c <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 800193c:	e000      	b.n	8001940 <parse_array+0x134>
        goto success;
 800193e:	bf00      	nop
    input_buffer->depth--;
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	1e5a      	subs	r2, r3, #1
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d002      	beq.n	8001956 <parse_array+0x14a>
        head->prev = current_item;
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2220      	movs	r2, #32
 800195a:	60da      	str	r2, [r3, #12]
    item->child = head;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	697a      	ldr	r2, [r7, #20]
 8001960:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	1c5a      	adds	r2, r3, #1
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	609a      	str	r2, [r3, #8]

    return true;
 800196c:	2301      	movs	r3, #1
 800196e:	e00d      	b.n	800198c <parse_array+0x180>
        goto fail;
 8001970:	bf00      	nop
 8001972:	e004      	b.n	800197e <parse_array+0x172>
            goto fail; /* allocation failure */
 8001974:	bf00      	nop
 8001976:	e002      	b.n	800197e <parse_array+0x172>
            goto fail; /* failed to parse value */
 8001978:	bf00      	nop
 800197a:	e000      	b.n	800197e <parse_array+0x172>
        goto fail; /* expected end of array */
 800197c:	bf00      	nop

fail:
    if (head != NULL)
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d002      	beq.n	800198a <parse_array+0x17e>
    {
        cJSON_Delete(head);
 8001984:	6978      	ldr	r0, [r7, #20]
 8001986:	f7ff f94d 	bl	8000c24 <cJSON_Delete>
    }

    return false;
 800198a:	2300      	movs	r3, #0
}
 800198c:	4618      	mov	r0, r3
 800198e:	3718      	adds	r7, #24
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <parse_object>:
    return true;
}

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b086      	sub	sp, #24
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 800199e:	2300      	movs	r3, #0
 80019a0:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019ae:	d301      	bcc.n	80019b4 <parse_object+0x20>
    {
        return false; /* to deeply nested */
 80019b0:	2300      	movs	r3, #0
 80019b2:	e0ea      	b.n	8001b8a <parse_object+0x1f6>
    }
    input_buffer->depth++;
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	1c5a      	adds	r2, r3, #1
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	f000 80d0 	beq.w	8001b66 <parse_object+0x1d2>
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	689a      	ldr	r2, [r3, #8]
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	f080 80c9 	bcs.w	8001b66 <parse_object+0x1d2>
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	4413      	add	r3, r2
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	2b7b      	cmp	r3, #123	; 0x7b
 80019e2:	f040 80c0 	bne.w	8001b66 <parse_object+0x1d2>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	1c5a      	adds	r2, r3, #1
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 80019f0:	6838      	ldr	r0, [r7, #0]
 80019f2:	f7ff fce7 	bl	80013c4 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d00e      	beq.n	8001a1a <parse_object+0x86>
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	689a      	ldr	r2, [r3, #8]
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d208      	bcs.n	8001a1a <parse_object+0x86>
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	4413      	add	r3, r2
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b7d      	cmp	r3, #125	; 0x7d
 8001a16:	f000 808d 	beq.w	8001b34 <parse_object+0x1a0>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d005      	beq.n	8001a2c <parse_object+0x98>
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	689a      	ldr	r2, [r3, #8]
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d305      	bcc.n	8001a38 <parse_object+0xa4>
    {
        input_buffer->offset--;
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	1e5a      	subs	r2, r3, #1
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	609a      	str	r2, [r3, #8]
        goto fail;
 8001a36:	e0a1      	b.n	8001b7c <parse_object+0x1e8>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	1e5a      	subs	r2, r3, #1
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	3310      	adds	r3, #16
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff f8d6 	bl	8000bf8 <cJSON_New_Item>
 8001a4c:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	f000 808a 	beq.w	8001b6a <parse_object+0x1d6>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d104      	bne.n	8001a66 <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	617b      	str	r3, [r7, #20]
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	613b      	str	r3, [r7, #16]
 8001a64:	e007      	b.n	8001a76 <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	68fa      	ldr	r2, [r7, #12]
 8001a6a:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	613b      	str	r3, [r7, #16]
        }

        /* parse the name of the child */
        input_buffer->offset++;
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	1c5a      	adds	r2, r3, #1
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001a80:	6838      	ldr	r0, [r7, #0]
 8001a82:	f7ff fc9f 	bl	80013c4 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 8001a86:	6839      	ldr	r1, [r7, #0]
 8001a88:	6938      	ldr	r0, [r7, #16]
 8001a8a:	f7ff fb55 	bl	8001138 <parse_string>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d06c      	beq.n	8001b6e <parse_object+0x1da>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 8001a94:	6838      	ldr	r0, [r7, #0]
 8001a96:	f7ff fc95 	bl	80013c4 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	691a      	ldr	r2, [r3, #16]
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d061      	beq.n	8001b72 <parse_object+0x1de>
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	689a      	ldr	r2, [r3, #8]
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d25b      	bcs.n	8001b72 <parse_object+0x1de>
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	2b3a      	cmp	r3, #58	; 0x3a
 8001ac8:	d153      	bne.n	8001b72 <parse_object+0x1de>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	1c5a      	adds	r2, r3, #1
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001ad4:	6838      	ldr	r0, [r7, #0]
 8001ad6:	f7ff fc75 	bl	80013c4 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8001ada:	6839      	ldr	r1, [r7, #0]
 8001adc:	6938      	ldr	r0, [r7, #16]
 8001ade:	f7ff fda9 	bl	8001634 <parse_value>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d046      	beq.n	8001b76 <parse_object+0x1e2>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8001ae8:	6838      	ldr	r0, [r7, #0]
 8001aea:	f7ff fc6b 	bl	80013c4 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d00d      	beq.n	8001b10 <parse_object+0x17c>
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	689a      	ldr	r2, [r3, #8]
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d207      	bcs.n	8001b10 <parse_object+0x17c>
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	4413      	add	r3, r2
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	2b2c      	cmp	r3, #44	; 0x2c
 8001b0e:	d098      	beq.n	8001a42 <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d031      	beq.n	8001b7a <parse_object+0x1e6>
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	689a      	ldr	r2, [r3, #8]
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d22b      	bcs.n	8001b7a <parse_object+0x1e6>
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	2b7d      	cmp	r3, #125	; 0x7d
 8001b30:	d123      	bne.n	8001b7a <parse_object+0x1e6>
    {
        goto fail; /* expected end of object */
    }

success:
 8001b32:	e000      	b.n	8001b36 <parse_object+0x1a2>
        goto success; /* empty object */
 8001b34:	bf00      	nop
    input_buffer->depth--;
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	1e5a      	subs	r2, r3, #1
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d002      	beq.n	8001b4c <parse_object+0x1b8>
        head->prev = current_item;
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	693a      	ldr	r2, [r7, #16]
 8001b4a:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2240      	movs	r2, #64	; 0x40
 8001b50:	60da      	str	r2, [r3, #12]
    item->child = head;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	697a      	ldr	r2, [r7, #20]
 8001b56:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	1c5a      	adds	r2, r3, #1
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	609a      	str	r2, [r3, #8]
    return true;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e011      	b.n	8001b8a <parse_object+0x1f6>
        goto fail; /* not an object */
 8001b66:	bf00      	nop
 8001b68:	e008      	b.n	8001b7c <parse_object+0x1e8>
            goto fail; /* allocation failure */
 8001b6a:	bf00      	nop
 8001b6c:	e006      	b.n	8001b7c <parse_object+0x1e8>
            goto fail; /* failed to parse name */
 8001b6e:	bf00      	nop
 8001b70:	e004      	b.n	8001b7c <parse_object+0x1e8>
            goto fail; /* invalid object */
 8001b72:	bf00      	nop
 8001b74:	e002      	b.n	8001b7c <parse_object+0x1e8>
            goto fail; /* failed to parse value */
 8001b76:	bf00      	nop
 8001b78:	e000      	b.n	8001b7c <parse_object+0x1e8>
        goto fail; /* expected end of object */
 8001b7a:	bf00      	nop

fail:
    if (head != NULL)
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d002      	beq.n	8001b88 <parse_object+0x1f4>
    {
        cJSON_Delete(head);
 8001b82:	6978      	ldr	r0, [r7, #20]
 8001b84:	f7ff f84e 	bl	8000c24 <cJSON_Delete>
    }

    return false;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3718      	adds	r7, #24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b086      	sub	sp, #24
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	60f8      	str	r0, [r7, #12]
 8001b9a:	60b9      	str	r1, [r7, #8]
 8001b9c:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d002      	beq.n	8001bae <get_object_item+0x1c>
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d101      	bne.n	8001bb2 <get_object_item+0x20>
    {
        return NULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	e033      	b.n	8001c1a <get_object_item+0x88>
    }

    current_element = object->child;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d017      	beq.n	8001bee <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8001bbe:	e002      	b.n	8001bc6 <get_object_item+0x34>
        {
            current_element = current_element->next;
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d01c      	beq.n	8001c06 <get_object_item+0x74>
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	6a1b      	ldr	r3, [r3, #32]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d018      	beq.n	8001c06 <get_object_item+0x74>
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	6a1b      	ldr	r3, [r3, #32]
 8001bd8:	4619      	mov	r1, r3
 8001bda:	68b8      	ldr	r0, [r7, #8]
 8001bdc:	f7fe fab8 	bl	8000150 <strcmp>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1ec      	bne.n	8001bc0 <get_object_item+0x2e>
 8001be6:	e00e      	b.n	8001c06 <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d008      	beq.n	8001c06 <get_object_item+0x74>
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	6a1b      	ldr	r3, [r3, #32]
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	68b8      	ldr	r0, [r7, #8]
 8001bfc:	f7fe ff90 	bl	8000b20 <case_insensitive_strcmp>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d1f0      	bne.n	8001be8 <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d003      	beq.n	8001c14 <get_object_item+0x82>
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	6a1b      	ldr	r3, [r3, #32]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d101      	bne.n	8001c18 <get_object_item+0x86>
        return NULL;
 8001c14:	2300      	movs	r3, #0
 8001c16:	e000      	b.n	8001c1a <get_object_item+0x88>
    }

    return current_element;
 8001c18:	697b      	ldr	r3, [r7, #20]
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3718      	adds	r7, #24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <cJSON_GetObjectItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b082      	sub	sp, #8
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
 8001c2a:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, false);
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	6839      	ldr	r1, [r7, #0]
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f7ff ffae 	bl	8001b92 <get_object_item>
 8001c36:	4603      	mov	r3, r0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <__io_putchar>:
#ifdef __GNUC__
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch,FILE *f)
#endif
PUTCHAR_PROTOTYPE {
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
	// CONG PC
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 8001c48:	1d39      	adds	r1, r7, #4
 8001c4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c4e:	2201      	movs	r2, #1
 8001c50:	4803      	ldr	r0, [pc, #12]	; (8001c60 <__io_putchar+0x20>)
 8001c52:	f002 f80e 	bl	8003c72 <HAL_UART_Transmit>
	return ch;
 8001c56:	687b      	ldr	r3, [r7, #4]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	20000410 	.word	0x20000410

08001c64 <XulyJson>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void XulyJson(char *DataJson) {
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
	str_json = cJSON_Parse(DataJson);
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f7ff fcd3 	bl	8001618 <cJSON_Parse>
 8001c72:	4603      	mov	r3, r0
 8001c74:	4a31      	ldr	r2, [pc, #196]	; (8001d3c <XulyJson+0xd8>)
 8001c76:	6013      	str	r3, [r2, #0]
	if (!str_json) {
 8001c78:	4b30      	ldr	r3, [pc, #192]	; (8001d3c <XulyJson+0xd8>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d103      	bne.n	8001c88 <XulyJson+0x24>
		printf("JSON ERROR!\r\n");
 8001c80:	482f      	ldr	r0, [pc, #188]	; (8001d40 <XulyJson+0xdc>)
 8001c82:	f002 fe61 	bl	8004948 <puts>
		return;
 8001c86:	e056      	b.n	8001d36 <XulyJson+0xd2>
	} else {
		printf("JSON OK\r\n");
 8001c88:	482e      	ldr	r0, [pc, #184]	; (8001d44 <XulyJson+0xe0>)
 8001c8a:	f002 fe5d 	bl	8004948 <puts>
		// {"TB1" :"1-0",...}
		if (cJSON_GetObjectItem(str_json, "TB1"))
 8001c8e:	4b2b      	ldr	r3, [pc, #172]	; (8001d3c <XulyJson+0xd8>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	492d      	ldr	r1, [pc, #180]	; (8001d48 <XulyJson+0xe4>)
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff ffc4 	bl	8001c22 <cJSON_GetObjectItem>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d017      	beq.n	8001cd0 <XulyJson+0x6c>
		{
			TB1 = atoi(cJSON_GetObjectItem(str_json, "TB1") -> valuestring);
 8001ca0:	4b26      	ldr	r3, [pc, #152]	; (8001d3c <XulyJson+0xd8>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4928      	ldr	r1, [pc, #160]	; (8001d48 <XulyJson+0xe4>)
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff ffbb 	bl	8001c22 <cJSON_GetObjectItem>
 8001cac:	4603      	mov	r3, r0
 8001cae:	691b      	ldr	r3, [r3, #16]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f002 fcc9 	bl	8004648 <atoi>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	461a      	mov	r2, r3
 8001cba:	4b24      	ldr	r3, [pc, #144]	; (8001d4c <XulyJson+0xe8>)
 8001cbc:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, TB1);
 8001cbe:	4b23      	ldr	r3, [pc, #140]	; (8001d4c <XulyJson+0xe8>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cca:	4821      	ldr	r0, [pc, #132]	; (8001d50 <XulyJson+0xec>)
 8001ccc:	f001 fa9c 	bl	8003208 <HAL_GPIO_WritePin>
				printf("ON LED 1");
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
			}
			*/
		}
		 if (cJSON_GetObjectItem(str_json, "TB2"))
 8001cd0:	4b1a      	ldr	r3, [pc, #104]	; (8001d3c <XulyJson+0xd8>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	491f      	ldr	r1, [pc, #124]	; (8001d54 <XulyJson+0xf0>)
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff ffa3 	bl	8001c22 <cJSON_GetObjectItem>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d024      	beq.n	8001d2c <XulyJson+0xc8>
		{
			if (strstr(cJSON_GetObjectItem(str_json, "TB2")->valuestring, "0") != NULL) {
 8001ce2:	4b16      	ldr	r3, [pc, #88]	; (8001d3c <XulyJson+0xd8>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	491b      	ldr	r1, [pc, #108]	; (8001d54 <XulyJson+0xf0>)
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff ff9a 	bl	8001c22 <cJSON_GetObjectItem>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	691b      	ldr	r3, [r3, #16]
 8001cf2:	2130      	movs	r1, #48	; 0x30
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f002 feb9 	bl	8004a6c <strchr>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d003      	beq.n	8001d08 <XulyJson+0xa4>
				printf("OFF LED 2");
 8001d00:	4815      	ldr	r0, [pc, #84]	; (8001d58 <XulyJson+0xf4>)
 8001d02:	f002 fd9b 	bl	800483c <iprintf>
 8001d06:	e011      	b.n	8001d2c <XulyJson+0xc8>
			} else if (strstr(cJSON_GetObjectItem(str_json, "TB2")->valuestring, "1") != NULL) {
 8001d08:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <XulyJson+0xd8>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4911      	ldr	r1, [pc, #68]	; (8001d54 <XulyJson+0xf0>)
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff ff87 	bl	8001c22 <cJSON_GetObjectItem>
 8001d14:	4603      	mov	r3, r0
 8001d16:	691b      	ldr	r3, [r3, #16]
 8001d18:	2131      	movs	r1, #49	; 0x31
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f002 fea6 	bl	8004a6c <strchr>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d002      	beq.n	8001d2c <XulyJson+0xc8>
				printf("ON LED 2");
 8001d26:	480d      	ldr	r0, [pc, #52]	; (8001d5c <XulyJson+0xf8>)
 8001d28:	f002 fd88 	bl	800483c <iprintf>
		 {
			 C1 = atoi(cJSON_GetObjectItem(str_json, "C1") -> valuestring);
			 // convert from char	 to int
		 }
		 */
		cJSON_Delete(str_json);
 8001d2c:	4b03      	ldr	r3, [pc, #12]	; (8001d3c <XulyJson+0xd8>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7fe ff77 	bl	8000c24 <cJSON_Delete>
	}
}
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	200002d4 	.word	0x200002d4
 8001d40:	080079fc 	.word	0x080079fc
 8001d44:	08007a0c 	.word	0x08007a0c
 8001d48:	08007a18 	.word	0x08007a18
 8001d4c:	2000021c 	.word	0x2000021c
 8001d50:	40011000 	.word	0x40011000
 8001d54:	08007a1c 	.word	0x08007a1c
 8001d58:	08007a20 	.word	0x08007a20
 8001d5c:	08007a2c 	.word	0x08007a2c

08001d60 <senddata>:
void senddata(unsigned temp, unsigned gas, unsigned hum) {
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	607a      	str	r2, [r7, #4]
	/* // {"temp":" 69*c", "gas":"1",...}  */

	// data end of array char
	// delete data
	for (int i = 0; i < 50; i++) {
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	617b      	str	r3, [r7, #20]
 8001d70:	e020      	b.n	8001db4 <senddata+0x54>
		Str_temp[i] = 0;
 8001d72:	4a6f      	ldr	r2, [pc, #444]	; (8001f30 <senddata+0x1d0>)
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	4413      	add	r3, r2
 8001d78:	2200      	movs	r2, #0
 8001d7a:	701a      	strb	r2, [r3, #0]
		Str_gas[i] = 0;
 8001d7c:	4a6d      	ldr	r2, [pc, #436]	; (8001f34 <senddata+0x1d4>)
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	4413      	add	r3, r2
 8001d82:	2200      	movs	r2, #0
 8001d84:	701a      	strb	r2, [r3, #0]
		Str_hum[i] = 0;
 8001d86:	4a6c      	ldr	r2, [pc, #432]	; (8001f38 <senddata+0x1d8>)
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	701a      	strb	r2, [r3, #0]
		Str_TB1[i] = 0;
 8001d90:	4a6a      	ldr	r2, [pc, #424]	; (8001f3c <senddata+0x1dc>)
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	4413      	add	r3, r2
 8001d96:	2200      	movs	r2, #0
 8001d98:	701a      	strb	r2, [r3, #0]
		Str_TB2[i] = 0;
 8001d9a:	4a69      	ldr	r2, [pc, #420]	; (8001f40 <senddata+0x1e0>)
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	4413      	add	r3, r2
 8001da0:	2200      	movs	r2, #0
 8001da2:	701a      	strb	r2, [r3, #0]
		JSON[i] = 0;
 8001da4:	4a67      	ldr	r2, [pc, #412]	; (8001f44 <senddata+0x1e4>)
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	4413      	add	r3, r2
 8001daa:	2200      	movs	r2, #0
 8001dac:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 50; i++) {
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	3301      	adds	r3, #1
 8001db2:	617b      	str	r3, [r7, #20]
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	2b31      	cmp	r3, #49	; 0x31
 8001db8:	dddb      	ble.n	8001d72 <senddata+0x12>
	}

	// transmit to array char

	sprintf(Str_temp, "%d", temp);
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	4962      	ldr	r1, [pc, #392]	; (8001f48 <senddata+0x1e8>)
 8001dbe:	485c      	ldr	r0, [pc, #368]	; (8001f30 <senddata+0x1d0>)
 8001dc0:	f002 fde2 	bl	8004988 <siprintf>
	sprintf(Str_gas, "%d", gas);
 8001dc4:	68ba      	ldr	r2, [r7, #8]
 8001dc6:	4960      	ldr	r1, [pc, #384]	; (8001f48 <senddata+0x1e8>)
 8001dc8:	485a      	ldr	r0, [pc, #360]	; (8001f34 <senddata+0x1d4>)
 8001dca:	f002 fddd 	bl	8004988 <siprintf>
	sprintf(Str_hum, "%d", hum);
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	495d      	ldr	r1, [pc, #372]	; (8001f48 <senddata+0x1e8>)
 8001dd2:	4859      	ldr	r0, [pc, #356]	; (8001f38 <senddata+0x1d8>)
 8001dd4:	f002 fdd8 	bl	8004988 <siprintf>
	sprintf(Str_TB1, "%d", TB1);
 8001dd8:	4b5c      	ldr	r3, [pc, #368]	; (8001f4c <senddata+0x1ec>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	461a      	mov	r2, r3
 8001dde:	495a      	ldr	r1, [pc, #360]	; (8001f48 <senddata+0x1e8>)
 8001de0:	4856      	ldr	r0, [pc, #344]	; (8001f3c <senddata+0x1dc>)
 8001de2:	f002 fdd1 	bl	8004988 <siprintf>
	sprintf(Str_TB2, "%d", TB2);
 8001de6:	4b5a      	ldr	r3, [pc, #360]	; (8001f50 <senddata+0x1f0>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	461a      	mov	r2, r3
 8001dec:	4956      	ldr	r1, [pc, #344]	; (8001f48 <senddata+0x1e8>)
 8001dee:	4854      	ldr	r0, [pc, #336]	; (8001f40 <senddata+0x1e0>)
 8001df0:	f002 fdca 	bl	8004988 <siprintf>

	// {"tempt":"12","gas":"12","hum":"43"}

	strcat(JSON, "{\"tempt\":\"");
 8001df4:	4853      	ldr	r0, [pc, #332]	; (8001f44 <senddata+0x1e4>)
 8001df6:	f7fe f9b5 	bl	8000164 <strlen>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	4b51      	ldr	r3, [pc, #324]	; (8001f44 <senddata+0x1e4>)
 8001e00:	4413      	add	r3, r2
 8001e02:	4954      	ldr	r1, [pc, #336]	; (8001f54 <senddata+0x1f4>)
 8001e04:	461a      	mov	r2, r3
 8001e06:	460b      	mov	r3, r1
 8001e08:	cb03      	ldmia	r3!, {r0, r1}
 8001e0a:	6010      	str	r0, [r2, #0]
 8001e0c:	6051      	str	r1, [r2, #4]
 8001e0e:	8819      	ldrh	r1, [r3, #0]
 8001e10:	789b      	ldrb	r3, [r3, #2]
 8001e12:	8111      	strh	r1, [r2, #8]
 8001e14:	7293      	strb	r3, [r2, #10]
	strcat(JSON, Str_temp);
 8001e16:	4946      	ldr	r1, [pc, #280]	; (8001f30 <senddata+0x1d0>)
 8001e18:	484a      	ldr	r0, [pc, #296]	; (8001f44 <senddata+0x1e4>)
 8001e1a:	f002 fe18 	bl	8004a4e <strcat>
	strcat(JSON, "\",");
 8001e1e:	4849      	ldr	r0, [pc, #292]	; (8001f44 <senddata+0x1e4>)
 8001e20:	f7fe f9a0 	bl	8000164 <strlen>
 8001e24:	4603      	mov	r3, r0
 8001e26:	461a      	mov	r2, r3
 8001e28:	4b46      	ldr	r3, [pc, #280]	; (8001f44 <senddata+0x1e4>)
 8001e2a:	4413      	add	r3, r2
 8001e2c:	4a4a      	ldr	r2, [pc, #296]	; (8001f58 <senddata+0x1f8>)
 8001e2e:	8811      	ldrh	r1, [r2, #0]
 8001e30:	7892      	ldrb	r2, [r2, #2]
 8001e32:	8019      	strh	r1, [r3, #0]
 8001e34:	709a      	strb	r2, [r3, #2]

	strcat(JSON, "\"hum\":\"");
 8001e36:	4843      	ldr	r0, [pc, #268]	; (8001f44 <senddata+0x1e4>)
 8001e38:	f7fe f994 	bl	8000164 <strlen>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	461a      	mov	r2, r3
 8001e40:	4b40      	ldr	r3, [pc, #256]	; (8001f44 <senddata+0x1e4>)
 8001e42:	4413      	add	r3, r2
 8001e44:	4945      	ldr	r1, [pc, #276]	; (8001f5c <senddata+0x1fc>)
 8001e46:	461a      	mov	r2, r3
 8001e48:	460b      	mov	r3, r1
 8001e4a:	cb03      	ldmia	r3!, {r0, r1}
 8001e4c:	6010      	str	r0, [r2, #0]
 8001e4e:	6051      	str	r1, [r2, #4]
	strcat(JSON, Str_hum);
 8001e50:	4939      	ldr	r1, [pc, #228]	; (8001f38 <senddata+0x1d8>)
 8001e52:	483c      	ldr	r0, [pc, #240]	; (8001f44 <senddata+0x1e4>)
 8001e54:	f002 fdfb 	bl	8004a4e <strcat>
	strcat(JSON, "\",");
 8001e58:	483a      	ldr	r0, [pc, #232]	; (8001f44 <senddata+0x1e4>)
 8001e5a:	f7fe f983 	bl	8000164 <strlen>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	461a      	mov	r2, r3
 8001e62:	4b38      	ldr	r3, [pc, #224]	; (8001f44 <senddata+0x1e4>)
 8001e64:	4413      	add	r3, r2
 8001e66:	4a3c      	ldr	r2, [pc, #240]	; (8001f58 <senddata+0x1f8>)
 8001e68:	8811      	ldrh	r1, [r2, #0]
 8001e6a:	7892      	ldrb	r2, [r2, #2]
 8001e6c:	8019      	strh	r1, [r3, #0]
 8001e6e:	709a      	strb	r2, [r3, #2]

	strcat(JSON, "\"gas\":\"");
 8001e70:	4834      	ldr	r0, [pc, #208]	; (8001f44 <senddata+0x1e4>)
 8001e72:	f7fe f977 	bl	8000164 <strlen>
 8001e76:	4603      	mov	r3, r0
 8001e78:	461a      	mov	r2, r3
 8001e7a:	4b32      	ldr	r3, [pc, #200]	; (8001f44 <senddata+0x1e4>)
 8001e7c:	4413      	add	r3, r2
 8001e7e:	4938      	ldr	r1, [pc, #224]	; (8001f60 <senddata+0x200>)
 8001e80:	461a      	mov	r2, r3
 8001e82:	460b      	mov	r3, r1
 8001e84:	cb03      	ldmia	r3!, {r0, r1}
 8001e86:	6010      	str	r0, [r2, #0]
 8001e88:	6051      	str	r1, [r2, #4]
	strcat(JSON, Str_gas);
 8001e8a:	492a      	ldr	r1, [pc, #168]	; (8001f34 <senddata+0x1d4>)
 8001e8c:	482d      	ldr	r0, [pc, #180]	; (8001f44 <senddata+0x1e4>)
 8001e8e:	f002 fdde 	bl	8004a4e <strcat>
	strcat(JSON, "\",");
 8001e92:	482c      	ldr	r0, [pc, #176]	; (8001f44 <senddata+0x1e4>)
 8001e94:	f7fe f966 	bl	8000164 <strlen>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	4b29      	ldr	r3, [pc, #164]	; (8001f44 <senddata+0x1e4>)
 8001e9e:	4413      	add	r3, r2
 8001ea0:	4a2d      	ldr	r2, [pc, #180]	; (8001f58 <senddata+0x1f8>)
 8001ea2:	8811      	ldrh	r1, [r2, #0]
 8001ea4:	7892      	ldrb	r2, [r2, #2]
 8001ea6:	8019      	strh	r1, [r3, #0]
 8001ea8:	709a      	strb	r2, [r3, #2]

	strcat(JSON, "\"TB1\":\"");
 8001eaa:	4826      	ldr	r0, [pc, #152]	; (8001f44 <senddata+0x1e4>)
 8001eac:	f7fe f95a 	bl	8000164 <strlen>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	4b23      	ldr	r3, [pc, #140]	; (8001f44 <senddata+0x1e4>)
 8001eb6:	4413      	add	r3, r2
 8001eb8:	492a      	ldr	r1, [pc, #168]	; (8001f64 <senddata+0x204>)
 8001eba:	461a      	mov	r2, r3
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	cb03      	ldmia	r3!, {r0, r1}
 8001ec0:	6010      	str	r0, [r2, #0]
 8001ec2:	6051      	str	r1, [r2, #4]
	strcat(JSON, Str_TB1);
 8001ec4:	491d      	ldr	r1, [pc, #116]	; (8001f3c <senddata+0x1dc>)
 8001ec6:	481f      	ldr	r0, [pc, #124]	; (8001f44 <senddata+0x1e4>)
 8001ec8:	f002 fdc1 	bl	8004a4e <strcat>
	strcat(JSON, "\",");
 8001ecc:	481d      	ldr	r0, [pc, #116]	; (8001f44 <senddata+0x1e4>)
 8001ece:	f7fe f949 	bl	8000164 <strlen>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	4b1b      	ldr	r3, [pc, #108]	; (8001f44 <senddata+0x1e4>)
 8001ed8:	4413      	add	r3, r2
 8001eda:	4a1f      	ldr	r2, [pc, #124]	; (8001f58 <senddata+0x1f8>)
 8001edc:	8811      	ldrh	r1, [r2, #0]
 8001ede:	7892      	ldrb	r2, [r2, #2]
 8001ee0:	8019      	strh	r1, [r3, #0]
 8001ee2:	709a      	strb	r2, [r3, #2]

	strcat(JSON, "\"TB2\":\"");
 8001ee4:	4817      	ldr	r0, [pc, #92]	; (8001f44 <senddata+0x1e4>)
 8001ee6:	f7fe f93d 	bl	8000164 <strlen>
 8001eea:	4603      	mov	r3, r0
 8001eec:	461a      	mov	r2, r3
 8001eee:	4b15      	ldr	r3, [pc, #84]	; (8001f44 <senddata+0x1e4>)
 8001ef0:	4413      	add	r3, r2
 8001ef2:	491d      	ldr	r1, [pc, #116]	; (8001f68 <senddata+0x208>)
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	cb03      	ldmia	r3!, {r0, r1}
 8001efa:	6010      	str	r0, [r2, #0]
 8001efc:	6051      	str	r1, [r2, #4]
	strcat(JSON, Str_TB2);
 8001efe:	4910      	ldr	r1, [pc, #64]	; (8001f40 <senddata+0x1e0>)
 8001f00:	4810      	ldr	r0, [pc, #64]	; (8001f44 <senddata+0x1e4>)
 8001f02:	f002 fda4 	bl	8004a4e <strcat>
	strcat(JSON, "\"}");
 8001f06:	480f      	ldr	r0, [pc, #60]	; (8001f44 <senddata+0x1e4>)
 8001f08:	f7fe f92c 	bl	8000164 <strlen>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	461a      	mov	r2, r3
 8001f10:	4b0c      	ldr	r3, [pc, #48]	; (8001f44 <senddata+0x1e4>)
 8001f12:	4413      	add	r3, r2
 8001f14:	4a15      	ldr	r2, [pc, #84]	; (8001f6c <senddata+0x20c>)
 8001f16:	8811      	ldrh	r1, [r2, #0]
 8001f18:	7892      	ldrb	r2, [r2, #2]
 8001f1a:	8019      	strh	r1, [r3, #0]
 8001f1c:	709a      	strb	r2, [r3, #2]

	printf("%s\r\n", JSON);
 8001f1e:	4909      	ldr	r1, [pc, #36]	; (8001f44 <senddata+0x1e4>)
 8001f20:	4813      	ldr	r0, [pc, #76]	; (8001f70 <senddata+0x210>)
 8001f22:	f002 fc8b 	bl	800483c <iprintf>

}
 8001f26:	bf00      	nop
 8001f28:	3718      	adds	r7, #24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	20000268 	.word	0x20000268
 8001f34:	20000234 	.word	0x20000234
 8001f38:	200003a8 	.word	0x200003a8
 8001f3c:	200002a0 	.word	0x200002a0
 8001f40:	200003dc 	.word	0x200003dc
 8001f44:	200002dc 	.word	0x200002dc
 8001f48:	08007a38 	.word	0x08007a38
 8001f4c:	2000021c 	.word	0x2000021c
 8001f50:	20000220 	.word	0x20000220
 8001f54:	08007a3c 	.word	0x08007a3c
 8001f58:	08007a48 	.word	0x08007a48
 8001f5c:	08007a4c 	.word	0x08007a4c
 8001f60:	08007a54 	.word	0x08007a54
 8001f64:	08007a5c 	.word	0x08007a5c
 8001f68:	08007a64 	.word	0x08007a64
 8001f6c:	08007a6c 	.word	0x08007a6c
 8001f70:	08007a70 	.word	0x08007a70

08001f74 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart2.Instance) {
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	4b1b      	ldr	r3, [pc, #108]	; (8001ff0 <HAL_UART_RxCpltCallback+0x7c>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d12e      	bne.n	8001fe6 <HAL_UART_RxCpltCallback+0x72>
		if (rec != 13) {
 8001f88:	4b1a      	ldr	r3, [pc, #104]	; (8001ff4 <HAL_UART_RxCpltCallback+0x80>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2b0d      	cmp	r3, #13
 8001f8e:	d00b      	beq.n	8001fa8 <HAL_UART_RxCpltCallback+0x34>
			buffer[i++] = rec;
 8001f90:	4b19      	ldr	r3, [pc, #100]	; (8001ff8 <HAL_UART_RxCpltCallback+0x84>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	1c5a      	adds	r2, r3, #1
 8001f96:	b2d1      	uxtb	r1, r2
 8001f98:	4a17      	ldr	r2, [pc, #92]	; (8001ff8 <HAL_UART_RxCpltCallback+0x84>)
 8001f9a:	7011      	strb	r1, [r2, #0]
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	4b15      	ldr	r3, [pc, #84]	; (8001ff4 <HAL_UART_RxCpltCallback+0x80>)
 8001fa0:	7819      	ldrb	r1, [r3, #0]
 8001fa2:	4b16      	ldr	r3, [pc, #88]	; (8001ffc <HAL_UART_RxCpltCallback+0x88>)
 8001fa4:	5499      	strb	r1, [r3, r2]
 8001fa6:	e019      	b.n	8001fdc <HAL_UART_RxCpltCallback+0x68>
		}

		else if (rec == 13) {
 8001fa8:	4b12      	ldr	r3, [pc, #72]	; (8001ff4 <HAL_UART_RxCpltCallback+0x80>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	2b0d      	cmp	r3, #13
 8001fae:	d115      	bne.n	8001fdc <HAL_UART_RxCpltCallback+0x68>
			//	printf("da nhan %s\n",buffer);
			// phan tich thuc hien
			XulyJson(buffer);
 8001fb0:	4812      	ldr	r0, [pc, #72]	; (8001ffc <HAL_UART_RxCpltCallback+0x88>)
 8001fb2:	f7ff fe57 	bl	8001c64 <XulyJson>
			i = 0;
 8001fb6:	4b10      	ldr	r3, [pc, #64]	; (8001ff8 <HAL_UART_RxCpltCallback+0x84>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	701a      	strb	r2, [r3, #0]
			for (int cnt = 0; cnt < sizeof(buffer); cnt++) {
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	e009      	b.n	8001fd6 <HAL_UART_RxCpltCallback+0x62>
				buffer[cnt] = null;
 8001fc2:	4b0f      	ldr	r3, [pc, #60]	; (8002000 <HAL_UART_RxCpltCallback+0x8c>)
 8001fc4:	7819      	ldrb	r1, [r3, #0]
 8001fc6:	4a0d      	ldr	r2, [pc, #52]	; (8001ffc <HAL_UART_RxCpltCallback+0x88>)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	4413      	add	r3, r2
 8001fcc:	460a      	mov	r2, r1
 8001fce:	701a      	strb	r2, [r3, #0]
			for (int cnt = 0; cnt < sizeof(buffer); cnt++) {
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	60fb      	str	r3, [r7, #12]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2b63      	cmp	r3, #99	; 0x63
 8001fda:	d9f2      	bls.n	8001fc2 <HAL_UART_RxCpltCallback+0x4e>
			}

		}
		HAL_UART_Receive_IT(&huart2, &rec, 1);
 8001fdc:	2201      	movs	r2, #1
 8001fde:	4905      	ldr	r1, [pc, #20]	; (8001ff4 <HAL_UART_RxCpltCallback+0x80>)
 8001fe0:	4803      	ldr	r0, [pc, #12]	; (8001ff0 <HAL_UART_RxCpltCallback+0x7c>)
 8001fe2:	f001 fed8 	bl	8003d96 <HAL_UART_Receive_IT>
	}
}
 8001fe6:	bf00      	nop
 8001fe8:	3710      	adds	r7, #16
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	20000410 	.word	0x20000410
 8001ff4:	20000454 	.word	0x20000454
 8001ff8:	20000340 	.word	0x20000340
 8001ffc:	20000344 	.word	0x20000344
 8002000:	200002d2 	.word	0x200002d2

08002004 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002008:	f000 fb24 	bl	8002654 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800200c:	f000 f82e 	bl	800206c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002010:	f000 f8f0 	bl	80021f4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002014:	f000 f886 	bl	8002124 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8002018:	f000 f8c2 	bl	80021a0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart2, &rec, 1);
 800201c:	2201      	movs	r2, #1
 800201e:	490e      	ldr	r1, [pc, #56]	; (8002058 <main+0x54>)
 8002020:	480e      	ldr	r0, [pc, #56]	; (800205c <main+0x58>)
 8002022:	f001 feb8 	bl	8003d96 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		temp++;
 8002026:	4b0e      	ldr	r3, [pc, #56]	; (8002060 <main+0x5c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	3301      	adds	r3, #1
 800202c:	4a0c      	ldr	r2, [pc, #48]	; (8002060 <main+0x5c>)
 800202e:	6013      	str	r3, [r2, #0]
		gas += 2;
 8002030:	4b0c      	ldr	r3, [pc, #48]	; (8002064 <main+0x60>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	3302      	adds	r3, #2
 8002036:	4a0b      	ldr	r2, [pc, #44]	; (8002064 <main+0x60>)
 8002038:	6013      	str	r3, [r2, #0]
		senddata(temp, gas, hum);
 800203a:	4b09      	ldr	r3, [pc, #36]	; (8002060 <main+0x5c>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a09      	ldr	r2, [pc, #36]	; (8002064 <main+0x60>)
 8002040:	6811      	ldr	r1, [r2, #0]
 8002042:	4a09      	ldr	r2, [pc, #36]	; (8002068 <main+0x64>)
 8002044:	6812      	ldr	r2, [r2, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f7ff fe8a 	bl	8001d60 <senddata>
		HAL_Delay(1000);
 800204c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002050:	f000 fb62 	bl	8002718 <HAL_Delay>
		temp++;
 8002054:	e7e7      	b.n	8002026 <main+0x22>
 8002056:	bf00      	nop
 8002058:	20000454 	.word	0x20000454
 800205c:	20000410 	.word	0x20000410
 8002060:	20000210 	.word	0x20000210
 8002064:	20000214 	.word	0x20000214
 8002068:	20000218 	.word	0x20000218

0800206c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b094      	sub	sp, #80	; 0x50
 8002070:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002072:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002076:	2228      	movs	r2, #40	; 0x28
 8002078:	2100      	movs	r1, #0
 800207a:	4618      	mov	r0, r3
 800207c:	f002 fb30 	bl	80046e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002080:	f107 0314 	add.w	r3, r7, #20
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	605a      	str	r2, [r3, #4]
 800208a:	609a      	str	r2, [r3, #8]
 800208c:	60da      	str	r2, [r3, #12]
 800208e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002090:	1d3b      	adds	r3, r7, #4
 8002092:	2200      	movs	r2, #0
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	605a      	str	r2, [r3, #4]
 8002098:	609a      	str	r2, [r3, #8]
 800209a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800209c:	2301      	movs	r3, #1
 800209e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80020a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80020a6:	2300      	movs	r3, #0
 80020a8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020aa:	2301      	movs	r3, #1
 80020ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020ae:	2302      	movs	r3, #2
 80020b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80020b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80020b8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80020bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020c2:	4618      	mov	r0, r3
 80020c4:	f001 f8b8 	bl	8003238 <HAL_RCC_OscConfig>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80020ce:	f000 f8dd 	bl	800228c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020d2:	230f      	movs	r3, #15
 80020d4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020d6:	2302      	movs	r3, #2
 80020d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020da:	2300      	movs	r3, #0
 80020dc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80020de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020e2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020e4:	2300      	movs	r3, #0
 80020e6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80020e8:	f107 0314 	add.w	r3, r7, #20
 80020ec:	2102      	movs	r1, #2
 80020ee:	4618      	mov	r0, r3
 80020f0:	f001 fb22 	bl	8003738 <HAL_RCC_ClockConfig>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <SystemClock_Config+0x92>
  {
    Error_Handler();
 80020fa:	f000 f8c7 	bl	800228c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80020fe:	2302      	movs	r3, #2
 8002100:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002102:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002106:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002108:	1d3b      	adds	r3, r7, #4
 800210a:	4618      	mov	r0, r3
 800210c:	f001 fcae 	bl	8003a6c <HAL_RCCEx_PeriphCLKConfig>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002116:	f000 f8b9 	bl	800228c <Error_Handler>
  }
}
 800211a:	bf00      	nop
 800211c:	3750      	adds	r7, #80	; 0x50
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
	...

08002124 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800212a:	1d3b      	adds	r3, r7, #4
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	605a      	str	r2, [r3, #4]
 8002132:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8002134:	4b18      	ldr	r3, [pc, #96]	; (8002198 <MX_ADC1_Init+0x74>)
 8002136:	4a19      	ldr	r2, [pc, #100]	; (800219c <MX_ADC1_Init+0x78>)
 8002138:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800213a:	4b17      	ldr	r3, [pc, #92]	; (8002198 <MX_ADC1_Init+0x74>)
 800213c:	2200      	movs	r2, #0
 800213e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002140:	4b15      	ldr	r3, [pc, #84]	; (8002198 <MX_ADC1_Init+0x74>)
 8002142:	2200      	movs	r2, #0
 8002144:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002146:	4b14      	ldr	r3, [pc, #80]	; (8002198 <MX_ADC1_Init+0x74>)
 8002148:	2200      	movs	r2, #0
 800214a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800214c:	4b12      	ldr	r3, [pc, #72]	; (8002198 <MX_ADC1_Init+0x74>)
 800214e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002152:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002154:	4b10      	ldr	r3, [pc, #64]	; (8002198 <MX_ADC1_Init+0x74>)
 8002156:	2200      	movs	r2, #0
 8002158:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800215a:	4b0f      	ldr	r3, [pc, #60]	; (8002198 <MX_ADC1_Init+0x74>)
 800215c:	2201      	movs	r2, #1
 800215e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002160:	480d      	ldr	r0, [pc, #52]	; (8002198 <MX_ADC1_Init+0x74>)
 8002162:	f000 fafd 	bl	8002760 <HAL_ADC_Init>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800216c:	f000 f88e 	bl	800228c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002170:	2300      	movs	r3, #0
 8002172:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002174:	2301      	movs	r3, #1
 8002176:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002178:	2300      	movs	r3, #0
 800217a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800217c:	1d3b      	adds	r3, r7, #4
 800217e:	4619      	mov	r1, r3
 8002180:	4805      	ldr	r0, [pc, #20]	; (8002198 <MX_ADC1_Init+0x74>)
 8002182:	f000 fbc5 	bl	8002910 <HAL_ADC_ConfigChannel>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800218c:	f000 f87e 	bl	800228c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002190:	bf00      	nop
 8002192:	3710      	adds	r7, #16
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	20000310 	.word	0x20000310
 800219c:	40012400 	.word	0x40012400

080021a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021a4:	4b11      	ldr	r3, [pc, #68]	; (80021ec <MX_USART2_UART_Init+0x4c>)
 80021a6:	4a12      	ldr	r2, [pc, #72]	; (80021f0 <MX_USART2_UART_Init+0x50>)
 80021a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80021aa:	4b10      	ldr	r3, [pc, #64]	; (80021ec <MX_USART2_UART_Init+0x4c>)
 80021ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021b2:	4b0e      	ldr	r3, [pc, #56]	; (80021ec <MX_USART2_UART_Init+0x4c>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021b8:	4b0c      	ldr	r3, [pc, #48]	; (80021ec <MX_USART2_UART_Init+0x4c>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021be:	4b0b      	ldr	r3, [pc, #44]	; (80021ec <MX_USART2_UART_Init+0x4c>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021c4:	4b09      	ldr	r3, [pc, #36]	; (80021ec <MX_USART2_UART_Init+0x4c>)
 80021c6:	220c      	movs	r2, #12
 80021c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021ca:	4b08      	ldr	r3, [pc, #32]	; (80021ec <MX_USART2_UART_Init+0x4c>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021d0:	4b06      	ldr	r3, [pc, #24]	; (80021ec <MX_USART2_UART_Init+0x4c>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80021d6:	4805      	ldr	r0, [pc, #20]	; (80021ec <MX_USART2_UART_Init+0x4c>)
 80021d8:	f001 fcfe 	bl	8003bd8 <HAL_UART_Init>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80021e2:	f000 f853 	bl	800228c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80021e6:	bf00      	nop
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	20000410 	.word	0x20000410
 80021f0:	40004400 	.word	0x40004400

080021f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b088      	sub	sp, #32
 80021f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021fa:	f107 0310 	add.w	r3, r7, #16
 80021fe:	2200      	movs	r2, #0
 8002200:	601a      	str	r2, [r3, #0]
 8002202:	605a      	str	r2, [r3, #4]
 8002204:	609a      	str	r2, [r3, #8]
 8002206:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002208:	4b1e      	ldr	r3, [pc, #120]	; (8002284 <MX_GPIO_Init+0x90>)
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	4a1d      	ldr	r2, [pc, #116]	; (8002284 <MX_GPIO_Init+0x90>)
 800220e:	f043 0310 	orr.w	r3, r3, #16
 8002212:	6193      	str	r3, [r2, #24]
 8002214:	4b1b      	ldr	r3, [pc, #108]	; (8002284 <MX_GPIO_Init+0x90>)
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	f003 0310 	and.w	r3, r3, #16
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002220:	4b18      	ldr	r3, [pc, #96]	; (8002284 <MX_GPIO_Init+0x90>)
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	4a17      	ldr	r2, [pc, #92]	; (8002284 <MX_GPIO_Init+0x90>)
 8002226:	f043 0320 	orr.w	r3, r3, #32
 800222a:	6193      	str	r3, [r2, #24]
 800222c:	4b15      	ldr	r3, [pc, #84]	; (8002284 <MX_GPIO_Init+0x90>)
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	f003 0320 	and.w	r3, r3, #32
 8002234:	60bb      	str	r3, [r7, #8]
 8002236:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002238:	4b12      	ldr	r3, [pc, #72]	; (8002284 <MX_GPIO_Init+0x90>)
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	4a11      	ldr	r2, [pc, #68]	; (8002284 <MX_GPIO_Init+0x90>)
 800223e:	f043 0304 	orr.w	r3, r3, #4
 8002242:	6193      	str	r3, [r2, #24]
 8002244:	4b0f      	ldr	r3, [pc, #60]	; (8002284 <MX_GPIO_Init+0x90>)
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	f003 0304 	and.w	r3, r3, #4
 800224c:	607b      	str	r3, [r7, #4]
 800224e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002250:	2200      	movs	r2, #0
 8002252:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002256:	480c      	ldr	r0, [pc, #48]	; (8002288 <MX_GPIO_Init+0x94>)
 8002258:	f000 ffd6 	bl	8003208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800225c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002260:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002262:	2301      	movs	r3, #1
 8002264:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002266:	2300      	movs	r3, #0
 8002268:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800226a:	2302      	movs	r3, #2
 800226c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800226e:	f107 0310 	add.w	r3, r7, #16
 8002272:	4619      	mov	r1, r3
 8002274:	4804      	ldr	r0, [pc, #16]	; (8002288 <MX_GPIO_Init+0x94>)
 8002276:	f000 fe43 	bl	8002f00 <HAL_GPIO_Init>

}
 800227a:	bf00      	nop
 800227c:	3720      	adds	r7, #32
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	40021000 	.word	0x40021000
 8002288:	40011000 	.word	0x40011000

0800228c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002290:	b672      	cpsid	i
}
 8002292:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002294:	e7fe      	b.n	8002294 <Error_Handler+0x8>
	...

08002298 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002298:	b480      	push	{r7}
 800229a:	b085      	sub	sp, #20
 800229c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800229e:	4b15      	ldr	r3, [pc, #84]	; (80022f4 <HAL_MspInit+0x5c>)
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	4a14      	ldr	r2, [pc, #80]	; (80022f4 <HAL_MspInit+0x5c>)
 80022a4:	f043 0301 	orr.w	r3, r3, #1
 80022a8:	6193      	str	r3, [r2, #24]
 80022aa:	4b12      	ldr	r3, [pc, #72]	; (80022f4 <HAL_MspInit+0x5c>)
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	60bb      	str	r3, [r7, #8]
 80022b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022b6:	4b0f      	ldr	r3, [pc, #60]	; (80022f4 <HAL_MspInit+0x5c>)
 80022b8:	69db      	ldr	r3, [r3, #28]
 80022ba:	4a0e      	ldr	r2, [pc, #56]	; (80022f4 <HAL_MspInit+0x5c>)
 80022bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022c0:	61d3      	str	r3, [r2, #28]
 80022c2:	4b0c      	ldr	r3, [pc, #48]	; (80022f4 <HAL_MspInit+0x5c>)
 80022c4:	69db      	ldr	r3, [r3, #28]
 80022c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ca:	607b      	str	r3, [r7, #4]
 80022cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80022ce:	4b0a      	ldr	r3, [pc, #40]	; (80022f8 <HAL_MspInit+0x60>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	60fb      	str	r3, [r7, #12]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80022da:	60fb      	str	r3, [r7, #12]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022e2:	60fb      	str	r3, [r7, #12]
 80022e4:	4a04      	ldr	r2, [pc, #16]	; (80022f8 <HAL_MspInit+0x60>)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022ea:	bf00      	nop
 80022ec:	3714      	adds	r7, #20
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bc80      	pop	{r7}
 80022f2:	4770      	bx	lr
 80022f4:	40021000 	.word	0x40021000
 80022f8:	40010000 	.word	0x40010000

080022fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b088      	sub	sp, #32
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002304:	f107 0310 	add.w	r3, r7, #16
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	605a      	str	r2, [r3, #4]
 800230e:	609a      	str	r2, [r3, #8]
 8002310:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a14      	ldr	r2, [pc, #80]	; (8002368 <HAL_ADC_MspInit+0x6c>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d121      	bne.n	8002360 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800231c:	4b13      	ldr	r3, [pc, #76]	; (800236c <HAL_ADC_MspInit+0x70>)
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	4a12      	ldr	r2, [pc, #72]	; (800236c <HAL_ADC_MspInit+0x70>)
 8002322:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002326:	6193      	str	r3, [r2, #24]
 8002328:	4b10      	ldr	r3, [pc, #64]	; (800236c <HAL_ADC_MspInit+0x70>)
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002330:	60fb      	str	r3, [r7, #12]
 8002332:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002334:	4b0d      	ldr	r3, [pc, #52]	; (800236c <HAL_ADC_MspInit+0x70>)
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	4a0c      	ldr	r2, [pc, #48]	; (800236c <HAL_ADC_MspInit+0x70>)
 800233a:	f043 0304 	orr.w	r3, r3, #4
 800233e:	6193      	str	r3, [r2, #24]
 8002340:	4b0a      	ldr	r3, [pc, #40]	; (800236c <HAL_ADC_MspInit+0x70>)
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	f003 0304 	and.w	r3, r3, #4
 8002348:	60bb      	str	r3, [r7, #8]
 800234a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800234c:	2301      	movs	r3, #1
 800234e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002350:	2303      	movs	r3, #3
 8002352:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002354:	f107 0310 	add.w	r3, r7, #16
 8002358:	4619      	mov	r1, r3
 800235a:	4805      	ldr	r0, [pc, #20]	; (8002370 <HAL_ADC_MspInit+0x74>)
 800235c:	f000 fdd0 	bl	8002f00 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002360:	bf00      	nop
 8002362:	3720      	adds	r7, #32
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40012400 	.word	0x40012400
 800236c:	40021000 	.word	0x40021000
 8002370:	40010800 	.word	0x40010800

08002374 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b088      	sub	sp, #32
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800237c:	f107 0310 	add.w	r3, r7, #16
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	605a      	str	r2, [r3, #4]
 8002386:	609a      	str	r2, [r3, #8]
 8002388:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a1f      	ldr	r2, [pc, #124]	; (800240c <HAL_UART_MspInit+0x98>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d137      	bne.n	8002404 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002394:	4b1e      	ldr	r3, [pc, #120]	; (8002410 <HAL_UART_MspInit+0x9c>)
 8002396:	69db      	ldr	r3, [r3, #28]
 8002398:	4a1d      	ldr	r2, [pc, #116]	; (8002410 <HAL_UART_MspInit+0x9c>)
 800239a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800239e:	61d3      	str	r3, [r2, #28]
 80023a0:	4b1b      	ldr	r3, [pc, #108]	; (8002410 <HAL_UART_MspInit+0x9c>)
 80023a2:	69db      	ldr	r3, [r3, #28]
 80023a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a8:	60fb      	str	r3, [r7, #12]
 80023aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ac:	4b18      	ldr	r3, [pc, #96]	; (8002410 <HAL_UART_MspInit+0x9c>)
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	4a17      	ldr	r2, [pc, #92]	; (8002410 <HAL_UART_MspInit+0x9c>)
 80023b2:	f043 0304 	orr.w	r3, r3, #4
 80023b6:	6193      	str	r3, [r2, #24]
 80023b8:	4b15      	ldr	r3, [pc, #84]	; (8002410 <HAL_UART_MspInit+0x9c>)
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	f003 0304 	and.w	r3, r3, #4
 80023c0:	60bb      	str	r3, [r7, #8]
 80023c2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80023c4:	2304      	movs	r3, #4
 80023c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c8:	2302      	movs	r3, #2
 80023ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023cc:	2303      	movs	r3, #3
 80023ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023d0:	f107 0310 	add.w	r3, r7, #16
 80023d4:	4619      	mov	r1, r3
 80023d6:	480f      	ldr	r0, [pc, #60]	; (8002414 <HAL_UART_MspInit+0xa0>)
 80023d8:	f000 fd92 	bl	8002f00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80023dc:	2308      	movs	r3, #8
 80023de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023e0:	2300      	movs	r3, #0
 80023e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e4:	2300      	movs	r3, #0
 80023e6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023e8:	f107 0310 	add.w	r3, r7, #16
 80023ec:	4619      	mov	r1, r3
 80023ee:	4809      	ldr	r0, [pc, #36]	; (8002414 <HAL_UART_MspInit+0xa0>)
 80023f0:	f000 fd86 	bl	8002f00 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 80023f4:	2200      	movs	r2, #0
 80023f6:	2101      	movs	r1, #1
 80023f8:	2026      	movs	r0, #38	; 0x26
 80023fa:	f000 fc9a 	bl	8002d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80023fe:	2026      	movs	r0, #38	; 0x26
 8002400:	f000 fcb3 	bl	8002d6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002404:	bf00      	nop
 8002406:	3720      	adds	r7, #32
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	40004400 	.word	0x40004400
 8002410:	40021000 	.word	0x40021000
 8002414:	40010800 	.word	0x40010800

08002418 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800241c:	e7fe      	b.n	800241c <NMI_Handler+0x4>

0800241e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800241e:	b480      	push	{r7}
 8002420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002422:	e7fe      	b.n	8002422 <HardFault_Handler+0x4>

08002424 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002428:	e7fe      	b.n	8002428 <MemManage_Handler+0x4>

0800242a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800242a:	b480      	push	{r7}
 800242c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800242e:	e7fe      	b.n	800242e <BusFault_Handler+0x4>

08002430 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002434:	e7fe      	b.n	8002434 <UsageFault_Handler+0x4>

08002436 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002436:	b480      	push	{r7}
 8002438:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800243a:	bf00      	nop
 800243c:	46bd      	mov	sp, r7
 800243e:	bc80      	pop	{r7}
 8002440:	4770      	bx	lr

08002442 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002442:	b480      	push	{r7}
 8002444:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002446:	bf00      	nop
 8002448:	46bd      	mov	sp, r7
 800244a:	bc80      	pop	{r7}
 800244c:	4770      	bx	lr

0800244e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800244e:	b480      	push	{r7}
 8002450:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002452:	bf00      	nop
 8002454:	46bd      	mov	sp, r7
 8002456:	bc80      	pop	{r7}
 8002458:	4770      	bx	lr

0800245a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800245e:	f000 f93f 	bl	80026e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002462:	bf00      	nop
 8002464:	bd80      	pop	{r7, pc}
	...

08002468 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800246c:	4802      	ldr	r0, [pc, #8]	; (8002478 <USART2_IRQHandler+0x10>)
 800246e:	f001 fcc3 	bl	8003df8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	20000410 	.word	0x20000410

0800247c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
	return 1;
 8002480:	2301      	movs	r3, #1
}
 8002482:	4618      	mov	r0, r3
 8002484:	46bd      	mov	sp, r7
 8002486:	bc80      	pop	{r7}
 8002488:	4770      	bx	lr

0800248a <_kill>:

int _kill(int pid, int sig)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	b082      	sub	sp, #8
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
 8002492:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002494:	f002 f8dc 	bl	8004650 <__errno>
 8002498:	4603      	mov	r3, r0
 800249a:	2216      	movs	r2, #22
 800249c:	601a      	str	r2, [r3, #0]
	return -1;
 800249e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <_exit>:

void _exit (int status)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b082      	sub	sp, #8
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80024b2:	f04f 31ff 	mov.w	r1, #4294967295
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f7ff ffe7 	bl	800248a <_kill>
	while (1) {}		/* Make sure we hang here */
 80024bc:	e7fe      	b.n	80024bc <_exit+0x12>

080024be <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024be:	b580      	push	{r7, lr}
 80024c0:	b086      	sub	sp, #24
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	60f8      	str	r0, [r7, #12]
 80024c6:	60b9      	str	r1, [r7, #8]
 80024c8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ca:	2300      	movs	r3, #0
 80024cc:	617b      	str	r3, [r7, #20]
 80024ce:	e00a      	b.n	80024e6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80024d0:	f3af 8000 	nop.w
 80024d4:	4601      	mov	r1, r0
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	1c5a      	adds	r2, r3, #1
 80024da:	60ba      	str	r2, [r7, #8]
 80024dc:	b2ca      	uxtb	r2, r1
 80024de:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	3301      	adds	r3, #1
 80024e4:	617b      	str	r3, [r7, #20]
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	dbf0      	blt.n	80024d0 <_read+0x12>
	}

return len;
 80024ee:	687b      	ldr	r3, [r7, #4]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3718      	adds	r7, #24
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002504:	2300      	movs	r3, #0
 8002506:	617b      	str	r3, [r7, #20]
 8002508:	e009      	b.n	800251e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	1c5a      	adds	r2, r3, #1
 800250e:	60ba      	str	r2, [r7, #8]
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f7ff fb94 	bl	8001c40 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	3301      	adds	r3, #1
 800251c:	617b      	str	r3, [r7, #20]
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	429a      	cmp	r2, r3
 8002524:	dbf1      	blt.n	800250a <_write+0x12>
	}
	return len;
 8002526:	687b      	ldr	r3, [r7, #4]
}
 8002528:	4618      	mov	r0, r3
 800252a:	3718      	adds	r7, #24
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <_close>:

int _close(int file)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
	return -1;
 8002538:	f04f 33ff 	mov.w	r3, #4294967295
}
 800253c:	4618      	mov	r0, r3
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	bc80      	pop	{r7}
 8002544:	4770      	bx	lr

08002546 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002546:	b480      	push	{r7}
 8002548:	b083      	sub	sp, #12
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
 800254e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002556:	605a      	str	r2, [r3, #4]
	return 0;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	bc80      	pop	{r7}
 8002562:	4770      	bx	lr

08002564 <_isatty>:

int _isatty(int file)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
	return 1;
 800256c:	2301      	movs	r3, #1
}
 800256e:	4618      	mov	r0, r3
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	bc80      	pop	{r7}
 8002576:	4770      	bx	lr

08002578 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
	return 0;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3714      	adds	r7, #20
 800258a:	46bd      	mov	sp, r7
 800258c:	bc80      	pop	{r7}
 800258e:	4770      	bx	lr

08002590 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002598:	4a14      	ldr	r2, [pc, #80]	; (80025ec <_sbrk+0x5c>)
 800259a:	4b15      	ldr	r3, [pc, #84]	; (80025f0 <_sbrk+0x60>)
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025a4:	4b13      	ldr	r3, [pc, #76]	; (80025f4 <_sbrk+0x64>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d102      	bne.n	80025b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025ac:	4b11      	ldr	r3, [pc, #68]	; (80025f4 <_sbrk+0x64>)
 80025ae:	4a12      	ldr	r2, [pc, #72]	; (80025f8 <_sbrk+0x68>)
 80025b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025b2:	4b10      	ldr	r3, [pc, #64]	; (80025f4 <_sbrk+0x64>)
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4413      	add	r3, r2
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d207      	bcs.n	80025d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025c0:	f002 f846 	bl	8004650 <__errno>
 80025c4:	4603      	mov	r3, r0
 80025c6:	220c      	movs	r2, #12
 80025c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025ca:	f04f 33ff 	mov.w	r3, #4294967295
 80025ce:	e009      	b.n	80025e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025d0:	4b08      	ldr	r3, [pc, #32]	; (80025f4 <_sbrk+0x64>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025d6:	4b07      	ldr	r3, [pc, #28]	; (80025f4 <_sbrk+0x64>)
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4413      	add	r3, r2
 80025de:	4a05      	ldr	r2, [pc, #20]	; (80025f4 <_sbrk+0x64>)
 80025e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025e2:	68fb      	ldr	r3, [r7, #12]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3718      	adds	r7, #24
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	20005000 	.word	0x20005000
 80025f0:	00000400 	.word	0x00000400
 80025f4:	20000224 	.word	0x20000224
 80025f8:	20000470 	.word	0x20000470

080025fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002600:	bf00      	nop
 8002602:	46bd      	mov	sp, r7
 8002604:	bc80      	pop	{r7}
 8002606:	4770      	bx	lr

08002608 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002608:	480c      	ldr	r0, [pc, #48]	; (800263c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800260a:	490d      	ldr	r1, [pc, #52]	; (8002640 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800260c:	4a0d      	ldr	r2, [pc, #52]	; (8002644 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800260e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002610:	e002      	b.n	8002618 <LoopCopyDataInit>

08002612 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002612:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002614:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002616:	3304      	adds	r3, #4

08002618 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002618:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800261a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800261c:	d3f9      	bcc.n	8002612 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800261e:	4a0a      	ldr	r2, [pc, #40]	; (8002648 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002620:	4c0a      	ldr	r4, [pc, #40]	; (800264c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002622:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002624:	e001      	b.n	800262a <LoopFillZerobss>

08002626 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002626:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002628:	3204      	adds	r2, #4

0800262a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800262a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800262c:	d3fb      	bcc.n	8002626 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800262e:	f7ff ffe5 	bl	80025fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002632:	f002 f813 	bl	800465c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002636:	f7ff fce5 	bl	8002004 <main>
  bx lr
 800263a:	4770      	bx	lr
  ldr r0, =_sdata
 800263c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002640:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002644:	08007ee4 	.word	0x08007ee4
  ldr r2, =_sbss
 8002648:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 800264c:	2000046c 	.word	0x2000046c

08002650 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002650:	e7fe      	b.n	8002650 <ADC1_2_IRQHandler>
	...

08002654 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002658:	4b08      	ldr	r3, [pc, #32]	; (800267c <HAL_Init+0x28>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a07      	ldr	r2, [pc, #28]	; (800267c <HAL_Init+0x28>)
 800265e:	f043 0310 	orr.w	r3, r3, #16
 8002662:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002664:	2003      	movs	r0, #3
 8002666:	f000 fb59 	bl	8002d1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800266a:	2000      	movs	r0, #0
 800266c:	f000 f808 	bl	8002680 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002670:	f7ff fe12 	bl	8002298 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	40022000 	.word	0x40022000

08002680 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002688:	4b12      	ldr	r3, [pc, #72]	; (80026d4 <HAL_InitTick+0x54>)
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	4b12      	ldr	r3, [pc, #72]	; (80026d8 <HAL_InitTick+0x58>)
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	4619      	mov	r1, r3
 8002692:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002696:	fbb3 f3f1 	udiv	r3, r3, r1
 800269a:	fbb2 f3f3 	udiv	r3, r2, r3
 800269e:	4618      	mov	r0, r3
 80026a0:	f000 fb71 	bl	8002d86 <HAL_SYSTICK_Config>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e00e      	b.n	80026cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2b0f      	cmp	r3, #15
 80026b2:	d80a      	bhi.n	80026ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026b4:	2200      	movs	r2, #0
 80026b6:	6879      	ldr	r1, [r7, #4]
 80026b8:	f04f 30ff 	mov.w	r0, #4294967295
 80026bc:	f000 fb39 	bl	8002d32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026c0:	4a06      	ldr	r2, [pc, #24]	; (80026dc <HAL_InitTick+0x5c>)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026c6:	2300      	movs	r3, #0
 80026c8:	e000      	b.n	80026cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3708      	adds	r7, #8
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	2000000c 	.word	0x2000000c
 80026d8:	20000014 	.word	0x20000014
 80026dc:	20000010 	.word	0x20000010

080026e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026e4:	4b05      	ldr	r3, [pc, #20]	; (80026fc <HAL_IncTick+0x1c>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	461a      	mov	r2, r3
 80026ea:	4b05      	ldr	r3, [pc, #20]	; (8002700 <HAL_IncTick+0x20>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4413      	add	r3, r2
 80026f0:	4a03      	ldr	r2, [pc, #12]	; (8002700 <HAL_IncTick+0x20>)
 80026f2:	6013      	str	r3, [r2, #0]
}
 80026f4:	bf00      	nop
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bc80      	pop	{r7}
 80026fa:	4770      	bx	lr
 80026fc:	20000014 	.word	0x20000014
 8002700:	20000458 	.word	0x20000458

08002704 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  return uwTick;
 8002708:	4b02      	ldr	r3, [pc, #8]	; (8002714 <HAL_GetTick+0x10>)
 800270a:	681b      	ldr	r3, [r3, #0]
}
 800270c:	4618      	mov	r0, r3
 800270e:	46bd      	mov	sp, r7
 8002710:	bc80      	pop	{r7}
 8002712:	4770      	bx	lr
 8002714:	20000458 	.word	0x20000458

08002718 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002720:	f7ff fff0 	bl	8002704 <HAL_GetTick>
 8002724:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002730:	d005      	beq.n	800273e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002732:	4b0a      	ldr	r3, [pc, #40]	; (800275c <HAL_Delay+0x44>)
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	461a      	mov	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	4413      	add	r3, r2
 800273c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800273e:	bf00      	nop
 8002740:	f7ff ffe0 	bl	8002704 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	68fa      	ldr	r2, [r7, #12]
 800274c:	429a      	cmp	r2, r3
 800274e:	d8f7      	bhi.n	8002740 <HAL_Delay+0x28>
  {
  }
}
 8002750:	bf00      	nop
 8002752:	bf00      	nop
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	20000014 	.word	0x20000014

08002760 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002768:	2300      	movs	r3, #0
 800276a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800276c:	2300      	movs	r3, #0
 800276e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002770:	2300      	movs	r3, #0
 8002772:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002774:	2300      	movs	r3, #0
 8002776:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d101      	bne.n	8002782 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e0be      	b.n	8002900 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800278c:	2b00      	cmp	r3, #0
 800278e:	d109      	bne.n	80027a4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f7ff fdac 	bl	80022fc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f000 f9ab 	bl	8002b00 <ADC_ConversionStop_Disable>
 80027aa:	4603      	mov	r3, r0
 80027ac:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b2:	f003 0310 	and.w	r3, r3, #16
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f040 8099 	bne.w	80028ee <HAL_ADC_Init+0x18e>
 80027bc:	7dfb      	ldrb	r3, [r7, #23]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f040 8095 	bne.w	80028ee <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80027cc:	f023 0302 	bic.w	r3, r3, #2
 80027d0:	f043 0202 	orr.w	r2, r3, #2
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80027e0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	7b1b      	ldrb	r3, [r3, #12]
 80027e6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80027e8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80027ea:	68ba      	ldr	r2, [r7, #8]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027f8:	d003      	beq.n	8002802 <HAL_ADC_Init+0xa2>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d102      	bne.n	8002808 <HAL_ADC_Init+0xa8>
 8002802:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002806:	e000      	b.n	800280a <HAL_ADC_Init+0xaa>
 8002808:	2300      	movs	r3, #0
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	4313      	orrs	r3, r2
 800280e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	7d1b      	ldrb	r3, [r3, #20]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d119      	bne.n	800284c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	7b1b      	ldrb	r3, [r3, #12]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d109      	bne.n	8002834 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	3b01      	subs	r3, #1
 8002826:	035a      	lsls	r2, r3, #13
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	4313      	orrs	r3, r2
 800282c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002830:	613b      	str	r3, [r7, #16]
 8002832:	e00b      	b.n	800284c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002838:	f043 0220 	orr.w	r2, r3, #32
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002844:	f043 0201 	orr.w	r2, r3, #1
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	430a      	orrs	r2, r1
 800285e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	689a      	ldr	r2, [r3, #8]
 8002866:	4b28      	ldr	r3, [pc, #160]	; (8002908 <HAL_ADC_Init+0x1a8>)
 8002868:	4013      	ands	r3, r2
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	6812      	ldr	r2, [r2, #0]
 800286e:	68b9      	ldr	r1, [r7, #8]
 8002870:	430b      	orrs	r3, r1
 8002872:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800287c:	d003      	beq.n	8002886 <HAL_ADC_Init+0x126>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d104      	bne.n	8002890 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	3b01      	subs	r3, #1
 800288c:	051b      	lsls	r3, r3, #20
 800288e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002896:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	430a      	orrs	r2, r1
 80028a2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	689a      	ldr	r2, [r3, #8]
 80028aa:	4b18      	ldr	r3, [pc, #96]	; (800290c <HAL_ADC_Init+0x1ac>)
 80028ac:	4013      	ands	r3, r2
 80028ae:	68ba      	ldr	r2, [r7, #8]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d10b      	bne.n	80028cc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028be:	f023 0303 	bic.w	r3, r3, #3
 80028c2:	f043 0201 	orr.w	r2, r3, #1
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80028ca:	e018      	b.n	80028fe <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d0:	f023 0312 	bic.w	r3, r3, #18
 80028d4:	f043 0210 	orr.w	r2, r3, #16
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e0:	f043 0201 	orr.w	r2, r3, #1
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80028ec:	e007      	b.n	80028fe <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f2:	f043 0210 	orr.w	r2, r3, #16
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80028fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002900:	4618      	mov	r0, r3
 8002902:	3718      	adds	r7, #24
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	ffe1f7fd 	.word	0xffe1f7fd
 800290c:	ff1f0efe 	.word	0xff1f0efe

08002910 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800291a:	2300      	movs	r3, #0
 800291c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800291e:	2300      	movs	r3, #0
 8002920:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002928:	2b01      	cmp	r3, #1
 800292a:	d101      	bne.n	8002930 <HAL_ADC_ConfigChannel+0x20>
 800292c:	2302      	movs	r3, #2
 800292e:	e0dc      	b.n	8002aea <HAL_ADC_ConfigChannel+0x1da>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	2b06      	cmp	r3, #6
 800293e:	d81c      	bhi.n	800297a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685a      	ldr	r2, [r3, #4]
 800294a:	4613      	mov	r3, r2
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	4413      	add	r3, r2
 8002950:	3b05      	subs	r3, #5
 8002952:	221f      	movs	r2, #31
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	43db      	mvns	r3, r3
 800295a:	4019      	ands	r1, r3
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	6818      	ldr	r0, [r3, #0]
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685a      	ldr	r2, [r3, #4]
 8002964:	4613      	mov	r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	4413      	add	r3, r2
 800296a:	3b05      	subs	r3, #5
 800296c:	fa00 f203 	lsl.w	r2, r0, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	430a      	orrs	r2, r1
 8002976:	635a      	str	r2, [r3, #52]	; 0x34
 8002978:	e03c      	b.n	80029f4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	2b0c      	cmp	r3, #12
 8002980:	d81c      	bhi.n	80029bc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685a      	ldr	r2, [r3, #4]
 800298c:	4613      	mov	r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	4413      	add	r3, r2
 8002992:	3b23      	subs	r3, #35	; 0x23
 8002994:	221f      	movs	r2, #31
 8002996:	fa02 f303 	lsl.w	r3, r2, r3
 800299a:	43db      	mvns	r3, r3
 800299c:	4019      	ands	r1, r3
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	6818      	ldr	r0, [r3, #0]
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685a      	ldr	r2, [r3, #4]
 80029a6:	4613      	mov	r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	4413      	add	r3, r2
 80029ac:	3b23      	subs	r3, #35	; 0x23
 80029ae:	fa00 f203 	lsl.w	r2, r0, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	430a      	orrs	r2, r1
 80029b8:	631a      	str	r2, [r3, #48]	; 0x30
 80029ba:	e01b      	b.n	80029f4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685a      	ldr	r2, [r3, #4]
 80029c6:	4613      	mov	r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	4413      	add	r3, r2
 80029cc:	3b41      	subs	r3, #65	; 0x41
 80029ce:	221f      	movs	r2, #31
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	43db      	mvns	r3, r3
 80029d6:	4019      	ands	r1, r3
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	6818      	ldr	r0, [r3, #0]
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685a      	ldr	r2, [r3, #4]
 80029e0:	4613      	mov	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	4413      	add	r3, r2
 80029e6:	3b41      	subs	r3, #65	; 0x41
 80029e8:	fa00 f203 	lsl.w	r2, r0, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	430a      	orrs	r2, r1
 80029f2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2b09      	cmp	r3, #9
 80029fa:	d91c      	bls.n	8002a36 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68d9      	ldr	r1, [r3, #12]
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	4613      	mov	r3, r2
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	4413      	add	r3, r2
 8002a0c:	3b1e      	subs	r3, #30
 8002a0e:	2207      	movs	r2, #7
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	43db      	mvns	r3, r3
 8002a16:	4019      	ands	r1, r3
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	6898      	ldr	r0, [r3, #8]
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	4613      	mov	r3, r2
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	4413      	add	r3, r2
 8002a26:	3b1e      	subs	r3, #30
 8002a28:	fa00 f203 	lsl.w	r2, r0, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	430a      	orrs	r2, r1
 8002a32:	60da      	str	r2, [r3, #12]
 8002a34:	e019      	b.n	8002a6a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	6919      	ldr	r1, [r3, #16]
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	4613      	mov	r3, r2
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	4413      	add	r3, r2
 8002a46:	2207      	movs	r2, #7
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	43db      	mvns	r3, r3
 8002a4e:	4019      	ands	r1, r3
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	6898      	ldr	r0, [r3, #8]
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	4413      	add	r3, r2
 8002a5e:	fa00 f203 	lsl.w	r2, r0, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	430a      	orrs	r2, r1
 8002a68:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2b10      	cmp	r3, #16
 8002a70:	d003      	beq.n	8002a7a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a76:	2b11      	cmp	r3, #17
 8002a78:	d132      	bne.n	8002ae0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a1d      	ldr	r2, [pc, #116]	; (8002af4 <HAL_ADC_ConfigChannel+0x1e4>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d125      	bne.n	8002ad0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d126      	bne.n	8002ae0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	689a      	ldr	r2, [r3, #8]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002aa0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2b10      	cmp	r3, #16
 8002aa8:	d11a      	bne.n	8002ae0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002aaa:	4b13      	ldr	r3, [pc, #76]	; (8002af8 <HAL_ADC_ConfigChannel+0x1e8>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a13      	ldr	r2, [pc, #76]	; (8002afc <HAL_ADC_ConfigChannel+0x1ec>)
 8002ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab4:	0c9a      	lsrs	r2, r3, #18
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	4413      	add	r3, r2
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ac0:	e002      	b.n	8002ac8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	3b01      	subs	r3, #1
 8002ac6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1f9      	bne.n	8002ac2 <HAL_ADC_ConfigChannel+0x1b2>
 8002ace:	e007      	b.n	8002ae0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad4:	f043 0220 	orr.w	r2, r3, #32
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3714      	adds	r7, #20
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bc80      	pop	{r7}
 8002af2:	4770      	bx	lr
 8002af4:	40012400 	.word	0x40012400
 8002af8:	2000000c 	.word	0x2000000c
 8002afc:	431bde83 	.word	0x431bde83

08002b00 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d12e      	bne.n	8002b78 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	689a      	ldr	r2, [r3, #8]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f022 0201 	bic.w	r2, r2, #1
 8002b28:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b2a:	f7ff fdeb 	bl	8002704 <HAL_GetTick>
 8002b2e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002b30:	e01b      	b.n	8002b6a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b32:	f7ff fde7 	bl	8002704 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d914      	bls.n	8002b6a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d10d      	bne.n	8002b6a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b52:	f043 0210 	orr.w	r2, r3, #16
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5e:	f043 0201 	orr.w	r2, r3, #1
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e007      	b.n	8002b7a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f003 0301 	and.w	r3, r3, #1
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d0dc      	beq.n	8002b32 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
	...

08002b84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f003 0307 	and.w	r3, r3, #7
 8002b92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b94:	4b0c      	ldr	r3, [pc, #48]	; (8002bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b9a:	68ba      	ldr	r2, [r7, #8]
 8002b9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bb6:	4a04      	ldr	r2, [pc, #16]	; (8002bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	60d3      	str	r3, [r2, #12]
}
 8002bbc:	bf00      	nop
 8002bbe:	3714      	adds	r7, #20
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bc80      	pop	{r7}
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	e000ed00 	.word	0xe000ed00

08002bcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bd0:	4b04      	ldr	r3, [pc, #16]	; (8002be4 <__NVIC_GetPriorityGrouping+0x18>)
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	0a1b      	lsrs	r3, r3, #8
 8002bd6:	f003 0307 	and.w	r3, r3, #7
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bc80      	pop	{r7}
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	e000ed00 	.word	0xe000ed00

08002be8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	4603      	mov	r3, r0
 8002bf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	db0b      	blt.n	8002c12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bfa:	79fb      	ldrb	r3, [r7, #7]
 8002bfc:	f003 021f 	and.w	r2, r3, #31
 8002c00:	4906      	ldr	r1, [pc, #24]	; (8002c1c <__NVIC_EnableIRQ+0x34>)
 8002c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c06:	095b      	lsrs	r3, r3, #5
 8002c08:	2001      	movs	r0, #1
 8002c0a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c12:	bf00      	nop
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bc80      	pop	{r7}
 8002c1a:	4770      	bx	lr
 8002c1c:	e000e100 	.word	0xe000e100

08002c20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	4603      	mov	r3, r0
 8002c28:	6039      	str	r1, [r7, #0]
 8002c2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	db0a      	blt.n	8002c4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	b2da      	uxtb	r2, r3
 8002c38:	490c      	ldr	r1, [pc, #48]	; (8002c6c <__NVIC_SetPriority+0x4c>)
 8002c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c3e:	0112      	lsls	r2, r2, #4
 8002c40:	b2d2      	uxtb	r2, r2
 8002c42:	440b      	add	r3, r1
 8002c44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c48:	e00a      	b.n	8002c60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	b2da      	uxtb	r2, r3
 8002c4e:	4908      	ldr	r1, [pc, #32]	; (8002c70 <__NVIC_SetPriority+0x50>)
 8002c50:	79fb      	ldrb	r3, [r7, #7]
 8002c52:	f003 030f 	and.w	r3, r3, #15
 8002c56:	3b04      	subs	r3, #4
 8002c58:	0112      	lsls	r2, r2, #4
 8002c5a:	b2d2      	uxtb	r2, r2
 8002c5c:	440b      	add	r3, r1
 8002c5e:	761a      	strb	r2, [r3, #24]
}
 8002c60:	bf00      	nop
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bc80      	pop	{r7}
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	e000e100 	.word	0xe000e100
 8002c70:	e000ed00 	.word	0xe000ed00

08002c74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b089      	sub	sp, #36	; 0x24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f003 0307 	and.w	r3, r3, #7
 8002c86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	f1c3 0307 	rsb	r3, r3, #7
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	bf28      	it	cs
 8002c92:	2304      	movcs	r3, #4
 8002c94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	3304      	adds	r3, #4
 8002c9a:	2b06      	cmp	r3, #6
 8002c9c:	d902      	bls.n	8002ca4 <NVIC_EncodePriority+0x30>
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	3b03      	subs	r3, #3
 8002ca2:	e000      	b.n	8002ca6 <NVIC_EncodePriority+0x32>
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb2:	43da      	mvns	r2, r3
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	401a      	ands	r2, r3
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cbc:	f04f 31ff 	mov.w	r1, #4294967295
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc6:	43d9      	mvns	r1, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ccc:	4313      	orrs	r3, r2
         );
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3724      	adds	r7, #36	; 0x24
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bc80      	pop	{r7}
 8002cd6:	4770      	bx	lr

08002cd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ce8:	d301      	bcc.n	8002cee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cea:	2301      	movs	r3, #1
 8002cec:	e00f      	b.n	8002d0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cee:	4a0a      	ldr	r2, [pc, #40]	; (8002d18 <SysTick_Config+0x40>)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cf6:	210f      	movs	r1, #15
 8002cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cfc:	f7ff ff90 	bl	8002c20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d00:	4b05      	ldr	r3, [pc, #20]	; (8002d18 <SysTick_Config+0x40>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d06:	4b04      	ldr	r3, [pc, #16]	; (8002d18 <SysTick_Config+0x40>)
 8002d08:	2207      	movs	r2, #7
 8002d0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3708      	adds	r7, #8
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	e000e010 	.word	0xe000e010

08002d1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f7ff ff2d 	bl	8002b84 <__NVIC_SetPriorityGrouping>
}
 8002d2a:	bf00      	nop
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b086      	sub	sp, #24
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	4603      	mov	r3, r0
 8002d3a:	60b9      	str	r1, [r7, #8]
 8002d3c:	607a      	str	r2, [r7, #4]
 8002d3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d40:	2300      	movs	r3, #0
 8002d42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d44:	f7ff ff42 	bl	8002bcc <__NVIC_GetPriorityGrouping>
 8002d48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	68b9      	ldr	r1, [r7, #8]
 8002d4e:	6978      	ldr	r0, [r7, #20]
 8002d50:	f7ff ff90 	bl	8002c74 <NVIC_EncodePriority>
 8002d54:	4602      	mov	r2, r0
 8002d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d5a:	4611      	mov	r1, r2
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7ff ff5f 	bl	8002c20 <__NVIC_SetPriority>
}
 8002d62:	bf00      	nop
 8002d64:	3718      	adds	r7, #24
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b082      	sub	sp, #8
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	4603      	mov	r3, r0
 8002d72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7ff ff35 	bl	8002be8 <__NVIC_EnableIRQ>
}
 8002d7e:	bf00      	nop
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b082      	sub	sp, #8
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f7ff ffa2 	bl	8002cd8 <SysTick_Config>
 8002d94:	4603      	mov	r3, r0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3708      	adds	r7, #8
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b085      	sub	sp, #20
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002da6:	2300      	movs	r3, #0
 8002da8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d008      	beq.n	8002dc6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2204      	movs	r2, #4
 8002db8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e020      	b.n	8002e08 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f022 020e 	bic.w	r2, r2, #14
 8002dd4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f022 0201 	bic.w	r2, r2, #1
 8002de4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dee:	2101      	movs	r1, #1
 8002df0:	fa01 f202 	lsl.w	r2, r1, r2
 8002df4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3714      	adds	r7, #20
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bc80      	pop	{r7}
 8002e10:	4770      	bx	lr
	...

08002e14 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d005      	beq.n	8002e36 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2204      	movs	r2, #4
 8002e2e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	73fb      	strb	r3, [r7, #15]
 8002e34:	e051      	b.n	8002eda <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f022 020e 	bic.w	r2, r2, #14
 8002e44:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f022 0201 	bic.w	r2, r2, #1
 8002e54:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a22      	ldr	r2, [pc, #136]	; (8002ee4 <HAL_DMA_Abort_IT+0xd0>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d029      	beq.n	8002eb4 <HAL_DMA_Abort_IT+0xa0>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a20      	ldr	r2, [pc, #128]	; (8002ee8 <HAL_DMA_Abort_IT+0xd4>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d022      	beq.n	8002eb0 <HAL_DMA_Abort_IT+0x9c>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a1f      	ldr	r2, [pc, #124]	; (8002eec <HAL_DMA_Abort_IT+0xd8>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d01a      	beq.n	8002eaa <HAL_DMA_Abort_IT+0x96>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a1d      	ldr	r2, [pc, #116]	; (8002ef0 <HAL_DMA_Abort_IT+0xdc>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d012      	beq.n	8002ea4 <HAL_DMA_Abort_IT+0x90>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a1c      	ldr	r2, [pc, #112]	; (8002ef4 <HAL_DMA_Abort_IT+0xe0>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d00a      	beq.n	8002e9e <HAL_DMA_Abort_IT+0x8a>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a1a      	ldr	r2, [pc, #104]	; (8002ef8 <HAL_DMA_Abort_IT+0xe4>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d102      	bne.n	8002e98 <HAL_DMA_Abort_IT+0x84>
 8002e92:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002e96:	e00e      	b.n	8002eb6 <HAL_DMA_Abort_IT+0xa2>
 8002e98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e9c:	e00b      	b.n	8002eb6 <HAL_DMA_Abort_IT+0xa2>
 8002e9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ea2:	e008      	b.n	8002eb6 <HAL_DMA_Abort_IT+0xa2>
 8002ea4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ea8:	e005      	b.n	8002eb6 <HAL_DMA_Abort_IT+0xa2>
 8002eaa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002eae:	e002      	b.n	8002eb6 <HAL_DMA_Abort_IT+0xa2>
 8002eb0:	2310      	movs	r3, #16
 8002eb2:	e000      	b.n	8002eb6 <HAL_DMA_Abort_IT+0xa2>
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	4a11      	ldr	r2, [pc, #68]	; (8002efc <HAL_DMA_Abort_IT+0xe8>)
 8002eb8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d003      	beq.n	8002eda <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	4798      	blx	r3
    } 
  }
  return status;
 8002eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3710      	adds	r7, #16
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	40020008 	.word	0x40020008
 8002ee8:	4002001c 	.word	0x4002001c
 8002eec:	40020030 	.word	0x40020030
 8002ef0:	40020044 	.word	0x40020044
 8002ef4:	40020058 	.word	0x40020058
 8002ef8:	4002006c 	.word	0x4002006c
 8002efc:	40020000 	.word	0x40020000

08002f00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b08b      	sub	sp, #44	; 0x2c
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f12:	e169      	b.n	80031e8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002f14:	2201      	movs	r2, #1
 8002f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f18:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	69fa      	ldr	r2, [r7, #28]
 8002f24:	4013      	ands	r3, r2
 8002f26:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	f040 8158 	bne.w	80031e2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	4a9a      	ldr	r2, [pc, #616]	; (80031a0 <HAL_GPIO_Init+0x2a0>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d05e      	beq.n	8002ffa <HAL_GPIO_Init+0xfa>
 8002f3c:	4a98      	ldr	r2, [pc, #608]	; (80031a0 <HAL_GPIO_Init+0x2a0>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d875      	bhi.n	800302e <HAL_GPIO_Init+0x12e>
 8002f42:	4a98      	ldr	r2, [pc, #608]	; (80031a4 <HAL_GPIO_Init+0x2a4>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d058      	beq.n	8002ffa <HAL_GPIO_Init+0xfa>
 8002f48:	4a96      	ldr	r2, [pc, #600]	; (80031a4 <HAL_GPIO_Init+0x2a4>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d86f      	bhi.n	800302e <HAL_GPIO_Init+0x12e>
 8002f4e:	4a96      	ldr	r2, [pc, #600]	; (80031a8 <HAL_GPIO_Init+0x2a8>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d052      	beq.n	8002ffa <HAL_GPIO_Init+0xfa>
 8002f54:	4a94      	ldr	r2, [pc, #592]	; (80031a8 <HAL_GPIO_Init+0x2a8>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d869      	bhi.n	800302e <HAL_GPIO_Init+0x12e>
 8002f5a:	4a94      	ldr	r2, [pc, #592]	; (80031ac <HAL_GPIO_Init+0x2ac>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d04c      	beq.n	8002ffa <HAL_GPIO_Init+0xfa>
 8002f60:	4a92      	ldr	r2, [pc, #584]	; (80031ac <HAL_GPIO_Init+0x2ac>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d863      	bhi.n	800302e <HAL_GPIO_Init+0x12e>
 8002f66:	4a92      	ldr	r2, [pc, #584]	; (80031b0 <HAL_GPIO_Init+0x2b0>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d046      	beq.n	8002ffa <HAL_GPIO_Init+0xfa>
 8002f6c:	4a90      	ldr	r2, [pc, #576]	; (80031b0 <HAL_GPIO_Init+0x2b0>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d85d      	bhi.n	800302e <HAL_GPIO_Init+0x12e>
 8002f72:	2b12      	cmp	r3, #18
 8002f74:	d82a      	bhi.n	8002fcc <HAL_GPIO_Init+0xcc>
 8002f76:	2b12      	cmp	r3, #18
 8002f78:	d859      	bhi.n	800302e <HAL_GPIO_Init+0x12e>
 8002f7a:	a201      	add	r2, pc, #4	; (adr r2, 8002f80 <HAL_GPIO_Init+0x80>)
 8002f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f80:	08002ffb 	.word	0x08002ffb
 8002f84:	08002fd5 	.word	0x08002fd5
 8002f88:	08002fe7 	.word	0x08002fe7
 8002f8c:	08003029 	.word	0x08003029
 8002f90:	0800302f 	.word	0x0800302f
 8002f94:	0800302f 	.word	0x0800302f
 8002f98:	0800302f 	.word	0x0800302f
 8002f9c:	0800302f 	.word	0x0800302f
 8002fa0:	0800302f 	.word	0x0800302f
 8002fa4:	0800302f 	.word	0x0800302f
 8002fa8:	0800302f 	.word	0x0800302f
 8002fac:	0800302f 	.word	0x0800302f
 8002fb0:	0800302f 	.word	0x0800302f
 8002fb4:	0800302f 	.word	0x0800302f
 8002fb8:	0800302f 	.word	0x0800302f
 8002fbc:	0800302f 	.word	0x0800302f
 8002fc0:	0800302f 	.word	0x0800302f
 8002fc4:	08002fdd 	.word	0x08002fdd
 8002fc8:	08002ff1 	.word	0x08002ff1
 8002fcc:	4a79      	ldr	r2, [pc, #484]	; (80031b4 <HAL_GPIO_Init+0x2b4>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d013      	beq.n	8002ffa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002fd2:	e02c      	b.n	800302e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	623b      	str	r3, [r7, #32]
          break;
 8002fda:	e029      	b.n	8003030 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	3304      	adds	r3, #4
 8002fe2:	623b      	str	r3, [r7, #32]
          break;
 8002fe4:	e024      	b.n	8003030 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	3308      	adds	r3, #8
 8002fec:	623b      	str	r3, [r7, #32]
          break;
 8002fee:	e01f      	b.n	8003030 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	330c      	adds	r3, #12
 8002ff6:	623b      	str	r3, [r7, #32]
          break;
 8002ff8:	e01a      	b.n	8003030 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d102      	bne.n	8003008 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003002:	2304      	movs	r3, #4
 8003004:	623b      	str	r3, [r7, #32]
          break;
 8003006:	e013      	b.n	8003030 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d105      	bne.n	800301c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003010:	2308      	movs	r3, #8
 8003012:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	69fa      	ldr	r2, [r7, #28]
 8003018:	611a      	str	r2, [r3, #16]
          break;
 800301a:	e009      	b.n	8003030 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800301c:	2308      	movs	r3, #8
 800301e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	69fa      	ldr	r2, [r7, #28]
 8003024:	615a      	str	r2, [r3, #20]
          break;
 8003026:	e003      	b.n	8003030 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003028:	2300      	movs	r3, #0
 800302a:	623b      	str	r3, [r7, #32]
          break;
 800302c:	e000      	b.n	8003030 <HAL_GPIO_Init+0x130>
          break;
 800302e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	2bff      	cmp	r3, #255	; 0xff
 8003034:	d801      	bhi.n	800303a <HAL_GPIO_Init+0x13a>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	e001      	b.n	800303e <HAL_GPIO_Init+0x13e>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	3304      	adds	r3, #4
 800303e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	2bff      	cmp	r3, #255	; 0xff
 8003044:	d802      	bhi.n	800304c <HAL_GPIO_Init+0x14c>
 8003046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	e002      	b.n	8003052 <HAL_GPIO_Init+0x152>
 800304c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304e:	3b08      	subs	r3, #8
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	210f      	movs	r1, #15
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	fa01 f303 	lsl.w	r3, r1, r3
 8003060:	43db      	mvns	r3, r3
 8003062:	401a      	ands	r2, r3
 8003064:	6a39      	ldr	r1, [r7, #32]
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	fa01 f303 	lsl.w	r3, r1, r3
 800306c:	431a      	orrs	r2, r3
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800307a:	2b00      	cmp	r3, #0
 800307c:	f000 80b1 	beq.w	80031e2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003080:	4b4d      	ldr	r3, [pc, #308]	; (80031b8 <HAL_GPIO_Init+0x2b8>)
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	4a4c      	ldr	r2, [pc, #304]	; (80031b8 <HAL_GPIO_Init+0x2b8>)
 8003086:	f043 0301 	orr.w	r3, r3, #1
 800308a:	6193      	str	r3, [r2, #24]
 800308c:	4b4a      	ldr	r3, [pc, #296]	; (80031b8 <HAL_GPIO_Init+0x2b8>)
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	f003 0301 	and.w	r3, r3, #1
 8003094:	60bb      	str	r3, [r7, #8]
 8003096:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003098:	4a48      	ldr	r2, [pc, #288]	; (80031bc <HAL_GPIO_Init+0x2bc>)
 800309a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309c:	089b      	lsrs	r3, r3, #2
 800309e:	3302      	adds	r3, #2
 80030a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030a4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80030a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a8:	f003 0303 	and.w	r3, r3, #3
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	220f      	movs	r2, #15
 80030b0:	fa02 f303 	lsl.w	r3, r2, r3
 80030b4:	43db      	mvns	r3, r3
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	4013      	ands	r3, r2
 80030ba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	4a40      	ldr	r2, [pc, #256]	; (80031c0 <HAL_GPIO_Init+0x2c0>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d013      	beq.n	80030ec <HAL_GPIO_Init+0x1ec>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4a3f      	ldr	r2, [pc, #252]	; (80031c4 <HAL_GPIO_Init+0x2c4>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d00d      	beq.n	80030e8 <HAL_GPIO_Init+0x1e8>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4a3e      	ldr	r2, [pc, #248]	; (80031c8 <HAL_GPIO_Init+0x2c8>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d007      	beq.n	80030e4 <HAL_GPIO_Init+0x1e4>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a3d      	ldr	r2, [pc, #244]	; (80031cc <HAL_GPIO_Init+0x2cc>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d101      	bne.n	80030e0 <HAL_GPIO_Init+0x1e0>
 80030dc:	2303      	movs	r3, #3
 80030de:	e006      	b.n	80030ee <HAL_GPIO_Init+0x1ee>
 80030e0:	2304      	movs	r3, #4
 80030e2:	e004      	b.n	80030ee <HAL_GPIO_Init+0x1ee>
 80030e4:	2302      	movs	r3, #2
 80030e6:	e002      	b.n	80030ee <HAL_GPIO_Init+0x1ee>
 80030e8:	2301      	movs	r3, #1
 80030ea:	e000      	b.n	80030ee <HAL_GPIO_Init+0x1ee>
 80030ec:	2300      	movs	r3, #0
 80030ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030f0:	f002 0203 	and.w	r2, r2, #3
 80030f4:	0092      	lsls	r2, r2, #2
 80030f6:	4093      	lsls	r3, r2
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80030fe:	492f      	ldr	r1, [pc, #188]	; (80031bc <HAL_GPIO_Init+0x2bc>)
 8003100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003102:	089b      	lsrs	r3, r3, #2
 8003104:	3302      	adds	r3, #2
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d006      	beq.n	8003126 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003118:	4b2d      	ldr	r3, [pc, #180]	; (80031d0 <HAL_GPIO_Init+0x2d0>)
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	492c      	ldr	r1, [pc, #176]	; (80031d0 <HAL_GPIO_Init+0x2d0>)
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	4313      	orrs	r3, r2
 8003122:	600b      	str	r3, [r1, #0]
 8003124:	e006      	b.n	8003134 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003126:	4b2a      	ldr	r3, [pc, #168]	; (80031d0 <HAL_GPIO_Init+0x2d0>)
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	43db      	mvns	r3, r3
 800312e:	4928      	ldr	r1, [pc, #160]	; (80031d0 <HAL_GPIO_Init+0x2d0>)
 8003130:	4013      	ands	r3, r2
 8003132:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d006      	beq.n	800314e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003140:	4b23      	ldr	r3, [pc, #140]	; (80031d0 <HAL_GPIO_Init+0x2d0>)
 8003142:	685a      	ldr	r2, [r3, #4]
 8003144:	4922      	ldr	r1, [pc, #136]	; (80031d0 <HAL_GPIO_Init+0x2d0>)
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	4313      	orrs	r3, r2
 800314a:	604b      	str	r3, [r1, #4]
 800314c:	e006      	b.n	800315c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800314e:	4b20      	ldr	r3, [pc, #128]	; (80031d0 <HAL_GPIO_Init+0x2d0>)
 8003150:	685a      	ldr	r2, [r3, #4]
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	43db      	mvns	r3, r3
 8003156:	491e      	ldr	r1, [pc, #120]	; (80031d0 <HAL_GPIO_Init+0x2d0>)
 8003158:	4013      	ands	r3, r2
 800315a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d006      	beq.n	8003176 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003168:	4b19      	ldr	r3, [pc, #100]	; (80031d0 <HAL_GPIO_Init+0x2d0>)
 800316a:	689a      	ldr	r2, [r3, #8]
 800316c:	4918      	ldr	r1, [pc, #96]	; (80031d0 <HAL_GPIO_Init+0x2d0>)
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	4313      	orrs	r3, r2
 8003172:	608b      	str	r3, [r1, #8]
 8003174:	e006      	b.n	8003184 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003176:	4b16      	ldr	r3, [pc, #88]	; (80031d0 <HAL_GPIO_Init+0x2d0>)
 8003178:	689a      	ldr	r2, [r3, #8]
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	43db      	mvns	r3, r3
 800317e:	4914      	ldr	r1, [pc, #80]	; (80031d0 <HAL_GPIO_Init+0x2d0>)
 8003180:	4013      	ands	r3, r2
 8003182:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d021      	beq.n	80031d4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003190:	4b0f      	ldr	r3, [pc, #60]	; (80031d0 <HAL_GPIO_Init+0x2d0>)
 8003192:	68da      	ldr	r2, [r3, #12]
 8003194:	490e      	ldr	r1, [pc, #56]	; (80031d0 <HAL_GPIO_Init+0x2d0>)
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	4313      	orrs	r3, r2
 800319a:	60cb      	str	r3, [r1, #12]
 800319c:	e021      	b.n	80031e2 <HAL_GPIO_Init+0x2e2>
 800319e:	bf00      	nop
 80031a0:	10320000 	.word	0x10320000
 80031a4:	10310000 	.word	0x10310000
 80031a8:	10220000 	.word	0x10220000
 80031ac:	10210000 	.word	0x10210000
 80031b0:	10120000 	.word	0x10120000
 80031b4:	10110000 	.word	0x10110000
 80031b8:	40021000 	.word	0x40021000
 80031bc:	40010000 	.word	0x40010000
 80031c0:	40010800 	.word	0x40010800
 80031c4:	40010c00 	.word	0x40010c00
 80031c8:	40011000 	.word	0x40011000
 80031cc:	40011400 	.word	0x40011400
 80031d0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80031d4:	4b0b      	ldr	r3, [pc, #44]	; (8003204 <HAL_GPIO_Init+0x304>)
 80031d6:	68da      	ldr	r2, [r3, #12]
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	43db      	mvns	r3, r3
 80031dc:	4909      	ldr	r1, [pc, #36]	; (8003204 <HAL_GPIO_Init+0x304>)
 80031de:	4013      	ands	r3, r2
 80031e0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80031e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e4:	3301      	adds	r3, #1
 80031e6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ee:	fa22 f303 	lsr.w	r3, r2, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	f47f ae8e 	bne.w	8002f14 <HAL_GPIO_Init+0x14>
  }
}
 80031f8:	bf00      	nop
 80031fa:	bf00      	nop
 80031fc:	372c      	adds	r7, #44	; 0x2c
 80031fe:	46bd      	mov	sp, r7
 8003200:	bc80      	pop	{r7}
 8003202:	4770      	bx	lr
 8003204:	40010400 	.word	0x40010400

08003208 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	460b      	mov	r3, r1
 8003212:	807b      	strh	r3, [r7, #2]
 8003214:	4613      	mov	r3, r2
 8003216:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003218:	787b      	ldrb	r3, [r7, #1]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d003      	beq.n	8003226 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800321e:	887a      	ldrh	r2, [r7, #2]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003224:	e003      	b.n	800322e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003226:	887b      	ldrh	r3, [r7, #2]
 8003228:	041a      	lsls	r2, r3, #16
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	611a      	str	r2, [r3, #16]
}
 800322e:	bf00      	nop
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	bc80      	pop	{r7}
 8003236:	4770      	bx	lr

08003238 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b086      	sub	sp, #24
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d101      	bne.n	800324a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e26c      	b.n	8003724 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0301 	and.w	r3, r3, #1
 8003252:	2b00      	cmp	r3, #0
 8003254:	f000 8087 	beq.w	8003366 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003258:	4b92      	ldr	r3, [pc, #584]	; (80034a4 <HAL_RCC_OscConfig+0x26c>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f003 030c 	and.w	r3, r3, #12
 8003260:	2b04      	cmp	r3, #4
 8003262:	d00c      	beq.n	800327e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003264:	4b8f      	ldr	r3, [pc, #572]	; (80034a4 <HAL_RCC_OscConfig+0x26c>)
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f003 030c 	and.w	r3, r3, #12
 800326c:	2b08      	cmp	r3, #8
 800326e:	d112      	bne.n	8003296 <HAL_RCC_OscConfig+0x5e>
 8003270:	4b8c      	ldr	r3, [pc, #560]	; (80034a4 <HAL_RCC_OscConfig+0x26c>)
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800327c:	d10b      	bne.n	8003296 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800327e:	4b89      	ldr	r3, [pc, #548]	; (80034a4 <HAL_RCC_OscConfig+0x26c>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d06c      	beq.n	8003364 <HAL_RCC_OscConfig+0x12c>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d168      	bne.n	8003364 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e246      	b.n	8003724 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800329e:	d106      	bne.n	80032ae <HAL_RCC_OscConfig+0x76>
 80032a0:	4b80      	ldr	r3, [pc, #512]	; (80034a4 <HAL_RCC_OscConfig+0x26c>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a7f      	ldr	r2, [pc, #508]	; (80034a4 <HAL_RCC_OscConfig+0x26c>)
 80032a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032aa:	6013      	str	r3, [r2, #0]
 80032ac:	e02e      	b.n	800330c <HAL_RCC_OscConfig+0xd4>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d10c      	bne.n	80032d0 <HAL_RCC_OscConfig+0x98>
 80032b6:	4b7b      	ldr	r3, [pc, #492]	; (80034a4 <HAL_RCC_OscConfig+0x26c>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a7a      	ldr	r2, [pc, #488]	; (80034a4 <HAL_RCC_OscConfig+0x26c>)
 80032bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032c0:	6013      	str	r3, [r2, #0]
 80032c2:	4b78      	ldr	r3, [pc, #480]	; (80034a4 <HAL_RCC_OscConfig+0x26c>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a77      	ldr	r2, [pc, #476]	; (80034a4 <HAL_RCC_OscConfig+0x26c>)
 80032c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032cc:	6013      	str	r3, [r2, #0]
 80032ce:	e01d      	b.n	800330c <HAL_RCC_OscConfig+0xd4>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032d8:	d10c      	bne.n	80032f4 <HAL_RCC_OscConfig+0xbc>
 80032da:	4b72      	ldr	r3, [pc, #456]	; (80034a4 <HAL_RCC_OscConfig+0x26c>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a71      	ldr	r2, [pc, #452]	; (80034a4 <HAL_RCC_OscConfig+0x26c>)
 80032e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032e4:	6013      	str	r3, [r2, #0]
 80032e6:	4b6f      	ldr	r3, [pc, #444]	; (80034a4 <HAL_RCC_OscConfig+0x26c>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a6e      	ldr	r2, [pc, #440]	; (80034a4 <HAL_RCC_OscConfig+0x26c>)
 80032ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032f0:	6013      	str	r3, [r2, #0]
 80032f2:	e00b      	b.n	800330c <HAL_RCC_OscConfig+0xd4>
 80032f4:	4b6b      	ldr	r3, [pc, #428]	; (80034a4 <HAL_RCC_OscConfig+0x26c>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a6a      	ldr	r2, [pc, #424]	; (80034a4 <HAL_RCC_OscConfig+0x26c>)
 80032fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032fe:	6013      	str	r3, [r2, #0]
 8003300:	4b68      	ldr	r3, [pc, #416]	; (80034a4 <HAL_RCC_OscConfig+0x26c>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a67      	ldr	r2, [pc, #412]	; (80034a4 <HAL_RCC_OscConfig+0x26c>)
 8003306:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800330a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d013      	beq.n	800333c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003314:	f7ff f9f6 	bl	8002704 <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800331a:	e008      	b.n	800332e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800331c:	f7ff f9f2 	bl	8002704 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b64      	cmp	r3, #100	; 0x64
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e1fa      	b.n	8003724 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800332e:	4b5d      	ldr	r3, [pc, #372]	; (80034a4 <HAL_RCC_OscConfig+0x26c>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d0f0      	beq.n	800331c <HAL_RCC_OscConfig+0xe4>
 800333a:	e014      	b.n	8003366 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800333c:	f7ff f9e2 	bl	8002704 <HAL_GetTick>
 8003340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003342:	e008      	b.n	8003356 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003344:	f7ff f9de 	bl	8002704 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b64      	cmp	r3, #100	; 0x64
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e1e6      	b.n	8003724 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003356:	4b53      	ldr	r3, [pc, #332]	; (80034a4 <HAL_RCC_OscConfig+0x26c>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1f0      	bne.n	8003344 <HAL_RCC_OscConfig+0x10c>
 8003362:	e000      	b.n	8003366 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003364:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b00      	cmp	r3, #0
 8003370:	d063      	beq.n	800343a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003372:	4b4c      	ldr	r3, [pc, #304]	; (80034a4 <HAL_RCC_OscConfig+0x26c>)
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f003 030c 	and.w	r3, r3, #12
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00b      	beq.n	8003396 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800337e:	4b49      	ldr	r3, [pc, #292]	; (80034a4 <HAL_RCC_OscConfig+0x26c>)
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f003 030c 	and.w	r3, r3, #12
 8003386:	2b08      	cmp	r3, #8
 8003388:	d11c      	bne.n	80033c4 <HAL_RCC_OscConfig+0x18c>
 800338a:	4b46      	ldr	r3, [pc, #280]	; (80034a4 <HAL_RCC_OscConfig+0x26c>)
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d116      	bne.n	80033c4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003396:	4b43      	ldr	r3, [pc, #268]	; (80034a4 <HAL_RCC_OscConfig+0x26c>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d005      	beq.n	80033ae <HAL_RCC_OscConfig+0x176>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d001      	beq.n	80033ae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e1ba      	b.n	8003724 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ae:	4b3d      	ldr	r3, [pc, #244]	; (80034a4 <HAL_RCC_OscConfig+0x26c>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	4939      	ldr	r1, [pc, #228]	; (80034a4 <HAL_RCC_OscConfig+0x26c>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033c2:	e03a      	b.n	800343a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d020      	beq.n	800340e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033cc:	4b36      	ldr	r3, [pc, #216]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 80033ce:	2201      	movs	r2, #1
 80033d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d2:	f7ff f997 	bl	8002704 <HAL_GetTick>
 80033d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033d8:	e008      	b.n	80033ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033da:	f7ff f993 	bl	8002704 <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d901      	bls.n	80033ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e19b      	b.n	8003724 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ec:	4b2d      	ldr	r3, [pc, #180]	; (80034a4 <HAL_RCC_OscConfig+0x26c>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0302 	and.w	r3, r3, #2
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d0f0      	beq.n	80033da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033f8:	4b2a      	ldr	r3, [pc, #168]	; (80034a4 <HAL_RCC_OscConfig+0x26c>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	695b      	ldr	r3, [r3, #20]
 8003404:	00db      	lsls	r3, r3, #3
 8003406:	4927      	ldr	r1, [pc, #156]	; (80034a4 <HAL_RCC_OscConfig+0x26c>)
 8003408:	4313      	orrs	r3, r2
 800340a:	600b      	str	r3, [r1, #0]
 800340c:	e015      	b.n	800343a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800340e:	4b26      	ldr	r3, [pc, #152]	; (80034a8 <HAL_RCC_OscConfig+0x270>)
 8003410:	2200      	movs	r2, #0
 8003412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003414:	f7ff f976 	bl	8002704 <HAL_GetTick>
 8003418:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800341a:	e008      	b.n	800342e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800341c:	f7ff f972 	bl	8002704 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b02      	cmp	r3, #2
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e17a      	b.n	8003724 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800342e:	4b1d      	ldr	r3, [pc, #116]	; (80034a4 <HAL_RCC_OscConfig+0x26c>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1f0      	bne.n	800341c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0308 	and.w	r3, r3, #8
 8003442:	2b00      	cmp	r3, #0
 8003444:	d03a      	beq.n	80034bc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d019      	beq.n	8003482 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800344e:	4b17      	ldr	r3, [pc, #92]	; (80034ac <HAL_RCC_OscConfig+0x274>)
 8003450:	2201      	movs	r2, #1
 8003452:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003454:	f7ff f956 	bl	8002704 <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800345a:	e008      	b.n	800346e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800345c:	f7ff f952 	bl	8002704 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b02      	cmp	r3, #2
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e15a      	b.n	8003724 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800346e:	4b0d      	ldr	r3, [pc, #52]	; (80034a4 <HAL_RCC_OscConfig+0x26c>)
 8003470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d0f0      	beq.n	800345c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800347a:	2001      	movs	r0, #1
 800347c:	f000 fad8 	bl	8003a30 <RCC_Delay>
 8003480:	e01c      	b.n	80034bc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003482:	4b0a      	ldr	r3, [pc, #40]	; (80034ac <HAL_RCC_OscConfig+0x274>)
 8003484:	2200      	movs	r2, #0
 8003486:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003488:	f7ff f93c 	bl	8002704 <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800348e:	e00f      	b.n	80034b0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003490:	f7ff f938 	bl	8002704 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b02      	cmp	r3, #2
 800349c:	d908      	bls.n	80034b0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e140      	b.n	8003724 <HAL_RCC_OscConfig+0x4ec>
 80034a2:	bf00      	nop
 80034a4:	40021000 	.word	0x40021000
 80034a8:	42420000 	.word	0x42420000
 80034ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034b0:	4b9e      	ldr	r3, [pc, #632]	; (800372c <HAL_RCC_OscConfig+0x4f4>)
 80034b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b4:	f003 0302 	and.w	r3, r3, #2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d1e9      	bne.n	8003490 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0304 	and.w	r3, r3, #4
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f000 80a6 	beq.w	8003616 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034ca:	2300      	movs	r3, #0
 80034cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034ce:	4b97      	ldr	r3, [pc, #604]	; (800372c <HAL_RCC_OscConfig+0x4f4>)
 80034d0:	69db      	ldr	r3, [r3, #28]
 80034d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d10d      	bne.n	80034f6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034da:	4b94      	ldr	r3, [pc, #592]	; (800372c <HAL_RCC_OscConfig+0x4f4>)
 80034dc:	69db      	ldr	r3, [r3, #28]
 80034de:	4a93      	ldr	r2, [pc, #588]	; (800372c <HAL_RCC_OscConfig+0x4f4>)
 80034e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034e4:	61d3      	str	r3, [r2, #28]
 80034e6:	4b91      	ldr	r3, [pc, #580]	; (800372c <HAL_RCC_OscConfig+0x4f4>)
 80034e8:	69db      	ldr	r3, [r3, #28]
 80034ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ee:	60bb      	str	r3, [r7, #8]
 80034f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034f2:	2301      	movs	r3, #1
 80034f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034f6:	4b8e      	ldr	r3, [pc, #568]	; (8003730 <HAL_RCC_OscConfig+0x4f8>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d118      	bne.n	8003534 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003502:	4b8b      	ldr	r3, [pc, #556]	; (8003730 <HAL_RCC_OscConfig+0x4f8>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a8a      	ldr	r2, [pc, #552]	; (8003730 <HAL_RCC_OscConfig+0x4f8>)
 8003508:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800350c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800350e:	f7ff f8f9 	bl	8002704 <HAL_GetTick>
 8003512:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003514:	e008      	b.n	8003528 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003516:	f7ff f8f5 	bl	8002704 <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	2b64      	cmp	r3, #100	; 0x64
 8003522:	d901      	bls.n	8003528 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e0fd      	b.n	8003724 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003528:	4b81      	ldr	r3, [pc, #516]	; (8003730 <HAL_RCC_OscConfig+0x4f8>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003530:	2b00      	cmp	r3, #0
 8003532:	d0f0      	beq.n	8003516 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d106      	bne.n	800354a <HAL_RCC_OscConfig+0x312>
 800353c:	4b7b      	ldr	r3, [pc, #492]	; (800372c <HAL_RCC_OscConfig+0x4f4>)
 800353e:	6a1b      	ldr	r3, [r3, #32]
 8003540:	4a7a      	ldr	r2, [pc, #488]	; (800372c <HAL_RCC_OscConfig+0x4f4>)
 8003542:	f043 0301 	orr.w	r3, r3, #1
 8003546:	6213      	str	r3, [r2, #32]
 8003548:	e02d      	b.n	80035a6 <HAL_RCC_OscConfig+0x36e>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10c      	bne.n	800356c <HAL_RCC_OscConfig+0x334>
 8003552:	4b76      	ldr	r3, [pc, #472]	; (800372c <HAL_RCC_OscConfig+0x4f4>)
 8003554:	6a1b      	ldr	r3, [r3, #32]
 8003556:	4a75      	ldr	r2, [pc, #468]	; (800372c <HAL_RCC_OscConfig+0x4f4>)
 8003558:	f023 0301 	bic.w	r3, r3, #1
 800355c:	6213      	str	r3, [r2, #32]
 800355e:	4b73      	ldr	r3, [pc, #460]	; (800372c <HAL_RCC_OscConfig+0x4f4>)
 8003560:	6a1b      	ldr	r3, [r3, #32]
 8003562:	4a72      	ldr	r2, [pc, #456]	; (800372c <HAL_RCC_OscConfig+0x4f4>)
 8003564:	f023 0304 	bic.w	r3, r3, #4
 8003568:	6213      	str	r3, [r2, #32]
 800356a:	e01c      	b.n	80035a6 <HAL_RCC_OscConfig+0x36e>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	2b05      	cmp	r3, #5
 8003572:	d10c      	bne.n	800358e <HAL_RCC_OscConfig+0x356>
 8003574:	4b6d      	ldr	r3, [pc, #436]	; (800372c <HAL_RCC_OscConfig+0x4f4>)
 8003576:	6a1b      	ldr	r3, [r3, #32]
 8003578:	4a6c      	ldr	r2, [pc, #432]	; (800372c <HAL_RCC_OscConfig+0x4f4>)
 800357a:	f043 0304 	orr.w	r3, r3, #4
 800357e:	6213      	str	r3, [r2, #32]
 8003580:	4b6a      	ldr	r3, [pc, #424]	; (800372c <HAL_RCC_OscConfig+0x4f4>)
 8003582:	6a1b      	ldr	r3, [r3, #32]
 8003584:	4a69      	ldr	r2, [pc, #420]	; (800372c <HAL_RCC_OscConfig+0x4f4>)
 8003586:	f043 0301 	orr.w	r3, r3, #1
 800358a:	6213      	str	r3, [r2, #32]
 800358c:	e00b      	b.n	80035a6 <HAL_RCC_OscConfig+0x36e>
 800358e:	4b67      	ldr	r3, [pc, #412]	; (800372c <HAL_RCC_OscConfig+0x4f4>)
 8003590:	6a1b      	ldr	r3, [r3, #32]
 8003592:	4a66      	ldr	r2, [pc, #408]	; (800372c <HAL_RCC_OscConfig+0x4f4>)
 8003594:	f023 0301 	bic.w	r3, r3, #1
 8003598:	6213      	str	r3, [r2, #32]
 800359a:	4b64      	ldr	r3, [pc, #400]	; (800372c <HAL_RCC_OscConfig+0x4f4>)
 800359c:	6a1b      	ldr	r3, [r3, #32]
 800359e:	4a63      	ldr	r2, [pc, #396]	; (800372c <HAL_RCC_OscConfig+0x4f4>)
 80035a0:	f023 0304 	bic.w	r3, r3, #4
 80035a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d015      	beq.n	80035da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035ae:	f7ff f8a9 	bl	8002704 <HAL_GetTick>
 80035b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035b4:	e00a      	b.n	80035cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035b6:	f7ff f8a5 	bl	8002704 <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d901      	bls.n	80035cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e0ab      	b.n	8003724 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035cc:	4b57      	ldr	r3, [pc, #348]	; (800372c <HAL_RCC_OscConfig+0x4f4>)
 80035ce:	6a1b      	ldr	r3, [r3, #32]
 80035d0:	f003 0302 	and.w	r3, r3, #2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d0ee      	beq.n	80035b6 <HAL_RCC_OscConfig+0x37e>
 80035d8:	e014      	b.n	8003604 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035da:	f7ff f893 	bl	8002704 <HAL_GetTick>
 80035de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035e0:	e00a      	b.n	80035f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035e2:	f7ff f88f 	bl	8002704 <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d901      	bls.n	80035f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e095      	b.n	8003724 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035f8:	4b4c      	ldr	r3, [pc, #304]	; (800372c <HAL_RCC_OscConfig+0x4f4>)
 80035fa:	6a1b      	ldr	r3, [r3, #32]
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b00      	cmp	r3, #0
 8003602:	d1ee      	bne.n	80035e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003604:	7dfb      	ldrb	r3, [r7, #23]
 8003606:	2b01      	cmp	r3, #1
 8003608:	d105      	bne.n	8003616 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800360a:	4b48      	ldr	r3, [pc, #288]	; (800372c <HAL_RCC_OscConfig+0x4f4>)
 800360c:	69db      	ldr	r3, [r3, #28]
 800360e:	4a47      	ldr	r2, [pc, #284]	; (800372c <HAL_RCC_OscConfig+0x4f4>)
 8003610:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003614:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	69db      	ldr	r3, [r3, #28]
 800361a:	2b00      	cmp	r3, #0
 800361c:	f000 8081 	beq.w	8003722 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003620:	4b42      	ldr	r3, [pc, #264]	; (800372c <HAL_RCC_OscConfig+0x4f4>)
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f003 030c 	and.w	r3, r3, #12
 8003628:	2b08      	cmp	r3, #8
 800362a:	d061      	beq.n	80036f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	69db      	ldr	r3, [r3, #28]
 8003630:	2b02      	cmp	r3, #2
 8003632:	d146      	bne.n	80036c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003634:	4b3f      	ldr	r3, [pc, #252]	; (8003734 <HAL_RCC_OscConfig+0x4fc>)
 8003636:	2200      	movs	r2, #0
 8003638:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800363a:	f7ff f863 	bl	8002704 <HAL_GetTick>
 800363e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003640:	e008      	b.n	8003654 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003642:	f7ff f85f 	bl	8002704 <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	2b02      	cmp	r3, #2
 800364e:	d901      	bls.n	8003654 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e067      	b.n	8003724 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003654:	4b35      	ldr	r3, [pc, #212]	; (800372c <HAL_RCC_OscConfig+0x4f4>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d1f0      	bne.n	8003642 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a1b      	ldr	r3, [r3, #32]
 8003664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003668:	d108      	bne.n	800367c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800366a:	4b30      	ldr	r3, [pc, #192]	; (800372c <HAL_RCC_OscConfig+0x4f4>)
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	492d      	ldr	r1, [pc, #180]	; (800372c <HAL_RCC_OscConfig+0x4f4>)
 8003678:	4313      	orrs	r3, r2
 800367a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800367c:	4b2b      	ldr	r3, [pc, #172]	; (800372c <HAL_RCC_OscConfig+0x4f4>)
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a19      	ldr	r1, [r3, #32]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368c:	430b      	orrs	r3, r1
 800368e:	4927      	ldr	r1, [pc, #156]	; (800372c <HAL_RCC_OscConfig+0x4f4>)
 8003690:	4313      	orrs	r3, r2
 8003692:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003694:	4b27      	ldr	r3, [pc, #156]	; (8003734 <HAL_RCC_OscConfig+0x4fc>)
 8003696:	2201      	movs	r2, #1
 8003698:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800369a:	f7ff f833 	bl	8002704 <HAL_GetTick>
 800369e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036a0:	e008      	b.n	80036b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036a2:	f7ff f82f 	bl	8002704 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d901      	bls.n	80036b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e037      	b.n	8003724 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036b4:	4b1d      	ldr	r3, [pc, #116]	; (800372c <HAL_RCC_OscConfig+0x4f4>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d0f0      	beq.n	80036a2 <HAL_RCC_OscConfig+0x46a>
 80036c0:	e02f      	b.n	8003722 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036c2:	4b1c      	ldr	r3, [pc, #112]	; (8003734 <HAL_RCC_OscConfig+0x4fc>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c8:	f7ff f81c 	bl	8002704 <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036ce:	e008      	b.n	80036e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036d0:	f7ff f818 	bl	8002704 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e020      	b.n	8003724 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036e2:	4b12      	ldr	r3, [pc, #72]	; (800372c <HAL_RCC_OscConfig+0x4f4>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1f0      	bne.n	80036d0 <HAL_RCC_OscConfig+0x498>
 80036ee:	e018      	b.n	8003722 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	69db      	ldr	r3, [r3, #28]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d101      	bne.n	80036fc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e013      	b.n	8003724 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036fc:	4b0b      	ldr	r3, [pc, #44]	; (800372c <HAL_RCC_OscConfig+0x4f4>)
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a1b      	ldr	r3, [r3, #32]
 800370c:	429a      	cmp	r2, r3
 800370e:	d106      	bne.n	800371e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800371a:	429a      	cmp	r2, r3
 800371c:	d001      	beq.n	8003722 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e000      	b.n	8003724 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	3718      	adds	r7, #24
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	40021000 	.word	0x40021000
 8003730:	40007000 	.word	0x40007000
 8003734:	42420060 	.word	0x42420060

08003738 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d101      	bne.n	800374c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e0d0      	b.n	80038ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800374c:	4b6a      	ldr	r3, [pc, #424]	; (80038f8 <HAL_RCC_ClockConfig+0x1c0>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0307 	and.w	r3, r3, #7
 8003754:	683a      	ldr	r2, [r7, #0]
 8003756:	429a      	cmp	r2, r3
 8003758:	d910      	bls.n	800377c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800375a:	4b67      	ldr	r3, [pc, #412]	; (80038f8 <HAL_RCC_ClockConfig+0x1c0>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f023 0207 	bic.w	r2, r3, #7
 8003762:	4965      	ldr	r1, [pc, #404]	; (80038f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	4313      	orrs	r3, r2
 8003768:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800376a:	4b63      	ldr	r3, [pc, #396]	; (80038f8 <HAL_RCC_ClockConfig+0x1c0>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0307 	and.w	r3, r3, #7
 8003772:	683a      	ldr	r2, [r7, #0]
 8003774:	429a      	cmp	r2, r3
 8003776:	d001      	beq.n	800377c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e0b8      	b.n	80038ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0302 	and.w	r3, r3, #2
 8003784:	2b00      	cmp	r3, #0
 8003786:	d020      	beq.n	80037ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0304 	and.w	r3, r3, #4
 8003790:	2b00      	cmp	r3, #0
 8003792:	d005      	beq.n	80037a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003794:	4b59      	ldr	r3, [pc, #356]	; (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	4a58      	ldr	r2, [pc, #352]	; (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 800379a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800379e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0308 	and.w	r3, r3, #8
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d005      	beq.n	80037b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037ac:	4b53      	ldr	r3, [pc, #332]	; (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	4a52      	ldr	r2, [pc, #328]	; (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 80037b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80037b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037b8:	4b50      	ldr	r3, [pc, #320]	; (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	494d      	ldr	r1, [pc, #308]	; (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d040      	beq.n	8003858 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d107      	bne.n	80037ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037de:	4b47      	ldr	r3, [pc, #284]	; (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d115      	bne.n	8003816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e07f      	b.n	80038ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d107      	bne.n	8003806 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037f6:	4b41      	ldr	r3, [pc, #260]	; (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d109      	bne.n	8003816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e073      	b.n	80038ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003806:	4b3d      	ldr	r3, [pc, #244]	; (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0302 	and.w	r3, r3, #2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e06b      	b.n	80038ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003816:	4b39      	ldr	r3, [pc, #228]	; (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f023 0203 	bic.w	r2, r3, #3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	4936      	ldr	r1, [pc, #216]	; (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 8003824:	4313      	orrs	r3, r2
 8003826:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003828:	f7fe ff6c 	bl	8002704 <HAL_GetTick>
 800382c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800382e:	e00a      	b.n	8003846 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003830:	f7fe ff68 	bl	8002704 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	f241 3288 	movw	r2, #5000	; 0x1388
 800383e:	4293      	cmp	r3, r2
 8003840:	d901      	bls.n	8003846 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e053      	b.n	80038ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003846:	4b2d      	ldr	r3, [pc, #180]	; (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f003 020c 	and.w	r2, r3, #12
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	429a      	cmp	r2, r3
 8003856:	d1eb      	bne.n	8003830 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003858:	4b27      	ldr	r3, [pc, #156]	; (80038f8 <HAL_RCC_ClockConfig+0x1c0>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0307 	and.w	r3, r3, #7
 8003860:	683a      	ldr	r2, [r7, #0]
 8003862:	429a      	cmp	r2, r3
 8003864:	d210      	bcs.n	8003888 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003866:	4b24      	ldr	r3, [pc, #144]	; (80038f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f023 0207 	bic.w	r2, r3, #7
 800386e:	4922      	ldr	r1, [pc, #136]	; (80038f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	4313      	orrs	r3, r2
 8003874:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003876:	4b20      	ldr	r3, [pc, #128]	; (80038f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0307 	and.w	r3, r3, #7
 800387e:	683a      	ldr	r2, [r7, #0]
 8003880:	429a      	cmp	r2, r3
 8003882:	d001      	beq.n	8003888 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e032      	b.n	80038ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0304 	and.w	r3, r3, #4
 8003890:	2b00      	cmp	r3, #0
 8003892:	d008      	beq.n	80038a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003894:	4b19      	ldr	r3, [pc, #100]	; (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	4916      	ldr	r1, [pc, #88]	; (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0308 	and.w	r3, r3, #8
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d009      	beq.n	80038c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80038b2:	4b12      	ldr	r3, [pc, #72]	; (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	00db      	lsls	r3, r3, #3
 80038c0:	490e      	ldr	r1, [pc, #56]	; (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038c6:	f000 f821 	bl	800390c <HAL_RCC_GetSysClockFreq>
 80038ca:	4602      	mov	r2, r0
 80038cc:	4b0b      	ldr	r3, [pc, #44]	; (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	091b      	lsrs	r3, r3, #4
 80038d2:	f003 030f 	and.w	r3, r3, #15
 80038d6:	490a      	ldr	r1, [pc, #40]	; (8003900 <HAL_RCC_ClockConfig+0x1c8>)
 80038d8:	5ccb      	ldrb	r3, [r1, r3]
 80038da:	fa22 f303 	lsr.w	r3, r2, r3
 80038de:	4a09      	ldr	r2, [pc, #36]	; (8003904 <HAL_RCC_ClockConfig+0x1cc>)
 80038e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80038e2:	4b09      	ldr	r3, [pc, #36]	; (8003908 <HAL_RCC_ClockConfig+0x1d0>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7fe feca 	bl	8002680 <HAL_InitTick>

  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	40022000 	.word	0x40022000
 80038fc:	40021000 	.word	0x40021000
 8003900:	08007a88 	.word	0x08007a88
 8003904:	2000000c 	.word	0x2000000c
 8003908:	20000010 	.word	0x20000010

0800390c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800390c:	b490      	push	{r4, r7}
 800390e:	b08a      	sub	sp, #40	; 0x28
 8003910:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003912:	4b2a      	ldr	r3, [pc, #168]	; (80039bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8003914:	1d3c      	adds	r4, r7, #4
 8003916:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003918:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800391c:	f240 2301 	movw	r3, #513	; 0x201
 8003920:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003922:	2300      	movs	r3, #0
 8003924:	61fb      	str	r3, [r7, #28]
 8003926:	2300      	movs	r3, #0
 8003928:	61bb      	str	r3, [r7, #24]
 800392a:	2300      	movs	r3, #0
 800392c:	627b      	str	r3, [r7, #36]	; 0x24
 800392e:	2300      	movs	r3, #0
 8003930:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003932:	2300      	movs	r3, #0
 8003934:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003936:	4b22      	ldr	r3, [pc, #136]	; (80039c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	f003 030c 	and.w	r3, r3, #12
 8003942:	2b04      	cmp	r3, #4
 8003944:	d002      	beq.n	800394c <HAL_RCC_GetSysClockFreq+0x40>
 8003946:	2b08      	cmp	r3, #8
 8003948:	d003      	beq.n	8003952 <HAL_RCC_GetSysClockFreq+0x46>
 800394a:	e02d      	b.n	80039a8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800394c:	4b1d      	ldr	r3, [pc, #116]	; (80039c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800394e:	623b      	str	r3, [r7, #32]
      break;
 8003950:	e02d      	b.n	80039ae <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	0c9b      	lsrs	r3, r3, #18
 8003956:	f003 030f 	and.w	r3, r3, #15
 800395a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800395e:	4413      	add	r3, r2
 8003960:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003964:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d013      	beq.n	8003998 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003970:	4b13      	ldr	r3, [pc, #76]	; (80039c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	0c5b      	lsrs	r3, r3, #17
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800397e:	4413      	add	r3, r2
 8003980:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003984:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	4a0e      	ldr	r2, [pc, #56]	; (80039c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800398a:	fb02 f203 	mul.w	r2, r2, r3
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	fbb2 f3f3 	udiv	r3, r2, r3
 8003994:	627b      	str	r3, [r7, #36]	; 0x24
 8003996:	e004      	b.n	80039a2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	4a0b      	ldr	r2, [pc, #44]	; (80039c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800399c:	fb02 f303 	mul.w	r3, r2, r3
 80039a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80039a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a4:	623b      	str	r3, [r7, #32]
      break;
 80039a6:	e002      	b.n	80039ae <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80039a8:	4b06      	ldr	r3, [pc, #24]	; (80039c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039aa:	623b      	str	r3, [r7, #32]
      break;
 80039ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039ae:	6a3b      	ldr	r3, [r7, #32]
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3728      	adds	r7, #40	; 0x28
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bc90      	pop	{r4, r7}
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	08007a78 	.word	0x08007a78
 80039c0:	40021000 	.word	0x40021000
 80039c4:	007a1200 	.word	0x007a1200
 80039c8:	003d0900 	.word	0x003d0900

080039cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039cc:	b480      	push	{r7}
 80039ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039d0:	4b02      	ldr	r3, [pc, #8]	; (80039dc <HAL_RCC_GetHCLKFreq+0x10>)
 80039d2:	681b      	ldr	r3, [r3, #0]
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bc80      	pop	{r7}
 80039da:	4770      	bx	lr
 80039dc:	2000000c 	.word	0x2000000c

080039e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80039e4:	f7ff fff2 	bl	80039cc <HAL_RCC_GetHCLKFreq>
 80039e8:	4602      	mov	r2, r0
 80039ea:	4b05      	ldr	r3, [pc, #20]	; (8003a00 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	0a1b      	lsrs	r3, r3, #8
 80039f0:	f003 0307 	and.w	r3, r3, #7
 80039f4:	4903      	ldr	r1, [pc, #12]	; (8003a04 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039f6:	5ccb      	ldrb	r3, [r1, r3]
 80039f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	40021000 	.word	0x40021000
 8003a04:	08007a98 	.word	0x08007a98

08003a08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a0c:	f7ff ffde 	bl	80039cc <HAL_RCC_GetHCLKFreq>
 8003a10:	4602      	mov	r2, r0
 8003a12:	4b05      	ldr	r3, [pc, #20]	; (8003a28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	0adb      	lsrs	r3, r3, #11
 8003a18:	f003 0307 	and.w	r3, r3, #7
 8003a1c:	4903      	ldr	r1, [pc, #12]	; (8003a2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a1e:	5ccb      	ldrb	r3, [r1, r3]
 8003a20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	40021000 	.word	0x40021000
 8003a2c:	08007a98 	.word	0x08007a98

08003a30 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b085      	sub	sp, #20
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a38:	4b0a      	ldr	r3, [pc, #40]	; (8003a64 <RCC_Delay+0x34>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a0a      	ldr	r2, [pc, #40]	; (8003a68 <RCC_Delay+0x38>)
 8003a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a42:	0a5b      	lsrs	r3, r3, #9
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	fb02 f303 	mul.w	r3, r2, r3
 8003a4a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a4c:	bf00      	nop
  }
  while (Delay --);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	1e5a      	subs	r2, r3, #1
 8003a52:	60fa      	str	r2, [r7, #12]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d1f9      	bne.n	8003a4c <RCC_Delay+0x1c>
}
 8003a58:	bf00      	nop
 8003a5a:	bf00      	nop
 8003a5c:	3714      	adds	r7, #20
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bc80      	pop	{r7}
 8003a62:	4770      	bx	lr
 8003a64:	2000000c 	.word	0x2000000c
 8003a68:	10624dd3 	.word	0x10624dd3

08003a6c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b086      	sub	sp, #24
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003a74:	2300      	movs	r3, #0
 8003a76:	613b      	str	r3, [r7, #16]
 8003a78:	2300      	movs	r3, #0
 8003a7a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0301 	and.w	r3, r3, #1
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d07d      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a8c:	4b4f      	ldr	r3, [pc, #316]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a8e:	69db      	ldr	r3, [r3, #28]
 8003a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d10d      	bne.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a98:	4b4c      	ldr	r3, [pc, #304]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a9a:	69db      	ldr	r3, [r3, #28]
 8003a9c:	4a4b      	ldr	r2, [pc, #300]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aa2:	61d3      	str	r3, [r2, #28]
 8003aa4:	4b49      	ldr	r3, [pc, #292]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aa6:	69db      	ldr	r3, [r3, #28]
 8003aa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aac:	60bb      	str	r3, [r7, #8]
 8003aae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ab4:	4b46      	ldr	r3, [pc, #280]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d118      	bne.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ac0:	4b43      	ldr	r3, [pc, #268]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a42      	ldr	r2, [pc, #264]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ac6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003acc:	f7fe fe1a 	bl	8002704 <HAL_GetTick>
 8003ad0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ad2:	e008      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ad4:	f7fe fe16 	bl	8002704 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b64      	cmp	r3, #100	; 0x64
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e06d      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ae6:	4b3a      	ldr	r3, [pc, #232]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d0f0      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003af2:	4b36      	ldr	r3, [pc, #216]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003af4:	6a1b      	ldr	r3, [r3, #32]
 8003af6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003afa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d02e      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d027      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b10:	4b2e      	ldr	r3, [pc, #184]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b12:	6a1b      	ldr	r3, [r3, #32]
 8003b14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b18:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b1a:	4b2e      	ldr	r3, [pc, #184]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b20:	4b2c      	ldr	r3, [pc, #176]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b26:	4a29      	ldr	r2, [pc, #164]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d014      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b36:	f7fe fde5 	bl	8002704 <HAL_GetTick>
 8003b3a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b3c:	e00a      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b3e:	f7fe fde1 	bl	8002704 <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d901      	bls.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	e036      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b54:	4b1d      	ldr	r3, [pc, #116]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b56:	6a1b      	ldr	r3, [r3, #32]
 8003b58:	f003 0302 	and.w	r3, r3, #2
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d0ee      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b60:	4b1a      	ldr	r3, [pc, #104]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b62:	6a1b      	ldr	r3, [r3, #32]
 8003b64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	4917      	ldr	r1, [pc, #92]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b72:	7dfb      	ldrb	r3, [r7, #23]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d105      	bne.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b78:	4b14      	ldr	r3, [pc, #80]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b7a:	69db      	ldr	r3, [r3, #28]
 8003b7c:	4a13      	ldr	r2, [pc, #76]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b82:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0302 	and.w	r3, r3, #2
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d008      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b90:	4b0e      	ldr	r3, [pc, #56]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	490b      	ldr	r1, [pc, #44]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0310 	and.w	r3, r3, #16
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d008      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003bae:	4b07      	ldr	r3, [pc, #28]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	4904      	ldr	r1, [pc, #16]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3718      	adds	r7, #24
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	40021000 	.word	0x40021000
 8003bd0:	40007000 	.word	0x40007000
 8003bd4:	42420440 	.word	0x42420440

08003bd8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e03f      	b.n	8003c6a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d106      	bne.n	8003c04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f7fe fbb8 	bl	8002374 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2224      	movs	r2, #36	; 0x24
 8003c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68da      	ldr	r2, [r3, #12]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 fc85 	bl	800452c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	691a      	ldr	r2, [r3, #16]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	695a      	ldr	r2, [r3, #20]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68da      	ldr	r2, [r3, #12]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2220      	movs	r2, #32
 8003c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2220      	movs	r2, #32
 8003c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3708      	adds	r7, #8
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b08a      	sub	sp, #40	; 0x28
 8003c76:	af02      	add	r7, sp, #8
 8003c78:	60f8      	str	r0, [r7, #12]
 8003c7a:	60b9      	str	r1, [r7, #8]
 8003c7c:	603b      	str	r3, [r7, #0]
 8003c7e:	4613      	mov	r3, r2
 8003c80:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c82:	2300      	movs	r3, #0
 8003c84:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2b20      	cmp	r3, #32
 8003c90:	d17c      	bne.n	8003d8c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d002      	beq.n	8003c9e <HAL_UART_Transmit+0x2c>
 8003c98:	88fb      	ldrh	r3, [r7, #6]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d101      	bne.n	8003ca2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e075      	b.n	8003d8e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d101      	bne.n	8003cb0 <HAL_UART_Transmit+0x3e>
 8003cac:	2302      	movs	r3, #2
 8003cae:	e06e      	b.n	8003d8e <HAL_UART_Transmit+0x11c>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2221      	movs	r2, #33	; 0x21
 8003cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cc6:	f7fe fd1d 	bl	8002704 <HAL_GetTick>
 8003cca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	88fa      	ldrh	r2, [r7, #6]
 8003cd0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	88fa      	ldrh	r2, [r7, #6]
 8003cd6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ce0:	d108      	bne.n	8003cf4 <HAL_UART_Transmit+0x82>
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d104      	bne.n	8003cf4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003cea:	2300      	movs	r3, #0
 8003cec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	61bb      	str	r3, [r7, #24]
 8003cf2:	e003      	b.n	8003cfc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003d04:	e02a      	b.n	8003d5c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	9300      	str	r3, [sp, #0]
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	2180      	movs	r1, #128	; 0x80
 8003d10:	68f8      	ldr	r0, [r7, #12]
 8003d12:	f000 fa38 	bl	8004186 <UART_WaitOnFlagUntilTimeout>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d001      	beq.n	8003d20 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e036      	b.n	8003d8e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d10b      	bne.n	8003d3e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	881b      	ldrh	r3, [r3, #0]
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d34:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	3302      	adds	r3, #2
 8003d3a:	61bb      	str	r3, [r7, #24]
 8003d3c:	e007      	b.n	8003d4e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	781a      	ldrb	r2, [r3, #0]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	3b01      	subs	r3, #1
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1cf      	bne.n	8003d06 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	9300      	str	r3, [sp, #0]
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	2140      	movs	r1, #64	; 0x40
 8003d70:	68f8      	ldr	r0, [r7, #12]
 8003d72:	f000 fa08 	bl	8004186 <UART_WaitOnFlagUntilTimeout>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d001      	beq.n	8003d80 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e006      	b.n	8003d8e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2220      	movs	r2, #32
 8003d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	e000      	b.n	8003d8e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003d8c:	2302      	movs	r3, #2
  }
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3720      	adds	r7, #32
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d96:	b580      	push	{r7, lr}
 8003d98:	b084      	sub	sp, #16
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	60f8      	str	r0, [r7, #12]
 8003d9e:	60b9      	str	r1, [r7, #8]
 8003da0:	4613      	mov	r3, r2
 8003da2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	2b20      	cmp	r3, #32
 8003dae:	d11d      	bne.n	8003dec <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d002      	beq.n	8003dbc <HAL_UART_Receive_IT+0x26>
 8003db6:	88fb      	ldrh	r3, [r7, #6]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d101      	bne.n	8003dc0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e016      	b.n	8003dee <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d101      	bne.n	8003dce <HAL_UART_Receive_IT+0x38>
 8003dca:	2302      	movs	r3, #2
 8003dcc:	e00f      	b.n	8003dee <HAL_UART_Receive_IT+0x58>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003ddc:	88fb      	ldrh	r3, [r7, #6]
 8003dde:	461a      	mov	r2, r3
 8003de0:	68b9      	ldr	r1, [r7, #8]
 8003de2:	68f8      	ldr	r0, [r7, #12]
 8003de4:	f000 fa19 	bl	800421a <UART_Start_Receive_IT>
 8003de8:	4603      	mov	r3, r0
 8003dea:	e000      	b.n	8003dee <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003dec:	2302      	movs	r3, #2
  }
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3710      	adds	r7, #16
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
	...

08003df8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b08a      	sub	sp, #40	; 0x28
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e22:	f003 030f 	and.w	r3, r3, #15
 8003e26:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d10d      	bne.n	8003e4a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e30:	f003 0320 	and.w	r3, r3, #32
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d008      	beq.n	8003e4a <HAL_UART_IRQHandler+0x52>
 8003e38:	6a3b      	ldr	r3, [r7, #32]
 8003e3a:	f003 0320 	and.w	r3, r3, #32
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d003      	beq.n	8003e4a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f000 fac9 	bl	80043da <UART_Receive_IT>
      return;
 8003e48:	e17b      	b.n	8004142 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f000 80b1 	beq.w	8003fb4 <HAL_UART_IRQHandler+0x1bc>
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	f003 0301 	and.w	r3, r3, #1
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d105      	bne.n	8003e68 <HAL_UART_IRQHandler+0x70>
 8003e5c:	6a3b      	ldr	r3, [r7, #32]
 8003e5e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	f000 80a6 	beq.w	8003fb4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00a      	beq.n	8003e88 <HAL_UART_IRQHandler+0x90>
 8003e72:	6a3b      	ldr	r3, [r7, #32]
 8003e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d005      	beq.n	8003e88 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e80:	f043 0201 	orr.w	r2, r3, #1
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8a:	f003 0304 	and.w	r3, r3, #4
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00a      	beq.n	8003ea8 <HAL_UART_IRQHandler+0xb0>
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d005      	beq.n	8003ea8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea0:	f043 0202 	orr.w	r2, r3, #2
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00a      	beq.n	8003ec8 <HAL_UART_IRQHandler+0xd0>
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	f003 0301 	and.w	r3, r3, #1
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d005      	beq.n	8003ec8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec0:	f043 0204 	orr.w	r2, r3, #4
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eca:	f003 0308 	and.w	r3, r3, #8
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00f      	beq.n	8003ef2 <HAL_UART_IRQHandler+0xfa>
 8003ed2:	6a3b      	ldr	r3, [r7, #32]
 8003ed4:	f003 0320 	and.w	r3, r3, #32
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d104      	bne.n	8003ee6 <HAL_UART_IRQHandler+0xee>
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d005      	beq.n	8003ef2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eea:	f043 0208 	orr.w	r2, r3, #8
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	f000 811e 	beq.w	8004138 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efe:	f003 0320 	and.w	r3, r3, #32
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d007      	beq.n	8003f16 <HAL_UART_IRQHandler+0x11e>
 8003f06:	6a3b      	ldr	r3, [r7, #32]
 8003f08:	f003 0320 	and.w	r3, r3, #32
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d002      	beq.n	8003f16 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f000 fa62 	bl	80043da <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	695b      	ldr	r3, [r3, #20]
 8003f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	bf14      	ite	ne
 8003f24:	2301      	movne	r3, #1
 8003f26:	2300      	moveq	r3, #0
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f30:	f003 0308 	and.w	r3, r3, #8
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d102      	bne.n	8003f3e <HAL_UART_IRQHandler+0x146>
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d031      	beq.n	8003fa2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 f9a4 	bl	800428c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d023      	beq.n	8003f9a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	695a      	ldr	r2, [r3, #20]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f60:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d013      	beq.n	8003f92 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f6e:	4a76      	ldr	r2, [pc, #472]	; (8004148 <HAL_UART_IRQHandler+0x350>)
 8003f70:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7fe ff4c 	bl	8002e14 <HAL_DMA_Abort_IT>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d016      	beq.n	8003fb0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f8c:	4610      	mov	r0, r2
 8003f8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f90:	e00e      	b.n	8003fb0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 f8e3 	bl	800415e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f98:	e00a      	b.n	8003fb0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 f8df 	bl	800415e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fa0:	e006      	b.n	8003fb0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 f8db 	bl	800415e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003fae:	e0c3      	b.n	8004138 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fb0:	bf00      	nop
    return;
 8003fb2:	e0c1      	b.n	8004138 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	f040 80a1 	bne.w	8004100 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc0:	f003 0310 	and.w	r3, r3, #16
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f000 809b 	beq.w	8004100 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003fca:	6a3b      	ldr	r3, [r7, #32]
 8003fcc:	f003 0310 	and.w	r3, r3, #16
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	f000 8095 	beq.w	8004100 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	60fb      	str	r3, [r7, #12]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	60fb      	str	r3, [r7, #12]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	60fb      	str	r3, [r7, #12]
 8003fea:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d04e      	beq.n	8004098 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004004:	8a3b      	ldrh	r3, [r7, #16]
 8004006:	2b00      	cmp	r3, #0
 8004008:	f000 8098 	beq.w	800413c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004010:	8a3a      	ldrh	r2, [r7, #16]
 8004012:	429a      	cmp	r2, r3
 8004014:	f080 8092 	bcs.w	800413c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	8a3a      	ldrh	r2, [r7, #16]
 800401c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004022:	699b      	ldr	r3, [r3, #24]
 8004024:	2b20      	cmp	r3, #32
 8004026:	d02b      	beq.n	8004080 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68da      	ldr	r2, [r3, #12]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004036:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	695a      	ldr	r2, [r3, #20]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f022 0201 	bic.w	r2, r2, #1
 8004046:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	695a      	ldr	r2, [r3, #20]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004056:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2220      	movs	r2, #32
 800405c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68da      	ldr	r2, [r3, #12]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f022 0210 	bic.w	r2, r2, #16
 8004074:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407a:	4618      	mov	r0, r3
 800407c:	f7fe fe8f 	bl	8002d9e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004088:	b29b      	uxth	r3, r3
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	b29b      	uxth	r3, r3
 800408e:	4619      	mov	r1, r3
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f000 f86d 	bl	8004170 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004096:	e051      	b.n	800413c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d047      	beq.n	8004140 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80040b0:	8a7b      	ldrh	r3, [r7, #18]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d044      	beq.n	8004140 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68da      	ldr	r2, [r3, #12]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80040c4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	695a      	ldr	r2, [r3, #20]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f022 0201 	bic.w	r2, r2, #1
 80040d4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2220      	movs	r2, #32
 80040da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	68da      	ldr	r2, [r3, #12]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f022 0210 	bic.w	r2, r2, #16
 80040f2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80040f4:	8a7b      	ldrh	r3, [r7, #18]
 80040f6:	4619      	mov	r1, r3
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f000 f839 	bl	8004170 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80040fe:	e01f      	b.n	8004140 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004106:	2b00      	cmp	r3, #0
 8004108:	d008      	beq.n	800411c <HAL_UART_IRQHandler+0x324>
 800410a:	6a3b      	ldr	r3, [r7, #32]
 800410c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004110:	2b00      	cmp	r3, #0
 8004112:	d003      	beq.n	800411c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 f8f9 	bl	800430c <UART_Transmit_IT>
    return;
 800411a:	e012      	b.n	8004142 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800411c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004122:	2b00      	cmp	r3, #0
 8004124:	d00d      	beq.n	8004142 <HAL_UART_IRQHandler+0x34a>
 8004126:	6a3b      	ldr	r3, [r7, #32]
 8004128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800412c:	2b00      	cmp	r3, #0
 800412e:	d008      	beq.n	8004142 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f000 f93a 	bl	80043aa <UART_EndTransmit_IT>
    return;
 8004136:	e004      	b.n	8004142 <HAL_UART_IRQHandler+0x34a>
    return;
 8004138:	bf00      	nop
 800413a:	e002      	b.n	8004142 <HAL_UART_IRQHandler+0x34a>
      return;
 800413c:	bf00      	nop
 800413e:	e000      	b.n	8004142 <HAL_UART_IRQHandler+0x34a>
      return;
 8004140:	bf00      	nop
  }
}
 8004142:	3728      	adds	r7, #40	; 0x28
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	080042e5 	.word	0x080042e5

0800414c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004154:	bf00      	nop
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	bc80      	pop	{r7}
 800415c:	4770      	bx	lr

0800415e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800415e:	b480      	push	{r7}
 8004160:	b083      	sub	sp, #12
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004166:	bf00      	nop
 8004168:	370c      	adds	r7, #12
 800416a:	46bd      	mov	sp, r7
 800416c:	bc80      	pop	{r7}
 800416e:	4770      	bx	lr

08004170 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	460b      	mov	r3, r1
 800417a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800417c:	bf00      	nop
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	bc80      	pop	{r7}
 8004184:	4770      	bx	lr

08004186 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004186:	b580      	push	{r7, lr}
 8004188:	b084      	sub	sp, #16
 800418a:	af00      	add	r7, sp, #0
 800418c:	60f8      	str	r0, [r7, #12]
 800418e:	60b9      	str	r1, [r7, #8]
 8004190:	603b      	str	r3, [r7, #0]
 8004192:	4613      	mov	r3, r2
 8004194:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004196:	e02c      	b.n	80041f2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800419e:	d028      	beq.n	80041f2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d007      	beq.n	80041b6 <UART_WaitOnFlagUntilTimeout+0x30>
 80041a6:	f7fe faad 	bl	8002704 <HAL_GetTick>
 80041aa:	4602      	mov	r2, r0
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	69ba      	ldr	r2, [r7, #24]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d21d      	bcs.n	80041f2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68da      	ldr	r2, [r3, #12]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80041c4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	695a      	ldr	r2, [r3, #20]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f022 0201 	bic.w	r2, r2, #1
 80041d4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2220      	movs	r2, #32
 80041da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2220      	movs	r2, #32
 80041e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e00f      	b.n	8004212 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	4013      	ands	r3, r2
 80041fc:	68ba      	ldr	r2, [r7, #8]
 80041fe:	429a      	cmp	r2, r3
 8004200:	bf0c      	ite	eq
 8004202:	2301      	moveq	r3, #1
 8004204:	2300      	movne	r3, #0
 8004206:	b2db      	uxtb	r3, r3
 8004208:	461a      	mov	r2, r3
 800420a:	79fb      	ldrb	r3, [r7, #7]
 800420c:	429a      	cmp	r2, r3
 800420e:	d0c3      	beq.n	8004198 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	3710      	adds	r7, #16
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}

0800421a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800421a:	b480      	push	{r7}
 800421c:	b085      	sub	sp, #20
 800421e:	af00      	add	r7, sp, #0
 8004220:	60f8      	str	r0, [r7, #12]
 8004222:	60b9      	str	r1, [r7, #8]
 8004224:	4613      	mov	r3, r2
 8004226:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	68ba      	ldr	r2, [r7, #8]
 800422c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	88fa      	ldrh	r2, [r7, #6]
 8004232:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	88fa      	ldrh	r2, [r7, #6]
 8004238:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2200      	movs	r2, #0
 800423e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2222      	movs	r2, #34	; 0x22
 8004244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	68da      	ldr	r2, [r3, #12]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800425e:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	695a      	ldr	r2, [r3, #20]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f042 0201 	orr.w	r2, r2, #1
 800426e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68da      	ldr	r2, [r3, #12]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f042 0220 	orr.w	r2, r2, #32
 800427e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3714      	adds	r7, #20
 8004286:	46bd      	mov	sp, r7
 8004288:	bc80      	pop	{r7}
 800428a:	4770      	bx	lr

0800428c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68da      	ldr	r2, [r3, #12]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80042a2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	695a      	ldr	r2, [r3, #20]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f022 0201 	bic.w	r2, r2, #1
 80042b2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d107      	bne.n	80042cc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68da      	ldr	r2, [r3, #12]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f022 0210 	bic.w	r2, r2, #16
 80042ca:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2220      	movs	r2, #32
 80042d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80042da:	bf00      	nop
 80042dc:	370c      	adds	r7, #12
 80042de:	46bd      	mov	sp, r7
 80042e0:	bc80      	pop	{r7}
 80042e2:	4770      	bx	lr

080042e4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2200      	movs	r2, #0
 80042f6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2200      	movs	r2, #0
 80042fc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042fe:	68f8      	ldr	r0, [r7, #12]
 8004300:	f7ff ff2d 	bl	800415e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004304:	bf00      	nop
 8004306:	3710      	adds	r7, #16
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800430c:	b480      	push	{r7}
 800430e:	b085      	sub	sp, #20
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800431a:	b2db      	uxtb	r3, r3
 800431c:	2b21      	cmp	r3, #33	; 0x21
 800431e:	d13e      	bne.n	800439e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004328:	d114      	bne.n	8004354 <UART_Transmit_IT+0x48>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d110      	bne.n	8004354 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	881b      	ldrh	r3, [r3, #0]
 800433c:	461a      	mov	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004346:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	1c9a      	adds	r2, r3, #2
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	621a      	str	r2, [r3, #32]
 8004352:	e008      	b.n	8004366 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a1b      	ldr	r3, [r3, #32]
 8004358:	1c59      	adds	r1, r3, #1
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	6211      	str	r1, [r2, #32]
 800435e:	781a      	ldrb	r2, [r3, #0]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800436a:	b29b      	uxth	r3, r3
 800436c:	3b01      	subs	r3, #1
 800436e:	b29b      	uxth	r3, r3
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	4619      	mov	r1, r3
 8004374:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004376:	2b00      	cmp	r3, #0
 8004378:	d10f      	bne.n	800439a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68da      	ldr	r2, [r3, #12]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004388:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68da      	ldr	r2, [r3, #12]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004398:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800439a:	2300      	movs	r3, #0
 800439c:	e000      	b.n	80043a0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800439e:	2302      	movs	r3, #2
  }
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3714      	adds	r7, #20
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bc80      	pop	{r7}
 80043a8:	4770      	bx	lr

080043aa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80043aa:	b580      	push	{r7, lr}
 80043ac:	b082      	sub	sp, #8
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	68da      	ldr	r2, [r3, #12]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043c0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2220      	movs	r2, #32
 80043c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f7ff febe 	bl	800414c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3708      	adds	r7, #8
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}

080043da <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80043da:	b580      	push	{r7, lr}
 80043dc:	b086      	sub	sp, #24
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	2b22      	cmp	r3, #34	; 0x22
 80043ec:	f040 8099 	bne.w	8004522 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043f8:	d117      	bne.n	800442a <UART_Receive_IT+0x50>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d113      	bne.n	800442a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004402:	2300      	movs	r3, #0
 8004404:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800440a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	b29b      	uxth	r3, r3
 8004414:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004418:	b29a      	uxth	r2, r3
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004422:	1c9a      	adds	r2, r3, #2
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	629a      	str	r2, [r3, #40]	; 0x28
 8004428:	e026      	b.n	8004478 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800442e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004430:	2300      	movs	r3, #0
 8004432:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800443c:	d007      	beq.n	800444e <UART_Receive_IT+0x74>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d10a      	bne.n	800445c <UART_Receive_IT+0x82>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d106      	bne.n	800445c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	b2da      	uxtb	r2, r3
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	701a      	strb	r2, [r3, #0]
 800445a:	e008      	b.n	800446e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	b2db      	uxtb	r3, r3
 8004464:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004468:	b2da      	uxtb	r2, r3
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004472:	1c5a      	adds	r2, r3, #1
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800447c:	b29b      	uxth	r3, r3
 800447e:	3b01      	subs	r3, #1
 8004480:	b29b      	uxth	r3, r3
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	4619      	mov	r1, r3
 8004486:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004488:	2b00      	cmp	r3, #0
 800448a:	d148      	bne.n	800451e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68da      	ldr	r2, [r3, #12]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f022 0220 	bic.w	r2, r2, #32
 800449a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68da      	ldr	r2, [r3, #12]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	695a      	ldr	r2, [r3, #20]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f022 0201 	bic.w	r2, r2, #1
 80044ba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2220      	movs	r2, #32
 80044c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d123      	bne.n	8004514 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68da      	ldr	r2, [r3, #12]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f022 0210 	bic.w	r2, r2, #16
 80044e0:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0310 	and.w	r3, r3, #16
 80044ec:	2b10      	cmp	r3, #16
 80044ee:	d10a      	bne.n	8004506 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044f0:	2300      	movs	r3, #0
 80044f2:	60fb      	str	r3, [r7, #12]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	60fb      	str	r3, [r7, #12]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	60fb      	str	r3, [r7, #12]
 8004504:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800450a:	4619      	mov	r1, r3
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f7ff fe2f 	bl	8004170 <HAL_UARTEx_RxEventCallback>
 8004512:	e002      	b.n	800451a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f7fd fd2d 	bl	8001f74 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800451a:	2300      	movs	r3, #0
 800451c:	e002      	b.n	8004524 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800451e:	2300      	movs	r3, #0
 8004520:	e000      	b.n	8004524 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004522:	2302      	movs	r3, #2
  }
}
 8004524:	4618      	mov	r0, r3
 8004526:	3718      	adds	r7, #24
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	68da      	ldr	r2, [r3, #12]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	430a      	orrs	r2, r1
 8004548:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	689a      	ldr	r2, [r3, #8]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	431a      	orrs	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	695b      	ldr	r3, [r3, #20]
 8004558:	4313      	orrs	r3, r2
 800455a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004566:	f023 030c 	bic.w	r3, r3, #12
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	6812      	ldr	r2, [r2, #0]
 800456e:	68b9      	ldr	r1, [r7, #8]
 8004570:	430b      	orrs	r3, r1
 8004572:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	695b      	ldr	r3, [r3, #20]
 800457a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	699a      	ldr	r2, [r3, #24]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	430a      	orrs	r2, r1
 8004588:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a2c      	ldr	r2, [pc, #176]	; (8004640 <UART_SetConfig+0x114>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d103      	bne.n	800459c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004594:	f7ff fa38 	bl	8003a08 <HAL_RCC_GetPCLK2Freq>
 8004598:	60f8      	str	r0, [r7, #12]
 800459a:	e002      	b.n	80045a2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800459c:	f7ff fa20 	bl	80039e0 <HAL_RCC_GetPCLK1Freq>
 80045a0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	4613      	mov	r3, r2
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	4413      	add	r3, r2
 80045aa:	009a      	lsls	r2, r3, #2
 80045ac:	441a      	add	r2, r3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045b8:	4a22      	ldr	r2, [pc, #136]	; (8004644 <UART_SetConfig+0x118>)
 80045ba:	fba2 2303 	umull	r2, r3, r2, r3
 80045be:	095b      	lsrs	r3, r3, #5
 80045c0:	0119      	lsls	r1, r3, #4
 80045c2:	68fa      	ldr	r2, [r7, #12]
 80045c4:	4613      	mov	r3, r2
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	4413      	add	r3, r2
 80045ca:	009a      	lsls	r2, r3, #2
 80045cc:	441a      	add	r2, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80045d8:	4b1a      	ldr	r3, [pc, #104]	; (8004644 <UART_SetConfig+0x118>)
 80045da:	fba3 0302 	umull	r0, r3, r3, r2
 80045de:	095b      	lsrs	r3, r3, #5
 80045e0:	2064      	movs	r0, #100	; 0x64
 80045e2:	fb00 f303 	mul.w	r3, r0, r3
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	011b      	lsls	r3, r3, #4
 80045ea:	3332      	adds	r3, #50	; 0x32
 80045ec:	4a15      	ldr	r2, [pc, #84]	; (8004644 <UART_SetConfig+0x118>)
 80045ee:	fba2 2303 	umull	r2, r3, r2, r3
 80045f2:	095b      	lsrs	r3, r3, #5
 80045f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045f8:	4419      	add	r1, r3
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	4613      	mov	r3, r2
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	4413      	add	r3, r2
 8004602:	009a      	lsls	r2, r3, #2
 8004604:	441a      	add	r2, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004610:	4b0c      	ldr	r3, [pc, #48]	; (8004644 <UART_SetConfig+0x118>)
 8004612:	fba3 0302 	umull	r0, r3, r3, r2
 8004616:	095b      	lsrs	r3, r3, #5
 8004618:	2064      	movs	r0, #100	; 0x64
 800461a:	fb00 f303 	mul.w	r3, r0, r3
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	011b      	lsls	r3, r3, #4
 8004622:	3332      	adds	r3, #50	; 0x32
 8004624:	4a07      	ldr	r2, [pc, #28]	; (8004644 <UART_SetConfig+0x118>)
 8004626:	fba2 2303 	umull	r2, r3, r2, r3
 800462a:	095b      	lsrs	r3, r3, #5
 800462c:	f003 020f 	and.w	r2, r3, #15
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	440a      	add	r2, r1
 8004636:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004638:	bf00      	nop
 800463a:	3710      	adds	r7, #16
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}
 8004640:	40013800 	.word	0x40013800
 8004644:	51eb851f 	.word	0x51eb851f

08004648 <atoi>:
 8004648:	220a      	movs	r2, #10
 800464a:	2100      	movs	r1, #0
 800464c:	f001 b8d6 	b.w	80057fc <strtol>

08004650 <__errno>:
 8004650:	4b01      	ldr	r3, [pc, #4]	; (8004658 <__errno+0x8>)
 8004652:	6818      	ldr	r0, [r3, #0]
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
 8004658:	20000018 	.word	0x20000018

0800465c <__libc_init_array>:
 800465c:	b570      	push	{r4, r5, r6, lr}
 800465e:	2600      	movs	r6, #0
 8004660:	4d0c      	ldr	r5, [pc, #48]	; (8004694 <__libc_init_array+0x38>)
 8004662:	4c0d      	ldr	r4, [pc, #52]	; (8004698 <__libc_init_array+0x3c>)
 8004664:	1b64      	subs	r4, r4, r5
 8004666:	10a4      	asrs	r4, r4, #2
 8004668:	42a6      	cmp	r6, r4
 800466a:	d109      	bne.n	8004680 <__libc_init_array+0x24>
 800466c:	f003 f992 	bl	8007994 <_init>
 8004670:	2600      	movs	r6, #0
 8004672:	4d0a      	ldr	r5, [pc, #40]	; (800469c <__libc_init_array+0x40>)
 8004674:	4c0a      	ldr	r4, [pc, #40]	; (80046a0 <__libc_init_array+0x44>)
 8004676:	1b64      	subs	r4, r4, r5
 8004678:	10a4      	asrs	r4, r4, #2
 800467a:	42a6      	cmp	r6, r4
 800467c:	d105      	bne.n	800468a <__libc_init_array+0x2e>
 800467e:	bd70      	pop	{r4, r5, r6, pc}
 8004680:	f855 3b04 	ldr.w	r3, [r5], #4
 8004684:	4798      	blx	r3
 8004686:	3601      	adds	r6, #1
 8004688:	e7ee      	b.n	8004668 <__libc_init_array+0xc>
 800468a:	f855 3b04 	ldr.w	r3, [r5], #4
 800468e:	4798      	blx	r3
 8004690:	3601      	adds	r6, #1
 8004692:	e7f2      	b.n	800467a <__libc_init_array+0x1e>
 8004694:	08007edc 	.word	0x08007edc
 8004698:	08007edc 	.word	0x08007edc
 800469c:	08007edc 	.word	0x08007edc
 80046a0:	08007ee0 	.word	0x08007ee0

080046a4 <malloc>:
 80046a4:	4b02      	ldr	r3, [pc, #8]	; (80046b0 <malloc+0xc>)
 80046a6:	4601      	mov	r1, r0
 80046a8:	6818      	ldr	r0, [r3, #0]
 80046aa:	f000 b86d 	b.w	8004788 <_malloc_r>
 80046ae:	bf00      	nop
 80046b0:	20000018 	.word	0x20000018

080046b4 <free>:
 80046b4:	4b02      	ldr	r3, [pc, #8]	; (80046c0 <free+0xc>)
 80046b6:	4601      	mov	r1, r0
 80046b8:	6818      	ldr	r0, [r3, #0]
 80046ba:	f000 b819 	b.w	80046f0 <_free_r>
 80046be:	bf00      	nop
 80046c0:	20000018 	.word	0x20000018

080046c4 <memcpy>:
 80046c4:	440a      	add	r2, r1
 80046c6:	4291      	cmp	r1, r2
 80046c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80046cc:	d100      	bne.n	80046d0 <memcpy+0xc>
 80046ce:	4770      	bx	lr
 80046d0:	b510      	push	{r4, lr}
 80046d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046d6:	4291      	cmp	r1, r2
 80046d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046dc:	d1f9      	bne.n	80046d2 <memcpy+0xe>
 80046de:	bd10      	pop	{r4, pc}

080046e0 <memset>:
 80046e0:	4603      	mov	r3, r0
 80046e2:	4402      	add	r2, r0
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d100      	bne.n	80046ea <memset+0xa>
 80046e8:	4770      	bx	lr
 80046ea:	f803 1b01 	strb.w	r1, [r3], #1
 80046ee:	e7f9      	b.n	80046e4 <memset+0x4>

080046f0 <_free_r>:
 80046f0:	b538      	push	{r3, r4, r5, lr}
 80046f2:	4605      	mov	r5, r0
 80046f4:	2900      	cmp	r1, #0
 80046f6:	d043      	beq.n	8004780 <_free_r+0x90>
 80046f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046fc:	1f0c      	subs	r4, r1, #4
 80046fe:	2b00      	cmp	r3, #0
 8004700:	bfb8      	it	lt
 8004702:	18e4      	addlt	r4, r4, r3
 8004704:	f001 ff10 	bl	8006528 <__malloc_lock>
 8004708:	4a1e      	ldr	r2, [pc, #120]	; (8004784 <_free_r+0x94>)
 800470a:	6813      	ldr	r3, [r2, #0]
 800470c:	4610      	mov	r0, r2
 800470e:	b933      	cbnz	r3, 800471e <_free_r+0x2e>
 8004710:	6063      	str	r3, [r4, #4]
 8004712:	6014      	str	r4, [r2, #0]
 8004714:	4628      	mov	r0, r5
 8004716:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800471a:	f001 bf0b 	b.w	8006534 <__malloc_unlock>
 800471e:	42a3      	cmp	r3, r4
 8004720:	d90a      	bls.n	8004738 <_free_r+0x48>
 8004722:	6821      	ldr	r1, [r4, #0]
 8004724:	1862      	adds	r2, r4, r1
 8004726:	4293      	cmp	r3, r2
 8004728:	bf01      	itttt	eq
 800472a:	681a      	ldreq	r2, [r3, #0]
 800472c:	685b      	ldreq	r3, [r3, #4]
 800472e:	1852      	addeq	r2, r2, r1
 8004730:	6022      	streq	r2, [r4, #0]
 8004732:	6063      	str	r3, [r4, #4]
 8004734:	6004      	str	r4, [r0, #0]
 8004736:	e7ed      	b.n	8004714 <_free_r+0x24>
 8004738:	461a      	mov	r2, r3
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	b10b      	cbz	r3, 8004742 <_free_r+0x52>
 800473e:	42a3      	cmp	r3, r4
 8004740:	d9fa      	bls.n	8004738 <_free_r+0x48>
 8004742:	6811      	ldr	r1, [r2, #0]
 8004744:	1850      	adds	r0, r2, r1
 8004746:	42a0      	cmp	r0, r4
 8004748:	d10b      	bne.n	8004762 <_free_r+0x72>
 800474a:	6820      	ldr	r0, [r4, #0]
 800474c:	4401      	add	r1, r0
 800474e:	1850      	adds	r0, r2, r1
 8004750:	4283      	cmp	r3, r0
 8004752:	6011      	str	r1, [r2, #0]
 8004754:	d1de      	bne.n	8004714 <_free_r+0x24>
 8004756:	6818      	ldr	r0, [r3, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	4401      	add	r1, r0
 800475c:	6011      	str	r1, [r2, #0]
 800475e:	6053      	str	r3, [r2, #4]
 8004760:	e7d8      	b.n	8004714 <_free_r+0x24>
 8004762:	d902      	bls.n	800476a <_free_r+0x7a>
 8004764:	230c      	movs	r3, #12
 8004766:	602b      	str	r3, [r5, #0]
 8004768:	e7d4      	b.n	8004714 <_free_r+0x24>
 800476a:	6820      	ldr	r0, [r4, #0]
 800476c:	1821      	adds	r1, r4, r0
 800476e:	428b      	cmp	r3, r1
 8004770:	bf01      	itttt	eq
 8004772:	6819      	ldreq	r1, [r3, #0]
 8004774:	685b      	ldreq	r3, [r3, #4]
 8004776:	1809      	addeq	r1, r1, r0
 8004778:	6021      	streq	r1, [r4, #0]
 800477a:	6063      	str	r3, [r4, #4]
 800477c:	6054      	str	r4, [r2, #4]
 800477e:	e7c9      	b.n	8004714 <_free_r+0x24>
 8004780:	bd38      	pop	{r3, r4, r5, pc}
 8004782:	bf00      	nop
 8004784:	20000228 	.word	0x20000228

08004788 <_malloc_r>:
 8004788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800478a:	1ccd      	adds	r5, r1, #3
 800478c:	f025 0503 	bic.w	r5, r5, #3
 8004790:	3508      	adds	r5, #8
 8004792:	2d0c      	cmp	r5, #12
 8004794:	bf38      	it	cc
 8004796:	250c      	movcc	r5, #12
 8004798:	2d00      	cmp	r5, #0
 800479a:	4606      	mov	r6, r0
 800479c:	db01      	blt.n	80047a2 <_malloc_r+0x1a>
 800479e:	42a9      	cmp	r1, r5
 80047a0:	d903      	bls.n	80047aa <_malloc_r+0x22>
 80047a2:	230c      	movs	r3, #12
 80047a4:	6033      	str	r3, [r6, #0]
 80047a6:	2000      	movs	r0, #0
 80047a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047aa:	f001 febd 	bl	8006528 <__malloc_lock>
 80047ae:	4921      	ldr	r1, [pc, #132]	; (8004834 <_malloc_r+0xac>)
 80047b0:	680a      	ldr	r2, [r1, #0]
 80047b2:	4614      	mov	r4, r2
 80047b4:	b99c      	cbnz	r4, 80047de <_malloc_r+0x56>
 80047b6:	4f20      	ldr	r7, [pc, #128]	; (8004838 <_malloc_r+0xb0>)
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	b923      	cbnz	r3, 80047c6 <_malloc_r+0x3e>
 80047bc:	4621      	mov	r1, r4
 80047be:	4630      	mov	r0, r6
 80047c0:	f000 f8d2 	bl	8004968 <_sbrk_r>
 80047c4:	6038      	str	r0, [r7, #0]
 80047c6:	4629      	mov	r1, r5
 80047c8:	4630      	mov	r0, r6
 80047ca:	f000 f8cd 	bl	8004968 <_sbrk_r>
 80047ce:	1c43      	adds	r3, r0, #1
 80047d0:	d123      	bne.n	800481a <_malloc_r+0x92>
 80047d2:	230c      	movs	r3, #12
 80047d4:	4630      	mov	r0, r6
 80047d6:	6033      	str	r3, [r6, #0]
 80047d8:	f001 feac 	bl	8006534 <__malloc_unlock>
 80047dc:	e7e3      	b.n	80047a6 <_malloc_r+0x1e>
 80047de:	6823      	ldr	r3, [r4, #0]
 80047e0:	1b5b      	subs	r3, r3, r5
 80047e2:	d417      	bmi.n	8004814 <_malloc_r+0x8c>
 80047e4:	2b0b      	cmp	r3, #11
 80047e6:	d903      	bls.n	80047f0 <_malloc_r+0x68>
 80047e8:	6023      	str	r3, [r4, #0]
 80047ea:	441c      	add	r4, r3
 80047ec:	6025      	str	r5, [r4, #0]
 80047ee:	e004      	b.n	80047fa <_malloc_r+0x72>
 80047f0:	6863      	ldr	r3, [r4, #4]
 80047f2:	42a2      	cmp	r2, r4
 80047f4:	bf0c      	ite	eq
 80047f6:	600b      	streq	r3, [r1, #0]
 80047f8:	6053      	strne	r3, [r2, #4]
 80047fa:	4630      	mov	r0, r6
 80047fc:	f001 fe9a 	bl	8006534 <__malloc_unlock>
 8004800:	f104 000b 	add.w	r0, r4, #11
 8004804:	1d23      	adds	r3, r4, #4
 8004806:	f020 0007 	bic.w	r0, r0, #7
 800480a:	1ac2      	subs	r2, r0, r3
 800480c:	d0cc      	beq.n	80047a8 <_malloc_r+0x20>
 800480e:	1a1b      	subs	r3, r3, r0
 8004810:	50a3      	str	r3, [r4, r2]
 8004812:	e7c9      	b.n	80047a8 <_malloc_r+0x20>
 8004814:	4622      	mov	r2, r4
 8004816:	6864      	ldr	r4, [r4, #4]
 8004818:	e7cc      	b.n	80047b4 <_malloc_r+0x2c>
 800481a:	1cc4      	adds	r4, r0, #3
 800481c:	f024 0403 	bic.w	r4, r4, #3
 8004820:	42a0      	cmp	r0, r4
 8004822:	d0e3      	beq.n	80047ec <_malloc_r+0x64>
 8004824:	1a21      	subs	r1, r4, r0
 8004826:	4630      	mov	r0, r6
 8004828:	f000 f89e 	bl	8004968 <_sbrk_r>
 800482c:	3001      	adds	r0, #1
 800482e:	d1dd      	bne.n	80047ec <_malloc_r+0x64>
 8004830:	e7cf      	b.n	80047d2 <_malloc_r+0x4a>
 8004832:	bf00      	nop
 8004834:	20000228 	.word	0x20000228
 8004838:	2000022c 	.word	0x2000022c

0800483c <iprintf>:
 800483c:	b40f      	push	{r0, r1, r2, r3}
 800483e:	4b0a      	ldr	r3, [pc, #40]	; (8004868 <iprintf+0x2c>)
 8004840:	b513      	push	{r0, r1, r4, lr}
 8004842:	681c      	ldr	r4, [r3, #0]
 8004844:	b124      	cbz	r4, 8004850 <iprintf+0x14>
 8004846:	69a3      	ldr	r3, [r4, #24]
 8004848:	b913      	cbnz	r3, 8004850 <iprintf+0x14>
 800484a:	4620      	mov	r0, r4
 800484c:	f001 f9dc 	bl	8005c08 <__sinit>
 8004850:	ab05      	add	r3, sp, #20
 8004852:	4620      	mov	r0, r4
 8004854:	9a04      	ldr	r2, [sp, #16]
 8004856:	68a1      	ldr	r1, [r4, #8]
 8004858:	9301      	str	r3, [sp, #4]
 800485a:	f002 fce1 	bl	8007220 <_vfiprintf_r>
 800485e:	b002      	add	sp, #8
 8004860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004864:	b004      	add	sp, #16
 8004866:	4770      	bx	lr
 8004868:	20000018 	.word	0x20000018

0800486c <_puts_r>:
 800486c:	b570      	push	{r4, r5, r6, lr}
 800486e:	460e      	mov	r6, r1
 8004870:	4605      	mov	r5, r0
 8004872:	b118      	cbz	r0, 800487c <_puts_r+0x10>
 8004874:	6983      	ldr	r3, [r0, #24]
 8004876:	b90b      	cbnz	r3, 800487c <_puts_r+0x10>
 8004878:	f001 f9c6 	bl	8005c08 <__sinit>
 800487c:	69ab      	ldr	r3, [r5, #24]
 800487e:	68ac      	ldr	r4, [r5, #8]
 8004880:	b913      	cbnz	r3, 8004888 <_puts_r+0x1c>
 8004882:	4628      	mov	r0, r5
 8004884:	f001 f9c0 	bl	8005c08 <__sinit>
 8004888:	4b2c      	ldr	r3, [pc, #176]	; (800493c <_puts_r+0xd0>)
 800488a:	429c      	cmp	r4, r3
 800488c:	d120      	bne.n	80048d0 <_puts_r+0x64>
 800488e:	686c      	ldr	r4, [r5, #4]
 8004890:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004892:	07db      	lsls	r3, r3, #31
 8004894:	d405      	bmi.n	80048a2 <_puts_r+0x36>
 8004896:	89a3      	ldrh	r3, [r4, #12]
 8004898:	0598      	lsls	r0, r3, #22
 800489a:	d402      	bmi.n	80048a2 <_puts_r+0x36>
 800489c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800489e:	f001 fdb8 	bl	8006412 <__retarget_lock_acquire_recursive>
 80048a2:	89a3      	ldrh	r3, [r4, #12]
 80048a4:	0719      	lsls	r1, r3, #28
 80048a6:	d51d      	bpl.n	80048e4 <_puts_r+0x78>
 80048a8:	6923      	ldr	r3, [r4, #16]
 80048aa:	b1db      	cbz	r3, 80048e4 <_puts_r+0x78>
 80048ac:	3e01      	subs	r6, #1
 80048ae:	68a3      	ldr	r3, [r4, #8]
 80048b0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80048b4:	3b01      	subs	r3, #1
 80048b6:	60a3      	str	r3, [r4, #8]
 80048b8:	bb39      	cbnz	r1, 800490a <_puts_r+0x9e>
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	da38      	bge.n	8004930 <_puts_r+0xc4>
 80048be:	4622      	mov	r2, r4
 80048c0:	210a      	movs	r1, #10
 80048c2:	4628      	mov	r0, r5
 80048c4:	f000 ffa4 	bl	8005810 <__swbuf_r>
 80048c8:	3001      	adds	r0, #1
 80048ca:	d011      	beq.n	80048f0 <_puts_r+0x84>
 80048cc:	250a      	movs	r5, #10
 80048ce:	e011      	b.n	80048f4 <_puts_r+0x88>
 80048d0:	4b1b      	ldr	r3, [pc, #108]	; (8004940 <_puts_r+0xd4>)
 80048d2:	429c      	cmp	r4, r3
 80048d4:	d101      	bne.n	80048da <_puts_r+0x6e>
 80048d6:	68ac      	ldr	r4, [r5, #8]
 80048d8:	e7da      	b.n	8004890 <_puts_r+0x24>
 80048da:	4b1a      	ldr	r3, [pc, #104]	; (8004944 <_puts_r+0xd8>)
 80048dc:	429c      	cmp	r4, r3
 80048de:	bf08      	it	eq
 80048e0:	68ec      	ldreq	r4, [r5, #12]
 80048e2:	e7d5      	b.n	8004890 <_puts_r+0x24>
 80048e4:	4621      	mov	r1, r4
 80048e6:	4628      	mov	r0, r5
 80048e8:	f000 fff6 	bl	80058d8 <__swsetup_r>
 80048ec:	2800      	cmp	r0, #0
 80048ee:	d0dd      	beq.n	80048ac <_puts_r+0x40>
 80048f0:	f04f 35ff 	mov.w	r5, #4294967295
 80048f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80048f6:	07da      	lsls	r2, r3, #31
 80048f8:	d405      	bmi.n	8004906 <_puts_r+0x9a>
 80048fa:	89a3      	ldrh	r3, [r4, #12]
 80048fc:	059b      	lsls	r3, r3, #22
 80048fe:	d402      	bmi.n	8004906 <_puts_r+0x9a>
 8004900:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004902:	f001 fd87 	bl	8006414 <__retarget_lock_release_recursive>
 8004906:	4628      	mov	r0, r5
 8004908:	bd70      	pop	{r4, r5, r6, pc}
 800490a:	2b00      	cmp	r3, #0
 800490c:	da04      	bge.n	8004918 <_puts_r+0xac>
 800490e:	69a2      	ldr	r2, [r4, #24]
 8004910:	429a      	cmp	r2, r3
 8004912:	dc06      	bgt.n	8004922 <_puts_r+0xb6>
 8004914:	290a      	cmp	r1, #10
 8004916:	d004      	beq.n	8004922 <_puts_r+0xb6>
 8004918:	6823      	ldr	r3, [r4, #0]
 800491a:	1c5a      	adds	r2, r3, #1
 800491c:	6022      	str	r2, [r4, #0]
 800491e:	7019      	strb	r1, [r3, #0]
 8004920:	e7c5      	b.n	80048ae <_puts_r+0x42>
 8004922:	4622      	mov	r2, r4
 8004924:	4628      	mov	r0, r5
 8004926:	f000 ff73 	bl	8005810 <__swbuf_r>
 800492a:	3001      	adds	r0, #1
 800492c:	d1bf      	bne.n	80048ae <_puts_r+0x42>
 800492e:	e7df      	b.n	80048f0 <_puts_r+0x84>
 8004930:	250a      	movs	r5, #10
 8004932:	6823      	ldr	r3, [r4, #0]
 8004934:	1c5a      	adds	r2, r3, #1
 8004936:	6022      	str	r2, [r4, #0]
 8004938:	701d      	strb	r5, [r3, #0]
 800493a:	e7db      	b.n	80048f4 <_puts_r+0x88>
 800493c:	08007c28 	.word	0x08007c28
 8004940:	08007c48 	.word	0x08007c48
 8004944:	08007c08 	.word	0x08007c08

08004948 <puts>:
 8004948:	4b02      	ldr	r3, [pc, #8]	; (8004954 <puts+0xc>)
 800494a:	4601      	mov	r1, r0
 800494c:	6818      	ldr	r0, [r3, #0]
 800494e:	f7ff bf8d 	b.w	800486c <_puts_r>
 8004952:	bf00      	nop
 8004954:	20000018 	.word	0x20000018

08004958 <realloc>:
 8004958:	4b02      	ldr	r3, [pc, #8]	; (8004964 <realloc+0xc>)
 800495a:	460a      	mov	r2, r1
 800495c:	4601      	mov	r1, r0
 800495e:	6818      	ldr	r0, [r3, #0]
 8004960:	f002 bab4 	b.w	8006ecc <_realloc_r>
 8004964:	20000018 	.word	0x20000018

08004968 <_sbrk_r>:
 8004968:	b538      	push	{r3, r4, r5, lr}
 800496a:	2300      	movs	r3, #0
 800496c:	4d05      	ldr	r5, [pc, #20]	; (8004984 <_sbrk_r+0x1c>)
 800496e:	4604      	mov	r4, r0
 8004970:	4608      	mov	r0, r1
 8004972:	602b      	str	r3, [r5, #0]
 8004974:	f7fd fe0c 	bl	8002590 <_sbrk>
 8004978:	1c43      	adds	r3, r0, #1
 800497a:	d102      	bne.n	8004982 <_sbrk_r+0x1a>
 800497c:	682b      	ldr	r3, [r5, #0]
 800497e:	b103      	cbz	r3, 8004982 <_sbrk_r+0x1a>
 8004980:	6023      	str	r3, [r4, #0]
 8004982:	bd38      	pop	{r3, r4, r5, pc}
 8004984:	20000468 	.word	0x20000468

08004988 <siprintf>:
 8004988:	b40e      	push	{r1, r2, r3}
 800498a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800498e:	b500      	push	{lr}
 8004990:	b09c      	sub	sp, #112	; 0x70
 8004992:	ab1d      	add	r3, sp, #116	; 0x74
 8004994:	9002      	str	r0, [sp, #8]
 8004996:	9006      	str	r0, [sp, #24]
 8004998:	9107      	str	r1, [sp, #28]
 800499a:	9104      	str	r1, [sp, #16]
 800499c:	4808      	ldr	r0, [pc, #32]	; (80049c0 <siprintf+0x38>)
 800499e:	4909      	ldr	r1, [pc, #36]	; (80049c4 <siprintf+0x3c>)
 80049a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80049a4:	9105      	str	r1, [sp, #20]
 80049a6:	6800      	ldr	r0, [r0, #0]
 80049a8:	a902      	add	r1, sp, #8
 80049aa:	9301      	str	r3, [sp, #4]
 80049ac:	f002 fb10 	bl	8006fd0 <_svfiprintf_r>
 80049b0:	2200      	movs	r2, #0
 80049b2:	9b02      	ldr	r3, [sp, #8]
 80049b4:	701a      	strb	r2, [r3, #0]
 80049b6:	b01c      	add	sp, #112	; 0x70
 80049b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80049bc:	b003      	add	sp, #12
 80049be:	4770      	bx	lr
 80049c0:	20000018 	.word	0x20000018
 80049c4:	ffff0208 	.word	0xffff0208

080049c8 <__sread>:
 80049c8:	b510      	push	{r4, lr}
 80049ca:	460c      	mov	r4, r1
 80049cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049d0:	f002 feec 	bl	80077ac <_read_r>
 80049d4:	2800      	cmp	r0, #0
 80049d6:	bfab      	itete	ge
 80049d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80049da:	89a3      	ldrhlt	r3, [r4, #12]
 80049dc:	181b      	addge	r3, r3, r0
 80049de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80049e2:	bfac      	ite	ge
 80049e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80049e6:	81a3      	strhlt	r3, [r4, #12]
 80049e8:	bd10      	pop	{r4, pc}

080049ea <__swrite>:
 80049ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049ee:	461f      	mov	r7, r3
 80049f0:	898b      	ldrh	r3, [r1, #12]
 80049f2:	4605      	mov	r5, r0
 80049f4:	05db      	lsls	r3, r3, #23
 80049f6:	460c      	mov	r4, r1
 80049f8:	4616      	mov	r6, r2
 80049fa:	d505      	bpl.n	8004a08 <__swrite+0x1e>
 80049fc:	2302      	movs	r3, #2
 80049fe:	2200      	movs	r2, #0
 8004a00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a04:	f001 fd08 	bl	8006418 <_lseek_r>
 8004a08:	89a3      	ldrh	r3, [r4, #12]
 8004a0a:	4632      	mov	r2, r6
 8004a0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a10:	81a3      	strh	r3, [r4, #12]
 8004a12:	4628      	mov	r0, r5
 8004a14:	463b      	mov	r3, r7
 8004a16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a1e:	f000 bf49 	b.w	80058b4 <_write_r>

08004a22 <__sseek>:
 8004a22:	b510      	push	{r4, lr}
 8004a24:	460c      	mov	r4, r1
 8004a26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a2a:	f001 fcf5 	bl	8006418 <_lseek_r>
 8004a2e:	1c43      	adds	r3, r0, #1
 8004a30:	89a3      	ldrh	r3, [r4, #12]
 8004a32:	bf15      	itete	ne
 8004a34:	6560      	strne	r0, [r4, #84]	; 0x54
 8004a36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004a3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004a3e:	81a3      	strheq	r3, [r4, #12]
 8004a40:	bf18      	it	ne
 8004a42:	81a3      	strhne	r3, [r4, #12]
 8004a44:	bd10      	pop	{r4, pc}

08004a46 <__sclose>:
 8004a46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a4a:	f000 bfb3 	b.w	80059b4 <_close_r>

08004a4e <strcat>:
 8004a4e:	4602      	mov	r2, r0
 8004a50:	b510      	push	{r4, lr}
 8004a52:	7814      	ldrb	r4, [r2, #0]
 8004a54:	4613      	mov	r3, r2
 8004a56:	3201      	adds	r2, #1
 8004a58:	2c00      	cmp	r4, #0
 8004a5a:	d1fa      	bne.n	8004a52 <strcat+0x4>
 8004a5c:	3b01      	subs	r3, #1
 8004a5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a62:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004a66:	2a00      	cmp	r2, #0
 8004a68:	d1f9      	bne.n	8004a5e <strcat+0x10>
 8004a6a:	bd10      	pop	{r4, pc}

08004a6c <strchr>:
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	b2c9      	uxtb	r1, r1
 8004a70:	4618      	mov	r0, r3
 8004a72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a76:	b112      	cbz	r2, 8004a7e <strchr+0x12>
 8004a78:	428a      	cmp	r2, r1
 8004a7a:	d1f9      	bne.n	8004a70 <strchr+0x4>
 8004a7c:	4770      	bx	lr
 8004a7e:	2900      	cmp	r1, #0
 8004a80:	bf18      	it	ne
 8004a82:	2000      	movne	r0, #0
 8004a84:	4770      	bx	lr

08004a86 <strncmp>:
 8004a86:	b510      	push	{r4, lr}
 8004a88:	b16a      	cbz	r2, 8004aa6 <strncmp+0x20>
 8004a8a:	3901      	subs	r1, #1
 8004a8c:	1884      	adds	r4, r0, r2
 8004a8e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004a92:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d103      	bne.n	8004aa2 <strncmp+0x1c>
 8004a9a:	42a0      	cmp	r0, r4
 8004a9c:	d001      	beq.n	8004aa2 <strncmp+0x1c>
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d1f5      	bne.n	8004a8e <strncmp+0x8>
 8004aa2:	1a98      	subs	r0, r3, r2
 8004aa4:	bd10      	pop	{r4, pc}
 8004aa6:	4610      	mov	r0, r2
 8004aa8:	e7fc      	b.n	8004aa4 <strncmp+0x1e>

08004aaa <sulp>:
 8004aaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004aae:	460f      	mov	r7, r1
 8004ab0:	4690      	mov	r8, r2
 8004ab2:	f002 f8b5 	bl	8006c20 <__ulp>
 8004ab6:	4604      	mov	r4, r0
 8004ab8:	460d      	mov	r5, r1
 8004aba:	f1b8 0f00 	cmp.w	r8, #0
 8004abe:	d011      	beq.n	8004ae4 <sulp+0x3a>
 8004ac0:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8004ac4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	dd0b      	ble.n	8004ae4 <sulp+0x3a>
 8004acc:	2400      	movs	r4, #0
 8004ace:	051b      	lsls	r3, r3, #20
 8004ad0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004ad4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004ad8:	4622      	mov	r2, r4
 8004ada:	462b      	mov	r3, r5
 8004adc:	f7fb fd06 	bl	80004ec <__aeabi_dmul>
 8004ae0:	4604      	mov	r4, r0
 8004ae2:	460d      	mov	r5, r1
 8004ae4:	4620      	mov	r0, r4
 8004ae6:	4629      	mov	r1, r5
 8004ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004aec:	0000      	movs	r0, r0
	...

08004af0 <_strtod_l>:
 8004af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004af4:	469b      	mov	fp, r3
 8004af6:	2300      	movs	r3, #0
 8004af8:	b0a1      	sub	sp, #132	; 0x84
 8004afa:	931c      	str	r3, [sp, #112]	; 0x70
 8004afc:	4ba1      	ldr	r3, [pc, #644]	; (8004d84 <_strtod_l+0x294>)
 8004afe:	4682      	mov	sl, r0
 8004b00:	681f      	ldr	r7, [r3, #0]
 8004b02:	460e      	mov	r6, r1
 8004b04:	4638      	mov	r0, r7
 8004b06:	9217      	str	r2, [sp, #92]	; 0x5c
 8004b08:	f7fb fb2c 	bl	8000164 <strlen>
 8004b0c:	f04f 0800 	mov.w	r8, #0
 8004b10:	4604      	mov	r4, r0
 8004b12:	f04f 0900 	mov.w	r9, #0
 8004b16:	961b      	str	r6, [sp, #108]	; 0x6c
 8004b18:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004b1a:	781a      	ldrb	r2, [r3, #0]
 8004b1c:	2a2b      	cmp	r2, #43	; 0x2b
 8004b1e:	d04c      	beq.n	8004bba <_strtod_l+0xca>
 8004b20:	d83a      	bhi.n	8004b98 <_strtod_l+0xa8>
 8004b22:	2a0d      	cmp	r2, #13
 8004b24:	d833      	bhi.n	8004b8e <_strtod_l+0x9e>
 8004b26:	2a08      	cmp	r2, #8
 8004b28:	d833      	bhi.n	8004b92 <_strtod_l+0xa2>
 8004b2a:	2a00      	cmp	r2, #0
 8004b2c:	d03d      	beq.n	8004baa <_strtod_l+0xba>
 8004b2e:	2300      	movs	r3, #0
 8004b30:	930c      	str	r3, [sp, #48]	; 0x30
 8004b32:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8004b34:	782b      	ldrb	r3, [r5, #0]
 8004b36:	2b30      	cmp	r3, #48	; 0x30
 8004b38:	f040 80af 	bne.w	8004c9a <_strtod_l+0x1aa>
 8004b3c:	786b      	ldrb	r3, [r5, #1]
 8004b3e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004b42:	2b58      	cmp	r3, #88	; 0x58
 8004b44:	d16c      	bne.n	8004c20 <_strtod_l+0x130>
 8004b46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004b48:	4650      	mov	r0, sl
 8004b4a:	9301      	str	r3, [sp, #4]
 8004b4c:	ab1c      	add	r3, sp, #112	; 0x70
 8004b4e:	9300      	str	r3, [sp, #0]
 8004b50:	4a8d      	ldr	r2, [pc, #564]	; (8004d88 <_strtod_l+0x298>)
 8004b52:	f8cd b008 	str.w	fp, [sp, #8]
 8004b56:	ab1d      	add	r3, sp, #116	; 0x74
 8004b58:	a91b      	add	r1, sp, #108	; 0x6c
 8004b5a:	f001 f95b 	bl	8005e14 <__gethex>
 8004b5e:	f010 0607 	ands.w	r6, r0, #7
 8004b62:	4604      	mov	r4, r0
 8004b64:	d005      	beq.n	8004b72 <_strtod_l+0x82>
 8004b66:	2e06      	cmp	r6, #6
 8004b68:	d129      	bne.n	8004bbe <_strtod_l+0xce>
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	3501      	adds	r5, #1
 8004b6e:	951b      	str	r5, [sp, #108]	; 0x6c
 8004b70:	930c      	str	r3, [sp, #48]	; 0x30
 8004b72:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	f040 8596 	bne.w	80056a6 <_strtod_l+0xbb6>
 8004b7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004b7c:	b1d3      	cbz	r3, 8004bb4 <_strtod_l+0xc4>
 8004b7e:	4642      	mov	r2, r8
 8004b80:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004b84:	4610      	mov	r0, r2
 8004b86:	4619      	mov	r1, r3
 8004b88:	b021      	add	sp, #132	; 0x84
 8004b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b8e:	2a20      	cmp	r2, #32
 8004b90:	d1cd      	bne.n	8004b2e <_strtod_l+0x3e>
 8004b92:	3301      	adds	r3, #1
 8004b94:	931b      	str	r3, [sp, #108]	; 0x6c
 8004b96:	e7bf      	b.n	8004b18 <_strtod_l+0x28>
 8004b98:	2a2d      	cmp	r2, #45	; 0x2d
 8004b9a:	d1c8      	bne.n	8004b2e <_strtod_l+0x3e>
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	920c      	str	r2, [sp, #48]	; 0x30
 8004ba0:	1c5a      	adds	r2, r3, #1
 8004ba2:	921b      	str	r2, [sp, #108]	; 0x6c
 8004ba4:	785b      	ldrb	r3, [r3, #1]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d1c3      	bne.n	8004b32 <_strtod_l+0x42>
 8004baa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004bac:	961b      	str	r6, [sp, #108]	; 0x6c
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	f040 8577 	bne.w	80056a2 <_strtod_l+0xbb2>
 8004bb4:	4642      	mov	r2, r8
 8004bb6:	464b      	mov	r3, r9
 8004bb8:	e7e4      	b.n	8004b84 <_strtod_l+0x94>
 8004bba:	2200      	movs	r2, #0
 8004bbc:	e7ef      	b.n	8004b9e <_strtod_l+0xae>
 8004bbe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004bc0:	b13a      	cbz	r2, 8004bd2 <_strtod_l+0xe2>
 8004bc2:	2135      	movs	r1, #53	; 0x35
 8004bc4:	a81e      	add	r0, sp, #120	; 0x78
 8004bc6:	f002 f92f 	bl	8006e28 <__copybits>
 8004bca:	4650      	mov	r0, sl
 8004bcc:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004bce:	f001 fcf7 	bl	80065c0 <_Bfree>
 8004bd2:	3e01      	subs	r6, #1
 8004bd4:	2e05      	cmp	r6, #5
 8004bd6:	d807      	bhi.n	8004be8 <_strtod_l+0xf8>
 8004bd8:	e8df f006 	tbb	[pc, r6]
 8004bdc:	1d180b0e 	.word	0x1d180b0e
 8004be0:	030e      	.short	0x030e
 8004be2:	f04f 0900 	mov.w	r9, #0
 8004be6:	46c8      	mov	r8, r9
 8004be8:	0721      	lsls	r1, r4, #28
 8004bea:	d5c2      	bpl.n	8004b72 <_strtod_l+0x82>
 8004bec:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8004bf0:	e7bf      	b.n	8004b72 <_strtod_l+0x82>
 8004bf2:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 8004bf6:	e7f7      	b.n	8004be8 <_strtod_l+0xf8>
 8004bf8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8004bfa:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 8004bfe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004c02:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004c06:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8004c0a:	e7ed      	b.n	8004be8 <_strtod_l+0xf8>
 8004c0c:	f04f 0800 	mov.w	r8, #0
 8004c10:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8004d8c <_strtod_l+0x29c>
 8004c14:	e7e8      	b.n	8004be8 <_strtod_l+0xf8>
 8004c16:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8004c1a:	f04f 38ff 	mov.w	r8, #4294967295
 8004c1e:	e7e3      	b.n	8004be8 <_strtod_l+0xf8>
 8004c20:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004c22:	1c5a      	adds	r2, r3, #1
 8004c24:	921b      	str	r2, [sp, #108]	; 0x6c
 8004c26:	785b      	ldrb	r3, [r3, #1]
 8004c28:	2b30      	cmp	r3, #48	; 0x30
 8004c2a:	d0f9      	beq.n	8004c20 <_strtod_l+0x130>
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d0a0      	beq.n	8004b72 <_strtod_l+0x82>
 8004c30:	2301      	movs	r3, #1
 8004c32:	9307      	str	r3, [sp, #28]
 8004c34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004c36:	220a      	movs	r2, #10
 8004c38:	9308      	str	r3, [sp, #32]
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	469b      	mov	fp, r3
 8004c3e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8004c42:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8004c44:	7805      	ldrb	r5, [r0, #0]
 8004c46:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8004c4a:	b2d9      	uxtb	r1, r3
 8004c4c:	2909      	cmp	r1, #9
 8004c4e:	d926      	bls.n	8004c9e <_strtod_l+0x1ae>
 8004c50:	4622      	mov	r2, r4
 8004c52:	4639      	mov	r1, r7
 8004c54:	f7ff ff17 	bl	8004a86 <strncmp>
 8004c58:	2800      	cmp	r0, #0
 8004c5a:	d032      	beq.n	8004cc2 <_strtod_l+0x1d2>
 8004c5c:	2000      	movs	r0, #0
 8004c5e:	462b      	mov	r3, r5
 8004c60:	465c      	mov	r4, fp
 8004c62:	4602      	mov	r2, r0
 8004c64:	9004      	str	r0, [sp, #16]
 8004c66:	2b65      	cmp	r3, #101	; 0x65
 8004c68:	d001      	beq.n	8004c6e <_strtod_l+0x17e>
 8004c6a:	2b45      	cmp	r3, #69	; 0x45
 8004c6c:	d113      	bne.n	8004c96 <_strtod_l+0x1a6>
 8004c6e:	b91c      	cbnz	r4, 8004c78 <_strtod_l+0x188>
 8004c70:	9b07      	ldr	r3, [sp, #28]
 8004c72:	4303      	orrs	r3, r0
 8004c74:	d099      	beq.n	8004baa <_strtod_l+0xba>
 8004c76:	2400      	movs	r4, #0
 8004c78:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8004c7a:	1c73      	adds	r3, r6, #1
 8004c7c:	931b      	str	r3, [sp, #108]	; 0x6c
 8004c7e:	7873      	ldrb	r3, [r6, #1]
 8004c80:	2b2b      	cmp	r3, #43	; 0x2b
 8004c82:	d078      	beq.n	8004d76 <_strtod_l+0x286>
 8004c84:	2b2d      	cmp	r3, #45	; 0x2d
 8004c86:	d07b      	beq.n	8004d80 <_strtod_l+0x290>
 8004c88:	2700      	movs	r7, #0
 8004c8a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8004c8e:	2909      	cmp	r1, #9
 8004c90:	f240 8082 	bls.w	8004d98 <_strtod_l+0x2a8>
 8004c94:	961b      	str	r6, [sp, #108]	; 0x6c
 8004c96:	2500      	movs	r5, #0
 8004c98:	e09e      	b.n	8004dd8 <_strtod_l+0x2e8>
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	e7c9      	b.n	8004c32 <_strtod_l+0x142>
 8004c9e:	f1bb 0f08 	cmp.w	fp, #8
 8004ca2:	bfd5      	itete	le
 8004ca4:	9906      	ldrle	r1, [sp, #24]
 8004ca6:	9905      	ldrgt	r1, [sp, #20]
 8004ca8:	fb02 3301 	mlale	r3, r2, r1, r3
 8004cac:	fb02 3301 	mlagt	r3, r2, r1, r3
 8004cb0:	f100 0001 	add.w	r0, r0, #1
 8004cb4:	bfd4      	ite	le
 8004cb6:	9306      	strle	r3, [sp, #24]
 8004cb8:	9305      	strgt	r3, [sp, #20]
 8004cba:	f10b 0b01 	add.w	fp, fp, #1
 8004cbe:	901b      	str	r0, [sp, #108]	; 0x6c
 8004cc0:	e7bf      	b.n	8004c42 <_strtod_l+0x152>
 8004cc2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004cc4:	191a      	adds	r2, r3, r4
 8004cc6:	921b      	str	r2, [sp, #108]	; 0x6c
 8004cc8:	5d1b      	ldrb	r3, [r3, r4]
 8004cca:	f1bb 0f00 	cmp.w	fp, #0
 8004cce:	d036      	beq.n	8004d3e <_strtod_l+0x24e>
 8004cd0:	465c      	mov	r4, fp
 8004cd2:	9004      	str	r0, [sp, #16]
 8004cd4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8004cd8:	2a09      	cmp	r2, #9
 8004cda:	d912      	bls.n	8004d02 <_strtod_l+0x212>
 8004cdc:	2201      	movs	r2, #1
 8004cde:	e7c2      	b.n	8004c66 <_strtod_l+0x176>
 8004ce0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004ce2:	3001      	adds	r0, #1
 8004ce4:	1c5a      	adds	r2, r3, #1
 8004ce6:	921b      	str	r2, [sp, #108]	; 0x6c
 8004ce8:	785b      	ldrb	r3, [r3, #1]
 8004cea:	2b30      	cmp	r3, #48	; 0x30
 8004cec:	d0f8      	beq.n	8004ce0 <_strtod_l+0x1f0>
 8004cee:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8004cf2:	2a08      	cmp	r2, #8
 8004cf4:	f200 84dc 	bhi.w	80056b0 <_strtod_l+0xbc0>
 8004cf8:	9004      	str	r0, [sp, #16]
 8004cfa:	2000      	movs	r0, #0
 8004cfc:	4604      	mov	r4, r0
 8004cfe:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8004d00:	9208      	str	r2, [sp, #32]
 8004d02:	3b30      	subs	r3, #48	; 0x30
 8004d04:	f100 0201 	add.w	r2, r0, #1
 8004d08:	d013      	beq.n	8004d32 <_strtod_l+0x242>
 8004d0a:	9904      	ldr	r1, [sp, #16]
 8004d0c:	1905      	adds	r5, r0, r4
 8004d0e:	4411      	add	r1, r2
 8004d10:	9104      	str	r1, [sp, #16]
 8004d12:	4622      	mov	r2, r4
 8004d14:	210a      	movs	r1, #10
 8004d16:	42aa      	cmp	r2, r5
 8004d18:	d113      	bne.n	8004d42 <_strtod_l+0x252>
 8004d1a:	1822      	adds	r2, r4, r0
 8004d1c:	2a08      	cmp	r2, #8
 8004d1e:	f104 0401 	add.w	r4, r4, #1
 8004d22:	4404      	add	r4, r0
 8004d24:	dc1b      	bgt.n	8004d5e <_strtod_l+0x26e>
 8004d26:	220a      	movs	r2, #10
 8004d28:	9906      	ldr	r1, [sp, #24]
 8004d2a:	fb02 3301 	mla	r3, r2, r1, r3
 8004d2e:	9306      	str	r3, [sp, #24]
 8004d30:	2200      	movs	r2, #0
 8004d32:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004d34:	4610      	mov	r0, r2
 8004d36:	1c59      	adds	r1, r3, #1
 8004d38:	911b      	str	r1, [sp, #108]	; 0x6c
 8004d3a:	785b      	ldrb	r3, [r3, #1]
 8004d3c:	e7ca      	b.n	8004cd4 <_strtod_l+0x1e4>
 8004d3e:	4658      	mov	r0, fp
 8004d40:	e7d3      	b.n	8004cea <_strtod_l+0x1fa>
 8004d42:	2a08      	cmp	r2, #8
 8004d44:	dc04      	bgt.n	8004d50 <_strtod_l+0x260>
 8004d46:	9f06      	ldr	r7, [sp, #24]
 8004d48:	434f      	muls	r7, r1
 8004d4a:	9706      	str	r7, [sp, #24]
 8004d4c:	3201      	adds	r2, #1
 8004d4e:	e7e2      	b.n	8004d16 <_strtod_l+0x226>
 8004d50:	1c57      	adds	r7, r2, #1
 8004d52:	2f10      	cmp	r7, #16
 8004d54:	bfde      	ittt	le
 8004d56:	9f05      	ldrle	r7, [sp, #20]
 8004d58:	434f      	mulle	r7, r1
 8004d5a:	9705      	strle	r7, [sp, #20]
 8004d5c:	e7f6      	b.n	8004d4c <_strtod_l+0x25c>
 8004d5e:	2c10      	cmp	r4, #16
 8004d60:	bfdf      	itttt	le
 8004d62:	220a      	movle	r2, #10
 8004d64:	9905      	ldrle	r1, [sp, #20]
 8004d66:	fb02 3301 	mlale	r3, r2, r1, r3
 8004d6a:	9305      	strle	r3, [sp, #20]
 8004d6c:	e7e0      	b.n	8004d30 <_strtod_l+0x240>
 8004d6e:	2300      	movs	r3, #0
 8004d70:	2201      	movs	r2, #1
 8004d72:	9304      	str	r3, [sp, #16]
 8004d74:	e77c      	b.n	8004c70 <_strtod_l+0x180>
 8004d76:	2700      	movs	r7, #0
 8004d78:	1cb3      	adds	r3, r6, #2
 8004d7a:	931b      	str	r3, [sp, #108]	; 0x6c
 8004d7c:	78b3      	ldrb	r3, [r6, #2]
 8004d7e:	e784      	b.n	8004c8a <_strtod_l+0x19a>
 8004d80:	2701      	movs	r7, #1
 8004d82:	e7f9      	b.n	8004d78 <_strtod_l+0x288>
 8004d84:	08007ce4 	.word	0x08007ce4
 8004d88:	08007bb4 	.word	0x08007bb4
 8004d8c:	7ff00000 	.word	0x7ff00000
 8004d90:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004d92:	1c59      	adds	r1, r3, #1
 8004d94:	911b      	str	r1, [sp, #108]	; 0x6c
 8004d96:	785b      	ldrb	r3, [r3, #1]
 8004d98:	2b30      	cmp	r3, #48	; 0x30
 8004d9a:	d0f9      	beq.n	8004d90 <_strtod_l+0x2a0>
 8004d9c:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8004da0:	2908      	cmp	r1, #8
 8004da2:	f63f af78 	bhi.w	8004c96 <_strtod_l+0x1a6>
 8004da6:	f04f 0e0a 	mov.w	lr, #10
 8004daa:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8004dae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004db0:	9309      	str	r3, [sp, #36]	; 0x24
 8004db2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004db4:	1c59      	adds	r1, r3, #1
 8004db6:	911b      	str	r1, [sp, #108]	; 0x6c
 8004db8:	785b      	ldrb	r3, [r3, #1]
 8004dba:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8004dbe:	2d09      	cmp	r5, #9
 8004dc0:	d935      	bls.n	8004e2e <_strtod_l+0x33e>
 8004dc2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004dc4:	1b49      	subs	r1, r1, r5
 8004dc6:	2908      	cmp	r1, #8
 8004dc8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8004dcc:	dc02      	bgt.n	8004dd4 <_strtod_l+0x2e4>
 8004dce:	4565      	cmp	r5, ip
 8004dd0:	bfa8      	it	ge
 8004dd2:	4665      	movge	r5, ip
 8004dd4:	b107      	cbz	r7, 8004dd8 <_strtod_l+0x2e8>
 8004dd6:	426d      	negs	r5, r5
 8004dd8:	2c00      	cmp	r4, #0
 8004dda:	d14c      	bne.n	8004e76 <_strtod_l+0x386>
 8004ddc:	9907      	ldr	r1, [sp, #28]
 8004dde:	4301      	orrs	r1, r0
 8004de0:	f47f aec7 	bne.w	8004b72 <_strtod_l+0x82>
 8004de4:	2a00      	cmp	r2, #0
 8004de6:	f47f aee0 	bne.w	8004baa <_strtod_l+0xba>
 8004dea:	2b69      	cmp	r3, #105	; 0x69
 8004dec:	d026      	beq.n	8004e3c <_strtod_l+0x34c>
 8004dee:	dc23      	bgt.n	8004e38 <_strtod_l+0x348>
 8004df0:	2b49      	cmp	r3, #73	; 0x49
 8004df2:	d023      	beq.n	8004e3c <_strtod_l+0x34c>
 8004df4:	2b4e      	cmp	r3, #78	; 0x4e
 8004df6:	f47f aed8 	bne.w	8004baa <_strtod_l+0xba>
 8004dfa:	499c      	ldr	r1, [pc, #624]	; (800506c <_strtod_l+0x57c>)
 8004dfc:	a81b      	add	r0, sp, #108	; 0x6c
 8004dfe:	f001 fa57 	bl	80062b0 <__match>
 8004e02:	2800      	cmp	r0, #0
 8004e04:	f43f aed1 	beq.w	8004baa <_strtod_l+0xba>
 8004e08:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	2b28      	cmp	r3, #40	; 0x28
 8004e0e:	d12c      	bne.n	8004e6a <_strtod_l+0x37a>
 8004e10:	4997      	ldr	r1, [pc, #604]	; (8005070 <_strtod_l+0x580>)
 8004e12:	aa1e      	add	r2, sp, #120	; 0x78
 8004e14:	a81b      	add	r0, sp, #108	; 0x6c
 8004e16:	f001 fa5f 	bl	80062d8 <__hexnan>
 8004e1a:	2805      	cmp	r0, #5
 8004e1c:	d125      	bne.n	8004e6a <_strtod_l+0x37a>
 8004e1e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004e20:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8004e24:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8004e28:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8004e2c:	e6a1      	b.n	8004b72 <_strtod_l+0x82>
 8004e2e:	fb0e 3c0c 	mla	ip, lr, ip, r3
 8004e32:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8004e36:	e7bc      	b.n	8004db2 <_strtod_l+0x2c2>
 8004e38:	2b6e      	cmp	r3, #110	; 0x6e
 8004e3a:	e7dc      	b.n	8004df6 <_strtod_l+0x306>
 8004e3c:	498d      	ldr	r1, [pc, #564]	; (8005074 <_strtod_l+0x584>)
 8004e3e:	a81b      	add	r0, sp, #108	; 0x6c
 8004e40:	f001 fa36 	bl	80062b0 <__match>
 8004e44:	2800      	cmp	r0, #0
 8004e46:	f43f aeb0 	beq.w	8004baa <_strtod_l+0xba>
 8004e4a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004e4c:	498a      	ldr	r1, [pc, #552]	; (8005078 <_strtod_l+0x588>)
 8004e4e:	3b01      	subs	r3, #1
 8004e50:	a81b      	add	r0, sp, #108	; 0x6c
 8004e52:	931b      	str	r3, [sp, #108]	; 0x6c
 8004e54:	f001 fa2c 	bl	80062b0 <__match>
 8004e58:	b910      	cbnz	r0, 8004e60 <_strtod_l+0x370>
 8004e5a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004e5c:	3301      	adds	r3, #1
 8004e5e:	931b      	str	r3, [sp, #108]	; 0x6c
 8004e60:	f04f 0800 	mov.w	r8, #0
 8004e64:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8005088 <_strtod_l+0x598>
 8004e68:	e683      	b.n	8004b72 <_strtod_l+0x82>
 8004e6a:	4884      	ldr	r0, [pc, #528]	; (800507c <_strtod_l+0x58c>)
 8004e6c:	f002 fcb0 	bl	80077d0 <nan>
 8004e70:	4680      	mov	r8, r0
 8004e72:	4689      	mov	r9, r1
 8004e74:	e67d      	b.n	8004b72 <_strtod_l+0x82>
 8004e76:	9b04      	ldr	r3, [sp, #16]
 8004e78:	f1bb 0f00 	cmp.w	fp, #0
 8004e7c:	bf08      	it	eq
 8004e7e:	46a3      	moveq	fp, r4
 8004e80:	1aeb      	subs	r3, r5, r3
 8004e82:	2c10      	cmp	r4, #16
 8004e84:	9806      	ldr	r0, [sp, #24]
 8004e86:	4626      	mov	r6, r4
 8004e88:	9307      	str	r3, [sp, #28]
 8004e8a:	bfa8      	it	ge
 8004e8c:	2610      	movge	r6, #16
 8004e8e:	f7fb fab3 	bl	80003f8 <__aeabi_ui2d>
 8004e92:	2c09      	cmp	r4, #9
 8004e94:	4680      	mov	r8, r0
 8004e96:	4689      	mov	r9, r1
 8004e98:	dd13      	ble.n	8004ec2 <_strtod_l+0x3d2>
 8004e9a:	4b79      	ldr	r3, [pc, #484]	; (8005080 <_strtod_l+0x590>)
 8004e9c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004ea0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8004ea4:	f7fb fb22 	bl	80004ec <__aeabi_dmul>
 8004ea8:	4680      	mov	r8, r0
 8004eaa:	9805      	ldr	r0, [sp, #20]
 8004eac:	4689      	mov	r9, r1
 8004eae:	f7fb faa3 	bl	80003f8 <__aeabi_ui2d>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	4640      	mov	r0, r8
 8004eb8:	4649      	mov	r1, r9
 8004eba:	f7fb f961 	bl	8000180 <__adddf3>
 8004ebe:	4680      	mov	r8, r0
 8004ec0:	4689      	mov	r9, r1
 8004ec2:	2c0f      	cmp	r4, #15
 8004ec4:	dc36      	bgt.n	8004f34 <_strtod_l+0x444>
 8004ec6:	9b07      	ldr	r3, [sp, #28]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f43f ae52 	beq.w	8004b72 <_strtod_l+0x82>
 8004ece:	dd22      	ble.n	8004f16 <_strtod_l+0x426>
 8004ed0:	2b16      	cmp	r3, #22
 8004ed2:	dc09      	bgt.n	8004ee8 <_strtod_l+0x3f8>
 8004ed4:	4c6a      	ldr	r4, [pc, #424]	; (8005080 <_strtod_l+0x590>)
 8004ed6:	4642      	mov	r2, r8
 8004ed8:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8004edc:	464b      	mov	r3, r9
 8004ede:	e9d4 0100 	ldrd	r0, r1, [r4]
 8004ee2:	f7fb fb03 	bl	80004ec <__aeabi_dmul>
 8004ee6:	e7c3      	b.n	8004e70 <_strtod_l+0x380>
 8004ee8:	9a07      	ldr	r2, [sp, #28]
 8004eea:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	db20      	blt.n	8004f34 <_strtod_l+0x444>
 8004ef2:	4d63      	ldr	r5, [pc, #396]	; (8005080 <_strtod_l+0x590>)
 8004ef4:	f1c4 040f 	rsb	r4, r4, #15
 8004ef8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8004efc:	4642      	mov	r2, r8
 8004efe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004f02:	464b      	mov	r3, r9
 8004f04:	f7fb faf2 	bl	80004ec <__aeabi_dmul>
 8004f08:	9b07      	ldr	r3, [sp, #28]
 8004f0a:	1b1c      	subs	r4, r3, r4
 8004f0c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8004f10:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004f14:	e7e5      	b.n	8004ee2 <_strtod_l+0x3f2>
 8004f16:	9b07      	ldr	r3, [sp, #28]
 8004f18:	3316      	adds	r3, #22
 8004f1a:	db0b      	blt.n	8004f34 <_strtod_l+0x444>
 8004f1c:	9b04      	ldr	r3, [sp, #16]
 8004f1e:	4a58      	ldr	r2, [pc, #352]	; (8005080 <_strtod_l+0x590>)
 8004f20:	1b5d      	subs	r5, r3, r5
 8004f22:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8004f26:	4640      	mov	r0, r8
 8004f28:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004f2c:	4649      	mov	r1, r9
 8004f2e:	f7fb fc07 	bl	8000740 <__aeabi_ddiv>
 8004f32:	e79d      	b.n	8004e70 <_strtod_l+0x380>
 8004f34:	9b07      	ldr	r3, [sp, #28]
 8004f36:	1ba6      	subs	r6, r4, r6
 8004f38:	441e      	add	r6, r3
 8004f3a:	2e00      	cmp	r6, #0
 8004f3c:	dd71      	ble.n	8005022 <_strtod_l+0x532>
 8004f3e:	f016 030f 	ands.w	r3, r6, #15
 8004f42:	d00a      	beq.n	8004f5a <_strtod_l+0x46a>
 8004f44:	494e      	ldr	r1, [pc, #312]	; (8005080 <_strtod_l+0x590>)
 8004f46:	4642      	mov	r2, r8
 8004f48:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004f4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004f50:	464b      	mov	r3, r9
 8004f52:	f7fb facb 	bl	80004ec <__aeabi_dmul>
 8004f56:	4680      	mov	r8, r0
 8004f58:	4689      	mov	r9, r1
 8004f5a:	f036 060f 	bics.w	r6, r6, #15
 8004f5e:	d050      	beq.n	8005002 <_strtod_l+0x512>
 8004f60:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8004f64:	dd27      	ble.n	8004fb6 <_strtod_l+0x4c6>
 8004f66:	f04f 0b00 	mov.w	fp, #0
 8004f6a:	f8cd b010 	str.w	fp, [sp, #16]
 8004f6e:	f8cd b020 	str.w	fp, [sp, #32]
 8004f72:	f8cd b018 	str.w	fp, [sp, #24]
 8004f76:	2322      	movs	r3, #34	; 0x22
 8004f78:	f04f 0800 	mov.w	r8, #0
 8004f7c:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8005088 <_strtod_l+0x598>
 8004f80:	f8ca 3000 	str.w	r3, [sl]
 8004f84:	9b08      	ldr	r3, [sp, #32]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	f43f adf3 	beq.w	8004b72 <_strtod_l+0x82>
 8004f8c:	4650      	mov	r0, sl
 8004f8e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004f90:	f001 fb16 	bl	80065c0 <_Bfree>
 8004f94:	4650      	mov	r0, sl
 8004f96:	9906      	ldr	r1, [sp, #24]
 8004f98:	f001 fb12 	bl	80065c0 <_Bfree>
 8004f9c:	4650      	mov	r0, sl
 8004f9e:	9904      	ldr	r1, [sp, #16]
 8004fa0:	f001 fb0e 	bl	80065c0 <_Bfree>
 8004fa4:	4650      	mov	r0, sl
 8004fa6:	9908      	ldr	r1, [sp, #32]
 8004fa8:	f001 fb0a 	bl	80065c0 <_Bfree>
 8004fac:	4659      	mov	r1, fp
 8004fae:	4650      	mov	r0, sl
 8004fb0:	f001 fb06 	bl	80065c0 <_Bfree>
 8004fb4:	e5dd      	b.n	8004b72 <_strtod_l+0x82>
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	4640      	mov	r0, r8
 8004fba:	4649      	mov	r1, r9
 8004fbc:	461f      	mov	r7, r3
 8004fbe:	1136      	asrs	r6, r6, #4
 8004fc0:	2e01      	cmp	r6, #1
 8004fc2:	dc21      	bgt.n	8005008 <_strtod_l+0x518>
 8004fc4:	b10b      	cbz	r3, 8004fca <_strtod_l+0x4da>
 8004fc6:	4680      	mov	r8, r0
 8004fc8:	4689      	mov	r9, r1
 8004fca:	4b2e      	ldr	r3, [pc, #184]	; (8005084 <_strtod_l+0x594>)
 8004fcc:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8004fd0:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8004fd4:	4642      	mov	r2, r8
 8004fd6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004fda:	464b      	mov	r3, r9
 8004fdc:	f7fb fa86 	bl	80004ec <__aeabi_dmul>
 8004fe0:	4b29      	ldr	r3, [pc, #164]	; (8005088 <_strtod_l+0x598>)
 8004fe2:	460a      	mov	r2, r1
 8004fe4:	400b      	ands	r3, r1
 8004fe6:	4929      	ldr	r1, [pc, #164]	; (800508c <_strtod_l+0x59c>)
 8004fe8:	4680      	mov	r8, r0
 8004fea:	428b      	cmp	r3, r1
 8004fec:	d8bb      	bhi.n	8004f66 <_strtod_l+0x476>
 8004fee:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004ff2:	428b      	cmp	r3, r1
 8004ff4:	bf86      	itte	hi
 8004ff6:	f04f 38ff 	movhi.w	r8, #4294967295
 8004ffa:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8005090 <_strtod_l+0x5a0>
 8004ffe:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8005002:	2300      	movs	r3, #0
 8005004:	9305      	str	r3, [sp, #20]
 8005006:	e07e      	b.n	8005106 <_strtod_l+0x616>
 8005008:	07f2      	lsls	r2, r6, #31
 800500a:	d507      	bpl.n	800501c <_strtod_l+0x52c>
 800500c:	4b1d      	ldr	r3, [pc, #116]	; (8005084 <_strtod_l+0x594>)
 800500e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005016:	f7fb fa69 	bl	80004ec <__aeabi_dmul>
 800501a:	2301      	movs	r3, #1
 800501c:	3701      	adds	r7, #1
 800501e:	1076      	asrs	r6, r6, #1
 8005020:	e7ce      	b.n	8004fc0 <_strtod_l+0x4d0>
 8005022:	d0ee      	beq.n	8005002 <_strtod_l+0x512>
 8005024:	4276      	negs	r6, r6
 8005026:	f016 020f 	ands.w	r2, r6, #15
 800502a:	d00a      	beq.n	8005042 <_strtod_l+0x552>
 800502c:	4b14      	ldr	r3, [pc, #80]	; (8005080 <_strtod_l+0x590>)
 800502e:	4640      	mov	r0, r8
 8005030:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005034:	4649      	mov	r1, r9
 8005036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800503a:	f7fb fb81 	bl	8000740 <__aeabi_ddiv>
 800503e:	4680      	mov	r8, r0
 8005040:	4689      	mov	r9, r1
 8005042:	1136      	asrs	r6, r6, #4
 8005044:	d0dd      	beq.n	8005002 <_strtod_l+0x512>
 8005046:	2e1f      	cmp	r6, #31
 8005048:	dd24      	ble.n	8005094 <_strtod_l+0x5a4>
 800504a:	f04f 0b00 	mov.w	fp, #0
 800504e:	f8cd b010 	str.w	fp, [sp, #16]
 8005052:	f8cd b020 	str.w	fp, [sp, #32]
 8005056:	f8cd b018 	str.w	fp, [sp, #24]
 800505a:	2322      	movs	r3, #34	; 0x22
 800505c:	f04f 0800 	mov.w	r8, #0
 8005060:	f04f 0900 	mov.w	r9, #0
 8005064:	f8ca 3000 	str.w	r3, [sl]
 8005068:	e78c      	b.n	8004f84 <_strtod_l+0x494>
 800506a:	bf00      	nop
 800506c:	08007bb1 	.word	0x08007bb1
 8005070:	08007bc8 	.word	0x08007bc8
 8005074:	08007ba8 	.word	0x08007ba8
 8005078:	08007bab 	.word	0x08007bab
 800507c:	08007eda 	.word	0x08007eda
 8005080:	08007d98 	.word	0x08007d98
 8005084:	08007d70 	.word	0x08007d70
 8005088:	7ff00000 	.word	0x7ff00000
 800508c:	7ca00000 	.word	0x7ca00000
 8005090:	7fefffff 	.word	0x7fefffff
 8005094:	f016 0310 	ands.w	r3, r6, #16
 8005098:	bf18      	it	ne
 800509a:	236a      	movne	r3, #106	; 0x6a
 800509c:	4640      	mov	r0, r8
 800509e:	9305      	str	r3, [sp, #20]
 80050a0:	4649      	mov	r1, r9
 80050a2:	2300      	movs	r3, #0
 80050a4:	4fb2      	ldr	r7, [pc, #712]	; (8005370 <_strtod_l+0x880>)
 80050a6:	07f2      	lsls	r2, r6, #31
 80050a8:	d504      	bpl.n	80050b4 <_strtod_l+0x5c4>
 80050aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050ae:	f7fb fa1d 	bl	80004ec <__aeabi_dmul>
 80050b2:	2301      	movs	r3, #1
 80050b4:	1076      	asrs	r6, r6, #1
 80050b6:	f107 0708 	add.w	r7, r7, #8
 80050ba:	d1f4      	bne.n	80050a6 <_strtod_l+0x5b6>
 80050bc:	b10b      	cbz	r3, 80050c2 <_strtod_l+0x5d2>
 80050be:	4680      	mov	r8, r0
 80050c0:	4689      	mov	r9, r1
 80050c2:	9b05      	ldr	r3, [sp, #20]
 80050c4:	b1bb      	cbz	r3, 80050f6 <_strtod_l+0x606>
 80050c6:	f3c9 530a 	ubfx	r3, r9, #20, #11
 80050ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	4649      	mov	r1, r9
 80050d2:	dd10      	ble.n	80050f6 <_strtod_l+0x606>
 80050d4:	2b1f      	cmp	r3, #31
 80050d6:	f340 812b 	ble.w	8005330 <_strtod_l+0x840>
 80050da:	2b34      	cmp	r3, #52	; 0x34
 80050dc:	bfd8      	it	le
 80050de:	f04f 32ff 	movle.w	r2, #4294967295
 80050e2:	f04f 0800 	mov.w	r8, #0
 80050e6:	bfcf      	iteee	gt
 80050e8:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80050ec:	3b20      	suble	r3, #32
 80050ee:	fa02 f303 	lslle.w	r3, r2, r3
 80050f2:	ea03 0901 	andle.w	r9, r3, r1
 80050f6:	2200      	movs	r2, #0
 80050f8:	2300      	movs	r3, #0
 80050fa:	4640      	mov	r0, r8
 80050fc:	4649      	mov	r1, r9
 80050fe:	f7fb fc5d 	bl	80009bc <__aeabi_dcmpeq>
 8005102:	2800      	cmp	r0, #0
 8005104:	d1a1      	bne.n	800504a <_strtod_l+0x55a>
 8005106:	9b06      	ldr	r3, [sp, #24]
 8005108:	465a      	mov	r2, fp
 800510a:	9300      	str	r3, [sp, #0]
 800510c:	4650      	mov	r0, sl
 800510e:	4623      	mov	r3, r4
 8005110:	9908      	ldr	r1, [sp, #32]
 8005112:	f001 fac1 	bl	8006698 <__s2b>
 8005116:	9008      	str	r0, [sp, #32]
 8005118:	2800      	cmp	r0, #0
 800511a:	f43f af24 	beq.w	8004f66 <_strtod_l+0x476>
 800511e:	9b04      	ldr	r3, [sp, #16]
 8005120:	f04f 0b00 	mov.w	fp, #0
 8005124:	1b5d      	subs	r5, r3, r5
 8005126:	9b07      	ldr	r3, [sp, #28]
 8005128:	f8cd b010 	str.w	fp, [sp, #16]
 800512c:	2b00      	cmp	r3, #0
 800512e:	bfb4      	ite	lt
 8005130:	462b      	movlt	r3, r5
 8005132:	2300      	movge	r3, #0
 8005134:	930e      	str	r3, [sp, #56]	; 0x38
 8005136:	9b07      	ldr	r3, [sp, #28]
 8005138:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800513c:	9316      	str	r3, [sp, #88]	; 0x58
 800513e:	9b08      	ldr	r3, [sp, #32]
 8005140:	4650      	mov	r0, sl
 8005142:	6859      	ldr	r1, [r3, #4]
 8005144:	f001 f9fc 	bl	8006540 <_Balloc>
 8005148:	9006      	str	r0, [sp, #24]
 800514a:	2800      	cmp	r0, #0
 800514c:	f43f af13 	beq.w	8004f76 <_strtod_l+0x486>
 8005150:	9b08      	ldr	r3, [sp, #32]
 8005152:	300c      	adds	r0, #12
 8005154:	691a      	ldr	r2, [r3, #16]
 8005156:	f103 010c 	add.w	r1, r3, #12
 800515a:	3202      	adds	r2, #2
 800515c:	0092      	lsls	r2, r2, #2
 800515e:	f7ff fab1 	bl	80046c4 <memcpy>
 8005162:	ab1e      	add	r3, sp, #120	; 0x78
 8005164:	9301      	str	r3, [sp, #4]
 8005166:	ab1d      	add	r3, sp, #116	; 0x74
 8005168:	9300      	str	r3, [sp, #0]
 800516a:	4642      	mov	r2, r8
 800516c:	464b      	mov	r3, r9
 800516e:	4650      	mov	r0, sl
 8005170:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8005174:	f001 fdce 	bl	8006d14 <__d2b>
 8005178:	901c      	str	r0, [sp, #112]	; 0x70
 800517a:	2800      	cmp	r0, #0
 800517c:	f43f aefb 	beq.w	8004f76 <_strtod_l+0x486>
 8005180:	2101      	movs	r1, #1
 8005182:	4650      	mov	r0, sl
 8005184:	f001 fb20 	bl	80067c8 <__i2b>
 8005188:	4603      	mov	r3, r0
 800518a:	9004      	str	r0, [sp, #16]
 800518c:	2800      	cmp	r0, #0
 800518e:	f43f aef2 	beq.w	8004f76 <_strtod_l+0x486>
 8005192:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8005194:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005196:	2d00      	cmp	r5, #0
 8005198:	bfab      	itete	ge
 800519a:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800519c:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800519e:	18ee      	addge	r6, r5, r3
 80051a0:	1b5c      	sublt	r4, r3, r5
 80051a2:	9b05      	ldr	r3, [sp, #20]
 80051a4:	bfa8      	it	ge
 80051a6:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 80051a8:	eba5 0503 	sub.w	r5, r5, r3
 80051ac:	4415      	add	r5, r2
 80051ae:	4b71      	ldr	r3, [pc, #452]	; (8005374 <_strtod_l+0x884>)
 80051b0:	f105 35ff 	add.w	r5, r5, #4294967295
 80051b4:	bfb8      	it	lt
 80051b6:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80051b8:	429d      	cmp	r5, r3
 80051ba:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80051be:	f280 80c9 	bge.w	8005354 <_strtod_l+0x864>
 80051c2:	1b5b      	subs	r3, r3, r5
 80051c4:	2b1f      	cmp	r3, #31
 80051c6:	f04f 0701 	mov.w	r7, #1
 80051ca:	eba2 0203 	sub.w	r2, r2, r3
 80051ce:	f300 80b6 	bgt.w	800533e <_strtod_l+0x84e>
 80051d2:	2500      	movs	r5, #0
 80051d4:	fa07 f303 	lsl.w	r3, r7, r3
 80051d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80051da:	18b7      	adds	r7, r6, r2
 80051dc:	9b05      	ldr	r3, [sp, #20]
 80051de:	42be      	cmp	r6, r7
 80051e0:	4414      	add	r4, r2
 80051e2:	441c      	add	r4, r3
 80051e4:	4633      	mov	r3, r6
 80051e6:	bfa8      	it	ge
 80051e8:	463b      	movge	r3, r7
 80051ea:	42a3      	cmp	r3, r4
 80051ec:	bfa8      	it	ge
 80051ee:	4623      	movge	r3, r4
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	bfc2      	ittt	gt
 80051f4:	1aff      	subgt	r7, r7, r3
 80051f6:	1ae4      	subgt	r4, r4, r3
 80051f8:	1af6      	subgt	r6, r6, r3
 80051fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	dd17      	ble.n	8005230 <_strtod_l+0x740>
 8005200:	461a      	mov	r2, r3
 8005202:	4650      	mov	r0, sl
 8005204:	9904      	ldr	r1, [sp, #16]
 8005206:	f001 fb99 	bl	800693c <__pow5mult>
 800520a:	9004      	str	r0, [sp, #16]
 800520c:	2800      	cmp	r0, #0
 800520e:	f43f aeb2 	beq.w	8004f76 <_strtod_l+0x486>
 8005212:	4601      	mov	r1, r0
 8005214:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005216:	4650      	mov	r0, sl
 8005218:	f001 faec 	bl	80067f4 <__multiply>
 800521c:	9009      	str	r0, [sp, #36]	; 0x24
 800521e:	2800      	cmp	r0, #0
 8005220:	f43f aea9 	beq.w	8004f76 <_strtod_l+0x486>
 8005224:	4650      	mov	r0, sl
 8005226:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005228:	f001 f9ca 	bl	80065c0 <_Bfree>
 800522c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800522e:	931c      	str	r3, [sp, #112]	; 0x70
 8005230:	2f00      	cmp	r7, #0
 8005232:	f300 8093 	bgt.w	800535c <_strtod_l+0x86c>
 8005236:	9b07      	ldr	r3, [sp, #28]
 8005238:	2b00      	cmp	r3, #0
 800523a:	dd08      	ble.n	800524e <_strtod_l+0x75e>
 800523c:	4650      	mov	r0, sl
 800523e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005240:	9906      	ldr	r1, [sp, #24]
 8005242:	f001 fb7b 	bl	800693c <__pow5mult>
 8005246:	9006      	str	r0, [sp, #24]
 8005248:	2800      	cmp	r0, #0
 800524a:	f43f ae94 	beq.w	8004f76 <_strtod_l+0x486>
 800524e:	2c00      	cmp	r4, #0
 8005250:	dd08      	ble.n	8005264 <_strtod_l+0x774>
 8005252:	4622      	mov	r2, r4
 8005254:	4650      	mov	r0, sl
 8005256:	9906      	ldr	r1, [sp, #24]
 8005258:	f001 fbca 	bl	80069f0 <__lshift>
 800525c:	9006      	str	r0, [sp, #24]
 800525e:	2800      	cmp	r0, #0
 8005260:	f43f ae89 	beq.w	8004f76 <_strtod_l+0x486>
 8005264:	2e00      	cmp	r6, #0
 8005266:	dd08      	ble.n	800527a <_strtod_l+0x78a>
 8005268:	4632      	mov	r2, r6
 800526a:	4650      	mov	r0, sl
 800526c:	9904      	ldr	r1, [sp, #16]
 800526e:	f001 fbbf 	bl	80069f0 <__lshift>
 8005272:	9004      	str	r0, [sp, #16]
 8005274:	2800      	cmp	r0, #0
 8005276:	f43f ae7e 	beq.w	8004f76 <_strtod_l+0x486>
 800527a:	4650      	mov	r0, sl
 800527c:	9a06      	ldr	r2, [sp, #24]
 800527e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005280:	f001 fc3e 	bl	8006b00 <__mdiff>
 8005284:	4683      	mov	fp, r0
 8005286:	2800      	cmp	r0, #0
 8005288:	f43f ae75 	beq.w	8004f76 <_strtod_l+0x486>
 800528c:	2400      	movs	r4, #0
 800528e:	68c3      	ldr	r3, [r0, #12]
 8005290:	9904      	ldr	r1, [sp, #16]
 8005292:	60c4      	str	r4, [r0, #12]
 8005294:	930d      	str	r3, [sp, #52]	; 0x34
 8005296:	f001 fc17 	bl	8006ac8 <__mcmp>
 800529a:	42a0      	cmp	r0, r4
 800529c:	da70      	bge.n	8005380 <_strtod_l+0x890>
 800529e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80052a0:	ea53 0308 	orrs.w	r3, r3, r8
 80052a4:	f040 8096 	bne.w	80053d4 <_strtod_l+0x8e4>
 80052a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	f040 8091 	bne.w	80053d4 <_strtod_l+0x8e4>
 80052b2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80052b6:	0d1b      	lsrs	r3, r3, #20
 80052b8:	051b      	lsls	r3, r3, #20
 80052ba:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80052be:	f240 8089 	bls.w	80053d4 <_strtod_l+0x8e4>
 80052c2:	f8db 3014 	ldr.w	r3, [fp, #20]
 80052c6:	b923      	cbnz	r3, 80052d2 <_strtod_l+0x7e2>
 80052c8:	f8db 3010 	ldr.w	r3, [fp, #16]
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	f340 8081 	ble.w	80053d4 <_strtod_l+0x8e4>
 80052d2:	4659      	mov	r1, fp
 80052d4:	2201      	movs	r2, #1
 80052d6:	4650      	mov	r0, sl
 80052d8:	f001 fb8a 	bl	80069f0 <__lshift>
 80052dc:	9904      	ldr	r1, [sp, #16]
 80052de:	4683      	mov	fp, r0
 80052e0:	f001 fbf2 	bl	8006ac8 <__mcmp>
 80052e4:	2800      	cmp	r0, #0
 80052e6:	dd75      	ble.n	80053d4 <_strtod_l+0x8e4>
 80052e8:	9905      	ldr	r1, [sp, #20]
 80052ea:	464b      	mov	r3, r9
 80052ec:	4a22      	ldr	r2, [pc, #136]	; (8005378 <_strtod_l+0x888>)
 80052ee:	2900      	cmp	r1, #0
 80052f0:	f000 8091 	beq.w	8005416 <_strtod_l+0x926>
 80052f4:	ea02 0109 	and.w	r1, r2, r9
 80052f8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80052fc:	f300 808b 	bgt.w	8005416 <_strtod_l+0x926>
 8005300:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005304:	f77f aea9 	ble.w	800505a <_strtod_l+0x56a>
 8005308:	2300      	movs	r3, #0
 800530a:	4a1c      	ldr	r2, [pc, #112]	; (800537c <_strtod_l+0x88c>)
 800530c:	4640      	mov	r0, r8
 800530e:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8005312:	4649      	mov	r1, r9
 8005314:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005318:	f7fb f8e8 	bl	80004ec <__aeabi_dmul>
 800531c:	460b      	mov	r3, r1
 800531e:	4303      	orrs	r3, r0
 8005320:	bf08      	it	eq
 8005322:	2322      	moveq	r3, #34	; 0x22
 8005324:	4680      	mov	r8, r0
 8005326:	4689      	mov	r9, r1
 8005328:	bf08      	it	eq
 800532a:	f8ca 3000 	streq.w	r3, [sl]
 800532e:	e62d      	b.n	8004f8c <_strtod_l+0x49c>
 8005330:	f04f 32ff 	mov.w	r2, #4294967295
 8005334:	fa02 f303 	lsl.w	r3, r2, r3
 8005338:	ea03 0808 	and.w	r8, r3, r8
 800533c:	e6db      	b.n	80050f6 <_strtod_l+0x606>
 800533e:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8005342:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8005346:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800534a:	35e2      	adds	r5, #226	; 0xe2
 800534c:	fa07 f505 	lsl.w	r5, r7, r5
 8005350:	970f      	str	r7, [sp, #60]	; 0x3c
 8005352:	e742      	b.n	80051da <_strtod_l+0x6ea>
 8005354:	2301      	movs	r3, #1
 8005356:	2500      	movs	r5, #0
 8005358:	930f      	str	r3, [sp, #60]	; 0x3c
 800535a:	e73e      	b.n	80051da <_strtod_l+0x6ea>
 800535c:	463a      	mov	r2, r7
 800535e:	4650      	mov	r0, sl
 8005360:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005362:	f001 fb45 	bl	80069f0 <__lshift>
 8005366:	901c      	str	r0, [sp, #112]	; 0x70
 8005368:	2800      	cmp	r0, #0
 800536a:	f47f af64 	bne.w	8005236 <_strtod_l+0x746>
 800536e:	e602      	b.n	8004f76 <_strtod_l+0x486>
 8005370:	08007be0 	.word	0x08007be0
 8005374:	fffffc02 	.word	0xfffffc02
 8005378:	7ff00000 	.word	0x7ff00000
 800537c:	39500000 	.word	0x39500000
 8005380:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005384:	d166      	bne.n	8005454 <_strtod_l+0x964>
 8005386:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005388:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800538c:	b35a      	cbz	r2, 80053e6 <_strtod_l+0x8f6>
 800538e:	4a9c      	ldr	r2, [pc, #624]	; (8005600 <_strtod_l+0xb10>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d12c      	bne.n	80053ee <_strtod_l+0x8fe>
 8005394:	9b05      	ldr	r3, [sp, #20]
 8005396:	4640      	mov	r0, r8
 8005398:	b303      	cbz	r3, 80053dc <_strtod_l+0x8ec>
 800539a:	464b      	mov	r3, r9
 800539c:	4a99      	ldr	r2, [pc, #612]	; (8005604 <_strtod_l+0xb14>)
 800539e:	f04f 31ff 	mov.w	r1, #4294967295
 80053a2:	401a      	ands	r2, r3
 80053a4:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80053a8:	d81b      	bhi.n	80053e2 <_strtod_l+0x8f2>
 80053aa:	0d12      	lsrs	r2, r2, #20
 80053ac:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80053b0:	fa01 f303 	lsl.w	r3, r1, r3
 80053b4:	4298      	cmp	r0, r3
 80053b6:	d11a      	bne.n	80053ee <_strtod_l+0x8fe>
 80053b8:	4b93      	ldr	r3, [pc, #588]	; (8005608 <_strtod_l+0xb18>)
 80053ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053bc:	429a      	cmp	r2, r3
 80053be:	d102      	bne.n	80053c6 <_strtod_l+0x8d6>
 80053c0:	3001      	adds	r0, #1
 80053c2:	f43f add8 	beq.w	8004f76 <_strtod_l+0x486>
 80053c6:	f04f 0800 	mov.w	r8, #0
 80053ca:	4b8e      	ldr	r3, [pc, #568]	; (8005604 <_strtod_l+0xb14>)
 80053cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053ce:	401a      	ands	r2, r3
 80053d0:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80053d4:	9b05      	ldr	r3, [sp, #20]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d196      	bne.n	8005308 <_strtod_l+0x818>
 80053da:	e5d7      	b.n	8004f8c <_strtod_l+0x49c>
 80053dc:	f04f 33ff 	mov.w	r3, #4294967295
 80053e0:	e7e8      	b.n	80053b4 <_strtod_l+0x8c4>
 80053e2:	460b      	mov	r3, r1
 80053e4:	e7e6      	b.n	80053b4 <_strtod_l+0x8c4>
 80053e6:	ea53 0308 	orrs.w	r3, r3, r8
 80053ea:	f43f af7d 	beq.w	80052e8 <_strtod_l+0x7f8>
 80053ee:	b1e5      	cbz	r5, 800542a <_strtod_l+0x93a>
 80053f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053f2:	421d      	tst	r5, r3
 80053f4:	d0ee      	beq.n	80053d4 <_strtod_l+0x8e4>
 80053f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053f8:	4640      	mov	r0, r8
 80053fa:	4649      	mov	r1, r9
 80053fc:	9a05      	ldr	r2, [sp, #20]
 80053fe:	b1c3      	cbz	r3, 8005432 <_strtod_l+0x942>
 8005400:	f7ff fb53 	bl	8004aaa <sulp>
 8005404:	4602      	mov	r2, r0
 8005406:	460b      	mov	r3, r1
 8005408:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800540c:	f7fa feb8 	bl	8000180 <__adddf3>
 8005410:	4680      	mov	r8, r0
 8005412:	4689      	mov	r9, r1
 8005414:	e7de      	b.n	80053d4 <_strtod_l+0x8e4>
 8005416:	4013      	ands	r3, r2
 8005418:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800541c:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8005420:	f04f 38ff 	mov.w	r8, #4294967295
 8005424:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8005428:	e7d4      	b.n	80053d4 <_strtod_l+0x8e4>
 800542a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800542c:	ea13 0f08 	tst.w	r3, r8
 8005430:	e7e0      	b.n	80053f4 <_strtod_l+0x904>
 8005432:	f7ff fb3a 	bl	8004aaa <sulp>
 8005436:	4602      	mov	r2, r0
 8005438:	460b      	mov	r3, r1
 800543a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800543e:	f7fa fe9d 	bl	800017c <__aeabi_dsub>
 8005442:	2200      	movs	r2, #0
 8005444:	2300      	movs	r3, #0
 8005446:	4680      	mov	r8, r0
 8005448:	4689      	mov	r9, r1
 800544a:	f7fb fab7 	bl	80009bc <__aeabi_dcmpeq>
 800544e:	2800      	cmp	r0, #0
 8005450:	d0c0      	beq.n	80053d4 <_strtod_l+0x8e4>
 8005452:	e602      	b.n	800505a <_strtod_l+0x56a>
 8005454:	4658      	mov	r0, fp
 8005456:	9904      	ldr	r1, [sp, #16]
 8005458:	f001 fcb8 	bl	8006dcc <__ratio>
 800545c:	2200      	movs	r2, #0
 800545e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005462:	4606      	mov	r6, r0
 8005464:	460f      	mov	r7, r1
 8005466:	f7fb fabd 	bl	80009e4 <__aeabi_dcmple>
 800546a:	2800      	cmp	r0, #0
 800546c:	d075      	beq.n	800555a <_strtod_l+0xa6a>
 800546e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005470:	2b00      	cmp	r3, #0
 8005472:	d047      	beq.n	8005504 <_strtod_l+0xa14>
 8005474:	2600      	movs	r6, #0
 8005476:	4f65      	ldr	r7, [pc, #404]	; (800560c <_strtod_l+0xb1c>)
 8005478:	4d64      	ldr	r5, [pc, #400]	; (800560c <_strtod_l+0xb1c>)
 800547a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800547c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005480:	0d1b      	lsrs	r3, r3, #20
 8005482:	051b      	lsls	r3, r3, #20
 8005484:	930f      	str	r3, [sp, #60]	; 0x3c
 8005486:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005488:	4b61      	ldr	r3, [pc, #388]	; (8005610 <_strtod_l+0xb20>)
 800548a:	429a      	cmp	r2, r3
 800548c:	f040 80c8 	bne.w	8005620 <_strtod_l+0xb30>
 8005490:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005494:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8005498:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800549a:	4640      	mov	r0, r8
 800549c:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 80054a0:	4649      	mov	r1, r9
 80054a2:	f001 fbbd 	bl	8006c20 <__ulp>
 80054a6:	4602      	mov	r2, r0
 80054a8:	460b      	mov	r3, r1
 80054aa:	4630      	mov	r0, r6
 80054ac:	4639      	mov	r1, r7
 80054ae:	f7fb f81d 	bl	80004ec <__aeabi_dmul>
 80054b2:	4642      	mov	r2, r8
 80054b4:	464b      	mov	r3, r9
 80054b6:	f7fa fe63 	bl	8000180 <__adddf3>
 80054ba:	460b      	mov	r3, r1
 80054bc:	4951      	ldr	r1, [pc, #324]	; (8005604 <_strtod_l+0xb14>)
 80054be:	4a55      	ldr	r2, [pc, #340]	; (8005614 <_strtod_l+0xb24>)
 80054c0:	4019      	ands	r1, r3
 80054c2:	4291      	cmp	r1, r2
 80054c4:	4680      	mov	r8, r0
 80054c6:	d95e      	bls.n	8005586 <_strtod_l+0xa96>
 80054c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054ca:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d103      	bne.n	80054da <_strtod_l+0x9ea>
 80054d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054d4:	3301      	adds	r3, #1
 80054d6:	f43f ad4e 	beq.w	8004f76 <_strtod_l+0x486>
 80054da:	f04f 38ff 	mov.w	r8, #4294967295
 80054de:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8005608 <_strtod_l+0xb18>
 80054e2:	4650      	mov	r0, sl
 80054e4:	991c      	ldr	r1, [sp, #112]	; 0x70
 80054e6:	f001 f86b 	bl	80065c0 <_Bfree>
 80054ea:	4650      	mov	r0, sl
 80054ec:	9906      	ldr	r1, [sp, #24]
 80054ee:	f001 f867 	bl	80065c0 <_Bfree>
 80054f2:	4650      	mov	r0, sl
 80054f4:	9904      	ldr	r1, [sp, #16]
 80054f6:	f001 f863 	bl	80065c0 <_Bfree>
 80054fa:	4659      	mov	r1, fp
 80054fc:	4650      	mov	r0, sl
 80054fe:	f001 f85f 	bl	80065c0 <_Bfree>
 8005502:	e61c      	b.n	800513e <_strtod_l+0x64e>
 8005504:	f1b8 0f00 	cmp.w	r8, #0
 8005508:	d119      	bne.n	800553e <_strtod_l+0xa4e>
 800550a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800550c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005510:	b9e3      	cbnz	r3, 800554c <_strtod_l+0xa5c>
 8005512:	2200      	movs	r2, #0
 8005514:	4630      	mov	r0, r6
 8005516:	4639      	mov	r1, r7
 8005518:	4b3c      	ldr	r3, [pc, #240]	; (800560c <_strtod_l+0xb1c>)
 800551a:	f7fb fa59 	bl	80009d0 <__aeabi_dcmplt>
 800551e:	b9c8      	cbnz	r0, 8005554 <_strtod_l+0xa64>
 8005520:	2200      	movs	r2, #0
 8005522:	4630      	mov	r0, r6
 8005524:	4639      	mov	r1, r7
 8005526:	4b3c      	ldr	r3, [pc, #240]	; (8005618 <_strtod_l+0xb28>)
 8005528:	f7fa ffe0 	bl	80004ec <__aeabi_dmul>
 800552c:	4604      	mov	r4, r0
 800552e:	460d      	mov	r5, r1
 8005530:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005534:	9418      	str	r4, [sp, #96]	; 0x60
 8005536:	9319      	str	r3, [sp, #100]	; 0x64
 8005538:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800553c:	e79d      	b.n	800547a <_strtod_l+0x98a>
 800553e:	f1b8 0f01 	cmp.w	r8, #1
 8005542:	d103      	bne.n	800554c <_strtod_l+0xa5c>
 8005544:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005546:	2b00      	cmp	r3, #0
 8005548:	f43f ad87 	beq.w	800505a <_strtod_l+0x56a>
 800554c:	2600      	movs	r6, #0
 800554e:	2400      	movs	r4, #0
 8005550:	4f32      	ldr	r7, [pc, #200]	; (800561c <_strtod_l+0xb2c>)
 8005552:	e791      	b.n	8005478 <_strtod_l+0x988>
 8005554:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8005556:	4d30      	ldr	r5, [pc, #192]	; (8005618 <_strtod_l+0xb28>)
 8005558:	e7ea      	b.n	8005530 <_strtod_l+0xa40>
 800555a:	4b2f      	ldr	r3, [pc, #188]	; (8005618 <_strtod_l+0xb28>)
 800555c:	2200      	movs	r2, #0
 800555e:	4630      	mov	r0, r6
 8005560:	4639      	mov	r1, r7
 8005562:	f7fa ffc3 	bl	80004ec <__aeabi_dmul>
 8005566:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005568:	4604      	mov	r4, r0
 800556a:	460d      	mov	r5, r1
 800556c:	b933      	cbnz	r3, 800557c <_strtod_l+0xa8c>
 800556e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005572:	9010      	str	r0, [sp, #64]	; 0x40
 8005574:	9311      	str	r3, [sp, #68]	; 0x44
 8005576:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800557a:	e77e      	b.n	800547a <_strtod_l+0x98a>
 800557c:	4602      	mov	r2, r0
 800557e:	460b      	mov	r3, r1
 8005580:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8005584:	e7f7      	b.n	8005576 <_strtod_l+0xa86>
 8005586:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800558a:	9b05      	ldr	r3, [sp, #20]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d1a8      	bne.n	80054e2 <_strtod_l+0x9f2>
 8005590:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005594:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005596:	0d1b      	lsrs	r3, r3, #20
 8005598:	051b      	lsls	r3, r3, #20
 800559a:	429a      	cmp	r2, r3
 800559c:	d1a1      	bne.n	80054e2 <_strtod_l+0x9f2>
 800559e:	4620      	mov	r0, r4
 80055a0:	4629      	mov	r1, r5
 80055a2:	f7fb fa85 	bl	8000ab0 <__aeabi_d2lz>
 80055a6:	f7fa ff73 	bl	8000490 <__aeabi_l2d>
 80055aa:	4602      	mov	r2, r0
 80055ac:	460b      	mov	r3, r1
 80055ae:	4620      	mov	r0, r4
 80055b0:	4629      	mov	r1, r5
 80055b2:	f7fa fde3 	bl	800017c <__aeabi_dsub>
 80055b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80055b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80055bc:	ea43 0308 	orr.w	r3, r3, r8
 80055c0:	4313      	orrs	r3, r2
 80055c2:	4604      	mov	r4, r0
 80055c4:	460d      	mov	r5, r1
 80055c6:	d066      	beq.n	8005696 <_strtod_l+0xba6>
 80055c8:	a309      	add	r3, pc, #36	; (adr r3, 80055f0 <_strtod_l+0xb00>)
 80055ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ce:	f7fb f9ff 	bl	80009d0 <__aeabi_dcmplt>
 80055d2:	2800      	cmp	r0, #0
 80055d4:	f47f acda 	bne.w	8004f8c <_strtod_l+0x49c>
 80055d8:	a307      	add	r3, pc, #28	; (adr r3, 80055f8 <_strtod_l+0xb08>)
 80055da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055de:	4620      	mov	r0, r4
 80055e0:	4629      	mov	r1, r5
 80055e2:	f7fb fa13 	bl	8000a0c <__aeabi_dcmpgt>
 80055e6:	2800      	cmp	r0, #0
 80055e8:	f43f af7b 	beq.w	80054e2 <_strtod_l+0x9f2>
 80055ec:	e4ce      	b.n	8004f8c <_strtod_l+0x49c>
 80055ee:	bf00      	nop
 80055f0:	94a03595 	.word	0x94a03595
 80055f4:	3fdfffff 	.word	0x3fdfffff
 80055f8:	35afe535 	.word	0x35afe535
 80055fc:	3fe00000 	.word	0x3fe00000
 8005600:	000fffff 	.word	0x000fffff
 8005604:	7ff00000 	.word	0x7ff00000
 8005608:	7fefffff 	.word	0x7fefffff
 800560c:	3ff00000 	.word	0x3ff00000
 8005610:	7fe00000 	.word	0x7fe00000
 8005614:	7c9fffff 	.word	0x7c9fffff
 8005618:	3fe00000 	.word	0x3fe00000
 800561c:	bff00000 	.word	0xbff00000
 8005620:	9b05      	ldr	r3, [sp, #20]
 8005622:	b313      	cbz	r3, 800566a <_strtod_l+0xb7a>
 8005624:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005626:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800562a:	d81e      	bhi.n	800566a <_strtod_l+0xb7a>
 800562c:	a326      	add	r3, pc, #152	; (adr r3, 80056c8 <_strtod_l+0xbd8>)
 800562e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005632:	4620      	mov	r0, r4
 8005634:	4629      	mov	r1, r5
 8005636:	f7fb f9d5 	bl	80009e4 <__aeabi_dcmple>
 800563a:	b190      	cbz	r0, 8005662 <_strtod_l+0xb72>
 800563c:	4629      	mov	r1, r5
 800563e:	4620      	mov	r0, r4
 8005640:	f7fb fa16 	bl	8000a70 <__aeabi_d2uiz>
 8005644:	2801      	cmp	r0, #1
 8005646:	bf38      	it	cc
 8005648:	2001      	movcc	r0, #1
 800564a:	f7fa fed5 	bl	80003f8 <__aeabi_ui2d>
 800564e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005650:	4604      	mov	r4, r0
 8005652:	460d      	mov	r5, r1
 8005654:	b9d3      	cbnz	r3, 800568c <_strtod_l+0xb9c>
 8005656:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800565a:	9012      	str	r0, [sp, #72]	; 0x48
 800565c:	9313      	str	r3, [sp, #76]	; 0x4c
 800565e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8005662:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005664:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8005668:	1a9f      	subs	r7, r3, r2
 800566a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800566e:	f001 fad7 	bl	8006c20 <__ulp>
 8005672:	4602      	mov	r2, r0
 8005674:	460b      	mov	r3, r1
 8005676:	4630      	mov	r0, r6
 8005678:	4639      	mov	r1, r7
 800567a:	f7fa ff37 	bl	80004ec <__aeabi_dmul>
 800567e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005682:	f7fa fd7d 	bl	8000180 <__adddf3>
 8005686:	4680      	mov	r8, r0
 8005688:	4689      	mov	r9, r1
 800568a:	e77e      	b.n	800558a <_strtod_l+0xa9a>
 800568c:	4602      	mov	r2, r0
 800568e:	460b      	mov	r3, r1
 8005690:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8005694:	e7e3      	b.n	800565e <_strtod_l+0xb6e>
 8005696:	a30e      	add	r3, pc, #56	; (adr r3, 80056d0 <_strtod_l+0xbe0>)
 8005698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800569c:	f7fb f998 	bl	80009d0 <__aeabi_dcmplt>
 80056a0:	e7a1      	b.n	80055e6 <_strtod_l+0xaf6>
 80056a2:	2300      	movs	r3, #0
 80056a4:	930c      	str	r3, [sp, #48]	; 0x30
 80056a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80056a8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80056aa:	6013      	str	r3, [r2, #0]
 80056ac:	f7ff ba65 	b.w	8004b7a <_strtod_l+0x8a>
 80056b0:	2b65      	cmp	r3, #101	; 0x65
 80056b2:	f43f ab5c 	beq.w	8004d6e <_strtod_l+0x27e>
 80056b6:	2b45      	cmp	r3, #69	; 0x45
 80056b8:	f43f ab59 	beq.w	8004d6e <_strtod_l+0x27e>
 80056bc:	2201      	movs	r2, #1
 80056be:	f7ff bb8d 	b.w	8004ddc <_strtod_l+0x2ec>
 80056c2:	bf00      	nop
 80056c4:	f3af 8000 	nop.w
 80056c8:	ffc00000 	.word	0xffc00000
 80056cc:	41dfffff 	.word	0x41dfffff
 80056d0:	94a03595 	.word	0x94a03595
 80056d4:	3fcfffff 	.word	0x3fcfffff

080056d8 <strtod>:
 80056d8:	460a      	mov	r2, r1
 80056da:	4601      	mov	r1, r0
 80056dc:	4802      	ldr	r0, [pc, #8]	; (80056e8 <strtod+0x10>)
 80056de:	4b03      	ldr	r3, [pc, #12]	; (80056ec <strtod+0x14>)
 80056e0:	6800      	ldr	r0, [r0, #0]
 80056e2:	f7ff ba05 	b.w	8004af0 <_strtod_l>
 80056e6:	bf00      	nop
 80056e8:	20000018 	.word	0x20000018
 80056ec:	20000080 	.word	0x20000080

080056f0 <_strtol_l.isra.0>:
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056f6:	4686      	mov	lr, r0
 80056f8:	d001      	beq.n	80056fe <_strtol_l.isra.0+0xe>
 80056fa:	2b24      	cmp	r3, #36	; 0x24
 80056fc:	d906      	bls.n	800570c <_strtol_l.isra.0+0x1c>
 80056fe:	f7fe ffa7 	bl	8004650 <__errno>
 8005702:	2316      	movs	r3, #22
 8005704:	6003      	str	r3, [r0, #0]
 8005706:	2000      	movs	r0, #0
 8005708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800570c:	468c      	mov	ip, r1
 800570e:	4e3a      	ldr	r6, [pc, #232]	; (80057f8 <_strtol_l.isra.0+0x108>)
 8005710:	4660      	mov	r0, ip
 8005712:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8005716:	5da5      	ldrb	r5, [r4, r6]
 8005718:	f015 0508 	ands.w	r5, r5, #8
 800571c:	d1f8      	bne.n	8005710 <_strtol_l.isra.0+0x20>
 800571e:	2c2d      	cmp	r4, #45	; 0x2d
 8005720:	d133      	bne.n	800578a <_strtol_l.isra.0+0x9a>
 8005722:	f04f 0801 	mov.w	r8, #1
 8005726:	f89c 4000 	ldrb.w	r4, [ip]
 800572a:	f100 0c02 	add.w	ip, r0, #2
 800572e:	2b00      	cmp	r3, #0
 8005730:	d05d      	beq.n	80057ee <_strtol_l.isra.0+0xfe>
 8005732:	2b10      	cmp	r3, #16
 8005734:	d10c      	bne.n	8005750 <_strtol_l.isra.0+0x60>
 8005736:	2c30      	cmp	r4, #48	; 0x30
 8005738:	d10a      	bne.n	8005750 <_strtol_l.isra.0+0x60>
 800573a:	f89c 0000 	ldrb.w	r0, [ip]
 800573e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005742:	2858      	cmp	r0, #88	; 0x58
 8005744:	d14e      	bne.n	80057e4 <_strtol_l.isra.0+0xf4>
 8005746:	2310      	movs	r3, #16
 8005748:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800574c:	f10c 0c02 	add.w	ip, ip, #2
 8005750:	2500      	movs	r5, #0
 8005752:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8005756:	3f01      	subs	r7, #1
 8005758:	fbb7 f9f3 	udiv	r9, r7, r3
 800575c:	4628      	mov	r0, r5
 800575e:	fb03 7a19 	mls	sl, r3, r9, r7
 8005762:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8005766:	2e09      	cmp	r6, #9
 8005768:	d818      	bhi.n	800579c <_strtol_l.isra.0+0xac>
 800576a:	4634      	mov	r4, r6
 800576c:	42a3      	cmp	r3, r4
 800576e:	dd24      	ble.n	80057ba <_strtol_l.isra.0+0xca>
 8005770:	2d00      	cmp	r5, #0
 8005772:	db1f      	blt.n	80057b4 <_strtol_l.isra.0+0xc4>
 8005774:	4581      	cmp	r9, r0
 8005776:	d31d      	bcc.n	80057b4 <_strtol_l.isra.0+0xc4>
 8005778:	d101      	bne.n	800577e <_strtol_l.isra.0+0x8e>
 800577a:	45a2      	cmp	sl, r4
 800577c:	db1a      	blt.n	80057b4 <_strtol_l.isra.0+0xc4>
 800577e:	2501      	movs	r5, #1
 8005780:	fb00 4003 	mla	r0, r0, r3, r4
 8005784:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8005788:	e7eb      	b.n	8005762 <_strtol_l.isra.0+0x72>
 800578a:	2c2b      	cmp	r4, #43	; 0x2b
 800578c:	bf08      	it	eq
 800578e:	f89c 4000 	ldrbeq.w	r4, [ip]
 8005792:	46a8      	mov	r8, r5
 8005794:	bf08      	it	eq
 8005796:	f100 0c02 	addeq.w	ip, r0, #2
 800579a:	e7c8      	b.n	800572e <_strtol_l.isra.0+0x3e>
 800579c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80057a0:	2e19      	cmp	r6, #25
 80057a2:	d801      	bhi.n	80057a8 <_strtol_l.isra.0+0xb8>
 80057a4:	3c37      	subs	r4, #55	; 0x37
 80057a6:	e7e1      	b.n	800576c <_strtol_l.isra.0+0x7c>
 80057a8:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80057ac:	2e19      	cmp	r6, #25
 80057ae:	d804      	bhi.n	80057ba <_strtol_l.isra.0+0xca>
 80057b0:	3c57      	subs	r4, #87	; 0x57
 80057b2:	e7db      	b.n	800576c <_strtol_l.isra.0+0x7c>
 80057b4:	f04f 35ff 	mov.w	r5, #4294967295
 80057b8:	e7e4      	b.n	8005784 <_strtol_l.isra.0+0x94>
 80057ba:	2d00      	cmp	r5, #0
 80057bc:	da08      	bge.n	80057d0 <_strtol_l.isra.0+0xe0>
 80057be:	2322      	movs	r3, #34	; 0x22
 80057c0:	4638      	mov	r0, r7
 80057c2:	f8ce 3000 	str.w	r3, [lr]
 80057c6:	2a00      	cmp	r2, #0
 80057c8:	d09e      	beq.n	8005708 <_strtol_l.isra.0+0x18>
 80057ca:	f10c 31ff 	add.w	r1, ip, #4294967295
 80057ce:	e007      	b.n	80057e0 <_strtol_l.isra.0+0xf0>
 80057d0:	f1b8 0f00 	cmp.w	r8, #0
 80057d4:	d000      	beq.n	80057d8 <_strtol_l.isra.0+0xe8>
 80057d6:	4240      	negs	r0, r0
 80057d8:	2a00      	cmp	r2, #0
 80057da:	d095      	beq.n	8005708 <_strtol_l.isra.0+0x18>
 80057dc:	2d00      	cmp	r5, #0
 80057de:	d1f4      	bne.n	80057ca <_strtol_l.isra.0+0xda>
 80057e0:	6011      	str	r1, [r2, #0]
 80057e2:	e791      	b.n	8005708 <_strtol_l.isra.0+0x18>
 80057e4:	2430      	movs	r4, #48	; 0x30
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d1b2      	bne.n	8005750 <_strtol_l.isra.0+0x60>
 80057ea:	2308      	movs	r3, #8
 80057ec:	e7b0      	b.n	8005750 <_strtol_l.isra.0+0x60>
 80057ee:	2c30      	cmp	r4, #48	; 0x30
 80057f0:	d0a3      	beq.n	800573a <_strtol_l.isra.0+0x4a>
 80057f2:	230a      	movs	r3, #10
 80057f4:	e7ac      	b.n	8005750 <_strtol_l.isra.0+0x60>
 80057f6:	bf00      	nop
 80057f8:	08007aa1 	.word	0x08007aa1

080057fc <strtol>:
 80057fc:	4613      	mov	r3, r2
 80057fe:	460a      	mov	r2, r1
 8005800:	4601      	mov	r1, r0
 8005802:	4802      	ldr	r0, [pc, #8]	; (800580c <strtol+0x10>)
 8005804:	6800      	ldr	r0, [r0, #0]
 8005806:	f7ff bf73 	b.w	80056f0 <_strtol_l.isra.0>
 800580a:	bf00      	nop
 800580c:	20000018 	.word	0x20000018

08005810 <__swbuf_r>:
 8005810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005812:	460e      	mov	r6, r1
 8005814:	4614      	mov	r4, r2
 8005816:	4605      	mov	r5, r0
 8005818:	b118      	cbz	r0, 8005822 <__swbuf_r+0x12>
 800581a:	6983      	ldr	r3, [r0, #24]
 800581c:	b90b      	cbnz	r3, 8005822 <__swbuf_r+0x12>
 800581e:	f000 f9f3 	bl	8005c08 <__sinit>
 8005822:	4b21      	ldr	r3, [pc, #132]	; (80058a8 <__swbuf_r+0x98>)
 8005824:	429c      	cmp	r4, r3
 8005826:	d12b      	bne.n	8005880 <__swbuf_r+0x70>
 8005828:	686c      	ldr	r4, [r5, #4]
 800582a:	69a3      	ldr	r3, [r4, #24]
 800582c:	60a3      	str	r3, [r4, #8]
 800582e:	89a3      	ldrh	r3, [r4, #12]
 8005830:	071a      	lsls	r2, r3, #28
 8005832:	d52f      	bpl.n	8005894 <__swbuf_r+0x84>
 8005834:	6923      	ldr	r3, [r4, #16]
 8005836:	b36b      	cbz	r3, 8005894 <__swbuf_r+0x84>
 8005838:	6923      	ldr	r3, [r4, #16]
 800583a:	6820      	ldr	r0, [r4, #0]
 800583c:	b2f6      	uxtb	r6, r6
 800583e:	1ac0      	subs	r0, r0, r3
 8005840:	6963      	ldr	r3, [r4, #20]
 8005842:	4637      	mov	r7, r6
 8005844:	4283      	cmp	r3, r0
 8005846:	dc04      	bgt.n	8005852 <__swbuf_r+0x42>
 8005848:	4621      	mov	r1, r4
 800584a:	4628      	mov	r0, r5
 800584c:	f000 f948 	bl	8005ae0 <_fflush_r>
 8005850:	bb30      	cbnz	r0, 80058a0 <__swbuf_r+0x90>
 8005852:	68a3      	ldr	r3, [r4, #8]
 8005854:	3001      	adds	r0, #1
 8005856:	3b01      	subs	r3, #1
 8005858:	60a3      	str	r3, [r4, #8]
 800585a:	6823      	ldr	r3, [r4, #0]
 800585c:	1c5a      	adds	r2, r3, #1
 800585e:	6022      	str	r2, [r4, #0]
 8005860:	701e      	strb	r6, [r3, #0]
 8005862:	6963      	ldr	r3, [r4, #20]
 8005864:	4283      	cmp	r3, r0
 8005866:	d004      	beq.n	8005872 <__swbuf_r+0x62>
 8005868:	89a3      	ldrh	r3, [r4, #12]
 800586a:	07db      	lsls	r3, r3, #31
 800586c:	d506      	bpl.n	800587c <__swbuf_r+0x6c>
 800586e:	2e0a      	cmp	r6, #10
 8005870:	d104      	bne.n	800587c <__swbuf_r+0x6c>
 8005872:	4621      	mov	r1, r4
 8005874:	4628      	mov	r0, r5
 8005876:	f000 f933 	bl	8005ae0 <_fflush_r>
 800587a:	b988      	cbnz	r0, 80058a0 <__swbuf_r+0x90>
 800587c:	4638      	mov	r0, r7
 800587e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005880:	4b0a      	ldr	r3, [pc, #40]	; (80058ac <__swbuf_r+0x9c>)
 8005882:	429c      	cmp	r4, r3
 8005884:	d101      	bne.n	800588a <__swbuf_r+0x7a>
 8005886:	68ac      	ldr	r4, [r5, #8]
 8005888:	e7cf      	b.n	800582a <__swbuf_r+0x1a>
 800588a:	4b09      	ldr	r3, [pc, #36]	; (80058b0 <__swbuf_r+0xa0>)
 800588c:	429c      	cmp	r4, r3
 800588e:	bf08      	it	eq
 8005890:	68ec      	ldreq	r4, [r5, #12]
 8005892:	e7ca      	b.n	800582a <__swbuf_r+0x1a>
 8005894:	4621      	mov	r1, r4
 8005896:	4628      	mov	r0, r5
 8005898:	f000 f81e 	bl	80058d8 <__swsetup_r>
 800589c:	2800      	cmp	r0, #0
 800589e:	d0cb      	beq.n	8005838 <__swbuf_r+0x28>
 80058a0:	f04f 37ff 	mov.w	r7, #4294967295
 80058a4:	e7ea      	b.n	800587c <__swbuf_r+0x6c>
 80058a6:	bf00      	nop
 80058a8:	08007c28 	.word	0x08007c28
 80058ac:	08007c48 	.word	0x08007c48
 80058b0:	08007c08 	.word	0x08007c08

080058b4 <_write_r>:
 80058b4:	b538      	push	{r3, r4, r5, lr}
 80058b6:	4604      	mov	r4, r0
 80058b8:	4608      	mov	r0, r1
 80058ba:	4611      	mov	r1, r2
 80058bc:	2200      	movs	r2, #0
 80058be:	4d05      	ldr	r5, [pc, #20]	; (80058d4 <_write_r+0x20>)
 80058c0:	602a      	str	r2, [r5, #0]
 80058c2:	461a      	mov	r2, r3
 80058c4:	f7fc fe18 	bl	80024f8 <_write>
 80058c8:	1c43      	adds	r3, r0, #1
 80058ca:	d102      	bne.n	80058d2 <_write_r+0x1e>
 80058cc:	682b      	ldr	r3, [r5, #0]
 80058ce:	b103      	cbz	r3, 80058d2 <_write_r+0x1e>
 80058d0:	6023      	str	r3, [r4, #0]
 80058d2:	bd38      	pop	{r3, r4, r5, pc}
 80058d4:	20000468 	.word	0x20000468

080058d8 <__swsetup_r>:
 80058d8:	4b32      	ldr	r3, [pc, #200]	; (80059a4 <__swsetup_r+0xcc>)
 80058da:	b570      	push	{r4, r5, r6, lr}
 80058dc:	681d      	ldr	r5, [r3, #0]
 80058de:	4606      	mov	r6, r0
 80058e0:	460c      	mov	r4, r1
 80058e2:	b125      	cbz	r5, 80058ee <__swsetup_r+0x16>
 80058e4:	69ab      	ldr	r3, [r5, #24]
 80058e6:	b913      	cbnz	r3, 80058ee <__swsetup_r+0x16>
 80058e8:	4628      	mov	r0, r5
 80058ea:	f000 f98d 	bl	8005c08 <__sinit>
 80058ee:	4b2e      	ldr	r3, [pc, #184]	; (80059a8 <__swsetup_r+0xd0>)
 80058f0:	429c      	cmp	r4, r3
 80058f2:	d10f      	bne.n	8005914 <__swsetup_r+0x3c>
 80058f4:	686c      	ldr	r4, [r5, #4]
 80058f6:	89a3      	ldrh	r3, [r4, #12]
 80058f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80058fc:	0719      	lsls	r1, r3, #28
 80058fe:	d42c      	bmi.n	800595a <__swsetup_r+0x82>
 8005900:	06dd      	lsls	r5, r3, #27
 8005902:	d411      	bmi.n	8005928 <__swsetup_r+0x50>
 8005904:	2309      	movs	r3, #9
 8005906:	6033      	str	r3, [r6, #0]
 8005908:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800590c:	f04f 30ff 	mov.w	r0, #4294967295
 8005910:	81a3      	strh	r3, [r4, #12]
 8005912:	e03e      	b.n	8005992 <__swsetup_r+0xba>
 8005914:	4b25      	ldr	r3, [pc, #148]	; (80059ac <__swsetup_r+0xd4>)
 8005916:	429c      	cmp	r4, r3
 8005918:	d101      	bne.n	800591e <__swsetup_r+0x46>
 800591a:	68ac      	ldr	r4, [r5, #8]
 800591c:	e7eb      	b.n	80058f6 <__swsetup_r+0x1e>
 800591e:	4b24      	ldr	r3, [pc, #144]	; (80059b0 <__swsetup_r+0xd8>)
 8005920:	429c      	cmp	r4, r3
 8005922:	bf08      	it	eq
 8005924:	68ec      	ldreq	r4, [r5, #12]
 8005926:	e7e6      	b.n	80058f6 <__swsetup_r+0x1e>
 8005928:	0758      	lsls	r0, r3, #29
 800592a:	d512      	bpl.n	8005952 <__swsetup_r+0x7a>
 800592c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800592e:	b141      	cbz	r1, 8005942 <__swsetup_r+0x6a>
 8005930:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005934:	4299      	cmp	r1, r3
 8005936:	d002      	beq.n	800593e <__swsetup_r+0x66>
 8005938:	4630      	mov	r0, r6
 800593a:	f7fe fed9 	bl	80046f0 <_free_r>
 800593e:	2300      	movs	r3, #0
 8005940:	6363      	str	r3, [r4, #52]	; 0x34
 8005942:	89a3      	ldrh	r3, [r4, #12]
 8005944:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005948:	81a3      	strh	r3, [r4, #12]
 800594a:	2300      	movs	r3, #0
 800594c:	6063      	str	r3, [r4, #4]
 800594e:	6923      	ldr	r3, [r4, #16]
 8005950:	6023      	str	r3, [r4, #0]
 8005952:	89a3      	ldrh	r3, [r4, #12]
 8005954:	f043 0308 	orr.w	r3, r3, #8
 8005958:	81a3      	strh	r3, [r4, #12]
 800595a:	6923      	ldr	r3, [r4, #16]
 800595c:	b94b      	cbnz	r3, 8005972 <__swsetup_r+0x9a>
 800595e:	89a3      	ldrh	r3, [r4, #12]
 8005960:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005964:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005968:	d003      	beq.n	8005972 <__swsetup_r+0x9a>
 800596a:	4621      	mov	r1, r4
 800596c:	4630      	mov	r0, r6
 800596e:	f000 fd89 	bl	8006484 <__smakebuf_r>
 8005972:	89a0      	ldrh	r0, [r4, #12]
 8005974:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005978:	f010 0301 	ands.w	r3, r0, #1
 800597c:	d00a      	beq.n	8005994 <__swsetup_r+0xbc>
 800597e:	2300      	movs	r3, #0
 8005980:	60a3      	str	r3, [r4, #8]
 8005982:	6963      	ldr	r3, [r4, #20]
 8005984:	425b      	negs	r3, r3
 8005986:	61a3      	str	r3, [r4, #24]
 8005988:	6923      	ldr	r3, [r4, #16]
 800598a:	b943      	cbnz	r3, 800599e <__swsetup_r+0xc6>
 800598c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005990:	d1ba      	bne.n	8005908 <__swsetup_r+0x30>
 8005992:	bd70      	pop	{r4, r5, r6, pc}
 8005994:	0781      	lsls	r1, r0, #30
 8005996:	bf58      	it	pl
 8005998:	6963      	ldrpl	r3, [r4, #20]
 800599a:	60a3      	str	r3, [r4, #8]
 800599c:	e7f4      	b.n	8005988 <__swsetup_r+0xb0>
 800599e:	2000      	movs	r0, #0
 80059a0:	e7f7      	b.n	8005992 <__swsetup_r+0xba>
 80059a2:	bf00      	nop
 80059a4:	20000018 	.word	0x20000018
 80059a8:	08007c28 	.word	0x08007c28
 80059ac:	08007c48 	.word	0x08007c48
 80059b0:	08007c08 	.word	0x08007c08

080059b4 <_close_r>:
 80059b4:	b538      	push	{r3, r4, r5, lr}
 80059b6:	2300      	movs	r3, #0
 80059b8:	4d05      	ldr	r5, [pc, #20]	; (80059d0 <_close_r+0x1c>)
 80059ba:	4604      	mov	r4, r0
 80059bc:	4608      	mov	r0, r1
 80059be:	602b      	str	r3, [r5, #0]
 80059c0:	f7fc fdb6 	bl	8002530 <_close>
 80059c4:	1c43      	adds	r3, r0, #1
 80059c6:	d102      	bne.n	80059ce <_close_r+0x1a>
 80059c8:	682b      	ldr	r3, [r5, #0]
 80059ca:	b103      	cbz	r3, 80059ce <_close_r+0x1a>
 80059cc:	6023      	str	r3, [r4, #0]
 80059ce:	bd38      	pop	{r3, r4, r5, pc}
 80059d0:	20000468 	.word	0x20000468

080059d4 <__sflush_r>:
 80059d4:	898a      	ldrh	r2, [r1, #12]
 80059d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059da:	4605      	mov	r5, r0
 80059dc:	0710      	lsls	r0, r2, #28
 80059de:	460c      	mov	r4, r1
 80059e0:	d458      	bmi.n	8005a94 <__sflush_r+0xc0>
 80059e2:	684b      	ldr	r3, [r1, #4]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	dc05      	bgt.n	80059f4 <__sflush_r+0x20>
 80059e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	dc02      	bgt.n	80059f4 <__sflush_r+0x20>
 80059ee:	2000      	movs	r0, #0
 80059f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80059f6:	2e00      	cmp	r6, #0
 80059f8:	d0f9      	beq.n	80059ee <__sflush_r+0x1a>
 80059fa:	2300      	movs	r3, #0
 80059fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005a00:	682f      	ldr	r7, [r5, #0]
 8005a02:	602b      	str	r3, [r5, #0]
 8005a04:	d032      	beq.n	8005a6c <__sflush_r+0x98>
 8005a06:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005a08:	89a3      	ldrh	r3, [r4, #12]
 8005a0a:	075a      	lsls	r2, r3, #29
 8005a0c:	d505      	bpl.n	8005a1a <__sflush_r+0x46>
 8005a0e:	6863      	ldr	r3, [r4, #4]
 8005a10:	1ac0      	subs	r0, r0, r3
 8005a12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005a14:	b10b      	cbz	r3, 8005a1a <__sflush_r+0x46>
 8005a16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a18:	1ac0      	subs	r0, r0, r3
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a20:	4628      	mov	r0, r5
 8005a22:	6a21      	ldr	r1, [r4, #32]
 8005a24:	47b0      	blx	r6
 8005a26:	1c43      	adds	r3, r0, #1
 8005a28:	89a3      	ldrh	r3, [r4, #12]
 8005a2a:	d106      	bne.n	8005a3a <__sflush_r+0x66>
 8005a2c:	6829      	ldr	r1, [r5, #0]
 8005a2e:	291d      	cmp	r1, #29
 8005a30:	d82c      	bhi.n	8005a8c <__sflush_r+0xb8>
 8005a32:	4a2a      	ldr	r2, [pc, #168]	; (8005adc <__sflush_r+0x108>)
 8005a34:	40ca      	lsrs	r2, r1
 8005a36:	07d6      	lsls	r6, r2, #31
 8005a38:	d528      	bpl.n	8005a8c <__sflush_r+0xb8>
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	6062      	str	r2, [r4, #4]
 8005a3e:	6922      	ldr	r2, [r4, #16]
 8005a40:	04d9      	lsls	r1, r3, #19
 8005a42:	6022      	str	r2, [r4, #0]
 8005a44:	d504      	bpl.n	8005a50 <__sflush_r+0x7c>
 8005a46:	1c42      	adds	r2, r0, #1
 8005a48:	d101      	bne.n	8005a4e <__sflush_r+0x7a>
 8005a4a:	682b      	ldr	r3, [r5, #0]
 8005a4c:	b903      	cbnz	r3, 8005a50 <__sflush_r+0x7c>
 8005a4e:	6560      	str	r0, [r4, #84]	; 0x54
 8005a50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a52:	602f      	str	r7, [r5, #0]
 8005a54:	2900      	cmp	r1, #0
 8005a56:	d0ca      	beq.n	80059ee <__sflush_r+0x1a>
 8005a58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a5c:	4299      	cmp	r1, r3
 8005a5e:	d002      	beq.n	8005a66 <__sflush_r+0x92>
 8005a60:	4628      	mov	r0, r5
 8005a62:	f7fe fe45 	bl	80046f0 <_free_r>
 8005a66:	2000      	movs	r0, #0
 8005a68:	6360      	str	r0, [r4, #52]	; 0x34
 8005a6a:	e7c1      	b.n	80059f0 <__sflush_r+0x1c>
 8005a6c:	6a21      	ldr	r1, [r4, #32]
 8005a6e:	2301      	movs	r3, #1
 8005a70:	4628      	mov	r0, r5
 8005a72:	47b0      	blx	r6
 8005a74:	1c41      	adds	r1, r0, #1
 8005a76:	d1c7      	bne.n	8005a08 <__sflush_r+0x34>
 8005a78:	682b      	ldr	r3, [r5, #0]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d0c4      	beq.n	8005a08 <__sflush_r+0x34>
 8005a7e:	2b1d      	cmp	r3, #29
 8005a80:	d001      	beq.n	8005a86 <__sflush_r+0xb2>
 8005a82:	2b16      	cmp	r3, #22
 8005a84:	d101      	bne.n	8005a8a <__sflush_r+0xb6>
 8005a86:	602f      	str	r7, [r5, #0]
 8005a88:	e7b1      	b.n	80059ee <__sflush_r+0x1a>
 8005a8a:	89a3      	ldrh	r3, [r4, #12]
 8005a8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a90:	81a3      	strh	r3, [r4, #12]
 8005a92:	e7ad      	b.n	80059f0 <__sflush_r+0x1c>
 8005a94:	690f      	ldr	r7, [r1, #16]
 8005a96:	2f00      	cmp	r7, #0
 8005a98:	d0a9      	beq.n	80059ee <__sflush_r+0x1a>
 8005a9a:	0793      	lsls	r3, r2, #30
 8005a9c:	bf18      	it	ne
 8005a9e:	2300      	movne	r3, #0
 8005aa0:	680e      	ldr	r6, [r1, #0]
 8005aa2:	bf08      	it	eq
 8005aa4:	694b      	ldreq	r3, [r1, #20]
 8005aa6:	eba6 0807 	sub.w	r8, r6, r7
 8005aaa:	600f      	str	r7, [r1, #0]
 8005aac:	608b      	str	r3, [r1, #8]
 8005aae:	f1b8 0f00 	cmp.w	r8, #0
 8005ab2:	dd9c      	ble.n	80059ee <__sflush_r+0x1a>
 8005ab4:	4643      	mov	r3, r8
 8005ab6:	463a      	mov	r2, r7
 8005ab8:	4628      	mov	r0, r5
 8005aba:	6a21      	ldr	r1, [r4, #32]
 8005abc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005abe:	47b0      	blx	r6
 8005ac0:	2800      	cmp	r0, #0
 8005ac2:	dc06      	bgt.n	8005ad2 <__sflush_r+0xfe>
 8005ac4:	89a3      	ldrh	r3, [r4, #12]
 8005ac6:	f04f 30ff 	mov.w	r0, #4294967295
 8005aca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ace:	81a3      	strh	r3, [r4, #12]
 8005ad0:	e78e      	b.n	80059f0 <__sflush_r+0x1c>
 8005ad2:	4407      	add	r7, r0
 8005ad4:	eba8 0800 	sub.w	r8, r8, r0
 8005ad8:	e7e9      	b.n	8005aae <__sflush_r+0xda>
 8005ada:	bf00      	nop
 8005adc:	20400001 	.word	0x20400001

08005ae0 <_fflush_r>:
 8005ae0:	b538      	push	{r3, r4, r5, lr}
 8005ae2:	690b      	ldr	r3, [r1, #16]
 8005ae4:	4605      	mov	r5, r0
 8005ae6:	460c      	mov	r4, r1
 8005ae8:	b913      	cbnz	r3, 8005af0 <_fflush_r+0x10>
 8005aea:	2500      	movs	r5, #0
 8005aec:	4628      	mov	r0, r5
 8005aee:	bd38      	pop	{r3, r4, r5, pc}
 8005af0:	b118      	cbz	r0, 8005afa <_fflush_r+0x1a>
 8005af2:	6983      	ldr	r3, [r0, #24]
 8005af4:	b90b      	cbnz	r3, 8005afa <_fflush_r+0x1a>
 8005af6:	f000 f887 	bl	8005c08 <__sinit>
 8005afa:	4b14      	ldr	r3, [pc, #80]	; (8005b4c <_fflush_r+0x6c>)
 8005afc:	429c      	cmp	r4, r3
 8005afe:	d11b      	bne.n	8005b38 <_fflush_r+0x58>
 8005b00:	686c      	ldr	r4, [r5, #4]
 8005b02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d0ef      	beq.n	8005aea <_fflush_r+0xa>
 8005b0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005b0c:	07d0      	lsls	r0, r2, #31
 8005b0e:	d404      	bmi.n	8005b1a <_fflush_r+0x3a>
 8005b10:	0599      	lsls	r1, r3, #22
 8005b12:	d402      	bmi.n	8005b1a <_fflush_r+0x3a>
 8005b14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b16:	f000 fc7c 	bl	8006412 <__retarget_lock_acquire_recursive>
 8005b1a:	4628      	mov	r0, r5
 8005b1c:	4621      	mov	r1, r4
 8005b1e:	f7ff ff59 	bl	80059d4 <__sflush_r>
 8005b22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b24:	4605      	mov	r5, r0
 8005b26:	07da      	lsls	r2, r3, #31
 8005b28:	d4e0      	bmi.n	8005aec <_fflush_r+0xc>
 8005b2a:	89a3      	ldrh	r3, [r4, #12]
 8005b2c:	059b      	lsls	r3, r3, #22
 8005b2e:	d4dd      	bmi.n	8005aec <_fflush_r+0xc>
 8005b30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b32:	f000 fc6f 	bl	8006414 <__retarget_lock_release_recursive>
 8005b36:	e7d9      	b.n	8005aec <_fflush_r+0xc>
 8005b38:	4b05      	ldr	r3, [pc, #20]	; (8005b50 <_fflush_r+0x70>)
 8005b3a:	429c      	cmp	r4, r3
 8005b3c:	d101      	bne.n	8005b42 <_fflush_r+0x62>
 8005b3e:	68ac      	ldr	r4, [r5, #8]
 8005b40:	e7df      	b.n	8005b02 <_fflush_r+0x22>
 8005b42:	4b04      	ldr	r3, [pc, #16]	; (8005b54 <_fflush_r+0x74>)
 8005b44:	429c      	cmp	r4, r3
 8005b46:	bf08      	it	eq
 8005b48:	68ec      	ldreq	r4, [r5, #12]
 8005b4a:	e7da      	b.n	8005b02 <_fflush_r+0x22>
 8005b4c:	08007c28 	.word	0x08007c28
 8005b50:	08007c48 	.word	0x08007c48
 8005b54:	08007c08 	.word	0x08007c08

08005b58 <std>:
 8005b58:	2300      	movs	r3, #0
 8005b5a:	b510      	push	{r4, lr}
 8005b5c:	4604      	mov	r4, r0
 8005b5e:	e9c0 3300 	strd	r3, r3, [r0]
 8005b62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b66:	6083      	str	r3, [r0, #8]
 8005b68:	8181      	strh	r1, [r0, #12]
 8005b6a:	6643      	str	r3, [r0, #100]	; 0x64
 8005b6c:	81c2      	strh	r2, [r0, #14]
 8005b6e:	6183      	str	r3, [r0, #24]
 8005b70:	4619      	mov	r1, r3
 8005b72:	2208      	movs	r2, #8
 8005b74:	305c      	adds	r0, #92	; 0x5c
 8005b76:	f7fe fdb3 	bl	80046e0 <memset>
 8005b7a:	4b05      	ldr	r3, [pc, #20]	; (8005b90 <std+0x38>)
 8005b7c:	6224      	str	r4, [r4, #32]
 8005b7e:	6263      	str	r3, [r4, #36]	; 0x24
 8005b80:	4b04      	ldr	r3, [pc, #16]	; (8005b94 <std+0x3c>)
 8005b82:	62a3      	str	r3, [r4, #40]	; 0x28
 8005b84:	4b04      	ldr	r3, [pc, #16]	; (8005b98 <std+0x40>)
 8005b86:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005b88:	4b04      	ldr	r3, [pc, #16]	; (8005b9c <std+0x44>)
 8005b8a:	6323      	str	r3, [r4, #48]	; 0x30
 8005b8c:	bd10      	pop	{r4, pc}
 8005b8e:	bf00      	nop
 8005b90:	080049c9 	.word	0x080049c9
 8005b94:	080049eb 	.word	0x080049eb
 8005b98:	08004a23 	.word	0x08004a23
 8005b9c:	08004a47 	.word	0x08004a47

08005ba0 <_cleanup_r>:
 8005ba0:	4901      	ldr	r1, [pc, #4]	; (8005ba8 <_cleanup_r+0x8>)
 8005ba2:	f000 b8af 	b.w	8005d04 <_fwalk_reent>
 8005ba6:	bf00      	nop
 8005ba8:	08005ae1 	.word	0x08005ae1

08005bac <__sfmoreglue>:
 8005bac:	b570      	push	{r4, r5, r6, lr}
 8005bae:	2568      	movs	r5, #104	; 0x68
 8005bb0:	1e4a      	subs	r2, r1, #1
 8005bb2:	4355      	muls	r5, r2
 8005bb4:	460e      	mov	r6, r1
 8005bb6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005bba:	f7fe fde5 	bl	8004788 <_malloc_r>
 8005bbe:	4604      	mov	r4, r0
 8005bc0:	b140      	cbz	r0, 8005bd4 <__sfmoreglue+0x28>
 8005bc2:	2100      	movs	r1, #0
 8005bc4:	e9c0 1600 	strd	r1, r6, [r0]
 8005bc8:	300c      	adds	r0, #12
 8005bca:	60a0      	str	r0, [r4, #8]
 8005bcc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005bd0:	f7fe fd86 	bl	80046e0 <memset>
 8005bd4:	4620      	mov	r0, r4
 8005bd6:	bd70      	pop	{r4, r5, r6, pc}

08005bd8 <__sfp_lock_acquire>:
 8005bd8:	4801      	ldr	r0, [pc, #4]	; (8005be0 <__sfp_lock_acquire+0x8>)
 8005bda:	f000 bc1a 	b.w	8006412 <__retarget_lock_acquire_recursive>
 8005bde:	bf00      	nop
 8005be0:	20000464 	.word	0x20000464

08005be4 <__sfp_lock_release>:
 8005be4:	4801      	ldr	r0, [pc, #4]	; (8005bec <__sfp_lock_release+0x8>)
 8005be6:	f000 bc15 	b.w	8006414 <__retarget_lock_release_recursive>
 8005bea:	bf00      	nop
 8005bec:	20000464 	.word	0x20000464

08005bf0 <__sinit_lock_acquire>:
 8005bf0:	4801      	ldr	r0, [pc, #4]	; (8005bf8 <__sinit_lock_acquire+0x8>)
 8005bf2:	f000 bc0e 	b.w	8006412 <__retarget_lock_acquire_recursive>
 8005bf6:	bf00      	nop
 8005bf8:	2000045f 	.word	0x2000045f

08005bfc <__sinit_lock_release>:
 8005bfc:	4801      	ldr	r0, [pc, #4]	; (8005c04 <__sinit_lock_release+0x8>)
 8005bfe:	f000 bc09 	b.w	8006414 <__retarget_lock_release_recursive>
 8005c02:	bf00      	nop
 8005c04:	2000045f 	.word	0x2000045f

08005c08 <__sinit>:
 8005c08:	b510      	push	{r4, lr}
 8005c0a:	4604      	mov	r4, r0
 8005c0c:	f7ff fff0 	bl	8005bf0 <__sinit_lock_acquire>
 8005c10:	69a3      	ldr	r3, [r4, #24]
 8005c12:	b11b      	cbz	r3, 8005c1c <__sinit+0x14>
 8005c14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c18:	f7ff bff0 	b.w	8005bfc <__sinit_lock_release>
 8005c1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005c20:	6523      	str	r3, [r4, #80]	; 0x50
 8005c22:	4b13      	ldr	r3, [pc, #76]	; (8005c70 <__sinit+0x68>)
 8005c24:	4a13      	ldr	r2, [pc, #76]	; (8005c74 <__sinit+0x6c>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	62a2      	str	r2, [r4, #40]	; 0x28
 8005c2a:	42a3      	cmp	r3, r4
 8005c2c:	bf08      	it	eq
 8005c2e:	2301      	moveq	r3, #1
 8005c30:	4620      	mov	r0, r4
 8005c32:	bf08      	it	eq
 8005c34:	61a3      	streq	r3, [r4, #24]
 8005c36:	f000 f81f 	bl	8005c78 <__sfp>
 8005c3a:	6060      	str	r0, [r4, #4]
 8005c3c:	4620      	mov	r0, r4
 8005c3e:	f000 f81b 	bl	8005c78 <__sfp>
 8005c42:	60a0      	str	r0, [r4, #8]
 8005c44:	4620      	mov	r0, r4
 8005c46:	f000 f817 	bl	8005c78 <__sfp>
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	2104      	movs	r1, #4
 8005c4e:	60e0      	str	r0, [r4, #12]
 8005c50:	6860      	ldr	r0, [r4, #4]
 8005c52:	f7ff ff81 	bl	8005b58 <std>
 8005c56:	2201      	movs	r2, #1
 8005c58:	2109      	movs	r1, #9
 8005c5a:	68a0      	ldr	r0, [r4, #8]
 8005c5c:	f7ff ff7c 	bl	8005b58 <std>
 8005c60:	2202      	movs	r2, #2
 8005c62:	2112      	movs	r1, #18
 8005c64:	68e0      	ldr	r0, [r4, #12]
 8005c66:	f7ff ff77 	bl	8005b58 <std>
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	61a3      	str	r3, [r4, #24]
 8005c6e:	e7d1      	b.n	8005c14 <__sinit+0xc>
 8005c70:	08007ba4 	.word	0x08007ba4
 8005c74:	08005ba1 	.word	0x08005ba1

08005c78 <__sfp>:
 8005c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c7a:	4607      	mov	r7, r0
 8005c7c:	f7ff ffac 	bl	8005bd8 <__sfp_lock_acquire>
 8005c80:	4b1e      	ldr	r3, [pc, #120]	; (8005cfc <__sfp+0x84>)
 8005c82:	681e      	ldr	r6, [r3, #0]
 8005c84:	69b3      	ldr	r3, [r6, #24]
 8005c86:	b913      	cbnz	r3, 8005c8e <__sfp+0x16>
 8005c88:	4630      	mov	r0, r6
 8005c8a:	f7ff ffbd 	bl	8005c08 <__sinit>
 8005c8e:	3648      	adds	r6, #72	; 0x48
 8005c90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005c94:	3b01      	subs	r3, #1
 8005c96:	d503      	bpl.n	8005ca0 <__sfp+0x28>
 8005c98:	6833      	ldr	r3, [r6, #0]
 8005c9a:	b30b      	cbz	r3, 8005ce0 <__sfp+0x68>
 8005c9c:	6836      	ldr	r6, [r6, #0]
 8005c9e:	e7f7      	b.n	8005c90 <__sfp+0x18>
 8005ca0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005ca4:	b9d5      	cbnz	r5, 8005cdc <__sfp+0x64>
 8005ca6:	4b16      	ldr	r3, [pc, #88]	; (8005d00 <__sfp+0x88>)
 8005ca8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005cac:	60e3      	str	r3, [r4, #12]
 8005cae:	6665      	str	r5, [r4, #100]	; 0x64
 8005cb0:	f000 fbae 	bl	8006410 <__retarget_lock_init_recursive>
 8005cb4:	f7ff ff96 	bl	8005be4 <__sfp_lock_release>
 8005cb8:	2208      	movs	r2, #8
 8005cba:	4629      	mov	r1, r5
 8005cbc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005cc0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005cc4:	6025      	str	r5, [r4, #0]
 8005cc6:	61a5      	str	r5, [r4, #24]
 8005cc8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005ccc:	f7fe fd08 	bl	80046e0 <memset>
 8005cd0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005cd4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005cd8:	4620      	mov	r0, r4
 8005cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cdc:	3468      	adds	r4, #104	; 0x68
 8005cde:	e7d9      	b.n	8005c94 <__sfp+0x1c>
 8005ce0:	2104      	movs	r1, #4
 8005ce2:	4638      	mov	r0, r7
 8005ce4:	f7ff ff62 	bl	8005bac <__sfmoreglue>
 8005ce8:	4604      	mov	r4, r0
 8005cea:	6030      	str	r0, [r6, #0]
 8005cec:	2800      	cmp	r0, #0
 8005cee:	d1d5      	bne.n	8005c9c <__sfp+0x24>
 8005cf0:	f7ff ff78 	bl	8005be4 <__sfp_lock_release>
 8005cf4:	230c      	movs	r3, #12
 8005cf6:	603b      	str	r3, [r7, #0]
 8005cf8:	e7ee      	b.n	8005cd8 <__sfp+0x60>
 8005cfa:	bf00      	nop
 8005cfc:	08007ba4 	.word	0x08007ba4
 8005d00:	ffff0001 	.word	0xffff0001

08005d04 <_fwalk_reent>:
 8005d04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d08:	4606      	mov	r6, r0
 8005d0a:	4688      	mov	r8, r1
 8005d0c:	2700      	movs	r7, #0
 8005d0e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005d12:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005d16:	f1b9 0901 	subs.w	r9, r9, #1
 8005d1a:	d505      	bpl.n	8005d28 <_fwalk_reent+0x24>
 8005d1c:	6824      	ldr	r4, [r4, #0]
 8005d1e:	2c00      	cmp	r4, #0
 8005d20:	d1f7      	bne.n	8005d12 <_fwalk_reent+0xe>
 8005d22:	4638      	mov	r0, r7
 8005d24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d28:	89ab      	ldrh	r3, [r5, #12]
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d907      	bls.n	8005d3e <_fwalk_reent+0x3a>
 8005d2e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005d32:	3301      	adds	r3, #1
 8005d34:	d003      	beq.n	8005d3e <_fwalk_reent+0x3a>
 8005d36:	4629      	mov	r1, r5
 8005d38:	4630      	mov	r0, r6
 8005d3a:	47c0      	blx	r8
 8005d3c:	4307      	orrs	r7, r0
 8005d3e:	3568      	adds	r5, #104	; 0x68
 8005d40:	e7e9      	b.n	8005d16 <_fwalk_reent+0x12>

08005d42 <rshift>:
 8005d42:	6903      	ldr	r3, [r0, #16]
 8005d44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005d48:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8005d4c:	f100 0414 	add.w	r4, r0, #20
 8005d50:	ea4f 1261 	mov.w	r2, r1, asr #5
 8005d54:	dd46      	ble.n	8005de4 <rshift+0xa2>
 8005d56:	f011 011f 	ands.w	r1, r1, #31
 8005d5a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8005d5e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8005d62:	d10c      	bne.n	8005d7e <rshift+0x3c>
 8005d64:	4629      	mov	r1, r5
 8005d66:	f100 0710 	add.w	r7, r0, #16
 8005d6a:	42b1      	cmp	r1, r6
 8005d6c:	d335      	bcc.n	8005dda <rshift+0x98>
 8005d6e:	1a9b      	subs	r3, r3, r2
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	1eea      	subs	r2, r5, #3
 8005d74:	4296      	cmp	r6, r2
 8005d76:	bf38      	it	cc
 8005d78:	2300      	movcc	r3, #0
 8005d7a:	4423      	add	r3, r4
 8005d7c:	e015      	b.n	8005daa <rshift+0x68>
 8005d7e:	46a1      	mov	r9, r4
 8005d80:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8005d84:	f1c1 0820 	rsb	r8, r1, #32
 8005d88:	40cf      	lsrs	r7, r1
 8005d8a:	f105 0e04 	add.w	lr, r5, #4
 8005d8e:	4576      	cmp	r6, lr
 8005d90:	46f4      	mov	ip, lr
 8005d92:	d816      	bhi.n	8005dc2 <rshift+0x80>
 8005d94:	1a9b      	subs	r3, r3, r2
 8005d96:	009a      	lsls	r2, r3, #2
 8005d98:	3a04      	subs	r2, #4
 8005d9a:	3501      	adds	r5, #1
 8005d9c:	42ae      	cmp	r6, r5
 8005d9e:	bf38      	it	cc
 8005da0:	2200      	movcc	r2, #0
 8005da2:	18a3      	adds	r3, r4, r2
 8005da4:	50a7      	str	r7, [r4, r2]
 8005da6:	b107      	cbz	r7, 8005daa <rshift+0x68>
 8005da8:	3304      	adds	r3, #4
 8005daa:	42a3      	cmp	r3, r4
 8005dac:	eba3 0204 	sub.w	r2, r3, r4
 8005db0:	bf08      	it	eq
 8005db2:	2300      	moveq	r3, #0
 8005db4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005db8:	6102      	str	r2, [r0, #16]
 8005dba:	bf08      	it	eq
 8005dbc:	6143      	streq	r3, [r0, #20]
 8005dbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005dc2:	f8dc c000 	ldr.w	ip, [ip]
 8005dc6:	fa0c fc08 	lsl.w	ip, ip, r8
 8005dca:	ea4c 0707 	orr.w	r7, ip, r7
 8005dce:	f849 7b04 	str.w	r7, [r9], #4
 8005dd2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005dd6:	40cf      	lsrs	r7, r1
 8005dd8:	e7d9      	b.n	8005d8e <rshift+0x4c>
 8005dda:	f851 cb04 	ldr.w	ip, [r1], #4
 8005dde:	f847 cf04 	str.w	ip, [r7, #4]!
 8005de2:	e7c2      	b.n	8005d6a <rshift+0x28>
 8005de4:	4623      	mov	r3, r4
 8005de6:	e7e0      	b.n	8005daa <rshift+0x68>

08005de8 <__hexdig_fun>:
 8005de8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005dec:	2b09      	cmp	r3, #9
 8005dee:	d802      	bhi.n	8005df6 <__hexdig_fun+0xe>
 8005df0:	3820      	subs	r0, #32
 8005df2:	b2c0      	uxtb	r0, r0
 8005df4:	4770      	bx	lr
 8005df6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005dfa:	2b05      	cmp	r3, #5
 8005dfc:	d801      	bhi.n	8005e02 <__hexdig_fun+0x1a>
 8005dfe:	3847      	subs	r0, #71	; 0x47
 8005e00:	e7f7      	b.n	8005df2 <__hexdig_fun+0xa>
 8005e02:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8005e06:	2b05      	cmp	r3, #5
 8005e08:	d801      	bhi.n	8005e0e <__hexdig_fun+0x26>
 8005e0a:	3827      	subs	r0, #39	; 0x27
 8005e0c:	e7f1      	b.n	8005df2 <__hexdig_fun+0xa>
 8005e0e:	2000      	movs	r0, #0
 8005e10:	4770      	bx	lr
	...

08005e14 <__gethex>:
 8005e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e18:	b08b      	sub	sp, #44	; 0x2c
 8005e1a:	9306      	str	r3, [sp, #24]
 8005e1c:	4bb9      	ldr	r3, [pc, #740]	; (8006104 <__gethex+0x2f0>)
 8005e1e:	9002      	str	r0, [sp, #8]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	468b      	mov	fp, r1
 8005e24:	4618      	mov	r0, r3
 8005e26:	4690      	mov	r8, r2
 8005e28:	9303      	str	r3, [sp, #12]
 8005e2a:	f7fa f99b 	bl	8000164 <strlen>
 8005e2e:	4682      	mov	sl, r0
 8005e30:	9b03      	ldr	r3, [sp, #12]
 8005e32:	f8db 2000 	ldr.w	r2, [fp]
 8005e36:	4403      	add	r3, r0
 8005e38:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8005e3c:	9307      	str	r3, [sp, #28]
 8005e3e:	1c93      	adds	r3, r2, #2
 8005e40:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8005e44:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8005e48:	32fe      	adds	r2, #254	; 0xfe
 8005e4a:	18d1      	adds	r1, r2, r3
 8005e4c:	461f      	mov	r7, r3
 8005e4e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005e52:	9101      	str	r1, [sp, #4]
 8005e54:	2830      	cmp	r0, #48	; 0x30
 8005e56:	d0f8      	beq.n	8005e4a <__gethex+0x36>
 8005e58:	f7ff ffc6 	bl	8005de8 <__hexdig_fun>
 8005e5c:	4604      	mov	r4, r0
 8005e5e:	2800      	cmp	r0, #0
 8005e60:	d13a      	bne.n	8005ed8 <__gethex+0xc4>
 8005e62:	4652      	mov	r2, sl
 8005e64:	4638      	mov	r0, r7
 8005e66:	9903      	ldr	r1, [sp, #12]
 8005e68:	f7fe fe0d 	bl	8004a86 <strncmp>
 8005e6c:	4605      	mov	r5, r0
 8005e6e:	2800      	cmp	r0, #0
 8005e70:	d166      	bne.n	8005f40 <__gethex+0x12c>
 8005e72:	f817 000a 	ldrb.w	r0, [r7, sl]
 8005e76:	eb07 060a 	add.w	r6, r7, sl
 8005e7a:	f7ff ffb5 	bl	8005de8 <__hexdig_fun>
 8005e7e:	2800      	cmp	r0, #0
 8005e80:	d060      	beq.n	8005f44 <__gethex+0x130>
 8005e82:	4633      	mov	r3, r6
 8005e84:	7818      	ldrb	r0, [r3, #0]
 8005e86:	461f      	mov	r7, r3
 8005e88:	2830      	cmp	r0, #48	; 0x30
 8005e8a:	f103 0301 	add.w	r3, r3, #1
 8005e8e:	d0f9      	beq.n	8005e84 <__gethex+0x70>
 8005e90:	f7ff ffaa 	bl	8005de8 <__hexdig_fun>
 8005e94:	2301      	movs	r3, #1
 8005e96:	fab0 f480 	clz	r4, r0
 8005e9a:	4635      	mov	r5, r6
 8005e9c:	0964      	lsrs	r4, r4, #5
 8005e9e:	9301      	str	r3, [sp, #4]
 8005ea0:	463a      	mov	r2, r7
 8005ea2:	4616      	mov	r6, r2
 8005ea4:	7830      	ldrb	r0, [r6, #0]
 8005ea6:	3201      	adds	r2, #1
 8005ea8:	f7ff ff9e 	bl	8005de8 <__hexdig_fun>
 8005eac:	2800      	cmp	r0, #0
 8005eae:	d1f8      	bne.n	8005ea2 <__gethex+0x8e>
 8005eb0:	4652      	mov	r2, sl
 8005eb2:	4630      	mov	r0, r6
 8005eb4:	9903      	ldr	r1, [sp, #12]
 8005eb6:	f7fe fde6 	bl	8004a86 <strncmp>
 8005eba:	b980      	cbnz	r0, 8005ede <__gethex+0xca>
 8005ebc:	b94d      	cbnz	r5, 8005ed2 <__gethex+0xbe>
 8005ebe:	eb06 050a 	add.w	r5, r6, sl
 8005ec2:	462a      	mov	r2, r5
 8005ec4:	4616      	mov	r6, r2
 8005ec6:	7830      	ldrb	r0, [r6, #0]
 8005ec8:	3201      	adds	r2, #1
 8005eca:	f7ff ff8d 	bl	8005de8 <__hexdig_fun>
 8005ece:	2800      	cmp	r0, #0
 8005ed0:	d1f8      	bne.n	8005ec4 <__gethex+0xb0>
 8005ed2:	1bad      	subs	r5, r5, r6
 8005ed4:	00ad      	lsls	r5, r5, #2
 8005ed6:	e004      	b.n	8005ee2 <__gethex+0xce>
 8005ed8:	2400      	movs	r4, #0
 8005eda:	4625      	mov	r5, r4
 8005edc:	e7e0      	b.n	8005ea0 <__gethex+0x8c>
 8005ede:	2d00      	cmp	r5, #0
 8005ee0:	d1f7      	bne.n	8005ed2 <__gethex+0xbe>
 8005ee2:	7833      	ldrb	r3, [r6, #0]
 8005ee4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005ee8:	2b50      	cmp	r3, #80	; 0x50
 8005eea:	d139      	bne.n	8005f60 <__gethex+0x14c>
 8005eec:	7873      	ldrb	r3, [r6, #1]
 8005eee:	2b2b      	cmp	r3, #43	; 0x2b
 8005ef0:	d02a      	beq.n	8005f48 <__gethex+0x134>
 8005ef2:	2b2d      	cmp	r3, #45	; 0x2d
 8005ef4:	d02c      	beq.n	8005f50 <__gethex+0x13c>
 8005ef6:	f04f 0900 	mov.w	r9, #0
 8005efa:	1c71      	adds	r1, r6, #1
 8005efc:	7808      	ldrb	r0, [r1, #0]
 8005efe:	f7ff ff73 	bl	8005de8 <__hexdig_fun>
 8005f02:	1e43      	subs	r3, r0, #1
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	2b18      	cmp	r3, #24
 8005f08:	d82a      	bhi.n	8005f60 <__gethex+0x14c>
 8005f0a:	f1a0 0210 	sub.w	r2, r0, #16
 8005f0e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005f12:	f7ff ff69 	bl	8005de8 <__hexdig_fun>
 8005f16:	1e43      	subs	r3, r0, #1
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	2b18      	cmp	r3, #24
 8005f1c:	d91b      	bls.n	8005f56 <__gethex+0x142>
 8005f1e:	f1b9 0f00 	cmp.w	r9, #0
 8005f22:	d000      	beq.n	8005f26 <__gethex+0x112>
 8005f24:	4252      	negs	r2, r2
 8005f26:	4415      	add	r5, r2
 8005f28:	f8cb 1000 	str.w	r1, [fp]
 8005f2c:	b1d4      	cbz	r4, 8005f64 <__gethex+0x150>
 8005f2e:	9b01      	ldr	r3, [sp, #4]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	bf14      	ite	ne
 8005f34:	2700      	movne	r7, #0
 8005f36:	2706      	moveq	r7, #6
 8005f38:	4638      	mov	r0, r7
 8005f3a:	b00b      	add	sp, #44	; 0x2c
 8005f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f40:	463e      	mov	r6, r7
 8005f42:	4625      	mov	r5, r4
 8005f44:	2401      	movs	r4, #1
 8005f46:	e7cc      	b.n	8005ee2 <__gethex+0xce>
 8005f48:	f04f 0900 	mov.w	r9, #0
 8005f4c:	1cb1      	adds	r1, r6, #2
 8005f4e:	e7d5      	b.n	8005efc <__gethex+0xe8>
 8005f50:	f04f 0901 	mov.w	r9, #1
 8005f54:	e7fa      	b.n	8005f4c <__gethex+0x138>
 8005f56:	230a      	movs	r3, #10
 8005f58:	fb03 0202 	mla	r2, r3, r2, r0
 8005f5c:	3a10      	subs	r2, #16
 8005f5e:	e7d6      	b.n	8005f0e <__gethex+0xfa>
 8005f60:	4631      	mov	r1, r6
 8005f62:	e7e1      	b.n	8005f28 <__gethex+0x114>
 8005f64:	4621      	mov	r1, r4
 8005f66:	1bf3      	subs	r3, r6, r7
 8005f68:	3b01      	subs	r3, #1
 8005f6a:	2b07      	cmp	r3, #7
 8005f6c:	dc0a      	bgt.n	8005f84 <__gethex+0x170>
 8005f6e:	9802      	ldr	r0, [sp, #8]
 8005f70:	f000 fae6 	bl	8006540 <_Balloc>
 8005f74:	4604      	mov	r4, r0
 8005f76:	b940      	cbnz	r0, 8005f8a <__gethex+0x176>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	21de      	movs	r1, #222	; 0xde
 8005f7c:	4b62      	ldr	r3, [pc, #392]	; (8006108 <__gethex+0x2f4>)
 8005f7e:	4863      	ldr	r0, [pc, #396]	; (800610c <__gethex+0x2f8>)
 8005f80:	f001 fc3a 	bl	80077f8 <__assert_func>
 8005f84:	3101      	adds	r1, #1
 8005f86:	105b      	asrs	r3, r3, #1
 8005f88:	e7ef      	b.n	8005f6a <__gethex+0x156>
 8005f8a:	f04f 0b00 	mov.w	fp, #0
 8005f8e:	f100 0914 	add.w	r9, r0, #20
 8005f92:	f1ca 0301 	rsb	r3, sl, #1
 8005f96:	f8cd 9010 	str.w	r9, [sp, #16]
 8005f9a:	f8cd b004 	str.w	fp, [sp, #4]
 8005f9e:	9308      	str	r3, [sp, #32]
 8005fa0:	42b7      	cmp	r7, r6
 8005fa2:	d33f      	bcc.n	8006024 <__gethex+0x210>
 8005fa4:	9f04      	ldr	r7, [sp, #16]
 8005fa6:	9b01      	ldr	r3, [sp, #4]
 8005fa8:	f847 3b04 	str.w	r3, [r7], #4
 8005fac:	eba7 0709 	sub.w	r7, r7, r9
 8005fb0:	10bf      	asrs	r7, r7, #2
 8005fb2:	6127      	str	r7, [r4, #16]
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f000 fbb9 	bl	800672c <__hi0bits>
 8005fba:	017f      	lsls	r7, r7, #5
 8005fbc:	f8d8 6000 	ldr.w	r6, [r8]
 8005fc0:	1a3f      	subs	r7, r7, r0
 8005fc2:	42b7      	cmp	r7, r6
 8005fc4:	dd62      	ble.n	800608c <__gethex+0x278>
 8005fc6:	1bbf      	subs	r7, r7, r6
 8005fc8:	4639      	mov	r1, r7
 8005fca:	4620      	mov	r0, r4
 8005fcc:	f000 ff4f 	bl	8006e6e <__any_on>
 8005fd0:	4682      	mov	sl, r0
 8005fd2:	b1a8      	cbz	r0, 8006000 <__gethex+0x1ec>
 8005fd4:	f04f 0a01 	mov.w	sl, #1
 8005fd8:	1e7b      	subs	r3, r7, #1
 8005fda:	1159      	asrs	r1, r3, #5
 8005fdc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8005fe0:	f003 021f 	and.w	r2, r3, #31
 8005fe4:	fa0a f202 	lsl.w	r2, sl, r2
 8005fe8:	420a      	tst	r2, r1
 8005fea:	d009      	beq.n	8006000 <__gethex+0x1ec>
 8005fec:	4553      	cmp	r3, sl
 8005fee:	dd05      	ble.n	8005ffc <__gethex+0x1e8>
 8005ff0:	4620      	mov	r0, r4
 8005ff2:	1eb9      	subs	r1, r7, #2
 8005ff4:	f000 ff3b 	bl	8006e6e <__any_on>
 8005ff8:	2800      	cmp	r0, #0
 8005ffa:	d144      	bne.n	8006086 <__gethex+0x272>
 8005ffc:	f04f 0a02 	mov.w	sl, #2
 8006000:	4639      	mov	r1, r7
 8006002:	4620      	mov	r0, r4
 8006004:	f7ff fe9d 	bl	8005d42 <rshift>
 8006008:	443d      	add	r5, r7
 800600a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800600e:	42ab      	cmp	r3, r5
 8006010:	da4a      	bge.n	80060a8 <__gethex+0x294>
 8006012:	4621      	mov	r1, r4
 8006014:	9802      	ldr	r0, [sp, #8]
 8006016:	f000 fad3 	bl	80065c0 <_Bfree>
 800601a:	2300      	movs	r3, #0
 800601c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800601e:	27a3      	movs	r7, #163	; 0xa3
 8006020:	6013      	str	r3, [r2, #0]
 8006022:	e789      	b.n	8005f38 <__gethex+0x124>
 8006024:	1e73      	subs	r3, r6, #1
 8006026:	9a07      	ldr	r2, [sp, #28]
 8006028:	9305      	str	r3, [sp, #20]
 800602a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800602e:	4293      	cmp	r3, r2
 8006030:	d019      	beq.n	8006066 <__gethex+0x252>
 8006032:	f1bb 0f20 	cmp.w	fp, #32
 8006036:	d107      	bne.n	8006048 <__gethex+0x234>
 8006038:	9b04      	ldr	r3, [sp, #16]
 800603a:	9a01      	ldr	r2, [sp, #4]
 800603c:	f843 2b04 	str.w	r2, [r3], #4
 8006040:	9304      	str	r3, [sp, #16]
 8006042:	2300      	movs	r3, #0
 8006044:	469b      	mov	fp, r3
 8006046:	9301      	str	r3, [sp, #4]
 8006048:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800604c:	f7ff fecc 	bl	8005de8 <__hexdig_fun>
 8006050:	9b01      	ldr	r3, [sp, #4]
 8006052:	f000 000f 	and.w	r0, r0, #15
 8006056:	fa00 f00b 	lsl.w	r0, r0, fp
 800605a:	4303      	orrs	r3, r0
 800605c:	9301      	str	r3, [sp, #4]
 800605e:	f10b 0b04 	add.w	fp, fp, #4
 8006062:	9b05      	ldr	r3, [sp, #20]
 8006064:	e00d      	b.n	8006082 <__gethex+0x26e>
 8006066:	9b05      	ldr	r3, [sp, #20]
 8006068:	9a08      	ldr	r2, [sp, #32]
 800606a:	4413      	add	r3, r2
 800606c:	42bb      	cmp	r3, r7
 800606e:	d3e0      	bcc.n	8006032 <__gethex+0x21e>
 8006070:	4618      	mov	r0, r3
 8006072:	4652      	mov	r2, sl
 8006074:	9903      	ldr	r1, [sp, #12]
 8006076:	9309      	str	r3, [sp, #36]	; 0x24
 8006078:	f7fe fd05 	bl	8004a86 <strncmp>
 800607c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800607e:	2800      	cmp	r0, #0
 8006080:	d1d7      	bne.n	8006032 <__gethex+0x21e>
 8006082:	461e      	mov	r6, r3
 8006084:	e78c      	b.n	8005fa0 <__gethex+0x18c>
 8006086:	f04f 0a03 	mov.w	sl, #3
 800608a:	e7b9      	b.n	8006000 <__gethex+0x1ec>
 800608c:	da09      	bge.n	80060a2 <__gethex+0x28e>
 800608e:	1bf7      	subs	r7, r6, r7
 8006090:	4621      	mov	r1, r4
 8006092:	463a      	mov	r2, r7
 8006094:	9802      	ldr	r0, [sp, #8]
 8006096:	f000 fcab 	bl	80069f0 <__lshift>
 800609a:	4604      	mov	r4, r0
 800609c:	1bed      	subs	r5, r5, r7
 800609e:	f100 0914 	add.w	r9, r0, #20
 80060a2:	f04f 0a00 	mov.w	sl, #0
 80060a6:	e7b0      	b.n	800600a <__gethex+0x1f6>
 80060a8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80060ac:	42a8      	cmp	r0, r5
 80060ae:	dd71      	ble.n	8006194 <__gethex+0x380>
 80060b0:	1b45      	subs	r5, r0, r5
 80060b2:	42ae      	cmp	r6, r5
 80060b4:	dc34      	bgt.n	8006120 <__gethex+0x30c>
 80060b6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80060ba:	2b02      	cmp	r3, #2
 80060bc:	d028      	beq.n	8006110 <__gethex+0x2fc>
 80060be:	2b03      	cmp	r3, #3
 80060c0:	d02a      	beq.n	8006118 <__gethex+0x304>
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d115      	bne.n	80060f2 <__gethex+0x2de>
 80060c6:	42ae      	cmp	r6, r5
 80060c8:	d113      	bne.n	80060f2 <__gethex+0x2de>
 80060ca:	2e01      	cmp	r6, #1
 80060cc:	d10b      	bne.n	80060e6 <__gethex+0x2d2>
 80060ce:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80060d2:	9a06      	ldr	r2, [sp, #24]
 80060d4:	2762      	movs	r7, #98	; 0x62
 80060d6:	6013      	str	r3, [r2, #0]
 80060d8:	2301      	movs	r3, #1
 80060da:	6123      	str	r3, [r4, #16]
 80060dc:	f8c9 3000 	str.w	r3, [r9]
 80060e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80060e2:	601c      	str	r4, [r3, #0]
 80060e4:	e728      	b.n	8005f38 <__gethex+0x124>
 80060e6:	4620      	mov	r0, r4
 80060e8:	1e71      	subs	r1, r6, #1
 80060ea:	f000 fec0 	bl	8006e6e <__any_on>
 80060ee:	2800      	cmp	r0, #0
 80060f0:	d1ed      	bne.n	80060ce <__gethex+0x2ba>
 80060f2:	4621      	mov	r1, r4
 80060f4:	9802      	ldr	r0, [sp, #8]
 80060f6:	f000 fa63 	bl	80065c0 <_Bfree>
 80060fa:	2300      	movs	r3, #0
 80060fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80060fe:	2750      	movs	r7, #80	; 0x50
 8006100:	6013      	str	r3, [r2, #0]
 8006102:	e719      	b.n	8005f38 <__gethex+0x124>
 8006104:	08007ce4 	.word	0x08007ce4
 8006108:	08007c68 	.word	0x08007c68
 800610c:	08007c79 	.word	0x08007c79
 8006110:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006112:	2b00      	cmp	r3, #0
 8006114:	d1ed      	bne.n	80060f2 <__gethex+0x2de>
 8006116:	e7da      	b.n	80060ce <__gethex+0x2ba>
 8006118:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800611a:	2b00      	cmp	r3, #0
 800611c:	d1d7      	bne.n	80060ce <__gethex+0x2ba>
 800611e:	e7e8      	b.n	80060f2 <__gethex+0x2de>
 8006120:	1e6f      	subs	r7, r5, #1
 8006122:	f1ba 0f00 	cmp.w	sl, #0
 8006126:	d132      	bne.n	800618e <__gethex+0x37a>
 8006128:	b127      	cbz	r7, 8006134 <__gethex+0x320>
 800612a:	4639      	mov	r1, r7
 800612c:	4620      	mov	r0, r4
 800612e:	f000 fe9e 	bl	8006e6e <__any_on>
 8006132:	4682      	mov	sl, r0
 8006134:	2101      	movs	r1, #1
 8006136:	117b      	asrs	r3, r7, #5
 8006138:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800613c:	f007 071f 	and.w	r7, r7, #31
 8006140:	fa01 f707 	lsl.w	r7, r1, r7
 8006144:	421f      	tst	r7, r3
 8006146:	f04f 0702 	mov.w	r7, #2
 800614a:	4629      	mov	r1, r5
 800614c:	4620      	mov	r0, r4
 800614e:	bf18      	it	ne
 8006150:	f04a 0a02 	orrne.w	sl, sl, #2
 8006154:	1b76      	subs	r6, r6, r5
 8006156:	f7ff fdf4 	bl	8005d42 <rshift>
 800615a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800615e:	f1ba 0f00 	cmp.w	sl, #0
 8006162:	d048      	beq.n	80061f6 <__gethex+0x3e2>
 8006164:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006168:	2b02      	cmp	r3, #2
 800616a:	d015      	beq.n	8006198 <__gethex+0x384>
 800616c:	2b03      	cmp	r3, #3
 800616e:	d017      	beq.n	80061a0 <__gethex+0x38c>
 8006170:	2b01      	cmp	r3, #1
 8006172:	d109      	bne.n	8006188 <__gethex+0x374>
 8006174:	f01a 0f02 	tst.w	sl, #2
 8006178:	d006      	beq.n	8006188 <__gethex+0x374>
 800617a:	f8d9 0000 	ldr.w	r0, [r9]
 800617e:	ea4a 0a00 	orr.w	sl, sl, r0
 8006182:	f01a 0f01 	tst.w	sl, #1
 8006186:	d10e      	bne.n	80061a6 <__gethex+0x392>
 8006188:	f047 0710 	orr.w	r7, r7, #16
 800618c:	e033      	b.n	80061f6 <__gethex+0x3e2>
 800618e:	f04f 0a01 	mov.w	sl, #1
 8006192:	e7cf      	b.n	8006134 <__gethex+0x320>
 8006194:	2701      	movs	r7, #1
 8006196:	e7e2      	b.n	800615e <__gethex+0x34a>
 8006198:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800619a:	f1c3 0301 	rsb	r3, r3, #1
 800619e:	9315      	str	r3, [sp, #84]	; 0x54
 80061a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d0f0      	beq.n	8006188 <__gethex+0x374>
 80061a6:	f04f 0c00 	mov.w	ip, #0
 80061aa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80061ae:	f104 0314 	add.w	r3, r4, #20
 80061b2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80061b6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80061ba:	4618      	mov	r0, r3
 80061bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80061c0:	f1b2 3fff 	cmp.w	r2, #4294967295
 80061c4:	d01c      	beq.n	8006200 <__gethex+0x3ec>
 80061c6:	3201      	adds	r2, #1
 80061c8:	6002      	str	r2, [r0, #0]
 80061ca:	2f02      	cmp	r7, #2
 80061cc:	f104 0314 	add.w	r3, r4, #20
 80061d0:	d13d      	bne.n	800624e <__gethex+0x43a>
 80061d2:	f8d8 2000 	ldr.w	r2, [r8]
 80061d6:	3a01      	subs	r2, #1
 80061d8:	42b2      	cmp	r2, r6
 80061da:	d10a      	bne.n	80061f2 <__gethex+0x3de>
 80061dc:	2201      	movs	r2, #1
 80061de:	1171      	asrs	r1, r6, #5
 80061e0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80061e4:	f006 061f 	and.w	r6, r6, #31
 80061e8:	fa02 f606 	lsl.w	r6, r2, r6
 80061ec:	421e      	tst	r6, r3
 80061ee:	bf18      	it	ne
 80061f0:	4617      	movne	r7, r2
 80061f2:	f047 0720 	orr.w	r7, r7, #32
 80061f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80061f8:	601c      	str	r4, [r3, #0]
 80061fa:	9b06      	ldr	r3, [sp, #24]
 80061fc:	601d      	str	r5, [r3, #0]
 80061fe:	e69b      	b.n	8005f38 <__gethex+0x124>
 8006200:	4299      	cmp	r1, r3
 8006202:	f843 cc04 	str.w	ip, [r3, #-4]
 8006206:	d8d8      	bhi.n	80061ba <__gethex+0x3a6>
 8006208:	68a3      	ldr	r3, [r4, #8]
 800620a:	459b      	cmp	fp, r3
 800620c:	db17      	blt.n	800623e <__gethex+0x42a>
 800620e:	6861      	ldr	r1, [r4, #4]
 8006210:	9802      	ldr	r0, [sp, #8]
 8006212:	3101      	adds	r1, #1
 8006214:	f000 f994 	bl	8006540 <_Balloc>
 8006218:	4681      	mov	r9, r0
 800621a:	b918      	cbnz	r0, 8006224 <__gethex+0x410>
 800621c:	4602      	mov	r2, r0
 800621e:	2184      	movs	r1, #132	; 0x84
 8006220:	4b19      	ldr	r3, [pc, #100]	; (8006288 <__gethex+0x474>)
 8006222:	e6ac      	b.n	8005f7e <__gethex+0x16a>
 8006224:	6922      	ldr	r2, [r4, #16]
 8006226:	f104 010c 	add.w	r1, r4, #12
 800622a:	3202      	adds	r2, #2
 800622c:	0092      	lsls	r2, r2, #2
 800622e:	300c      	adds	r0, #12
 8006230:	f7fe fa48 	bl	80046c4 <memcpy>
 8006234:	4621      	mov	r1, r4
 8006236:	9802      	ldr	r0, [sp, #8]
 8006238:	f000 f9c2 	bl	80065c0 <_Bfree>
 800623c:	464c      	mov	r4, r9
 800623e:	6923      	ldr	r3, [r4, #16]
 8006240:	1c5a      	adds	r2, r3, #1
 8006242:	6122      	str	r2, [r4, #16]
 8006244:	2201      	movs	r2, #1
 8006246:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800624a:	615a      	str	r2, [r3, #20]
 800624c:	e7bd      	b.n	80061ca <__gethex+0x3b6>
 800624e:	6922      	ldr	r2, [r4, #16]
 8006250:	455a      	cmp	r2, fp
 8006252:	dd0b      	ble.n	800626c <__gethex+0x458>
 8006254:	2101      	movs	r1, #1
 8006256:	4620      	mov	r0, r4
 8006258:	f7ff fd73 	bl	8005d42 <rshift>
 800625c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006260:	3501      	adds	r5, #1
 8006262:	42ab      	cmp	r3, r5
 8006264:	f6ff aed5 	blt.w	8006012 <__gethex+0x1fe>
 8006268:	2701      	movs	r7, #1
 800626a:	e7c2      	b.n	80061f2 <__gethex+0x3de>
 800626c:	f016 061f 	ands.w	r6, r6, #31
 8006270:	d0fa      	beq.n	8006268 <__gethex+0x454>
 8006272:	449a      	add	sl, r3
 8006274:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8006278:	f000 fa58 	bl	800672c <__hi0bits>
 800627c:	f1c6 0620 	rsb	r6, r6, #32
 8006280:	42b0      	cmp	r0, r6
 8006282:	dbe7      	blt.n	8006254 <__gethex+0x440>
 8006284:	e7f0      	b.n	8006268 <__gethex+0x454>
 8006286:	bf00      	nop
 8006288:	08007c68 	.word	0x08007c68

0800628c <L_shift>:
 800628c:	f1c2 0208 	rsb	r2, r2, #8
 8006290:	0092      	lsls	r2, r2, #2
 8006292:	b570      	push	{r4, r5, r6, lr}
 8006294:	f1c2 0620 	rsb	r6, r2, #32
 8006298:	6843      	ldr	r3, [r0, #4]
 800629a:	6804      	ldr	r4, [r0, #0]
 800629c:	fa03 f506 	lsl.w	r5, r3, r6
 80062a0:	432c      	orrs	r4, r5
 80062a2:	40d3      	lsrs	r3, r2
 80062a4:	6004      	str	r4, [r0, #0]
 80062a6:	f840 3f04 	str.w	r3, [r0, #4]!
 80062aa:	4288      	cmp	r0, r1
 80062ac:	d3f4      	bcc.n	8006298 <L_shift+0xc>
 80062ae:	bd70      	pop	{r4, r5, r6, pc}

080062b0 <__match>:
 80062b0:	b530      	push	{r4, r5, lr}
 80062b2:	6803      	ldr	r3, [r0, #0]
 80062b4:	3301      	adds	r3, #1
 80062b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062ba:	b914      	cbnz	r4, 80062c2 <__match+0x12>
 80062bc:	6003      	str	r3, [r0, #0]
 80062be:	2001      	movs	r0, #1
 80062c0:	bd30      	pop	{r4, r5, pc}
 80062c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062c6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80062ca:	2d19      	cmp	r5, #25
 80062cc:	bf98      	it	ls
 80062ce:	3220      	addls	r2, #32
 80062d0:	42a2      	cmp	r2, r4
 80062d2:	d0f0      	beq.n	80062b6 <__match+0x6>
 80062d4:	2000      	movs	r0, #0
 80062d6:	e7f3      	b.n	80062c0 <__match+0x10>

080062d8 <__hexnan>:
 80062d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062dc:	2500      	movs	r5, #0
 80062de:	680b      	ldr	r3, [r1, #0]
 80062e0:	4682      	mov	sl, r0
 80062e2:	115e      	asrs	r6, r3, #5
 80062e4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80062e8:	f013 031f 	ands.w	r3, r3, #31
 80062ec:	bf18      	it	ne
 80062ee:	3604      	addne	r6, #4
 80062f0:	1f37      	subs	r7, r6, #4
 80062f2:	4690      	mov	r8, r2
 80062f4:	46b9      	mov	r9, r7
 80062f6:	463c      	mov	r4, r7
 80062f8:	46ab      	mov	fp, r5
 80062fa:	b087      	sub	sp, #28
 80062fc:	6801      	ldr	r1, [r0, #0]
 80062fe:	9301      	str	r3, [sp, #4]
 8006300:	f846 5c04 	str.w	r5, [r6, #-4]
 8006304:	9502      	str	r5, [sp, #8]
 8006306:	784a      	ldrb	r2, [r1, #1]
 8006308:	1c4b      	adds	r3, r1, #1
 800630a:	9303      	str	r3, [sp, #12]
 800630c:	b342      	cbz	r2, 8006360 <__hexnan+0x88>
 800630e:	4610      	mov	r0, r2
 8006310:	9105      	str	r1, [sp, #20]
 8006312:	9204      	str	r2, [sp, #16]
 8006314:	f7ff fd68 	bl	8005de8 <__hexdig_fun>
 8006318:	2800      	cmp	r0, #0
 800631a:	d14f      	bne.n	80063bc <__hexnan+0xe4>
 800631c:	9a04      	ldr	r2, [sp, #16]
 800631e:	9905      	ldr	r1, [sp, #20]
 8006320:	2a20      	cmp	r2, #32
 8006322:	d818      	bhi.n	8006356 <__hexnan+0x7e>
 8006324:	9b02      	ldr	r3, [sp, #8]
 8006326:	459b      	cmp	fp, r3
 8006328:	dd13      	ble.n	8006352 <__hexnan+0x7a>
 800632a:	454c      	cmp	r4, r9
 800632c:	d206      	bcs.n	800633c <__hexnan+0x64>
 800632e:	2d07      	cmp	r5, #7
 8006330:	dc04      	bgt.n	800633c <__hexnan+0x64>
 8006332:	462a      	mov	r2, r5
 8006334:	4649      	mov	r1, r9
 8006336:	4620      	mov	r0, r4
 8006338:	f7ff ffa8 	bl	800628c <L_shift>
 800633c:	4544      	cmp	r4, r8
 800633e:	d950      	bls.n	80063e2 <__hexnan+0x10a>
 8006340:	2300      	movs	r3, #0
 8006342:	f1a4 0904 	sub.w	r9, r4, #4
 8006346:	f844 3c04 	str.w	r3, [r4, #-4]
 800634a:	461d      	mov	r5, r3
 800634c:	464c      	mov	r4, r9
 800634e:	f8cd b008 	str.w	fp, [sp, #8]
 8006352:	9903      	ldr	r1, [sp, #12]
 8006354:	e7d7      	b.n	8006306 <__hexnan+0x2e>
 8006356:	2a29      	cmp	r2, #41	; 0x29
 8006358:	d156      	bne.n	8006408 <__hexnan+0x130>
 800635a:	3102      	adds	r1, #2
 800635c:	f8ca 1000 	str.w	r1, [sl]
 8006360:	f1bb 0f00 	cmp.w	fp, #0
 8006364:	d050      	beq.n	8006408 <__hexnan+0x130>
 8006366:	454c      	cmp	r4, r9
 8006368:	d206      	bcs.n	8006378 <__hexnan+0xa0>
 800636a:	2d07      	cmp	r5, #7
 800636c:	dc04      	bgt.n	8006378 <__hexnan+0xa0>
 800636e:	462a      	mov	r2, r5
 8006370:	4649      	mov	r1, r9
 8006372:	4620      	mov	r0, r4
 8006374:	f7ff ff8a 	bl	800628c <L_shift>
 8006378:	4544      	cmp	r4, r8
 800637a:	d934      	bls.n	80063e6 <__hexnan+0x10e>
 800637c:	4623      	mov	r3, r4
 800637e:	f1a8 0204 	sub.w	r2, r8, #4
 8006382:	f853 1b04 	ldr.w	r1, [r3], #4
 8006386:	429f      	cmp	r7, r3
 8006388:	f842 1f04 	str.w	r1, [r2, #4]!
 800638c:	d2f9      	bcs.n	8006382 <__hexnan+0xaa>
 800638e:	1b3b      	subs	r3, r7, r4
 8006390:	f023 0303 	bic.w	r3, r3, #3
 8006394:	3304      	adds	r3, #4
 8006396:	3401      	adds	r4, #1
 8006398:	3e03      	subs	r6, #3
 800639a:	42b4      	cmp	r4, r6
 800639c:	bf88      	it	hi
 800639e:	2304      	movhi	r3, #4
 80063a0:	2200      	movs	r2, #0
 80063a2:	4443      	add	r3, r8
 80063a4:	f843 2b04 	str.w	r2, [r3], #4
 80063a8:	429f      	cmp	r7, r3
 80063aa:	d2fb      	bcs.n	80063a4 <__hexnan+0xcc>
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	b91b      	cbnz	r3, 80063b8 <__hexnan+0xe0>
 80063b0:	4547      	cmp	r7, r8
 80063b2:	d127      	bne.n	8006404 <__hexnan+0x12c>
 80063b4:	2301      	movs	r3, #1
 80063b6:	603b      	str	r3, [r7, #0]
 80063b8:	2005      	movs	r0, #5
 80063ba:	e026      	b.n	800640a <__hexnan+0x132>
 80063bc:	3501      	adds	r5, #1
 80063be:	2d08      	cmp	r5, #8
 80063c0:	f10b 0b01 	add.w	fp, fp, #1
 80063c4:	dd06      	ble.n	80063d4 <__hexnan+0xfc>
 80063c6:	4544      	cmp	r4, r8
 80063c8:	d9c3      	bls.n	8006352 <__hexnan+0x7a>
 80063ca:	2300      	movs	r3, #0
 80063cc:	2501      	movs	r5, #1
 80063ce:	f844 3c04 	str.w	r3, [r4, #-4]
 80063d2:	3c04      	subs	r4, #4
 80063d4:	6822      	ldr	r2, [r4, #0]
 80063d6:	f000 000f 	and.w	r0, r0, #15
 80063da:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80063de:	6022      	str	r2, [r4, #0]
 80063e0:	e7b7      	b.n	8006352 <__hexnan+0x7a>
 80063e2:	2508      	movs	r5, #8
 80063e4:	e7b5      	b.n	8006352 <__hexnan+0x7a>
 80063e6:	9b01      	ldr	r3, [sp, #4]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d0df      	beq.n	80063ac <__hexnan+0xd4>
 80063ec:	f04f 32ff 	mov.w	r2, #4294967295
 80063f0:	f1c3 0320 	rsb	r3, r3, #32
 80063f4:	fa22 f303 	lsr.w	r3, r2, r3
 80063f8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80063fc:	401a      	ands	r2, r3
 80063fe:	f846 2c04 	str.w	r2, [r6, #-4]
 8006402:	e7d3      	b.n	80063ac <__hexnan+0xd4>
 8006404:	3f04      	subs	r7, #4
 8006406:	e7d1      	b.n	80063ac <__hexnan+0xd4>
 8006408:	2004      	movs	r0, #4
 800640a:	b007      	add	sp, #28
 800640c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006410 <__retarget_lock_init_recursive>:
 8006410:	4770      	bx	lr

08006412 <__retarget_lock_acquire_recursive>:
 8006412:	4770      	bx	lr

08006414 <__retarget_lock_release_recursive>:
 8006414:	4770      	bx	lr
	...

08006418 <_lseek_r>:
 8006418:	b538      	push	{r3, r4, r5, lr}
 800641a:	4604      	mov	r4, r0
 800641c:	4608      	mov	r0, r1
 800641e:	4611      	mov	r1, r2
 8006420:	2200      	movs	r2, #0
 8006422:	4d05      	ldr	r5, [pc, #20]	; (8006438 <_lseek_r+0x20>)
 8006424:	602a      	str	r2, [r5, #0]
 8006426:	461a      	mov	r2, r3
 8006428:	f7fc f8a6 	bl	8002578 <_lseek>
 800642c:	1c43      	adds	r3, r0, #1
 800642e:	d102      	bne.n	8006436 <_lseek_r+0x1e>
 8006430:	682b      	ldr	r3, [r5, #0]
 8006432:	b103      	cbz	r3, 8006436 <_lseek_r+0x1e>
 8006434:	6023      	str	r3, [r4, #0]
 8006436:	bd38      	pop	{r3, r4, r5, pc}
 8006438:	20000468 	.word	0x20000468

0800643c <__swhatbuf_r>:
 800643c:	b570      	push	{r4, r5, r6, lr}
 800643e:	460e      	mov	r6, r1
 8006440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006444:	4614      	mov	r4, r2
 8006446:	2900      	cmp	r1, #0
 8006448:	461d      	mov	r5, r3
 800644a:	b096      	sub	sp, #88	; 0x58
 800644c:	da07      	bge.n	800645e <__swhatbuf_r+0x22>
 800644e:	2300      	movs	r3, #0
 8006450:	602b      	str	r3, [r5, #0]
 8006452:	89b3      	ldrh	r3, [r6, #12]
 8006454:	061a      	lsls	r2, r3, #24
 8006456:	d410      	bmi.n	800647a <__swhatbuf_r+0x3e>
 8006458:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800645c:	e00e      	b.n	800647c <__swhatbuf_r+0x40>
 800645e:	466a      	mov	r2, sp
 8006460:	f001 f9fa 	bl	8007858 <_fstat_r>
 8006464:	2800      	cmp	r0, #0
 8006466:	dbf2      	blt.n	800644e <__swhatbuf_r+0x12>
 8006468:	9a01      	ldr	r2, [sp, #4]
 800646a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800646e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006472:	425a      	negs	r2, r3
 8006474:	415a      	adcs	r2, r3
 8006476:	602a      	str	r2, [r5, #0]
 8006478:	e7ee      	b.n	8006458 <__swhatbuf_r+0x1c>
 800647a:	2340      	movs	r3, #64	; 0x40
 800647c:	2000      	movs	r0, #0
 800647e:	6023      	str	r3, [r4, #0]
 8006480:	b016      	add	sp, #88	; 0x58
 8006482:	bd70      	pop	{r4, r5, r6, pc}

08006484 <__smakebuf_r>:
 8006484:	898b      	ldrh	r3, [r1, #12]
 8006486:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006488:	079d      	lsls	r5, r3, #30
 800648a:	4606      	mov	r6, r0
 800648c:	460c      	mov	r4, r1
 800648e:	d507      	bpl.n	80064a0 <__smakebuf_r+0x1c>
 8006490:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006494:	6023      	str	r3, [r4, #0]
 8006496:	6123      	str	r3, [r4, #16]
 8006498:	2301      	movs	r3, #1
 800649a:	6163      	str	r3, [r4, #20]
 800649c:	b002      	add	sp, #8
 800649e:	bd70      	pop	{r4, r5, r6, pc}
 80064a0:	466a      	mov	r2, sp
 80064a2:	ab01      	add	r3, sp, #4
 80064a4:	f7ff ffca 	bl	800643c <__swhatbuf_r>
 80064a8:	9900      	ldr	r1, [sp, #0]
 80064aa:	4605      	mov	r5, r0
 80064ac:	4630      	mov	r0, r6
 80064ae:	f7fe f96b 	bl	8004788 <_malloc_r>
 80064b2:	b948      	cbnz	r0, 80064c8 <__smakebuf_r+0x44>
 80064b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064b8:	059a      	lsls	r2, r3, #22
 80064ba:	d4ef      	bmi.n	800649c <__smakebuf_r+0x18>
 80064bc:	f023 0303 	bic.w	r3, r3, #3
 80064c0:	f043 0302 	orr.w	r3, r3, #2
 80064c4:	81a3      	strh	r3, [r4, #12]
 80064c6:	e7e3      	b.n	8006490 <__smakebuf_r+0xc>
 80064c8:	4b0d      	ldr	r3, [pc, #52]	; (8006500 <__smakebuf_r+0x7c>)
 80064ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80064cc:	89a3      	ldrh	r3, [r4, #12]
 80064ce:	6020      	str	r0, [r4, #0]
 80064d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064d4:	81a3      	strh	r3, [r4, #12]
 80064d6:	9b00      	ldr	r3, [sp, #0]
 80064d8:	6120      	str	r0, [r4, #16]
 80064da:	6163      	str	r3, [r4, #20]
 80064dc:	9b01      	ldr	r3, [sp, #4]
 80064de:	b15b      	cbz	r3, 80064f8 <__smakebuf_r+0x74>
 80064e0:	4630      	mov	r0, r6
 80064e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064e6:	f001 f9c9 	bl	800787c <_isatty_r>
 80064ea:	b128      	cbz	r0, 80064f8 <__smakebuf_r+0x74>
 80064ec:	89a3      	ldrh	r3, [r4, #12]
 80064ee:	f023 0303 	bic.w	r3, r3, #3
 80064f2:	f043 0301 	orr.w	r3, r3, #1
 80064f6:	81a3      	strh	r3, [r4, #12]
 80064f8:	89a0      	ldrh	r0, [r4, #12]
 80064fa:	4305      	orrs	r5, r0
 80064fc:	81a5      	strh	r5, [r4, #12]
 80064fe:	e7cd      	b.n	800649c <__smakebuf_r+0x18>
 8006500:	08005ba1 	.word	0x08005ba1

08006504 <__ascii_mbtowc>:
 8006504:	b082      	sub	sp, #8
 8006506:	b901      	cbnz	r1, 800650a <__ascii_mbtowc+0x6>
 8006508:	a901      	add	r1, sp, #4
 800650a:	b142      	cbz	r2, 800651e <__ascii_mbtowc+0x1a>
 800650c:	b14b      	cbz	r3, 8006522 <__ascii_mbtowc+0x1e>
 800650e:	7813      	ldrb	r3, [r2, #0]
 8006510:	600b      	str	r3, [r1, #0]
 8006512:	7812      	ldrb	r2, [r2, #0]
 8006514:	1e10      	subs	r0, r2, #0
 8006516:	bf18      	it	ne
 8006518:	2001      	movne	r0, #1
 800651a:	b002      	add	sp, #8
 800651c:	4770      	bx	lr
 800651e:	4610      	mov	r0, r2
 8006520:	e7fb      	b.n	800651a <__ascii_mbtowc+0x16>
 8006522:	f06f 0001 	mvn.w	r0, #1
 8006526:	e7f8      	b.n	800651a <__ascii_mbtowc+0x16>

08006528 <__malloc_lock>:
 8006528:	4801      	ldr	r0, [pc, #4]	; (8006530 <__malloc_lock+0x8>)
 800652a:	f7ff bf72 	b.w	8006412 <__retarget_lock_acquire_recursive>
 800652e:	bf00      	nop
 8006530:	20000460 	.word	0x20000460

08006534 <__malloc_unlock>:
 8006534:	4801      	ldr	r0, [pc, #4]	; (800653c <__malloc_unlock+0x8>)
 8006536:	f7ff bf6d 	b.w	8006414 <__retarget_lock_release_recursive>
 800653a:	bf00      	nop
 800653c:	20000460 	.word	0x20000460

08006540 <_Balloc>:
 8006540:	b570      	push	{r4, r5, r6, lr}
 8006542:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006544:	4604      	mov	r4, r0
 8006546:	460d      	mov	r5, r1
 8006548:	b976      	cbnz	r6, 8006568 <_Balloc+0x28>
 800654a:	2010      	movs	r0, #16
 800654c:	f7fe f8aa 	bl	80046a4 <malloc>
 8006550:	4602      	mov	r2, r0
 8006552:	6260      	str	r0, [r4, #36]	; 0x24
 8006554:	b920      	cbnz	r0, 8006560 <_Balloc+0x20>
 8006556:	2166      	movs	r1, #102	; 0x66
 8006558:	4b17      	ldr	r3, [pc, #92]	; (80065b8 <_Balloc+0x78>)
 800655a:	4818      	ldr	r0, [pc, #96]	; (80065bc <_Balloc+0x7c>)
 800655c:	f001 f94c 	bl	80077f8 <__assert_func>
 8006560:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006564:	6006      	str	r6, [r0, #0]
 8006566:	60c6      	str	r6, [r0, #12]
 8006568:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800656a:	68f3      	ldr	r3, [r6, #12]
 800656c:	b183      	cbz	r3, 8006590 <_Balloc+0x50>
 800656e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006570:	68db      	ldr	r3, [r3, #12]
 8006572:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006576:	b9b8      	cbnz	r0, 80065a8 <_Balloc+0x68>
 8006578:	2101      	movs	r1, #1
 800657a:	fa01 f605 	lsl.w	r6, r1, r5
 800657e:	1d72      	adds	r2, r6, #5
 8006580:	4620      	mov	r0, r4
 8006582:	0092      	lsls	r2, r2, #2
 8006584:	f000 fc94 	bl	8006eb0 <_calloc_r>
 8006588:	b160      	cbz	r0, 80065a4 <_Balloc+0x64>
 800658a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800658e:	e00e      	b.n	80065ae <_Balloc+0x6e>
 8006590:	2221      	movs	r2, #33	; 0x21
 8006592:	2104      	movs	r1, #4
 8006594:	4620      	mov	r0, r4
 8006596:	f000 fc8b 	bl	8006eb0 <_calloc_r>
 800659a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800659c:	60f0      	str	r0, [r6, #12]
 800659e:	68db      	ldr	r3, [r3, #12]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d1e4      	bne.n	800656e <_Balloc+0x2e>
 80065a4:	2000      	movs	r0, #0
 80065a6:	bd70      	pop	{r4, r5, r6, pc}
 80065a8:	6802      	ldr	r2, [r0, #0]
 80065aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80065ae:	2300      	movs	r3, #0
 80065b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80065b4:	e7f7      	b.n	80065a6 <_Balloc+0x66>
 80065b6:	bf00      	nop
 80065b8:	08007cf8 	.word	0x08007cf8
 80065bc:	08007d0f 	.word	0x08007d0f

080065c0 <_Bfree>:
 80065c0:	b570      	push	{r4, r5, r6, lr}
 80065c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80065c4:	4605      	mov	r5, r0
 80065c6:	460c      	mov	r4, r1
 80065c8:	b976      	cbnz	r6, 80065e8 <_Bfree+0x28>
 80065ca:	2010      	movs	r0, #16
 80065cc:	f7fe f86a 	bl	80046a4 <malloc>
 80065d0:	4602      	mov	r2, r0
 80065d2:	6268      	str	r0, [r5, #36]	; 0x24
 80065d4:	b920      	cbnz	r0, 80065e0 <_Bfree+0x20>
 80065d6:	218a      	movs	r1, #138	; 0x8a
 80065d8:	4b08      	ldr	r3, [pc, #32]	; (80065fc <_Bfree+0x3c>)
 80065da:	4809      	ldr	r0, [pc, #36]	; (8006600 <_Bfree+0x40>)
 80065dc:	f001 f90c 	bl	80077f8 <__assert_func>
 80065e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80065e4:	6006      	str	r6, [r0, #0]
 80065e6:	60c6      	str	r6, [r0, #12]
 80065e8:	b13c      	cbz	r4, 80065fa <_Bfree+0x3a>
 80065ea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80065ec:	6862      	ldr	r2, [r4, #4]
 80065ee:	68db      	ldr	r3, [r3, #12]
 80065f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80065f4:	6021      	str	r1, [r4, #0]
 80065f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80065fa:	bd70      	pop	{r4, r5, r6, pc}
 80065fc:	08007cf8 	.word	0x08007cf8
 8006600:	08007d0f 	.word	0x08007d0f

08006604 <__multadd>:
 8006604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006608:	4698      	mov	r8, r3
 800660a:	460c      	mov	r4, r1
 800660c:	2300      	movs	r3, #0
 800660e:	690e      	ldr	r6, [r1, #16]
 8006610:	4607      	mov	r7, r0
 8006612:	f101 0014 	add.w	r0, r1, #20
 8006616:	6805      	ldr	r5, [r0, #0]
 8006618:	3301      	adds	r3, #1
 800661a:	b2a9      	uxth	r1, r5
 800661c:	fb02 8101 	mla	r1, r2, r1, r8
 8006620:	0c2d      	lsrs	r5, r5, #16
 8006622:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006626:	fb02 c505 	mla	r5, r2, r5, ip
 800662a:	b289      	uxth	r1, r1
 800662c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006630:	429e      	cmp	r6, r3
 8006632:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006636:	f840 1b04 	str.w	r1, [r0], #4
 800663a:	dcec      	bgt.n	8006616 <__multadd+0x12>
 800663c:	f1b8 0f00 	cmp.w	r8, #0
 8006640:	d022      	beq.n	8006688 <__multadd+0x84>
 8006642:	68a3      	ldr	r3, [r4, #8]
 8006644:	42b3      	cmp	r3, r6
 8006646:	dc19      	bgt.n	800667c <__multadd+0x78>
 8006648:	6861      	ldr	r1, [r4, #4]
 800664a:	4638      	mov	r0, r7
 800664c:	3101      	adds	r1, #1
 800664e:	f7ff ff77 	bl	8006540 <_Balloc>
 8006652:	4605      	mov	r5, r0
 8006654:	b928      	cbnz	r0, 8006662 <__multadd+0x5e>
 8006656:	4602      	mov	r2, r0
 8006658:	21b5      	movs	r1, #181	; 0xb5
 800665a:	4b0d      	ldr	r3, [pc, #52]	; (8006690 <__multadd+0x8c>)
 800665c:	480d      	ldr	r0, [pc, #52]	; (8006694 <__multadd+0x90>)
 800665e:	f001 f8cb 	bl	80077f8 <__assert_func>
 8006662:	6922      	ldr	r2, [r4, #16]
 8006664:	f104 010c 	add.w	r1, r4, #12
 8006668:	3202      	adds	r2, #2
 800666a:	0092      	lsls	r2, r2, #2
 800666c:	300c      	adds	r0, #12
 800666e:	f7fe f829 	bl	80046c4 <memcpy>
 8006672:	4621      	mov	r1, r4
 8006674:	4638      	mov	r0, r7
 8006676:	f7ff ffa3 	bl	80065c0 <_Bfree>
 800667a:	462c      	mov	r4, r5
 800667c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006680:	3601      	adds	r6, #1
 8006682:	f8c3 8014 	str.w	r8, [r3, #20]
 8006686:	6126      	str	r6, [r4, #16]
 8006688:	4620      	mov	r0, r4
 800668a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800668e:	bf00      	nop
 8006690:	08007c68 	.word	0x08007c68
 8006694:	08007d0f 	.word	0x08007d0f

08006698 <__s2b>:
 8006698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800669c:	4615      	mov	r5, r2
 800669e:	2209      	movs	r2, #9
 80066a0:	461f      	mov	r7, r3
 80066a2:	3308      	adds	r3, #8
 80066a4:	460c      	mov	r4, r1
 80066a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80066aa:	4606      	mov	r6, r0
 80066ac:	2201      	movs	r2, #1
 80066ae:	2100      	movs	r1, #0
 80066b0:	429a      	cmp	r2, r3
 80066b2:	db09      	blt.n	80066c8 <__s2b+0x30>
 80066b4:	4630      	mov	r0, r6
 80066b6:	f7ff ff43 	bl	8006540 <_Balloc>
 80066ba:	b940      	cbnz	r0, 80066ce <__s2b+0x36>
 80066bc:	4602      	mov	r2, r0
 80066be:	21ce      	movs	r1, #206	; 0xce
 80066c0:	4b18      	ldr	r3, [pc, #96]	; (8006724 <__s2b+0x8c>)
 80066c2:	4819      	ldr	r0, [pc, #100]	; (8006728 <__s2b+0x90>)
 80066c4:	f001 f898 	bl	80077f8 <__assert_func>
 80066c8:	0052      	lsls	r2, r2, #1
 80066ca:	3101      	adds	r1, #1
 80066cc:	e7f0      	b.n	80066b0 <__s2b+0x18>
 80066ce:	9b08      	ldr	r3, [sp, #32]
 80066d0:	2d09      	cmp	r5, #9
 80066d2:	6143      	str	r3, [r0, #20]
 80066d4:	f04f 0301 	mov.w	r3, #1
 80066d8:	6103      	str	r3, [r0, #16]
 80066da:	dd16      	ble.n	800670a <__s2b+0x72>
 80066dc:	f104 0909 	add.w	r9, r4, #9
 80066e0:	46c8      	mov	r8, r9
 80066e2:	442c      	add	r4, r5
 80066e4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80066e8:	4601      	mov	r1, r0
 80066ea:	220a      	movs	r2, #10
 80066ec:	4630      	mov	r0, r6
 80066ee:	3b30      	subs	r3, #48	; 0x30
 80066f0:	f7ff ff88 	bl	8006604 <__multadd>
 80066f4:	45a0      	cmp	r8, r4
 80066f6:	d1f5      	bne.n	80066e4 <__s2b+0x4c>
 80066f8:	f1a5 0408 	sub.w	r4, r5, #8
 80066fc:	444c      	add	r4, r9
 80066fe:	1b2d      	subs	r5, r5, r4
 8006700:	1963      	adds	r3, r4, r5
 8006702:	42bb      	cmp	r3, r7
 8006704:	db04      	blt.n	8006710 <__s2b+0x78>
 8006706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800670a:	2509      	movs	r5, #9
 800670c:	340a      	adds	r4, #10
 800670e:	e7f6      	b.n	80066fe <__s2b+0x66>
 8006710:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006714:	4601      	mov	r1, r0
 8006716:	220a      	movs	r2, #10
 8006718:	4630      	mov	r0, r6
 800671a:	3b30      	subs	r3, #48	; 0x30
 800671c:	f7ff ff72 	bl	8006604 <__multadd>
 8006720:	e7ee      	b.n	8006700 <__s2b+0x68>
 8006722:	bf00      	nop
 8006724:	08007c68 	.word	0x08007c68
 8006728:	08007d0f 	.word	0x08007d0f

0800672c <__hi0bits>:
 800672c:	0c02      	lsrs	r2, r0, #16
 800672e:	0412      	lsls	r2, r2, #16
 8006730:	4603      	mov	r3, r0
 8006732:	b9ca      	cbnz	r2, 8006768 <__hi0bits+0x3c>
 8006734:	0403      	lsls	r3, r0, #16
 8006736:	2010      	movs	r0, #16
 8006738:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800673c:	bf04      	itt	eq
 800673e:	021b      	lsleq	r3, r3, #8
 8006740:	3008      	addeq	r0, #8
 8006742:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006746:	bf04      	itt	eq
 8006748:	011b      	lsleq	r3, r3, #4
 800674a:	3004      	addeq	r0, #4
 800674c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006750:	bf04      	itt	eq
 8006752:	009b      	lsleq	r3, r3, #2
 8006754:	3002      	addeq	r0, #2
 8006756:	2b00      	cmp	r3, #0
 8006758:	db05      	blt.n	8006766 <__hi0bits+0x3a>
 800675a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800675e:	f100 0001 	add.w	r0, r0, #1
 8006762:	bf08      	it	eq
 8006764:	2020      	moveq	r0, #32
 8006766:	4770      	bx	lr
 8006768:	2000      	movs	r0, #0
 800676a:	e7e5      	b.n	8006738 <__hi0bits+0xc>

0800676c <__lo0bits>:
 800676c:	6803      	ldr	r3, [r0, #0]
 800676e:	4602      	mov	r2, r0
 8006770:	f013 0007 	ands.w	r0, r3, #7
 8006774:	d00b      	beq.n	800678e <__lo0bits+0x22>
 8006776:	07d9      	lsls	r1, r3, #31
 8006778:	d422      	bmi.n	80067c0 <__lo0bits+0x54>
 800677a:	0798      	lsls	r0, r3, #30
 800677c:	bf49      	itett	mi
 800677e:	085b      	lsrmi	r3, r3, #1
 8006780:	089b      	lsrpl	r3, r3, #2
 8006782:	2001      	movmi	r0, #1
 8006784:	6013      	strmi	r3, [r2, #0]
 8006786:	bf5c      	itt	pl
 8006788:	2002      	movpl	r0, #2
 800678a:	6013      	strpl	r3, [r2, #0]
 800678c:	4770      	bx	lr
 800678e:	b299      	uxth	r1, r3
 8006790:	b909      	cbnz	r1, 8006796 <__lo0bits+0x2a>
 8006792:	2010      	movs	r0, #16
 8006794:	0c1b      	lsrs	r3, r3, #16
 8006796:	f013 0fff 	tst.w	r3, #255	; 0xff
 800679a:	bf04      	itt	eq
 800679c:	0a1b      	lsreq	r3, r3, #8
 800679e:	3008      	addeq	r0, #8
 80067a0:	0719      	lsls	r1, r3, #28
 80067a2:	bf04      	itt	eq
 80067a4:	091b      	lsreq	r3, r3, #4
 80067a6:	3004      	addeq	r0, #4
 80067a8:	0799      	lsls	r1, r3, #30
 80067aa:	bf04      	itt	eq
 80067ac:	089b      	lsreq	r3, r3, #2
 80067ae:	3002      	addeq	r0, #2
 80067b0:	07d9      	lsls	r1, r3, #31
 80067b2:	d403      	bmi.n	80067bc <__lo0bits+0x50>
 80067b4:	085b      	lsrs	r3, r3, #1
 80067b6:	f100 0001 	add.w	r0, r0, #1
 80067ba:	d003      	beq.n	80067c4 <__lo0bits+0x58>
 80067bc:	6013      	str	r3, [r2, #0]
 80067be:	4770      	bx	lr
 80067c0:	2000      	movs	r0, #0
 80067c2:	4770      	bx	lr
 80067c4:	2020      	movs	r0, #32
 80067c6:	4770      	bx	lr

080067c8 <__i2b>:
 80067c8:	b510      	push	{r4, lr}
 80067ca:	460c      	mov	r4, r1
 80067cc:	2101      	movs	r1, #1
 80067ce:	f7ff feb7 	bl	8006540 <_Balloc>
 80067d2:	4602      	mov	r2, r0
 80067d4:	b928      	cbnz	r0, 80067e2 <__i2b+0x1a>
 80067d6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80067da:	4b04      	ldr	r3, [pc, #16]	; (80067ec <__i2b+0x24>)
 80067dc:	4804      	ldr	r0, [pc, #16]	; (80067f0 <__i2b+0x28>)
 80067de:	f001 f80b 	bl	80077f8 <__assert_func>
 80067e2:	2301      	movs	r3, #1
 80067e4:	6144      	str	r4, [r0, #20]
 80067e6:	6103      	str	r3, [r0, #16]
 80067e8:	bd10      	pop	{r4, pc}
 80067ea:	bf00      	nop
 80067ec:	08007c68 	.word	0x08007c68
 80067f0:	08007d0f 	.word	0x08007d0f

080067f4 <__multiply>:
 80067f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067f8:	4614      	mov	r4, r2
 80067fa:	690a      	ldr	r2, [r1, #16]
 80067fc:	6923      	ldr	r3, [r4, #16]
 80067fe:	460d      	mov	r5, r1
 8006800:	429a      	cmp	r2, r3
 8006802:	bfbe      	ittt	lt
 8006804:	460b      	movlt	r3, r1
 8006806:	4625      	movlt	r5, r4
 8006808:	461c      	movlt	r4, r3
 800680a:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800680e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006812:	68ab      	ldr	r3, [r5, #8]
 8006814:	6869      	ldr	r1, [r5, #4]
 8006816:	eb0a 0709 	add.w	r7, sl, r9
 800681a:	42bb      	cmp	r3, r7
 800681c:	b085      	sub	sp, #20
 800681e:	bfb8      	it	lt
 8006820:	3101      	addlt	r1, #1
 8006822:	f7ff fe8d 	bl	8006540 <_Balloc>
 8006826:	b930      	cbnz	r0, 8006836 <__multiply+0x42>
 8006828:	4602      	mov	r2, r0
 800682a:	f240 115d 	movw	r1, #349	; 0x15d
 800682e:	4b41      	ldr	r3, [pc, #260]	; (8006934 <__multiply+0x140>)
 8006830:	4841      	ldr	r0, [pc, #260]	; (8006938 <__multiply+0x144>)
 8006832:	f000 ffe1 	bl	80077f8 <__assert_func>
 8006836:	f100 0614 	add.w	r6, r0, #20
 800683a:	4633      	mov	r3, r6
 800683c:	2200      	movs	r2, #0
 800683e:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006842:	4543      	cmp	r3, r8
 8006844:	d31e      	bcc.n	8006884 <__multiply+0x90>
 8006846:	f105 0c14 	add.w	ip, r5, #20
 800684a:	f104 0314 	add.w	r3, r4, #20
 800684e:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006852:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006856:	9202      	str	r2, [sp, #8]
 8006858:	ebac 0205 	sub.w	r2, ip, r5
 800685c:	3a15      	subs	r2, #21
 800685e:	f022 0203 	bic.w	r2, r2, #3
 8006862:	3204      	adds	r2, #4
 8006864:	f105 0115 	add.w	r1, r5, #21
 8006868:	458c      	cmp	ip, r1
 800686a:	bf38      	it	cc
 800686c:	2204      	movcc	r2, #4
 800686e:	9201      	str	r2, [sp, #4]
 8006870:	9a02      	ldr	r2, [sp, #8]
 8006872:	9303      	str	r3, [sp, #12]
 8006874:	429a      	cmp	r2, r3
 8006876:	d808      	bhi.n	800688a <__multiply+0x96>
 8006878:	2f00      	cmp	r7, #0
 800687a:	dc55      	bgt.n	8006928 <__multiply+0x134>
 800687c:	6107      	str	r7, [r0, #16]
 800687e:	b005      	add	sp, #20
 8006880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006884:	f843 2b04 	str.w	r2, [r3], #4
 8006888:	e7db      	b.n	8006842 <__multiply+0x4e>
 800688a:	f8b3 a000 	ldrh.w	sl, [r3]
 800688e:	f1ba 0f00 	cmp.w	sl, #0
 8006892:	d020      	beq.n	80068d6 <__multiply+0xe2>
 8006894:	46b1      	mov	r9, r6
 8006896:	2200      	movs	r2, #0
 8006898:	f105 0e14 	add.w	lr, r5, #20
 800689c:	f85e 4b04 	ldr.w	r4, [lr], #4
 80068a0:	f8d9 b000 	ldr.w	fp, [r9]
 80068a4:	b2a1      	uxth	r1, r4
 80068a6:	fa1f fb8b 	uxth.w	fp, fp
 80068aa:	fb0a b101 	mla	r1, sl, r1, fp
 80068ae:	4411      	add	r1, r2
 80068b0:	f8d9 2000 	ldr.w	r2, [r9]
 80068b4:	0c24      	lsrs	r4, r4, #16
 80068b6:	0c12      	lsrs	r2, r2, #16
 80068b8:	fb0a 2404 	mla	r4, sl, r4, r2
 80068bc:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80068c0:	b289      	uxth	r1, r1
 80068c2:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80068c6:	45f4      	cmp	ip, lr
 80068c8:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80068cc:	f849 1b04 	str.w	r1, [r9], #4
 80068d0:	d8e4      	bhi.n	800689c <__multiply+0xa8>
 80068d2:	9901      	ldr	r1, [sp, #4]
 80068d4:	5072      	str	r2, [r6, r1]
 80068d6:	9a03      	ldr	r2, [sp, #12]
 80068d8:	3304      	adds	r3, #4
 80068da:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80068de:	f1b9 0f00 	cmp.w	r9, #0
 80068e2:	d01f      	beq.n	8006924 <__multiply+0x130>
 80068e4:	46b6      	mov	lr, r6
 80068e6:	f04f 0a00 	mov.w	sl, #0
 80068ea:	6834      	ldr	r4, [r6, #0]
 80068ec:	f105 0114 	add.w	r1, r5, #20
 80068f0:	880a      	ldrh	r2, [r1, #0]
 80068f2:	f8be b002 	ldrh.w	fp, [lr, #2]
 80068f6:	b2a4      	uxth	r4, r4
 80068f8:	fb09 b202 	mla	r2, r9, r2, fp
 80068fc:	4492      	add	sl, r2
 80068fe:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006902:	f84e 4b04 	str.w	r4, [lr], #4
 8006906:	f851 4b04 	ldr.w	r4, [r1], #4
 800690a:	f8be 2000 	ldrh.w	r2, [lr]
 800690e:	0c24      	lsrs	r4, r4, #16
 8006910:	fb09 2404 	mla	r4, r9, r4, r2
 8006914:	458c      	cmp	ip, r1
 8006916:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800691a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800691e:	d8e7      	bhi.n	80068f0 <__multiply+0xfc>
 8006920:	9a01      	ldr	r2, [sp, #4]
 8006922:	50b4      	str	r4, [r6, r2]
 8006924:	3604      	adds	r6, #4
 8006926:	e7a3      	b.n	8006870 <__multiply+0x7c>
 8006928:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800692c:	2b00      	cmp	r3, #0
 800692e:	d1a5      	bne.n	800687c <__multiply+0x88>
 8006930:	3f01      	subs	r7, #1
 8006932:	e7a1      	b.n	8006878 <__multiply+0x84>
 8006934:	08007c68 	.word	0x08007c68
 8006938:	08007d0f 	.word	0x08007d0f

0800693c <__pow5mult>:
 800693c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006940:	4615      	mov	r5, r2
 8006942:	f012 0203 	ands.w	r2, r2, #3
 8006946:	4606      	mov	r6, r0
 8006948:	460f      	mov	r7, r1
 800694a:	d007      	beq.n	800695c <__pow5mult+0x20>
 800694c:	4c25      	ldr	r4, [pc, #148]	; (80069e4 <__pow5mult+0xa8>)
 800694e:	3a01      	subs	r2, #1
 8006950:	2300      	movs	r3, #0
 8006952:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006956:	f7ff fe55 	bl	8006604 <__multadd>
 800695a:	4607      	mov	r7, r0
 800695c:	10ad      	asrs	r5, r5, #2
 800695e:	d03d      	beq.n	80069dc <__pow5mult+0xa0>
 8006960:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006962:	b97c      	cbnz	r4, 8006984 <__pow5mult+0x48>
 8006964:	2010      	movs	r0, #16
 8006966:	f7fd fe9d 	bl	80046a4 <malloc>
 800696a:	4602      	mov	r2, r0
 800696c:	6270      	str	r0, [r6, #36]	; 0x24
 800696e:	b928      	cbnz	r0, 800697c <__pow5mult+0x40>
 8006970:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006974:	4b1c      	ldr	r3, [pc, #112]	; (80069e8 <__pow5mult+0xac>)
 8006976:	481d      	ldr	r0, [pc, #116]	; (80069ec <__pow5mult+0xb0>)
 8006978:	f000 ff3e 	bl	80077f8 <__assert_func>
 800697c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006980:	6004      	str	r4, [r0, #0]
 8006982:	60c4      	str	r4, [r0, #12]
 8006984:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006988:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800698c:	b94c      	cbnz	r4, 80069a2 <__pow5mult+0x66>
 800698e:	f240 2171 	movw	r1, #625	; 0x271
 8006992:	4630      	mov	r0, r6
 8006994:	f7ff ff18 	bl	80067c8 <__i2b>
 8006998:	2300      	movs	r3, #0
 800699a:	4604      	mov	r4, r0
 800699c:	f8c8 0008 	str.w	r0, [r8, #8]
 80069a0:	6003      	str	r3, [r0, #0]
 80069a2:	f04f 0900 	mov.w	r9, #0
 80069a6:	07eb      	lsls	r3, r5, #31
 80069a8:	d50a      	bpl.n	80069c0 <__pow5mult+0x84>
 80069aa:	4639      	mov	r1, r7
 80069ac:	4622      	mov	r2, r4
 80069ae:	4630      	mov	r0, r6
 80069b0:	f7ff ff20 	bl	80067f4 <__multiply>
 80069b4:	4680      	mov	r8, r0
 80069b6:	4639      	mov	r1, r7
 80069b8:	4630      	mov	r0, r6
 80069ba:	f7ff fe01 	bl	80065c0 <_Bfree>
 80069be:	4647      	mov	r7, r8
 80069c0:	106d      	asrs	r5, r5, #1
 80069c2:	d00b      	beq.n	80069dc <__pow5mult+0xa0>
 80069c4:	6820      	ldr	r0, [r4, #0]
 80069c6:	b938      	cbnz	r0, 80069d8 <__pow5mult+0x9c>
 80069c8:	4622      	mov	r2, r4
 80069ca:	4621      	mov	r1, r4
 80069cc:	4630      	mov	r0, r6
 80069ce:	f7ff ff11 	bl	80067f4 <__multiply>
 80069d2:	6020      	str	r0, [r4, #0]
 80069d4:	f8c0 9000 	str.w	r9, [r0]
 80069d8:	4604      	mov	r4, r0
 80069da:	e7e4      	b.n	80069a6 <__pow5mult+0x6a>
 80069dc:	4638      	mov	r0, r7
 80069de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069e2:	bf00      	nop
 80069e4:	08007e60 	.word	0x08007e60
 80069e8:	08007cf8 	.word	0x08007cf8
 80069ec:	08007d0f 	.word	0x08007d0f

080069f0 <__lshift>:
 80069f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069f4:	460c      	mov	r4, r1
 80069f6:	4607      	mov	r7, r0
 80069f8:	4691      	mov	r9, r2
 80069fa:	6923      	ldr	r3, [r4, #16]
 80069fc:	6849      	ldr	r1, [r1, #4]
 80069fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006a02:	68a3      	ldr	r3, [r4, #8]
 8006a04:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006a08:	f108 0601 	add.w	r6, r8, #1
 8006a0c:	42b3      	cmp	r3, r6
 8006a0e:	db0b      	blt.n	8006a28 <__lshift+0x38>
 8006a10:	4638      	mov	r0, r7
 8006a12:	f7ff fd95 	bl	8006540 <_Balloc>
 8006a16:	4605      	mov	r5, r0
 8006a18:	b948      	cbnz	r0, 8006a2e <__lshift+0x3e>
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006a20:	4b27      	ldr	r3, [pc, #156]	; (8006ac0 <__lshift+0xd0>)
 8006a22:	4828      	ldr	r0, [pc, #160]	; (8006ac4 <__lshift+0xd4>)
 8006a24:	f000 fee8 	bl	80077f8 <__assert_func>
 8006a28:	3101      	adds	r1, #1
 8006a2a:	005b      	lsls	r3, r3, #1
 8006a2c:	e7ee      	b.n	8006a0c <__lshift+0x1c>
 8006a2e:	2300      	movs	r3, #0
 8006a30:	f100 0114 	add.w	r1, r0, #20
 8006a34:	f100 0210 	add.w	r2, r0, #16
 8006a38:	4618      	mov	r0, r3
 8006a3a:	4553      	cmp	r3, sl
 8006a3c:	db33      	blt.n	8006aa6 <__lshift+0xb6>
 8006a3e:	6920      	ldr	r0, [r4, #16]
 8006a40:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006a44:	f104 0314 	add.w	r3, r4, #20
 8006a48:	f019 091f 	ands.w	r9, r9, #31
 8006a4c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006a50:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006a54:	d02b      	beq.n	8006aae <__lshift+0xbe>
 8006a56:	468a      	mov	sl, r1
 8006a58:	2200      	movs	r2, #0
 8006a5a:	f1c9 0e20 	rsb	lr, r9, #32
 8006a5e:	6818      	ldr	r0, [r3, #0]
 8006a60:	fa00 f009 	lsl.w	r0, r0, r9
 8006a64:	4302      	orrs	r2, r0
 8006a66:	f84a 2b04 	str.w	r2, [sl], #4
 8006a6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a6e:	459c      	cmp	ip, r3
 8006a70:	fa22 f20e 	lsr.w	r2, r2, lr
 8006a74:	d8f3      	bhi.n	8006a5e <__lshift+0x6e>
 8006a76:	ebac 0304 	sub.w	r3, ip, r4
 8006a7a:	3b15      	subs	r3, #21
 8006a7c:	f023 0303 	bic.w	r3, r3, #3
 8006a80:	3304      	adds	r3, #4
 8006a82:	f104 0015 	add.w	r0, r4, #21
 8006a86:	4584      	cmp	ip, r0
 8006a88:	bf38      	it	cc
 8006a8a:	2304      	movcc	r3, #4
 8006a8c:	50ca      	str	r2, [r1, r3]
 8006a8e:	b10a      	cbz	r2, 8006a94 <__lshift+0xa4>
 8006a90:	f108 0602 	add.w	r6, r8, #2
 8006a94:	3e01      	subs	r6, #1
 8006a96:	4638      	mov	r0, r7
 8006a98:	4621      	mov	r1, r4
 8006a9a:	612e      	str	r6, [r5, #16]
 8006a9c:	f7ff fd90 	bl	80065c0 <_Bfree>
 8006aa0:	4628      	mov	r0, r5
 8006aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aa6:	f842 0f04 	str.w	r0, [r2, #4]!
 8006aaa:	3301      	adds	r3, #1
 8006aac:	e7c5      	b.n	8006a3a <__lshift+0x4a>
 8006aae:	3904      	subs	r1, #4
 8006ab0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ab4:	459c      	cmp	ip, r3
 8006ab6:	f841 2f04 	str.w	r2, [r1, #4]!
 8006aba:	d8f9      	bhi.n	8006ab0 <__lshift+0xc0>
 8006abc:	e7ea      	b.n	8006a94 <__lshift+0xa4>
 8006abe:	bf00      	nop
 8006ac0:	08007c68 	.word	0x08007c68
 8006ac4:	08007d0f 	.word	0x08007d0f

08006ac8 <__mcmp>:
 8006ac8:	4603      	mov	r3, r0
 8006aca:	690a      	ldr	r2, [r1, #16]
 8006acc:	6900      	ldr	r0, [r0, #16]
 8006ace:	b530      	push	{r4, r5, lr}
 8006ad0:	1a80      	subs	r0, r0, r2
 8006ad2:	d10d      	bne.n	8006af0 <__mcmp+0x28>
 8006ad4:	3314      	adds	r3, #20
 8006ad6:	3114      	adds	r1, #20
 8006ad8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006adc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006ae0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006ae4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006ae8:	4295      	cmp	r5, r2
 8006aea:	d002      	beq.n	8006af2 <__mcmp+0x2a>
 8006aec:	d304      	bcc.n	8006af8 <__mcmp+0x30>
 8006aee:	2001      	movs	r0, #1
 8006af0:	bd30      	pop	{r4, r5, pc}
 8006af2:	42a3      	cmp	r3, r4
 8006af4:	d3f4      	bcc.n	8006ae0 <__mcmp+0x18>
 8006af6:	e7fb      	b.n	8006af0 <__mcmp+0x28>
 8006af8:	f04f 30ff 	mov.w	r0, #4294967295
 8006afc:	e7f8      	b.n	8006af0 <__mcmp+0x28>
	...

08006b00 <__mdiff>:
 8006b00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b04:	460c      	mov	r4, r1
 8006b06:	4606      	mov	r6, r0
 8006b08:	4611      	mov	r1, r2
 8006b0a:	4620      	mov	r0, r4
 8006b0c:	4692      	mov	sl, r2
 8006b0e:	f7ff ffdb 	bl	8006ac8 <__mcmp>
 8006b12:	1e05      	subs	r5, r0, #0
 8006b14:	d111      	bne.n	8006b3a <__mdiff+0x3a>
 8006b16:	4629      	mov	r1, r5
 8006b18:	4630      	mov	r0, r6
 8006b1a:	f7ff fd11 	bl	8006540 <_Balloc>
 8006b1e:	4602      	mov	r2, r0
 8006b20:	b928      	cbnz	r0, 8006b2e <__mdiff+0x2e>
 8006b22:	f240 2132 	movw	r1, #562	; 0x232
 8006b26:	4b3c      	ldr	r3, [pc, #240]	; (8006c18 <__mdiff+0x118>)
 8006b28:	483c      	ldr	r0, [pc, #240]	; (8006c1c <__mdiff+0x11c>)
 8006b2a:	f000 fe65 	bl	80077f8 <__assert_func>
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006b34:	4610      	mov	r0, r2
 8006b36:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b3a:	bfa4      	itt	ge
 8006b3c:	4653      	movge	r3, sl
 8006b3e:	46a2      	movge	sl, r4
 8006b40:	4630      	mov	r0, r6
 8006b42:	f8da 1004 	ldr.w	r1, [sl, #4]
 8006b46:	bfa6      	itte	ge
 8006b48:	461c      	movge	r4, r3
 8006b4a:	2500      	movge	r5, #0
 8006b4c:	2501      	movlt	r5, #1
 8006b4e:	f7ff fcf7 	bl	8006540 <_Balloc>
 8006b52:	4602      	mov	r2, r0
 8006b54:	b918      	cbnz	r0, 8006b5e <__mdiff+0x5e>
 8006b56:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006b5a:	4b2f      	ldr	r3, [pc, #188]	; (8006c18 <__mdiff+0x118>)
 8006b5c:	e7e4      	b.n	8006b28 <__mdiff+0x28>
 8006b5e:	f100 0814 	add.w	r8, r0, #20
 8006b62:	f8da 7010 	ldr.w	r7, [sl, #16]
 8006b66:	60c5      	str	r5, [r0, #12]
 8006b68:	f04f 0c00 	mov.w	ip, #0
 8006b6c:	f10a 0514 	add.w	r5, sl, #20
 8006b70:	f10a 0010 	add.w	r0, sl, #16
 8006b74:	46c2      	mov	sl, r8
 8006b76:	6926      	ldr	r6, [r4, #16]
 8006b78:	f104 0914 	add.w	r9, r4, #20
 8006b7c:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8006b80:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006b84:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8006b88:	f859 3b04 	ldr.w	r3, [r9], #4
 8006b8c:	fa1f f18b 	uxth.w	r1, fp
 8006b90:	4461      	add	r1, ip
 8006b92:	fa1f fc83 	uxth.w	ip, r3
 8006b96:	0c1b      	lsrs	r3, r3, #16
 8006b98:	eba1 010c 	sub.w	r1, r1, ip
 8006b9c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006ba0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006ba4:	b289      	uxth	r1, r1
 8006ba6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006baa:	454e      	cmp	r6, r9
 8006bac:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006bb0:	f84a 3b04 	str.w	r3, [sl], #4
 8006bb4:	d8e6      	bhi.n	8006b84 <__mdiff+0x84>
 8006bb6:	1b33      	subs	r3, r6, r4
 8006bb8:	3b15      	subs	r3, #21
 8006bba:	f023 0303 	bic.w	r3, r3, #3
 8006bbe:	3415      	adds	r4, #21
 8006bc0:	3304      	adds	r3, #4
 8006bc2:	42a6      	cmp	r6, r4
 8006bc4:	bf38      	it	cc
 8006bc6:	2304      	movcc	r3, #4
 8006bc8:	441d      	add	r5, r3
 8006bca:	4443      	add	r3, r8
 8006bcc:	461e      	mov	r6, r3
 8006bce:	462c      	mov	r4, r5
 8006bd0:	4574      	cmp	r4, lr
 8006bd2:	d30e      	bcc.n	8006bf2 <__mdiff+0xf2>
 8006bd4:	f10e 0103 	add.w	r1, lr, #3
 8006bd8:	1b49      	subs	r1, r1, r5
 8006bda:	f021 0103 	bic.w	r1, r1, #3
 8006bde:	3d03      	subs	r5, #3
 8006be0:	45ae      	cmp	lr, r5
 8006be2:	bf38      	it	cc
 8006be4:	2100      	movcc	r1, #0
 8006be6:	4419      	add	r1, r3
 8006be8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006bec:	b18b      	cbz	r3, 8006c12 <__mdiff+0x112>
 8006bee:	6117      	str	r7, [r2, #16]
 8006bf0:	e7a0      	b.n	8006b34 <__mdiff+0x34>
 8006bf2:	f854 8b04 	ldr.w	r8, [r4], #4
 8006bf6:	fa1f f188 	uxth.w	r1, r8
 8006bfa:	4461      	add	r1, ip
 8006bfc:	1408      	asrs	r0, r1, #16
 8006bfe:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8006c02:	b289      	uxth	r1, r1
 8006c04:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006c08:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006c0c:	f846 1b04 	str.w	r1, [r6], #4
 8006c10:	e7de      	b.n	8006bd0 <__mdiff+0xd0>
 8006c12:	3f01      	subs	r7, #1
 8006c14:	e7e8      	b.n	8006be8 <__mdiff+0xe8>
 8006c16:	bf00      	nop
 8006c18:	08007c68 	.word	0x08007c68
 8006c1c:	08007d0f 	.word	0x08007d0f

08006c20 <__ulp>:
 8006c20:	4b11      	ldr	r3, [pc, #68]	; (8006c68 <__ulp+0x48>)
 8006c22:	400b      	ands	r3, r1
 8006c24:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	dd02      	ble.n	8006c32 <__ulp+0x12>
 8006c2c:	2000      	movs	r0, #0
 8006c2e:	4619      	mov	r1, r3
 8006c30:	4770      	bx	lr
 8006c32:	425b      	negs	r3, r3
 8006c34:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8006c38:	f04f 0000 	mov.w	r0, #0
 8006c3c:	f04f 0100 	mov.w	r1, #0
 8006c40:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006c44:	da04      	bge.n	8006c50 <__ulp+0x30>
 8006c46:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006c4a:	fa43 f102 	asr.w	r1, r3, r2
 8006c4e:	4770      	bx	lr
 8006c50:	f1a2 0314 	sub.w	r3, r2, #20
 8006c54:	2b1e      	cmp	r3, #30
 8006c56:	bfd6      	itet	le
 8006c58:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8006c5c:	2301      	movgt	r3, #1
 8006c5e:	fa22 f303 	lsrle.w	r3, r2, r3
 8006c62:	4618      	mov	r0, r3
 8006c64:	4770      	bx	lr
 8006c66:	bf00      	nop
 8006c68:	7ff00000 	.word	0x7ff00000

08006c6c <__b2d>:
 8006c6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c70:	6907      	ldr	r7, [r0, #16]
 8006c72:	f100 0914 	add.w	r9, r0, #20
 8006c76:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8006c7a:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8006c7e:	f1a7 0804 	sub.w	r8, r7, #4
 8006c82:	4630      	mov	r0, r6
 8006c84:	f7ff fd52 	bl	800672c <__hi0bits>
 8006c88:	f1c0 0320 	rsb	r3, r0, #32
 8006c8c:	280a      	cmp	r0, #10
 8006c8e:	600b      	str	r3, [r1, #0]
 8006c90:	491f      	ldr	r1, [pc, #124]	; (8006d10 <__b2d+0xa4>)
 8006c92:	dc17      	bgt.n	8006cc4 <__b2d+0x58>
 8006c94:	45c1      	cmp	r9, r8
 8006c96:	bf28      	it	cs
 8006c98:	2200      	movcs	r2, #0
 8006c9a:	f1c0 0c0b 	rsb	ip, r0, #11
 8006c9e:	fa26 f30c 	lsr.w	r3, r6, ip
 8006ca2:	bf38      	it	cc
 8006ca4:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006ca8:	ea43 0501 	orr.w	r5, r3, r1
 8006cac:	f100 0315 	add.w	r3, r0, #21
 8006cb0:	fa06 f303 	lsl.w	r3, r6, r3
 8006cb4:	fa22 f20c 	lsr.w	r2, r2, ip
 8006cb8:	ea43 0402 	orr.w	r4, r3, r2
 8006cbc:	4620      	mov	r0, r4
 8006cbe:	4629      	mov	r1, r5
 8006cc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cc4:	45c1      	cmp	r9, r8
 8006cc6:	bf2e      	itee	cs
 8006cc8:	2200      	movcs	r2, #0
 8006cca:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006cce:	f1a7 0808 	subcc.w	r8, r7, #8
 8006cd2:	f1b0 030b 	subs.w	r3, r0, #11
 8006cd6:	d016      	beq.n	8006d06 <__b2d+0x9a>
 8006cd8:	f1c3 0720 	rsb	r7, r3, #32
 8006cdc:	fa22 f107 	lsr.w	r1, r2, r7
 8006ce0:	45c8      	cmp	r8, r9
 8006ce2:	fa06 f603 	lsl.w	r6, r6, r3
 8006ce6:	ea46 0601 	orr.w	r6, r6, r1
 8006cea:	bf94      	ite	ls
 8006cec:	2100      	movls	r1, #0
 8006cee:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8006cf2:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8006cf6:	fa02 f003 	lsl.w	r0, r2, r3
 8006cfa:	40f9      	lsrs	r1, r7
 8006cfc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006d00:	ea40 0401 	orr.w	r4, r0, r1
 8006d04:	e7da      	b.n	8006cbc <__b2d+0x50>
 8006d06:	4614      	mov	r4, r2
 8006d08:	ea46 0501 	orr.w	r5, r6, r1
 8006d0c:	e7d6      	b.n	8006cbc <__b2d+0x50>
 8006d0e:	bf00      	nop
 8006d10:	3ff00000 	.word	0x3ff00000

08006d14 <__d2b>:
 8006d14:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006d18:	2101      	movs	r1, #1
 8006d1a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006d1e:	4690      	mov	r8, r2
 8006d20:	461d      	mov	r5, r3
 8006d22:	f7ff fc0d 	bl	8006540 <_Balloc>
 8006d26:	4604      	mov	r4, r0
 8006d28:	b930      	cbnz	r0, 8006d38 <__d2b+0x24>
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	f240 310a 	movw	r1, #778	; 0x30a
 8006d30:	4b24      	ldr	r3, [pc, #144]	; (8006dc4 <__d2b+0xb0>)
 8006d32:	4825      	ldr	r0, [pc, #148]	; (8006dc8 <__d2b+0xb4>)
 8006d34:	f000 fd60 	bl	80077f8 <__assert_func>
 8006d38:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006d3c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006d40:	bb2d      	cbnz	r5, 8006d8e <__d2b+0x7a>
 8006d42:	9301      	str	r3, [sp, #4]
 8006d44:	f1b8 0300 	subs.w	r3, r8, #0
 8006d48:	d026      	beq.n	8006d98 <__d2b+0x84>
 8006d4a:	4668      	mov	r0, sp
 8006d4c:	9300      	str	r3, [sp, #0]
 8006d4e:	f7ff fd0d 	bl	800676c <__lo0bits>
 8006d52:	9900      	ldr	r1, [sp, #0]
 8006d54:	b1f0      	cbz	r0, 8006d94 <__d2b+0x80>
 8006d56:	9a01      	ldr	r2, [sp, #4]
 8006d58:	f1c0 0320 	rsb	r3, r0, #32
 8006d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d60:	430b      	orrs	r3, r1
 8006d62:	40c2      	lsrs	r2, r0
 8006d64:	6163      	str	r3, [r4, #20]
 8006d66:	9201      	str	r2, [sp, #4]
 8006d68:	9b01      	ldr	r3, [sp, #4]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	bf14      	ite	ne
 8006d6e:	2102      	movne	r1, #2
 8006d70:	2101      	moveq	r1, #1
 8006d72:	61a3      	str	r3, [r4, #24]
 8006d74:	6121      	str	r1, [r4, #16]
 8006d76:	b1c5      	cbz	r5, 8006daa <__d2b+0x96>
 8006d78:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006d7c:	4405      	add	r5, r0
 8006d7e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006d82:	603d      	str	r5, [r7, #0]
 8006d84:	6030      	str	r0, [r6, #0]
 8006d86:	4620      	mov	r0, r4
 8006d88:	b002      	add	sp, #8
 8006d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d92:	e7d6      	b.n	8006d42 <__d2b+0x2e>
 8006d94:	6161      	str	r1, [r4, #20]
 8006d96:	e7e7      	b.n	8006d68 <__d2b+0x54>
 8006d98:	a801      	add	r0, sp, #4
 8006d9a:	f7ff fce7 	bl	800676c <__lo0bits>
 8006d9e:	2101      	movs	r1, #1
 8006da0:	9b01      	ldr	r3, [sp, #4]
 8006da2:	6121      	str	r1, [r4, #16]
 8006da4:	6163      	str	r3, [r4, #20]
 8006da6:	3020      	adds	r0, #32
 8006da8:	e7e5      	b.n	8006d76 <__d2b+0x62>
 8006daa:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006dae:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006db2:	6038      	str	r0, [r7, #0]
 8006db4:	6918      	ldr	r0, [r3, #16]
 8006db6:	f7ff fcb9 	bl	800672c <__hi0bits>
 8006dba:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006dbe:	6031      	str	r1, [r6, #0]
 8006dc0:	e7e1      	b.n	8006d86 <__d2b+0x72>
 8006dc2:	bf00      	nop
 8006dc4:	08007c68 	.word	0x08007c68
 8006dc8:	08007d0f 	.word	0x08007d0f

08006dcc <__ratio>:
 8006dcc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dd0:	4688      	mov	r8, r1
 8006dd2:	4669      	mov	r1, sp
 8006dd4:	4681      	mov	r9, r0
 8006dd6:	f7ff ff49 	bl	8006c6c <__b2d>
 8006dda:	460f      	mov	r7, r1
 8006ddc:	4604      	mov	r4, r0
 8006dde:	460d      	mov	r5, r1
 8006de0:	4640      	mov	r0, r8
 8006de2:	a901      	add	r1, sp, #4
 8006de4:	f7ff ff42 	bl	8006c6c <__b2d>
 8006de8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006dec:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006df0:	468b      	mov	fp, r1
 8006df2:	eba3 0c02 	sub.w	ip, r3, r2
 8006df6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006dfa:	1a9b      	subs	r3, r3, r2
 8006dfc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	bfd5      	itete	le
 8006e04:	460a      	movle	r2, r1
 8006e06:	462a      	movgt	r2, r5
 8006e08:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006e0c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006e10:	bfd8      	it	le
 8006e12:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8006e16:	465b      	mov	r3, fp
 8006e18:	4602      	mov	r2, r0
 8006e1a:	4639      	mov	r1, r7
 8006e1c:	4620      	mov	r0, r4
 8006e1e:	f7f9 fc8f 	bl	8000740 <__aeabi_ddiv>
 8006e22:	b003      	add	sp, #12
 8006e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006e28 <__copybits>:
 8006e28:	3901      	subs	r1, #1
 8006e2a:	b570      	push	{r4, r5, r6, lr}
 8006e2c:	1149      	asrs	r1, r1, #5
 8006e2e:	6914      	ldr	r4, [r2, #16]
 8006e30:	3101      	adds	r1, #1
 8006e32:	f102 0314 	add.w	r3, r2, #20
 8006e36:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006e3a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006e3e:	1f05      	subs	r5, r0, #4
 8006e40:	42a3      	cmp	r3, r4
 8006e42:	d30c      	bcc.n	8006e5e <__copybits+0x36>
 8006e44:	1aa3      	subs	r3, r4, r2
 8006e46:	3b11      	subs	r3, #17
 8006e48:	f023 0303 	bic.w	r3, r3, #3
 8006e4c:	3211      	adds	r2, #17
 8006e4e:	42a2      	cmp	r2, r4
 8006e50:	bf88      	it	hi
 8006e52:	2300      	movhi	r3, #0
 8006e54:	4418      	add	r0, r3
 8006e56:	2300      	movs	r3, #0
 8006e58:	4288      	cmp	r0, r1
 8006e5a:	d305      	bcc.n	8006e68 <__copybits+0x40>
 8006e5c:	bd70      	pop	{r4, r5, r6, pc}
 8006e5e:	f853 6b04 	ldr.w	r6, [r3], #4
 8006e62:	f845 6f04 	str.w	r6, [r5, #4]!
 8006e66:	e7eb      	b.n	8006e40 <__copybits+0x18>
 8006e68:	f840 3b04 	str.w	r3, [r0], #4
 8006e6c:	e7f4      	b.n	8006e58 <__copybits+0x30>

08006e6e <__any_on>:
 8006e6e:	f100 0214 	add.w	r2, r0, #20
 8006e72:	6900      	ldr	r0, [r0, #16]
 8006e74:	114b      	asrs	r3, r1, #5
 8006e76:	4298      	cmp	r0, r3
 8006e78:	b510      	push	{r4, lr}
 8006e7a:	db11      	blt.n	8006ea0 <__any_on+0x32>
 8006e7c:	dd0a      	ble.n	8006e94 <__any_on+0x26>
 8006e7e:	f011 011f 	ands.w	r1, r1, #31
 8006e82:	d007      	beq.n	8006e94 <__any_on+0x26>
 8006e84:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006e88:	fa24 f001 	lsr.w	r0, r4, r1
 8006e8c:	fa00 f101 	lsl.w	r1, r0, r1
 8006e90:	428c      	cmp	r4, r1
 8006e92:	d10b      	bne.n	8006eac <__any_on+0x3e>
 8006e94:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d803      	bhi.n	8006ea4 <__any_on+0x36>
 8006e9c:	2000      	movs	r0, #0
 8006e9e:	bd10      	pop	{r4, pc}
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	e7f7      	b.n	8006e94 <__any_on+0x26>
 8006ea4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006ea8:	2900      	cmp	r1, #0
 8006eaa:	d0f5      	beq.n	8006e98 <__any_on+0x2a>
 8006eac:	2001      	movs	r0, #1
 8006eae:	e7f6      	b.n	8006e9e <__any_on+0x30>

08006eb0 <_calloc_r>:
 8006eb0:	b538      	push	{r3, r4, r5, lr}
 8006eb2:	fb02 f501 	mul.w	r5, r2, r1
 8006eb6:	4629      	mov	r1, r5
 8006eb8:	f7fd fc66 	bl	8004788 <_malloc_r>
 8006ebc:	4604      	mov	r4, r0
 8006ebe:	b118      	cbz	r0, 8006ec8 <_calloc_r+0x18>
 8006ec0:	462a      	mov	r2, r5
 8006ec2:	2100      	movs	r1, #0
 8006ec4:	f7fd fc0c 	bl	80046e0 <memset>
 8006ec8:	4620      	mov	r0, r4
 8006eca:	bd38      	pop	{r3, r4, r5, pc}

08006ecc <_realloc_r>:
 8006ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ece:	4607      	mov	r7, r0
 8006ed0:	4614      	mov	r4, r2
 8006ed2:	460e      	mov	r6, r1
 8006ed4:	b921      	cbnz	r1, 8006ee0 <_realloc_r+0x14>
 8006ed6:	4611      	mov	r1, r2
 8006ed8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006edc:	f7fd bc54 	b.w	8004788 <_malloc_r>
 8006ee0:	b922      	cbnz	r2, 8006eec <_realloc_r+0x20>
 8006ee2:	f7fd fc05 	bl	80046f0 <_free_r>
 8006ee6:	4625      	mov	r5, r4
 8006ee8:	4628      	mov	r0, r5
 8006eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006eec:	f000 fcfe 	bl	80078ec <_malloc_usable_size_r>
 8006ef0:	42a0      	cmp	r0, r4
 8006ef2:	d20f      	bcs.n	8006f14 <_realloc_r+0x48>
 8006ef4:	4621      	mov	r1, r4
 8006ef6:	4638      	mov	r0, r7
 8006ef8:	f7fd fc46 	bl	8004788 <_malloc_r>
 8006efc:	4605      	mov	r5, r0
 8006efe:	2800      	cmp	r0, #0
 8006f00:	d0f2      	beq.n	8006ee8 <_realloc_r+0x1c>
 8006f02:	4631      	mov	r1, r6
 8006f04:	4622      	mov	r2, r4
 8006f06:	f7fd fbdd 	bl	80046c4 <memcpy>
 8006f0a:	4631      	mov	r1, r6
 8006f0c:	4638      	mov	r0, r7
 8006f0e:	f7fd fbef 	bl	80046f0 <_free_r>
 8006f12:	e7e9      	b.n	8006ee8 <_realloc_r+0x1c>
 8006f14:	4635      	mov	r5, r6
 8006f16:	e7e7      	b.n	8006ee8 <_realloc_r+0x1c>

08006f18 <__ssputs_r>:
 8006f18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f1c:	688e      	ldr	r6, [r1, #8]
 8006f1e:	4682      	mov	sl, r0
 8006f20:	429e      	cmp	r6, r3
 8006f22:	460c      	mov	r4, r1
 8006f24:	4690      	mov	r8, r2
 8006f26:	461f      	mov	r7, r3
 8006f28:	d838      	bhi.n	8006f9c <__ssputs_r+0x84>
 8006f2a:	898a      	ldrh	r2, [r1, #12]
 8006f2c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006f30:	d032      	beq.n	8006f98 <__ssputs_r+0x80>
 8006f32:	6825      	ldr	r5, [r4, #0]
 8006f34:	6909      	ldr	r1, [r1, #16]
 8006f36:	3301      	adds	r3, #1
 8006f38:	eba5 0901 	sub.w	r9, r5, r1
 8006f3c:	6965      	ldr	r5, [r4, #20]
 8006f3e:	444b      	add	r3, r9
 8006f40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f44:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006f48:	106d      	asrs	r5, r5, #1
 8006f4a:	429d      	cmp	r5, r3
 8006f4c:	bf38      	it	cc
 8006f4e:	461d      	movcc	r5, r3
 8006f50:	0553      	lsls	r3, r2, #21
 8006f52:	d531      	bpl.n	8006fb8 <__ssputs_r+0xa0>
 8006f54:	4629      	mov	r1, r5
 8006f56:	f7fd fc17 	bl	8004788 <_malloc_r>
 8006f5a:	4606      	mov	r6, r0
 8006f5c:	b950      	cbnz	r0, 8006f74 <__ssputs_r+0x5c>
 8006f5e:	230c      	movs	r3, #12
 8006f60:	f04f 30ff 	mov.w	r0, #4294967295
 8006f64:	f8ca 3000 	str.w	r3, [sl]
 8006f68:	89a3      	ldrh	r3, [r4, #12]
 8006f6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f6e:	81a3      	strh	r3, [r4, #12]
 8006f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f74:	464a      	mov	r2, r9
 8006f76:	6921      	ldr	r1, [r4, #16]
 8006f78:	f7fd fba4 	bl	80046c4 <memcpy>
 8006f7c:	89a3      	ldrh	r3, [r4, #12]
 8006f7e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006f82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f86:	81a3      	strh	r3, [r4, #12]
 8006f88:	6126      	str	r6, [r4, #16]
 8006f8a:	444e      	add	r6, r9
 8006f8c:	6026      	str	r6, [r4, #0]
 8006f8e:	463e      	mov	r6, r7
 8006f90:	6165      	str	r5, [r4, #20]
 8006f92:	eba5 0509 	sub.w	r5, r5, r9
 8006f96:	60a5      	str	r5, [r4, #8]
 8006f98:	42be      	cmp	r6, r7
 8006f9a:	d900      	bls.n	8006f9e <__ssputs_r+0x86>
 8006f9c:	463e      	mov	r6, r7
 8006f9e:	4632      	mov	r2, r6
 8006fa0:	4641      	mov	r1, r8
 8006fa2:	6820      	ldr	r0, [r4, #0]
 8006fa4:	f000 fc88 	bl	80078b8 <memmove>
 8006fa8:	68a3      	ldr	r3, [r4, #8]
 8006faa:	6822      	ldr	r2, [r4, #0]
 8006fac:	1b9b      	subs	r3, r3, r6
 8006fae:	4432      	add	r2, r6
 8006fb0:	2000      	movs	r0, #0
 8006fb2:	60a3      	str	r3, [r4, #8]
 8006fb4:	6022      	str	r2, [r4, #0]
 8006fb6:	e7db      	b.n	8006f70 <__ssputs_r+0x58>
 8006fb8:	462a      	mov	r2, r5
 8006fba:	f7ff ff87 	bl	8006ecc <_realloc_r>
 8006fbe:	4606      	mov	r6, r0
 8006fc0:	2800      	cmp	r0, #0
 8006fc2:	d1e1      	bne.n	8006f88 <__ssputs_r+0x70>
 8006fc4:	4650      	mov	r0, sl
 8006fc6:	6921      	ldr	r1, [r4, #16]
 8006fc8:	f7fd fb92 	bl	80046f0 <_free_r>
 8006fcc:	e7c7      	b.n	8006f5e <__ssputs_r+0x46>
	...

08006fd0 <_svfiprintf_r>:
 8006fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fd4:	4698      	mov	r8, r3
 8006fd6:	898b      	ldrh	r3, [r1, #12]
 8006fd8:	4607      	mov	r7, r0
 8006fda:	061b      	lsls	r3, r3, #24
 8006fdc:	460d      	mov	r5, r1
 8006fde:	4614      	mov	r4, r2
 8006fe0:	b09d      	sub	sp, #116	; 0x74
 8006fe2:	d50e      	bpl.n	8007002 <_svfiprintf_r+0x32>
 8006fe4:	690b      	ldr	r3, [r1, #16]
 8006fe6:	b963      	cbnz	r3, 8007002 <_svfiprintf_r+0x32>
 8006fe8:	2140      	movs	r1, #64	; 0x40
 8006fea:	f7fd fbcd 	bl	8004788 <_malloc_r>
 8006fee:	6028      	str	r0, [r5, #0]
 8006ff0:	6128      	str	r0, [r5, #16]
 8006ff2:	b920      	cbnz	r0, 8006ffe <_svfiprintf_r+0x2e>
 8006ff4:	230c      	movs	r3, #12
 8006ff6:	603b      	str	r3, [r7, #0]
 8006ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8006ffc:	e0d1      	b.n	80071a2 <_svfiprintf_r+0x1d2>
 8006ffe:	2340      	movs	r3, #64	; 0x40
 8007000:	616b      	str	r3, [r5, #20]
 8007002:	2300      	movs	r3, #0
 8007004:	9309      	str	r3, [sp, #36]	; 0x24
 8007006:	2320      	movs	r3, #32
 8007008:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800700c:	2330      	movs	r3, #48	; 0x30
 800700e:	f04f 0901 	mov.w	r9, #1
 8007012:	f8cd 800c 	str.w	r8, [sp, #12]
 8007016:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80071bc <_svfiprintf_r+0x1ec>
 800701a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800701e:	4623      	mov	r3, r4
 8007020:	469a      	mov	sl, r3
 8007022:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007026:	b10a      	cbz	r2, 800702c <_svfiprintf_r+0x5c>
 8007028:	2a25      	cmp	r2, #37	; 0x25
 800702a:	d1f9      	bne.n	8007020 <_svfiprintf_r+0x50>
 800702c:	ebba 0b04 	subs.w	fp, sl, r4
 8007030:	d00b      	beq.n	800704a <_svfiprintf_r+0x7a>
 8007032:	465b      	mov	r3, fp
 8007034:	4622      	mov	r2, r4
 8007036:	4629      	mov	r1, r5
 8007038:	4638      	mov	r0, r7
 800703a:	f7ff ff6d 	bl	8006f18 <__ssputs_r>
 800703e:	3001      	adds	r0, #1
 8007040:	f000 80aa 	beq.w	8007198 <_svfiprintf_r+0x1c8>
 8007044:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007046:	445a      	add	r2, fp
 8007048:	9209      	str	r2, [sp, #36]	; 0x24
 800704a:	f89a 3000 	ldrb.w	r3, [sl]
 800704e:	2b00      	cmp	r3, #0
 8007050:	f000 80a2 	beq.w	8007198 <_svfiprintf_r+0x1c8>
 8007054:	2300      	movs	r3, #0
 8007056:	f04f 32ff 	mov.w	r2, #4294967295
 800705a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800705e:	f10a 0a01 	add.w	sl, sl, #1
 8007062:	9304      	str	r3, [sp, #16]
 8007064:	9307      	str	r3, [sp, #28]
 8007066:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800706a:	931a      	str	r3, [sp, #104]	; 0x68
 800706c:	4654      	mov	r4, sl
 800706e:	2205      	movs	r2, #5
 8007070:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007074:	4851      	ldr	r0, [pc, #324]	; (80071bc <_svfiprintf_r+0x1ec>)
 8007076:	f000 fc11 	bl	800789c <memchr>
 800707a:	9a04      	ldr	r2, [sp, #16]
 800707c:	b9d8      	cbnz	r0, 80070b6 <_svfiprintf_r+0xe6>
 800707e:	06d0      	lsls	r0, r2, #27
 8007080:	bf44      	itt	mi
 8007082:	2320      	movmi	r3, #32
 8007084:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007088:	0711      	lsls	r1, r2, #28
 800708a:	bf44      	itt	mi
 800708c:	232b      	movmi	r3, #43	; 0x2b
 800708e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007092:	f89a 3000 	ldrb.w	r3, [sl]
 8007096:	2b2a      	cmp	r3, #42	; 0x2a
 8007098:	d015      	beq.n	80070c6 <_svfiprintf_r+0xf6>
 800709a:	4654      	mov	r4, sl
 800709c:	2000      	movs	r0, #0
 800709e:	f04f 0c0a 	mov.w	ip, #10
 80070a2:	9a07      	ldr	r2, [sp, #28]
 80070a4:	4621      	mov	r1, r4
 80070a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070aa:	3b30      	subs	r3, #48	; 0x30
 80070ac:	2b09      	cmp	r3, #9
 80070ae:	d94e      	bls.n	800714e <_svfiprintf_r+0x17e>
 80070b0:	b1b0      	cbz	r0, 80070e0 <_svfiprintf_r+0x110>
 80070b2:	9207      	str	r2, [sp, #28]
 80070b4:	e014      	b.n	80070e0 <_svfiprintf_r+0x110>
 80070b6:	eba0 0308 	sub.w	r3, r0, r8
 80070ba:	fa09 f303 	lsl.w	r3, r9, r3
 80070be:	4313      	orrs	r3, r2
 80070c0:	46a2      	mov	sl, r4
 80070c2:	9304      	str	r3, [sp, #16]
 80070c4:	e7d2      	b.n	800706c <_svfiprintf_r+0x9c>
 80070c6:	9b03      	ldr	r3, [sp, #12]
 80070c8:	1d19      	adds	r1, r3, #4
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	9103      	str	r1, [sp, #12]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	bfbb      	ittet	lt
 80070d2:	425b      	neglt	r3, r3
 80070d4:	f042 0202 	orrlt.w	r2, r2, #2
 80070d8:	9307      	strge	r3, [sp, #28]
 80070da:	9307      	strlt	r3, [sp, #28]
 80070dc:	bfb8      	it	lt
 80070de:	9204      	strlt	r2, [sp, #16]
 80070e0:	7823      	ldrb	r3, [r4, #0]
 80070e2:	2b2e      	cmp	r3, #46	; 0x2e
 80070e4:	d10c      	bne.n	8007100 <_svfiprintf_r+0x130>
 80070e6:	7863      	ldrb	r3, [r4, #1]
 80070e8:	2b2a      	cmp	r3, #42	; 0x2a
 80070ea:	d135      	bne.n	8007158 <_svfiprintf_r+0x188>
 80070ec:	9b03      	ldr	r3, [sp, #12]
 80070ee:	3402      	adds	r4, #2
 80070f0:	1d1a      	adds	r2, r3, #4
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	9203      	str	r2, [sp, #12]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	bfb8      	it	lt
 80070fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80070fe:	9305      	str	r3, [sp, #20]
 8007100:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80071cc <_svfiprintf_r+0x1fc>
 8007104:	2203      	movs	r2, #3
 8007106:	4650      	mov	r0, sl
 8007108:	7821      	ldrb	r1, [r4, #0]
 800710a:	f000 fbc7 	bl	800789c <memchr>
 800710e:	b140      	cbz	r0, 8007122 <_svfiprintf_r+0x152>
 8007110:	2340      	movs	r3, #64	; 0x40
 8007112:	eba0 000a 	sub.w	r0, r0, sl
 8007116:	fa03 f000 	lsl.w	r0, r3, r0
 800711a:	9b04      	ldr	r3, [sp, #16]
 800711c:	3401      	adds	r4, #1
 800711e:	4303      	orrs	r3, r0
 8007120:	9304      	str	r3, [sp, #16]
 8007122:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007126:	2206      	movs	r2, #6
 8007128:	4825      	ldr	r0, [pc, #148]	; (80071c0 <_svfiprintf_r+0x1f0>)
 800712a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800712e:	f000 fbb5 	bl	800789c <memchr>
 8007132:	2800      	cmp	r0, #0
 8007134:	d038      	beq.n	80071a8 <_svfiprintf_r+0x1d8>
 8007136:	4b23      	ldr	r3, [pc, #140]	; (80071c4 <_svfiprintf_r+0x1f4>)
 8007138:	bb1b      	cbnz	r3, 8007182 <_svfiprintf_r+0x1b2>
 800713a:	9b03      	ldr	r3, [sp, #12]
 800713c:	3307      	adds	r3, #7
 800713e:	f023 0307 	bic.w	r3, r3, #7
 8007142:	3308      	adds	r3, #8
 8007144:	9303      	str	r3, [sp, #12]
 8007146:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007148:	4433      	add	r3, r6
 800714a:	9309      	str	r3, [sp, #36]	; 0x24
 800714c:	e767      	b.n	800701e <_svfiprintf_r+0x4e>
 800714e:	460c      	mov	r4, r1
 8007150:	2001      	movs	r0, #1
 8007152:	fb0c 3202 	mla	r2, ip, r2, r3
 8007156:	e7a5      	b.n	80070a4 <_svfiprintf_r+0xd4>
 8007158:	2300      	movs	r3, #0
 800715a:	f04f 0c0a 	mov.w	ip, #10
 800715e:	4619      	mov	r1, r3
 8007160:	3401      	adds	r4, #1
 8007162:	9305      	str	r3, [sp, #20]
 8007164:	4620      	mov	r0, r4
 8007166:	f810 2b01 	ldrb.w	r2, [r0], #1
 800716a:	3a30      	subs	r2, #48	; 0x30
 800716c:	2a09      	cmp	r2, #9
 800716e:	d903      	bls.n	8007178 <_svfiprintf_r+0x1a8>
 8007170:	2b00      	cmp	r3, #0
 8007172:	d0c5      	beq.n	8007100 <_svfiprintf_r+0x130>
 8007174:	9105      	str	r1, [sp, #20]
 8007176:	e7c3      	b.n	8007100 <_svfiprintf_r+0x130>
 8007178:	4604      	mov	r4, r0
 800717a:	2301      	movs	r3, #1
 800717c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007180:	e7f0      	b.n	8007164 <_svfiprintf_r+0x194>
 8007182:	ab03      	add	r3, sp, #12
 8007184:	9300      	str	r3, [sp, #0]
 8007186:	462a      	mov	r2, r5
 8007188:	4638      	mov	r0, r7
 800718a:	4b0f      	ldr	r3, [pc, #60]	; (80071c8 <_svfiprintf_r+0x1f8>)
 800718c:	a904      	add	r1, sp, #16
 800718e:	f3af 8000 	nop.w
 8007192:	1c42      	adds	r2, r0, #1
 8007194:	4606      	mov	r6, r0
 8007196:	d1d6      	bne.n	8007146 <_svfiprintf_r+0x176>
 8007198:	89ab      	ldrh	r3, [r5, #12]
 800719a:	065b      	lsls	r3, r3, #25
 800719c:	f53f af2c 	bmi.w	8006ff8 <_svfiprintf_r+0x28>
 80071a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071a2:	b01d      	add	sp, #116	; 0x74
 80071a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071a8:	ab03      	add	r3, sp, #12
 80071aa:	9300      	str	r3, [sp, #0]
 80071ac:	462a      	mov	r2, r5
 80071ae:	4638      	mov	r0, r7
 80071b0:	4b05      	ldr	r3, [pc, #20]	; (80071c8 <_svfiprintf_r+0x1f8>)
 80071b2:	a904      	add	r1, sp, #16
 80071b4:	f000 f9d4 	bl	8007560 <_printf_i>
 80071b8:	e7eb      	b.n	8007192 <_svfiprintf_r+0x1c2>
 80071ba:	bf00      	nop
 80071bc:	08007e6c 	.word	0x08007e6c
 80071c0:	08007e76 	.word	0x08007e76
 80071c4:	00000000 	.word	0x00000000
 80071c8:	08006f19 	.word	0x08006f19
 80071cc:	08007e72 	.word	0x08007e72

080071d0 <__sfputc_r>:
 80071d0:	6893      	ldr	r3, [r2, #8]
 80071d2:	b410      	push	{r4}
 80071d4:	3b01      	subs	r3, #1
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	6093      	str	r3, [r2, #8]
 80071da:	da07      	bge.n	80071ec <__sfputc_r+0x1c>
 80071dc:	6994      	ldr	r4, [r2, #24]
 80071de:	42a3      	cmp	r3, r4
 80071e0:	db01      	blt.n	80071e6 <__sfputc_r+0x16>
 80071e2:	290a      	cmp	r1, #10
 80071e4:	d102      	bne.n	80071ec <__sfputc_r+0x1c>
 80071e6:	bc10      	pop	{r4}
 80071e8:	f7fe bb12 	b.w	8005810 <__swbuf_r>
 80071ec:	6813      	ldr	r3, [r2, #0]
 80071ee:	1c58      	adds	r0, r3, #1
 80071f0:	6010      	str	r0, [r2, #0]
 80071f2:	7019      	strb	r1, [r3, #0]
 80071f4:	4608      	mov	r0, r1
 80071f6:	bc10      	pop	{r4}
 80071f8:	4770      	bx	lr

080071fa <__sfputs_r>:
 80071fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071fc:	4606      	mov	r6, r0
 80071fe:	460f      	mov	r7, r1
 8007200:	4614      	mov	r4, r2
 8007202:	18d5      	adds	r5, r2, r3
 8007204:	42ac      	cmp	r4, r5
 8007206:	d101      	bne.n	800720c <__sfputs_r+0x12>
 8007208:	2000      	movs	r0, #0
 800720a:	e007      	b.n	800721c <__sfputs_r+0x22>
 800720c:	463a      	mov	r2, r7
 800720e:	4630      	mov	r0, r6
 8007210:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007214:	f7ff ffdc 	bl	80071d0 <__sfputc_r>
 8007218:	1c43      	adds	r3, r0, #1
 800721a:	d1f3      	bne.n	8007204 <__sfputs_r+0xa>
 800721c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007220 <_vfiprintf_r>:
 8007220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007224:	460d      	mov	r5, r1
 8007226:	4614      	mov	r4, r2
 8007228:	4698      	mov	r8, r3
 800722a:	4606      	mov	r6, r0
 800722c:	b09d      	sub	sp, #116	; 0x74
 800722e:	b118      	cbz	r0, 8007238 <_vfiprintf_r+0x18>
 8007230:	6983      	ldr	r3, [r0, #24]
 8007232:	b90b      	cbnz	r3, 8007238 <_vfiprintf_r+0x18>
 8007234:	f7fe fce8 	bl	8005c08 <__sinit>
 8007238:	4b89      	ldr	r3, [pc, #548]	; (8007460 <_vfiprintf_r+0x240>)
 800723a:	429d      	cmp	r5, r3
 800723c:	d11b      	bne.n	8007276 <_vfiprintf_r+0x56>
 800723e:	6875      	ldr	r5, [r6, #4]
 8007240:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007242:	07d9      	lsls	r1, r3, #31
 8007244:	d405      	bmi.n	8007252 <_vfiprintf_r+0x32>
 8007246:	89ab      	ldrh	r3, [r5, #12]
 8007248:	059a      	lsls	r2, r3, #22
 800724a:	d402      	bmi.n	8007252 <_vfiprintf_r+0x32>
 800724c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800724e:	f7ff f8e0 	bl	8006412 <__retarget_lock_acquire_recursive>
 8007252:	89ab      	ldrh	r3, [r5, #12]
 8007254:	071b      	lsls	r3, r3, #28
 8007256:	d501      	bpl.n	800725c <_vfiprintf_r+0x3c>
 8007258:	692b      	ldr	r3, [r5, #16]
 800725a:	b9eb      	cbnz	r3, 8007298 <_vfiprintf_r+0x78>
 800725c:	4629      	mov	r1, r5
 800725e:	4630      	mov	r0, r6
 8007260:	f7fe fb3a 	bl	80058d8 <__swsetup_r>
 8007264:	b1c0      	cbz	r0, 8007298 <_vfiprintf_r+0x78>
 8007266:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007268:	07dc      	lsls	r4, r3, #31
 800726a:	d50e      	bpl.n	800728a <_vfiprintf_r+0x6a>
 800726c:	f04f 30ff 	mov.w	r0, #4294967295
 8007270:	b01d      	add	sp, #116	; 0x74
 8007272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007276:	4b7b      	ldr	r3, [pc, #492]	; (8007464 <_vfiprintf_r+0x244>)
 8007278:	429d      	cmp	r5, r3
 800727a:	d101      	bne.n	8007280 <_vfiprintf_r+0x60>
 800727c:	68b5      	ldr	r5, [r6, #8]
 800727e:	e7df      	b.n	8007240 <_vfiprintf_r+0x20>
 8007280:	4b79      	ldr	r3, [pc, #484]	; (8007468 <_vfiprintf_r+0x248>)
 8007282:	429d      	cmp	r5, r3
 8007284:	bf08      	it	eq
 8007286:	68f5      	ldreq	r5, [r6, #12]
 8007288:	e7da      	b.n	8007240 <_vfiprintf_r+0x20>
 800728a:	89ab      	ldrh	r3, [r5, #12]
 800728c:	0598      	lsls	r0, r3, #22
 800728e:	d4ed      	bmi.n	800726c <_vfiprintf_r+0x4c>
 8007290:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007292:	f7ff f8bf 	bl	8006414 <__retarget_lock_release_recursive>
 8007296:	e7e9      	b.n	800726c <_vfiprintf_r+0x4c>
 8007298:	2300      	movs	r3, #0
 800729a:	9309      	str	r3, [sp, #36]	; 0x24
 800729c:	2320      	movs	r3, #32
 800729e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80072a2:	2330      	movs	r3, #48	; 0x30
 80072a4:	f04f 0901 	mov.w	r9, #1
 80072a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80072ac:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800746c <_vfiprintf_r+0x24c>
 80072b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80072b4:	4623      	mov	r3, r4
 80072b6:	469a      	mov	sl, r3
 80072b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072bc:	b10a      	cbz	r2, 80072c2 <_vfiprintf_r+0xa2>
 80072be:	2a25      	cmp	r2, #37	; 0x25
 80072c0:	d1f9      	bne.n	80072b6 <_vfiprintf_r+0x96>
 80072c2:	ebba 0b04 	subs.w	fp, sl, r4
 80072c6:	d00b      	beq.n	80072e0 <_vfiprintf_r+0xc0>
 80072c8:	465b      	mov	r3, fp
 80072ca:	4622      	mov	r2, r4
 80072cc:	4629      	mov	r1, r5
 80072ce:	4630      	mov	r0, r6
 80072d0:	f7ff ff93 	bl	80071fa <__sfputs_r>
 80072d4:	3001      	adds	r0, #1
 80072d6:	f000 80aa 	beq.w	800742e <_vfiprintf_r+0x20e>
 80072da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072dc:	445a      	add	r2, fp
 80072de:	9209      	str	r2, [sp, #36]	; 0x24
 80072e0:	f89a 3000 	ldrb.w	r3, [sl]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	f000 80a2 	beq.w	800742e <_vfiprintf_r+0x20e>
 80072ea:	2300      	movs	r3, #0
 80072ec:	f04f 32ff 	mov.w	r2, #4294967295
 80072f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072f4:	f10a 0a01 	add.w	sl, sl, #1
 80072f8:	9304      	str	r3, [sp, #16]
 80072fa:	9307      	str	r3, [sp, #28]
 80072fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007300:	931a      	str	r3, [sp, #104]	; 0x68
 8007302:	4654      	mov	r4, sl
 8007304:	2205      	movs	r2, #5
 8007306:	f814 1b01 	ldrb.w	r1, [r4], #1
 800730a:	4858      	ldr	r0, [pc, #352]	; (800746c <_vfiprintf_r+0x24c>)
 800730c:	f000 fac6 	bl	800789c <memchr>
 8007310:	9a04      	ldr	r2, [sp, #16]
 8007312:	b9d8      	cbnz	r0, 800734c <_vfiprintf_r+0x12c>
 8007314:	06d1      	lsls	r1, r2, #27
 8007316:	bf44      	itt	mi
 8007318:	2320      	movmi	r3, #32
 800731a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800731e:	0713      	lsls	r3, r2, #28
 8007320:	bf44      	itt	mi
 8007322:	232b      	movmi	r3, #43	; 0x2b
 8007324:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007328:	f89a 3000 	ldrb.w	r3, [sl]
 800732c:	2b2a      	cmp	r3, #42	; 0x2a
 800732e:	d015      	beq.n	800735c <_vfiprintf_r+0x13c>
 8007330:	4654      	mov	r4, sl
 8007332:	2000      	movs	r0, #0
 8007334:	f04f 0c0a 	mov.w	ip, #10
 8007338:	9a07      	ldr	r2, [sp, #28]
 800733a:	4621      	mov	r1, r4
 800733c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007340:	3b30      	subs	r3, #48	; 0x30
 8007342:	2b09      	cmp	r3, #9
 8007344:	d94e      	bls.n	80073e4 <_vfiprintf_r+0x1c4>
 8007346:	b1b0      	cbz	r0, 8007376 <_vfiprintf_r+0x156>
 8007348:	9207      	str	r2, [sp, #28]
 800734a:	e014      	b.n	8007376 <_vfiprintf_r+0x156>
 800734c:	eba0 0308 	sub.w	r3, r0, r8
 8007350:	fa09 f303 	lsl.w	r3, r9, r3
 8007354:	4313      	orrs	r3, r2
 8007356:	46a2      	mov	sl, r4
 8007358:	9304      	str	r3, [sp, #16]
 800735a:	e7d2      	b.n	8007302 <_vfiprintf_r+0xe2>
 800735c:	9b03      	ldr	r3, [sp, #12]
 800735e:	1d19      	adds	r1, r3, #4
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	9103      	str	r1, [sp, #12]
 8007364:	2b00      	cmp	r3, #0
 8007366:	bfbb      	ittet	lt
 8007368:	425b      	neglt	r3, r3
 800736a:	f042 0202 	orrlt.w	r2, r2, #2
 800736e:	9307      	strge	r3, [sp, #28]
 8007370:	9307      	strlt	r3, [sp, #28]
 8007372:	bfb8      	it	lt
 8007374:	9204      	strlt	r2, [sp, #16]
 8007376:	7823      	ldrb	r3, [r4, #0]
 8007378:	2b2e      	cmp	r3, #46	; 0x2e
 800737a:	d10c      	bne.n	8007396 <_vfiprintf_r+0x176>
 800737c:	7863      	ldrb	r3, [r4, #1]
 800737e:	2b2a      	cmp	r3, #42	; 0x2a
 8007380:	d135      	bne.n	80073ee <_vfiprintf_r+0x1ce>
 8007382:	9b03      	ldr	r3, [sp, #12]
 8007384:	3402      	adds	r4, #2
 8007386:	1d1a      	adds	r2, r3, #4
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	9203      	str	r2, [sp, #12]
 800738c:	2b00      	cmp	r3, #0
 800738e:	bfb8      	it	lt
 8007390:	f04f 33ff 	movlt.w	r3, #4294967295
 8007394:	9305      	str	r3, [sp, #20]
 8007396:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800747c <_vfiprintf_r+0x25c>
 800739a:	2203      	movs	r2, #3
 800739c:	4650      	mov	r0, sl
 800739e:	7821      	ldrb	r1, [r4, #0]
 80073a0:	f000 fa7c 	bl	800789c <memchr>
 80073a4:	b140      	cbz	r0, 80073b8 <_vfiprintf_r+0x198>
 80073a6:	2340      	movs	r3, #64	; 0x40
 80073a8:	eba0 000a 	sub.w	r0, r0, sl
 80073ac:	fa03 f000 	lsl.w	r0, r3, r0
 80073b0:	9b04      	ldr	r3, [sp, #16]
 80073b2:	3401      	adds	r4, #1
 80073b4:	4303      	orrs	r3, r0
 80073b6:	9304      	str	r3, [sp, #16]
 80073b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073bc:	2206      	movs	r2, #6
 80073be:	482c      	ldr	r0, [pc, #176]	; (8007470 <_vfiprintf_r+0x250>)
 80073c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80073c4:	f000 fa6a 	bl	800789c <memchr>
 80073c8:	2800      	cmp	r0, #0
 80073ca:	d03f      	beq.n	800744c <_vfiprintf_r+0x22c>
 80073cc:	4b29      	ldr	r3, [pc, #164]	; (8007474 <_vfiprintf_r+0x254>)
 80073ce:	bb1b      	cbnz	r3, 8007418 <_vfiprintf_r+0x1f8>
 80073d0:	9b03      	ldr	r3, [sp, #12]
 80073d2:	3307      	adds	r3, #7
 80073d4:	f023 0307 	bic.w	r3, r3, #7
 80073d8:	3308      	adds	r3, #8
 80073da:	9303      	str	r3, [sp, #12]
 80073dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073de:	443b      	add	r3, r7
 80073e0:	9309      	str	r3, [sp, #36]	; 0x24
 80073e2:	e767      	b.n	80072b4 <_vfiprintf_r+0x94>
 80073e4:	460c      	mov	r4, r1
 80073e6:	2001      	movs	r0, #1
 80073e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80073ec:	e7a5      	b.n	800733a <_vfiprintf_r+0x11a>
 80073ee:	2300      	movs	r3, #0
 80073f0:	f04f 0c0a 	mov.w	ip, #10
 80073f4:	4619      	mov	r1, r3
 80073f6:	3401      	adds	r4, #1
 80073f8:	9305      	str	r3, [sp, #20]
 80073fa:	4620      	mov	r0, r4
 80073fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007400:	3a30      	subs	r2, #48	; 0x30
 8007402:	2a09      	cmp	r2, #9
 8007404:	d903      	bls.n	800740e <_vfiprintf_r+0x1ee>
 8007406:	2b00      	cmp	r3, #0
 8007408:	d0c5      	beq.n	8007396 <_vfiprintf_r+0x176>
 800740a:	9105      	str	r1, [sp, #20]
 800740c:	e7c3      	b.n	8007396 <_vfiprintf_r+0x176>
 800740e:	4604      	mov	r4, r0
 8007410:	2301      	movs	r3, #1
 8007412:	fb0c 2101 	mla	r1, ip, r1, r2
 8007416:	e7f0      	b.n	80073fa <_vfiprintf_r+0x1da>
 8007418:	ab03      	add	r3, sp, #12
 800741a:	9300      	str	r3, [sp, #0]
 800741c:	462a      	mov	r2, r5
 800741e:	4630      	mov	r0, r6
 8007420:	4b15      	ldr	r3, [pc, #84]	; (8007478 <_vfiprintf_r+0x258>)
 8007422:	a904      	add	r1, sp, #16
 8007424:	f3af 8000 	nop.w
 8007428:	4607      	mov	r7, r0
 800742a:	1c78      	adds	r0, r7, #1
 800742c:	d1d6      	bne.n	80073dc <_vfiprintf_r+0x1bc>
 800742e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007430:	07d9      	lsls	r1, r3, #31
 8007432:	d405      	bmi.n	8007440 <_vfiprintf_r+0x220>
 8007434:	89ab      	ldrh	r3, [r5, #12]
 8007436:	059a      	lsls	r2, r3, #22
 8007438:	d402      	bmi.n	8007440 <_vfiprintf_r+0x220>
 800743a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800743c:	f7fe ffea 	bl	8006414 <__retarget_lock_release_recursive>
 8007440:	89ab      	ldrh	r3, [r5, #12]
 8007442:	065b      	lsls	r3, r3, #25
 8007444:	f53f af12 	bmi.w	800726c <_vfiprintf_r+0x4c>
 8007448:	9809      	ldr	r0, [sp, #36]	; 0x24
 800744a:	e711      	b.n	8007270 <_vfiprintf_r+0x50>
 800744c:	ab03      	add	r3, sp, #12
 800744e:	9300      	str	r3, [sp, #0]
 8007450:	462a      	mov	r2, r5
 8007452:	4630      	mov	r0, r6
 8007454:	4b08      	ldr	r3, [pc, #32]	; (8007478 <_vfiprintf_r+0x258>)
 8007456:	a904      	add	r1, sp, #16
 8007458:	f000 f882 	bl	8007560 <_printf_i>
 800745c:	e7e4      	b.n	8007428 <_vfiprintf_r+0x208>
 800745e:	bf00      	nop
 8007460:	08007c28 	.word	0x08007c28
 8007464:	08007c48 	.word	0x08007c48
 8007468:	08007c08 	.word	0x08007c08
 800746c:	08007e6c 	.word	0x08007e6c
 8007470:	08007e76 	.word	0x08007e76
 8007474:	00000000 	.word	0x00000000
 8007478:	080071fb 	.word	0x080071fb
 800747c:	08007e72 	.word	0x08007e72

08007480 <_printf_common>:
 8007480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007484:	4616      	mov	r6, r2
 8007486:	4699      	mov	r9, r3
 8007488:	688a      	ldr	r2, [r1, #8]
 800748a:	690b      	ldr	r3, [r1, #16]
 800748c:	4607      	mov	r7, r0
 800748e:	4293      	cmp	r3, r2
 8007490:	bfb8      	it	lt
 8007492:	4613      	movlt	r3, r2
 8007494:	6033      	str	r3, [r6, #0]
 8007496:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800749a:	460c      	mov	r4, r1
 800749c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80074a0:	b10a      	cbz	r2, 80074a6 <_printf_common+0x26>
 80074a2:	3301      	adds	r3, #1
 80074a4:	6033      	str	r3, [r6, #0]
 80074a6:	6823      	ldr	r3, [r4, #0]
 80074a8:	0699      	lsls	r1, r3, #26
 80074aa:	bf42      	ittt	mi
 80074ac:	6833      	ldrmi	r3, [r6, #0]
 80074ae:	3302      	addmi	r3, #2
 80074b0:	6033      	strmi	r3, [r6, #0]
 80074b2:	6825      	ldr	r5, [r4, #0]
 80074b4:	f015 0506 	ands.w	r5, r5, #6
 80074b8:	d106      	bne.n	80074c8 <_printf_common+0x48>
 80074ba:	f104 0a19 	add.w	sl, r4, #25
 80074be:	68e3      	ldr	r3, [r4, #12]
 80074c0:	6832      	ldr	r2, [r6, #0]
 80074c2:	1a9b      	subs	r3, r3, r2
 80074c4:	42ab      	cmp	r3, r5
 80074c6:	dc28      	bgt.n	800751a <_printf_common+0x9a>
 80074c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80074cc:	1e13      	subs	r3, r2, #0
 80074ce:	6822      	ldr	r2, [r4, #0]
 80074d0:	bf18      	it	ne
 80074d2:	2301      	movne	r3, #1
 80074d4:	0692      	lsls	r2, r2, #26
 80074d6:	d42d      	bmi.n	8007534 <_printf_common+0xb4>
 80074d8:	4649      	mov	r1, r9
 80074da:	4638      	mov	r0, r7
 80074dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80074e0:	47c0      	blx	r8
 80074e2:	3001      	adds	r0, #1
 80074e4:	d020      	beq.n	8007528 <_printf_common+0xa8>
 80074e6:	6823      	ldr	r3, [r4, #0]
 80074e8:	68e5      	ldr	r5, [r4, #12]
 80074ea:	f003 0306 	and.w	r3, r3, #6
 80074ee:	2b04      	cmp	r3, #4
 80074f0:	bf18      	it	ne
 80074f2:	2500      	movne	r5, #0
 80074f4:	6832      	ldr	r2, [r6, #0]
 80074f6:	f04f 0600 	mov.w	r6, #0
 80074fa:	68a3      	ldr	r3, [r4, #8]
 80074fc:	bf08      	it	eq
 80074fe:	1aad      	subeq	r5, r5, r2
 8007500:	6922      	ldr	r2, [r4, #16]
 8007502:	bf08      	it	eq
 8007504:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007508:	4293      	cmp	r3, r2
 800750a:	bfc4      	itt	gt
 800750c:	1a9b      	subgt	r3, r3, r2
 800750e:	18ed      	addgt	r5, r5, r3
 8007510:	341a      	adds	r4, #26
 8007512:	42b5      	cmp	r5, r6
 8007514:	d11a      	bne.n	800754c <_printf_common+0xcc>
 8007516:	2000      	movs	r0, #0
 8007518:	e008      	b.n	800752c <_printf_common+0xac>
 800751a:	2301      	movs	r3, #1
 800751c:	4652      	mov	r2, sl
 800751e:	4649      	mov	r1, r9
 8007520:	4638      	mov	r0, r7
 8007522:	47c0      	blx	r8
 8007524:	3001      	adds	r0, #1
 8007526:	d103      	bne.n	8007530 <_printf_common+0xb0>
 8007528:	f04f 30ff 	mov.w	r0, #4294967295
 800752c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007530:	3501      	adds	r5, #1
 8007532:	e7c4      	b.n	80074be <_printf_common+0x3e>
 8007534:	2030      	movs	r0, #48	; 0x30
 8007536:	18e1      	adds	r1, r4, r3
 8007538:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800753c:	1c5a      	adds	r2, r3, #1
 800753e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007542:	4422      	add	r2, r4
 8007544:	3302      	adds	r3, #2
 8007546:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800754a:	e7c5      	b.n	80074d8 <_printf_common+0x58>
 800754c:	2301      	movs	r3, #1
 800754e:	4622      	mov	r2, r4
 8007550:	4649      	mov	r1, r9
 8007552:	4638      	mov	r0, r7
 8007554:	47c0      	blx	r8
 8007556:	3001      	adds	r0, #1
 8007558:	d0e6      	beq.n	8007528 <_printf_common+0xa8>
 800755a:	3601      	adds	r6, #1
 800755c:	e7d9      	b.n	8007512 <_printf_common+0x92>
	...

08007560 <_printf_i>:
 8007560:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007564:	460c      	mov	r4, r1
 8007566:	7e27      	ldrb	r7, [r4, #24]
 8007568:	4691      	mov	r9, r2
 800756a:	2f78      	cmp	r7, #120	; 0x78
 800756c:	4680      	mov	r8, r0
 800756e:	469a      	mov	sl, r3
 8007570:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007572:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007576:	d807      	bhi.n	8007588 <_printf_i+0x28>
 8007578:	2f62      	cmp	r7, #98	; 0x62
 800757a:	d80a      	bhi.n	8007592 <_printf_i+0x32>
 800757c:	2f00      	cmp	r7, #0
 800757e:	f000 80d9 	beq.w	8007734 <_printf_i+0x1d4>
 8007582:	2f58      	cmp	r7, #88	; 0x58
 8007584:	f000 80a4 	beq.w	80076d0 <_printf_i+0x170>
 8007588:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800758c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007590:	e03a      	b.n	8007608 <_printf_i+0xa8>
 8007592:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007596:	2b15      	cmp	r3, #21
 8007598:	d8f6      	bhi.n	8007588 <_printf_i+0x28>
 800759a:	a001      	add	r0, pc, #4	; (adr r0, 80075a0 <_printf_i+0x40>)
 800759c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80075a0:	080075f9 	.word	0x080075f9
 80075a4:	0800760d 	.word	0x0800760d
 80075a8:	08007589 	.word	0x08007589
 80075ac:	08007589 	.word	0x08007589
 80075b0:	08007589 	.word	0x08007589
 80075b4:	08007589 	.word	0x08007589
 80075b8:	0800760d 	.word	0x0800760d
 80075bc:	08007589 	.word	0x08007589
 80075c0:	08007589 	.word	0x08007589
 80075c4:	08007589 	.word	0x08007589
 80075c8:	08007589 	.word	0x08007589
 80075cc:	0800771b 	.word	0x0800771b
 80075d0:	0800763d 	.word	0x0800763d
 80075d4:	080076fd 	.word	0x080076fd
 80075d8:	08007589 	.word	0x08007589
 80075dc:	08007589 	.word	0x08007589
 80075e0:	0800773d 	.word	0x0800773d
 80075e4:	08007589 	.word	0x08007589
 80075e8:	0800763d 	.word	0x0800763d
 80075ec:	08007589 	.word	0x08007589
 80075f0:	08007589 	.word	0x08007589
 80075f4:	08007705 	.word	0x08007705
 80075f8:	680b      	ldr	r3, [r1, #0]
 80075fa:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80075fe:	1d1a      	adds	r2, r3, #4
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	600a      	str	r2, [r1, #0]
 8007604:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007608:	2301      	movs	r3, #1
 800760a:	e0a4      	b.n	8007756 <_printf_i+0x1f6>
 800760c:	6825      	ldr	r5, [r4, #0]
 800760e:	6808      	ldr	r0, [r1, #0]
 8007610:	062e      	lsls	r6, r5, #24
 8007612:	f100 0304 	add.w	r3, r0, #4
 8007616:	d50a      	bpl.n	800762e <_printf_i+0xce>
 8007618:	6805      	ldr	r5, [r0, #0]
 800761a:	600b      	str	r3, [r1, #0]
 800761c:	2d00      	cmp	r5, #0
 800761e:	da03      	bge.n	8007628 <_printf_i+0xc8>
 8007620:	232d      	movs	r3, #45	; 0x2d
 8007622:	426d      	negs	r5, r5
 8007624:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007628:	230a      	movs	r3, #10
 800762a:	485e      	ldr	r0, [pc, #376]	; (80077a4 <_printf_i+0x244>)
 800762c:	e019      	b.n	8007662 <_printf_i+0x102>
 800762e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007632:	6805      	ldr	r5, [r0, #0]
 8007634:	600b      	str	r3, [r1, #0]
 8007636:	bf18      	it	ne
 8007638:	b22d      	sxthne	r5, r5
 800763a:	e7ef      	b.n	800761c <_printf_i+0xbc>
 800763c:	680b      	ldr	r3, [r1, #0]
 800763e:	6825      	ldr	r5, [r4, #0]
 8007640:	1d18      	adds	r0, r3, #4
 8007642:	6008      	str	r0, [r1, #0]
 8007644:	0628      	lsls	r0, r5, #24
 8007646:	d501      	bpl.n	800764c <_printf_i+0xec>
 8007648:	681d      	ldr	r5, [r3, #0]
 800764a:	e002      	b.n	8007652 <_printf_i+0xf2>
 800764c:	0669      	lsls	r1, r5, #25
 800764e:	d5fb      	bpl.n	8007648 <_printf_i+0xe8>
 8007650:	881d      	ldrh	r5, [r3, #0]
 8007652:	2f6f      	cmp	r7, #111	; 0x6f
 8007654:	bf0c      	ite	eq
 8007656:	2308      	moveq	r3, #8
 8007658:	230a      	movne	r3, #10
 800765a:	4852      	ldr	r0, [pc, #328]	; (80077a4 <_printf_i+0x244>)
 800765c:	2100      	movs	r1, #0
 800765e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007662:	6866      	ldr	r6, [r4, #4]
 8007664:	2e00      	cmp	r6, #0
 8007666:	bfa8      	it	ge
 8007668:	6821      	ldrge	r1, [r4, #0]
 800766a:	60a6      	str	r6, [r4, #8]
 800766c:	bfa4      	itt	ge
 800766e:	f021 0104 	bicge.w	r1, r1, #4
 8007672:	6021      	strge	r1, [r4, #0]
 8007674:	b90d      	cbnz	r5, 800767a <_printf_i+0x11a>
 8007676:	2e00      	cmp	r6, #0
 8007678:	d04d      	beq.n	8007716 <_printf_i+0x1b6>
 800767a:	4616      	mov	r6, r2
 800767c:	fbb5 f1f3 	udiv	r1, r5, r3
 8007680:	fb03 5711 	mls	r7, r3, r1, r5
 8007684:	5dc7      	ldrb	r7, [r0, r7]
 8007686:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800768a:	462f      	mov	r7, r5
 800768c:	42bb      	cmp	r3, r7
 800768e:	460d      	mov	r5, r1
 8007690:	d9f4      	bls.n	800767c <_printf_i+0x11c>
 8007692:	2b08      	cmp	r3, #8
 8007694:	d10b      	bne.n	80076ae <_printf_i+0x14e>
 8007696:	6823      	ldr	r3, [r4, #0]
 8007698:	07df      	lsls	r7, r3, #31
 800769a:	d508      	bpl.n	80076ae <_printf_i+0x14e>
 800769c:	6923      	ldr	r3, [r4, #16]
 800769e:	6861      	ldr	r1, [r4, #4]
 80076a0:	4299      	cmp	r1, r3
 80076a2:	bfde      	ittt	le
 80076a4:	2330      	movle	r3, #48	; 0x30
 80076a6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80076aa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80076ae:	1b92      	subs	r2, r2, r6
 80076b0:	6122      	str	r2, [r4, #16]
 80076b2:	464b      	mov	r3, r9
 80076b4:	4621      	mov	r1, r4
 80076b6:	4640      	mov	r0, r8
 80076b8:	f8cd a000 	str.w	sl, [sp]
 80076bc:	aa03      	add	r2, sp, #12
 80076be:	f7ff fedf 	bl	8007480 <_printf_common>
 80076c2:	3001      	adds	r0, #1
 80076c4:	d14c      	bne.n	8007760 <_printf_i+0x200>
 80076c6:	f04f 30ff 	mov.w	r0, #4294967295
 80076ca:	b004      	add	sp, #16
 80076cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076d0:	4834      	ldr	r0, [pc, #208]	; (80077a4 <_printf_i+0x244>)
 80076d2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80076d6:	680e      	ldr	r6, [r1, #0]
 80076d8:	6823      	ldr	r3, [r4, #0]
 80076da:	f856 5b04 	ldr.w	r5, [r6], #4
 80076de:	061f      	lsls	r7, r3, #24
 80076e0:	600e      	str	r6, [r1, #0]
 80076e2:	d514      	bpl.n	800770e <_printf_i+0x1ae>
 80076e4:	07d9      	lsls	r1, r3, #31
 80076e6:	bf44      	itt	mi
 80076e8:	f043 0320 	orrmi.w	r3, r3, #32
 80076ec:	6023      	strmi	r3, [r4, #0]
 80076ee:	b91d      	cbnz	r5, 80076f8 <_printf_i+0x198>
 80076f0:	6823      	ldr	r3, [r4, #0]
 80076f2:	f023 0320 	bic.w	r3, r3, #32
 80076f6:	6023      	str	r3, [r4, #0]
 80076f8:	2310      	movs	r3, #16
 80076fa:	e7af      	b.n	800765c <_printf_i+0xfc>
 80076fc:	6823      	ldr	r3, [r4, #0]
 80076fe:	f043 0320 	orr.w	r3, r3, #32
 8007702:	6023      	str	r3, [r4, #0]
 8007704:	2378      	movs	r3, #120	; 0x78
 8007706:	4828      	ldr	r0, [pc, #160]	; (80077a8 <_printf_i+0x248>)
 8007708:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800770c:	e7e3      	b.n	80076d6 <_printf_i+0x176>
 800770e:	065e      	lsls	r6, r3, #25
 8007710:	bf48      	it	mi
 8007712:	b2ad      	uxthmi	r5, r5
 8007714:	e7e6      	b.n	80076e4 <_printf_i+0x184>
 8007716:	4616      	mov	r6, r2
 8007718:	e7bb      	b.n	8007692 <_printf_i+0x132>
 800771a:	680b      	ldr	r3, [r1, #0]
 800771c:	6826      	ldr	r6, [r4, #0]
 800771e:	1d1d      	adds	r5, r3, #4
 8007720:	6960      	ldr	r0, [r4, #20]
 8007722:	600d      	str	r5, [r1, #0]
 8007724:	0635      	lsls	r5, r6, #24
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	d501      	bpl.n	800772e <_printf_i+0x1ce>
 800772a:	6018      	str	r0, [r3, #0]
 800772c:	e002      	b.n	8007734 <_printf_i+0x1d4>
 800772e:	0671      	lsls	r1, r6, #25
 8007730:	d5fb      	bpl.n	800772a <_printf_i+0x1ca>
 8007732:	8018      	strh	r0, [r3, #0]
 8007734:	2300      	movs	r3, #0
 8007736:	4616      	mov	r6, r2
 8007738:	6123      	str	r3, [r4, #16]
 800773a:	e7ba      	b.n	80076b2 <_printf_i+0x152>
 800773c:	680b      	ldr	r3, [r1, #0]
 800773e:	1d1a      	adds	r2, r3, #4
 8007740:	600a      	str	r2, [r1, #0]
 8007742:	681e      	ldr	r6, [r3, #0]
 8007744:	2100      	movs	r1, #0
 8007746:	4630      	mov	r0, r6
 8007748:	6862      	ldr	r2, [r4, #4]
 800774a:	f000 f8a7 	bl	800789c <memchr>
 800774e:	b108      	cbz	r0, 8007754 <_printf_i+0x1f4>
 8007750:	1b80      	subs	r0, r0, r6
 8007752:	6060      	str	r0, [r4, #4]
 8007754:	6863      	ldr	r3, [r4, #4]
 8007756:	6123      	str	r3, [r4, #16]
 8007758:	2300      	movs	r3, #0
 800775a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800775e:	e7a8      	b.n	80076b2 <_printf_i+0x152>
 8007760:	4632      	mov	r2, r6
 8007762:	4649      	mov	r1, r9
 8007764:	4640      	mov	r0, r8
 8007766:	6923      	ldr	r3, [r4, #16]
 8007768:	47d0      	blx	sl
 800776a:	3001      	adds	r0, #1
 800776c:	d0ab      	beq.n	80076c6 <_printf_i+0x166>
 800776e:	6823      	ldr	r3, [r4, #0]
 8007770:	079b      	lsls	r3, r3, #30
 8007772:	d413      	bmi.n	800779c <_printf_i+0x23c>
 8007774:	68e0      	ldr	r0, [r4, #12]
 8007776:	9b03      	ldr	r3, [sp, #12]
 8007778:	4298      	cmp	r0, r3
 800777a:	bfb8      	it	lt
 800777c:	4618      	movlt	r0, r3
 800777e:	e7a4      	b.n	80076ca <_printf_i+0x16a>
 8007780:	2301      	movs	r3, #1
 8007782:	4632      	mov	r2, r6
 8007784:	4649      	mov	r1, r9
 8007786:	4640      	mov	r0, r8
 8007788:	47d0      	blx	sl
 800778a:	3001      	adds	r0, #1
 800778c:	d09b      	beq.n	80076c6 <_printf_i+0x166>
 800778e:	3501      	adds	r5, #1
 8007790:	68e3      	ldr	r3, [r4, #12]
 8007792:	9903      	ldr	r1, [sp, #12]
 8007794:	1a5b      	subs	r3, r3, r1
 8007796:	42ab      	cmp	r3, r5
 8007798:	dcf2      	bgt.n	8007780 <_printf_i+0x220>
 800779a:	e7eb      	b.n	8007774 <_printf_i+0x214>
 800779c:	2500      	movs	r5, #0
 800779e:	f104 0619 	add.w	r6, r4, #25
 80077a2:	e7f5      	b.n	8007790 <_printf_i+0x230>
 80077a4:	08007e7d 	.word	0x08007e7d
 80077a8:	08007e8e 	.word	0x08007e8e

080077ac <_read_r>:
 80077ac:	b538      	push	{r3, r4, r5, lr}
 80077ae:	4604      	mov	r4, r0
 80077b0:	4608      	mov	r0, r1
 80077b2:	4611      	mov	r1, r2
 80077b4:	2200      	movs	r2, #0
 80077b6:	4d05      	ldr	r5, [pc, #20]	; (80077cc <_read_r+0x20>)
 80077b8:	602a      	str	r2, [r5, #0]
 80077ba:	461a      	mov	r2, r3
 80077bc:	f7fa fe7f 	bl	80024be <_read>
 80077c0:	1c43      	adds	r3, r0, #1
 80077c2:	d102      	bne.n	80077ca <_read_r+0x1e>
 80077c4:	682b      	ldr	r3, [r5, #0]
 80077c6:	b103      	cbz	r3, 80077ca <_read_r+0x1e>
 80077c8:	6023      	str	r3, [r4, #0]
 80077ca:	bd38      	pop	{r3, r4, r5, pc}
 80077cc:	20000468 	.word	0x20000468

080077d0 <nan>:
 80077d0:	2000      	movs	r0, #0
 80077d2:	4901      	ldr	r1, [pc, #4]	; (80077d8 <nan+0x8>)
 80077d4:	4770      	bx	lr
 80077d6:	bf00      	nop
 80077d8:	7ff80000 	.word	0x7ff80000

080077dc <__ascii_wctomb>:
 80077dc:	4603      	mov	r3, r0
 80077de:	4608      	mov	r0, r1
 80077e0:	b141      	cbz	r1, 80077f4 <__ascii_wctomb+0x18>
 80077e2:	2aff      	cmp	r2, #255	; 0xff
 80077e4:	d904      	bls.n	80077f0 <__ascii_wctomb+0x14>
 80077e6:	228a      	movs	r2, #138	; 0x8a
 80077e8:	f04f 30ff 	mov.w	r0, #4294967295
 80077ec:	601a      	str	r2, [r3, #0]
 80077ee:	4770      	bx	lr
 80077f0:	2001      	movs	r0, #1
 80077f2:	700a      	strb	r2, [r1, #0]
 80077f4:	4770      	bx	lr
	...

080077f8 <__assert_func>:
 80077f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80077fa:	4614      	mov	r4, r2
 80077fc:	461a      	mov	r2, r3
 80077fe:	4b09      	ldr	r3, [pc, #36]	; (8007824 <__assert_func+0x2c>)
 8007800:	4605      	mov	r5, r0
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	68d8      	ldr	r0, [r3, #12]
 8007806:	b14c      	cbz	r4, 800781c <__assert_func+0x24>
 8007808:	4b07      	ldr	r3, [pc, #28]	; (8007828 <__assert_func+0x30>)
 800780a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800780e:	9100      	str	r1, [sp, #0]
 8007810:	462b      	mov	r3, r5
 8007812:	4906      	ldr	r1, [pc, #24]	; (800782c <__assert_func+0x34>)
 8007814:	f000 f80e 	bl	8007834 <fiprintf>
 8007818:	f000 f870 	bl	80078fc <abort>
 800781c:	4b04      	ldr	r3, [pc, #16]	; (8007830 <__assert_func+0x38>)
 800781e:	461c      	mov	r4, r3
 8007820:	e7f3      	b.n	800780a <__assert_func+0x12>
 8007822:	bf00      	nop
 8007824:	20000018 	.word	0x20000018
 8007828:	08007e9f 	.word	0x08007e9f
 800782c:	08007eac 	.word	0x08007eac
 8007830:	08007eda 	.word	0x08007eda

08007834 <fiprintf>:
 8007834:	b40e      	push	{r1, r2, r3}
 8007836:	b503      	push	{r0, r1, lr}
 8007838:	4601      	mov	r1, r0
 800783a:	ab03      	add	r3, sp, #12
 800783c:	4805      	ldr	r0, [pc, #20]	; (8007854 <fiprintf+0x20>)
 800783e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007842:	6800      	ldr	r0, [r0, #0]
 8007844:	9301      	str	r3, [sp, #4]
 8007846:	f7ff fceb 	bl	8007220 <_vfiprintf_r>
 800784a:	b002      	add	sp, #8
 800784c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007850:	b003      	add	sp, #12
 8007852:	4770      	bx	lr
 8007854:	20000018 	.word	0x20000018

08007858 <_fstat_r>:
 8007858:	b538      	push	{r3, r4, r5, lr}
 800785a:	2300      	movs	r3, #0
 800785c:	4d06      	ldr	r5, [pc, #24]	; (8007878 <_fstat_r+0x20>)
 800785e:	4604      	mov	r4, r0
 8007860:	4608      	mov	r0, r1
 8007862:	4611      	mov	r1, r2
 8007864:	602b      	str	r3, [r5, #0]
 8007866:	f7fa fe6e 	bl	8002546 <_fstat>
 800786a:	1c43      	adds	r3, r0, #1
 800786c:	d102      	bne.n	8007874 <_fstat_r+0x1c>
 800786e:	682b      	ldr	r3, [r5, #0]
 8007870:	b103      	cbz	r3, 8007874 <_fstat_r+0x1c>
 8007872:	6023      	str	r3, [r4, #0]
 8007874:	bd38      	pop	{r3, r4, r5, pc}
 8007876:	bf00      	nop
 8007878:	20000468 	.word	0x20000468

0800787c <_isatty_r>:
 800787c:	b538      	push	{r3, r4, r5, lr}
 800787e:	2300      	movs	r3, #0
 8007880:	4d05      	ldr	r5, [pc, #20]	; (8007898 <_isatty_r+0x1c>)
 8007882:	4604      	mov	r4, r0
 8007884:	4608      	mov	r0, r1
 8007886:	602b      	str	r3, [r5, #0]
 8007888:	f7fa fe6c 	bl	8002564 <_isatty>
 800788c:	1c43      	adds	r3, r0, #1
 800788e:	d102      	bne.n	8007896 <_isatty_r+0x1a>
 8007890:	682b      	ldr	r3, [r5, #0]
 8007892:	b103      	cbz	r3, 8007896 <_isatty_r+0x1a>
 8007894:	6023      	str	r3, [r4, #0]
 8007896:	bd38      	pop	{r3, r4, r5, pc}
 8007898:	20000468 	.word	0x20000468

0800789c <memchr>:
 800789c:	4603      	mov	r3, r0
 800789e:	b510      	push	{r4, lr}
 80078a0:	b2c9      	uxtb	r1, r1
 80078a2:	4402      	add	r2, r0
 80078a4:	4293      	cmp	r3, r2
 80078a6:	4618      	mov	r0, r3
 80078a8:	d101      	bne.n	80078ae <memchr+0x12>
 80078aa:	2000      	movs	r0, #0
 80078ac:	e003      	b.n	80078b6 <memchr+0x1a>
 80078ae:	7804      	ldrb	r4, [r0, #0]
 80078b0:	3301      	adds	r3, #1
 80078b2:	428c      	cmp	r4, r1
 80078b4:	d1f6      	bne.n	80078a4 <memchr+0x8>
 80078b6:	bd10      	pop	{r4, pc}

080078b8 <memmove>:
 80078b8:	4288      	cmp	r0, r1
 80078ba:	b510      	push	{r4, lr}
 80078bc:	eb01 0402 	add.w	r4, r1, r2
 80078c0:	d902      	bls.n	80078c8 <memmove+0x10>
 80078c2:	4284      	cmp	r4, r0
 80078c4:	4623      	mov	r3, r4
 80078c6:	d807      	bhi.n	80078d8 <memmove+0x20>
 80078c8:	1e43      	subs	r3, r0, #1
 80078ca:	42a1      	cmp	r1, r4
 80078cc:	d008      	beq.n	80078e0 <memmove+0x28>
 80078ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80078d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80078d6:	e7f8      	b.n	80078ca <memmove+0x12>
 80078d8:	4601      	mov	r1, r0
 80078da:	4402      	add	r2, r0
 80078dc:	428a      	cmp	r2, r1
 80078de:	d100      	bne.n	80078e2 <memmove+0x2a>
 80078e0:	bd10      	pop	{r4, pc}
 80078e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80078e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80078ea:	e7f7      	b.n	80078dc <memmove+0x24>

080078ec <_malloc_usable_size_r>:
 80078ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078f0:	1f18      	subs	r0, r3, #4
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	bfbc      	itt	lt
 80078f6:	580b      	ldrlt	r3, [r1, r0]
 80078f8:	18c0      	addlt	r0, r0, r3
 80078fa:	4770      	bx	lr

080078fc <abort>:
 80078fc:	2006      	movs	r0, #6
 80078fe:	b508      	push	{r3, lr}
 8007900:	f000 f82c 	bl	800795c <raise>
 8007904:	2001      	movs	r0, #1
 8007906:	f7fa fdd0 	bl	80024aa <_exit>

0800790a <_raise_r>:
 800790a:	291f      	cmp	r1, #31
 800790c:	b538      	push	{r3, r4, r5, lr}
 800790e:	4604      	mov	r4, r0
 8007910:	460d      	mov	r5, r1
 8007912:	d904      	bls.n	800791e <_raise_r+0x14>
 8007914:	2316      	movs	r3, #22
 8007916:	6003      	str	r3, [r0, #0]
 8007918:	f04f 30ff 	mov.w	r0, #4294967295
 800791c:	bd38      	pop	{r3, r4, r5, pc}
 800791e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007920:	b112      	cbz	r2, 8007928 <_raise_r+0x1e>
 8007922:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007926:	b94b      	cbnz	r3, 800793c <_raise_r+0x32>
 8007928:	4620      	mov	r0, r4
 800792a:	f000 f831 	bl	8007990 <_getpid_r>
 800792e:	462a      	mov	r2, r5
 8007930:	4601      	mov	r1, r0
 8007932:	4620      	mov	r0, r4
 8007934:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007938:	f000 b818 	b.w	800796c <_kill_r>
 800793c:	2b01      	cmp	r3, #1
 800793e:	d00a      	beq.n	8007956 <_raise_r+0x4c>
 8007940:	1c59      	adds	r1, r3, #1
 8007942:	d103      	bne.n	800794c <_raise_r+0x42>
 8007944:	2316      	movs	r3, #22
 8007946:	6003      	str	r3, [r0, #0]
 8007948:	2001      	movs	r0, #1
 800794a:	e7e7      	b.n	800791c <_raise_r+0x12>
 800794c:	2400      	movs	r4, #0
 800794e:	4628      	mov	r0, r5
 8007950:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007954:	4798      	blx	r3
 8007956:	2000      	movs	r0, #0
 8007958:	e7e0      	b.n	800791c <_raise_r+0x12>
	...

0800795c <raise>:
 800795c:	4b02      	ldr	r3, [pc, #8]	; (8007968 <raise+0xc>)
 800795e:	4601      	mov	r1, r0
 8007960:	6818      	ldr	r0, [r3, #0]
 8007962:	f7ff bfd2 	b.w	800790a <_raise_r>
 8007966:	bf00      	nop
 8007968:	20000018 	.word	0x20000018

0800796c <_kill_r>:
 800796c:	b538      	push	{r3, r4, r5, lr}
 800796e:	2300      	movs	r3, #0
 8007970:	4d06      	ldr	r5, [pc, #24]	; (800798c <_kill_r+0x20>)
 8007972:	4604      	mov	r4, r0
 8007974:	4608      	mov	r0, r1
 8007976:	4611      	mov	r1, r2
 8007978:	602b      	str	r3, [r5, #0]
 800797a:	f7fa fd86 	bl	800248a <_kill>
 800797e:	1c43      	adds	r3, r0, #1
 8007980:	d102      	bne.n	8007988 <_kill_r+0x1c>
 8007982:	682b      	ldr	r3, [r5, #0]
 8007984:	b103      	cbz	r3, 8007988 <_kill_r+0x1c>
 8007986:	6023      	str	r3, [r4, #0]
 8007988:	bd38      	pop	{r3, r4, r5, pc}
 800798a:	bf00      	nop
 800798c:	20000468 	.word	0x20000468

08007990 <_getpid_r>:
 8007990:	f7fa bd74 	b.w	800247c <_getpid>

08007994 <_init>:
 8007994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007996:	bf00      	nop
 8007998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800799a:	bc08      	pop	{r3}
 800799c:	469e      	mov	lr, r3
 800799e:	4770      	bx	lr

080079a0 <_fini>:
 80079a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079a2:	bf00      	nop
 80079a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079a6:	bc08      	pop	{r3}
 80079a8:	469e      	mov	lr, r3
 80079aa:	4770      	bx	lr
