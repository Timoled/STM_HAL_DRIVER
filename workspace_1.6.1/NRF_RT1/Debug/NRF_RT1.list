
NRF_RT1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cd4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b0  08003de0  08003de0  00013de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004390  08004390  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08004390  08004390  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004390  08004390  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004390  08004390  00014390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004394  08004394  00014394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004398  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  20000078  08004410  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  08004410  0002023c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a01a  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a22  00000000  00000000  0002a0bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c0  00000000  00000000  0002bae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000928  00000000  00000000  0002c4a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001721b  00000000  00000000  0002cdc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000984c  00000000  00000000  00043fe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083efa  00000000  00000000  0004d82f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d1729  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b10  00000000  00000000  000d177c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08003dc8 	.word	0x08003dc8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08003dc8 	.word	0x08003dc8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 800015c:	b480      	push	{r7}
 800015e:	b085      	sub	sp, #20
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 8000168:	4b0a      	ldr	r3, [pc, #40]	; (8000194 <NRF24_DelayMicroSeconds+0x38>)
 800016a:	681b      	ldr	r3, [r3, #0]
 800016c:	4a0a      	ldr	r2, [pc, #40]	; (8000198 <NRF24_DelayMicroSeconds+0x3c>)
 800016e:	fba2 2303 	umull	r2, r3, r2, r3
 8000172:	0c9a      	lsrs	r2, r3, #18
 8000174:	68fb      	ldr	r3, [r7, #12]
 8000176:	fb02 f303 	mul.w	r3, r2, r3
 800017a:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 800017c:	bf00      	nop
 800017e:	68fb      	ldr	r3, [r7, #12]
 8000180:	1e5a      	subs	r2, r3, #1
 8000182:	60fa      	str	r2, [r7, #12]
 8000184:	2b00      	cmp	r3, #0
 8000186:	d1fa      	bne.n	800017e <NRF24_DelayMicroSeconds+0x22>
}
 8000188:	bf00      	nop
 800018a:	bf00      	nop
 800018c:	3714      	adds	r7, #20
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr
 8000194:	20000008 	.word	0x20000008
 8000198:	165e9f81 	.word	0x165e9f81

0800019c <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	b082      	sub	sp, #8
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	2b00      	cmp	r3, #0
 80001a8:	d008      	beq.n	80001bc <NRF24_csn+0x20>
 80001aa:	4b0a      	ldr	r3, [pc, #40]	; (80001d4 <NRF24_csn+0x38>)
 80001ac:	681b      	ldr	r3, [r3, #0]
 80001ae:	4a0a      	ldr	r2, [pc, #40]	; (80001d8 <NRF24_csn+0x3c>)
 80001b0:	8811      	ldrh	r1, [r2, #0]
 80001b2:	2201      	movs	r2, #1
 80001b4:	4618      	mov	r0, r3
 80001b6:	f001 fe2b 	bl	8001e10 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 80001ba:	e007      	b.n	80001cc <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <NRF24_csn+0x38>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	4a05      	ldr	r2, [pc, #20]	; (80001d8 <NRF24_csn+0x3c>)
 80001c2:	8811      	ldrh	r1, [r2, #0]
 80001c4:	2200      	movs	r2, #0
 80001c6:	4618      	mov	r0, r3
 80001c8:	f001 fe22 	bl	8001e10 <HAL_GPIO_WritePin>
}
 80001cc:	bf00      	nop
 80001ce:	3708      	adds	r7, #8
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bd80      	pop	{r7, pc}
 80001d4:	200000a4 	.word	0x200000a4
 80001d8:	200000a8 	.word	0x200000a8

080001dc <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	b082      	sub	sp, #8
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d008      	beq.n	80001fc <NRF24_ce+0x20>
 80001ea:	4b0a      	ldr	r3, [pc, #40]	; (8000214 <NRF24_ce+0x38>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	4a0a      	ldr	r2, [pc, #40]	; (8000218 <NRF24_ce+0x3c>)
 80001f0:	8811      	ldrh	r1, [r2, #0]
 80001f2:	2201      	movs	r2, #1
 80001f4:	4618      	mov	r0, r3
 80001f6:	f001 fe0b 	bl	8001e10 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 80001fa:	e007      	b.n	800020c <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 80001fc:	4b05      	ldr	r3, [pc, #20]	; (8000214 <NRF24_ce+0x38>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a05      	ldr	r2, [pc, #20]	; (8000218 <NRF24_ce+0x3c>)
 8000202:	8811      	ldrh	r1, [r2, #0]
 8000204:	2200      	movs	r2, #0
 8000206:	4618      	mov	r0, r3
 8000208:	f001 fe02 	bl	8001e10 <HAL_GPIO_WritePin>
}
 800020c:	bf00      	nop
 800020e:	3708      	adds	r7, #8
 8000210:	46bd      	mov	sp, r7
 8000212:	bd80      	pop	{r7, pc}
 8000214:	200000a4 	.word	0x200000a4
 8000218:	200000aa 	.word	0x200000aa

0800021c <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b084      	sub	sp, #16
 8000220:	af00      	add	r7, sp, #0
 8000222:	4603      	mov	r3, r0
 8000224:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8000226:	2000      	movs	r0, #0
 8000228:	f7ff ffb8 	bl	800019c <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 800022c:	79fb      	ldrb	r3, [r7, #7]
 800022e:	f003 031f 	and.w	r3, r3, #31
 8000232:	b2db      	uxtb	r3, r3
 8000234:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000236:	f107 010c 	add.w	r1, r7, #12
 800023a:	2364      	movs	r3, #100	; 0x64
 800023c:	2201      	movs	r2, #1
 800023e:	480a      	ldr	r0, [pc, #40]	; (8000268 <NRF24_read_register+0x4c>)
 8000240:	f002 fab6 	bl	80027b0 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8000244:	f107 030c 	add.w	r3, r7, #12
 8000248:	1c59      	adds	r1, r3, #1
 800024a:	2364      	movs	r3, #100	; 0x64
 800024c:	2201      	movs	r2, #1
 800024e:	4806      	ldr	r0, [pc, #24]	; (8000268 <NRF24_read_register+0x4c>)
 8000250:	f002 fbea 	bl	8002a28 <HAL_SPI_Receive>
	retData = spiBuf[1];
 8000254:	7b7b      	ldrb	r3, [r7, #13]
 8000256:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8000258:	2001      	movs	r0, #1
 800025a:	f7ff ff9f 	bl	800019c <NRF24_csn>
	return retData;
 800025e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000260:	4618      	mov	r0, r3
 8000262:	3710      	adds	r7, #16
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}
 8000268:	200000ac 	.word	0x200000ac

0800026c <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b084      	sub	sp, #16
 8000270:	af00      	add	r7, sp, #0
 8000272:	4603      	mov	r3, r0
 8000274:	6039      	str	r1, [r7, #0]
 8000276:	71fb      	strb	r3, [r7, #7]
 8000278:	4613      	mov	r3, r2
 800027a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 800027c:	2000      	movs	r0, #0
 800027e:	f7ff ff8d 	bl	800019c <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	f003 031f 	and.w	r3, r3, #31
 8000288:	b2db      	uxtb	r3, r3
 800028a:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800028c:	f107 010c 	add.w	r1, r7, #12
 8000290:	2364      	movs	r3, #100	; 0x64
 8000292:	2201      	movs	r2, #1
 8000294:	4808      	ldr	r0, [pc, #32]	; (80002b8 <NRF24_read_registerN+0x4c>)
 8000296:	f002 fa8b 	bl	80027b0 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 800029a:	79bb      	ldrb	r3, [r7, #6]
 800029c:	b29a      	uxth	r2, r3
 800029e:	2364      	movs	r3, #100	; 0x64
 80002a0:	6839      	ldr	r1, [r7, #0]
 80002a2:	4805      	ldr	r0, [pc, #20]	; (80002b8 <NRF24_read_registerN+0x4c>)
 80002a4:	f002 fbc0 	bl	8002a28 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 80002a8:	2001      	movs	r0, #1
 80002aa:	f7ff ff77 	bl	800019c <NRF24_csn>
}
 80002ae:	bf00      	nop
 80002b0:	3710      	adds	r7, #16
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	200000ac 	.word	0x200000ac

080002bc <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	4603      	mov	r3, r0
 80002c4:	460a      	mov	r2, r1
 80002c6:	71fb      	strb	r3, [r7, #7]
 80002c8:	4613      	mov	r3, r2
 80002ca:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80002cc:	2000      	movs	r0, #0
 80002ce:	f7ff ff65 	bl	800019c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80002d2:	79fb      	ldrb	r3, [r7, #7]
 80002d4:	f043 0320 	orr.w	r3, r3, #32
 80002d8:	b2db      	uxtb	r3, r3
 80002da:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 80002dc:	79bb      	ldrb	r3, [r7, #6]
 80002de:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 80002e0:	f107 010c 	add.w	r1, r7, #12
 80002e4:	2364      	movs	r3, #100	; 0x64
 80002e6:	2202      	movs	r2, #2
 80002e8:	4804      	ldr	r0, [pc, #16]	; (80002fc <NRF24_write_register+0x40>)
 80002ea:	f002 fa61 	bl	80027b0 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80002ee:	2001      	movs	r0, #1
 80002f0:	f7ff ff54 	bl	800019c <NRF24_csn>
}
 80002f4:	bf00      	nop
 80002f6:	3710      	adds	r7, #16
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	200000ac 	.word	0x200000ac

08000300 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b084      	sub	sp, #16
 8000304:	af00      	add	r7, sp, #0
 8000306:	4603      	mov	r3, r0
 8000308:	6039      	str	r1, [r7, #0]
 800030a:	71fb      	strb	r3, [r7, #7]
 800030c:	4613      	mov	r3, r2
 800030e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000310:	2000      	movs	r0, #0
 8000312:	f7ff ff43 	bl	800019c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000316:	79fb      	ldrb	r3, [r7, #7]
 8000318:	f043 0320 	orr.w	r3, r3, #32
 800031c:	b2db      	uxtb	r3, r3
 800031e:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000320:	f107 010c 	add.w	r1, r7, #12
 8000324:	2364      	movs	r3, #100	; 0x64
 8000326:	2201      	movs	r2, #1
 8000328:	4808      	ldr	r0, [pc, #32]	; (800034c <NRF24_write_registerN+0x4c>)
 800032a:	f002 fa41 	bl	80027b0 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 800032e:	79bb      	ldrb	r3, [r7, #6]
 8000330:	b29a      	uxth	r2, r3
 8000332:	2364      	movs	r3, #100	; 0x64
 8000334:	6839      	ldr	r1, [r7, #0]
 8000336:	4805      	ldr	r0, [pc, #20]	; (800034c <NRF24_write_registerN+0x4c>)
 8000338:	f002 fa3a 	bl	80027b0 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 800033c:	2001      	movs	r0, #1
 800033e:	f7ff ff2d 	bl	800019c <NRF24_csn>
}
 8000342:	bf00      	nop
 8000344:	3710      	adds	r7, #16
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	200000ac 	.word	0x200000ac

08000350 <NRF24_read_payload>:
	//Bring CSN high
	NRF24_csn(1);
}
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b084      	sub	sp, #16
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
 8000358:	460b      	mov	r3, r1
 800035a:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 800035c:	f000 fa08 	bl	8000770 <NRF24_getPayloadSize>
 8000360:	4603      	mov	r3, r0
 8000362:	461a      	mov	r2, r3
 8000364:	78fb      	ldrb	r3, [r7, #3]
 8000366:	4293      	cmp	r3, r2
 8000368:	d303      	bcc.n	8000372 <NRF24_read_payload+0x22>
 800036a:	f000 fa01 	bl	8000770 <NRF24_getPayloadSize>
 800036e:	4603      	mov	r3, r0
 8000370:	e000      	b.n	8000374 <NRF24_read_payload+0x24>
 8000372:	78fb      	ldrb	r3, [r7, #3]
 8000374:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8000376:	2000      	movs	r0, #0
 8000378:	f7ff ff10 	bl	800019c <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 800037c:	2361      	movs	r3, #97	; 0x61
 800037e:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 8000380:	f107 010e 	add.w	r1, r7, #14
 8000384:	2364      	movs	r3, #100	; 0x64
 8000386:	2201      	movs	r2, #1
 8000388:	4808      	ldr	r0, [pc, #32]	; (80003ac <NRF24_read_payload+0x5c>)
 800038a:	f002 fa11 	bl	80027b0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 800038e:	7bfb      	ldrb	r3, [r7, #15]
 8000390:	b29a      	uxth	r2, r3
 8000392:	2364      	movs	r3, #100	; 0x64
 8000394:	6879      	ldr	r1, [r7, #4]
 8000396:	4805      	ldr	r0, [pc, #20]	; (80003ac <NRF24_read_payload+0x5c>)
 8000398:	f002 fb46 	bl	8002a28 <HAL_SPI_Receive>
	NRF24_csn(1);
 800039c:	2001      	movs	r0, #1
 800039e:	f7ff fefd 	bl	800019c <NRF24_csn>
}
 80003a2:	bf00      	nop
 80003a4:	3710      	adds	r7, #16
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	200000ac 	.word	0x200000ac

080003b0 <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 80003b4:	21ff      	movs	r1, #255	; 0xff
 80003b6:	20e1      	movs	r0, #225	; 0xe1
 80003b8:	f7ff ff80 	bl	80002bc <NRF24_write_register>
}
 80003bc:	bf00      	nop
 80003be:	bd80      	pop	{r7, pc}

080003c0 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 80003c4:	21ff      	movs	r1, #255	; 0xff
 80003c6:	20e2      	movs	r0, #226	; 0xe2
 80003c8:	f7ff ff78 	bl	80002bc <NRF24_write_register>
}
 80003cc:	bf00      	nop
 80003ce:	bd80      	pop	{r7, pc}

080003d0 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 80003d6:	2007      	movs	r0, #7
 80003d8:	f7ff ff20 	bl	800021c <NRF24_read_register>
 80003dc:	4603      	mov	r3, r0
 80003de:	71fb      	strb	r3, [r7, #7]
	return statReg;
 80003e0:	79fb      	ldrb	r3, [r7, #7]
}
 80003e2:	4618      	mov	r0, r3
 80003e4:	3708      	adds	r7, #8
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
	...

080003ec <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 80003ec:	b082      	sub	sp, #8
 80003ee:	b580      	push	{r7, lr}
 80003f0:	b084      	sub	sp, #16
 80003f2:	af00      	add	r7, sp, #0
 80003f4:	6078      	str	r0, [r7, #4]
 80003f6:	61fb      	str	r3, [r7, #28]
 80003f8:	460b      	mov	r3, r1
 80003fa:	807b      	strh	r3, [r7, #2]
 80003fc:	4613      	mov	r3, r2
 80003fe:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8000400:	4b66      	ldr	r3, [pc, #408]	; (800059c <NRF24_begin+0x1b0>)
 8000402:	4618      	mov	r0, r3
 8000404:	f107 031c 	add.w	r3, r7, #28
 8000408:	2258      	movs	r2, #88	; 0x58
 800040a:	4619      	mov	r1, r3
 800040c:	f003 f89a 	bl	8003544 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8000410:	4a63      	ldr	r2, [pc, #396]	; (80005a0 <NRF24_begin+0x1b4>)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8000416:	4a63      	ldr	r2, [pc, #396]	; (80005a4 <NRF24_begin+0x1b8>)
 8000418:	887b      	ldrh	r3, [r7, #2]
 800041a:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 800041c:	4a62      	ldr	r2, [pc, #392]	; (80005a8 <NRF24_begin+0x1bc>)
 800041e:	883b      	ldrh	r3, [r7, #0]
 8000420:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 8000422:	2001      	movs	r0, #1
 8000424:	f7ff feba 	bl	800019c <NRF24_csn>
	NRF24_ce(0);
 8000428:	2000      	movs	r0, #0
 800042a:	f7ff fed7 	bl	80001dc <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 800042e:	2005      	movs	r0, #5
 8000430:	f001 fa62 	bl	80018f8 <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8000434:	2108      	movs	r1, #8
 8000436:	2000      	movs	r0, #0
 8000438:	f7ff ff40 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 800043c:	213f      	movs	r1, #63	; 0x3f
 800043e:	2001      	movs	r0, #1
 8000440:	f7ff ff3c 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8000444:	2103      	movs	r1, #3
 8000446:	2002      	movs	r0, #2
 8000448:	f7ff ff38 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 800044c:	2103      	movs	r1, #3
 800044e:	2003      	movs	r0, #3
 8000450:	f7ff ff34 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8000454:	2103      	movs	r1, #3
 8000456:	2004      	movs	r0, #4
 8000458:	f7ff ff30 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 800045c:	2102      	movs	r1, #2
 800045e:	2005      	movs	r0, #5
 8000460:	f7ff ff2c 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8000464:	210f      	movs	r1, #15
 8000466:	2006      	movs	r0, #6
 8000468:	f7ff ff28 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 800046c:	210e      	movs	r1, #14
 800046e:	2007      	movs	r0, #7
 8000470:	f7ff ff24 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8000474:	2100      	movs	r1, #0
 8000476:	2008      	movs	r0, #8
 8000478:	f7ff ff20 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 800047c:	2100      	movs	r1, #0
 800047e:	2009      	movs	r0, #9
 8000480:	f7ff ff1c 	bl	80002bc <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8000484:	23e7      	movs	r3, #231	; 0xe7
 8000486:	733b      	strb	r3, [r7, #12]
 8000488:	23e7      	movs	r3, #231	; 0xe7
 800048a:	72fb      	strb	r3, [r7, #11]
 800048c:	23e7      	movs	r3, #231	; 0xe7
 800048e:	72bb      	strb	r3, [r7, #10]
 8000490:	23e7      	movs	r3, #231	; 0xe7
 8000492:	727b      	strb	r3, [r7, #9]
 8000494:	23e7      	movs	r3, #231	; 0xe7
 8000496:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8000498:	f107 0308 	add.w	r3, r7, #8
 800049c:	2205      	movs	r2, #5
 800049e:	4619      	mov	r1, r3
 80004a0:	200a      	movs	r0, #10
 80004a2:	f7ff ff2d 	bl	8000300 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 80004a6:	23c2      	movs	r3, #194	; 0xc2
 80004a8:	733b      	strb	r3, [r7, #12]
 80004aa:	23c2      	movs	r3, #194	; 0xc2
 80004ac:	72fb      	strb	r3, [r7, #11]
 80004ae:	23c2      	movs	r3, #194	; 0xc2
 80004b0:	72bb      	strb	r3, [r7, #10]
 80004b2:	23c2      	movs	r3, #194	; 0xc2
 80004b4:	727b      	strb	r3, [r7, #9]
 80004b6:	23c2      	movs	r3, #194	; 0xc2
 80004b8:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 80004ba:	f107 0308 	add.w	r3, r7, #8
 80004be:	2205      	movs	r2, #5
 80004c0:	4619      	mov	r1, r3
 80004c2:	200b      	movs	r0, #11
 80004c4:	f7ff ff1c 	bl	8000300 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 80004c8:	21c3      	movs	r1, #195	; 0xc3
 80004ca:	200c      	movs	r0, #12
 80004cc:	f7ff fef6 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 80004d0:	21c4      	movs	r1, #196	; 0xc4
 80004d2:	200d      	movs	r0, #13
 80004d4:	f7ff fef2 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 80004d8:	21c5      	movs	r1, #197	; 0xc5
 80004da:	200e      	movs	r0, #14
 80004dc:	f7ff feee 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 80004e0:	21c6      	movs	r1, #198	; 0xc6
 80004e2:	200f      	movs	r0, #15
 80004e4:	f7ff feea 	bl	80002bc <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 80004e8:	23e7      	movs	r3, #231	; 0xe7
 80004ea:	733b      	strb	r3, [r7, #12]
 80004ec:	23e7      	movs	r3, #231	; 0xe7
 80004ee:	72fb      	strb	r3, [r7, #11]
 80004f0:	23e7      	movs	r3, #231	; 0xe7
 80004f2:	72bb      	strb	r3, [r7, #10]
 80004f4:	23e7      	movs	r3, #231	; 0xe7
 80004f6:	727b      	strb	r3, [r7, #9]
 80004f8:	23e7      	movs	r3, #231	; 0xe7
 80004fa:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 80004fc:	f107 0308 	add.w	r3, r7, #8
 8000500:	2205      	movs	r2, #5
 8000502:	4619      	mov	r1, r3
 8000504:	2010      	movs	r0, #16
 8000506:	f7ff fefb 	bl	8000300 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 800050a:	2100      	movs	r1, #0
 800050c:	2011      	movs	r0, #17
 800050e:	f7ff fed5 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8000512:	2100      	movs	r1, #0
 8000514:	2012      	movs	r0, #18
 8000516:	f7ff fed1 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 800051a:	2100      	movs	r1, #0
 800051c:	2013      	movs	r0, #19
 800051e:	f7ff fecd 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8000522:	2100      	movs	r1, #0
 8000524:	2014      	movs	r0, #20
 8000526:	f7ff fec9 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 800052a:	2100      	movs	r1, #0
 800052c:	2015      	movs	r0, #21
 800052e:	f7ff fec5 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8000532:	2100      	movs	r1, #0
 8000534:	2016      	movs	r0, #22
 8000536:	f7ff fec1 	bl	80002bc <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 800053a:	f000 fa47 	bl	80009cc <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 800053e:	2100      	movs	r1, #0
 8000540:	201c      	movs	r0, #28
 8000542:	f7ff febb 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8000546:	2100      	movs	r1, #0
 8000548:	201d      	movs	r0, #29
 800054a:	f7ff feb7 	bl	80002bc <NRF24_write_register>
	printRadioSettings();
 800054e:	f000 fa57 	bl	8000a00 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8000552:	210f      	movs	r1, #15
 8000554:	200f      	movs	r0, #15
 8000556:	f000 f8c5 	bl	80006e4 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 800055a:	2003      	movs	r0, #3
 800055c:	f000 f947 	bl	80007ee <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8000560:	2001      	movs	r0, #1
 8000562:	f000 f97d 	bl	8000860 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8000566:	2002      	movs	r0, #2
 8000568:	f000 f9c0 	bl	80008ec <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 800056c:	f000 f912 	bl	8000794 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8000570:	2020      	movs	r0, #32
 8000572:	f000 f8e7 	bl	8000744 <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 8000576:	f000 fa20 	bl	80009ba <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 800057a:	204c      	movs	r0, #76	; 0x4c
 800057c:	f000 f8cd 	bl	800071a <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8000580:	f7ff ff16 	bl	80003b0 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000584:	f7ff ff1c 	bl	80003c0 <NRF24_flush_rx>
	
	NRF24_powerDown();
 8000588:	f000 f9d8 	bl	800093c <NRF24_powerDown>
	
}
 800058c:	bf00      	nop
 800058e:	3710      	adds	r7, #16
 8000590:	46bd      	mov	sp, r7
 8000592:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000596:	b002      	add	sp, #8
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	200000ac 	.word	0x200000ac
 80005a0:	200000a4 	.word	0x200000a4
 80005a4:	200000a8 	.word	0x200000a8
 80005a8:	200000aa 	.word	0x200000aa

080005ac <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 80005b0:	2000      	movs	r0, #0
 80005b2:	f7ff fe33 	bl	800021c <NRF24_read_register>
 80005b6:	4603      	mov	r3, r0
 80005b8:	f043 0303 	orr.w	r3, r3, #3
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	4619      	mov	r1, r3
 80005c0:	2000      	movs	r0, #0
 80005c2:	f7ff fe7b 	bl	80002bc <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 80005c6:	4b0b      	ldr	r3, [pc, #44]	; (80005f4 <NRF24_startListening+0x48>)
 80005c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005cc:	4313      	orrs	r3, r2
 80005ce:	d004      	beq.n	80005da <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 80005d0:	2205      	movs	r2, #5
 80005d2:	4908      	ldr	r1, [pc, #32]	; (80005f4 <NRF24_startListening+0x48>)
 80005d4:	200a      	movs	r0, #10
 80005d6:	f7ff fe93 	bl	8000300 <NRF24_write_registerN>
	
	//Flush buffers
	NRF24_flush_tx();
 80005da:	f7ff fee9 	bl	80003b0 <NRF24_flush_tx>
	NRF24_flush_rx();
 80005de:	f7ff feef 	bl	80003c0 <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 80005e2:	2001      	movs	r0, #1
 80005e4:	f7ff fdfa 	bl	80001dc <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 80005e8:	2096      	movs	r0, #150	; 0x96
 80005ea:	f7ff fdb7 	bl	800015c <NRF24_DelayMicroSeconds>
}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	20000098 	.word	0x20000098

080005f8 <NRF24_available>:
	NRF24_flush_tx();
	return retStatus;
}
//16. Check for available data to read
bool NRF24_available(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 80005fc:	2000      	movs	r0, #0
 80005fe:	f000 f9ac 	bl	800095a <NRF24_availablePipe>
 8000602:	4603      	mov	r3, r0
}
 8000604:	4618      	mov	r0, r3
 8000606:	bd80      	pop	{r7, pc}

08000608 <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	460b      	mov	r3, r1
 8000612:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 8000614:	78fb      	ldrb	r3, [r7, #3]
 8000616:	4619      	mov	r1, r3
 8000618:	6878      	ldr	r0, [r7, #4]
 800061a:	f7ff fe99 	bl	8000350 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 800061e:	2017      	movs	r0, #23
 8000620:	f7ff fdfc 	bl	800021c <NRF24_read_register>
 8000624:	4603      	mov	r3, r0
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 800062c:	f7ff fec8 	bl	80003c0 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 8000630:	f000 f8a8 	bl	8000784 <NRF24_getDynamicPayloadSize>
	return rxStatus;
 8000634:	7bfb      	ldrb	r3, [r7, #15]
 8000636:	2b00      	cmp	r3, #0
 8000638:	bf14      	ite	ne
 800063a:	2301      	movne	r3, #1
 800063c:	2300      	moveq	r3, #0
 800063e:	b2db      	uxtb	r3, r3
}
 8000640:	4618      	mov	r0, r3
 8000642:	3710      	adds	r7, #16
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}

08000648 <NRF24_openReadingPipe>:
	const uint8_t max_payload_size = 32;
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
}
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
 800064e:	4601      	mov	r1, r0
 8000650:	e9c7 2300 	strd	r2, r3, [r7]
 8000654:	460b      	mov	r3, r1
 8000656:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 8000658:	7bfb      	ldrb	r3, [r7, #15]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d104      	bne.n	8000668 <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 800065e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000662:	491c      	ldr	r1, [pc, #112]	; (80006d4 <NRF24_openReadingPipe+0x8c>)
 8000664:	e9c1 2300 	strd	r2, r3, [r1]
	
	if(number <= 6)
 8000668:	7bfb      	ldrb	r3, [r7, #15]
 800066a:	2b06      	cmp	r3, #6
 800066c:	d82d      	bhi.n	80006ca <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 800066e:	7bfb      	ldrb	r3, [r7, #15]
 8000670:	2b01      	cmp	r3, #1
 8000672:	d808      	bhi.n	8000686 <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 8000674:	7bfb      	ldrb	r3, [r7, #15]
 8000676:	4a18      	ldr	r2, [pc, #96]	; (80006d8 <NRF24_openReadingPipe+0x90>)
 8000678:	5cd3      	ldrb	r3, [r2, r3]
 800067a:	4639      	mov	r1, r7
 800067c:	2205      	movs	r2, #5
 800067e:	4618      	mov	r0, r3
 8000680:	f7ff fe3e 	bl	8000300 <NRF24_write_registerN>
 8000684:	e007      	b.n	8000696 <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 8000686:	7bfb      	ldrb	r3, [r7, #15]
 8000688:	4a13      	ldr	r2, [pc, #76]	; (80006d8 <NRF24_openReadingPipe+0x90>)
 800068a:	5cd3      	ldrb	r3, [r2, r3]
 800068c:	4639      	mov	r1, r7
 800068e:	2201      	movs	r2, #1
 8000690:	4618      	mov	r0, r3
 8000692:	f7ff fe35 	bl	8000300 <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 8000696:	7bfb      	ldrb	r3, [r7, #15]
 8000698:	4a10      	ldr	r2, [pc, #64]	; (80006dc <NRF24_openReadingPipe+0x94>)
 800069a:	5cd3      	ldrb	r3, [r2, r3]
 800069c:	4a10      	ldr	r2, [pc, #64]	; (80006e0 <NRF24_openReadingPipe+0x98>)
 800069e:	7812      	ldrb	r2, [r2, #0]
 80006a0:	4611      	mov	r1, r2
 80006a2:	4618      	mov	r0, r3
 80006a4:	f7ff fe0a 	bl	80002bc <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 80006a8:	2002      	movs	r0, #2
 80006aa:	f7ff fdb7 	bl	800021c <NRF24_read_register>
 80006ae:	4603      	mov	r3, r0
 80006b0:	b25a      	sxtb	r2, r3
 80006b2:	7bfb      	ldrb	r3, [r7, #15]
 80006b4:	2101      	movs	r1, #1
 80006b6:	fa01 f303 	lsl.w	r3, r1, r3
 80006ba:	b25b      	sxtb	r3, r3
 80006bc:	4313      	orrs	r3, r2
 80006be:	b25b      	sxtb	r3, r3
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	4619      	mov	r1, r3
 80006c4:	2002      	movs	r0, #2
 80006c6:	f7ff fdf9 	bl	80002bc <NRF24_write_register>
	}
	
}
 80006ca:	bf00      	nop
 80006cc:	3710      	adds	r7, #16
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	20000098 	.word	0x20000098
 80006d8:	08004334 	.word	0x08004334
 80006dc:	0800433c 	.word	0x0800433c
 80006e0:	200000a0 	.word	0x200000a0

080006e4 <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	460a      	mov	r2, r1
 80006ee:	71fb      	strb	r3, [r7, #7]
 80006f0:	4613      	mov	r3, r2
 80006f2:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 80006f4:	79fb      	ldrb	r3, [r7, #7]
 80006f6:	011b      	lsls	r3, r3, #4
 80006f8:	b25a      	sxtb	r2, r3
 80006fa:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80006fe:	f003 030f 	and.w	r3, r3, #15
 8000702:	b25b      	sxtb	r3, r3
 8000704:	4313      	orrs	r3, r2
 8000706:	b25b      	sxtb	r3, r3
 8000708:	b2db      	uxtb	r3, r3
 800070a:	4619      	mov	r1, r3
 800070c:	2004      	movs	r0, #4
 800070e:	f7ff fdd5 	bl	80002bc <NRF24_write_register>
}
 8000712:	bf00      	nop
 8000714:	3708      	adds	r7, #8
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}

0800071a <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 800071a:	b580      	push	{r7, lr}
 800071c:	b084      	sub	sp, #16
 800071e:	af00      	add	r7, sp, #0
 8000720:	4603      	mov	r3, r0
 8000722:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8000724:	237f      	movs	r3, #127	; 0x7f
 8000726:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8000728:	7bfa      	ldrb	r2, [r7, #15]
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	4293      	cmp	r3, r2
 800072e:	bf28      	it	cs
 8000730:	4613      	movcs	r3, r2
 8000732:	b2db      	uxtb	r3, r3
 8000734:	4619      	mov	r1, r3
 8000736:	2005      	movs	r0, #5
 8000738:	f7ff fdc0 	bl	80002bc <NRF24_write_register>
}
 800073c:	bf00      	nop
 800073e:	3710      	adds	r7, #16
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}

08000744 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000744:	b480      	push	{r7}
 8000746:	b085      	sub	sp, #20
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 800074e:	2320      	movs	r3, #32
 8000750:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8000752:	7bfa      	ldrb	r2, [r7, #15]
 8000754:	79fb      	ldrb	r3, [r7, #7]
 8000756:	4293      	cmp	r3, r2
 8000758:	bf28      	it	cs
 800075a:	4613      	movcs	r3, r2
 800075c:	b2da      	uxtb	r2, r3
 800075e:	4b03      	ldr	r3, [pc, #12]	; (800076c <NRF24_setPayloadSize+0x28>)
 8000760:	701a      	strb	r2, [r3, #0]
}
 8000762:	bf00      	nop
 8000764:	3714      	adds	r7, #20
 8000766:	46bd      	mov	sp, r7
 8000768:	bc80      	pop	{r7}
 800076a:	4770      	bx	lr
 800076c:	200000a0 	.word	0x200000a0

08000770 <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
	return payload_size;
 8000774:	4b02      	ldr	r3, [pc, #8]	; (8000780 <NRF24_getPayloadSize+0x10>)
 8000776:	781b      	ldrb	r3, [r3, #0]
}
 8000778:	4618      	mov	r0, r3
 800077a:	46bd      	mov	sp, r7
 800077c:	bc80      	pop	{r7}
 800077e:	4770      	bx	lr
 8000780:	200000a0 	.word	0x200000a0

08000784 <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8000788:	2060      	movs	r0, #96	; 0x60
 800078a:	f7ff fd47 	bl	800021c <NRF24_read_register>
 800078e:	4603      	mov	r3, r0
}
 8000790:	4618      	mov	r0, r3
 8000792:	bd80      	pop	{r7, pc}

08000794 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;
	
}
void NRF24_disableDynamicPayloads(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8000798:	201d      	movs	r0, #29
 800079a:	f7ff fd3f 	bl	800021c <NRF24_read_register>
 800079e:	4603      	mov	r3, r0
 80007a0:	f023 0304 	bic.w	r3, r3, #4
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	4619      	mov	r1, r3
 80007a8:	201d      	movs	r0, #29
 80007aa:	f7ff fd87 	bl	80002bc <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 80007ae:	2100      	movs	r1, #0
 80007b0:	201c      	movs	r0, #28
 80007b2:	f7ff fd83 	bl	80002bc <NRF24_write_register>
	dynamic_payloads_enabled = false;
 80007b6:	4b02      	ldr	r3, [pc, #8]	; (80007c0 <NRF24_disableDynamicPayloads+0x2c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	701a      	strb	r2, [r3, #0]
}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	200000a1 	.word	0x200000a1

080007c4 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d004      	beq.n	80007de <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 80007d4:	213f      	movs	r1, #63	; 0x3f
 80007d6:	2001      	movs	r0, #1
 80007d8:	f7ff fd70 	bl	80002bc <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 80007dc:	e003      	b.n	80007e6 <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 80007de:	2100      	movs	r1, #0
 80007e0:	2001      	movs	r0, #1
 80007e2:	f7ff fd6b 	bl	80002bc <NRF24_write_register>
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}

080007ee <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b084      	sub	sp, #16
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	4603      	mov	r3, r0
 80007f6:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80007f8:	2006      	movs	r0, #6
 80007fa:	f7ff fd0f 	bl	800021c <NRF24_read_register>
 80007fe:	4603      	mov	r3, r0
 8000800:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000802:	7bfb      	ldrb	r3, [r7, #15]
 8000804:	f023 0306 	bic.w	r3, r3, #6
 8000808:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	2b03      	cmp	r3, #3
 800080e:	d104      	bne.n	800081a <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000810:	7bfb      	ldrb	r3, [r7, #15]
 8000812:	f043 0306 	orr.w	r3, r3, #6
 8000816:	73fb      	strb	r3, [r7, #15]
 8000818:	e019      	b.n	800084e <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 800081a:	79fb      	ldrb	r3, [r7, #7]
 800081c:	2b02      	cmp	r3, #2
 800081e:	d104      	bne.n	800082a <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8000820:	7bfb      	ldrb	r3, [r7, #15]
 8000822:	f043 0304 	orr.w	r3, r3, #4
 8000826:	73fb      	strb	r3, [r7, #15]
 8000828:	e011      	b.n	800084e <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	2b01      	cmp	r3, #1
 800082e:	d104      	bne.n	800083a <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8000830:	7bfb      	ldrb	r3, [r7, #15]
 8000832:	f043 0302 	orr.w	r3, r3, #2
 8000836:	73fb      	strb	r3, [r7, #15]
 8000838:	e009      	b.n	800084e <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 800083a:	79fb      	ldrb	r3, [r7, #7]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d006      	beq.n	800084e <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	2b04      	cmp	r3, #4
 8000844:	d103      	bne.n	800084e <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000846:	7bfb      	ldrb	r3, [r7, #15]
 8000848:	f043 0306 	orr.w	r3, r3, #6
 800084c:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 800084e:	7bfb      	ldrb	r3, [r7, #15]
 8000850:	4619      	mov	r1, r3
 8000852:	2006      	movs	r0, #6
 8000854:	f7ff fd32 	bl	80002bc <NRF24_write_register>
}
 8000858:	bf00      	nop
 800085a:	3710      	adds	r7, #16
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}

08000860 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 800086a:	2300      	movs	r3, #0
 800086c:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 800086e:	2006      	movs	r0, #6
 8000870:	f7ff fcd4 	bl	800021c <NRF24_read_register>
 8000874:	4603      	mov	r3, r0
 8000876:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8000878:	4b1b      	ldr	r3, [pc, #108]	; (80008e8 <NRF24_setDataRate+0x88>)
 800087a:	2200      	movs	r2, #0
 800087c:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 800087e:	7bbb      	ldrb	r3, [r7, #14]
 8000880:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000884:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8000886:	79fb      	ldrb	r3, [r7, #7]
 8000888:	2b02      	cmp	r3, #2
 800088a:	d107      	bne.n	800089c <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 800088c:	4b16      	ldr	r3, [pc, #88]	; (80008e8 <NRF24_setDataRate+0x88>)
 800088e:	2200      	movs	r2, #0
 8000890:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8000892:	7bbb      	ldrb	r3, [r7, #14]
 8000894:	f043 0320 	orr.w	r3, r3, #32
 8000898:	73bb      	strb	r3, [r7, #14]
 800089a:	e00d      	b.n	80008b8 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 800089c:	79fb      	ldrb	r3, [r7, #7]
 800089e:	2b01      	cmp	r3, #1
 80008a0:	d107      	bne.n	80008b2 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 80008a2:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <NRF24_setDataRate+0x88>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 80008a8:	7bbb      	ldrb	r3, [r7, #14]
 80008aa:	f043 0308 	orr.w	r3, r3, #8
 80008ae:	73bb      	strb	r3, [r7, #14]
 80008b0:	e002      	b.n	80008b8 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 80008b2:	4b0d      	ldr	r3, [pc, #52]	; (80008e8 <NRF24_setDataRate+0x88>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 80008b8:	7bbb      	ldrb	r3, [r7, #14]
 80008ba:	4619      	mov	r1, r3
 80008bc:	2006      	movs	r0, #6
 80008be:	f7ff fcfd 	bl	80002bc <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 80008c2:	2006      	movs	r0, #6
 80008c4:	f7ff fcaa 	bl	800021c <NRF24_read_register>
 80008c8:	4603      	mov	r3, r0
 80008ca:	461a      	mov	r2, r3
 80008cc:	7bbb      	ldrb	r3, [r7, #14]
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d102      	bne.n	80008d8 <NRF24_setDataRate+0x78>
  {
    result = true;
 80008d2:	2301      	movs	r3, #1
 80008d4:	73fb      	strb	r3, [r7, #15]
 80008d6:	e002      	b.n	80008de <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 80008d8:	4b03      	ldr	r3, [pc, #12]	; (80008e8 <NRF24_setDataRate+0x88>)
 80008da:	2200      	movs	r2, #0
 80008dc:	701a      	strb	r2, [r3, #0]
  }

  return result;
 80008de:	7bfb      	ldrb	r3, [r7, #15]
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	3710      	adds	r7, #16
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	200000a2 	.word	0x200000a2

080008ec <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4603      	mov	r3, r0
 80008f4:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 80008f6:	2000      	movs	r0, #0
 80008f8:	f7ff fc90 	bl	800021c <NRF24_read_register>
 80008fc:	4603      	mov	r3, r0
 80008fe:	f023 030c 	bic.w	r3, r3, #12
 8000902:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d00f      	beq.n	800092a <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 800090a:	79fb      	ldrb	r3, [r7, #7]
 800090c:	2b01      	cmp	r3, #1
 800090e:	d104      	bne.n	800091a <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8000910:	7bfb      	ldrb	r3, [r7, #15]
 8000912:	f043 0308 	orr.w	r3, r3, #8
 8000916:	73fb      	strb	r3, [r7, #15]
 8000918:	e007      	b.n	800092a <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 800091a:	7bfb      	ldrb	r3, [r7, #15]
 800091c:	f043 0308 	orr.w	r3, r3, #8
 8000920:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8000922:	7bfb      	ldrb	r3, [r7, #15]
 8000924:	f043 0304 	orr.w	r3, r3, #4
 8000928:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 800092a:	7bfb      	ldrb	r3, [r7, #15]
 800092c:	4619      	mov	r1, r3
 800092e:	2000      	movs	r0, #0
 8000930:	f7ff fcc4 	bl	80002bc <NRF24_write_register>
}
 8000934:	bf00      	nop
 8000936:	3710      	adds	r7, #16
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}

0800093c <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8000940:	2000      	movs	r0, #0
 8000942:	f7ff fc6b 	bl	800021c <NRF24_read_register>
 8000946:	4603      	mov	r3, r0
 8000948:	f023 0302 	bic.w	r3, r3, #2
 800094c:	b2db      	uxtb	r3, r3
 800094e:	4619      	mov	r1, r3
 8000950:	2000      	movs	r0, #0
 8000952:	f7ff fcb3 	bl	80002bc <NRF24_write_register>
}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}

0800095a <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 800095a:	b580      	push	{r7, lr}
 800095c:	b084      	sub	sp, #16
 800095e:	af00      	add	r7, sp, #0
 8000960:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8000962:	f7ff fd35 	bl	80003d0 <NRF24_get_status>
 8000966:	4603      	mov	r3, r0
 8000968:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 800096a:	7bfb      	ldrb	r3, [r7, #15]
 800096c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000970:	2b00      	cmp	r3, #0
 8000972:	bf14      	ite	ne
 8000974:	2301      	movne	r3, #1
 8000976:	2300      	moveq	r3, #0
 8000978:	73bb      	strb	r3, [r7, #14]

  if (result)
 800097a:	7bbb      	ldrb	r3, [r7, #14]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d017      	beq.n	80009b0 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d007      	beq.n	8000996 <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8000986:	7bfb      	ldrb	r3, [r7, #15]
 8000988:	085b      	lsrs	r3, r3, #1
 800098a:	b2db      	uxtb	r3, r3
 800098c:	f003 0307 	and.w	r3, r3, #7
 8000990:	b2da      	uxtb	r2, r3
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8000996:	2140      	movs	r1, #64	; 0x40
 8000998:	2007      	movs	r0, #7
 800099a:	f7ff fc8f 	bl	80002bc <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 800099e:	7bfb      	ldrb	r3, [r7, #15]
 80009a0:	f003 0320 	and.w	r3, r3, #32
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d003      	beq.n	80009b0 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 80009a8:	2120      	movs	r1, #32
 80009aa:	2007      	movs	r0, #7
 80009ac:	f7ff fc86 	bl	80002bc <NRF24_write_register>
    }
  }
  return result;
 80009b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3710      	adds	r7, #16
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 80009ba:	b580      	push	{r7, lr}
 80009bc:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 80009be:	2170      	movs	r1, #112	; 0x70
 80009c0:	2007      	movs	r0, #7
 80009c2:	f7ff fc7b 	bl	80002bc <NRF24_write_register>
}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
	...

080009cc <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80009d2:	2000      	movs	r0, #0
 80009d4:	f7ff fbe2 	bl	800019c <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 80009d8:	2350      	movs	r3, #80	; 0x50
 80009da:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 80009dc:	2373      	movs	r3, #115	; 0x73
 80009de:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 80009e0:	1d39      	adds	r1, r7, #4
 80009e2:	2364      	movs	r3, #100	; 0x64
 80009e4:	2202      	movs	r2, #2
 80009e6:	4805      	ldr	r0, [pc, #20]	; (80009fc <NRF24_ACTIVATE_cmd+0x30>)
 80009e8:	f001 fee2 	bl	80027b0 <HAL_SPI_Transmit>
	NRF24_csn(1);
 80009ec:	2001      	movs	r0, #1
 80009ee:	f7ff fbd5 	bl	800019c <NRF24_csn>
}
 80009f2:	bf00      	nop
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	200000ac 	.word	0x200000ac

08000a00 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8000a00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a02:	b0a1      	sub	sp, #132	; 0x84
 8000a04:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8000a06:	f107 0308 	add.w	r3, r7, #8
 8000a0a:	49c3      	ldr	r1, [pc, #780]	; (8000d18 <printRadioSettings+0x318>)
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f002 fdaf 	bl	8003570 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000a12:	f107 0308 	add.w	r3, r7, #8
 8000a16:	4618      	mov	r0, r3
 8000a18:	f7ff fb98 	bl	800014c <strlen>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	b29a      	uxth	r2, r3
 8000a20:	f107 0108 	add.w	r1, r7, #8
 8000a24:	230a      	movs	r3, #10
 8000a26:	48bd      	ldr	r0, [pc, #756]	; (8000d1c <printRadioSettings+0x31c>)
 8000a28:	f002 fbf7 	bl	800321a <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	f7ff fbf5 	bl	800021c <NRF24_read_register>
 8000a32:	4603      	mov	r3, r0
 8000a34:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 8000a38:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000a3c:	f003 0308 	and.w	r3, r3, #8
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d013      	beq.n	8000a6c <printRadioSettings+0x6c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8000a44:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000a48:	f003 0304 	and.w	r3, r3, #4
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d006      	beq.n	8000a5e <printRadioSettings+0x5e>
 8000a50:	f107 0308 	add.w	r3, r7, #8
 8000a54:	49b2      	ldr	r1, [pc, #712]	; (8000d20 <printRadioSettings+0x320>)
 8000a56:	4618      	mov	r0, r3
 8000a58:	f002 fd8a 	bl	8003570 <siprintf>
 8000a5c:	e00c      	b.n	8000a78 <printRadioSettings+0x78>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 8000a5e:	f107 0308 	add.w	r3, r7, #8
 8000a62:	49b0      	ldr	r1, [pc, #704]	; (8000d24 <printRadioSettings+0x324>)
 8000a64:	4618      	mov	r0, r3
 8000a66:	f002 fd83 	bl	8003570 <siprintf>
 8000a6a:	e005      	b.n	8000a78 <printRadioSettings+0x78>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8000a6c:	f107 0308 	add.w	r3, r7, #8
 8000a70:	49ad      	ldr	r1, [pc, #692]	; (8000d28 <printRadioSettings+0x328>)
 8000a72:	4618      	mov	r0, r3
 8000a74:	f002 fd7c 	bl	8003570 <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000a78:	f107 0308 	add.w	r3, r7, #8
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff fb65 	bl	800014c <strlen>
 8000a82:	4603      	mov	r3, r0
 8000a84:	b29a      	uxth	r2, r3
 8000a86:	f107 0108 	add.w	r1, r7, #8
 8000a8a:	230a      	movs	r3, #10
 8000a8c:	48a3      	ldr	r0, [pc, #652]	; (8000d1c <printRadioSettings+0x31c>)
 8000a8e:	f002 fbc4 	bl	800321a <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8000a92:	2001      	movs	r0, #1
 8000a94:	f7ff fbc2 	bl	800021c <NRF24_read_register>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000a9e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000aa2:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	bfcc      	ite	gt
 8000aaa:	2301      	movgt	r3, #1
 8000aac:	2300      	movle	r3, #0
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000ab2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000ab6:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	bfcc      	ite	gt
 8000abe:	2301      	movgt	r3, #1
 8000ac0:	2300      	movle	r3, #0
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000ac6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000aca:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	bfcc      	ite	gt
 8000ad2:	2301      	movgt	r3, #1
 8000ad4:	2300      	movle	r3, #0
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000ada:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000ade:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	bfcc      	ite	gt
 8000ae6:	2301      	movgt	r3, #1
 8000ae8:	2300      	movle	r3, #0
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000aee:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000af2:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	bfcc      	ite	gt
 8000afa:	2301      	movgt	r3, #1
 8000afc:	2300      	movle	r3, #0
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000b02:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000b06:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	bfcc      	ite	gt
 8000b0e:	2301      	movgt	r3, #1
 8000b10:	2300      	movle	r3, #0
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	f107 0008 	add.w	r0, r7, #8
 8000b18:	9303      	str	r3, [sp, #12]
 8000b1a:	9402      	str	r4, [sp, #8]
 8000b1c:	9101      	str	r1, [sp, #4]
 8000b1e:	9200      	str	r2, [sp, #0]
 8000b20:	4633      	mov	r3, r6
 8000b22:	462a      	mov	r2, r5
 8000b24:	4981      	ldr	r1, [pc, #516]	; (8000d2c <printRadioSettings+0x32c>)
 8000b26:	f002 fd23 	bl	8003570 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000b2a:	f107 0308 	add.w	r3, r7, #8
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f7ff fb0c 	bl	800014c <strlen>
 8000b34:	4603      	mov	r3, r0
 8000b36:	b29a      	uxth	r2, r3
 8000b38:	f107 0108 	add.w	r1, r7, #8
 8000b3c:	230a      	movs	r3, #10
 8000b3e:	4877      	ldr	r0, [pc, #476]	; (8000d1c <printRadioSettings+0x31c>)
 8000b40:	f002 fb6b 	bl	800321a <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8000b44:	2002      	movs	r0, #2
 8000b46:	f7ff fb69 	bl	800021c <NRF24_read_register>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000b50:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000b54:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	bfcc      	ite	gt
 8000b5c:	2301      	movgt	r3, #1
 8000b5e:	2300      	movle	r3, #0
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000b64:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000b68:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	bfcc      	ite	gt
 8000b70:	2301      	movgt	r3, #1
 8000b72:	2300      	movle	r3, #0
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000b78:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000b7c:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	bfcc      	ite	gt
 8000b84:	2301      	movgt	r3, #1
 8000b86:	2300      	movle	r3, #0
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000b8c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000b90:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	bfcc      	ite	gt
 8000b98:	2301      	movgt	r3, #1
 8000b9a:	2300      	movle	r3, #0
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000ba0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000ba4:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	bfcc      	ite	gt
 8000bac:	2301      	movgt	r3, #1
 8000bae:	2300      	movle	r3, #0
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000bb4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000bb8:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	bfcc      	ite	gt
 8000bc0:	2301      	movgt	r3, #1
 8000bc2:	2300      	movle	r3, #0
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	f107 0008 	add.w	r0, r7, #8
 8000bca:	9303      	str	r3, [sp, #12]
 8000bcc:	9402      	str	r4, [sp, #8]
 8000bce:	9101      	str	r1, [sp, #4]
 8000bd0:	9200      	str	r2, [sp, #0]
 8000bd2:	4633      	mov	r3, r6
 8000bd4:	462a      	mov	r2, r5
 8000bd6:	4956      	ldr	r1, [pc, #344]	; (8000d30 <printRadioSettings+0x330>)
 8000bd8:	f002 fcca 	bl	8003570 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000bdc:	f107 0308 	add.w	r3, r7, #8
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff fab3 	bl	800014c <strlen>
 8000be6:	4603      	mov	r3, r0
 8000be8:	b29a      	uxth	r2, r3
 8000bea:	f107 0108 	add.w	r1, r7, #8
 8000bee:	230a      	movs	r3, #10
 8000bf0:	484a      	ldr	r0, [pc, #296]	; (8000d1c <printRadioSettings+0x31c>)
 8000bf2:	f002 fb12 	bl	800321a <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8000bf6:	2003      	movs	r0, #3
 8000bf8:	f7ff fb10 	bl	800021c <NRF24_read_register>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	f003 0303 	and.w	r3, r3, #3
 8000c02:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 8000c06:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000c0a:	3302      	adds	r3, #2
 8000c0c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8000c10:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8000c14:	f107 0308 	add.w	r3, r7, #8
 8000c18:	4946      	ldr	r1, [pc, #280]	; (8000d34 <printRadioSettings+0x334>)
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f002 fca8 	bl	8003570 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000c20:	f107 0308 	add.w	r3, r7, #8
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff fa91 	bl	800014c <strlen>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	b29a      	uxth	r2, r3
 8000c2e:	f107 0108 	add.w	r1, r7, #8
 8000c32:	230a      	movs	r3, #10
 8000c34:	4839      	ldr	r0, [pc, #228]	; (8000d1c <printRadioSettings+0x31c>)
 8000c36:	f002 faf0 	bl	800321a <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8000c3a:	2005      	movs	r0, #5
 8000c3c:	f7ff faee 	bl	800021c <NRF24_read_register>
 8000c40:	4603      	mov	r3, r0
 8000c42:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8000c46:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000c4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000c4e:	f107 0308 	add.w	r3, r7, #8
 8000c52:	4939      	ldr	r1, [pc, #228]	; (8000d38 <printRadioSettings+0x338>)
 8000c54:	4618      	mov	r0, r3
 8000c56:	f002 fc8b 	bl	8003570 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000c5a:	f107 0308 	add.w	r3, r7, #8
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff fa74 	bl	800014c <strlen>
 8000c64:	4603      	mov	r3, r0
 8000c66:	b29a      	uxth	r2, r3
 8000c68:	f107 0108 	add.w	r1, r7, #8
 8000c6c:	230a      	movs	r3, #10
 8000c6e:	482b      	ldr	r0, [pc, #172]	; (8000d1c <printRadioSettings+0x31c>)
 8000c70:	f002 fad3 	bl	800321a <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8000c74:	2006      	movs	r0, #6
 8000c76:	f7ff fad1 	bl	800021c <NRF24_read_register>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8000c80:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000c84:	f003 0308 	and.w	r3, r3, #8
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d006      	beq.n	8000c9a <printRadioSettings+0x29a>
 8000c8c:	f107 0308 	add.w	r3, r7, #8
 8000c90:	492a      	ldr	r1, [pc, #168]	; (8000d3c <printRadioSettings+0x33c>)
 8000c92:	4618      	mov	r0, r3
 8000c94:	f002 fc6c 	bl	8003570 <siprintf>
 8000c98:	e005      	b.n	8000ca6 <printRadioSettings+0x2a6>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8000c9a:	f107 0308 	add.w	r3, r7, #8
 8000c9e:	4928      	ldr	r1, [pc, #160]	; (8000d40 <printRadioSettings+0x340>)
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f002 fc65 	bl	8003570 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000ca6:	f107 0308 	add.w	r3, r7, #8
 8000caa:	4618      	mov	r0, r3
 8000cac:	f7ff fa4e 	bl	800014c <strlen>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	b29a      	uxth	r2, r3
 8000cb4:	f107 0108 	add.w	r1, r7, #8
 8000cb8:	230a      	movs	r3, #10
 8000cba:	4818      	ldr	r0, [pc, #96]	; (8000d1c <printRadioSettings+0x31c>)
 8000cbc:	f002 faad 	bl	800321a <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8000cc0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000cc4:	f003 0306 	and.w	r3, r3, #6
 8000cc8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 8000ccc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000cd0:	085b      	lsrs	r3, r3, #1
 8000cd2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8000cd6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d106      	bne.n	8000cec <printRadioSettings+0x2ec>
 8000cde:	f107 0308 	add.w	r3, r7, #8
 8000ce2:	4918      	ldr	r1, [pc, #96]	; (8000d44 <printRadioSettings+0x344>)
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f002 fc43 	bl	8003570 <siprintf>
 8000cea:	e03b      	b.n	8000d64 <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8000cec:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d106      	bne.n	8000d02 <printRadioSettings+0x302>
 8000cf4:	f107 0308 	add.w	r3, r7, #8
 8000cf8:	4913      	ldr	r1, [pc, #76]	; (8000d48 <printRadioSettings+0x348>)
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f002 fc38 	bl	8003570 <siprintf>
 8000d00:	e030      	b.n	8000d64 <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8000d02:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d06:	2b02      	cmp	r3, #2
 8000d08:	d122      	bne.n	8000d50 <printRadioSettings+0x350>
 8000d0a:	f107 0308 	add.w	r3, r7, #8
 8000d0e:	490f      	ldr	r1, [pc, #60]	; (8000d4c <printRadioSettings+0x34c>)
 8000d10:	4618      	mov	r0, r3
 8000d12:	f002 fc2d 	bl	8003570 <siprintf>
 8000d16:	e025      	b.n	8000d64 <printRadioSettings+0x364>
 8000d18:	08003de0 	.word	0x08003de0
 8000d1c:	20000104 	.word	0x20000104
 8000d20:	08003e14 	.word	0x08003e14
 8000d24:	08003e30 	.word	0x08003e30
 8000d28:	08003e4c 	.word	0x08003e4c
 8000d2c:	08003e60 	.word	0x08003e60
 8000d30:	08003ea4 	.word	0x08003ea4
 8000d34:	08003ef0 	.word	0x08003ef0
 8000d38:	08003f0c 	.word	0x08003f0c
 8000d3c:	08003f20 	.word	0x08003f20
 8000d40:	08003f38 	.word	0x08003f38
 8000d44:	08003f50 	.word	0x08003f50
 8000d48:	08003f64 	.word	0x08003f64
 8000d4c:	08003f78 	.word	0x08003f78
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8000d50:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d54:	2b03      	cmp	r3, #3
 8000d56:	d105      	bne.n	8000d64 <printRadioSettings+0x364>
 8000d58:	f107 0308 	add.w	r3, r7, #8
 8000d5c:	49d7      	ldr	r1, [pc, #860]	; (80010bc <printRadioSettings+0x6bc>)
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f002 fc06 	bl	8003570 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000d64:	f107 0308 	add.w	r3, r7, #8
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff f9ef 	bl	800014c <strlen>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	b29a      	uxth	r2, r3
 8000d72:	f107 0108 	add.w	r1, r7, #8
 8000d76:	230a      	movs	r3, #10
 8000d78:	48d1      	ldr	r0, [pc, #836]	; (80010c0 <printRadioSettings+0x6c0>)
 8000d7a:	f002 fa4e 	bl	800321a <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8000d7e:	463b      	mov	r3, r7
 8000d80:	2205      	movs	r2, #5
 8000d82:	4619      	mov	r1, r3
 8000d84:	200a      	movs	r0, #10
 8000d86:	f7ff fa71 	bl	800026c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8000d8a:	793b      	ldrb	r3, [r7, #4]
 8000d8c:	461c      	mov	r4, r3
 8000d8e:	78fb      	ldrb	r3, [r7, #3]
 8000d90:	461d      	mov	r5, r3
 8000d92:	78bb      	ldrb	r3, [r7, #2]
 8000d94:	787a      	ldrb	r2, [r7, #1]
 8000d96:	7839      	ldrb	r1, [r7, #0]
 8000d98:	f107 0008 	add.w	r0, r7, #8
 8000d9c:	9102      	str	r1, [sp, #8]
 8000d9e:	9201      	str	r2, [sp, #4]
 8000da0:	9300      	str	r3, [sp, #0]
 8000da2:	462b      	mov	r3, r5
 8000da4:	4622      	mov	r2, r4
 8000da6:	49c7      	ldr	r1, [pc, #796]	; (80010c4 <printRadioSettings+0x6c4>)
 8000da8:	f002 fbe2 	bl	8003570 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000dac:	f107 0308 	add.w	r3, r7, #8
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff f9cb 	bl	800014c <strlen>
 8000db6:	4603      	mov	r3, r0
 8000db8:	b29a      	uxth	r2, r3
 8000dba:	f107 0108 	add.w	r1, r7, #8
 8000dbe:	230a      	movs	r3, #10
 8000dc0:	48bf      	ldr	r0, [pc, #764]	; (80010c0 <printRadioSettings+0x6c0>)
 8000dc2:	f002 fa2a 	bl	800321a <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 8000dc6:	463b      	mov	r3, r7
 8000dc8:	2205      	movs	r2, #5
 8000dca:	4619      	mov	r1, r3
 8000dcc:	200b      	movs	r0, #11
 8000dce:	f7ff fa4d 	bl	800026c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8000dd2:	793b      	ldrb	r3, [r7, #4]
 8000dd4:	461c      	mov	r4, r3
 8000dd6:	78fb      	ldrb	r3, [r7, #3]
 8000dd8:	461d      	mov	r5, r3
 8000dda:	78bb      	ldrb	r3, [r7, #2]
 8000ddc:	787a      	ldrb	r2, [r7, #1]
 8000dde:	7839      	ldrb	r1, [r7, #0]
 8000de0:	f107 0008 	add.w	r0, r7, #8
 8000de4:	9102      	str	r1, [sp, #8]
 8000de6:	9201      	str	r2, [sp, #4]
 8000de8:	9300      	str	r3, [sp, #0]
 8000dea:	462b      	mov	r3, r5
 8000dec:	4622      	mov	r2, r4
 8000dee:	49b6      	ldr	r1, [pc, #728]	; (80010c8 <printRadioSettings+0x6c8>)
 8000df0:	f002 fbbe 	bl	8003570 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000df4:	f107 0308 	add.w	r3, r7, #8
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff f9a7 	bl	800014c <strlen>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	b29a      	uxth	r2, r3
 8000e02:	f107 0108 	add.w	r1, r7, #8
 8000e06:	230a      	movs	r3, #10
 8000e08:	48ad      	ldr	r0, [pc, #692]	; (80010c0 <printRadioSettings+0x6c0>)
 8000e0a:	f002 fa06 	bl	800321a <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 8000e0e:	463b      	mov	r3, r7
 8000e10:	2201      	movs	r2, #1
 8000e12:	4619      	mov	r1, r3
 8000e14:	200c      	movs	r0, #12
 8000e16:	f7ff fa29 	bl	800026c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8000e1a:	783b      	ldrb	r3, [r7, #0]
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	f107 0308 	add.w	r3, r7, #8
 8000e22:	49aa      	ldr	r1, [pc, #680]	; (80010cc <printRadioSettings+0x6cc>)
 8000e24:	4618      	mov	r0, r3
 8000e26:	f002 fba3 	bl	8003570 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000e2a:	f107 0308 	add.w	r3, r7, #8
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff f98c 	bl	800014c <strlen>
 8000e34:	4603      	mov	r3, r0
 8000e36:	b29a      	uxth	r2, r3
 8000e38:	f107 0108 	add.w	r1, r7, #8
 8000e3c:	230a      	movs	r3, #10
 8000e3e:	48a0      	ldr	r0, [pc, #640]	; (80010c0 <printRadioSettings+0x6c0>)
 8000e40:	f002 f9eb 	bl	800321a <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8000e44:	463b      	mov	r3, r7
 8000e46:	2201      	movs	r2, #1
 8000e48:	4619      	mov	r1, r3
 8000e4a:	200d      	movs	r0, #13
 8000e4c:	f7ff fa0e 	bl	800026c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8000e50:	783b      	ldrb	r3, [r7, #0]
 8000e52:	461a      	mov	r2, r3
 8000e54:	f107 0308 	add.w	r3, r7, #8
 8000e58:	499d      	ldr	r1, [pc, #628]	; (80010d0 <printRadioSettings+0x6d0>)
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f002 fb88 	bl	8003570 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000e60:	f107 0308 	add.w	r3, r7, #8
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff f971 	bl	800014c <strlen>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	b29a      	uxth	r2, r3
 8000e6e:	f107 0108 	add.w	r1, r7, #8
 8000e72:	230a      	movs	r3, #10
 8000e74:	4892      	ldr	r0, [pc, #584]	; (80010c0 <printRadioSettings+0x6c0>)
 8000e76:	f002 f9d0 	bl	800321a <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 8000e7a:	463b      	mov	r3, r7
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	4619      	mov	r1, r3
 8000e80:	200e      	movs	r0, #14
 8000e82:	f7ff f9f3 	bl	800026c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8000e86:	783b      	ldrb	r3, [r7, #0]
 8000e88:	461a      	mov	r2, r3
 8000e8a:	f107 0308 	add.w	r3, r7, #8
 8000e8e:	4991      	ldr	r1, [pc, #580]	; (80010d4 <printRadioSettings+0x6d4>)
 8000e90:	4618      	mov	r0, r3
 8000e92:	f002 fb6d 	bl	8003570 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000e96:	f107 0308 	add.w	r3, r7, #8
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff f956 	bl	800014c <strlen>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	b29a      	uxth	r2, r3
 8000ea4:	f107 0108 	add.w	r1, r7, #8
 8000ea8:	230a      	movs	r3, #10
 8000eaa:	4885      	ldr	r0, [pc, #532]	; (80010c0 <printRadioSettings+0x6c0>)
 8000eac:	f002 f9b5 	bl	800321a <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8000eb0:	463b      	mov	r3, r7
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	200f      	movs	r0, #15
 8000eb8:	f7ff f9d8 	bl	800026c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8000ebc:	783b      	ldrb	r3, [r7, #0]
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	f107 0308 	add.w	r3, r7, #8
 8000ec4:	4984      	ldr	r1, [pc, #528]	; (80010d8 <printRadioSettings+0x6d8>)
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f002 fb52 	bl	8003570 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000ecc:	f107 0308 	add.w	r3, r7, #8
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff f93b 	bl	800014c <strlen>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	b29a      	uxth	r2, r3
 8000eda:	f107 0108 	add.w	r1, r7, #8
 8000ede:	230a      	movs	r3, #10
 8000ee0:	4877      	ldr	r0, [pc, #476]	; (80010c0 <printRadioSettings+0x6c0>)
 8000ee2:	f002 f99a 	bl	800321a <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8000ee6:	463b      	mov	r3, r7
 8000ee8:	2205      	movs	r2, #5
 8000eea:	4619      	mov	r1, r3
 8000eec:	2010      	movs	r0, #16
 8000eee:	f7ff f9bd 	bl	800026c <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8000ef2:	793b      	ldrb	r3, [r7, #4]
 8000ef4:	461c      	mov	r4, r3
 8000ef6:	78fb      	ldrb	r3, [r7, #3]
 8000ef8:	461d      	mov	r5, r3
 8000efa:	78bb      	ldrb	r3, [r7, #2]
 8000efc:	787a      	ldrb	r2, [r7, #1]
 8000efe:	7839      	ldrb	r1, [r7, #0]
 8000f00:	f107 0008 	add.w	r0, r7, #8
 8000f04:	9102      	str	r1, [sp, #8]
 8000f06:	9201      	str	r2, [sp, #4]
 8000f08:	9300      	str	r3, [sp, #0]
 8000f0a:	462b      	mov	r3, r5
 8000f0c:	4622      	mov	r2, r4
 8000f0e:	4973      	ldr	r1, [pc, #460]	; (80010dc <printRadioSettings+0x6dc>)
 8000f10:	f002 fb2e 	bl	8003570 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000f14:	f107 0308 	add.w	r3, r7, #8
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff f917 	bl	800014c <strlen>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	b29a      	uxth	r2, r3
 8000f22:	f107 0108 	add.w	r1, r7, #8
 8000f26:	230a      	movs	r3, #10
 8000f28:	4865      	ldr	r0, [pc, #404]	; (80010c0 <printRadioSettings+0x6c0>)
 8000f2a:	f002 f976 	bl	800321a <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8000f2e:	2011      	movs	r0, #17
 8000f30:	f7ff f974 	bl	800021c <NRF24_read_register>
 8000f34:	4603      	mov	r3, r0
 8000f36:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8000f3a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000f42:	f107 0308 	add.w	r3, r7, #8
 8000f46:	4966      	ldr	r1, [pc, #408]	; (80010e0 <printRadioSettings+0x6e0>)
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f002 fb11 	bl	8003570 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000f4e:	f107 0308 	add.w	r3, r7, #8
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff f8fa 	bl	800014c <strlen>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	b29a      	uxth	r2, r3
 8000f5c:	f107 0108 	add.w	r1, r7, #8
 8000f60:	230a      	movs	r3, #10
 8000f62:	4857      	ldr	r0, [pc, #348]	; (80010c0 <printRadioSettings+0x6c0>)
 8000f64:	f002 f959 	bl	800321a <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 8000f68:	2012      	movs	r0, #18
 8000f6a:	f7ff f957 	bl	800021c <NRF24_read_register>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8000f74:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f78:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000f7c:	f107 0308 	add.w	r3, r7, #8
 8000f80:	4958      	ldr	r1, [pc, #352]	; (80010e4 <printRadioSettings+0x6e4>)
 8000f82:	4618      	mov	r0, r3
 8000f84:	f002 faf4 	bl	8003570 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000f88:	f107 0308 	add.w	r3, r7, #8
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff f8dd 	bl	800014c <strlen>
 8000f92:	4603      	mov	r3, r0
 8000f94:	b29a      	uxth	r2, r3
 8000f96:	f107 0108 	add.w	r1, r7, #8
 8000f9a:	230a      	movs	r3, #10
 8000f9c:	4848      	ldr	r0, [pc, #288]	; (80010c0 <printRadioSettings+0x6c0>)
 8000f9e:	f002 f93c 	bl	800321a <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 8000fa2:	2013      	movs	r0, #19
 8000fa4:	f7ff f93a 	bl	800021c <NRF24_read_register>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8000fae:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000fb2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000fb6:	f107 0308 	add.w	r3, r7, #8
 8000fba:	494b      	ldr	r1, [pc, #300]	; (80010e8 <printRadioSettings+0x6e8>)
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f002 fad7 	bl	8003570 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000fc2:	f107 0308 	add.w	r3, r7, #8
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff f8c0 	bl	800014c <strlen>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	b29a      	uxth	r2, r3
 8000fd0:	f107 0108 	add.w	r1, r7, #8
 8000fd4:	230a      	movs	r3, #10
 8000fd6:	483a      	ldr	r0, [pc, #232]	; (80010c0 <printRadioSettings+0x6c0>)
 8000fd8:	f002 f91f 	bl	800321a <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 8000fdc:	2014      	movs	r0, #20
 8000fde:	f7ff f91d 	bl	800021c <NRF24_read_register>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8000fe8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000fec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000ff0:	f107 0308 	add.w	r3, r7, #8
 8000ff4:	493d      	ldr	r1, [pc, #244]	; (80010ec <printRadioSettings+0x6ec>)
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f002 faba 	bl	8003570 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000ffc:	f107 0308 	add.w	r3, r7, #8
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff f8a3 	bl	800014c <strlen>
 8001006:	4603      	mov	r3, r0
 8001008:	b29a      	uxth	r2, r3
 800100a:	f107 0108 	add.w	r1, r7, #8
 800100e:	230a      	movs	r3, #10
 8001010:	482b      	ldr	r0, [pc, #172]	; (80010c0 <printRadioSettings+0x6c0>)
 8001012:	f002 f902 	bl	800321a <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 8001016:	2015      	movs	r0, #21
 8001018:	f7ff f900 	bl	800021c <NRF24_read_register>
 800101c:	4603      	mov	r3, r0
 800101e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001022:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001026:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800102a:	f107 0308 	add.w	r3, r7, #8
 800102e:	4930      	ldr	r1, [pc, #192]	; (80010f0 <printRadioSettings+0x6f0>)
 8001030:	4618      	mov	r0, r3
 8001032:	f002 fa9d 	bl	8003570 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001036:	f107 0308 	add.w	r3, r7, #8
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff f886 	bl	800014c <strlen>
 8001040:	4603      	mov	r3, r0
 8001042:	b29a      	uxth	r2, r3
 8001044:	f107 0108 	add.w	r1, r7, #8
 8001048:	230a      	movs	r3, #10
 800104a:	481d      	ldr	r0, [pc, #116]	; (80010c0 <printRadioSettings+0x6c0>)
 800104c:	f002 f8e5 	bl	800321a <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 8001050:	2016      	movs	r0, #22
 8001052:	f7ff f8e3 	bl	800021c <NRF24_read_register>
 8001056:	4603      	mov	r3, r0
 8001058:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800105c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001060:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001064:	f107 0308 	add.w	r3, r7, #8
 8001068:	4922      	ldr	r1, [pc, #136]	; (80010f4 <printRadioSettings+0x6f4>)
 800106a:	4618      	mov	r0, r3
 800106c:	f002 fa80 	bl	8003570 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001070:	f107 0308 	add.w	r3, r7, #8
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff f869 	bl	800014c <strlen>
 800107a:	4603      	mov	r3, r0
 800107c:	b29a      	uxth	r2, r3
 800107e:	f107 0108 	add.w	r1, r7, #8
 8001082:	230a      	movs	r3, #10
 8001084:	480e      	ldr	r0, [pc, #56]	; (80010c0 <printRadioSettings+0x6c0>)
 8001086:	f002 f8c8 	bl	800321a <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 800108a:	201c      	movs	r0, #28
 800108c:	f7ff f8c6 	bl	800021c <NRF24_read_register>
 8001090:	4603      	mov	r3, r0
 8001092:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001096:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800109a:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800109e:	2b00      	cmp	r3, #0
 80010a0:	bfcc      	ite	gt
 80010a2:	2301      	movgt	r3, #1
 80010a4:	2300      	movle	r3, #0
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80010aa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80010ae:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	bfcc      	ite	gt
 80010b6:	2301      	movgt	r3, #1
 80010b8:	2300      	movle	r3, #0
 80010ba:	e01d      	b.n	80010f8 <printRadioSettings+0x6f8>
 80010bc:	08003f8c 	.word	0x08003f8c
 80010c0:	20000104 	.word	0x20000104
 80010c4:	08003fa0 	.word	0x08003fa0
 80010c8:	08003fd0 	.word	0x08003fd0
 80010cc:	08004000 	.word	0x08004000
 80010d0:	08004028 	.word	0x08004028
 80010d4:	08004050 	.word	0x08004050
 80010d8:	08004078 	.word	0x08004078
 80010dc:	080040a0 	.word	0x080040a0
 80010e0:	080040cc 	.word	0x080040cc
 80010e4:	080040e8 	.word	0x080040e8
 80010e8:	08004104 	.word	0x08004104
 80010ec:	08004120 	.word	0x08004120
 80010f0:	0800413c 	.word	0x0800413c
 80010f4:	08004158 	.word	0x08004158
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80010fc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001100:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001104:	2b00      	cmp	r3, #0
 8001106:	bfcc      	ite	gt
 8001108:	2301      	movgt	r3, #1
 800110a:	2300      	movle	r3, #0
 800110c:	b2db      	uxtb	r3, r3
 800110e:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001110:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001114:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001118:	2b00      	cmp	r3, #0
 800111a:	bfcc      	ite	gt
 800111c:	2301      	movgt	r3, #1
 800111e:	2300      	movle	r3, #0
 8001120:	b2db      	uxtb	r3, r3
 8001122:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001124:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001128:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800112c:	2b00      	cmp	r3, #0
 800112e:	bfcc      	ite	gt
 8001130:	2301      	movgt	r3, #1
 8001132:	2300      	movle	r3, #0
 8001134:	b2db      	uxtb	r3, r3
 8001136:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001138:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800113c:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001140:	2b00      	cmp	r3, #0
 8001142:	bfcc      	ite	gt
 8001144:	2301      	movgt	r3, #1
 8001146:	2300      	movle	r3, #0
 8001148:	b2db      	uxtb	r3, r3
 800114a:	f107 0008 	add.w	r0, r7, #8
 800114e:	9303      	str	r3, [sp, #12]
 8001150:	9402      	str	r4, [sp, #8]
 8001152:	9101      	str	r1, [sp, #4]
 8001154:	9200      	str	r2, [sp, #0]
 8001156:	4633      	mov	r3, r6
 8001158:	462a      	mov	r2, r5
 800115a:	4936      	ldr	r1, [pc, #216]	; (8001234 <printRadioSettings+0x834>)
 800115c:	f002 fa08 	bl	8003570 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001160:	f107 0308 	add.w	r3, r7, #8
 8001164:	4618      	mov	r0, r3
 8001166:	f7fe fff1 	bl	800014c <strlen>
 800116a:	4603      	mov	r3, r0
 800116c:	b29a      	uxth	r2, r3
 800116e:	f107 0108 	add.w	r1, r7, #8
 8001172:	230a      	movs	r3, #10
 8001174:	4830      	ldr	r0, [pc, #192]	; (8001238 <printRadioSettings+0x838>)
 8001176:	f002 f850 	bl	800321a <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 800117a:	201d      	movs	r0, #29
 800117c:	f7ff f84e 	bl	800021c <NRF24_read_register>
 8001180:	4603      	mov	r3, r0
 8001182:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8001186:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800118a:	f003 0304 	and.w	r3, r3, #4
 800118e:	2b00      	cmp	r3, #0
 8001190:	d006      	beq.n	80011a0 <printRadioSettings+0x7a0>
 8001192:	f107 0308 	add.w	r3, r7, #8
 8001196:	4929      	ldr	r1, [pc, #164]	; (800123c <printRadioSettings+0x83c>)
 8001198:	4618      	mov	r0, r3
 800119a:	f002 f9e9 	bl	8003570 <siprintf>
 800119e:	e005      	b.n	80011ac <printRadioSettings+0x7ac>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 80011a0:	f107 0308 	add.w	r3, r7, #8
 80011a4:	4926      	ldr	r1, [pc, #152]	; (8001240 <printRadioSettings+0x840>)
 80011a6:	4618      	mov	r0, r3
 80011a8:	f002 f9e2 	bl	8003570 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80011ac:	f107 0308 	add.w	r3, r7, #8
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7fe ffcb 	bl	800014c <strlen>
 80011b6:	4603      	mov	r3, r0
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	f107 0108 	add.w	r1, r7, #8
 80011be:	230a      	movs	r3, #10
 80011c0:	481d      	ldr	r0, [pc, #116]	; (8001238 <printRadioSettings+0x838>)
 80011c2:	f002 f82a 	bl	800321a <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 80011c6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d006      	beq.n	80011e0 <printRadioSettings+0x7e0>
 80011d2:	f107 0308 	add.w	r3, r7, #8
 80011d6:	491b      	ldr	r1, [pc, #108]	; (8001244 <printRadioSettings+0x844>)
 80011d8:	4618      	mov	r0, r3
 80011da:	f002 f9c9 	bl	8003570 <siprintf>
 80011de:	e005      	b.n	80011ec <printRadioSettings+0x7ec>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 80011e0:	f107 0308 	add.w	r3, r7, #8
 80011e4:	4918      	ldr	r1, [pc, #96]	; (8001248 <printRadioSettings+0x848>)
 80011e6:	4618      	mov	r0, r3
 80011e8:	f002 f9c2 	bl	8003570 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80011ec:	f107 0308 	add.w	r3, r7, #8
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7fe ffab 	bl	800014c <strlen>
 80011f6:	4603      	mov	r3, r0
 80011f8:	b29a      	uxth	r2, r3
 80011fa:	f107 0108 	add.w	r1, r7, #8
 80011fe:	230a      	movs	r3, #10
 8001200:	480d      	ldr	r0, [pc, #52]	; (8001238 <printRadioSettings+0x838>)
 8001202:	f002 f80a 	bl	800321a <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8001206:	f107 0308 	add.w	r3, r7, #8
 800120a:	4910      	ldr	r1, [pc, #64]	; (800124c <printRadioSettings+0x84c>)
 800120c:	4618      	mov	r0, r3
 800120e:	f002 f9af 	bl	8003570 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001212:	f107 0308 	add.w	r3, r7, #8
 8001216:	4618      	mov	r0, r3
 8001218:	f7fe ff98 	bl	800014c <strlen>
 800121c:	4603      	mov	r3, r0
 800121e:	b29a      	uxth	r2, r3
 8001220:	f107 0108 	add.w	r1, r7, #8
 8001224:	230a      	movs	r3, #10
 8001226:	4804      	ldr	r0, [pc, #16]	; (8001238 <printRadioSettings+0x838>)
 8001228:	f001 fff7 	bl	800321a <HAL_UART_Transmit>
}
 800122c:	bf00      	nop
 800122e:	3774      	adds	r7, #116	; 0x74
 8001230:	46bd      	mov	sp, r7
 8001232:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001234:	08004174 	.word	0x08004174
 8001238:	20000104 	.word	0x20000104
 800123c:	080041c0 	.word	0x080041c0
 8001240:	080041d8 	.word	0x080041d8
 8001244:	080041f0 	.word	0x080041f0
 8001248:	0800420c 	.word	0x0800420c
 800124c:	08003de0 	.word	0x08003de0

08001250 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 8001250:	b084      	sub	sp, #16
 8001252:	b580      	push	{r7, lr}
 8001254:	af00      	add	r7, sp, #0
 8001256:	f107 0c08 	add.w	ip, r7, #8
 800125a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 800125e:	4b07      	ldr	r3, [pc, #28]	; (800127c <nrf24_DebugUART_Init+0x2c>)
 8001260:	4618      	mov	r0, r3
 8001262:	f107 0308 	add.w	r3, r7, #8
 8001266:	2244      	movs	r2, #68	; 0x44
 8001268:	4619      	mov	r1, r3
 800126a:	f002 f96b 	bl	8003544 <memcpy>
}
 800126e:	bf00      	nop
 8001270:	46bd      	mov	sp, r7
 8001272:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001276:	b004      	add	sp, #16
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	20000104 	.word	0x20000104

08001280 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001282:	b099      	sub	sp, #100	; 0x64
 8001284:	af16      	add	r7, sp, #88	; 0x58
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001286:	f000 fad5 	bl	8001834 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800128a:	f000 f869 	bl	8001360 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800128e:	f000 f90d 	bl	80014ac <MX_GPIO_Init>
	MX_SPI1_Init();
 8001292:	f000 f8ab 	bl	80013ec <MX_SPI1_Init>
	MX_USART2_UART_Init();
 8001296:	f000 f8df 	bl	8001458 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	NRF24_begin(GPIOB, GPIO_PIN_8, GPIO_PIN_9, hspi1);
 800129a:	4c2a      	ldr	r4, [pc, #168]	; (8001344 <main+0xc4>)
 800129c:	4668      	mov	r0, sp
 800129e:	1d23      	adds	r3, r4, #4
 80012a0:	2254      	movs	r2, #84	; 0x54
 80012a2:	4619      	mov	r1, r3
 80012a4:	f002 f94e 	bl	8003544 <memcpy>
 80012a8:	6823      	ldr	r3, [r4, #0]
 80012aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012b2:	4825      	ldr	r0, [pc, #148]	; (8001348 <main+0xc8>)
 80012b4:	f7ff f89a 	bl	80003ec <NRF24_begin>
	nrf24_DebugUART_Init(huart2);
 80012b8:	4e24      	ldr	r6, [pc, #144]	; (800134c <main+0xcc>)
 80012ba:	466d      	mov	r5, sp
 80012bc:	f106 0410 	add.w	r4, r6, #16
 80012c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012cc:	6823      	ldr	r3, [r4, #0]
 80012ce:	602b      	str	r3, [r5, #0]
 80012d0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80012d4:	f7ff ffbc 	bl	8001250 <nrf24_DebugUART_Init>
	printRadioSettings();
 80012d8:	f7ff fb92 	bl	8000a00 <printRadioSettings>

	NRF24_setAutoAck(false);
 80012dc:	2000      	movs	r0, #0
 80012de:	f7ff fa71 	bl	80007c4 <NRF24_setAutoAck>
	NRF24_setChannel(52);
 80012e2:	2034      	movs	r0, #52	; 0x34
 80012e4:	f7ff fa19 	bl	800071a <NRF24_setChannel>
	NRF24_setPayloadSize(32);
 80012e8:	2020      	movs	r0, #32
 80012ea:	f7ff fa2b 	bl	8000744 <NRF24_setPayloadSize>
	NRF24_openReadingPipe(2, Rx_addr);
 80012ee:	4b18      	ldr	r3, [pc, #96]	; (8001350 <main+0xd0>)
 80012f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f4:	2002      	movs	r0, #2
 80012f6:	f7ff f9a7 	bl	8000648 <NRF24_openReadingPipe>
	NRF24_startListening();
 80012fa:	f7ff f957 	bl	80005ac <NRF24_startListening>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (NRF24_available()) {
 80012fe:	f7ff f97b 	bl	80005f8 <NRF24_available>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d008      	beq.n	800131a <main+0x9a>
			NRF24_read(myRx, 32);
 8001308:	2120      	movs	r1, #32
 800130a:	4812      	ldr	r0, [pc, #72]	; (8001354 <main+0xd4>)
 800130c:	f7ff f97c 	bl	8000608 <NRF24_read>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001310:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001314:	4810      	ldr	r0, [pc, #64]	; (8001358 <main+0xd8>)
 8001316:	f000 fd93 	bl	8001e40 <HAL_GPIO_TogglePin>
		}
		HAL_Delay(1000);
 800131a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800131e:	f000 faeb 	bl	80018f8 <HAL_Delay>
		for (int i = 0; i < 50; i++) {
 8001322:	2300      	movs	r3, #0
 8001324:	607b      	str	r3, [r7, #4]
 8001326:	e009      	b.n	800133c <main+0xbc>
			myRx[i] = null;
 8001328:	4b0c      	ldr	r3, [pc, #48]	; (800135c <main+0xdc>)
 800132a:	7819      	ldrb	r1, [r3, #0]
 800132c:	4a09      	ldr	r2, [pc, #36]	; (8001354 <main+0xd4>)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4413      	add	r3, r2
 8001332:	460a      	mov	r2, r1
 8001334:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 50; i++) {
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	3301      	adds	r3, #1
 800133a:	607b      	str	r3, [r7, #4]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2b31      	cmp	r3, #49	; 0x31
 8001340:	ddf2      	ble.n	8001328 <main+0xa8>
		if (NRF24_available()) {
 8001342:	e7dc      	b.n	80012fe <main+0x7e>
 8001344:	20000158 	.word	0x20000158
 8001348:	40010c00 	.word	0x40010c00
 800134c:	200001b0 	.word	0x200001b0
 8001350:	20000000 	.word	0x20000000
 8001354:	200001f4 	.word	0x200001f4
 8001358:	40011000 	.word	0x40011000
 800135c:	20000154 	.word	0x20000154

08001360 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001360:	b580      	push	{r7, lr}
 8001362:	b090      	sub	sp, #64	; 0x40
 8001364:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001366:	f107 0318 	add.w	r3, r7, #24
 800136a:	2228      	movs	r2, #40	; 0x28
 800136c:	2100      	movs	r1, #0
 800136e:	4618      	mov	r0, r3
 8001370:	f002 f8f6 	bl	8003560 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001374:	1d3b      	adds	r3, r7, #4
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]
 800137c:	609a      	str	r2, [r3, #8]
 800137e:	60da      	str	r2, [r3, #12]
 8001380:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001382:	2301      	movs	r3, #1
 8001384:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001386:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800138a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800138c:	2300      	movs	r3, #0
 800138e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001390:	2301      	movs	r3, #1
 8001392:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001394:	2302      	movs	r3, #2
 8001396:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001398:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800139c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800139e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80013a2:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80013a4:	f107 0318 	add.w	r3, r7, #24
 80013a8:	4618      	mov	r0, r3
 80013aa:	f000 fd63 	bl	8001e74 <HAL_RCC_OscConfig>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <SystemClock_Config+0x58>
		Error_Handler();
 80013b4:	f000 f8e8 	bl	8001588 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80013b8:	230f      	movs	r3, #15
 80013ba:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013bc:	2302      	movs	r3, #2
 80013be:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013c0:	2300      	movs	r3, #0
 80013c2:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013c8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013ca:	2300      	movs	r3, #0
 80013cc:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80013ce:	1d3b      	adds	r3, r7, #4
 80013d0:	2102      	movs	r1, #2
 80013d2:	4618      	mov	r0, r3
 80013d4:	f000 ffce 	bl	8002374 <HAL_RCC_ClockConfig>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <SystemClock_Config+0x82>
		Error_Handler();
 80013de:	f000 f8d3 	bl	8001588 <Error_Handler>
	}
}
 80013e2:	bf00      	nop
 80013e4:	3740      	adds	r7, #64	; 0x40
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
	...

080013ec <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80013f0:	4b17      	ldr	r3, [pc, #92]	; (8001450 <MX_SPI1_Init+0x64>)
 80013f2:	4a18      	ldr	r2, [pc, #96]	; (8001454 <MX_SPI1_Init+0x68>)
 80013f4:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80013f6:	4b16      	ldr	r3, [pc, #88]	; (8001450 <MX_SPI1_Init+0x64>)
 80013f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013fc:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013fe:	4b14      	ldr	r3, [pc, #80]	; (8001450 <MX_SPI1_Init+0x64>)
 8001400:	2200      	movs	r2, #0
 8001402:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001404:	4b12      	ldr	r3, [pc, #72]	; (8001450 <MX_SPI1_Init+0x64>)
 8001406:	2200      	movs	r2, #0
 8001408:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800140a:	4b11      	ldr	r3, [pc, #68]	; (8001450 <MX_SPI1_Init+0x64>)
 800140c:	2200      	movs	r2, #0
 800140e:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001410:	4b0f      	ldr	r3, [pc, #60]	; (8001450 <MX_SPI1_Init+0x64>)
 8001412:	2200      	movs	r2, #0
 8001414:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001416:	4b0e      	ldr	r3, [pc, #56]	; (8001450 <MX_SPI1_Init+0x64>)
 8001418:	f44f 7200 	mov.w	r2, #512	; 0x200
 800141c:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800141e:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <MX_SPI1_Init+0x64>)
 8001420:	2228      	movs	r2, #40	; 0x28
 8001422:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001424:	4b0a      	ldr	r3, [pc, #40]	; (8001450 <MX_SPI1_Init+0x64>)
 8001426:	2200      	movs	r2, #0
 8001428:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800142a:	4b09      	ldr	r3, [pc, #36]	; (8001450 <MX_SPI1_Init+0x64>)
 800142c:	2200      	movs	r2, #0
 800142e:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001430:	4b07      	ldr	r3, [pc, #28]	; (8001450 <MX_SPI1_Init+0x64>)
 8001432:	2200      	movs	r2, #0
 8001434:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8001436:	4b06      	ldr	r3, [pc, #24]	; (8001450 <MX_SPI1_Init+0x64>)
 8001438:	220a      	movs	r2, #10
 800143a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 800143c:	4804      	ldr	r0, [pc, #16]	; (8001450 <MX_SPI1_Init+0x64>)
 800143e:	f001 f933 	bl	80026a8 <HAL_SPI_Init>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_SPI1_Init+0x60>
		Error_Handler();
 8001448:	f000 f89e 	bl	8001588 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 800144c:	bf00      	nop
 800144e:	bd80      	pop	{r7, pc}
 8001450:	20000158 	.word	0x20000158
 8001454:	40013000 	.word	0x40013000

08001458 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800145c:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <MX_USART2_UART_Init+0x4c>)
 800145e:	4a12      	ldr	r2, [pc, #72]	; (80014a8 <MX_USART2_UART_Init+0x50>)
 8001460:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001462:	4b10      	ldr	r3, [pc, #64]	; (80014a4 <MX_USART2_UART_Init+0x4c>)
 8001464:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001468:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800146a:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <MX_USART2_UART_Init+0x4c>)
 800146c:	2200      	movs	r2, #0
 800146e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001470:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <MX_USART2_UART_Init+0x4c>)
 8001472:	2200      	movs	r2, #0
 8001474:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001476:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <MX_USART2_UART_Init+0x4c>)
 8001478:	2200      	movs	r2, #0
 800147a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800147c:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <MX_USART2_UART_Init+0x4c>)
 800147e:	220c      	movs	r2, #12
 8001480:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001482:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <MX_USART2_UART_Init+0x4c>)
 8001484:	2200      	movs	r2, #0
 8001486:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001488:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <MX_USART2_UART_Init+0x4c>)
 800148a:	2200      	movs	r2, #0
 800148c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800148e:	4805      	ldr	r0, [pc, #20]	; (80014a4 <MX_USART2_UART_Init+0x4c>)
 8001490:	f001 fe76 	bl	8003180 <HAL_UART_Init>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_USART2_UART_Init+0x46>
		Error_Handler();
 800149a:	f000 f875 	bl	8001588 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	200001b0 	.word	0x200001b0
 80014a8:	40004400 	.word	0x40004400

080014ac <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b088      	sub	sp, #32
 80014b0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80014b2:	f107 0310 	add.w	r3, r7, #16
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	605a      	str	r2, [r3, #4]
 80014bc:	609a      	str	r2, [r3, #8]
 80014be:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80014c0:	4b2e      	ldr	r3, [pc, #184]	; (800157c <MX_GPIO_Init+0xd0>)
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	4a2d      	ldr	r2, [pc, #180]	; (800157c <MX_GPIO_Init+0xd0>)
 80014c6:	f043 0310 	orr.w	r3, r3, #16
 80014ca:	6193      	str	r3, [r2, #24]
 80014cc:	4b2b      	ldr	r3, [pc, #172]	; (800157c <MX_GPIO_Init+0xd0>)
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	f003 0310 	and.w	r3, r3, #16
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80014d8:	4b28      	ldr	r3, [pc, #160]	; (800157c <MX_GPIO_Init+0xd0>)
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	4a27      	ldr	r2, [pc, #156]	; (800157c <MX_GPIO_Init+0xd0>)
 80014de:	f043 0320 	orr.w	r3, r3, #32
 80014e2:	6193      	str	r3, [r2, #24]
 80014e4:	4b25      	ldr	r3, [pc, #148]	; (800157c <MX_GPIO_Init+0xd0>)
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	f003 0320 	and.w	r3, r3, #32
 80014ec:	60bb      	str	r3, [r7, #8]
 80014ee:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80014f0:	4b22      	ldr	r3, [pc, #136]	; (800157c <MX_GPIO_Init+0xd0>)
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	4a21      	ldr	r2, [pc, #132]	; (800157c <MX_GPIO_Init+0xd0>)
 80014f6:	f043 0304 	orr.w	r3, r3, #4
 80014fa:	6193      	str	r3, [r2, #24]
 80014fc:	4b1f      	ldr	r3, [pc, #124]	; (800157c <MX_GPIO_Init+0xd0>)
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	f003 0304 	and.w	r3, r3, #4
 8001504:	607b      	str	r3, [r7, #4]
 8001506:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001508:	4b1c      	ldr	r3, [pc, #112]	; (800157c <MX_GPIO_Init+0xd0>)
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	4a1b      	ldr	r2, [pc, #108]	; (800157c <MX_GPIO_Init+0xd0>)
 800150e:	f043 0308 	orr.w	r3, r3, #8
 8001512:	6193      	str	r3, [r2, #24]
 8001514:	4b19      	ldr	r3, [pc, #100]	; (800157c <MX_GPIO_Init+0xd0>)
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	f003 0308 	and.w	r3, r3, #8
 800151c:	603b      	str	r3, [r7, #0]
 800151e:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001520:	2200      	movs	r2, #0
 8001522:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001526:	4816      	ldr	r0, [pc, #88]	; (8001580 <MX_GPIO_Init+0xd4>)
 8001528:	f000 fc72 	bl	8001e10 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_RESET);
 800152c:	2200      	movs	r2, #0
 800152e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001532:	4814      	ldr	r0, [pc, #80]	; (8001584 <MX_GPIO_Init+0xd8>)
 8001534:	f000 fc6c 	bl	8001e10 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001538:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800153c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800153e:	2301      	movs	r3, #1
 8001540:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	2300      	movs	r3, #0
 8001544:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001546:	2302      	movs	r3, #2
 8001548:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800154a:	f107 0310 	add.w	r3, r7, #16
 800154e:	4619      	mov	r1, r3
 8001550:	480b      	ldr	r0, [pc, #44]	; (8001580 <MX_GPIO_Init+0xd4>)
 8001552:	f000 fad9 	bl	8001b08 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB8 PB9 */
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8001556:	f44f 7340 	mov.w	r3, #768	; 0x300
 800155a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155c:	2301      	movs	r3, #1
 800155e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001564:	2302      	movs	r3, #2
 8001566:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001568:	f107 0310 	add.w	r3, r7, #16
 800156c:	4619      	mov	r1, r3
 800156e:	4805      	ldr	r0, [pc, #20]	; (8001584 <MX_GPIO_Init+0xd8>)
 8001570:	f000 faca 	bl	8001b08 <HAL_GPIO_Init>

}
 8001574:	bf00      	nop
 8001576:	3720      	adds	r7, #32
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40021000 	.word	0x40021000
 8001580:	40011000 	.word	0x40011000
 8001584:	40010c00 	.word	0x40010c00

08001588 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800158c:	b672      	cpsid	i
}
 800158e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001590:	e7fe      	b.n	8001590 <Error_Handler+0x8>
	...

08001594 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800159a:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <HAL_MspInit+0x5c>)
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	4a14      	ldr	r2, [pc, #80]	; (80015f0 <HAL_MspInit+0x5c>)
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	6193      	str	r3, [r2, #24]
 80015a6:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <HAL_MspInit+0x5c>)
 80015a8:	699b      	ldr	r3, [r3, #24]
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	60bb      	str	r3, [r7, #8]
 80015b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015b2:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <HAL_MspInit+0x5c>)
 80015b4:	69db      	ldr	r3, [r3, #28]
 80015b6:	4a0e      	ldr	r2, [pc, #56]	; (80015f0 <HAL_MspInit+0x5c>)
 80015b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015bc:	61d3      	str	r3, [r2, #28]
 80015be:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <HAL_MspInit+0x5c>)
 80015c0:	69db      	ldr	r3, [r3, #28]
 80015c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c6:	607b      	str	r3, [r7, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015ca:	4b0a      	ldr	r3, [pc, #40]	; (80015f4 <HAL_MspInit+0x60>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	4a04      	ldr	r2, [pc, #16]	; (80015f4 <HAL_MspInit+0x60>)
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015e6:	bf00      	nop
 80015e8:	3714      	adds	r7, #20
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr
 80015f0:	40021000 	.word	0x40021000
 80015f4:	40010000 	.word	0x40010000

080015f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b088      	sub	sp, #32
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001600:	f107 0310 	add.w	r3, r7, #16
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a1b      	ldr	r2, [pc, #108]	; (8001680 <HAL_SPI_MspInit+0x88>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d12f      	bne.n	8001678 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001618:	4b1a      	ldr	r3, [pc, #104]	; (8001684 <HAL_SPI_MspInit+0x8c>)
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	4a19      	ldr	r2, [pc, #100]	; (8001684 <HAL_SPI_MspInit+0x8c>)
 800161e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001622:	6193      	str	r3, [r2, #24]
 8001624:	4b17      	ldr	r3, [pc, #92]	; (8001684 <HAL_SPI_MspInit+0x8c>)
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001630:	4b14      	ldr	r3, [pc, #80]	; (8001684 <HAL_SPI_MspInit+0x8c>)
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	4a13      	ldr	r2, [pc, #76]	; (8001684 <HAL_SPI_MspInit+0x8c>)
 8001636:	f043 0304 	orr.w	r3, r3, #4
 800163a:	6193      	str	r3, [r2, #24]
 800163c:	4b11      	ldr	r3, [pc, #68]	; (8001684 <HAL_SPI_MspInit+0x8c>)
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	f003 0304 	and.w	r3, r3, #4
 8001644:	60bb      	str	r3, [r7, #8]
 8001646:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001648:	23a0      	movs	r3, #160	; 0xa0
 800164a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164c:	2302      	movs	r3, #2
 800164e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001650:	2303      	movs	r3, #3
 8001652:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001654:	f107 0310 	add.w	r3, r7, #16
 8001658:	4619      	mov	r1, r3
 800165a:	480b      	ldr	r0, [pc, #44]	; (8001688 <HAL_SPI_MspInit+0x90>)
 800165c:	f000 fa54 	bl	8001b08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001660:	2340      	movs	r3, #64	; 0x40
 8001662:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001664:	2300      	movs	r3, #0
 8001666:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001668:	2300      	movs	r3, #0
 800166a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166c:	f107 0310 	add.w	r3, r7, #16
 8001670:	4619      	mov	r1, r3
 8001672:	4805      	ldr	r0, [pc, #20]	; (8001688 <HAL_SPI_MspInit+0x90>)
 8001674:	f000 fa48 	bl	8001b08 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001678:	bf00      	nop
 800167a:	3720      	adds	r7, #32
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40013000 	.word	0x40013000
 8001684:	40021000 	.word	0x40021000
 8001688:	40010800 	.word	0x40010800

0800168c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b088      	sub	sp, #32
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001694:	f107 0310 	add.w	r3, r7, #16
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a1b      	ldr	r2, [pc, #108]	; (8001714 <HAL_UART_MspInit+0x88>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d12f      	bne.n	800170c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016ac:	4b1a      	ldr	r3, [pc, #104]	; (8001718 <HAL_UART_MspInit+0x8c>)
 80016ae:	69db      	ldr	r3, [r3, #28]
 80016b0:	4a19      	ldr	r2, [pc, #100]	; (8001718 <HAL_UART_MspInit+0x8c>)
 80016b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016b6:	61d3      	str	r3, [r2, #28]
 80016b8:	4b17      	ldr	r3, [pc, #92]	; (8001718 <HAL_UART_MspInit+0x8c>)
 80016ba:	69db      	ldr	r3, [r3, #28]
 80016bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c4:	4b14      	ldr	r3, [pc, #80]	; (8001718 <HAL_UART_MspInit+0x8c>)
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	4a13      	ldr	r2, [pc, #76]	; (8001718 <HAL_UART_MspInit+0x8c>)
 80016ca:	f043 0304 	orr.w	r3, r3, #4
 80016ce:	6193      	str	r3, [r2, #24]
 80016d0:	4b11      	ldr	r3, [pc, #68]	; (8001718 <HAL_UART_MspInit+0x8c>)
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	f003 0304 	and.w	r3, r3, #4
 80016d8:	60bb      	str	r3, [r7, #8]
 80016da:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016dc:	2304      	movs	r3, #4
 80016de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e0:	2302      	movs	r3, #2
 80016e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016e4:	2303      	movs	r3, #3
 80016e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e8:	f107 0310 	add.w	r3, r7, #16
 80016ec:	4619      	mov	r1, r3
 80016ee:	480b      	ldr	r0, [pc, #44]	; (800171c <HAL_UART_MspInit+0x90>)
 80016f0:	f000 fa0a 	bl	8001b08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80016f4:	2308      	movs	r3, #8
 80016f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016f8:	2300      	movs	r3, #0
 80016fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001700:	f107 0310 	add.w	r3, r7, #16
 8001704:	4619      	mov	r1, r3
 8001706:	4805      	ldr	r0, [pc, #20]	; (800171c <HAL_UART_MspInit+0x90>)
 8001708:	f000 f9fe 	bl	8001b08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800170c:	bf00      	nop
 800170e:	3720      	adds	r7, #32
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40004400 	.word	0x40004400
 8001718:	40021000 	.word	0x40021000
 800171c:	40010800 	.word	0x40010800

08001720 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001724:	e7fe      	b.n	8001724 <NMI_Handler+0x4>

08001726 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800172a:	e7fe      	b.n	800172a <HardFault_Handler+0x4>

0800172c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001730:	e7fe      	b.n	8001730 <MemManage_Handler+0x4>

08001732 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001732:	b480      	push	{r7}
 8001734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001736:	e7fe      	b.n	8001736 <BusFault_Handler+0x4>

08001738 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800173c:	e7fe      	b.n	800173c <UsageFault_Handler+0x4>

0800173e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	46bd      	mov	sp, r7
 8001746:	bc80      	pop	{r7}
 8001748:	4770      	bx	lr

0800174a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	46bd      	mov	sp, r7
 8001752:	bc80      	pop	{r7}
 8001754:	4770      	bx	lr

08001756 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	46bd      	mov	sp, r7
 800175e:	bc80      	pop	{r7}
 8001760:	4770      	bx	lr

08001762 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001766:	f000 f8ab 	bl	80018c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
	...

08001770 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001778:	4a14      	ldr	r2, [pc, #80]	; (80017cc <_sbrk+0x5c>)
 800177a:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <_sbrk+0x60>)
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001784:	4b13      	ldr	r3, [pc, #76]	; (80017d4 <_sbrk+0x64>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d102      	bne.n	8001792 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800178c:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <_sbrk+0x64>)
 800178e:	4a12      	ldr	r2, [pc, #72]	; (80017d8 <_sbrk+0x68>)
 8001790:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001792:	4b10      	ldr	r3, [pc, #64]	; (80017d4 <_sbrk+0x64>)
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4413      	add	r3, r2
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	429a      	cmp	r2, r3
 800179e:	d207      	bcs.n	80017b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017a0:	f001 fea6 	bl	80034f0 <__errno>
 80017a4:	4603      	mov	r3, r0
 80017a6:	220c      	movs	r2, #12
 80017a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017aa:	f04f 33ff 	mov.w	r3, #4294967295
 80017ae:	e009      	b.n	80017c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017b0:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <_sbrk+0x64>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017b6:	4b07      	ldr	r3, [pc, #28]	; (80017d4 <_sbrk+0x64>)
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4413      	add	r3, r2
 80017be:	4a05      	ldr	r2, [pc, #20]	; (80017d4 <_sbrk+0x64>)
 80017c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017c2:	68fb      	ldr	r3, [r7, #12]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3718      	adds	r7, #24
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	20005000 	.word	0x20005000
 80017d0:	00000400 	.word	0x00000400
 80017d4:	20000148 	.word	0x20000148
 80017d8:	20000240 	.word	0x20000240

080017dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bc80      	pop	{r7}
 80017e6:	4770      	bx	lr

080017e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017e8:	480c      	ldr	r0, [pc, #48]	; (800181c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017ea:	490d      	ldr	r1, [pc, #52]	; (8001820 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017ec:	4a0d      	ldr	r2, [pc, #52]	; (8001824 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017f0:	e002      	b.n	80017f8 <LoopCopyDataInit>

080017f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017f6:	3304      	adds	r3, #4

080017f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017fc:	d3f9      	bcc.n	80017f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017fe:	4a0a      	ldr	r2, [pc, #40]	; (8001828 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001800:	4c0a      	ldr	r4, [pc, #40]	; (800182c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001802:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001804:	e001      	b.n	800180a <LoopFillZerobss>

08001806 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001806:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001808:	3204      	adds	r2, #4

0800180a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800180a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800180c:	d3fb      	bcc.n	8001806 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800180e:	f7ff ffe5 	bl	80017dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001812:	f001 fe73 	bl	80034fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001816:	f7ff fd33 	bl	8001280 <main>
  bx lr
 800181a:	4770      	bx	lr
  ldr r0, =_sdata
 800181c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001820:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001824:	08004398 	.word	0x08004398
  ldr r2, =_sbss
 8001828:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800182c:	2000023c 	.word	0x2000023c

08001830 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001830:	e7fe      	b.n	8001830 <ADC1_2_IRQHandler>
	...

08001834 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001838:	4b08      	ldr	r3, [pc, #32]	; (800185c <HAL_Init+0x28>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a07      	ldr	r2, [pc, #28]	; (800185c <HAL_Init+0x28>)
 800183e:	f043 0310 	orr.w	r3, r3, #16
 8001842:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001844:	2003      	movs	r0, #3
 8001846:	f000 f92b 	bl	8001aa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800184a:	2000      	movs	r0, #0
 800184c:	f000 f808 	bl	8001860 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001850:	f7ff fea0 	bl	8001594 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40022000 	.word	0x40022000

08001860 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001868:	4b12      	ldr	r3, [pc, #72]	; (80018b4 <HAL_InitTick+0x54>)
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <HAL_InitTick+0x58>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	4619      	mov	r1, r3
 8001872:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001876:	fbb3 f3f1 	udiv	r3, r3, r1
 800187a:	fbb2 f3f3 	udiv	r3, r2, r3
 800187e:	4618      	mov	r0, r3
 8001880:	f000 f935 	bl	8001aee <HAL_SYSTICK_Config>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e00e      	b.n	80018ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2b0f      	cmp	r3, #15
 8001892:	d80a      	bhi.n	80018aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001894:	2200      	movs	r2, #0
 8001896:	6879      	ldr	r1, [r7, #4]
 8001898:	f04f 30ff 	mov.w	r0, #4294967295
 800189c:	f000 f90b 	bl	8001ab6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018a0:	4a06      	ldr	r2, [pc, #24]	; (80018bc <HAL_InitTick+0x5c>)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018a6:	2300      	movs	r3, #0
 80018a8:	e000      	b.n	80018ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20000008 	.word	0x20000008
 80018b8:	20000010 	.word	0x20000010
 80018bc:	2000000c 	.word	0x2000000c

080018c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018c4:	4b05      	ldr	r3, [pc, #20]	; (80018dc <HAL_IncTick+0x1c>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	461a      	mov	r2, r3
 80018ca:	4b05      	ldr	r3, [pc, #20]	; (80018e0 <HAL_IncTick+0x20>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4413      	add	r3, r2
 80018d0:	4a03      	ldr	r2, [pc, #12]	; (80018e0 <HAL_IncTick+0x20>)
 80018d2:	6013      	str	r3, [r2, #0]
}
 80018d4:	bf00      	nop
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bc80      	pop	{r7}
 80018da:	4770      	bx	lr
 80018dc:	20000010 	.word	0x20000010
 80018e0:	20000228 	.word	0x20000228

080018e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  return uwTick;
 80018e8:	4b02      	ldr	r3, [pc, #8]	; (80018f4 <HAL_GetTick+0x10>)
 80018ea:	681b      	ldr	r3, [r3, #0]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr
 80018f4:	20000228 	.word	0x20000228

080018f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001900:	f7ff fff0 	bl	80018e4 <HAL_GetTick>
 8001904:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001910:	d005      	beq.n	800191e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001912:	4b0a      	ldr	r3, [pc, #40]	; (800193c <HAL_Delay+0x44>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	461a      	mov	r2, r3
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	4413      	add	r3, r2
 800191c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800191e:	bf00      	nop
 8001920:	f7ff ffe0 	bl	80018e4 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	68fa      	ldr	r2, [r7, #12]
 800192c:	429a      	cmp	r2, r3
 800192e:	d8f7      	bhi.n	8001920 <HAL_Delay+0x28>
  {
  }
}
 8001930:	bf00      	nop
 8001932:	bf00      	nop
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20000010 	.word	0x20000010

08001940 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001950:	4b0c      	ldr	r3, [pc, #48]	; (8001984 <__NVIC_SetPriorityGrouping+0x44>)
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001956:	68ba      	ldr	r2, [r7, #8]
 8001958:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800195c:	4013      	ands	r3, r2
 800195e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001968:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800196c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001970:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001972:	4a04      	ldr	r2, [pc, #16]	; (8001984 <__NVIC_SetPriorityGrouping+0x44>)
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	60d3      	str	r3, [r2, #12]
}
 8001978:	bf00      	nop
 800197a:	3714      	adds	r7, #20
 800197c:	46bd      	mov	sp, r7
 800197e:	bc80      	pop	{r7}
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	e000ed00 	.word	0xe000ed00

08001988 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800198c:	4b04      	ldr	r3, [pc, #16]	; (80019a0 <__NVIC_GetPriorityGrouping+0x18>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	0a1b      	lsrs	r3, r3, #8
 8001992:	f003 0307 	and.w	r3, r3, #7
}
 8001996:	4618      	mov	r0, r3
 8001998:	46bd      	mov	sp, r7
 800199a:	bc80      	pop	{r7}
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	e000ed00 	.word	0xe000ed00

080019a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4603      	mov	r3, r0
 80019ac:	6039      	str	r1, [r7, #0]
 80019ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	db0a      	blt.n	80019ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	b2da      	uxtb	r2, r3
 80019bc:	490c      	ldr	r1, [pc, #48]	; (80019f0 <__NVIC_SetPriority+0x4c>)
 80019be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c2:	0112      	lsls	r2, r2, #4
 80019c4:	b2d2      	uxtb	r2, r2
 80019c6:	440b      	add	r3, r1
 80019c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019cc:	e00a      	b.n	80019e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	b2da      	uxtb	r2, r3
 80019d2:	4908      	ldr	r1, [pc, #32]	; (80019f4 <__NVIC_SetPriority+0x50>)
 80019d4:	79fb      	ldrb	r3, [r7, #7]
 80019d6:	f003 030f 	and.w	r3, r3, #15
 80019da:	3b04      	subs	r3, #4
 80019dc:	0112      	lsls	r2, r2, #4
 80019de:	b2d2      	uxtb	r2, r2
 80019e0:	440b      	add	r3, r1
 80019e2:	761a      	strb	r2, [r3, #24]
}
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bc80      	pop	{r7}
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	e000e100 	.word	0xe000e100
 80019f4:	e000ed00 	.word	0xe000ed00

080019f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b089      	sub	sp, #36	; 0x24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f003 0307 	and.w	r3, r3, #7
 8001a0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	f1c3 0307 	rsb	r3, r3, #7
 8001a12:	2b04      	cmp	r3, #4
 8001a14:	bf28      	it	cs
 8001a16:	2304      	movcs	r3, #4
 8001a18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	3304      	adds	r3, #4
 8001a1e:	2b06      	cmp	r3, #6
 8001a20:	d902      	bls.n	8001a28 <NVIC_EncodePriority+0x30>
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	3b03      	subs	r3, #3
 8001a26:	e000      	b.n	8001a2a <NVIC_EncodePriority+0x32>
 8001a28:	2300      	movs	r3, #0
 8001a2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
 8001a36:	43da      	mvns	r2, r3
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	401a      	ands	r2, r3
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a40:	f04f 31ff 	mov.w	r1, #4294967295
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4a:	43d9      	mvns	r1, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a50:	4313      	orrs	r3, r2
         );
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3724      	adds	r7, #36	; 0x24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bc80      	pop	{r7}
 8001a5a:	4770      	bx	lr

08001a5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	3b01      	subs	r3, #1
 8001a68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a6c:	d301      	bcc.n	8001a72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e00f      	b.n	8001a92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a72:	4a0a      	ldr	r2, [pc, #40]	; (8001a9c <SysTick_Config+0x40>)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3b01      	subs	r3, #1
 8001a78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a7a:	210f      	movs	r1, #15
 8001a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a80:	f7ff ff90 	bl	80019a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a84:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <SysTick_Config+0x40>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a8a:	4b04      	ldr	r3, [pc, #16]	; (8001a9c <SysTick_Config+0x40>)
 8001a8c:	2207      	movs	r2, #7
 8001a8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	e000e010 	.word	0xe000e010

08001aa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f7ff ff49 	bl	8001940 <__NVIC_SetPriorityGrouping>
}
 8001aae:	bf00      	nop
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b086      	sub	sp, #24
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	4603      	mov	r3, r0
 8001abe:	60b9      	str	r1, [r7, #8]
 8001ac0:	607a      	str	r2, [r7, #4]
 8001ac2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ac8:	f7ff ff5e 	bl	8001988 <__NVIC_GetPriorityGrouping>
 8001acc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	68b9      	ldr	r1, [r7, #8]
 8001ad2:	6978      	ldr	r0, [r7, #20]
 8001ad4:	f7ff ff90 	bl	80019f8 <NVIC_EncodePriority>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ade:	4611      	mov	r1, r2
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff ff5f 	bl	80019a4 <__NVIC_SetPriority>
}
 8001ae6:	bf00      	nop
 8001ae8:	3718      	adds	r7, #24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b082      	sub	sp, #8
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f7ff ffb0 	bl	8001a5c <SysTick_Config>
 8001afc:	4603      	mov	r3, r0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
	...

08001b08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b08b      	sub	sp, #44	; 0x2c
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b12:	2300      	movs	r3, #0
 8001b14:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b16:	2300      	movs	r3, #0
 8001b18:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b1a:	e169      	b.n	8001df0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	69fa      	ldr	r2, [r7, #28]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	f040 8158 	bne.w	8001dea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	4a9a      	ldr	r2, [pc, #616]	; (8001da8 <HAL_GPIO_Init+0x2a0>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d05e      	beq.n	8001c02 <HAL_GPIO_Init+0xfa>
 8001b44:	4a98      	ldr	r2, [pc, #608]	; (8001da8 <HAL_GPIO_Init+0x2a0>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d875      	bhi.n	8001c36 <HAL_GPIO_Init+0x12e>
 8001b4a:	4a98      	ldr	r2, [pc, #608]	; (8001dac <HAL_GPIO_Init+0x2a4>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d058      	beq.n	8001c02 <HAL_GPIO_Init+0xfa>
 8001b50:	4a96      	ldr	r2, [pc, #600]	; (8001dac <HAL_GPIO_Init+0x2a4>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d86f      	bhi.n	8001c36 <HAL_GPIO_Init+0x12e>
 8001b56:	4a96      	ldr	r2, [pc, #600]	; (8001db0 <HAL_GPIO_Init+0x2a8>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d052      	beq.n	8001c02 <HAL_GPIO_Init+0xfa>
 8001b5c:	4a94      	ldr	r2, [pc, #592]	; (8001db0 <HAL_GPIO_Init+0x2a8>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d869      	bhi.n	8001c36 <HAL_GPIO_Init+0x12e>
 8001b62:	4a94      	ldr	r2, [pc, #592]	; (8001db4 <HAL_GPIO_Init+0x2ac>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d04c      	beq.n	8001c02 <HAL_GPIO_Init+0xfa>
 8001b68:	4a92      	ldr	r2, [pc, #584]	; (8001db4 <HAL_GPIO_Init+0x2ac>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d863      	bhi.n	8001c36 <HAL_GPIO_Init+0x12e>
 8001b6e:	4a92      	ldr	r2, [pc, #584]	; (8001db8 <HAL_GPIO_Init+0x2b0>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d046      	beq.n	8001c02 <HAL_GPIO_Init+0xfa>
 8001b74:	4a90      	ldr	r2, [pc, #576]	; (8001db8 <HAL_GPIO_Init+0x2b0>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d85d      	bhi.n	8001c36 <HAL_GPIO_Init+0x12e>
 8001b7a:	2b12      	cmp	r3, #18
 8001b7c:	d82a      	bhi.n	8001bd4 <HAL_GPIO_Init+0xcc>
 8001b7e:	2b12      	cmp	r3, #18
 8001b80:	d859      	bhi.n	8001c36 <HAL_GPIO_Init+0x12e>
 8001b82:	a201      	add	r2, pc, #4	; (adr r2, 8001b88 <HAL_GPIO_Init+0x80>)
 8001b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b88:	08001c03 	.word	0x08001c03
 8001b8c:	08001bdd 	.word	0x08001bdd
 8001b90:	08001bef 	.word	0x08001bef
 8001b94:	08001c31 	.word	0x08001c31
 8001b98:	08001c37 	.word	0x08001c37
 8001b9c:	08001c37 	.word	0x08001c37
 8001ba0:	08001c37 	.word	0x08001c37
 8001ba4:	08001c37 	.word	0x08001c37
 8001ba8:	08001c37 	.word	0x08001c37
 8001bac:	08001c37 	.word	0x08001c37
 8001bb0:	08001c37 	.word	0x08001c37
 8001bb4:	08001c37 	.word	0x08001c37
 8001bb8:	08001c37 	.word	0x08001c37
 8001bbc:	08001c37 	.word	0x08001c37
 8001bc0:	08001c37 	.word	0x08001c37
 8001bc4:	08001c37 	.word	0x08001c37
 8001bc8:	08001c37 	.word	0x08001c37
 8001bcc:	08001be5 	.word	0x08001be5
 8001bd0:	08001bf9 	.word	0x08001bf9
 8001bd4:	4a79      	ldr	r2, [pc, #484]	; (8001dbc <HAL_GPIO_Init+0x2b4>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d013      	beq.n	8001c02 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001bda:	e02c      	b.n	8001c36 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	623b      	str	r3, [r7, #32]
          break;
 8001be2:	e029      	b.n	8001c38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	3304      	adds	r3, #4
 8001bea:	623b      	str	r3, [r7, #32]
          break;
 8001bec:	e024      	b.n	8001c38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	3308      	adds	r3, #8
 8001bf4:	623b      	str	r3, [r7, #32]
          break;
 8001bf6:	e01f      	b.n	8001c38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	330c      	adds	r3, #12
 8001bfe:	623b      	str	r3, [r7, #32]
          break;
 8001c00:	e01a      	b.n	8001c38 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d102      	bne.n	8001c10 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c0a:	2304      	movs	r3, #4
 8001c0c:	623b      	str	r3, [r7, #32]
          break;
 8001c0e:	e013      	b.n	8001c38 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d105      	bne.n	8001c24 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c18:	2308      	movs	r3, #8
 8001c1a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	69fa      	ldr	r2, [r7, #28]
 8001c20:	611a      	str	r2, [r3, #16]
          break;
 8001c22:	e009      	b.n	8001c38 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c24:	2308      	movs	r3, #8
 8001c26:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	69fa      	ldr	r2, [r7, #28]
 8001c2c:	615a      	str	r2, [r3, #20]
          break;
 8001c2e:	e003      	b.n	8001c38 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c30:	2300      	movs	r3, #0
 8001c32:	623b      	str	r3, [r7, #32]
          break;
 8001c34:	e000      	b.n	8001c38 <HAL_GPIO_Init+0x130>
          break;
 8001c36:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	2bff      	cmp	r3, #255	; 0xff
 8001c3c:	d801      	bhi.n	8001c42 <HAL_GPIO_Init+0x13a>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	e001      	b.n	8001c46 <HAL_GPIO_Init+0x13e>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	3304      	adds	r3, #4
 8001c46:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	2bff      	cmp	r3, #255	; 0xff
 8001c4c:	d802      	bhi.n	8001c54 <HAL_GPIO_Init+0x14c>
 8001c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	e002      	b.n	8001c5a <HAL_GPIO_Init+0x152>
 8001c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c56:	3b08      	subs	r3, #8
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	210f      	movs	r1, #15
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	fa01 f303 	lsl.w	r3, r1, r3
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	401a      	ands	r2, r3
 8001c6c:	6a39      	ldr	r1, [r7, #32]
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	fa01 f303 	lsl.w	r3, r1, r3
 8001c74:	431a      	orrs	r2, r3
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f000 80b1 	beq.w	8001dea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c88:	4b4d      	ldr	r3, [pc, #308]	; (8001dc0 <HAL_GPIO_Init+0x2b8>)
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	4a4c      	ldr	r2, [pc, #304]	; (8001dc0 <HAL_GPIO_Init+0x2b8>)
 8001c8e:	f043 0301 	orr.w	r3, r3, #1
 8001c92:	6193      	str	r3, [r2, #24]
 8001c94:	4b4a      	ldr	r3, [pc, #296]	; (8001dc0 <HAL_GPIO_Init+0x2b8>)
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	f003 0301 	and.w	r3, r3, #1
 8001c9c:	60bb      	str	r3, [r7, #8]
 8001c9e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ca0:	4a48      	ldr	r2, [pc, #288]	; (8001dc4 <HAL_GPIO_Init+0x2bc>)
 8001ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca4:	089b      	lsrs	r3, r3, #2
 8001ca6:	3302      	adds	r3, #2
 8001ca8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb0:	f003 0303 	and.w	r3, r3, #3
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	220f      	movs	r2, #15
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	68fa      	ldr	r2, [r7, #12]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4a40      	ldr	r2, [pc, #256]	; (8001dc8 <HAL_GPIO_Init+0x2c0>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d013      	beq.n	8001cf4 <HAL_GPIO_Init+0x1ec>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4a3f      	ldr	r2, [pc, #252]	; (8001dcc <HAL_GPIO_Init+0x2c4>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d00d      	beq.n	8001cf0 <HAL_GPIO_Init+0x1e8>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	4a3e      	ldr	r2, [pc, #248]	; (8001dd0 <HAL_GPIO_Init+0x2c8>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d007      	beq.n	8001cec <HAL_GPIO_Init+0x1e4>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	4a3d      	ldr	r2, [pc, #244]	; (8001dd4 <HAL_GPIO_Init+0x2cc>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d101      	bne.n	8001ce8 <HAL_GPIO_Init+0x1e0>
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e006      	b.n	8001cf6 <HAL_GPIO_Init+0x1ee>
 8001ce8:	2304      	movs	r3, #4
 8001cea:	e004      	b.n	8001cf6 <HAL_GPIO_Init+0x1ee>
 8001cec:	2302      	movs	r3, #2
 8001cee:	e002      	b.n	8001cf6 <HAL_GPIO_Init+0x1ee>
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e000      	b.n	8001cf6 <HAL_GPIO_Init+0x1ee>
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cf8:	f002 0203 	and.w	r2, r2, #3
 8001cfc:	0092      	lsls	r2, r2, #2
 8001cfe:	4093      	lsls	r3, r2
 8001d00:	68fa      	ldr	r2, [r7, #12]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d06:	492f      	ldr	r1, [pc, #188]	; (8001dc4 <HAL_GPIO_Init+0x2bc>)
 8001d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0a:	089b      	lsrs	r3, r3, #2
 8001d0c:	3302      	adds	r3, #2
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d006      	beq.n	8001d2e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d20:	4b2d      	ldr	r3, [pc, #180]	; (8001dd8 <HAL_GPIO_Init+0x2d0>)
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	492c      	ldr	r1, [pc, #176]	; (8001dd8 <HAL_GPIO_Init+0x2d0>)
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	600b      	str	r3, [r1, #0]
 8001d2c:	e006      	b.n	8001d3c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d2e:	4b2a      	ldr	r3, [pc, #168]	; (8001dd8 <HAL_GPIO_Init+0x2d0>)
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	43db      	mvns	r3, r3
 8001d36:	4928      	ldr	r1, [pc, #160]	; (8001dd8 <HAL_GPIO_Init+0x2d0>)
 8001d38:	4013      	ands	r3, r2
 8001d3a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d006      	beq.n	8001d56 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d48:	4b23      	ldr	r3, [pc, #140]	; (8001dd8 <HAL_GPIO_Init+0x2d0>)
 8001d4a:	685a      	ldr	r2, [r3, #4]
 8001d4c:	4922      	ldr	r1, [pc, #136]	; (8001dd8 <HAL_GPIO_Init+0x2d0>)
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	604b      	str	r3, [r1, #4]
 8001d54:	e006      	b.n	8001d64 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d56:	4b20      	ldr	r3, [pc, #128]	; (8001dd8 <HAL_GPIO_Init+0x2d0>)
 8001d58:	685a      	ldr	r2, [r3, #4]
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	491e      	ldr	r1, [pc, #120]	; (8001dd8 <HAL_GPIO_Init+0x2d0>)
 8001d60:	4013      	ands	r3, r2
 8001d62:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d006      	beq.n	8001d7e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d70:	4b19      	ldr	r3, [pc, #100]	; (8001dd8 <HAL_GPIO_Init+0x2d0>)
 8001d72:	689a      	ldr	r2, [r3, #8]
 8001d74:	4918      	ldr	r1, [pc, #96]	; (8001dd8 <HAL_GPIO_Init+0x2d0>)
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	608b      	str	r3, [r1, #8]
 8001d7c:	e006      	b.n	8001d8c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d7e:	4b16      	ldr	r3, [pc, #88]	; (8001dd8 <HAL_GPIO_Init+0x2d0>)
 8001d80:	689a      	ldr	r2, [r3, #8]
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	43db      	mvns	r3, r3
 8001d86:	4914      	ldr	r1, [pc, #80]	; (8001dd8 <HAL_GPIO_Init+0x2d0>)
 8001d88:	4013      	ands	r3, r2
 8001d8a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d021      	beq.n	8001ddc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d98:	4b0f      	ldr	r3, [pc, #60]	; (8001dd8 <HAL_GPIO_Init+0x2d0>)
 8001d9a:	68da      	ldr	r2, [r3, #12]
 8001d9c:	490e      	ldr	r1, [pc, #56]	; (8001dd8 <HAL_GPIO_Init+0x2d0>)
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	60cb      	str	r3, [r1, #12]
 8001da4:	e021      	b.n	8001dea <HAL_GPIO_Init+0x2e2>
 8001da6:	bf00      	nop
 8001da8:	10320000 	.word	0x10320000
 8001dac:	10310000 	.word	0x10310000
 8001db0:	10220000 	.word	0x10220000
 8001db4:	10210000 	.word	0x10210000
 8001db8:	10120000 	.word	0x10120000
 8001dbc:	10110000 	.word	0x10110000
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	40010000 	.word	0x40010000
 8001dc8:	40010800 	.word	0x40010800
 8001dcc:	40010c00 	.word	0x40010c00
 8001dd0:	40011000 	.word	0x40011000
 8001dd4:	40011400 	.word	0x40011400
 8001dd8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ddc:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <HAL_GPIO_Init+0x304>)
 8001dde:	68da      	ldr	r2, [r3, #12]
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	43db      	mvns	r3, r3
 8001de4:	4909      	ldr	r1, [pc, #36]	; (8001e0c <HAL_GPIO_Init+0x304>)
 8001de6:	4013      	ands	r3, r2
 8001de8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dec:	3301      	adds	r3, #1
 8001dee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df6:	fa22 f303 	lsr.w	r3, r2, r3
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	f47f ae8e 	bne.w	8001b1c <HAL_GPIO_Init+0x14>
  }
}
 8001e00:	bf00      	nop
 8001e02:	bf00      	nop
 8001e04:	372c      	adds	r7, #44	; 0x2c
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bc80      	pop	{r7}
 8001e0a:	4770      	bx	lr
 8001e0c:	40010400 	.word	0x40010400

08001e10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	460b      	mov	r3, r1
 8001e1a:	807b      	strh	r3, [r7, #2]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e20:	787b      	ldrb	r3, [r7, #1]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d003      	beq.n	8001e2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e26:	887a      	ldrh	r2, [r7, #2]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e2c:	e003      	b.n	8001e36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e2e:	887b      	ldrh	r3, [r7, #2]
 8001e30:	041a      	lsls	r2, r3, #16
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	611a      	str	r2, [r3, #16]
}
 8001e36:	bf00      	nop
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bc80      	pop	{r7}
 8001e3e:	4770      	bx	lr

08001e40 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	460b      	mov	r3, r1
 8001e4a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e52:	887a      	ldrh	r2, [r7, #2]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	4013      	ands	r3, r2
 8001e58:	041a      	lsls	r2, r3, #16
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	43d9      	mvns	r1, r3
 8001e5e:	887b      	ldrh	r3, [r7, #2]
 8001e60:	400b      	ands	r3, r1
 8001e62:	431a      	orrs	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	611a      	str	r2, [r3, #16]
}
 8001e68:	bf00      	nop
 8001e6a:	3714      	adds	r7, #20
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bc80      	pop	{r7}
 8001e70:	4770      	bx	lr
	...

08001e74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e26c      	b.n	8002360 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f000 8087 	beq.w	8001fa2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e94:	4b92      	ldr	r3, [pc, #584]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f003 030c 	and.w	r3, r3, #12
 8001e9c:	2b04      	cmp	r3, #4
 8001e9e:	d00c      	beq.n	8001eba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ea0:	4b8f      	ldr	r3, [pc, #572]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f003 030c 	and.w	r3, r3, #12
 8001ea8:	2b08      	cmp	r3, #8
 8001eaa:	d112      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x5e>
 8001eac:	4b8c      	ldr	r3, [pc, #560]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eb8:	d10b      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eba:	4b89      	ldr	r3, [pc, #548]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d06c      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x12c>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d168      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e246      	b.n	8002360 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eda:	d106      	bne.n	8001eea <HAL_RCC_OscConfig+0x76>
 8001edc:	4b80      	ldr	r3, [pc, #512]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a7f      	ldr	r2, [pc, #508]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001ee2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ee6:	6013      	str	r3, [r2, #0]
 8001ee8:	e02e      	b.n	8001f48 <HAL_RCC_OscConfig+0xd4>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d10c      	bne.n	8001f0c <HAL_RCC_OscConfig+0x98>
 8001ef2:	4b7b      	ldr	r3, [pc, #492]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a7a      	ldr	r2, [pc, #488]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001ef8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001efc:	6013      	str	r3, [r2, #0]
 8001efe:	4b78      	ldr	r3, [pc, #480]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a77      	ldr	r2, [pc, #476]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001f04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f08:	6013      	str	r3, [r2, #0]
 8001f0a:	e01d      	b.n	8001f48 <HAL_RCC_OscConfig+0xd4>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f14:	d10c      	bne.n	8001f30 <HAL_RCC_OscConfig+0xbc>
 8001f16:	4b72      	ldr	r3, [pc, #456]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a71      	ldr	r2, [pc, #452]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001f1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f20:	6013      	str	r3, [r2, #0]
 8001f22:	4b6f      	ldr	r3, [pc, #444]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a6e      	ldr	r2, [pc, #440]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001f28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f2c:	6013      	str	r3, [r2, #0]
 8001f2e:	e00b      	b.n	8001f48 <HAL_RCC_OscConfig+0xd4>
 8001f30:	4b6b      	ldr	r3, [pc, #428]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a6a      	ldr	r2, [pc, #424]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001f36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f3a:	6013      	str	r3, [r2, #0]
 8001f3c:	4b68      	ldr	r3, [pc, #416]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a67      	ldr	r2, [pc, #412]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001f42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f46:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d013      	beq.n	8001f78 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f50:	f7ff fcc8 	bl	80018e4 <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f58:	f7ff fcc4 	bl	80018e4 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b64      	cmp	r3, #100	; 0x64
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e1fa      	b.n	8002360 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f6a:	4b5d      	ldr	r3, [pc, #372]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d0f0      	beq.n	8001f58 <HAL_RCC_OscConfig+0xe4>
 8001f76:	e014      	b.n	8001fa2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f78:	f7ff fcb4 	bl	80018e4 <HAL_GetTick>
 8001f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f80:	f7ff fcb0 	bl	80018e4 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b64      	cmp	r3, #100	; 0x64
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e1e6      	b.n	8002360 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f92:	4b53      	ldr	r3, [pc, #332]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1f0      	bne.n	8001f80 <HAL_RCC_OscConfig+0x10c>
 8001f9e:	e000      	b.n	8001fa2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d063      	beq.n	8002076 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fae:	4b4c      	ldr	r3, [pc, #304]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f003 030c 	and.w	r3, r3, #12
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d00b      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001fba:	4b49      	ldr	r3, [pc, #292]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f003 030c 	and.w	r3, r3, #12
 8001fc2:	2b08      	cmp	r3, #8
 8001fc4:	d11c      	bne.n	8002000 <HAL_RCC_OscConfig+0x18c>
 8001fc6:	4b46      	ldr	r3, [pc, #280]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d116      	bne.n	8002000 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fd2:	4b43      	ldr	r3, [pc, #268]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d005      	beq.n	8001fea <HAL_RCC_OscConfig+0x176>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d001      	beq.n	8001fea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e1ba      	b.n	8002360 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fea:	4b3d      	ldr	r3, [pc, #244]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	695b      	ldr	r3, [r3, #20]
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	4939      	ldr	r1, [pc, #228]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ffe:	e03a      	b.n	8002076 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	691b      	ldr	r3, [r3, #16]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d020      	beq.n	800204a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002008:	4b36      	ldr	r3, [pc, #216]	; (80020e4 <HAL_RCC_OscConfig+0x270>)
 800200a:	2201      	movs	r2, #1
 800200c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200e:	f7ff fc69 	bl	80018e4 <HAL_GetTick>
 8002012:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002014:	e008      	b.n	8002028 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002016:	f7ff fc65 	bl	80018e4 <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	2b02      	cmp	r3, #2
 8002022:	d901      	bls.n	8002028 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e19b      	b.n	8002360 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002028:	4b2d      	ldr	r3, [pc, #180]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d0f0      	beq.n	8002016 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002034:	4b2a      	ldr	r3, [pc, #168]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	695b      	ldr	r3, [r3, #20]
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	4927      	ldr	r1, [pc, #156]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 8002044:	4313      	orrs	r3, r2
 8002046:	600b      	str	r3, [r1, #0]
 8002048:	e015      	b.n	8002076 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800204a:	4b26      	ldr	r3, [pc, #152]	; (80020e4 <HAL_RCC_OscConfig+0x270>)
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002050:	f7ff fc48 	bl	80018e4 <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002056:	e008      	b.n	800206a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002058:	f7ff fc44 	bl	80018e4 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b02      	cmp	r3, #2
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e17a      	b.n	8002360 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800206a:	4b1d      	ldr	r3, [pc, #116]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d1f0      	bne.n	8002058 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0308 	and.w	r3, r3, #8
 800207e:	2b00      	cmp	r3, #0
 8002080:	d03a      	beq.n	80020f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d019      	beq.n	80020be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800208a:	4b17      	ldr	r3, [pc, #92]	; (80020e8 <HAL_RCC_OscConfig+0x274>)
 800208c:	2201      	movs	r2, #1
 800208e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002090:	f7ff fc28 	bl	80018e4 <HAL_GetTick>
 8002094:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002098:	f7ff fc24 	bl	80018e4 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e15a      	b.n	8002360 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020aa:	4b0d      	ldr	r3, [pc, #52]	; (80020e0 <HAL_RCC_OscConfig+0x26c>)
 80020ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d0f0      	beq.n	8002098 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80020b6:	2001      	movs	r0, #1
 80020b8:	f000 fad8 	bl	800266c <RCC_Delay>
 80020bc:	e01c      	b.n	80020f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020be:	4b0a      	ldr	r3, [pc, #40]	; (80020e8 <HAL_RCC_OscConfig+0x274>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020c4:	f7ff fc0e 	bl	80018e4 <HAL_GetTick>
 80020c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ca:	e00f      	b.n	80020ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020cc:	f7ff fc0a 	bl	80018e4 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d908      	bls.n	80020ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e140      	b.n	8002360 <HAL_RCC_OscConfig+0x4ec>
 80020de:	bf00      	nop
 80020e0:	40021000 	.word	0x40021000
 80020e4:	42420000 	.word	0x42420000
 80020e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ec:	4b9e      	ldr	r3, [pc, #632]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 80020ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d1e9      	bne.n	80020cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0304 	and.w	r3, r3, #4
 8002100:	2b00      	cmp	r3, #0
 8002102:	f000 80a6 	beq.w	8002252 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002106:	2300      	movs	r3, #0
 8002108:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800210a:	4b97      	ldr	r3, [pc, #604]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 800210c:	69db      	ldr	r3, [r3, #28]
 800210e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d10d      	bne.n	8002132 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002116:	4b94      	ldr	r3, [pc, #592]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 8002118:	69db      	ldr	r3, [r3, #28]
 800211a:	4a93      	ldr	r2, [pc, #588]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 800211c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002120:	61d3      	str	r3, [r2, #28]
 8002122:	4b91      	ldr	r3, [pc, #580]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800212a:	60bb      	str	r3, [r7, #8]
 800212c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800212e:	2301      	movs	r3, #1
 8002130:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002132:	4b8e      	ldr	r3, [pc, #568]	; (800236c <HAL_RCC_OscConfig+0x4f8>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800213a:	2b00      	cmp	r3, #0
 800213c:	d118      	bne.n	8002170 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800213e:	4b8b      	ldr	r3, [pc, #556]	; (800236c <HAL_RCC_OscConfig+0x4f8>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a8a      	ldr	r2, [pc, #552]	; (800236c <HAL_RCC_OscConfig+0x4f8>)
 8002144:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002148:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800214a:	f7ff fbcb 	bl	80018e4 <HAL_GetTick>
 800214e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002150:	e008      	b.n	8002164 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002152:	f7ff fbc7 	bl	80018e4 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b64      	cmp	r3, #100	; 0x64
 800215e:	d901      	bls.n	8002164 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e0fd      	b.n	8002360 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002164:	4b81      	ldr	r3, [pc, #516]	; (800236c <HAL_RCC_OscConfig+0x4f8>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800216c:	2b00      	cmp	r3, #0
 800216e:	d0f0      	beq.n	8002152 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d106      	bne.n	8002186 <HAL_RCC_OscConfig+0x312>
 8002178:	4b7b      	ldr	r3, [pc, #492]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 800217a:	6a1b      	ldr	r3, [r3, #32]
 800217c:	4a7a      	ldr	r2, [pc, #488]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 800217e:	f043 0301 	orr.w	r3, r3, #1
 8002182:	6213      	str	r3, [r2, #32]
 8002184:	e02d      	b.n	80021e2 <HAL_RCC_OscConfig+0x36e>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d10c      	bne.n	80021a8 <HAL_RCC_OscConfig+0x334>
 800218e:	4b76      	ldr	r3, [pc, #472]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 8002190:	6a1b      	ldr	r3, [r3, #32]
 8002192:	4a75      	ldr	r2, [pc, #468]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 8002194:	f023 0301 	bic.w	r3, r3, #1
 8002198:	6213      	str	r3, [r2, #32]
 800219a:	4b73      	ldr	r3, [pc, #460]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 800219c:	6a1b      	ldr	r3, [r3, #32]
 800219e:	4a72      	ldr	r2, [pc, #456]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 80021a0:	f023 0304 	bic.w	r3, r3, #4
 80021a4:	6213      	str	r3, [r2, #32]
 80021a6:	e01c      	b.n	80021e2 <HAL_RCC_OscConfig+0x36e>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	2b05      	cmp	r3, #5
 80021ae:	d10c      	bne.n	80021ca <HAL_RCC_OscConfig+0x356>
 80021b0:	4b6d      	ldr	r3, [pc, #436]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 80021b2:	6a1b      	ldr	r3, [r3, #32]
 80021b4:	4a6c      	ldr	r2, [pc, #432]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 80021b6:	f043 0304 	orr.w	r3, r3, #4
 80021ba:	6213      	str	r3, [r2, #32]
 80021bc:	4b6a      	ldr	r3, [pc, #424]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 80021be:	6a1b      	ldr	r3, [r3, #32]
 80021c0:	4a69      	ldr	r2, [pc, #420]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 80021c2:	f043 0301 	orr.w	r3, r3, #1
 80021c6:	6213      	str	r3, [r2, #32]
 80021c8:	e00b      	b.n	80021e2 <HAL_RCC_OscConfig+0x36e>
 80021ca:	4b67      	ldr	r3, [pc, #412]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 80021cc:	6a1b      	ldr	r3, [r3, #32]
 80021ce:	4a66      	ldr	r2, [pc, #408]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 80021d0:	f023 0301 	bic.w	r3, r3, #1
 80021d4:	6213      	str	r3, [r2, #32]
 80021d6:	4b64      	ldr	r3, [pc, #400]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 80021d8:	6a1b      	ldr	r3, [r3, #32]
 80021da:	4a63      	ldr	r2, [pc, #396]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 80021dc:	f023 0304 	bic.w	r3, r3, #4
 80021e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d015      	beq.n	8002216 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ea:	f7ff fb7b 	bl	80018e4 <HAL_GetTick>
 80021ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021f0:	e00a      	b.n	8002208 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021f2:	f7ff fb77 	bl	80018e4 <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002200:	4293      	cmp	r3, r2
 8002202:	d901      	bls.n	8002208 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e0ab      	b.n	8002360 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002208:	4b57      	ldr	r3, [pc, #348]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 800220a:	6a1b      	ldr	r3, [r3, #32]
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d0ee      	beq.n	80021f2 <HAL_RCC_OscConfig+0x37e>
 8002214:	e014      	b.n	8002240 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002216:	f7ff fb65 	bl	80018e4 <HAL_GetTick>
 800221a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800221c:	e00a      	b.n	8002234 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800221e:	f7ff fb61 	bl	80018e4 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	f241 3288 	movw	r2, #5000	; 0x1388
 800222c:	4293      	cmp	r3, r2
 800222e:	d901      	bls.n	8002234 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e095      	b.n	8002360 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002234:	4b4c      	ldr	r3, [pc, #304]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 8002236:	6a1b      	ldr	r3, [r3, #32]
 8002238:	f003 0302 	and.w	r3, r3, #2
 800223c:	2b00      	cmp	r3, #0
 800223e:	d1ee      	bne.n	800221e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002240:	7dfb      	ldrb	r3, [r7, #23]
 8002242:	2b01      	cmp	r3, #1
 8002244:	d105      	bne.n	8002252 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002246:	4b48      	ldr	r3, [pc, #288]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 8002248:	69db      	ldr	r3, [r3, #28]
 800224a:	4a47      	ldr	r2, [pc, #284]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 800224c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002250:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	69db      	ldr	r3, [r3, #28]
 8002256:	2b00      	cmp	r3, #0
 8002258:	f000 8081 	beq.w	800235e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800225c:	4b42      	ldr	r3, [pc, #264]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f003 030c 	and.w	r3, r3, #12
 8002264:	2b08      	cmp	r3, #8
 8002266:	d061      	beq.n	800232c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	69db      	ldr	r3, [r3, #28]
 800226c:	2b02      	cmp	r3, #2
 800226e:	d146      	bne.n	80022fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002270:	4b3f      	ldr	r3, [pc, #252]	; (8002370 <HAL_RCC_OscConfig+0x4fc>)
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002276:	f7ff fb35 	bl	80018e4 <HAL_GetTick>
 800227a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800227c:	e008      	b.n	8002290 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800227e:	f7ff fb31 	bl	80018e4 <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d901      	bls.n	8002290 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e067      	b.n	8002360 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002290:	4b35      	ldr	r3, [pc, #212]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d1f0      	bne.n	800227e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a1b      	ldr	r3, [r3, #32]
 80022a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022a4:	d108      	bne.n	80022b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022a6:	4b30      	ldr	r3, [pc, #192]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	492d      	ldr	r1, [pc, #180]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022b8:	4b2b      	ldr	r3, [pc, #172]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a19      	ldr	r1, [r3, #32]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c8:	430b      	orrs	r3, r1
 80022ca:	4927      	ldr	r1, [pc, #156]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022d0:	4b27      	ldr	r3, [pc, #156]	; (8002370 <HAL_RCC_OscConfig+0x4fc>)
 80022d2:	2201      	movs	r2, #1
 80022d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d6:	f7ff fb05 	bl	80018e4 <HAL_GetTick>
 80022da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022dc:	e008      	b.n	80022f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022de:	f7ff fb01 	bl	80018e4 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e037      	b.n	8002360 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022f0:	4b1d      	ldr	r3, [pc, #116]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d0f0      	beq.n	80022de <HAL_RCC_OscConfig+0x46a>
 80022fc:	e02f      	b.n	800235e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022fe:	4b1c      	ldr	r3, [pc, #112]	; (8002370 <HAL_RCC_OscConfig+0x4fc>)
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002304:	f7ff faee 	bl	80018e4 <HAL_GetTick>
 8002308:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800230a:	e008      	b.n	800231e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800230c:	f7ff faea 	bl	80018e4 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b02      	cmp	r3, #2
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e020      	b.n	8002360 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800231e:	4b12      	ldr	r3, [pc, #72]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1f0      	bne.n	800230c <HAL_RCC_OscConfig+0x498>
 800232a:	e018      	b.n	800235e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	69db      	ldr	r3, [r3, #28]
 8002330:	2b01      	cmp	r3, #1
 8002332:	d101      	bne.n	8002338 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e013      	b.n	8002360 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002338:	4b0b      	ldr	r3, [pc, #44]	; (8002368 <HAL_RCC_OscConfig+0x4f4>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a1b      	ldr	r3, [r3, #32]
 8002348:	429a      	cmp	r2, r3
 800234a:	d106      	bne.n	800235a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002356:	429a      	cmp	r2, r3
 8002358:	d001      	beq.n	800235e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e000      	b.n	8002360 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	3718      	adds	r7, #24
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40021000 	.word	0x40021000
 800236c:	40007000 	.word	0x40007000
 8002370:	42420060 	.word	0x42420060

08002374 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d101      	bne.n	8002388 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e0d0      	b.n	800252a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002388:	4b6a      	ldr	r3, [pc, #424]	; (8002534 <HAL_RCC_ClockConfig+0x1c0>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0307 	and.w	r3, r3, #7
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	429a      	cmp	r2, r3
 8002394:	d910      	bls.n	80023b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002396:	4b67      	ldr	r3, [pc, #412]	; (8002534 <HAL_RCC_ClockConfig+0x1c0>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f023 0207 	bic.w	r2, r3, #7
 800239e:	4965      	ldr	r1, [pc, #404]	; (8002534 <HAL_RCC_ClockConfig+0x1c0>)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023a6:	4b63      	ldr	r3, [pc, #396]	; (8002534 <HAL_RCC_ClockConfig+0x1c0>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0307 	and.w	r3, r3, #7
 80023ae:	683a      	ldr	r2, [r7, #0]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d001      	beq.n	80023b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e0b8      	b.n	800252a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d020      	beq.n	8002406 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0304 	and.w	r3, r3, #4
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d005      	beq.n	80023dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023d0:	4b59      	ldr	r3, [pc, #356]	; (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	4a58      	ldr	r2, [pc, #352]	; (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 80023d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0308 	and.w	r3, r3, #8
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d005      	beq.n	80023f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023e8:	4b53      	ldr	r3, [pc, #332]	; (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	4a52      	ldr	r2, [pc, #328]	; (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 80023ee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80023f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023f4:	4b50      	ldr	r3, [pc, #320]	; (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	494d      	ldr	r1, [pc, #308]	; (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 8002402:	4313      	orrs	r3, r2
 8002404:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	d040      	beq.n	8002494 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d107      	bne.n	800242a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800241a:	4b47      	ldr	r3, [pc, #284]	; (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d115      	bne.n	8002452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e07f      	b.n	800252a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	2b02      	cmp	r3, #2
 8002430:	d107      	bne.n	8002442 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002432:	4b41      	ldr	r3, [pc, #260]	; (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d109      	bne.n	8002452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e073      	b.n	800252a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002442:	4b3d      	ldr	r3, [pc, #244]	; (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d101      	bne.n	8002452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e06b      	b.n	800252a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002452:	4b39      	ldr	r3, [pc, #228]	; (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f023 0203 	bic.w	r2, r3, #3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	4936      	ldr	r1, [pc, #216]	; (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 8002460:	4313      	orrs	r3, r2
 8002462:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002464:	f7ff fa3e 	bl	80018e4 <HAL_GetTick>
 8002468:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800246a:	e00a      	b.n	8002482 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800246c:	f7ff fa3a 	bl	80018e4 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	f241 3288 	movw	r2, #5000	; 0x1388
 800247a:	4293      	cmp	r3, r2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e053      	b.n	800252a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002482:	4b2d      	ldr	r3, [pc, #180]	; (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f003 020c 	and.w	r2, r3, #12
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	429a      	cmp	r2, r3
 8002492:	d1eb      	bne.n	800246c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002494:	4b27      	ldr	r3, [pc, #156]	; (8002534 <HAL_RCC_ClockConfig+0x1c0>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0307 	and.w	r3, r3, #7
 800249c:	683a      	ldr	r2, [r7, #0]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d210      	bcs.n	80024c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024a2:	4b24      	ldr	r3, [pc, #144]	; (8002534 <HAL_RCC_ClockConfig+0x1c0>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f023 0207 	bic.w	r2, r3, #7
 80024aa:	4922      	ldr	r1, [pc, #136]	; (8002534 <HAL_RCC_ClockConfig+0x1c0>)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024b2:	4b20      	ldr	r3, [pc, #128]	; (8002534 <HAL_RCC_ClockConfig+0x1c0>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0307 	and.w	r3, r3, #7
 80024ba:	683a      	ldr	r2, [r7, #0]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d001      	beq.n	80024c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e032      	b.n	800252a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0304 	and.w	r3, r3, #4
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d008      	beq.n	80024e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024d0:	4b19      	ldr	r3, [pc, #100]	; (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	4916      	ldr	r1, [pc, #88]	; (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0308 	and.w	r3, r3, #8
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d009      	beq.n	8002502 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024ee:	4b12      	ldr	r3, [pc, #72]	; (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	490e      	ldr	r1, [pc, #56]	; (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002502:	f000 f821 	bl	8002548 <HAL_RCC_GetSysClockFreq>
 8002506:	4602      	mov	r2, r0
 8002508:	4b0b      	ldr	r3, [pc, #44]	; (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	091b      	lsrs	r3, r3, #4
 800250e:	f003 030f 	and.w	r3, r3, #15
 8002512:	490a      	ldr	r1, [pc, #40]	; (800253c <HAL_RCC_ClockConfig+0x1c8>)
 8002514:	5ccb      	ldrb	r3, [r1, r3]
 8002516:	fa22 f303 	lsr.w	r3, r2, r3
 800251a:	4a09      	ldr	r2, [pc, #36]	; (8002540 <HAL_RCC_ClockConfig+0x1cc>)
 800251c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800251e:	4b09      	ldr	r3, [pc, #36]	; (8002544 <HAL_RCC_ClockConfig+0x1d0>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f7ff f99c 	bl	8001860 <HAL_InitTick>

  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	40022000 	.word	0x40022000
 8002538:	40021000 	.word	0x40021000
 800253c:	08004344 	.word	0x08004344
 8002540:	20000008 	.word	0x20000008
 8002544:	2000000c 	.word	0x2000000c

08002548 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002548:	b490      	push	{r4, r7}
 800254a:	b08a      	sub	sp, #40	; 0x28
 800254c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800254e:	4b2a      	ldr	r3, [pc, #168]	; (80025f8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002550:	1d3c      	adds	r4, r7, #4
 8002552:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002554:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002558:	f240 2301 	movw	r3, #513	; 0x201
 800255c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800255e:	2300      	movs	r3, #0
 8002560:	61fb      	str	r3, [r7, #28]
 8002562:	2300      	movs	r3, #0
 8002564:	61bb      	str	r3, [r7, #24]
 8002566:	2300      	movs	r3, #0
 8002568:	627b      	str	r3, [r7, #36]	; 0x24
 800256a:	2300      	movs	r3, #0
 800256c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800256e:	2300      	movs	r3, #0
 8002570:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002572:	4b22      	ldr	r3, [pc, #136]	; (80025fc <HAL_RCC_GetSysClockFreq+0xb4>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	f003 030c 	and.w	r3, r3, #12
 800257e:	2b04      	cmp	r3, #4
 8002580:	d002      	beq.n	8002588 <HAL_RCC_GetSysClockFreq+0x40>
 8002582:	2b08      	cmp	r3, #8
 8002584:	d003      	beq.n	800258e <HAL_RCC_GetSysClockFreq+0x46>
 8002586:	e02d      	b.n	80025e4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002588:	4b1d      	ldr	r3, [pc, #116]	; (8002600 <HAL_RCC_GetSysClockFreq+0xb8>)
 800258a:	623b      	str	r3, [r7, #32]
      break;
 800258c:	e02d      	b.n	80025ea <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	0c9b      	lsrs	r3, r3, #18
 8002592:	f003 030f 	and.w	r3, r3, #15
 8002596:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800259a:	4413      	add	r3, r2
 800259c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80025a0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d013      	beq.n	80025d4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025ac:	4b13      	ldr	r3, [pc, #76]	; (80025fc <HAL_RCC_GetSysClockFreq+0xb4>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	0c5b      	lsrs	r3, r3, #17
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80025ba:	4413      	add	r3, r2
 80025bc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80025c0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	4a0e      	ldr	r2, [pc, #56]	; (8002600 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025c6:	fb02 f203 	mul.w	r2, r2, r3
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d0:	627b      	str	r3, [r7, #36]	; 0x24
 80025d2:	e004      	b.n	80025de <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	4a0b      	ldr	r2, [pc, #44]	; (8002604 <HAL_RCC_GetSysClockFreq+0xbc>)
 80025d8:	fb02 f303 	mul.w	r3, r2, r3
 80025dc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80025de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e0:	623b      	str	r3, [r7, #32]
      break;
 80025e2:	e002      	b.n	80025ea <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025e4:	4b06      	ldr	r3, [pc, #24]	; (8002600 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025e6:	623b      	str	r3, [r7, #32]
      break;
 80025e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025ea:	6a3b      	ldr	r3, [r7, #32]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3728      	adds	r7, #40	; 0x28
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bc90      	pop	{r4, r7}
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	08004324 	.word	0x08004324
 80025fc:	40021000 	.word	0x40021000
 8002600:	007a1200 	.word	0x007a1200
 8002604:	003d0900 	.word	0x003d0900

08002608 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800260c:	4b02      	ldr	r3, [pc, #8]	; (8002618 <HAL_RCC_GetHCLKFreq+0x10>)
 800260e:	681b      	ldr	r3, [r3, #0]
}
 8002610:	4618      	mov	r0, r3
 8002612:	46bd      	mov	sp, r7
 8002614:	bc80      	pop	{r7}
 8002616:	4770      	bx	lr
 8002618:	20000008 	.word	0x20000008

0800261c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002620:	f7ff fff2 	bl	8002608 <HAL_RCC_GetHCLKFreq>
 8002624:	4602      	mov	r2, r0
 8002626:	4b05      	ldr	r3, [pc, #20]	; (800263c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	0a1b      	lsrs	r3, r3, #8
 800262c:	f003 0307 	and.w	r3, r3, #7
 8002630:	4903      	ldr	r1, [pc, #12]	; (8002640 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002632:	5ccb      	ldrb	r3, [r1, r3]
 8002634:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002638:	4618      	mov	r0, r3
 800263a:	bd80      	pop	{r7, pc}
 800263c:	40021000 	.word	0x40021000
 8002640:	08004354 	.word	0x08004354

08002644 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002648:	f7ff ffde 	bl	8002608 <HAL_RCC_GetHCLKFreq>
 800264c:	4602      	mov	r2, r0
 800264e:	4b05      	ldr	r3, [pc, #20]	; (8002664 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	0adb      	lsrs	r3, r3, #11
 8002654:	f003 0307 	and.w	r3, r3, #7
 8002658:	4903      	ldr	r1, [pc, #12]	; (8002668 <HAL_RCC_GetPCLK2Freq+0x24>)
 800265a:	5ccb      	ldrb	r3, [r1, r3]
 800265c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002660:	4618      	mov	r0, r3
 8002662:	bd80      	pop	{r7, pc}
 8002664:	40021000 	.word	0x40021000
 8002668:	08004354 	.word	0x08004354

0800266c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002674:	4b0a      	ldr	r3, [pc, #40]	; (80026a0 <RCC_Delay+0x34>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a0a      	ldr	r2, [pc, #40]	; (80026a4 <RCC_Delay+0x38>)
 800267a:	fba2 2303 	umull	r2, r3, r2, r3
 800267e:	0a5b      	lsrs	r3, r3, #9
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	fb02 f303 	mul.w	r3, r2, r3
 8002686:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002688:	bf00      	nop
  }
  while (Delay --);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	1e5a      	subs	r2, r3, #1
 800268e:	60fa      	str	r2, [r7, #12]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1f9      	bne.n	8002688 <RCC_Delay+0x1c>
}
 8002694:	bf00      	nop
 8002696:	bf00      	nop
 8002698:	3714      	adds	r7, #20
 800269a:	46bd      	mov	sp, r7
 800269c:	bc80      	pop	{r7}
 800269e:	4770      	bx	lr
 80026a0:	20000008 	.word	0x20000008
 80026a4:	10624dd3 	.word	0x10624dd3

080026a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d101      	bne.n	80026ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e076      	b.n	80027a8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d108      	bne.n	80026d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026ca:	d009      	beq.n	80026e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	61da      	str	r2, [r3, #28]
 80026d2:	e005      	b.n	80026e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d106      	bne.n	8002700 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f7fe ff7c 	bl	80015f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2202      	movs	r2, #2
 8002704:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002716:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002728:	431a      	orrs	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002732:	431a      	orrs	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	f003 0302 	and.w	r3, r3, #2
 800273c:	431a      	orrs	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	695b      	ldr	r3, [r3, #20]
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	431a      	orrs	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002750:	431a      	orrs	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	69db      	ldr	r3, [r3, #28]
 8002756:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800275a:	431a      	orrs	r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a1b      	ldr	r3, [r3, #32]
 8002760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002764:	ea42 0103 	orr.w	r1, r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	430a      	orrs	r2, r1
 8002776:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	0c1a      	lsrs	r2, r3, #16
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f002 0204 	and.w	r2, r2, #4
 8002786:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	69da      	ldr	r2, [r3, #28]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002796:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3708      	adds	r7, #8
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b088      	sub	sp, #32
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	603b      	str	r3, [r7, #0]
 80027bc:	4613      	mov	r3, r2
 80027be:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80027c0:	2300      	movs	r3, #0
 80027c2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d101      	bne.n	80027d2 <HAL_SPI_Transmit+0x22>
 80027ce:	2302      	movs	r3, #2
 80027d0:	e126      	b.n	8002a20 <HAL_SPI_Transmit+0x270>
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2201      	movs	r2, #1
 80027d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027da:	f7ff f883 	bl	80018e4 <HAL_GetTick>
 80027de:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80027e0:	88fb      	ldrh	r3, [r7, #6]
 80027e2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d002      	beq.n	80027f6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80027f0:	2302      	movs	r3, #2
 80027f2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80027f4:	e10b      	b.n	8002a0e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d002      	beq.n	8002802 <HAL_SPI_Transmit+0x52>
 80027fc:	88fb      	ldrh	r3, [r7, #6]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d102      	bne.n	8002808 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002806:	e102      	b.n	8002a0e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2203      	movs	r2, #3
 800280c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2200      	movs	r2, #0
 8002814:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	68ba      	ldr	r2, [r7, #8]
 800281a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	88fa      	ldrh	r2, [r7, #6]
 8002820:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	88fa      	ldrh	r2, [r7, #6]
 8002826:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2200      	movs	r2, #0
 800282c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2200      	movs	r2, #0
 8002838:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2200      	movs	r2, #0
 800283e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2200      	movs	r2, #0
 8002844:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800284e:	d10f      	bne.n	8002870 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800285e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800286e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800287a:	2b40      	cmp	r3, #64	; 0x40
 800287c:	d007      	beq.n	800288e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800288c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002896:	d14b      	bne.n	8002930 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d002      	beq.n	80028a6 <HAL_SPI_Transmit+0xf6>
 80028a0:	8afb      	ldrh	r3, [r7, #22]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d13e      	bne.n	8002924 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028aa:	881a      	ldrh	r2, [r3, #0]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b6:	1c9a      	adds	r2, r3, #2
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	3b01      	subs	r3, #1
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80028ca:	e02b      	b.n	8002924 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d112      	bne.n	8002900 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028de:	881a      	ldrh	r2, [r3, #0]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ea:	1c9a      	adds	r2, r3, #2
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	3b01      	subs	r3, #1
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	86da      	strh	r2, [r3, #54]	; 0x36
 80028fe:	e011      	b.n	8002924 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002900:	f7fe fff0 	bl	80018e4 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	683a      	ldr	r2, [r7, #0]
 800290c:	429a      	cmp	r2, r3
 800290e:	d803      	bhi.n	8002918 <HAL_SPI_Transmit+0x168>
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002916:	d102      	bne.n	800291e <HAL_SPI_Transmit+0x16e>
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d102      	bne.n	8002924 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002922:	e074      	b.n	8002a0e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002928:	b29b      	uxth	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1ce      	bne.n	80028cc <HAL_SPI_Transmit+0x11c>
 800292e:	e04c      	b.n	80029ca <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d002      	beq.n	800293e <HAL_SPI_Transmit+0x18e>
 8002938:	8afb      	ldrh	r3, [r7, #22]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d140      	bne.n	80029c0 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	330c      	adds	r3, #12
 8002948:	7812      	ldrb	r2, [r2, #0]
 800294a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002950:	1c5a      	adds	r2, r3, #1
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800295a:	b29b      	uxth	r3, r3
 800295c:	3b01      	subs	r3, #1
 800295e:	b29a      	uxth	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002964:	e02c      	b.n	80029c0 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	2b02      	cmp	r3, #2
 8002972:	d113      	bne.n	800299c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	330c      	adds	r3, #12
 800297e:	7812      	ldrb	r2, [r2, #0]
 8002980:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002986:	1c5a      	adds	r2, r3, #1
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002990:	b29b      	uxth	r3, r3
 8002992:	3b01      	subs	r3, #1
 8002994:	b29a      	uxth	r2, r3
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	86da      	strh	r2, [r3, #54]	; 0x36
 800299a:	e011      	b.n	80029c0 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800299c:	f7fe ffa2 	bl	80018e4 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d803      	bhi.n	80029b4 <HAL_SPI_Transmit+0x204>
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b2:	d102      	bne.n	80029ba <HAL_SPI_Transmit+0x20a>
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d102      	bne.n	80029c0 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80029be:	e026      	b.n	8002a0e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1cd      	bne.n	8002966 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	6839      	ldr	r1, [r7, #0]
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f000 fbb8 	bl	8003144 <SPI_EndRxTxTransaction>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d002      	beq.n	80029e0 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2220      	movs	r2, #32
 80029de:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d10a      	bne.n	80029fe <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029e8:	2300      	movs	r3, #0
 80029ea:	613b      	str	r3, [r7, #16]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	613b      	str	r3, [r7, #16]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	613b      	str	r3, [r7, #16]
 80029fc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d002      	beq.n	8002a0c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	77fb      	strb	r3, [r7, #31]
 8002a0a:	e000      	b.n	8002a0e <HAL_SPI_Transmit+0x25e>
  }

error:
 8002a0c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2201      	movs	r2, #1
 8002a12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002a1e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3720      	adds	r7, #32
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b088      	sub	sp, #32
 8002a2c:	af02      	add	r7, sp, #8
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	603b      	str	r3, [r7, #0]
 8002a34:	4613      	mov	r3, r2
 8002a36:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a44:	d112      	bne.n	8002a6c <HAL_SPI_Receive+0x44>
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d10e      	bne.n	8002a6c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2204      	movs	r2, #4
 8002a52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002a56:	88fa      	ldrh	r2, [r7, #6]
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	9300      	str	r3, [sp, #0]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	68ba      	ldr	r2, [r7, #8]
 8002a60:	68b9      	ldr	r1, [r7, #8]
 8002a62:	68f8      	ldr	r0, [r7, #12]
 8002a64:	f000 f8f1 	bl	8002c4a <HAL_SPI_TransmitReceive>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	e0ea      	b.n	8002c42 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d101      	bne.n	8002a7a <HAL_SPI_Receive+0x52>
 8002a76:	2302      	movs	r3, #2
 8002a78:	e0e3      	b.n	8002c42 <HAL_SPI_Receive+0x21a>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a82:	f7fe ff2f 	bl	80018e4 <HAL_GetTick>
 8002a86:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d002      	beq.n	8002a9a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002a94:	2302      	movs	r3, #2
 8002a96:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002a98:	e0ca      	b.n	8002c30 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d002      	beq.n	8002aa6 <HAL_SPI_Receive+0x7e>
 8002aa0:	88fb      	ldrh	r3, [r7, #6]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d102      	bne.n	8002aac <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002aaa:	e0c1      	b.n	8002c30 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2204      	movs	r2, #4
 8002ab0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	68ba      	ldr	r2, [r7, #8]
 8002abe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	88fa      	ldrh	r2, [r7, #6]
 8002ac4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	88fa      	ldrh	r2, [r7, #6]
 8002aca:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2200      	movs	r2, #0
 8002adc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002af2:	d10f      	bne.n	8002b14 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b02:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002b12:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b1e:	2b40      	cmp	r3, #64	; 0x40
 8002b20:	d007      	beq.n	8002b32 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b30:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d162      	bne.n	8002c00 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002b3a:	e02e      	b.n	8002b9a <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d115      	bne.n	8002b76 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f103 020c 	add.w	r2, r3, #12
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b56:	7812      	ldrb	r2, [r2, #0]
 8002b58:	b2d2      	uxtb	r2, r2
 8002b5a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b60:	1c5a      	adds	r2, r3, #1
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	b29a      	uxth	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002b74:	e011      	b.n	8002b9a <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b76:	f7fe feb5 	bl	80018e4 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d803      	bhi.n	8002b8e <HAL_SPI_Receive+0x166>
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b8c:	d102      	bne.n	8002b94 <HAL_SPI_Receive+0x16c>
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d102      	bne.n	8002b9a <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002b98:	e04a      	b.n	8002c30 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d1cb      	bne.n	8002b3c <HAL_SPI_Receive+0x114>
 8002ba4:	e031      	b.n	8002c0a <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d113      	bne.n	8002bdc <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68da      	ldr	r2, [r3, #12]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bbe:	b292      	uxth	r2, r2
 8002bc0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc6:	1c9a      	adds	r2, r3, #2
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	b29a      	uxth	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002bda:	e011      	b.n	8002c00 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002bdc:	f7fe fe82 	bl	80018e4 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	683a      	ldr	r2, [r7, #0]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d803      	bhi.n	8002bf4 <HAL_SPI_Receive+0x1cc>
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bf2:	d102      	bne.n	8002bfa <HAL_SPI_Receive+0x1d2>
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d102      	bne.n	8002c00 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002bfe:	e017      	b.n	8002c30 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1cd      	bne.n	8002ba6 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	6839      	ldr	r1, [r7, #0]
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f000 fa46 	bl	80030a0 <SPI_EndRxTransaction>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d002      	beq.n	8002c20 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2220      	movs	r2, #32
 8002c1e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d002      	beq.n	8002c2e <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	75fb      	strb	r3, [r7, #23]
 8002c2c:	e000      	b.n	8002c30 <HAL_SPI_Receive+0x208>
  }

error :
 8002c2e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002c40:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3718      	adds	r7, #24
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b08c      	sub	sp, #48	; 0x30
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	60f8      	str	r0, [r7, #12]
 8002c52:	60b9      	str	r1, [r7, #8]
 8002c54:	607a      	str	r2, [r7, #4]
 8002c56:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d101      	bne.n	8002c70 <HAL_SPI_TransmitReceive+0x26>
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	e18a      	b.n	8002f86 <HAL_SPI_TransmitReceive+0x33c>
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c78:	f7fe fe34 	bl	80018e4 <HAL_GetTick>
 8002c7c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002c8e:	887b      	ldrh	r3, [r7, #2]
 8002c90:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002c92:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d00f      	beq.n	8002cba <HAL_SPI_TransmitReceive+0x70>
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ca0:	d107      	bne.n	8002cb2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d103      	bne.n	8002cb2 <HAL_SPI_TransmitReceive+0x68>
 8002caa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002cae:	2b04      	cmp	r3, #4
 8002cb0:	d003      	beq.n	8002cba <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002cb8:	e15b      	b.n	8002f72 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d005      	beq.n	8002ccc <HAL_SPI_TransmitReceive+0x82>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d002      	beq.n	8002ccc <HAL_SPI_TransmitReceive+0x82>
 8002cc6:	887b      	ldrh	r3, [r7, #2]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d103      	bne.n	8002cd4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002cd2:	e14e      	b.n	8002f72 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	2b04      	cmp	r3, #4
 8002cde:	d003      	beq.n	8002ce8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2205      	movs	r2, #5
 8002ce4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2200      	movs	r2, #0
 8002cec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	887a      	ldrh	r2, [r7, #2]
 8002cf8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	887a      	ldrh	r2, [r7, #2]
 8002cfe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	68ba      	ldr	r2, [r7, #8]
 8002d04:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	887a      	ldrh	r2, [r7, #2]
 8002d0a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	887a      	ldrh	r2, [r7, #2]
 8002d10:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2200      	movs	r2, #0
 8002d16:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d28:	2b40      	cmp	r3, #64	; 0x40
 8002d2a:	d007      	beq.n	8002d3c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d3a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d44:	d178      	bne.n	8002e38 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d002      	beq.n	8002d54 <HAL_SPI_TransmitReceive+0x10a>
 8002d4e:	8b7b      	ldrh	r3, [r7, #26]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d166      	bne.n	8002e22 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d58:	881a      	ldrh	r2, [r3, #0]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d64:	1c9a      	adds	r2, r3, #2
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	3b01      	subs	r3, #1
 8002d72:	b29a      	uxth	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d78:	e053      	b.n	8002e22 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d11b      	bne.n	8002dc0 <HAL_SPI_TransmitReceive+0x176>
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d016      	beq.n	8002dc0 <HAL_SPI_TransmitReceive+0x176>
 8002d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d113      	bne.n	8002dc0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9c:	881a      	ldrh	r2, [r3, #0]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da8:	1c9a      	adds	r2, r3, #2
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	3b01      	subs	r3, #1
 8002db6:	b29a      	uxth	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d119      	bne.n	8002e02 <HAL_SPI_TransmitReceive+0x1b8>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d014      	beq.n	8002e02 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68da      	ldr	r2, [r3, #12]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de2:	b292      	uxth	r2, r2
 8002de4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dea:	1c9a      	adds	r2, r3, #2
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	3b01      	subs	r3, #1
 8002df8:	b29a      	uxth	r2, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002e02:	f7fe fd6f 	bl	80018e4 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d807      	bhi.n	8002e22 <HAL_SPI_TransmitReceive+0x1d8>
 8002e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e18:	d003      	beq.n	8002e22 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002e20:	e0a7      	b.n	8002f72 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1a6      	bne.n	8002d7a <HAL_SPI_TransmitReceive+0x130>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1a1      	bne.n	8002d7a <HAL_SPI_TransmitReceive+0x130>
 8002e36:	e07c      	b.n	8002f32 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d002      	beq.n	8002e46 <HAL_SPI_TransmitReceive+0x1fc>
 8002e40:	8b7b      	ldrh	r3, [r7, #26]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d16b      	bne.n	8002f1e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	330c      	adds	r3, #12
 8002e50:	7812      	ldrb	r2, [r2, #0]
 8002e52:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e58:	1c5a      	adds	r2, r3, #1
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	3b01      	subs	r3, #1
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e6c:	e057      	b.n	8002f1e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d11c      	bne.n	8002eb6 <HAL_SPI_TransmitReceive+0x26c>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d017      	beq.n	8002eb6 <HAL_SPI_TransmitReceive+0x26c>
 8002e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d114      	bne.n	8002eb6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	330c      	adds	r3, #12
 8002e96:	7812      	ldrb	r2, [r2, #0]
 8002e98:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9e:	1c5a      	adds	r2, r3, #1
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f003 0301 	and.w	r3, r3, #1
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d119      	bne.n	8002ef8 <HAL_SPI_TransmitReceive+0x2ae>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d014      	beq.n	8002ef8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68da      	ldr	r2, [r3, #12]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed8:	b2d2      	uxtb	r2, r2
 8002eda:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee0:	1c5a      	adds	r2, r3, #1
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	3b01      	subs	r3, #1
 8002eee:	b29a      	uxth	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002ef8:	f7fe fcf4 	bl	80018e4 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d803      	bhi.n	8002f10 <HAL_SPI_TransmitReceive+0x2c6>
 8002f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f0e:	d102      	bne.n	8002f16 <HAL_SPI_TransmitReceive+0x2cc>
 8002f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d103      	bne.n	8002f1e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002f1c:	e029      	b.n	8002f72 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d1a2      	bne.n	8002e6e <HAL_SPI_TransmitReceive+0x224>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d19d      	bne.n	8002e6e <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f34:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f000 f904 	bl	8003144 <SPI_EndRxTxTransaction>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d006      	beq.n	8002f50 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002f4e:	e010      	b.n	8002f72 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d10b      	bne.n	8002f70 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f58:	2300      	movs	r3, #0
 8002f5a:	617b      	str	r3, [r7, #20]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	617b      	str	r3, [r7, #20]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	617b      	str	r3, [r7, #20]
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	e000      	b.n	8002f72 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002f70:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2201      	movs	r2, #1
 8002f76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002f82:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3730      	adds	r7, #48	; 0x30
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
	...

08002f90 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b088      	sub	sp, #32
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	603b      	str	r3, [r7, #0]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002fa0:	f7fe fca0 	bl	80018e4 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa8:	1a9b      	subs	r3, r3, r2
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	4413      	add	r3, r2
 8002fae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002fb0:	f7fe fc98 	bl	80018e4 <HAL_GetTick>
 8002fb4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002fb6:	4b39      	ldr	r3, [pc, #228]	; (800309c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	015b      	lsls	r3, r3, #5
 8002fbc:	0d1b      	lsrs	r3, r3, #20
 8002fbe:	69fa      	ldr	r2, [r7, #28]
 8002fc0:	fb02 f303 	mul.w	r3, r2, r3
 8002fc4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002fc6:	e054      	b.n	8003072 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fce:	d050      	beq.n	8003072 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002fd0:	f7fe fc88 	bl	80018e4 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	69fa      	ldr	r2, [r7, #28]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d902      	bls.n	8002fe6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d13d      	bne.n	8003062 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	685a      	ldr	r2, [r3, #4]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002ff4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ffe:	d111      	bne.n	8003024 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003008:	d004      	beq.n	8003014 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003012:	d107      	bne.n	8003024 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003022:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003028:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800302c:	d10f      	bne.n	800304e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800303c:	601a      	str	r2, [r3, #0]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800304c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e017      	b.n	8003092 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d101      	bne.n	800306c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003068:	2300      	movs	r3, #0
 800306a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	3b01      	subs	r3, #1
 8003070:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	689a      	ldr	r2, [r3, #8]
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	4013      	ands	r3, r2
 800307c:	68ba      	ldr	r2, [r7, #8]
 800307e:	429a      	cmp	r2, r3
 8003080:	bf0c      	ite	eq
 8003082:	2301      	moveq	r3, #1
 8003084:	2300      	movne	r3, #0
 8003086:	b2db      	uxtb	r3, r3
 8003088:	461a      	mov	r2, r3
 800308a:	79fb      	ldrb	r3, [r7, #7]
 800308c:	429a      	cmp	r2, r3
 800308e:	d19b      	bne.n	8002fc8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3720      	adds	r7, #32
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	20000008 	.word	0x20000008

080030a0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b086      	sub	sp, #24
 80030a4:	af02      	add	r7, sp, #8
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030b4:	d111      	bne.n	80030da <SPI_EndRxTransaction+0x3a>
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030be:	d004      	beq.n	80030ca <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030c8:	d107      	bne.n	80030da <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030d8:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030e2:	d117      	bne.n	8003114 <SPI_EndRxTransaction+0x74>
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030ec:	d112      	bne.n	8003114 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	9300      	str	r3, [sp, #0]
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	2200      	movs	r2, #0
 80030f6:	2101      	movs	r1, #1
 80030f8:	68f8      	ldr	r0, [r7, #12]
 80030fa:	f7ff ff49 	bl	8002f90 <SPI_WaitFlagStateUntilTimeout>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d01a      	beq.n	800313a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003108:	f043 0220 	orr.w	r2, r3, #32
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e013      	b.n	800313c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	9300      	str	r3, [sp, #0]
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	2200      	movs	r2, #0
 800311c:	2180      	movs	r1, #128	; 0x80
 800311e:	68f8      	ldr	r0, [r7, #12]
 8003120:	f7ff ff36 	bl	8002f90 <SPI_WaitFlagStateUntilTimeout>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d007      	beq.n	800313a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800312e:	f043 0220 	orr.w	r2, r3, #32
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e000      	b.n	800313c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800313a:	2300      	movs	r3, #0
}
 800313c:	4618      	mov	r0, r3
 800313e:	3710      	adds	r7, #16
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af02      	add	r7, sp, #8
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	9300      	str	r3, [sp, #0]
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	2200      	movs	r2, #0
 8003158:	2180      	movs	r1, #128	; 0x80
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f7ff ff18 	bl	8002f90 <SPI_WaitFlagStateUntilTimeout>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d007      	beq.n	8003176 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800316a:	f043 0220 	orr.w	r2, r3, #32
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e000      	b.n	8003178 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3710      	adds	r7, #16
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d101      	bne.n	8003192 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e03f      	b.n	8003212 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b00      	cmp	r3, #0
 800319c:	d106      	bne.n	80031ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f7fe fa70 	bl	800168c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2224      	movs	r2, #36	; 0x24
 80031b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68da      	ldr	r2, [r3, #12]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f000 f905 	bl	80033d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	691a      	ldr	r2, [r3, #16]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	695a      	ldr	r2, [r3, #20]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	68da      	ldr	r2, [r3, #12]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2220      	movs	r2, #32
 8003204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2220      	movs	r2, #32
 800320c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3708      	adds	r7, #8
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b08a      	sub	sp, #40	; 0x28
 800321e:	af02      	add	r7, sp, #8
 8003220:	60f8      	str	r0, [r7, #12]
 8003222:	60b9      	str	r1, [r7, #8]
 8003224:	603b      	str	r3, [r7, #0]
 8003226:	4613      	mov	r3, r2
 8003228:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800322a:	2300      	movs	r3, #0
 800322c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2b20      	cmp	r3, #32
 8003238:	d17c      	bne.n	8003334 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d002      	beq.n	8003246 <HAL_UART_Transmit+0x2c>
 8003240:	88fb      	ldrh	r3, [r7, #6]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d101      	bne.n	800324a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e075      	b.n	8003336 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003250:	2b01      	cmp	r3, #1
 8003252:	d101      	bne.n	8003258 <HAL_UART_Transmit+0x3e>
 8003254:	2302      	movs	r3, #2
 8003256:	e06e      	b.n	8003336 <HAL_UART_Transmit+0x11c>
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2200      	movs	r2, #0
 8003264:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2221      	movs	r2, #33	; 0x21
 800326a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800326e:	f7fe fb39 	bl	80018e4 <HAL_GetTick>
 8003272:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	88fa      	ldrh	r2, [r7, #6]
 8003278:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	88fa      	ldrh	r2, [r7, #6]
 800327e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003288:	d108      	bne.n	800329c <HAL_UART_Transmit+0x82>
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d104      	bne.n	800329c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003292:	2300      	movs	r3, #0
 8003294:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	61bb      	str	r3, [r7, #24]
 800329a:	e003      	b.n	80032a4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032a0:	2300      	movs	r3, #0
 80032a2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80032ac:	e02a      	b.n	8003304 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	9300      	str	r3, [sp, #0]
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	2200      	movs	r2, #0
 80032b6:	2180      	movs	r1, #128	; 0x80
 80032b8:	68f8      	ldr	r0, [r7, #12]
 80032ba:	f000 f840 	bl	800333e <UART_WaitOnFlagUntilTimeout>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d001      	beq.n	80032c8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e036      	b.n	8003336 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d10b      	bne.n	80032e6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	881b      	ldrh	r3, [r3, #0]
 80032d2:	461a      	mov	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	3302      	adds	r3, #2
 80032e2:	61bb      	str	r3, [r7, #24]
 80032e4:	e007      	b.n	80032f6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	781a      	ldrb	r2, [r3, #0]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	3301      	adds	r3, #1
 80032f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	3b01      	subs	r3, #1
 80032fe:	b29a      	uxth	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003308:	b29b      	uxth	r3, r3
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1cf      	bne.n	80032ae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	9300      	str	r3, [sp, #0]
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	2200      	movs	r2, #0
 8003316:	2140      	movs	r1, #64	; 0x40
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f000 f810 	bl	800333e <UART_WaitOnFlagUntilTimeout>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d001      	beq.n	8003328 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e006      	b.n	8003336 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2220      	movs	r2, #32
 800332c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003330:	2300      	movs	r3, #0
 8003332:	e000      	b.n	8003336 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003334:	2302      	movs	r3, #2
  }
}
 8003336:	4618      	mov	r0, r3
 8003338:	3720      	adds	r7, #32
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}

0800333e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800333e:	b580      	push	{r7, lr}
 8003340:	b084      	sub	sp, #16
 8003342:	af00      	add	r7, sp, #0
 8003344:	60f8      	str	r0, [r7, #12]
 8003346:	60b9      	str	r1, [r7, #8]
 8003348:	603b      	str	r3, [r7, #0]
 800334a:	4613      	mov	r3, r2
 800334c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800334e:	e02c      	b.n	80033aa <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003356:	d028      	beq.n	80033aa <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d007      	beq.n	800336e <UART_WaitOnFlagUntilTimeout+0x30>
 800335e:	f7fe fac1 	bl	80018e4 <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	429a      	cmp	r2, r3
 800336c:	d21d      	bcs.n	80033aa <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68da      	ldr	r2, [r3, #12]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800337c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	695a      	ldr	r2, [r3, #20]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f022 0201 	bic.w	r2, r2, #1
 800338c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2220      	movs	r2, #32
 8003392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2220      	movs	r2, #32
 800339a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e00f      	b.n	80033ca <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	4013      	ands	r3, r2
 80033b4:	68ba      	ldr	r2, [r7, #8]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	bf0c      	ite	eq
 80033ba:	2301      	moveq	r3, #1
 80033bc:	2300      	movne	r3, #0
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	461a      	mov	r2, r3
 80033c2:	79fb      	ldrb	r3, [r7, #7]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d0c3      	beq.n	8003350 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
	...

080033d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	68da      	ldr	r2, [r3, #12]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	430a      	orrs	r2, r1
 80033f0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	689a      	ldr	r2, [r3, #8]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	431a      	orrs	r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	695b      	ldr	r3, [r3, #20]
 8003400:	4313      	orrs	r3, r2
 8003402:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800340e:	f023 030c 	bic.w	r3, r3, #12
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	6812      	ldr	r2, [r2, #0]
 8003416:	68b9      	ldr	r1, [r7, #8]
 8003418:	430b      	orrs	r3, r1
 800341a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	695b      	ldr	r3, [r3, #20]
 8003422:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	699a      	ldr	r2, [r3, #24]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	430a      	orrs	r2, r1
 8003430:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a2c      	ldr	r2, [pc, #176]	; (80034e8 <UART_SetConfig+0x114>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d103      	bne.n	8003444 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800343c:	f7ff f902 	bl	8002644 <HAL_RCC_GetPCLK2Freq>
 8003440:	60f8      	str	r0, [r7, #12]
 8003442:	e002      	b.n	800344a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003444:	f7ff f8ea 	bl	800261c <HAL_RCC_GetPCLK1Freq>
 8003448:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	4613      	mov	r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	4413      	add	r3, r2
 8003452:	009a      	lsls	r2, r3, #2
 8003454:	441a      	add	r2, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003460:	4a22      	ldr	r2, [pc, #136]	; (80034ec <UART_SetConfig+0x118>)
 8003462:	fba2 2303 	umull	r2, r3, r2, r3
 8003466:	095b      	lsrs	r3, r3, #5
 8003468:	0119      	lsls	r1, r3, #4
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	4613      	mov	r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	4413      	add	r3, r2
 8003472:	009a      	lsls	r2, r3, #2
 8003474:	441a      	add	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003480:	4b1a      	ldr	r3, [pc, #104]	; (80034ec <UART_SetConfig+0x118>)
 8003482:	fba3 0302 	umull	r0, r3, r3, r2
 8003486:	095b      	lsrs	r3, r3, #5
 8003488:	2064      	movs	r0, #100	; 0x64
 800348a:	fb00 f303 	mul.w	r3, r0, r3
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	011b      	lsls	r3, r3, #4
 8003492:	3332      	adds	r3, #50	; 0x32
 8003494:	4a15      	ldr	r2, [pc, #84]	; (80034ec <UART_SetConfig+0x118>)
 8003496:	fba2 2303 	umull	r2, r3, r2, r3
 800349a:	095b      	lsrs	r3, r3, #5
 800349c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034a0:	4419      	add	r1, r3
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	4613      	mov	r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	4413      	add	r3, r2
 80034aa:	009a      	lsls	r2, r3, #2
 80034ac:	441a      	add	r2, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80034b8:	4b0c      	ldr	r3, [pc, #48]	; (80034ec <UART_SetConfig+0x118>)
 80034ba:	fba3 0302 	umull	r0, r3, r3, r2
 80034be:	095b      	lsrs	r3, r3, #5
 80034c0:	2064      	movs	r0, #100	; 0x64
 80034c2:	fb00 f303 	mul.w	r3, r0, r3
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	011b      	lsls	r3, r3, #4
 80034ca:	3332      	adds	r3, #50	; 0x32
 80034cc:	4a07      	ldr	r2, [pc, #28]	; (80034ec <UART_SetConfig+0x118>)
 80034ce:	fba2 2303 	umull	r2, r3, r2, r3
 80034d2:	095b      	lsrs	r3, r3, #5
 80034d4:	f003 020f 	and.w	r2, r3, #15
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	440a      	add	r2, r1
 80034de:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80034e0:	bf00      	nop
 80034e2:	3710      	adds	r7, #16
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	40013800 	.word	0x40013800
 80034ec:	51eb851f 	.word	0x51eb851f

080034f0 <__errno>:
 80034f0:	4b01      	ldr	r3, [pc, #4]	; (80034f8 <__errno+0x8>)
 80034f2:	6818      	ldr	r0, [r3, #0]
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	20000014 	.word	0x20000014

080034fc <__libc_init_array>:
 80034fc:	b570      	push	{r4, r5, r6, lr}
 80034fe:	2600      	movs	r6, #0
 8003500:	4d0c      	ldr	r5, [pc, #48]	; (8003534 <__libc_init_array+0x38>)
 8003502:	4c0d      	ldr	r4, [pc, #52]	; (8003538 <__libc_init_array+0x3c>)
 8003504:	1b64      	subs	r4, r4, r5
 8003506:	10a4      	asrs	r4, r4, #2
 8003508:	42a6      	cmp	r6, r4
 800350a:	d109      	bne.n	8003520 <__libc_init_array+0x24>
 800350c:	f000 fc5c 	bl	8003dc8 <_init>
 8003510:	2600      	movs	r6, #0
 8003512:	4d0a      	ldr	r5, [pc, #40]	; (800353c <__libc_init_array+0x40>)
 8003514:	4c0a      	ldr	r4, [pc, #40]	; (8003540 <__libc_init_array+0x44>)
 8003516:	1b64      	subs	r4, r4, r5
 8003518:	10a4      	asrs	r4, r4, #2
 800351a:	42a6      	cmp	r6, r4
 800351c:	d105      	bne.n	800352a <__libc_init_array+0x2e>
 800351e:	bd70      	pop	{r4, r5, r6, pc}
 8003520:	f855 3b04 	ldr.w	r3, [r5], #4
 8003524:	4798      	blx	r3
 8003526:	3601      	adds	r6, #1
 8003528:	e7ee      	b.n	8003508 <__libc_init_array+0xc>
 800352a:	f855 3b04 	ldr.w	r3, [r5], #4
 800352e:	4798      	blx	r3
 8003530:	3601      	adds	r6, #1
 8003532:	e7f2      	b.n	800351a <__libc_init_array+0x1e>
 8003534:	08004390 	.word	0x08004390
 8003538:	08004390 	.word	0x08004390
 800353c:	08004390 	.word	0x08004390
 8003540:	08004394 	.word	0x08004394

08003544 <memcpy>:
 8003544:	440a      	add	r2, r1
 8003546:	4291      	cmp	r1, r2
 8003548:	f100 33ff 	add.w	r3, r0, #4294967295
 800354c:	d100      	bne.n	8003550 <memcpy+0xc>
 800354e:	4770      	bx	lr
 8003550:	b510      	push	{r4, lr}
 8003552:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003556:	4291      	cmp	r1, r2
 8003558:	f803 4f01 	strb.w	r4, [r3, #1]!
 800355c:	d1f9      	bne.n	8003552 <memcpy+0xe>
 800355e:	bd10      	pop	{r4, pc}

08003560 <memset>:
 8003560:	4603      	mov	r3, r0
 8003562:	4402      	add	r2, r0
 8003564:	4293      	cmp	r3, r2
 8003566:	d100      	bne.n	800356a <memset+0xa>
 8003568:	4770      	bx	lr
 800356a:	f803 1b01 	strb.w	r1, [r3], #1
 800356e:	e7f9      	b.n	8003564 <memset+0x4>

08003570 <siprintf>:
 8003570:	b40e      	push	{r1, r2, r3}
 8003572:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003576:	b500      	push	{lr}
 8003578:	b09c      	sub	sp, #112	; 0x70
 800357a:	ab1d      	add	r3, sp, #116	; 0x74
 800357c:	9002      	str	r0, [sp, #8]
 800357e:	9006      	str	r0, [sp, #24]
 8003580:	9107      	str	r1, [sp, #28]
 8003582:	9104      	str	r1, [sp, #16]
 8003584:	4808      	ldr	r0, [pc, #32]	; (80035a8 <siprintf+0x38>)
 8003586:	4909      	ldr	r1, [pc, #36]	; (80035ac <siprintf+0x3c>)
 8003588:	f853 2b04 	ldr.w	r2, [r3], #4
 800358c:	9105      	str	r1, [sp, #20]
 800358e:	6800      	ldr	r0, [r0, #0]
 8003590:	a902      	add	r1, sp, #8
 8003592:	9301      	str	r3, [sp, #4]
 8003594:	f000 f868 	bl	8003668 <_svfiprintf_r>
 8003598:	2200      	movs	r2, #0
 800359a:	9b02      	ldr	r3, [sp, #8]
 800359c:	701a      	strb	r2, [r3, #0]
 800359e:	b01c      	add	sp, #112	; 0x70
 80035a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80035a4:	b003      	add	sp, #12
 80035a6:	4770      	bx	lr
 80035a8:	20000014 	.word	0x20000014
 80035ac:	ffff0208 	.word	0xffff0208

080035b0 <__ssputs_r>:
 80035b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035b4:	688e      	ldr	r6, [r1, #8]
 80035b6:	4682      	mov	sl, r0
 80035b8:	429e      	cmp	r6, r3
 80035ba:	460c      	mov	r4, r1
 80035bc:	4690      	mov	r8, r2
 80035be:	461f      	mov	r7, r3
 80035c0:	d838      	bhi.n	8003634 <__ssputs_r+0x84>
 80035c2:	898a      	ldrh	r2, [r1, #12]
 80035c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80035c8:	d032      	beq.n	8003630 <__ssputs_r+0x80>
 80035ca:	6825      	ldr	r5, [r4, #0]
 80035cc:	6909      	ldr	r1, [r1, #16]
 80035ce:	3301      	adds	r3, #1
 80035d0:	eba5 0901 	sub.w	r9, r5, r1
 80035d4:	6965      	ldr	r5, [r4, #20]
 80035d6:	444b      	add	r3, r9
 80035d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80035dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80035e0:	106d      	asrs	r5, r5, #1
 80035e2:	429d      	cmp	r5, r3
 80035e4:	bf38      	it	cc
 80035e6:	461d      	movcc	r5, r3
 80035e8:	0553      	lsls	r3, r2, #21
 80035ea:	d531      	bpl.n	8003650 <__ssputs_r+0xa0>
 80035ec:	4629      	mov	r1, r5
 80035ee:	f000 fb45 	bl	8003c7c <_malloc_r>
 80035f2:	4606      	mov	r6, r0
 80035f4:	b950      	cbnz	r0, 800360c <__ssputs_r+0x5c>
 80035f6:	230c      	movs	r3, #12
 80035f8:	f04f 30ff 	mov.w	r0, #4294967295
 80035fc:	f8ca 3000 	str.w	r3, [sl]
 8003600:	89a3      	ldrh	r3, [r4, #12]
 8003602:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003606:	81a3      	strh	r3, [r4, #12]
 8003608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800360c:	464a      	mov	r2, r9
 800360e:	6921      	ldr	r1, [r4, #16]
 8003610:	f7ff ff98 	bl	8003544 <memcpy>
 8003614:	89a3      	ldrh	r3, [r4, #12]
 8003616:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800361a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800361e:	81a3      	strh	r3, [r4, #12]
 8003620:	6126      	str	r6, [r4, #16]
 8003622:	444e      	add	r6, r9
 8003624:	6026      	str	r6, [r4, #0]
 8003626:	463e      	mov	r6, r7
 8003628:	6165      	str	r5, [r4, #20]
 800362a:	eba5 0509 	sub.w	r5, r5, r9
 800362e:	60a5      	str	r5, [r4, #8]
 8003630:	42be      	cmp	r6, r7
 8003632:	d900      	bls.n	8003636 <__ssputs_r+0x86>
 8003634:	463e      	mov	r6, r7
 8003636:	4632      	mov	r2, r6
 8003638:	4641      	mov	r1, r8
 800363a:	6820      	ldr	r0, [r4, #0]
 800363c:	f000 fab8 	bl	8003bb0 <memmove>
 8003640:	68a3      	ldr	r3, [r4, #8]
 8003642:	6822      	ldr	r2, [r4, #0]
 8003644:	1b9b      	subs	r3, r3, r6
 8003646:	4432      	add	r2, r6
 8003648:	2000      	movs	r0, #0
 800364a:	60a3      	str	r3, [r4, #8]
 800364c:	6022      	str	r2, [r4, #0]
 800364e:	e7db      	b.n	8003608 <__ssputs_r+0x58>
 8003650:	462a      	mov	r2, r5
 8003652:	f000 fb6d 	bl	8003d30 <_realloc_r>
 8003656:	4606      	mov	r6, r0
 8003658:	2800      	cmp	r0, #0
 800365a:	d1e1      	bne.n	8003620 <__ssputs_r+0x70>
 800365c:	4650      	mov	r0, sl
 800365e:	6921      	ldr	r1, [r4, #16]
 8003660:	f000 fac0 	bl	8003be4 <_free_r>
 8003664:	e7c7      	b.n	80035f6 <__ssputs_r+0x46>
	...

08003668 <_svfiprintf_r>:
 8003668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800366c:	4698      	mov	r8, r3
 800366e:	898b      	ldrh	r3, [r1, #12]
 8003670:	4607      	mov	r7, r0
 8003672:	061b      	lsls	r3, r3, #24
 8003674:	460d      	mov	r5, r1
 8003676:	4614      	mov	r4, r2
 8003678:	b09d      	sub	sp, #116	; 0x74
 800367a:	d50e      	bpl.n	800369a <_svfiprintf_r+0x32>
 800367c:	690b      	ldr	r3, [r1, #16]
 800367e:	b963      	cbnz	r3, 800369a <_svfiprintf_r+0x32>
 8003680:	2140      	movs	r1, #64	; 0x40
 8003682:	f000 fafb 	bl	8003c7c <_malloc_r>
 8003686:	6028      	str	r0, [r5, #0]
 8003688:	6128      	str	r0, [r5, #16]
 800368a:	b920      	cbnz	r0, 8003696 <_svfiprintf_r+0x2e>
 800368c:	230c      	movs	r3, #12
 800368e:	603b      	str	r3, [r7, #0]
 8003690:	f04f 30ff 	mov.w	r0, #4294967295
 8003694:	e0d1      	b.n	800383a <_svfiprintf_r+0x1d2>
 8003696:	2340      	movs	r3, #64	; 0x40
 8003698:	616b      	str	r3, [r5, #20]
 800369a:	2300      	movs	r3, #0
 800369c:	9309      	str	r3, [sp, #36]	; 0x24
 800369e:	2320      	movs	r3, #32
 80036a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80036a4:	2330      	movs	r3, #48	; 0x30
 80036a6:	f04f 0901 	mov.w	r9, #1
 80036aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80036ae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003854 <_svfiprintf_r+0x1ec>
 80036b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80036b6:	4623      	mov	r3, r4
 80036b8:	469a      	mov	sl, r3
 80036ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80036be:	b10a      	cbz	r2, 80036c4 <_svfiprintf_r+0x5c>
 80036c0:	2a25      	cmp	r2, #37	; 0x25
 80036c2:	d1f9      	bne.n	80036b8 <_svfiprintf_r+0x50>
 80036c4:	ebba 0b04 	subs.w	fp, sl, r4
 80036c8:	d00b      	beq.n	80036e2 <_svfiprintf_r+0x7a>
 80036ca:	465b      	mov	r3, fp
 80036cc:	4622      	mov	r2, r4
 80036ce:	4629      	mov	r1, r5
 80036d0:	4638      	mov	r0, r7
 80036d2:	f7ff ff6d 	bl	80035b0 <__ssputs_r>
 80036d6:	3001      	adds	r0, #1
 80036d8:	f000 80aa 	beq.w	8003830 <_svfiprintf_r+0x1c8>
 80036dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80036de:	445a      	add	r2, fp
 80036e0:	9209      	str	r2, [sp, #36]	; 0x24
 80036e2:	f89a 3000 	ldrb.w	r3, [sl]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	f000 80a2 	beq.w	8003830 <_svfiprintf_r+0x1c8>
 80036ec:	2300      	movs	r3, #0
 80036ee:	f04f 32ff 	mov.w	r2, #4294967295
 80036f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80036f6:	f10a 0a01 	add.w	sl, sl, #1
 80036fa:	9304      	str	r3, [sp, #16]
 80036fc:	9307      	str	r3, [sp, #28]
 80036fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003702:	931a      	str	r3, [sp, #104]	; 0x68
 8003704:	4654      	mov	r4, sl
 8003706:	2205      	movs	r2, #5
 8003708:	f814 1b01 	ldrb.w	r1, [r4], #1
 800370c:	4851      	ldr	r0, [pc, #324]	; (8003854 <_svfiprintf_r+0x1ec>)
 800370e:	f000 fa41 	bl	8003b94 <memchr>
 8003712:	9a04      	ldr	r2, [sp, #16]
 8003714:	b9d8      	cbnz	r0, 800374e <_svfiprintf_r+0xe6>
 8003716:	06d0      	lsls	r0, r2, #27
 8003718:	bf44      	itt	mi
 800371a:	2320      	movmi	r3, #32
 800371c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003720:	0711      	lsls	r1, r2, #28
 8003722:	bf44      	itt	mi
 8003724:	232b      	movmi	r3, #43	; 0x2b
 8003726:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800372a:	f89a 3000 	ldrb.w	r3, [sl]
 800372e:	2b2a      	cmp	r3, #42	; 0x2a
 8003730:	d015      	beq.n	800375e <_svfiprintf_r+0xf6>
 8003732:	4654      	mov	r4, sl
 8003734:	2000      	movs	r0, #0
 8003736:	f04f 0c0a 	mov.w	ip, #10
 800373a:	9a07      	ldr	r2, [sp, #28]
 800373c:	4621      	mov	r1, r4
 800373e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003742:	3b30      	subs	r3, #48	; 0x30
 8003744:	2b09      	cmp	r3, #9
 8003746:	d94e      	bls.n	80037e6 <_svfiprintf_r+0x17e>
 8003748:	b1b0      	cbz	r0, 8003778 <_svfiprintf_r+0x110>
 800374a:	9207      	str	r2, [sp, #28]
 800374c:	e014      	b.n	8003778 <_svfiprintf_r+0x110>
 800374e:	eba0 0308 	sub.w	r3, r0, r8
 8003752:	fa09 f303 	lsl.w	r3, r9, r3
 8003756:	4313      	orrs	r3, r2
 8003758:	46a2      	mov	sl, r4
 800375a:	9304      	str	r3, [sp, #16]
 800375c:	e7d2      	b.n	8003704 <_svfiprintf_r+0x9c>
 800375e:	9b03      	ldr	r3, [sp, #12]
 8003760:	1d19      	adds	r1, r3, #4
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	9103      	str	r1, [sp, #12]
 8003766:	2b00      	cmp	r3, #0
 8003768:	bfbb      	ittet	lt
 800376a:	425b      	neglt	r3, r3
 800376c:	f042 0202 	orrlt.w	r2, r2, #2
 8003770:	9307      	strge	r3, [sp, #28]
 8003772:	9307      	strlt	r3, [sp, #28]
 8003774:	bfb8      	it	lt
 8003776:	9204      	strlt	r2, [sp, #16]
 8003778:	7823      	ldrb	r3, [r4, #0]
 800377a:	2b2e      	cmp	r3, #46	; 0x2e
 800377c:	d10c      	bne.n	8003798 <_svfiprintf_r+0x130>
 800377e:	7863      	ldrb	r3, [r4, #1]
 8003780:	2b2a      	cmp	r3, #42	; 0x2a
 8003782:	d135      	bne.n	80037f0 <_svfiprintf_r+0x188>
 8003784:	9b03      	ldr	r3, [sp, #12]
 8003786:	3402      	adds	r4, #2
 8003788:	1d1a      	adds	r2, r3, #4
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	9203      	str	r2, [sp, #12]
 800378e:	2b00      	cmp	r3, #0
 8003790:	bfb8      	it	lt
 8003792:	f04f 33ff 	movlt.w	r3, #4294967295
 8003796:	9305      	str	r3, [sp, #20]
 8003798:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003864 <_svfiprintf_r+0x1fc>
 800379c:	2203      	movs	r2, #3
 800379e:	4650      	mov	r0, sl
 80037a0:	7821      	ldrb	r1, [r4, #0]
 80037a2:	f000 f9f7 	bl	8003b94 <memchr>
 80037a6:	b140      	cbz	r0, 80037ba <_svfiprintf_r+0x152>
 80037a8:	2340      	movs	r3, #64	; 0x40
 80037aa:	eba0 000a 	sub.w	r0, r0, sl
 80037ae:	fa03 f000 	lsl.w	r0, r3, r0
 80037b2:	9b04      	ldr	r3, [sp, #16]
 80037b4:	3401      	adds	r4, #1
 80037b6:	4303      	orrs	r3, r0
 80037b8:	9304      	str	r3, [sp, #16]
 80037ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037be:	2206      	movs	r2, #6
 80037c0:	4825      	ldr	r0, [pc, #148]	; (8003858 <_svfiprintf_r+0x1f0>)
 80037c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80037c6:	f000 f9e5 	bl	8003b94 <memchr>
 80037ca:	2800      	cmp	r0, #0
 80037cc:	d038      	beq.n	8003840 <_svfiprintf_r+0x1d8>
 80037ce:	4b23      	ldr	r3, [pc, #140]	; (800385c <_svfiprintf_r+0x1f4>)
 80037d0:	bb1b      	cbnz	r3, 800381a <_svfiprintf_r+0x1b2>
 80037d2:	9b03      	ldr	r3, [sp, #12]
 80037d4:	3307      	adds	r3, #7
 80037d6:	f023 0307 	bic.w	r3, r3, #7
 80037da:	3308      	adds	r3, #8
 80037dc:	9303      	str	r3, [sp, #12]
 80037de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037e0:	4433      	add	r3, r6
 80037e2:	9309      	str	r3, [sp, #36]	; 0x24
 80037e4:	e767      	b.n	80036b6 <_svfiprintf_r+0x4e>
 80037e6:	460c      	mov	r4, r1
 80037e8:	2001      	movs	r0, #1
 80037ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80037ee:	e7a5      	b.n	800373c <_svfiprintf_r+0xd4>
 80037f0:	2300      	movs	r3, #0
 80037f2:	f04f 0c0a 	mov.w	ip, #10
 80037f6:	4619      	mov	r1, r3
 80037f8:	3401      	adds	r4, #1
 80037fa:	9305      	str	r3, [sp, #20]
 80037fc:	4620      	mov	r0, r4
 80037fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003802:	3a30      	subs	r2, #48	; 0x30
 8003804:	2a09      	cmp	r2, #9
 8003806:	d903      	bls.n	8003810 <_svfiprintf_r+0x1a8>
 8003808:	2b00      	cmp	r3, #0
 800380a:	d0c5      	beq.n	8003798 <_svfiprintf_r+0x130>
 800380c:	9105      	str	r1, [sp, #20]
 800380e:	e7c3      	b.n	8003798 <_svfiprintf_r+0x130>
 8003810:	4604      	mov	r4, r0
 8003812:	2301      	movs	r3, #1
 8003814:	fb0c 2101 	mla	r1, ip, r1, r2
 8003818:	e7f0      	b.n	80037fc <_svfiprintf_r+0x194>
 800381a:	ab03      	add	r3, sp, #12
 800381c:	9300      	str	r3, [sp, #0]
 800381e:	462a      	mov	r2, r5
 8003820:	4638      	mov	r0, r7
 8003822:	4b0f      	ldr	r3, [pc, #60]	; (8003860 <_svfiprintf_r+0x1f8>)
 8003824:	a904      	add	r1, sp, #16
 8003826:	f3af 8000 	nop.w
 800382a:	1c42      	adds	r2, r0, #1
 800382c:	4606      	mov	r6, r0
 800382e:	d1d6      	bne.n	80037de <_svfiprintf_r+0x176>
 8003830:	89ab      	ldrh	r3, [r5, #12]
 8003832:	065b      	lsls	r3, r3, #25
 8003834:	f53f af2c 	bmi.w	8003690 <_svfiprintf_r+0x28>
 8003838:	9809      	ldr	r0, [sp, #36]	; 0x24
 800383a:	b01d      	add	sp, #116	; 0x74
 800383c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003840:	ab03      	add	r3, sp, #12
 8003842:	9300      	str	r3, [sp, #0]
 8003844:	462a      	mov	r2, r5
 8003846:	4638      	mov	r0, r7
 8003848:	4b05      	ldr	r3, [pc, #20]	; (8003860 <_svfiprintf_r+0x1f8>)
 800384a:	a904      	add	r1, sp, #16
 800384c:	f000 f87c 	bl	8003948 <_printf_i>
 8003850:	e7eb      	b.n	800382a <_svfiprintf_r+0x1c2>
 8003852:	bf00      	nop
 8003854:	0800435c 	.word	0x0800435c
 8003858:	08004366 	.word	0x08004366
 800385c:	00000000 	.word	0x00000000
 8003860:	080035b1 	.word	0x080035b1
 8003864:	08004362 	.word	0x08004362

08003868 <_printf_common>:
 8003868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800386c:	4616      	mov	r6, r2
 800386e:	4699      	mov	r9, r3
 8003870:	688a      	ldr	r2, [r1, #8]
 8003872:	690b      	ldr	r3, [r1, #16]
 8003874:	4607      	mov	r7, r0
 8003876:	4293      	cmp	r3, r2
 8003878:	bfb8      	it	lt
 800387a:	4613      	movlt	r3, r2
 800387c:	6033      	str	r3, [r6, #0]
 800387e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003882:	460c      	mov	r4, r1
 8003884:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003888:	b10a      	cbz	r2, 800388e <_printf_common+0x26>
 800388a:	3301      	adds	r3, #1
 800388c:	6033      	str	r3, [r6, #0]
 800388e:	6823      	ldr	r3, [r4, #0]
 8003890:	0699      	lsls	r1, r3, #26
 8003892:	bf42      	ittt	mi
 8003894:	6833      	ldrmi	r3, [r6, #0]
 8003896:	3302      	addmi	r3, #2
 8003898:	6033      	strmi	r3, [r6, #0]
 800389a:	6825      	ldr	r5, [r4, #0]
 800389c:	f015 0506 	ands.w	r5, r5, #6
 80038a0:	d106      	bne.n	80038b0 <_printf_common+0x48>
 80038a2:	f104 0a19 	add.w	sl, r4, #25
 80038a6:	68e3      	ldr	r3, [r4, #12]
 80038a8:	6832      	ldr	r2, [r6, #0]
 80038aa:	1a9b      	subs	r3, r3, r2
 80038ac:	42ab      	cmp	r3, r5
 80038ae:	dc28      	bgt.n	8003902 <_printf_common+0x9a>
 80038b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80038b4:	1e13      	subs	r3, r2, #0
 80038b6:	6822      	ldr	r2, [r4, #0]
 80038b8:	bf18      	it	ne
 80038ba:	2301      	movne	r3, #1
 80038bc:	0692      	lsls	r2, r2, #26
 80038be:	d42d      	bmi.n	800391c <_printf_common+0xb4>
 80038c0:	4649      	mov	r1, r9
 80038c2:	4638      	mov	r0, r7
 80038c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80038c8:	47c0      	blx	r8
 80038ca:	3001      	adds	r0, #1
 80038cc:	d020      	beq.n	8003910 <_printf_common+0xa8>
 80038ce:	6823      	ldr	r3, [r4, #0]
 80038d0:	68e5      	ldr	r5, [r4, #12]
 80038d2:	f003 0306 	and.w	r3, r3, #6
 80038d6:	2b04      	cmp	r3, #4
 80038d8:	bf18      	it	ne
 80038da:	2500      	movne	r5, #0
 80038dc:	6832      	ldr	r2, [r6, #0]
 80038de:	f04f 0600 	mov.w	r6, #0
 80038e2:	68a3      	ldr	r3, [r4, #8]
 80038e4:	bf08      	it	eq
 80038e6:	1aad      	subeq	r5, r5, r2
 80038e8:	6922      	ldr	r2, [r4, #16]
 80038ea:	bf08      	it	eq
 80038ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038f0:	4293      	cmp	r3, r2
 80038f2:	bfc4      	itt	gt
 80038f4:	1a9b      	subgt	r3, r3, r2
 80038f6:	18ed      	addgt	r5, r5, r3
 80038f8:	341a      	adds	r4, #26
 80038fa:	42b5      	cmp	r5, r6
 80038fc:	d11a      	bne.n	8003934 <_printf_common+0xcc>
 80038fe:	2000      	movs	r0, #0
 8003900:	e008      	b.n	8003914 <_printf_common+0xac>
 8003902:	2301      	movs	r3, #1
 8003904:	4652      	mov	r2, sl
 8003906:	4649      	mov	r1, r9
 8003908:	4638      	mov	r0, r7
 800390a:	47c0      	blx	r8
 800390c:	3001      	adds	r0, #1
 800390e:	d103      	bne.n	8003918 <_printf_common+0xb0>
 8003910:	f04f 30ff 	mov.w	r0, #4294967295
 8003914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003918:	3501      	adds	r5, #1
 800391a:	e7c4      	b.n	80038a6 <_printf_common+0x3e>
 800391c:	2030      	movs	r0, #48	; 0x30
 800391e:	18e1      	adds	r1, r4, r3
 8003920:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003924:	1c5a      	adds	r2, r3, #1
 8003926:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800392a:	4422      	add	r2, r4
 800392c:	3302      	adds	r3, #2
 800392e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003932:	e7c5      	b.n	80038c0 <_printf_common+0x58>
 8003934:	2301      	movs	r3, #1
 8003936:	4622      	mov	r2, r4
 8003938:	4649      	mov	r1, r9
 800393a:	4638      	mov	r0, r7
 800393c:	47c0      	blx	r8
 800393e:	3001      	adds	r0, #1
 8003940:	d0e6      	beq.n	8003910 <_printf_common+0xa8>
 8003942:	3601      	adds	r6, #1
 8003944:	e7d9      	b.n	80038fa <_printf_common+0x92>
	...

08003948 <_printf_i>:
 8003948:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800394c:	460c      	mov	r4, r1
 800394e:	7e27      	ldrb	r7, [r4, #24]
 8003950:	4691      	mov	r9, r2
 8003952:	2f78      	cmp	r7, #120	; 0x78
 8003954:	4680      	mov	r8, r0
 8003956:	469a      	mov	sl, r3
 8003958:	990c      	ldr	r1, [sp, #48]	; 0x30
 800395a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800395e:	d807      	bhi.n	8003970 <_printf_i+0x28>
 8003960:	2f62      	cmp	r7, #98	; 0x62
 8003962:	d80a      	bhi.n	800397a <_printf_i+0x32>
 8003964:	2f00      	cmp	r7, #0
 8003966:	f000 80d9 	beq.w	8003b1c <_printf_i+0x1d4>
 800396a:	2f58      	cmp	r7, #88	; 0x58
 800396c:	f000 80a4 	beq.w	8003ab8 <_printf_i+0x170>
 8003970:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003974:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003978:	e03a      	b.n	80039f0 <_printf_i+0xa8>
 800397a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800397e:	2b15      	cmp	r3, #21
 8003980:	d8f6      	bhi.n	8003970 <_printf_i+0x28>
 8003982:	a001      	add	r0, pc, #4	; (adr r0, 8003988 <_printf_i+0x40>)
 8003984:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003988:	080039e1 	.word	0x080039e1
 800398c:	080039f5 	.word	0x080039f5
 8003990:	08003971 	.word	0x08003971
 8003994:	08003971 	.word	0x08003971
 8003998:	08003971 	.word	0x08003971
 800399c:	08003971 	.word	0x08003971
 80039a0:	080039f5 	.word	0x080039f5
 80039a4:	08003971 	.word	0x08003971
 80039a8:	08003971 	.word	0x08003971
 80039ac:	08003971 	.word	0x08003971
 80039b0:	08003971 	.word	0x08003971
 80039b4:	08003b03 	.word	0x08003b03
 80039b8:	08003a25 	.word	0x08003a25
 80039bc:	08003ae5 	.word	0x08003ae5
 80039c0:	08003971 	.word	0x08003971
 80039c4:	08003971 	.word	0x08003971
 80039c8:	08003b25 	.word	0x08003b25
 80039cc:	08003971 	.word	0x08003971
 80039d0:	08003a25 	.word	0x08003a25
 80039d4:	08003971 	.word	0x08003971
 80039d8:	08003971 	.word	0x08003971
 80039dc:	08003aed 	.word	0x08003aed
 80039e0:	680b      	ldr	r3, [r1, #0]
 80039e2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80039e6:	1d1a      	adds	r2, r3, #4
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	600a      	str	r2, [r1, #0]
 80039ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80039f0:	2301      	movs	r3, #1
 80039f2:	e0a4      	b.n	8003b3e <_printf_i+0x1f6>
 80039f4:	6825      	ldr	r5, [r4, #0]
 80039f6:	6808      	ldr	r0, [r1, #0]
 80039f8:	062e      	lsls	r6, r5, #24
 80039fa:	f100 0304 	add.w	r3, r0, #4
 80039fe:	d50a      	bpl.n	8003a16 <_printf_i+0xce>
 8003a00:	6805      	ldr	r5, [r0, #0]
 8003a02:	600b      	str	r3, [r1, #0]
 8003a04:	2d00      	cmp	r5, #0
 8003a06:	da03      	bge.n	8003a10 <_printf_i+0xc8>
 8003a08:	232d      	movs	r3, #45	; 0x2d
 8003a0a:	426d      	negs	r5, r5
 8003a0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a10:	230a      	movs	r3, #10
 8003a12:	485e      	ldr	r0, [pc, #376]	; (8003b8c <_printf_i+0x244>)
 8003a14:	e019      	b.n	8003a4a <_printf_i+0x102>
 8003a16:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003a1a:	6805      	ldr	r5, [r0, #0]
 8003a1c:	600b      	str	r3, [r1, #0]
 8003a1e:	bf18      	it	ne
 8003a20:	b22d      	sxthne	r5, r5
 8003a22:	e7ef      	b.n	8003a04 <_printf_i+0xbc>
 8003a24:	680b      	ldr	r3, [r1, #0]
 8003a26:	6825      	ldr	r5, [r4, #0]
 8003a28:	1d18      	adds	r0, r3, #4
 8003a2a:	6008      	str	r0, [r1, #0]
 8003a2c:	0628      	lsls	r0, r5, #24
 8003a2e:	d501      	bpl.n	8003a34 <_printf_i+0xec>
 8003a30:	681d      	ldr	r5, [r3, #0]
 8003a32:	e002      	b.n	8003a3a <_printf_i+0xf2>
 8003a34:	0669      	lsls	r1, r5, #25
 8003a36:	d5fb      	bpl.n	8003a30 <_printf_i+0xe8>
 8003a38:	881d      	ldrh	r5, [r3, #0]
 8003a3a:	2f6f      	cmp	r7, #111	; 0x6f
 8003a3c:	bf0c      	ite	eq
 8003a3e:	2308      	moveq	r3, #8
 8003a40:	230a      	movne	r3, #10
 8003a42:	4852      	ldr	r0, [pc, #328]	; (8003b8c <_printf_i+0x244>)
 8003a44:	2100      	movs	r1, #0
 8003a46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003a4a:	6866      	ldr	r6, [r4, #4]
 8003a4c:	2e00      	cmp	r6, #0
 8003a4e:	bfa8      	it	ge
 8003a50:	6821      	ldrge	r1, [r4, #0]
 8003a52:	60a6      	str	r6, [r4, #8]
 8003a54:	bfa4      	itt	ge
 8003a56:	f021 0104 	bicge.w	r1, r1, #4
 8003a5a:	6021      	strge	r1, [r4, #0]
 8003a5c:	b90d      	cbnz	r5, 8003a62 <_printf_i+0x11a>
 8003a5e:	2e00      	cmp	r6, #0
 8003a60:	d04d      	beq.n	8003afe <_printf_i+0x1b6>
 8003a62:	4616      	mov	r6, r2
 8003a64:	fbb5 f1f3 	udiv	r1, r5, r3
 8003a68:	fb03 5711 	mls	r7, r3, r1, r5
 8003a6c:	5dc7      	ldrb	r7, [r0, r7]
 8003a6e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003a72:	462f      	mov	r7, r5
 8003a74:	42bb      	cmp	r3, r7
 8003a76:	460d      	mov	r5, r1
 8003a78:	d9f4      	bls.n	8003a64 <_printf_i+0x11c>
 8003a7a:	2b08      	cmp	r3, #8
 8003a7c:	d10b      	bne.n	8003a96 <_printf_i+0x14e>
 8003a7e:	6823      	ldr	r3, [r4, #0]
 8003a80:	07df      	lsls	r7, r3, #31
 8003a82:	d508      	bpl.n	8003a96 <_printf_i+0x14e>
 8003a84:	6923      	ldr	r3, [r4, #16]
 8003a86:	6861      	ldr	r1, [r4, #4]
 8003a88:	4299      	cmp	r1, r3
 8003a8a:	bfde      	ittt	le
 8003a8c:	2330      	movle	r3, #48	; 0x30
 8003a8e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003a92:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003a96:	1b92      	subs	r2, r2, r6
 8003a98:	6122      	str	r2, [r4, #16]
 8003a9a:	464b      	mov	r3, r9
 8003a9c:	4621      	mov	r1, r4
 8003a9e:	4640      	mov	r0, r8
 8003aa0:	f8cd a000 	str.w	sl, [sp]
 8003aa4:	aa03      	add	r2, sp, #12
 8003aa6:	f7ff fedf 	bl	8003868 <_printf_common>
 8003aaa:	3001      	adds	r0, #1
 8003aac:	d14c      	bne.n	8003b48 <_printf_i+0x200>
 8003aae:	f04f 30ff 	mov.w	r0, #4294967295
 8003ab2:	b004      	add	sp, #16
 8003ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ab8:	4834      	ldr	r0, [pc, #208]	; (8003b8c <_printf_i+0x244>)
 8003aba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003abe:	680e      	ldr	r6, [r1, #0]
 8003ac0:	6823      	ldr	r3, [r4, #0]
 8003ac2:	f856 5b04 	ldr.w	r5, [r6], #4
 8003ac6:	061f      	lsls	r7, r3, #24
 8003ac8:	600e      	str	r6, [r1, #0]
 8003aca:	d514      	bpl.n	8003af6 <_printf_i+0x1ae>
 8003acc:	07d9      	lsls	r1, r3, #31
 8003ace:	bf44      	itt	mi
 8003ad0:	f043 0320 	orrmi.w	r3, r3, #32
 8003ad4:	6023      	strmi	r3, [r4, #0]
 8003ad6:	b91d      	cbnz	r5, 8003ae0 <_printf_i+0x198>
 8003ad8:	6823      	ldr	r3, [r4, #0]
 8003ada:	f023 0320 	bic.w	r3, r3, #32
 8003ade:	6023      	str	r3, [r4, #0]
 8003ae0:	2310      	movs	r3, #16
 8003ae2:	e7af      	b.n	8003a44 <_printf_i+0xfc>
 8003ae4:	6823      	ldr	r3, [r4, #0]
 8003ae6:	f043 0320 	orr.w	r3, r3, #32
 8003aea:	6023      	str	r3, [r4, #0]
 8003aec:	2378      	movs	r3, #120	; 0x78
 8003aee:	4828      	ldr	r0, [pc, #160]	; (8003b90 <_printf_i+0x248>)
 8003af0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003af4:	e7e3      	b.n	8003abe <_printf_i+0x176>
 8003af6:	065e      	lsls	r6, r3, #25
 8003af8:	bf48      	it	mi
 8003afa:	b2ad      	uxthmi	r5, r5
 8003afc:	e7e6      	b.n	8003acc <_printf_i+0x184>
 8003afe:	4616      	mov	r6, r2
 8003b00:	e7bb      	b.n	8003a7a <_printf_i+0x132>
 8003b02:	680b      	ldr	r3, [r1, #0]
 8003b04:	6826      	ldr	r6, [r4, #0]
 8003b06:	1d1d      	adds	r5, r3, #4
 8003b08:	6960      	ldr	r0, [r4, #20]
 8003b0a:	600d      	str	r5, [r1, #0]
 8003b0c:	0635      	lsls	r5, r6, #24
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	d501      	bpl.n	8003b16 <_printf_i+0x1ce>
 8003b12:	6018      	str	r0, [r3, #0]
 8003b14:	e002      	b.n	8003b1c <_printf_i+0x1d4>
 8003b16:	0671      	lsls	r1, r6, #25
 8003b18:	d5fb      	bpl.n	8003b12 <_printf_i+0x1ca>
 8003b1a:	8018      	strh	r0, [r3, #0]
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	4616      	mov	r6, r2
 8003b20:	6123      	str	r3, [r4, #16]
 8003b22:	e7ba      	b.n	8003a9a <_printf_i+0x152>
 8003b24:	680b      	ldr	r3, [r1, #0]
 8003b26:	1d1a      	adds	r2, r3, #4
 8003b28:	600a      	str	r2, [r1, #0]
 8003b2a:	681e      	ldr	r6, [r3, #0]
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	4630      	mov	r0, r6
 8003b30:	6862      	ldr	r2, [r4, #4]
 8003b32:	f000 f82f 	bl	8003b94 <memchr>
 8003b36:	b108      	cbz	r0, 8003b3c <_printf_i+0x1f4>
 8003b38:	1b80      	subs	r0, r0, r6
 8003b3a:	6060      	str	r0, [r4, #4]
 8003b3c:	6863      	ldr	r3, [r4, #4]
 8003b3e:	6123      	str	r3, [r4, #16]
 8003b40:	2300      	movs	r3, #0
 8003b42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b46:	e7a8      	b.n	8003a9a <_printf_i+0x152>
 8003b48:	4632      	mov	r2, r6
 8003b4a:	4649      	mov	r1, r9
 8003b4c:	4640      	mov	r0, r8
 8003b4e:	6923      	ldr	r3, [r4, #16]
 8003b50:	47d0      	blx	sl
 8003b52:	3001      	adds	r0, #1
 8003b54:	d0ab      	beq.n	8003aae <_printf_i+0x166>
 8003b56:	6823      	ldr	r3, [r4, #0]
 8003b58:	079b      	lsls	r3, r3, #30
 8003b5a:	d413      	bmi.n	8003b84 <_printf_i+0x23c>
 8003b5c:	68e0      	ldr	r0, [r4, #12]
 8003b5e:	9b03      	ldr	r3, [sp, #12]
 8003b60:	4298      	cmp	r0, r3
 8003b62:	bfb8      	it	lt
 8003b64:	4618      	movlt	r0, r3
 8003b66:	e7a4      	b.n	8003ab2 <_printf_i+0x16a>
 8003b68:	2301      	movs	r3, #1
 8003b6a:	4632      	mov	r2, r6
 8003b6c:	4649      	mov	r1, r9
 8003b6e:	4640      	mov	r0, r8
 8003b70:	47d0      	blx	sl
 8003b72:	3001      	adds	r0, #1
 8003b74:	d09b      	beq.n	8003aae <_printf_i+0x166>
 8003b76:	3501      	adds	r5, #1
 8003b78:	68e3      	ldr	r3, [r4, #12]
 8003b7a:	9903      	ldr	r1, [sp, #12]
 8003b7c:	1a5b      	subs	r3, r3, r1
 8003b7e:	42ab      	cmp	r3, r5
 8003b80:	dcf2      	bgt.n	8003b68 <_printf_i+0x220>
 8003b82:	e7eb      	b.n	8003b5c <_printf_i+0x214>
 8003b84:	2500      	movs	r5, #0
 8003b86:	f104 0619 	add.w	r6, r4, #25
 8003b8a:	e7f5      	b.n	8003b78 <_printf_i+0x230>
 8003b8c:	0800436d 	.word	0x0800436d
 8003b90:	0800437e 	.word	0x0800437e

08003b94 <memchr>:
 8003b94:	4603      	mov	r3, r0
 8003b96:	b510      	push	{r4, lr}
 8003b98:	b2c9      	uxtb	r1, r1
 8003b9a:	4402      	add	r2, r0
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	d101      	bne.n	8003ba6 <memchr+0x12>
 8003ba2:	2000      	movs	r0, #0
 8003ba4:	e003      	b.n	8003bae <memchr+0x1a>
 8003ba6:	7804      	ldrb	r4, [r0, #0]
 8003ba8:	3301      	adds	r3, #1
 8003baa:	428c      	cmp	r4, r1
 8003bac:	d1f6      	bne.n	8003b9c <memchr+0x8>
 8003bae:	bd10      	pop	{r4, pc}

08003bb0 <memmove>:
 8003bb0:	4288      	cmp	r0, r1
 8003bb2:	b510      	push	{r4, lr}
 8003bb4:	eb01 0402 	add.w	r4, r1, r2
 8003bb8:	d902      	bls.n	8003bc0 <memmove+0x10>
 8003bba:	4284      	cmp	r4, r0
 8003bbc:	4623      	mov	r3, r4
 8003bbe:	d807      	bhi.n	8003bd0 <memmove+0x20>
 8003bc0:	1e43      	subs	r3, r0, #1
 8003bc2:	42a1      	cmp	r1, r4
 8003bc4:	d008      	beq.n	8003bd8 <memmove+0x28>
 8003bc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003bca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003bce:	e7f8      	b.n	8003bc2 <memmove+0x12>
 8003bd0:	4601      	mov	r1, r0
 8003bd2:	4402      	add	r2, r0
 8003bd4:	428a      	cmp	r2, r1
 8003bd6:	d100      	bne.n	8003bda <memmove+0x2a>
 8003bd8:	bd10      	pop	{r4, pc}
 8003bda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003bde:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003be2:	e7f7      	b.n	8003bd4 <memmove+0x24>

08003be4 <_free_r>:
 8003be4:	b538      	push	{r3, r4, r5, lr}
 8003be6:	4605      	mov	r5, r0
 8003be8:	2900      	cmp	r1, #0
 8003bea:	d043      	beq.n	8003c74 <_free_r+0x90>
 8003bec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bf0:	1f0c      	subs	r4, r1, #4
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	bfb8      	it	lt
 8003bf6:	18e4      	addlt	r4, r4, r3
 8003bf8:	f000 f8d0 	bl	8003d9c <__malloc_lock>
 8003bfc:	4a1e      	ldr	r2, [pc, #120]	; (8003c78 <_free_r+0x94>)
 8003bfe:	6813      	ldr	r3, [r2, #0]
 8003c00:	4610      	mov	r0, r2
 8003c02:	b933      	cbnz	r3, 8003c12 <_free_r+0x2e>
 8003c04:	6063      	str	r3, [r4, #4]
 8003c06:	6014      	str	r4, [r2, #0]
 8003c08:	4628      	mov	r0, r5
 8003c0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c0e:	f000 b8cb 	b.w	8003da8 <__malloc_unlock>
 8003c12:	42a3      	cmp	r3, r4
 8003c14:	d90a      	bls.n	8003c2c <_free_r+0x48>
 8003c16:	6821      	ldr	r1, [r4, #0]
 8003c18:	1862      	adds	r2, r4, r1
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	bf01      	itttt	eq
 8003c1e:	681a      	ldreq	r2, [r3, #0]
 8003c20:	685b      	ldreq	r3, [r3, #4]
 8003c22:	1852      	addeq	r2, r2, r1
 8003c24:	6022      	streq	r2, [r4, #0]
 8003c26:	6063      	str	r3, [r4, #4]
 8003c28:	6004      	str	r4, [r0, #0]
 8003c2a:	e7ed      	b.n	8003c08 <_free_r+0x24>
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	b10b      	cbz	r3, 8003c36 <_free_r+0x52>
 8003c32:	42a3      	cmp	r3, r4
 8003c34:	d9fa      	bls.n	8003c2c <_free_r+0x48>
 8003c36:	6811      	ldr	r1, [r2, #0]
 8003c38:	1850      	adds	r0, r2, r1
 8003c3a:	42a0      	cmp	r0, r4
 8003c3c:	d10b      	bne.n	8003c56 <_free_r+0x72>
 8003c3e:	6820      	ldr	r0, [r4, #0]
 8003c40:	4401      	add	r1, r0
 8003c42:	1850      	adds	r0, r2, r1
 8003c44:	4283      	cmp	r3, r0
 8003c46:	6011      	str	r1, [r2, #0]
 8003c48:	d1de      	bne.n	8003c08 <_free_r+0x24>
 8003c4a:	6818      	ldr	r0, [r3, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	4401      	add	r1, r0
 8003c50:	6011      	str	r1, [r2, #0]
 8003c52:	6053      	str	r3, [r2, #4]
 8003c54:	e7d8      	b.n	8003c08 <_free_r+0x24>
 8003c56:	d902      	bls.n	8003c5e <_free_r+0x7a>
 8003c58:	230c      	movs	r3, #12
 8003c5a:	602b      	str	r3, [r5, #0]
 8003c5c:	e7d4      	b.n	8003c08 <_free_r+0x24>
 8003c5e:	6820      	ldr	r0, [r4, #0]
 8003c60:	1821      	adds	r1, r4, r0
 8003c62:	428b      	cmp	r3, r1
 8003c64:	bf01      	itttt	eq
 8003c66:	6819      	ldreq	r1, [r3, #0]
 8003c68:	685b      	ldreq	r3, [r3, #4]
 8003c6a:	1809      	addeq	r1, r1, r0
 8003c6c:	6021      	streq	r1, [r4, #0]
 8003c6e:	6063      	str	r3, [r4, #4]
 8003c70:	6054      	str	r4, [r2, #4]
 8003c72:	e7c9      	b.n	8003c08 <_free_r+0x24>
 8003c74:	bd38      	pop	{r3, r4, r5, pc}
 8003c76:	bf00      	nop
 8003c78:	2000014c 	.word	0x2000014c

08003c7c <_malloc_r>:
 8003c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c7e:	1ccd      	adds	r5, r1, #3
 8003c80:	f025 0503 	bic.w	r5, r5, #3
 8003c84:	3508      	adds	r5, #8
 8003c86:	2d0c      	cmp	r5, #12
 8003c88:	bf38      	it	cc
 8003c8a:	250c      	movcc	r5, #12
 8003c8c:	2d00      	cmp	r5, #0
 8003c8e:	4606      	mov	r6, r0
 8003c90:	db01      	blt.n	8003c96 <_malloc_r+0x1a>
 8003c92:	42a9      	cmp	r1, r5
 8003c94:	d903      	bls.n	8003c9e <_malloc_r+0x22>
 8003c96:	230c      	movs	r3, #12
 8003c98:	6033      	str	r3, [r6, #0]
 8003c9a:	2000      	movs	r0, #0
 8003c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c9e:	f000 f87d 	bl	8003d9c <__malloc_lock>
 8003ca2:	4921      	ldr	r1, [pc, #132]	; (8003d28 <_malloc_r+0xac>)
 8003ca4:	680a      	ldr	r2, [r1, #0]
 8003ca6:	4614      	mov	r4, r2
 8003ca8:	b99c      	cbnz	r4, 8003cd2 <_malloc_r+0x56>
 8003caa:	4f20      	ldr	r7, [pc, #128]	; (8003d2c <_malloc_r+0xb0>)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	b923      	cbnz	r3, 8003cba <_malloc_r+0x3e>
 8003cb0:	4621      	mov	r1, r4
 8003cb2:	4630      	mov	r0, r6
 8003cb4:	f000 f862 	bl	8003d7c <_sbrk_r>
 8003cb8:	6038      	str	r0, [r7, #0]
 8003cba:	4629      	mov	r1, r5
 8003cbc:	4630      	mov	r0, r6
 8003cbe:	f000 f85d 	bl	8003d7c <_sbrk_r>
 8003cc2:	1c43      	adds	r3, r0, #1
 8003cc4:	d123      	bne.n	8003d0e <_malloc_r+0x92>
 8003cc6:	230c      	movs	r3, #12
 8003cc8:	4630      	mov	r0, r6
 8003cca:	6033      	str	r3, [r6, #0]
 8003ccc:	f000 f86c 	bl	8003da8 <__malloc_unlock>
 8003cd0:	e7e3      	b.n	8003c9a <_malloc_r+0x1e>
 8003cd2:	6823      	ldr	r3, [r4, #0]
 8003cd4:	1b5b      	subs	r3, r3, r5
 8003cd6:	d417      	bmi.n	8003d08 <_malloc_r+0x8c>
 8003cd8:	2b0b      	cmp	r3, #11
 8003cda:	d903      	bls.n	8003ce4 <_malloc_r+0x68>
 8003cdc:	6023      	str	r3, [r4, #0]
 8003cde:	441c      	add	r4, r3
 8003ce0:	6025      	str	r5, [r4, #0]
 8003ce2:	e004      	b.n	8003cee <_malloc_r+0x72>
 8003ce4:	6863      	ldr	r3, [r4, #4]
 8003ce6:	42a2      	cmp	r2, r4
 8003ce8:	bf0c      	ite	eq
 8003cea:	600b      	streq	r3, [r1, #0]
 8003cec:	6053      	strne	r3, [r2, #4]
 8003cee:	4630      	mov	r0, r6
 8003cf0:	f000 f85a 	bl	8003da8 <__malloc_unlock>
 8003cf4:	f104 000b 	add.w	r0, r4, #11
 8003cf8:	1d23      	adds	r3, r4, #4
 8003cfa:	f020 0007 	bic.w	r0, r0, #7
 8003cfe:	1ac2      	subs	r2, r0, r3
 8003d00:	d0cc      	beq.n	8003c9c <_malloc_r+0x20>
 8003d02:	1a1b      	subs	r3, r3, r0
 8003d04:	50a3      	str	r3, [r4, r2]
 8003d06:	e7c9      	b.n	8003c9c <_malloc_r+0x20>
 8003d08:	4622      	mov	r2, r4
 8003d0a:	6864      	ldr	r4, [r4, #4]
 8003d0c:	e7cc      	b.n	8003ca8 <_malloc_r+0x2c>
 8003d0e:	1cc4      	adds	r4, r0, #3
 8003d10:	f024 0403 	bic.w	r4, r4, #3
 8003d14:	42a0      	cmp	r0, r4
 8003d16:	d0e3      	beq.n	8003ce0 <_malloc_r+0x64>
 8003d18:	1a21      	subs	r1, r4, r0
 8003d1a:	4630      	mov	r0, r6
 8003d1c:	f000 f82e 	bl	8003d7c <_sbrk_r>
 8003d20:	3001      	adds	r0, #1
 8003d22:	d1dd      	bne.n	8003ce0 <_malloc_r+0x64>
 8003d24:	e7cf      	b.n	8003cc6 <_malloc_r+0x4a>
 8003d26:	bf00      	nop
 8003d28:	2000014c 	.word	0x2000014c
 8003d2c:	20000150 	.word	0x20000150

08003d30 <_realloc_r>:
 8003d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d32:	4607      	mov	r7, r0
 8003d34:	4614      	mov	r4, r2
 8003d36:	460e      	mov	r6, r1
 8003d38:	b921      	cbnz	r1, 8003d44 <_realloc_r+0x14>
 8003d3a:	4611      	mov	r1, r2
 8003d3c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003d40:	f7ff bf9c 	b.w	8003c7c <_malloc_r>
 8003d44:	b922      	cbnz	r2, 8003d50 <_realloc_r+0x20>
 8003d46:	f7ff ff4d 	bl	8003be4 <_free_r>
 8003d4a:	4625      	mov	r5, r4
 8003d4c:	4628      	mov	r0, r5
 8003d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d50:	f000 f830 	bl	8003db4 <_malloc_usable_size_r>
 8003d54:	42a0      	cmp	r0, r4
 8003d56:	d20f      	bcs.n	8003d78 <_realloc_r+0x48>
 8003d58:	4621      	mov	r1, r4
 8003d5a:	4638      	mov	r0, r7
 8003d5c:	f7ff ff8e 	bl	8003c7c <_malloc_r>
 8003d60:	4605      	mov	r5, r0
 8003d62:	2800      	cmp	r0, #0
 8003d64:	d0f2      	beq.n	8003d4c <_realloc_r+0x1c>
 8003d66:	4631      	mov	r1, r6
 8003d68:	4622      	mov	r2, r4
 8003d6a:	f7ff fbeb 	bl	8003544 <memcpy>
 8003d6e:	4631      	mov	r1, r6
 8003d70:	4638      	mov	r0, r7
 8003d72:	f7ff ff37 	bl	8003be4 <_free_r>
 8003d76:	e7e9      	b.n	8003d4c <_realloc_r+0x1c>
 8003d78:	4635      	mov	r5, r6
 8003d7a:	e7e7      	b.n	8003d4c <_realloc_r+0x1c>

08003d7c <_sbrk_r>:
 8003d7c:	b538      	push	{r3, r4, r5, lr}
 8003d7e:	2300      	movs	r3, #0
 8003d80:	4d05      	ldr	r5, [pc, #20]	; (8003d98 <_sbrk_r+0x1c>)
 8003d82:	4604      	mov	r4, r0
 8003d84:	4608      	mov	r0, r1
 8003d86:	602b      	str	r3, [r5, #0]
 8003d88:	f7fd fcf2 	bl	8001770 <_sbrk>
 8003d8c:	1c43      	adds	r3, r0, #1
 8003d8e:	d102      	bne.n	8003d96 <_sbrk_r+0x1a>
 8003d90:	682b      	ldr	r3, [r5, #0]
 8003d92:	b103      	cbz	r3, 8003d96 <_sbrk_r+0x1a>
 8003d94:	6023      	str	r3, [r4, #0]
 8003d96:	bd38      	pop	{r3, r4, r5, pc}
 8003d98:	2000022c 	.word	0x2000022c

08003d9c <__malloc_lock>:
 8003d9c:	4801      	ldr	r0, [pc, #4]	; (8003da4 <__malloc_lock+0x8>)
 8003d9e:	f000 b811 	b.w	8003dc4 <__retarget_lock_acquire_recursive>
 8003da2:	bf00      	nop
 8003da4:	20000234 	.word	0x20000234

08003da8 <__malloc_unlock>:
 8003da8:	4801      	ldr	r0, [pc, #4]	; (8003db0 <__malloc_unlock+0x8>)
 8003daa:	f000 b80c 	b.w	8003dc6 <__retarget_lock_release_recursive>
 8003dae:	bf00      	nop
 8003db0:	20000234 	.word	0x20000234

08003db4 <_malloc_usable_size_r>:
 8003db4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003db8:	1f18      	subs	r0, r3, #4
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	bfbc      	itt	lt
 8003dbe:	580b      	ldrlt	r3, [r1, r0]
 8003dc0:	18c0      	addlt	r0, r0, r3
 8003dc2:	4770      	bx	lr

08003dc4 <__retarget_lock_acquire_recursive>:
 8003dc4:	4770      	bx	lr

08003dc6 <__retarget_lock_release_recursive>:
 8003dc6:	4770      	bx	lr

08003dc8 <_init>:
 8003dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dca:	bf00      	nop
 8003dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dce:	bc08      	pop	{r3}
 8003dd0:	469e      	mov	lr, r3
 8003dd2:	4770      	bx	lr

08003dd4 <_fini>:
 8003dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dd6:	bf00      	nop
 8003dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dda:	bc08      	pop	{r3}
 8003ddc:	469e      	mov	lr, r3
 8003dde:	4770      	bx	lr
