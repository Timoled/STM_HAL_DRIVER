
spi2_uart1_A0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009714  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ec  08009828  08009828  00019828  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d14  08009d14  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08009d14  08009d14  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009d14  08009d14  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d14  08009d14  00019d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d18  08009d18  00019d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009d1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  200001e0  08009efc  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000039c  08009efc  0002039c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011499  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002953  00000000  00000000  000316a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e0  00000000  00000000  00033ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fd8  00000000  00000000  000350d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019da7  00000000  00000000  000360b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011bfa  00000000  00000000  0004fe57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000934c1  00000000  00000000  00061a51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f4f12  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bdc  00000000  00000000  000f4f68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800980c 	.word	0x0800980c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800980c 	.word	0x0800980c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_d2lz>:
 8000d84:	b538      	push	{r3, r4, r5, lr}
 8000d86:	460c      	mov	r4, r1
 8000d88:	4605      	mov	r5, r0
 8000d8a:	4621      	mov	r1, r4
 8000d8c:	4628      	mov	r0, r5
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2300      	movs	r3, #0
 8000d92:	f7ff fe13 	bl	80009bc <__aeabi_dcmplt>
 8000d96:	b928      	cbnz	r0, 8000da4 <__aeabi_d2lz+0x20>
 8000d98:	4628      	mov	r0, r5
 8000d9a:	4621      	mov	r1, r4
 8000d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000da0:	f000 b80a 	b.w	8000db8 <__aeabi_d2ulz>
 8000da4:	4628      	mov	r0, r5
 8000da6:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000daa:	f000 f805 	bl	8000db8 <__aeabi_d2ulz>
 8000dae:	4240      	negs	r0, r0
 8000db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db4:	bd38      	pop	{r3, r4, r5, pc}
 8000db6:	bf00      	nop

08000db8 <__aeabi_d2ulz>:
 8000db8:	b5d0      	push	{r4, r6, r7, lr}
 8000dba:	2200      	movs	r2, #0
 8000dbc:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <__aeabi_d2ulz+0x34>)
 8000dbe:	4606      	mov	r6, r0
 8000dc0:	460f      	mov	r7, r1
 8000dc2:	f7ff fb89 	bl	80004d8 <__aeabi_dmul>
 8000dc6:	f7ff fe5f 	bl	8000a88 <__aeabi_d2uiz>
 8000dca:	4604      	mov	r4, r0
 8000dcc:	f7ff fb0a 	bl	80003e4 <__aeabi_ui2d>
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <__aeabi_d2ulz+0x38>)
 8000dd4:	f7ff fb80 	bl	80004d8 <__aeabi_dmul>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4630      	mov	r0, r6
 8000dde:	4639      	mov	r1, r7
 8000de0:	f7ff f9c2 	bl	8000168 <__aeabi_dsub>
 8000de4:	f7ff fe50 	bl	8000a88 <__aeabi_d2uiz>
 8000de8:	4621      	mov	r1, r4
 8000dea:	bdd0      	pop	{r4, r6, r7, pc}
 8000dec:	3df00000 	.word	0x3df00000
 8000df0:	41f00000 	.word	0x41f00000

08000df4 <DWT_Delay_Init>:
uint16_t SUM; uint8_t Presence = 0;

#include "DHT.h"

uint32_t DWT_Delay_Init(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000df8:	4b14      	ldr	r3, [pc, #80]	; (8000e4c <DWT_Delay_Init+0x58>)
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	4a13      	ldr	r2, [pc, #76]	; (8000e4c <DWT_Delay_Init+0x58>)
 8000dfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000e02:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000e04:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <DWT_Delay_Init+0x58>)
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	4a10      	ldr	r2, [pc, #64]	; (8000e4c <DWT_Delay_Init+0x58>)
 8000e0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e0e:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000e10:	4b0f      	ldr	r3, [pc, #60]	; (8000e50 <DWT_Delay_Init+0x5c>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a0e      	ldr	r2, [pc, #56]	; (8000e50 <DWT_Delay_Init+0x5c>)
 8000e16:	f023 0301 	bic.w	r3, r3, #1
 8000e1a:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <DWT_Delay_Init+0x5c>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a0b      	ldr	r2, [pc, #44]	; (8000e50 <DWT_Delay_Init+0x5c>)
 8000e22:	f043 0301 	orr.w	r3, r3, #1
 8000e26:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000e28:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <DWT_Delay_Init+0x5c>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000e2e:	bf00      	nop
     __ASM volatile ("NOP");
 8000e30:	bf00      	nop
  __ASM volatile ("NOP");
 8000e32:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000e34:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <DWT_Delay_Init+0x5c>)
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	e000      	b.n	8000e42 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000e40:	2301      	movs	r3, #1
  }
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bc80      	pop	{r7}
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	e000edf0 	.word	0xe000edf0
 8000e50:	e0001000 	.word	0xe0001000

08000e54 <delay>:

__STATIC_INLINE void delay(volatile uint32_t microseconds)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000e5c:	4b0d      	ldr	r3, [pc, #52]	; (8000e94 <delay+0x40>)
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000e62:	f002 fb97 	bl	8003594 <HAL_RCC_GetHCLKFreq>
 8000e66:	4603      	mov	r3, r0
 8000e68:	4a0b      	ldr	r2, [pc, #44]	; (8000e98 <delay+0x44>)
 8000e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e6e:	0c9b      	lsrs	r3, r3, #18
 8000e70:	687a      	ldr	r2, [r7, #4]
 8000e72:	fb02 f303 	mul.w	r3, r2, r3
 8000e76:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000e78:	bf00      	nop
 8000e7a:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <delay+0x40>)
 8000e7c:	685a      	ldr	r2, [r3, #4]
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	1ad2      	subs	r2, r2, r3
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d3f8      	bcc.n	8000e7a <delay+0x26>
}
 8000e88:	bf00      	nop
 8000e8a:	bf00      	nop
 8000e8c:	3710      	adds	r7, #16
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	e0001000 	.word	0xe0001000
 8000e98:	431bde83 	.word	0x431bde83

08000e9c <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea8:	f107 0308 	add.w	r3, r7, #8
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000eb6:	887b      	ldrh	r3, [r7, #2]
 8000eb8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000ec2:	f107 0308 	add.w	r3, r7, #8
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f001 fde5 	bl	8002a98 <HAL_GPIO_Init>
}
 8000ece:	bf00      	nop
 8000ed0:	3718      	adds	r7, #24
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b086      	sub	sp, #24
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
 8000ede:	460b      	mov	r3, r1
 8000ee0:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee2:	f107 0308 	add.w	r3, r7, #8
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	609a      	str	r2, [r3, #8]
 8000eee:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000ef0:	887b      	ldrh	r3, [r7, #2]
 8000ef2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000efc:	f107 0308 	add.w	r3, r7, #8
 8000f00:	4619      	mov	r1, r3
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f001 fdc8 	bl	8002a98 <HAL_GPIO_Init>
}
 8000f08:	bf00      	nop
 8000f0a:	3718      	adds	r7, #24
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <DHT_Start>:


void DHT_Start (void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 8000f14:	f7ff ff6e 	bl	8000df4 <DWT_Delay_Init>
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 8000f18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f1c:	480e      	ldr	r0, [pc, #56]	; (8000f58 <DHT_Start+0x48>)
 8000f1e:	f7ff ffbd 	bl	8000e9c <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);   // pull the pin low
 8000f22:	2200      	movs	r2, #0
 8000f24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f28:	480b      	ldr	r0, [pc, #44]	; (8000f58 <DHT_Start+0x48>)
 8000f2a:	f001 ff50 	bl	8002dce <HAL_GPIO_WritePin>

#if defined(TYPE_DHT11)
	delay (18000);   // wait for 18ms
 8000f2e:	f244 6050 	movw	r0, #18000	; 0x4650
 8000f32:	f7ff ff8f 	bl	8000e54 <delay>

#if defined(TYPE_DHT22)
	delay (1200);  // >1ms delay
#endif

    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 1);   // pull the pin high
 8000f36:	2201      	movs	r2, #1
 8000f38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f3c:	4806      	ldr	r0, [pc, #24]	; (8000f58 <DHT_Start+0x48>)
 8000f3e:	f001 ff46 	bl	8002dce <HAL_GPIO_WritePin>
    delay (20);   // wait for 30us
 8000f42:	2014      	movs	r0, #20
 8000f44:	f7ff ff86 	bl	8000e54 <delay>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 8000f48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f4c:	4802      	ldr	r0, [pc, #8]	; (8000f58 <DHT_Start+0x48>)
 8000f4e:	f7ff ffc2 	bl	8000ed6 <Set_Pin_Input>
}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40010c00 	.word	0x40010c00

08000f5c <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	71fb      	strb	r3, [r7, #7]
	delay (40);
 8000f66:	2028      	movs	r0, #40	; 0x28
 8000f68:	f7ff ff74 	bl	8000e54 <delay>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 8000f6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f70:	4811      	ldr	r0, [pc, #68]	; (8000fb8 <DHT_Check_Response+0x5c>)
 8000f72:	f001 ff15 	bl	8002da0 <HAL_GPIO_ReadPin>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d10f      	bne.n	8000f9c <DHT_Check_Response+0x40>
	{
		delay (80);
 8000f7c:	2050      	movs	r0, #80	; 0x50
 8000f7e:	f7ff ff69 	bl	8000e54 <delay>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
 8000f82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f86:	480c      	ldr	r0, [pc, #48]	; (8000fb8 <DHT_Check_Response+0x5c>)
 8000f88:	f001 ff0a 	bl	8002da0 <HAL_GPIO_ReadPin>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d002      	beq.n	8000f98 <DHT_Check_Response+0x3c>
 8000f92:	2301      	movs	r3, #1
 8000f94:	71fb      	strb	r3, [r7, #7]
 8000f96:	e001      	b.n	8000f9c <DHT_Check_Response+0x40>
		else Response = -1;
 8000f98:	23ff      	movs	r3, #255	; 0xff
 8000f9a:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 8000f9c:	bf00      	nop
 8000f9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fa2:	4805      	ldr	r0, [pc, #20]	; (8000fb8 <DHT_Check_Response+0x5c>)
 8000fa4:	f001 fefc 	bl	8002da0 <HAL_GPIO_ReadPin>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d1f7      	bne.n	8000f9e <DHT_Check_Response+0x42>

	return Response;
 8000fae:	79fb      	ldrb	r3, [r7, #7]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40010c00 	.word	0x40010c00

08000fbc <DHT_Read>:

uint8_t DHT_Read (void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	71bb      	strb	r3, [r7, #6]
 8000fc6:	e03a      	b.n	800103e <DHT_Read+0x82>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 8000fc8:	bf00      	nop
 8000fca:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fce:	4820      	ldr	r0, [pc, #128]	; (8001050 <DHT_Read+0x94>)
 8000fd0:	f001 fee6 	bl	8002da0 <HAL_GPIO_ReadPin>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d0f7      	beq.n	8000fca <DHT_Read+0xe>
		delay (40);   // wait for 40 us
 8000fda:	2028      	movs	r0, #40	; 0x28
 8000fdc:	f7ff ff3a 	bl	8000e54 <delay>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 8000fe0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fe4:	481a      	ldr	r0, [pc, #104]	; (8001050 <DHT_Read+0x94>)
 8000fe6:	f001 fedb 	bl	8002da0 <HAL_GPIO_ReadPin>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d10e      	bne.n	800100e <DHT_Read+0x52>
		{
			i&= ~(1<<(7-j));   // write 0
 8000ff0:	79bb      	ldrb	r3, [r7, #6]
 8000ff2:	f1c3 0307 	rsb	r3, r3, #7
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	b25b      	sxtb	r3, r3
 8000ffe:	43db      	mvns	r3, r3
 8001000:	b25a      	sxtb	r2, r3
 8001002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001006:	4013      	ands	r3, r2
 8001008:	b25b      	sxtb	r3, r3
 800100a:	71fb      	strb	r3, [r7, #7]
 800100c:	e00b      	b.n	8001026 <DHT_Read+0x6a>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 800100e:	79bb      	ldrb	r3, [r7, #6]
 8001010:	f1c3 0307 	rsb	r3, r3, #7
 8001014:	2201      	movs	r2, #1
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	b25a      	sxtb	r2, r3
 800101c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001020:	4313      	orrs	r3, r2
 8001022:	b25b      	sxtb	r3, r3
 8001024:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 8001026:	bf00      	nop
 8001028:	f44f 7100 	mov.w	r1, #512	; 0x200
 800102c:	4808      	ldr	r0, [pc, #32]	; (8001050 <DHT_Read+0x94>)
 800102e:	f001 feb7 	bl	8002da0 <HAL_GPIO_ReadPin>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d1f7      	bne.n	8001028 <DHT_Read+0x6c>
	for (j=0;j<8;j++)
 8001038:	79bb      	ldrb	r3, [r7, #6]
 800103a:	3301      	adds	r3, #1
 800103c:	71bb      	strb	r3, [r7, #6]
 800103e:	79bb      	ldrb	r3, [r7, #6]
 8001040:	2b07      	cmp	r3, #7
 8001042:	d9c1      	bls.n	8000fc8 <DHT_Read+0xc>
	}
	return i;
 8001044:	79fb      	ldrb	r3, [r7, #7]
}
 8001046:	4618      	mov	r0, r3
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40010c00 	.word	0x40010c00

08001054 <DHT_GetData>:



void DHT_GetData (DHT_DataTypedef *DHT_Data)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
    DHT_Start ();
 800105c:	f7ff ff58 	bl	8000f10 <DHT_Start>
	Presence = DHT_Check_Response ();
 8001060:	f7ff ff7c 	bl	8000f5c <DHT_Check_Response>
 8001064:	4603      	mov	r3, r0
 8001066:	461a      	mov	r2, r3
 8001068:	4b22      	ldr	r3, [pc, #136]	; (80010f4 <DHT_GetData+0xa0>)
 800106a:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT_Read ();
 800106c:	f7ff ffa6 	bl	8000fbc <DHT_Read>
 8001070:	4603      	mov	r3, r0
 8001072:	461a      	mov	r2, r3
 8001074:	4b20      	ldr	r3, [pc, #128]	; (80010f8 <DHT_GetData+0xa4>)
 8001076:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 8001078:	f7ff ffa0 	bl	8000fbc <DHT_Read>
 800107c:	4603      	mov	r3, r0
 800107e:	461a      	mov	r2, r3
 8001080:	4b1e      	ldr	r3, [pc, #120]	; (80010fc <DHT_GetData+0xa8>)
 8001082:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 8001084:	f7ff ff9a 	bl	8000fbc <DHT_Read>
 8001088:	4603      	mov	r3, r0
 800108a:	461a      	mov	r2, r3
 800108c:	4b1c      	ldr	r3, [pc, #112]	; (8001100 <DHT_GetData+0xac>)
 800108e:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 8001090:	f7ff ff94 	bl	8000fbc <DHT_Read>
 8001094:	4603      	mov	r3, r0
 8001096:	461a      	mov	r2, r3
 8001098:	4b1a      	ldr	r3, [pc, #104]	; (8001104 <DHT_GetData+0xb0>)
 800109a:	701a      	strb	r2, [r3, #0]
	SUM = DHT_Read();
 800109c:	f7ff ff8e 	bl	8000fbc <DHT_Read>
 80010a0:	4603      	mov	r3, r0
 80010a2:	b29a      	uxth	r2, r3
 80010a4:	4b18      	ldr	r3, [pc, #96]	; (8001108 <DHT_GetData+0xb4>)
 80010a6:	801a      	strh	r2, [r3, #0]

	if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 80010a8:	4b17      	ldr	r3, [pc, #92]	; (8001108 <DHT_GetData+0xb4>)
 80010aa:	881b      	ldrh	r3, [r3, #0]
 80010ac:	4619      	mov	r1, r3
 80010ae:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <DHT_GetData+0xa4>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	461a      	mov	r2, r3
 80010b4:	4b11      	ldr	r3, [pc, #68]	; (80010fc <DHT_GetData+0xa8>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	4413      	add	r3, r2
 80010ba:	4a11      	ldr	r2, [pc, #68]	; (8001100 <DHT_GetData+0xac>)
 80010bc:	7812      	ldrb	r2, [r2, #0]
 80010be:	4413      	add	r3, r2
 80010c0:	4a10      	ldr	r2, [pc, #64]	; (8001104 <DHT_GetData+0xb0>)
 80010c2:	7812      	ldrb	r2, [r2, #0]
 80010c4:	4413      	add	r3, r2
 80010c6:	4299      	cmp	r1, r3
 80010c8:	d10f      	bne.n	80010ea <DHT_GetData+0x96>
	{
		#if defined(TYPE_DHT11)
			DHT_Data->Temperature = Temp_byte1;
 80010ca:	4b0d      	ldr	r3, [pc, #52]	; (8001100 <DHT_GetData+0xac>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff fe00 	bl	8000cd4 <__aeabi_ui2f>
 80010d4:	4602      	mov	r2, r0
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	601a      	str	r2, [r3, #0]
			DHT_Data->Humidity = Rh_byte1;
 80010da:	4b07      	ldr	r3, [pc, #28]	; (80010f8 <DHT_GetData+0xa4>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff fdf8 	bl	8000cd4 <__aeabi_ui2f>
 80010e4:	4602      	mov	r2, r0
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	605a      	str	r2, [r3, #4]
		#if defined(TYPE_DHT22)
			DHT_Data->Temperature = ((Temp_byte1<<8)|Temp_byte2);
			DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2);
		#endif
	}
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	200001fc 	.word	0x200001fc
 80010f8:	2000020c 	.word	0x2000020c
 80010fc:	2000020e 	.word	0x2000020e
 8001100:	2000020d 	.word	0x2000020d
 8001104:	20000212 	.word	0x20000212
 8001108:	20000210 	.word	0x20000210

0800110c <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart1.Instance)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	4b19      	ldr	r3, [pc, #100]	; (8001180 <HAL_UART_RxCpltCallback+0x74>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	429a      	cmp	r2, r3
 800111e:	d12b      	bne.n	8001178 <HAL_UART_RxCpltCallback+0x6c>
		{
		if(rec!=13)
 8001120:	4b18      	ldr	r3, [pc, #96]	; (8001184 <HAL_UART_RxCpltCallback+0x78>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b0d      	cmp	r3, #13
 8001126:	d00b      	beq.n	8001140 <HAL_UART_RxCpltCallback+0x34>
		{
			buffer[i++] = rec;
 8001128:	4b17      	ldr	r3, [pc, #92]	; (8001188 <HAL_UART_RxCpltCallback+0x7c>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	1c5a      	adds	r2, r3, #1
 800112e:	b2d1      	uxtb	r1, r2
 8001130:	4a15      	ldr	r2, [pc, #84]	; (8001188 <HAL_UART_RxCpltCallback+0x7c>)
 8001132:	7011      	strb	r1, [r2, #0]
 8001134:	461a      	mov	r2, r3
 8001136:	4b13      	ldr	r3, [pc, #76]	; (8001184 <HAL_UART_RxCpltCallback+0x78>)
 8001138:	7819      	ldrb	r1, [r3, #0]
 800113a:	4b14      	ldr	r3, [pc, #80]	; (800118c <HAL_UART_RxCpltCallback+0x80>)
 800113c:	5499      	strb	r1, [r3, r2]
 800113e:	e016      	b.n	800116e <HAL_UART_RxCpltCallback+0x62>
		}

		else if(rec == 13)
 8001140:	4b10      	ldr	r3, [pc, #64]	; (8001184 <HAL_UART_RxCpltCallback+0x78>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b0d      	cmp	r3, #13
 8001146:	d112      	bne.n	800116e <HAL_UART_RxCpltCallback+0x62>
		{
			i = 0;
 8001148:	4b0f      	ldr	r3, [pc, #60]	; (8001188 <HAL_UART_RxCpltCallback+0x7c>)
 800114a:	2200      	movs	r2, #0
 800114c:	701a      	strb	r2, [r3, #0]
			for(int cnt = 0; cnt < sizeof(buffer);cnt++)
 800114e:	2300      	movs	r3, #0
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	e009      	b.n	8001168 <HAL_UART_RxCpltCallback+0x5c>
			{
				buffer[cnt]= null;
 8001154:	4b0e      	ldr	r3, [pc, #56]	; (8001190 <HAL_UART_RxCpltCallback+0x84>)
 8001156:	7819      	ldrb	r1, [r3, #0]
 8001158:	4a0c      	ldr	r2, [pc, #48]	; (800118c <HAL_UART_RxCpltCallback+0x80>)
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	4413      	add	r3, r2
 800115e:	460a      	mov	r2, r1
 8001160:	701a      	strb	r2, [r3, #0]
			for(int cnt = 0; cnt < sizeof(buffer);cnt++)
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	3301      	adds	r3, #1
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	2b13      	cmp	r3, #19
 800116c:	d9f2      	bls.n	8001154 <HAL_UART_RxCpltCallback+0x48>
			}

		}
		HAL_UART_Receive_IT(&huart1,(uint8_t*)&rec,1);
 800116e:	2201      	movs	r2, #1
 8001170:	4904      	ldr	r1, [pc, #16]	; (8001184 <HAL_UART_RxCpltCallback+0x78>)
 8001172:	4803      	ldr	r0, [pc, #12]	; (8001180 <HAL_UART_RxCpltCallback+0x74>)
 8001174:	f003 fab9 	bl	80046ea <HAL_UART_Receive_IT>

	}
}
 8001178:	bf00      	nop
 800117a:	3710      	adds	r7, #16
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000268 	.word	0x20000268
 8001184:	2000037c 	.word	0x2000037c
 8001188:	200001fd 	.word	0x200001fd
 800118c:	200002b4 	.word	0x200002b4
 8001190:	2000022c 	.word	0x2000022c

08001194 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  if(htim->Instance == htim1.Instance){
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	4b24      	ldr	r3, [pc, #144]	; (8001234 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d140      	bne.n	800122a <HAL_TIM_PeriodElapsedCallback+0x96>
	  status = MFRC522_Request(PICC_REQIDL, str);	// Find cards, return card type
 80011a8:	4923      	ldr	r1, [pc, #140]	; (8001238 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80011aa:	2026      	movs	r0, #38	; 0x26
 80011ac:	f000 fb3e 	bl	800182c <MFRC522_Request>
 80011b0:	4603      	mov	r3, r0
 80011b2:	461a      	mov	r2, r3
 80011b4:	4b21      	ldr	r3, [pc, #132]	; (800123c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80011b6:	701a      	strb	r2, [r3, #0]
	  	  		if (status == MI_OK) status = MFRC522_Anticoll(str);
 80011b8:	4b20      	ldr	r3, [pc, #128]	; (800123c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d106      	bne.n	80011ce <HAL_TIM_PeriodElapsedCallback+0x3a>
 80011c0:	481d      	ldr	r0, [pc, #116]	; (8001238 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80011c2:	f000 fc27 	bl	8001a14 <MFRC522_Anticoll>
 80011c6:	4603      	mov	r3, r0
 80011c8:	461a      	mov	r2, r3
 80011ca:	4b1c      	ldr	r3, [pc, #112]	; (800123c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80011cc:	701a      	strb	r2, [r3, #0]
	  	  			memcpy(serNum, str, 5);
 80011ce:	4b1c      	ldr	r3, [pc, #112]	; (8001240 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80011d0:	4a19      	ldr	r2, [pc, #100]	; (8001238 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80011d2:	6811      	ldr	r1, [r2, #0]
 80011d4:	6019      	str	r1, [r3, #0]
 80011d6:	7912      	ldrb	r2, [r2, #4]
 80011d8:	711a      	strb	r2, [r3, #4]
	  	  		if (status == MI_OK)
 80011da:	4b18      	ldr	r3, [pc, #96]	; (800123c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d11c      	bne.n	800121c <HAL_TIM_PeriodElapsedCallback+0x88>
	  	  		{
	  	  			if (serNum[1] == 14 && serNum[2] == 70 && serNum[3] == 24 && serNum[4] == 211)
 80011e2:	4b17      	ldr	r3, [pc, #92]	; (8001240 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80011e4:	785b      	ldrb	r3, [r3, #1]
 80011e6:	2b0e      	cmp	r3, #14
 80011e8:	d112      	bne.n	8001210 <HAL_TIM_PeriodElapsedCallback+0x7c>
 80011ea:	4b15      	ldr	r3, [pc, #84]	; (8001240 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80011ec:	789b      	ldrb	r3, [r3, #2]
 80011ee:	2b46      	cmp	r3, #70	; 0x46
 80011f0:	d10e      	bne.n	8001210 <HAL_TIM_PeriodElapsedCallback+0x7c>
 80011f2:	4b13      	ldr	r3, [pc, #76]	; (8001240 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80011f4:	78db      	ldrb	r3, [r3, #3]
 80011f6:	2b18      	cmp	r3, #24
 80011f8:	d10a      	bne.n	8001210 <HAL_TIM_PeriodElapsedCallback+0x7c>
 80011fa:	4b11      	ldr	r3, [pc, #68]	; (8001240 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80011fc:	791b      	ldrb	r3, [r3, #4]
 80011fe:	2bd3      	cmp	r3, #211	; 0xd3
 8001200:	d106      	bne.n	8001210 <HAL_TIM_PeriodElapsedCallback+0x7c>
	  	  			{
	  	  				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8001202:	2200      	movs	r2, #0
 8001204:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001208:	480e      	ldr	r0, [pc, #56]	; (8001244 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800120a:	f001 fde0 	bl	8002dce <HAL_GPIO_WritePin>
 800120e:	e005      	b.n	800121c <HAL_TIM_PeriodElapsedCallback+0x88>
	  	  			}
	  	  			else HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8001210:	2201      	movs	r2, #1
 8001212:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001216:	480b      	ldr	r0, [pc, #44]	; (8001244 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001218:	f001 fdd9 	bl	8002dce <HAL_GPIO_WritePin>
	  	  		}
	  adc = HAL_ADC_GetValue(&hadc1);
 800121c:	480a      	ldr	r0, [pc, #40]	; (8001248 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800121e:	f001 f8dd 	bl	80023dc <HAL_ADC_GetValue>
 8001222:	4603      	mov	r3, r0
 8001224:	b29a      	uxth	r2, r3
 8001226:	4b09      	ldr	r3, [pc, #36]	; (800124c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001228:	801a      	strh	r2, [r3, #0]
  }
}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	200002cc 	.word	0x200002cc
 8001238:	2000036c 	.word	0x2000036c
 800123c:	20000384 	.word	0x20000384
 8001240:	20000230 	.word	0x20000230
 8001244:	40011000 	.word	0x40011000
 8001248:	20000238 	.word	0x20000238
 800124c:	200002c8 	.word	0x200002c8

08001250 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001254:	f000 feb6 	bl	8001fc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001258:	f000 f850 	bl	80012fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800125c:	f000 f99a 	bl	8001594 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001260:	f000 f8a8 	bl	80013b4 <MX_ADC1_Init>
  MX_SPI1_Init();
 8001264:	f000 f8e4 	bl	8001430 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001268:	f000 f96a 	bl	8001540 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800126c:	f000 f916 	bl	800149c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  MFRC522_Init();
 8001270:	f000 fc15 	bl	8001a9e <MFRC522_Init>
  HAL_UART_Receive_IT(&huart1,(uint8_t*)&rec,1);
 8001274:	2201      	movs	r2, #1
 8001276:	4918      	ldr	r1, [pc, #96]	; (80012d8 <main+0x88>)
 8001278:	4818      	ldr	r0, [pc, #96]	; (80012dc <main+0x8c>)
 800127a:	f003 fa36 	bl	80046ea <HAL_UART_Receive_IT>
  HAL_ADC_Start(&hadc1);
 800127e:	4818      	ldr	r0, [pc, #96]	; (80012e0 <main+0x90>)
 8001280:	f000 fffe 	bl	8002280 <HAL_ADC_Start>
  HAL_TIM_Base_Start_IT(&htim1);
 8001284:	4817      	ldr	r0, [pc, #92]	; (80012e4 <main+0x94>)
 8001286:	f002 fda7 	bl	8003dd8 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	  	DHT_GetData(&DHT11_Data);
 800128a:	4817      	ldr	r0, [pc, #92]	; (80012e8 <main+0x98>)
 800128c:	f7ff fee2 	bl	8001054 <DHT_GetData>
	  		Temperature = DHT11_Data.Temperature;
 8001290:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <main+0x98>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a15      	ldr	r2, [pc, #84]	; (80012ec <main+0x9c>)
 8001296:	6013      	str	r3, [r2, #0]
	  		Humidity = DHT11_Data.Humidity;
 8001298:	4b13      	ldr	r3, [pc, #76]	; (80012e8 <main+0x98>)
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	4a14      	ldr	r2, [pc, #80]	; (80012f0 <main+0xa0>)
 800129e:	6013      	str	r3, [r2, #0]
	  		sprintf(sendo,"NHIETDO%0.2f",Temperature);
 80012a0:	4b12      	ldr	r3, [pc, #72]	; (80012ec <main+0x9c>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff f8bf 	bl	8000428 <__aeabi_f2d>
 80012aa:	4602      	mov	r2, r0
 80012ac:	460b      	mov	r3, r1
 80012ae:	4911      	ldr	r1, [pc, #68]	; (80012f4 <main+0xa4>)
 80012b0:	4811      	ldr	r0, [pc, #68]	; (80012f8 <main+0xa8>)
 80012b2:	f004 fd1b 	bl	8005cec <siprintf>
	  		HAL_Delay(500);
 80012b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012ba:	f000 fee5 	bl	8002088 <HAL_Delay>
	  		HAL_UART_Transmit(&huart1,(uint8_t *) sendo,sizeof(sendo),1000);
 80012be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012c2:	2214      	movs	r2, #20
 80012c4:	490c      	ldr	r1, [pc, #48]	; (80012f8 <main+0xa8>)
 80012c6:	4805      	ldr	r0, [pc, #20]	; (80012dc <main+0x8c>)
 80012c8:	f003 f97d 	bl	80045c6 <HAL_UART_Transmit>
	  		HAL_Delay(3000);
 80012cc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80012d0:	f000 feda 	bl	8002088 <HAL_Delay>
	  	  	DHT_GetData(&DHT11_Data);
 80012d4:	e7d9      	b.n	800128a <main+0x3a>
 80012d6:	bf00      	nop
 80012d8:	2000037c 	.word	0x2000037c
 80012dc:	20000268 	.word	0x20000268
 80012e0:	20000238 	.word	0x20000238
 80012e4:	200002cc 	.word	0x200002cc
 80012e8:	200002ac 	.word	0x200002ac
 80012ec:	20000228 	.word	0x20000228
 80012f0:	20000380 	.word	0x20000380
 80012f4:	08009828 	.word	0x08009828
 80012f8:	20000214 	.word	0x20000214

080012fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b094      	sub	sp, #80	; 0x50
 8001300:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001302:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001306:	2228      	movs	r2, #40	; 0x28
 8001308:	2100      	movs	r1, #0
 800130a:	4618      	mov	r0, r3
 800130c:	f003 fe70 	bl	8004ff0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001320:	1d3b      	adds	r3, r7, #4
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	605a      	str	r2, [r3, #4]
 8001328:	609a      	str	r2, [r3, #8]
 800132a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800132c:	2301      	movs	r3, #1
 800132e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001330:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001334:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001336:	2300      	movs	r3, #0
 8001338:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800133a:	2301      	movs	r3, #1
 800133c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800133e:	2302      	movs	r3, #2
 8001340:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001342:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001346:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001348:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800134c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800134e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001352:	4618      	mov	r0, r3
 8001354:	f001 fd54 	bl	8002e00 <HAL_RCC_OscConfig>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800135e:	f000 f99d 	bl	800169c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001362:	230f      	movs	r3, #15
 8001364:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001366:	2302      	movs	r3, #2
 8001368:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800136a:	2300      	movs	r3, #0
 800136c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800136e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001372:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001374:	2300      	movs	r3, #0
 8001376:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001378:	f107 0314 	add.w	r3, r7, #20
 800137c:	2102      	movs	r1, #2
 800137e:	4618      	mov	r0, r3
 8001380:	f001 ffbe 	bl	8003300 <HAL_RCC_ClockConfig>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800138a:	f000 f987 	bl	800169c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800138e:	2302      	movs	r3, #2
 8001390:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001392:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001396:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001398:	1d3b      	adds	r3, r7, #4
 800139a:	4618      	mov	r0, r3
 800139c:	f002 f94a 	bl	8003634 <HAL_RCCEx_PeriphCLKConfig>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <SystemClock_Config+0xae>
  {
    Error_Handler();
 80013a6:	f000 f979 	bl	800169c <Error_Handler>
  }
}
 80013aa:	bf00      	nop
 80013ac:	3750      	adds	r7, #80	; 0x50
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
	...

080013b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013ba:	1d3b      	adds	r3, r7, #4
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80013c4:	4b18      	ldr	r3, [pc, #96]	; (8001428 <MX_ADC1_Init+0x74>)
 80013c6:	4a19      	ldr	r2, [pc, #100]	; (800142c <MX_ADC1_Init+0x78>)
 80013c8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013ca:	4b17      	ldr	r3, [pc, #92]	; (8001428 <MX_ADC1_Init+0x74>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80013d0:	4b15      	ldr	r3, [pc, #84]	; (8001428 <MX_ADC1_Init+0x74>)
 80013d2:	2201      	movs	r2, #1
 80013d4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013d6:	4b14      	ldr	r3, [pc, #80]	; (8001428 <MX_ADC1_Init+0x74>)
 80013d8:	2200      	movs	r2, #0
 80013da:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013dc:	4b12      	ldr	r3, [pc, #72]	; (8001428 <MX_ADC1_Init+0x74>)
 80013de:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80013e2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013e4:	4b10      	ldr	r3, [pc, #64]	; (8001428 <MX_ADC1_Init+0x74>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80013ea:	4b0f      	ldr	r3, [pc, #60]	; (8001428 <MX_ADC1_Init+0x74>)
 80013ec:	2201      	movs	r2, #1
 80013ee:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013f0:	480d      	ldr	r0, [pc, #52]	; (8001428 <MX_ADC1_Init+0x74>)
 80013f2:	f000 fe6d 	bl	80020d0 <HAL_ADC_Init>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80013fc:	f000 f94e 	bl	800169c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001400:	2300      	movs	r3, #0
 8001402:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001404:	2301      	movs	r3, #1
 8001406:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001408:	2307      	movs	r3, #7
 800140a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800140c:	1d3b      	adds	r3, r7, #4
 800140e:	4619      	mov	r1, r3
 8001410:	4805      	ldr	r0, [pc, #20]	; (8001428 <MX_ADC1_Init+0x74>)
 8001412:	f000 ffef 	bl	80023f4 <HAL_ADC_ConfigChannel>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800141c:	f000 f93e 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001420:	bf00      	nop
 8001422:	3710      	adds	r7, #16
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20000238 	.word	0x20000238
 800142c:	40012400 	.word	0x40012400

08001430 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001434:	4b17      	ldr	r3, [pc, #92]	; (8001494 <MX_SPI1_Init+0x64>)
 8001436:	4a18      	ldr	r2, [pc, #96]	; (8001498 <MX_SPI1_Init+0x68>)
 8001438:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800143a:	4b16      	ldr	r3, [pc, #88]	; (8001494 <MX_SPI1_Init+0x64>)
 800143c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001440:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001442:	4b14      	ldr	r3, [pc, #80]	; (8001494 <MX_SPI1_Init+0x64>)
 8001444:	2200      	movs	r2, #0
 8001446:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001448:	4b12      	ldr	r3, [pc, #72]	; (8001494 <MX_SPI1_Init+0x64>)
 800144a:	2200      	movs	r2, #0
 800144c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800144e:	4b11      	ldr	r3, [pc, #68]	; (8001494 <MX_SPI1_Init+0x64>)
 8001450:	2200      	movs	r2, #0
 8001452:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001454:	4b0f      	ldr	r3, [pc, #60]	; (8001494 <MX_SPI1_Init+0x64>)
 8001456:	2200      	movs	r2, #0
 8001458:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800145a:	4b0e      	ldr	r3, [pc, #56]	; (8001494 <MX_SPI1_Init+0x64>)
 800145c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001460:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001462:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <MX_SPI1_Init+0x64>)
 8001464:	2210      	movs	r2, #16
 8001466:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001468:	4b0a      	ldr	r3, [pc, #40]	; (8001494 <MX_SPI1_Init+0x64>)
 800146a:	2200      	movs	r2, #0
 800146c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800146e:	4b09      	ldr	r3, [pc, #36]	; (8001494 <MX_SPI1_Init+0x64>)
 8001470:	2200      	movs	r2, #0
 8001472:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001474:	4b07      	ldr	r3, [pc, #28]	; (8001494 <MX_SPI1_Init+0x64>)
 8001476:	2200      	movs	r2, #0
 8001478:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800147a:	4b06      	ldr	r3, [pc, #24]	; (8001494 <MX_SPI1_Init+0x64>)
 800147c:	220a      	movs	r2, #10
 800147e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001480:	4804      	ldr	r0, [pc, #16]	; (8001494 <MX_SPI1_Init+0x64>)
 8001482:	f002 f98d 	bl	80037a0 <HAL_SPI_Init>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800148c:	f000 f906 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001490:	bf00      	nop
 8001492:	bd80      	pop	{r7, pc}
 8001494:	20000314 	.word	0x20000314
 8001498:	40013000 	.word	0x40013000

0800149c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014a2:	f107 0308 	add.w	r3, r7, #8
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]
 80014ac:	609a      	str	r2, [r3, #8]
 80014ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014b0:	463b      	mov	r3, r7
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014b8:	4b1e      	ldr	r3, [pc, #120]	; (8001534 <MX_TIM1_Init+0x98>)
 80014ba:	4a1f      	ldr	r2, [pc, #124]	; (8001538 <MX_TIM1_Init+0x9c>)
 80014bc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71999;
 80014be:	4b1d      	ldr	r3, [pc, #116]	; (8001534 <MX_TIM1_Init+0x98>)
 80014c0:	4a1e      	ldr	r2, [pc, #120]	; (800153c <MX_TIM1_Init+0xa0>)
 80014c2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c4:	4b1b      	ldr	r3, [pc, #108]	; (8001534 <MX_TIM1_Init+0x98>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 80014ca:	4b1a      	ldr	r3, [pc, #104]	; (8001534 <MX_TIM1_Init+0x98>)
 80014cc:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80014d0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d2:	4b18      	ldr	r3, [pc, #96]	; (8001534 <MX_TIM1_Init+0x98>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014d8:	4b16      	ldr	r3, [pc, #88]	; (8001534 <MX_TIM1_Init+0x98>)
 80014da:	2200      	movs	r2, #0
 80014dc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014de:	4b15      	ldr	r3, [pc, #84]	; (8001534 <MX_TIM1_Init+0x98>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014e4:	4813      	ldr	r0, [pc, #76]	; (8001534 <MX_TIM1_Init+0x98>)
 80014e6:	f002 fc27 	bl	8003d38 <HAL_TIM_Base_Init>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80014f0:	f000 f8d4 	bl	800169c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014fa:	f107 0308 	add.w	r3, r7, #8
 80014fe:	4619      	mov	r1, r3
 8001500:	480c      	ldr	r0, [pc, #48]	; (8001534 <MX_TIM1_Init+0x98>)
 8001502:	f002 fdc3 	bl	800408c <HAL_TIM_ConfigClockSource>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800150c:	f000 f8c6 	bl	800169c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001510:	2300      	movs	r3, #0
 8001512:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001514:	2300      	movs	r3, #0
 8001516:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001518:	463b      	mov	r3, r7
 800151a:	4619      	mov	r1, r3
 800151c:	4805      	ldr	r0, [pc, #20]	; (8001534 <MX_TIM1_Init+0x98>)
 800151e:	f002 ff95 	bl	800444c <HAL_TIMEx_MasterConfigSynchronization>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001528:	f000 f8b8 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800152c:	bf00      	nop
 800152e:	3718      	adds	r7, #24
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	200002cc 	.word	0x200002cc
 8001538:	40012c00 	.word	0x40012c00
 800153c:	0001193f 	.word	0x0001193f

08001540 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001544:	4b11      	ldr	r3, [pc, #68]	; (800158c <MX_USART1_UART_Init+0x4c>)
 8001546:	4a12      	ldr	r2, [pc, #72]	; (8001590 <MX_USART1_UART_Init+0x50>)
 8001548:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800154a:	4b10      	ldr	r3, [pc, #64]	; (800158c <MX_USART1_UART_Init+0x4c>)
 800154c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001550:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001552:	4b0e      	ldr	r3, [pc, #56]	; (800158c <MX_USART1_UART_Init+0x4c>)
 8001554:	2200      	movs	r2, #0
 8001556:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001558:	4b0c      	ldr	r3, [pc, #48]	; (800158c <MX_USART1_UART_Init+0x4c>)
 800155a:	2200      	movs	r2, #0
 800155c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800155e:	4b0b      	ldr	r3, [pc, #44]	; (800158c <MX_USART1_UART_Init+0x4c>)
 8001560:	2200      	movs	r2, #0
 8001562:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001564:	4b09      	ldr	r3, [pc, #36]	; (800158c <MX_USART1_UART_Init+0x4c>)
 8001566:	220c      	movs	r2, #12
 8001568:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800156a:	4b08      	ldr	r3, [pc, #32]	; (800158c <MX_USART1_UART_Init+0x4c>)
 800156c:	2200      	movs	r2, #0
 800156e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001570:	4b06      	ldr	r3, [pc, #24]	; (800158c <MX_USART1_UART_Init+0x4c>)
 8001572:	2200      	movs	r2, #0
 8001574:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001576:	4805      	ldr	r0, [pc, #20]	; (800158c <MX_USART1_UART_Init+0x4c>)
 8001578:	f002 ffd8 	bl	800452c <HAL_UART_Init>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001582:	f000 f88b 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20000268 	.word	0x20000268
 8001590:	40013800 	.word	0x40013800

08001594 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b088      	sub	sp, #32
 8001598:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159a:	f107 0310 	add.w	r3, r7, #16
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	605a      	str	r2, [r3, #4]
 80015a4:	609a      	str	r2, [r3, #8]
 80015a6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015a8:	4b38      	ldr	r3, [pc, #224]	; (800168c <MX_GPIO_Init+0xf8>)
 80015aa:	699b      	ldr	r3, [r3, #24]
 80015ac:	4a37      	ldr	r2, [pc, #220]	; (800168c <MX_GPIO_Init+0xf8>)
 80015ae:	f043 0310 	orr.w	r3, r3, #16
 80015b2:	6193      	str	r3, [r2, #24]
 80015b4:	4b35      	ldr	r3, [pc, #212]	; (800168c <MX_GPIO_Init+0xf8>)
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	f003 0310 	and.w	r3, r3, #16
 80015bc:	60fb      	str	r3, [r7, #12]
 80015be:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015c0:	4b32      	ldr	r3, [pc, #200]	; (800168c <MX_GPIO_Init+0xf8>)
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	4a31      	ldr	r2, [pc, #196]	; (800168c <MX_GPIO_Init+0xf8>)
 80015c6:	f043 0320 	orr.w	r3, r3, #32
 80015ca:	6193      	str	r3, [r2, #24]
 80015cc:	4b2f      	ldr	r3, [pc, #188]	; (800168c <MX_GPIO_Init+0xf8>)
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	f003 0320 	and.w	r3, r3, #32
 80015d4:	60bb      	str	r3, [r7, #8]
 80015d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d8:	4b2c      	ldr	r3, [pc, #176]	; (800168c <MX_GPIO_Init+0xf8>)
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	4a2b      	ldr	r2, [pc, #172]	; (800168c <MX_GPIO_Init+0xf8>)
 80015de:	f043 0304 	orr.w	r3, r3, #4
 80015e2:	6193      	str	r3, [r2, #24]
 80015e4:	4b29      	ldr	r3, [pc, #164]	; (800168c <MX_GPIO_Init+0xf8>)
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	f003 0304 	and.w	r3, r3, #4
 80015ec:	607b      	str	r3, [r7, #4]
 80015ee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f0:	4b26      	ldr	r3, [pc, #152]	; (800168c <MX_GPIO_Init+0xf8>)
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	4a25      	ldr	r2, [pc, #148]	; (800168c <MX_GPIO_Init+0xf8>)
 80015f6:	f043 0308 	orr.w	r3, r3, #8
 80015fa:	6193      	str	r3, [r2, #24]
 80015fc:	4b23      	ldr	r3, [pc, #140]	; (800168c <MX_GPIO_Init+0xf8>)
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	f003 0308 	and.w	r3, r3, #8
 8001604:	603b      	str	r3, [r7, #0]
 8001606:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001608:	2200      	movs	r2, #0
 800160a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800160e:	4820      	ldr	r0, [pc, #128]	; (8001690 <MX_GPIO_Init+0xfc>)
 8001610:	f001 fbdd 	bl	8002dce <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001614:	2200      	movs	r2, #0
 8001616:	2110      	movs	r1, #16
 8001618:	481e      	ldr	r0, [pc, #120]	; (8001694 <MX_GPIO_Init+0x100>)
 800161a:	f001 fbd8 	bl	8002dce <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800161e:	2200      	movs	r2, #0
 8001620:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001624:	481c      	ldr	r0, [pc, #112]	; (8001698 <MX_GPIO_Init+0x104>)
 8001626:	f001 fbd2 	bl	8002dce <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800162a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800162e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001630:	2301      	movs	r3, #1
 8001632:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001638:	2302      	movs	r3, #2
 800163a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800163c:	f107 0310 	add.w	r3, r7, #16
 8001640:	4619      	mov	r1, r3
 8001642:	4813      	ldr	r0, [pc, #76]	; (8001690 <MX_GPIO_Init+0xfc>)
 8001644:	f001 fa28 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001648:	2310      	movs	r3, #16
 800164a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164c:	2301      	movs	r3, #1
 800164e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001654:	2302      	movs	r3, #2
 8001656:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001658:	f107 0310 	add.w	r3, r7, #16
 800165c:	4619      	mov	r1, r3
 800165e:	480d      	ldr	r0, [pc, #52]	; (8001694 <MX_GPIO_Init+0x100>)
 8001660:	f001 fa1a 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001664:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001668:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800166a:	2301      	movs	r3, #1
 800166c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2300      	movs	r3, #0
 8001670:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001672:	2302      	movs	r3, #2
 8001674:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001676:	f107 0310 	add.w	r3, r7, #16
 800167a:	4619      	mov	r1, r3
 800167c:	4806      	ldr	r0, [pc, #24]	; (8001698 <MX_GPIO_Init+0x104>)
 800167e:	f001 fa0b 	bl	8002a98 <HAL_GPIO_Init>

}
 8001682:	bf00      	nop
 8001684:	3720      	adds	r7, #32
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40021000 	.word	0x40021000
 8001690:	40011000 	.word	0x40011000
 8001694:	40010800 	.word	0x40010800
 8001698:	40010c00 	.word	0x40010c00

0800169c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016a0:	b672      	cpsid	i
}
 80016a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016a4:	e7fe      	b.n	80016a4 <Error_Handler+0x8>
	...

080016a8 <SPI1SendByte>:
extern SPI_HandleTypeDef hspi1;

// RC522


uint8_t SPI1SendByte(uint8_t data) {
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af02      	add	r7, sp, #8
 80016ae:	4603      	mov	r3, r0
 80016b0:	71fb      	strb	r3, [r7, #7]
	unsigned char writeCommand[1];
	unsigned char readValue[1];
	
	writeCommand[0] = data;
 80016b2:	79fb      	ldrb	r3, [r7, #7]
 80016b4:	733b      	strb	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&writeCommand, (uint8_t*)&readValue, 1, 10);
 80016b6:	f107 0208 	add.w	r2, r7, #8
 80016ba:	f107 010c 	add.w	r1, r7, #12
 80016be:	230a      	movs	r3, #10
 80016c0:	9300      	str	r3, [sp, #0]
 80016c2:	2301      	movs	r3, #1
 80016c4:	4803      	ldr	r0, [pc, #12]	; (80016d4 <SPI1SendByte+0x2c>)
 80016c6:	f002 f8ef 	bl	80038a8 <HAL_SPI_TransmitReceive>
	return readValue[0];
 80016ca:	7a3b      	ldrb	r3, [r7, #8]
	//SPI1->DR = data;															// вывод в SPI1
	//while (!(SPI1->SR & SPI_SR_RXNE));     				// ждем окончания обмена (STM32F103)
	//for (uint8_t i=0; i<50; i++) {};
	//data = SPI1->DR;															// читаем принятые данные
	//return data;
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3710      	adds	r7, #16
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	20000314 	.word	0x20000314

080016d8 <SPI1_WriteReg>:

void SPI1_WriteReg(uint8_t address, uint8_t value) {
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	460a      	mov	r2, r1
 80016e2:	71fb      	strb	r3, [r7, #7]
 80016e4:	4613      	mov	r3, r2
 80016e6:	71bb      	strb	r3, [r7, #6]
	cs_reset();
 80016e8:	2200      	movs	r2, #0
 80016ea:	2110      	movs	r1, #16
 80016ec:	4809      	ldr	r0, [pc, #36]	; (8001714 <SPI1_WriteReg+0x3c>)
 80016ee:	f001 fb6e 	bl	8002dce <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 80016f2:	79fb      	ldrb	r3, [r7, #7]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff ffd7 	bl	80016a8 <SPI1SendByte>
	SPI1SendByte(value);
 80016fa:	79bb      	ldrb	r3, [r7, #6]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff ffd3 	bl	80016a8 <SPI1SendByte>
	cs_set();
 8001702:	2201      	movs	r2, #1
 8001704:	2110      	movs	r1, #16
 8001706:	4803      	ldr	r0, [pc, #12]	; (8001714 <SPI1_WriteReg+0x3c>)
 8001708:	f001 fb61 	bl	8002dce <HAL_GPIO_WritePin>
}
 800170c:	bf00      	nop
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40010800 	.word	0x40010800

08001718 <SPI1_ReadReg>:

uint8_t SPI1_ReadReg(uint8_t address) {
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	71fb      	strb	r3, [r7, #7]
	uint8_t	val;

	cs_reset();
 8001722:	2200      	movs	r2, #0
 8001724:	2110      	movs	r1, #16
 8001726:	480b      	ldr	r0, [pc, #44]	; (8001754 <SPI1_ReadReg+0x3c>)
 8001728:	f001 fb51 	bl	8002dce <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 800172c:	79fb      	ldrb	r3, [r7, #7]
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff ffba 	bl	80016a8 <SPI1SendByte>
	val = SPI1SendByte(0x00);
 8001734:	2000      	movs	r0, #0
 8001736:	f7ff ffb7 	bl	80016a8 <SPI1SendByte>
 800173a:	4603      	mov	r3, r0
 800173c:	73fb      	strb	r3, [r7, #15]
	cs_set();
 800173e:	2201      	movs	r2, #1
 8001740:	2110      	movs	r1, #16
 8001742:	4804      	ldr	r0, [pc, #16]	; (8001754 <SPI1_ReadReg+0x3c>)
 8001744:	f001 fb43 	bl	8002dce <HAL_GPIO_WritePin>
	return val;
 8001748:	7bfb      	ldrb	r3, [r7, #15]
}
 800174a:	4618      	mov	r0, r3
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40010800 	.word	0x40010800

08001758 <MFRC522_WriteRegister>:

void MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	460a      	mov	r2, r1
 8001762:	71fb      	strb	r3, [r7, #7]
 8001764:	4613      	mov	r3, r2
 8001766:	71bb      	strb	r3, [r7, #6]
	addr = (addr << 1) & 0x7E;															// Address format: 0XXXXXX0
 8001768:	79fb      	ldrb	r3, [r7, #7]
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	b2db      	uxtb	r3, r3
 800176e:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8001772:	71fb      	strb	r3, [r7, #7]
  SPI1_WriteReg(addr, val);
 8001774:	79ba      	ldrb	r2, [r7, #6]
 8001776:	79fb      	ldrb	r3, [r7, #7]
 8001778:	4611      	mov	r1, r2
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff ffac 	bl	80016d8 <SPI1_WriteReg>
}
 8001780:	bf00      	nop
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <MFRC522_ReadRegister>:

uint8_t MFRC522_ReadRegister(uint8_t addr) {
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	addr = ((addr << 1) & 0x7E) | 0x80;
 8001792:	79fb      	ldrb	r3, [r7, #7]
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	b25b      	sxtb	r3, r3
 8001798:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800179c:	b25b      	sxtb	r3, r3
 800179e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017a2:	b25b      	sxtb	r3, r3
 80017a4:	71fb      	strb	r3, [r7, #7]
	val = SPI1_ReadReg(addr);
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff ffb5 	bl	8001718 <SPI1_ReadReg>
 80017ae:	4603      	mov	r3, r0
 80017b0:	73fb      	strb	r3, [r7, #15]
	return val;	
 80017b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3710      	adds	r7, #16
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <MFRC522_SetBitMask>:
		if (CardID[i] != CompareID[i]) return MI_ERR;
	}
	return MI_OK;
}

void MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	460a      	mov	r2, r1
 80017c6:	71fb      	strb	r3, [r7, #7]
 80017c8:	4613      	mov	r3, r2
 80017ca:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) | mask);
 80017cc:	79fb      	ldrb	r3, [r7, #7]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff ffda 	bl	8001788 <MFRC522_ReadRegister>
 80017d4:	4603      	mov	r3, r0
 80017d6:	461a      	mov	r2, r3
 80017d8:	79bb      	ldrb	r3, [r7, #6]
 80017da:	4313      	orrs	r3, r2
 80017dc:	b2da      	uxtb	r2, r3
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	4611      	mov	r1, r2
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff ffb8 	bl	8001758 <MFRC522_WriteRegister>
}
 80017e8:	bf00      	nop
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <MFRC522_ClearBitMask>:

void MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	460a      	mov	r2, r1
 80017fa:	71fb      	strb	r3, [r7, #7]
 80017fc:	4613      	mov	r3, r2
 80017fe:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) & (~mask));
 8001800:	79fb      	ldrb	r3, [r7, #7]
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff ffc0 	bl	8001788 <MFRC522_ReadRegister>
 8001808:	4603      	mov	r3, r0
 800180a:	b25a      	sxtb	r2, r3
 800180c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001810:	43db      	mvns	r3, r3
 8001812:	b25b      	sxtb	r3, r3
 8001814:	4013      	ands	r3, r2
 8001816:	b25b      	sxtb	r3, r3
 8001818:	b2da      	uxtb	r2, r3
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	4611      	mov	r1, r2
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff ff9a 	bl	8001758 <MFRC522_WriteRegister>
}
 8001824:	bf00      	nop
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <MFRC522_Request>:

uint8_t MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af02      	add	r7, sp, #8
 8001832:	4603      	mov	r3, r0
 8001834:	6039      	str	r1, [r7, #0]
 8001836:	71fb      	strb	r3, [r7, #7]
	uint8_t status;  
	uint16_t backBits;																			// The received data bits

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		// TxLastBists = BitFramingReg[2..0]
 8001838:	2107      	movs	r1, #7
 800183a:	200d      	movs	r0, #13
 800183c:	f7ff ff8c 	bl	8001758 <MFRC522_WriteRegister>
	TagType[0] = reqMode;
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	79fa      	ldrb	r2, [r7, #7]
 8001844:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8001846:	f107 030c 	add.w	r3, r7, #12
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	2201      	movs	r2, #1
 8001850:	6839      	ldr	r1, [r7, #0]
 8001852:	200c      	movs	r0, #12
 8001854:	f000 f80f 	bl	8001876 <MFRC522_ToCard>
 8001858:	4603      	mov	r3, r0
 800185a:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) status = MI_ERR;
 800185c:	7bfb      	ldrb	r3, [r7, #15]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d102      	bne.n	8001868 <MFRC522_Request+0x3c>
 8001862:	89bb      	ldrh	r3, [r7, #12]
 8001864:	2b10      	cmp	r3, #16
 8001866:	d001      	beq.n	800186c <MFRC522_Request+0x40>
 8001868:	2302      	movs	r3, #2
 800186a:	73fb      	strb	r3, [r7, #15]
	return status;
 800186c:	7bfb      	ldrb	r3, [r7, #15]
}
 800186e:	4618      	mov	r0, r3
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <MFRC522_ToCard>:

uint8_t MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 8001876:	b590      	push	{r4, r7, lr}
 8001878:	b087      	sub	sp, #28
 800187a:	af00      	add	r7, sp, #0
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607b      	str	r3, [r7, #4]
 8001880:	4603      	mov	r3, r0
 8001882:	73fb      	strb	r3, [r7, #15]
 8001884:	4613      	mov	r3, r2
 8001886:	73bb      	strb	r3, [r7, #14]
	uint8_t status = MI_ERR;
 8001888:	2302      	movs	r3, #2
 800188a:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 800188c:	2300      	movs	r3, #0
 800188e:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 8001890:	2300      	movs	r3, #0
 8001892:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 8001894:	7bfb      	ldrb	r3, [r7, #15]
 8001896:	2b0c      	cmp	r3, #12
 8001898:	d006      	beq.n	80018a8 <MFRC522_ToCard+0x32>
 800189a:	2b0e      	cmp	r3, #14
 800189c:	d109      	bne.n	80018b2 <MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 800189e:	2312      	movs	r3, #18
 80018a0:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 80018a2:	2310      	movs	r3, #16
 80018a4:	757b      	strb	r3, [r7, #21]
			break;
 80018a6:	e005      	b.n	80018b4 <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77;
 80018a8:	2377      	movs	r3, #119	; 0x77
 80018aa:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 80018ac:	2330      	movs	r3, #48	; 0x30
 80018ae:	757b      	strb	r3, [r7, #21]
			break;
 80018b0:	e000      	b.n	80018b4 <MFRC522_ToCard+0x3e>
		}
		default:
		break;
 80018b2:	bf00      	nop
	}

	MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 80018b4:	7dbb      	ldrb	r3, [r7, #22]
 80018b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	4619      	mov	r1, r3
 80018be:	2002      	movs	r0, #2
 80018c0:	f7ff ff4a 	bl	8001758 <MFRC522_WriteRegister>
	MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 80018c4:	2180      	movs	r1, #128	; 0x80
 80018c6:	2004      	movs	r0, #4
 80018c8:	f7ff ff92 	bl	80017f0 <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 80018cc:	2180      	movs	r1, #128	; 0x80
 80018ce:	200a      	movs	r0, #10
 80018d0:	f7ff ff74 	bl	80017bc <MFRC522_SetBitMask>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 80018d4:	2100      	movs	r1, #0
 80018d6:	2001      	movs	r0, #1
 80018d8:	f7ff ff3e 	bl	8001758 <MFRC522_WriteRegister>

	// Writing data to the FIFO
	for (i = 0; i < sendLen; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 80018dc:	2300      	movs	r3, #0
 80018de:	827b      	strh	r3, [r7, #18]
 80018e0:	e00a      	b.n	80018f8 <MFRC522_ToCard+0x82>
 80018e2:	8a7b      	ldrh	r3, [r7, #18]
 80018e4:	68ba      	ldr	r2, [r7, #8]
 80018e6:	4413      	add	r3, r2
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	4619      	mov	r1, r3
 80018ec:	2009      	movs	r0, #9
 80018ee:	f7ff ff33 	bl	8001758 <MFRC522_WriteRegister>
 80018f2:	8a7b      	ldrh	r3, [r7, #18]
 80018f4:	3301      	adds	r3, #1
 80018f6:	827b      	strh	r3, [r7, #18]
 80018f8:	7bbb      	ldrb	r3, [r7, #14]
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	8a7a      	ldrh	r2, [r7, #18]
 80018fe:	429a      	cmp	r2, r3
 8001900:	d3ef      	bcc.n	80018e2 <MFRC522_ToCard+0x6c>

	// Execute the command
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 8001902:	7bfb      	ldrb	r3, [r7, #15]
 8001904:	4619      	mov	r1, r3
 8001906:	2001      	movs	r0, #1
 8001908:	f7ff ff26 	bl	8001758 <MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		// StartSend=1,transmission of data starts 
 800190c:	7bfb      	ldrb	r3, [r7, #15]
 800190e:	2b0c      	cmp	r3, #12
 8001910:	d103      	bne.n	800191a <MFRC522_ToCard+0xa4>
 8001912:	2180      	movs	r1, #128	; 0x80
 8001914:	200d      	movs	r0, #13
 8001916:	f7ff ff51 	bl	80017bc <MFRC522_SetBitMask>

	// Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 800191a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800191e:	827b      	strh	r3, [r7, #18]
	do {
		// CommIrqReg[7..0]
		// Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 8001920:	2004      	movs	r0, #4
 8001922:	f7ff ff31 	bl	8001788 <MFRC522_ReadRegister>
 8001926:	4603      	mov	r3, r0
 8001928:	753b      	strb	r3, [r7, #20]
		i--;
 800192a:	8a7b      	ldrh	r3, [r7, #18]
 800192c:	3b01      	subs	r3, #1
 800192e:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8001930:	8a7b      	ldrh	r3, [r7, #18]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d00a      	beq.n	800194c <MFRC522_ToCard+0xd6>
 8001936:	7d3b      	ldrb	r3, [r7, #20]
 8001938:	f003 0301 	and.w	r3, r3, #1
 800193c:	2b00      	cmp	r3, #0
 800193e:	d105      	bne.n	800194c <MFRC522_ToCard+0xd6>
 8001940:	7d3a      	ldrb	r2, [r7, #20]
 8001942:	7d7b      	ldrb	r3, [r7, #21]
 8001944:	4013      	ands	r3, r2
 8001946:	b2db      	uxtb	r3, r3
 8001948:	2b00      	cmp	r3, #0
 800194a:	d0e9      	beq.n	8001920 <MFRC522_ToCard+0xaa>

	MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);																// StartSend=0
 800194c:	2180      	movs	r1, #128	; 0x80
 800194e:	200d      	movs	r0, #13
 8001950:	f7ff ff4e 	bl	80017f0 <MFRC522_ClearBitMask>

	if (i != 0)  {
 8001954:	8a7b      	ldrh	r3, [r7, #18]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d057      	beq.n	8001a0a <MFRC522_ToCard+0x194>
		if (!(MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 800195a:	2006      	movs	r0, #6
 800195c:	f7ff ff14 	bl	8001788 <MFRC522_ReadRegister>
 8001960:	4603      	mov	r3, r0
 8001962:	f003 031b 	and.w	r3, r3, #27
 8001966:	2b00      	cmp	r3, #0
 8001968:	d14d      	bne.n	8001a06 <MFRC522_ToCard+0x190>
			status = MI_OK;
 800196a:	2300      	movs	r3, #0
 800196c:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) status = MI_NOTAGERR;
 800196e:	7d3a      	ldrb	r2, [r7, #20]
 8001970:	7dbb      	ldrb	r3, [r7, #22]
 8001972:	4013      	ands	r3, r2
 8001974:	b2db      	uxtb	r3, r3
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MFRC522_ToCard+0x10c>
 800197e:	2301      	movs	r3, #1
 8001980:	75fb      	strb	r3, [r7, #23]
			if (command == PCD_TRANSCEIVE) {
 8001982:	7bfb      	ldrb	r3, [r7, #15]
 8001984:	2b0c      	cmp	r3, #12
 8001986:	d140      	bne.n	8001a0a <MFRC522_ToCard+0x194>
				n = MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 8001988:	200a      	movs	r0, #10
 800198a:	f7ff fefd 	bl	8001788 <MFRC522_ReadRegister>
 800198e:	4603      	mov	r3, r0
 8001990:	753b      	strb	r3, [r7, #20]
				lastBits = MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 8001992:	200c      	movs	r0, #12
 8001994:	f7ff fef8 	bl	8001788 <MFRC522_ReadRegister>
 8001998:	4603      	mov	r3, r0
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	747b      	strb	r3, [r7, #17]
				if (lastBits) *backLen = (n-1)*8+lastBits; else *backLen = n*8;
 80019a0:	7c7b      	ldrb	r3, [r7, #17]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d00b      	beq.n	80019be <MFRC522_ToCard+0x148>
 80019a6:	7d3b      	ldrb	r3, [r7, #20]
 80019a8:	3b01      	subs	r3, #1
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	00db      	lsls	r3, r3, #3
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	7c7b      	ldrb	r3, [r7, #17]
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	4413      	add	r3, r2
 80019b6:	b29a      	uxth	r2, r3
 80019b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019ba:	801a      	strh	r2, [r3, #0]
 80019bc:	e005      	b.n	80019ca <MFRC522_ToCard+0x154>
 80019be:	7d3b      	ldrb	r3, [r7, #20]
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	00db      	lsls	r3, r3, #3
 80019c4:	b29a      	uxth	r2, r3
 80019c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019c8:	801a      	strh	r2, [r3, #0]
				if (n == 0) n = 1;
 80019ca:	7d3b      	ldrb	r3, [r7, #20]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d101      	bne.n	80019d4 <MFRC522_ToCard+0x15e>
 80019d0:	2301      	movs	r3, #1
 80019d2:	753b      	strb	r3, [r7, #20]
				if (n > MFRC522_MAX_LEN) n = MFRC522_MAX_LEN;
 80019d4:	7d3b      	ldrb	r3, [r7, #20]
 80019d6:	2b10      	cmp	r3, #16
 80019d8:	d901      	bls.n	80019de <MFRC522_ToCard+0x168>
 80019da:	2310      	movs	r3, #16
 80019dc:	753b      	strb	r3, [r7, #20]
				for (i = 0; i < n; i++) backData[i] = MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);		// Reading the received data in FIFO
 80019de:	2300      	movs	r3, #0
 80019e0:	827b      	strh	r3, [r7, #18]
 80019e2:	e00a      	b.n	80019fa <MFRC522_ToCard+0x184>
 80019e4:	8a7b      	ldrh	r3, [r7, #18]
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	18d4      	adds	r4, r2, r3
 80019ea:	2009      	movs	r0, #9
 80019ec:	f7ff fecc 	bl	8001788 <MFRC522_ReadRegister>
 80019f0:	4603      	mov	r3, r0
 80019f2:	7023      	strb	r3, [r4, #0]
 80019f4:	8a7b      	ldrh	r3, [r7, #18]
 80019f6:	3301      	adds	r3, #1
 80019f8:	827b      	strh	r3, [r7, #18]
 80019fa:	7d3b      	ldrb	r3, [r7, #20]
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	8a7a      	ldrh	r2, [r7, #18]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d3ef      	bcc.n	80019e4 <MFRC522_ToCard+0x16e>
 8001a04:	e001      	b.n	8001a0a <MFRC522_ToCard+0x194>
			}
		} else status = MI_ERR;
 8001a06:	2302      	movs	r3, #2
 8001a08:	75fb      	strb	r3, [r7, #23]
	}
	return status;
 8001a0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	371c      	adds	r7, #28
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd90      	pop	{r4, r7, pc}

08001a14 <MFRC522_Anticoll>:

uint8_t MFRC522_Anticoll(uint8_t* serNum) {
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af02      	add	r7, sp, #8
 8001a1a:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);												// TxLastBists = BitFramingReg[2..0]
 8001a20:	2100      	movs	r1, #0
 8001a22:	200d      	movs	r0, #13
 8001a24:	f7ff fe98 	bl	8001758 <MFRC522_WriteRegister>
	serNum[0] = PICC_ANTICOLL;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2293      	movs	r2, #147	; 0x93
 8001a2c:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	3301      	adds	r3, #1
 8001a32:	2220      	movs	r2, #32
 8001a34:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8001a36:	f107 030a 	add.w	r3, r7, #10
 8001a3a:	9300      	str	r3, [sp, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2202      	movs	r2, #2
 8001a40:	6879      	ldr	r1, [r7, #4]
 8001a42:	200c      	movs	r0, #12
 8001a44:	f7ff ff17 	bl	8001876 <MFRC522_ToCard>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) {
 8001a4c:	7bfb      	ldrb	r3, [r7, #15]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d118      	bne.n	8001a84 <MFRC522_Anticoll+0x70>
		// Check card serial number
		for (i = 0; i < 4; i++) serNumCheck ^= serNum[i];
 8001a52:	2300      	movs	r3, #0
 8001a54:	73bb      	strb	r3, [r7, #14]
 8001a56:	e009      	b.n	8001a6c <MFRC522_Anticoll+0x58>
 8001a58:	7bbb      	ldrb	r3, [r7, #14]
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	781a      	ldrb	r2, [r3, #0]
 8001a60:	7b7b      	ldrb	r3, [r7, #13]
 8001a62:	4053      	eors	r3, r2
 8001a64:	737b      	strb	r3, [r7, #13]
 8001a66:	7bbb      	ldrb	r3, [r7, #14]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	73bb      	strb	r3, [r7, #14]
 8001a6c:	7bbb      	ldrb	r3, [r7, #14]
 8001a6e:	2b03      	cmp	r3, #3
 8001a70:	d9f2      	bls.n	8001a58 <MFRC522_Anticoll+0x44>
		if (serNumCheck != serNum[i]) status = MI_ERR;
 8001a72:	7bbb      	ldrb	r3, [r7, #14]
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	4413      	add	r3, r2
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	7b7a      	ldrb	r2, [r7, #13]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d001      	beq.n	8001a84 <MFRC522_Anticoll+0x70>
 8001a80:	2302      	movs	r3, #2
 8001a82:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 8001a84:	7bfb      	ldrb	r3, [r7, #15]
} 
 8001a86:	4618      	mov	r0, r3
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <MFRC522_Reset>:
		status = MFRC522_ToCard(PCD_TRANSCEIVE, buff, 18, buff, &recvBits);
		if ((status != MI_OK) || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A)) status = MI_ERR;
	}
	return status;
}
void MFRC522_Reset(void) {
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	af00      	add	r7, sp, #0
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 8001a92:	210f      	movs	r1, #15
 8001a94:	2001      	movs	r0, #1
 8001a96:	f7ff fe5f 	bl	8001758 <MFRC522_WriteRegister>
}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <MFRC522_Init>:
void MFRC522_Init(void) {
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	af00      	add	r7, sp, #0
	MFRC522_Reset();
 8001aa2:	f7ff fff4 	bl	8001a8e <MFRC522_Reset>
	MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 8001aa6:	218d      	movs	r1, #141	; 0x8d
 8001aa8:	202a      	movs	r0, #42	; 0x2a
 8001aaa:	f7ff fe55 	bl	8001758 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 8001aae:	213e      	movs	r1, #62	; 0x3e
 8001ab0:	202b      	movs	r0, #43	; 0x2b
 8001ab2:	f7ff fe51 	bl	8001758 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);           
 8001ab6:	211e      	movs	r1, #30
 8001ab8:	202d      	movs	r0, #45	; 0x2d
 8001aba:	f7ff fe4d 	bl	8001758 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 8001abe:	2100      	movs	r1, #0
 8001ac0:	202c      	movs	r0, #44	; 0x2c
 8001ac2:	f7ff fe49 	bl	8001758 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);				// 48dB gain	
 8001ac6:	2170      	movs	r1, #112	; 0x70
 8001ac8:	2026      	movs	r0, #38	; 0x26
 8001aca:	f7ff fe45 	bl	8001758 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 8001ace:	2140      	movs	r1, #64	; 0x40
 8001ad0:	2015      	movs	r0, #21
 8001ad2:	f7ff fe41 	bl	8001758 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 8001ad6:	213d      	movs	r1, #61	; 0x3d
 8001ad8:	2011      	movs	r0, #17
 8001ada:	f7ff fe3d 	bl	8001758 <MFRC522_WriteRegister>
	MFRC522_AntennaOn();																		// Open the antenna
 8001ade:	f000 f802 	bl	8001ae6 <MFRC522_AntennaOn>
}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <MFRC522_AntennaOn>:

void MFRC522_AntennaOn(void) {
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b082      	sub	sp, #8
 8001aea:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 8001aec:	2014      	movs	r0, #20
 8001aee:	f7ff fe4b 	bl	8001788 <MFRC522_ReadRegister>
 8001af2:	4603      	mov	r3, r0
 8001af4:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 8001af6:	79fb      	ldrb	r3, [r7, #7]
 8001af8:	f003 0303 	and.w	r3, r3, #3
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d103      	bne.n	8001b08 <MFRC522_AntennaOn+0x22>
 8001b00:	2103      	movs	r1, #3
 8001b02:	2014      	movs	r0, #20
 8001b04:	f7ff fe5a 	bl	80017bc <MFRC522_SetBitMask>
}
 8001b08:	bf00      	nop
 8001b0a:	3708      	adds	r7, #8
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b16:	4b15      	ldr	r3, [pc, #84]	; (8001b6c <HAL_MspInit+0x5c>)
 8001b18:	699b      	ldr	r3, [r3, #24]
 8001b1a:	4a14      	ldr	r2, [pc, #80]	; (8001b6c <HAL_MspInit+0x5c>)
 8001b1c:	f043 0301 	orr.w	r3, r3, #1
 8001b20:	6193      	str	r3, [r2, #24]
 8001b22:	4b12      	ldr	r3, [pc, #72]	; (8001b6c <HAL_MspInit+0x5c>)
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	60bb      	str	r3, [r7, #8]
 8001b2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b2e:	4b0f      	ldr	r3, [pc, #60]	; (8001b6c <HAL_MspInit+0x5c>)
 8001b30:	69db      	ldr	r3, [r3, #28]
 8001b32:	4a0e      	ldr	r2, [pc, #56]	; (8001b6c <HAL_MspInit+0x5c>)
 8001b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b38:	61d3      	str	r3, [r2, #28]
 8001b3a:	4b0c      	ldr	r3, [pc, #48]	; (8001b6c <HAL_MspInit+0x5c>)
 8001b3c:	69db      	ldr	r3, [r3, #28]
 8001b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b42:	607b      	str	r3, [r7, #4]
 8001b44:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b46:	4b0a      	ldr	r3, [pc, #40]	; (8001b70 <HAL_MspInit+0x60>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	4a04      	ldr	r2, [pc, #16]	; (8001b70 <HAL_MspInit+0x60>)
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b62:	bf00      	nop
 8001b64:	3714      	adds	r7, #20
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	40010000 	.word	0x40010000

08001b74 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b088      	sub	sp, #32
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b7c:	f107 0310 	add.w	r3, r7, #16
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	605a      	str	r2, [r3, #4]
 8001b86:	609a      	str	r2, [r3, #8]
 8001b88:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a14      	ldr	r2, [pc, #80]	; (8001be0 <HAL_ADC_MspInit+0x6c>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d121      	bne.n	8001bd8 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b94:	4b13      	ldr	r3, [pc, #76]	; (8001be4 <HAL_ADC_MspInit+0x70>)
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	4a12      	ldr	r2, [pc, #72]	; (8001be4 <HAL_ADC_MspInit+0x70>)
 8001b9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b9e:	6193      	str	r3, [r2, #24]
 8001ba0:	4b10      	ldr	r3, [pc, #64]	; (8001be4 <HAL_ADC_MspInit+0x70>)
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ba8:	60fb      	str	r3, [r7, #12]
 8001baa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bac:	4b0d      	ldr	r3, [pc, #52]	; (8001be4 <HAL_ADC_MspInit+0x70>)
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	4a0c      	ldr	r2, [pc, #48]	; (8001be4 <HAL_ADC_MspInit+0x70>)
 8001bb2:	f043 0304 	orr.w	r3, r3, #4
 8001bb6:	6193      	str	r3, [r2, #24]
 8001bb8:	4b0a      	ldr	r3, [pc, #40]	; (8001be4 <HAL_ADC_MspInit+0x70>)
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	f003 0304 	and.w	r3, r3, #4
 8001bc0:	60bb      	str	r3, [r7, #8]
 8001bc2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bcc:	f107 0310 	add.w	r3, r7, #16
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4805      	ldr	r0, [pc, #20]	; (8001be8 <HAL_ADC_MspInit+0x74>)
 8001bd4:	f000 ff60 	bl	8002a98 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001bd8:	bf00      	nop
 8001bda:	3720      	adds	r7, #32
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	40012400 	.word	0x40012400
 8001be4:	40021000 	.word	0x40021000
 8001be8:	40010800 	.word	0x40010800

08001bec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b088      	sub	sp, #32
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf4:	f107 0310 	add.w	r3, r7, #16
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a1b      	ldr	r2, [pc, #108]	; (8001c74 <HAL_SPI_MspInit+0x88>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d12f      	bne.n	8001c6c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c0c:	4b1a      	ldr	r3, [pc, #104]	; (8001c78 <HAL_SPI_MspInit+0x8c>)
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	4a19      	ldr	r2, [pc, #100]	; (8001c78 <HAL_SPI_MspInit+0x8c>)
 8001c12:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c16:	6193      	str	r3, [r2, #24]
 8001c18:	4b17      	ldr	r3, [pc, #92]	; (8001c78 <HAL_SPI_MspInit+0x8c>)
 8001c1a:	699b      	ldr	r3, [r3, #24]
 8001c1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c20:	60fb      	str	r3, [r7, #12]
 8001c22:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c24:	4b14      	ldr	r3, [pc, #80]	; (8001c78 <HAL_SPI_MspInit+0x8c>)
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	4a13      	ldr	r2, [pc, #76]	; (8001c78 <HAL_SPI_MspInit+0x8c>)
 8001c2a:	f043 0304 	orr.w	r3, r3, #4
 8001c2e:	6193      	str	r3, [r2, #24]
 8001c30:	4b11      	ldr	r3, [pc, #68]	; (8001c78 <HAL_SPI_MspInit+0x8c>)
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	f003 0304 	and.w	r3, r3, #4
 8001c38:	60bb      	str	r3, [r7, #8]
 8001c3a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001c3c:	23a0      	movs	r3, #160	; 0xa0
 8001c3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c40:	2302      	movs	r3, #2
 8001c42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c44:	2303      	movs	r3, #3
 8001c46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c48:	f107 0310 	add.w	r3, r7, #16
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	480b      	ldr	r0, [pc, #44]	; (8001c7c <HAL_SPI_MspInit+0x90>)
 8001c50:	f000 ff22 	bl	8002a98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c54:	2340      	movs	r3, #64	; 0x40
 8001c56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c60:	f107 0310 	add.w	r3, r7, #16
 8001c64:	4619      	mov	r1, r3
 8001c66:	4805      	ldr	r0, [pc, #20]	; (8001c7c <HAL_SPI_MspInit+0x90>)
 8001c68:	f000 ff16 	bl	8002a98 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001c6c:	bf00      	nop
 8001c6e:	3720      	adds	r7, #32
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40013000 	.word	0x40013000
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	40010800 	.word	0x40010800

08001c80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a0d      	ldr	r2, [pc, #52]	; (8001cc4 <HAL_TIM_Base_MspInit+0x44>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d113      	bne.n	8001cba <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c92:	4b0d      	ldr	r3, [pc, #52]	; (8001cc8 <HAL_TIM_Base_MspInit+0x48>)
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	4a0c      	ldr	r2, [pc, #48]	; (8001cc8 <HAL_TIM_Base_MspInit+0x48>)
 8001c98:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c9c:	6193      	str	r3, [r2, #24]
 8001c9e:	4b0a      	ldr	r3, [pc, #40]	; (8001cc8 <HAL_TIM_Base_MspInit+0x48>)
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ca6:	60fb      	str	r3, [r7, #12]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 2, 0);
 8001caa:	2200      	movs	r2, #0
 8001cac:	2102      	movs	r1, #2
 8001cae:	2019      	movs	r0, #25
 8001cb0:	f000 fe0b 	bl	80028ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001cb4:	2019      	movs	r0, #25
 8001cb6:	f000 fe24 	bl	8002902 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001cba:	bf00      	nop
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40012c00 	.word	0x40012c00
 8001cc8:	40021000 	.word	0x40021000

08001ccc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b088      	sub	sp, #32
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd4:	f107 0310 	add.w	r3, r7, #16
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	605a      	str	r2, [r3, #4]
 8001cde:	609a      	str	r2, [r3, #8]
 8001ce0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a20      	ldr	r2, [pc, #128]	; (8001d68 <HAL_UART_MspInit+0x9c>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d139      	bne.n	8001d60 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cec:	4b1f      	ldr	r3, [pc, #124]	; (8001d6c <HAL_UART_MspInit+0xa0>)
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	4a1e      	ldr	r2, [pc, #120]	; (8001d6c <HAL_UART_MspInit+0xa0>)
 8001cf2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cf6:	6193      	str	r3, [r2, #24]
 8001cf8:	4b1c      	ldr	r3, [pc, #112]	; (8001d6c <HAL_UART_MspInit+0xa0>)
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d04:	4b19      	ldr	r3, [pc, #100]	; (8001d6c <HAL_UART_MspInit+0xa0>)
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	4a18      	ldr	r2, [pc, #96]	; (8001d6c <HAL_UART_MspInit+0xa0>)
 8001d0a:	f043 0304 	orr.w	r3, r3, #4
 8001d0e:	6193      	str	r3, [r2, #24]
 8001d10:	4b16      	ldr	r3, [pc, #88]	; (8001d6c <HAL_UART_MspInit+0xa0>)
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	f003 0304 	and.w	r3, r3, #4
 8001d18:	60bb      	str	r3, [r7, #8]
 8001d1a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d20:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d22:	2302      	movs	r3, #2
 8001d24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d26:	2303      	movs	r3, #3
 8001d28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d2a:	f107 0310 	add.w	r3, r7, #16
 8001d2e:	4619      	mov	r1, r3
 8001d30:	480f      	ldr	r0, [pc, #60]	; (8001d70 <HAL_UART_MspInit+0xa4>)
 8001d32:	f000 feb1 	bl	8002a98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d40:	2300      	movs	r3, #0
 8001d42:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d44:	f107 0310 	add.w	r3, r7, #16
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4809      	ldr	r0, [pc, #36]	; (8001d70 <HAL_UART_MspInit+0xa4>)
 8001d4c:	f000 fea4 	bl	8002a98 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001d50:	2200      	movs	r2, #0
 8001d52:	2101      	movs	r1, #1
 8001d54:	2025      	movs	r0, #37	; 0x25
 8001d56:	f000 fdb8 	bl	80028ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d5a:	2025      	movs	r0, #37	; 0x25
 8001d5c:	f000 fdd1 	bl	8002902 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001d60:	bf00      	nop
 8001d62:	3720      	adds	r7, #32
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40013800 	.word	0x40013800
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	40010800 	.word	0x40010800

08001d74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d78:	e7fe      	b.n	8001d78 <NMI_Handler+0x4>

08001d7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d7e:	e7fe      	b.n	8001d7e <HardFault_Handler+0x4>

08001d80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d84:	e7fe      	b.n	8001d84 <MemManage_Handler+0x4>

08001d86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d86:	b480      	push	{r7}
 8001d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d8a:	e7fe      	b.n	8001d8a <BusFault_Handler+0x4>

08001d8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d90:	e7fe      	b.n	8001d90 <UsageFault_Handler+0x4>

08001d92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d92:	b480      	push	{r7}
 8001d94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d96:	bf00      	nop
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bc80      	pop	{r7}
 8001d9c:	4770      	bx	lr

08001d9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001da2:	bf00      	nop
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bc80      	pop	{r7}
 8001da8:	4770      	bx	lr

08001daa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001daa:	b480      	push	{r7}
 8001dac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dae:	bf00      	nop
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bc80      	pop	{r7}
 8001db4:	4770      	bx	lr

08001db6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dba:	f000 f949 	bl	8002050 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dbe:	bf00      	nop
 8001dc0:	bd80      	pop	{r7, pc}
	...

08001dc4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001dc8:	4802      	ldr	r0, [pc, #8]	; (8001dd4 <TIM1_UP_IRQHandler+0x10>)
 8001dca:	f002 f857 	bl	8003e7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	200002cc 	.word	0x200002cc

08001dd8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ddc:	4802      	ldr	r0, [pc, #8]	; (8001de8 <USART1_IRQHandler+0x10>)
 8001dde:	f002 fcb5 	bl	800474c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001de2:	bf00      	nop
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	20000268 	.word	0x20000268

08001dec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
	return 1;
 8001df0:	2301      	movs	r3, #1
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bc80      	pop	{r7}
 8001df8:	4770      	bx	lr

08001dfa <_kill>:

int _kill(int pid, int sig)
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b082      	sub	sp, #8
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
 8001e02:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e04:	f003 f8ca 	bl	8004f9c <__errno>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2216      	movs	r2, #22
 8001e0c:	601a      	str	r2, [r3, #0]
	return -1;
 8001e0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <_exit>:

void _exit (int status)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b082      	sub	sp, #8
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e22:	f04f 31ff 	mov.w	r1, #4294967295
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7ff ffe7 	bl	8001dfa <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e2c:	e7fe      	b.n	8001e2c <_exit+0x12>

08001e2e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b086      	sub	sp, #24
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	60f8      	str	r0, [r7, #12]
 8001e36:	60b9      	str	r1, [r7, #8]
 8001e38:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	617b      	str	r3, [r7, #20]
 8001e3e:	e00a      	b.n	8001e56 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e40:	f3af 8000 	nop.w
 8001e44:	4601      	mov	r1, r0
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	1c5a      	adds	r2, r3, #1
 8001e4a:	60ba      	str	r2, [r7, #8]
 8001e4c:	b2ca      	uxtb	r2, r1
 8001e4e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	3301      	adds	r3, #1
 8001e54:	617b      	str	r3, [r7, #20]
 8001e56:	697a      	ldr	r2, [r7, #20]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	dbf0      	blt.n	8001e40 <_read+0x12>
	}

return len;
 8001e5e:	687b      	ldr	r3, [r7, #4]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3718      	adds	r7, #24
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e74:	2300      	movs	r3, #0
 8001e76:	617b      	str	r3, [r7, #20]
 8001e78:	e009      	b.n	8001e8e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	1c5a      	adds	r2, r3, #1
 8001e7e:	60ba      	str	r2, [r7, #8]
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	617b      	str	r3, [r7, #20]
 8001e8e:	697a      	ldr	r2, [r7, #20]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	dbf1      	blt.n	8001e7a <_write+0x12>
	}
	return len;
 8001e96:	687b      	ldr	r3, [r7, #4]
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3718      	adds	r7, #24
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <_close>:

int _close(int file)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
	return -1;
 8001ea8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bc80      	pop	{r7}
 8001eb4:	4770      	bx	lr

08001eb6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	b083      	sub	sp, #12
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
 8001ebe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ec6:	605a      	str	r2, [r3, #4]
	return 0;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bc80      	pop	{r7}
 8001ed2:	4770      	bx	lr

08001ed4 <_isatty>:

int _isatty(int file)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
	return 1;
 8001edc:	2301      	movs	r3, #1
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bc80      	pop	{r7}
 8001ee6:	4770      	bx	lr

08001ee8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
	return 0;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3714      	adds	r7, #20
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bc80      	pop	{r7}
 8001efe:	4770      	bx	lr

08001f00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f08:	4a14      	ldr	r2, [pc, #80]	; (8001f5c <_sbrk+0x5c>)
 8001f0a:	4b15      	ldr	r3, [pc, #84]	; (8001f60 <_sbrk+0x60>)
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f14:	4b13      	ldr	r3, [pc, #76]	; (8001f64 <_sbrk+0x64>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d102      	bne.n	8001f22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f1c:	4b11      	ldr	r3, [pc, #68]	; (8001f64 <_sbrk+0x64>)
 8001f1e:	4a12      	ldr	r2, [pc, #72]	; (8001f68 <_sbrk+0x68>)
 8001f20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f22:	4b10      	ldr	r3, [pc, #64]	; (8001f64 <_sbrk+0x64>)
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4413      	add	r3, r2
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d207      	bcs.n	8001f40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f30:	f003 f834 	bl	8004f9c <__errno>
 8001f34:	4603      	mov	r3, r0
 8001f36:	220c      	movs	r2, #12
 8001f38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f3e:	e009      	b.n	8001f54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f40:	4b08      	ldr	r3, [pc, #32]	; (8001f64 <_sbrk+0x64>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f46:	4b07      	ldr	r3, [pc, #28]	; (8001f64 <_sbrk+0x64>)
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	4a05      	ldr	r2, [pc, #20]	; (8001f64 <_sbrk+0x64>)
 8001f50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f52:	68fb      	ldr	r3, [r7, #12]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3718      	adds	r7, #24
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	20005000 	.word	0x20005000
 8001f60:	00000400 	.word	0x00000400
 8001f64:	20000200 	.word	0x20000200
 8001f68:	200003a0 	.word	0x200003a0

08001f6c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f70:	bf00      	nop
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bc80      	pop	{r7}
 8001f76:	4770      	bx	lr

08001f78 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f78:	480c      	ldr	r0, [pc, #48]	; (8001fac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f7a:	490d      	ldr	r1, [pc, #52]	; (8001fb0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f7c:	4a0d      	ldr	r2, [pc, #52]	; (8001fb4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f80:	e002      	b.n	8001f88 <LoopCopyDataInit>

08001f82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f86:	3304      	adds	r3, #4

08001f88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f8c:	d3f9      	bcc.n	8001f82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f8e:	4a0a      	ldr	r2, [pc, #40]	; (8001fb8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f90:	4c0a      	ldr	r4, [pc, #40]	; (8001fbc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f94:	e001      	b.n	8001f9a <LoopFillZerobss>

08001f96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f98:	3204      	adds	r2, #4

08001f9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f9c:	d3fb      	bcc.n	8001f96 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f9e:	f7ff ffe5 	bl	8001f6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fa2:	f003 f801 	bl	8004fa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001fa6:	f7ff f953 	bl	8001250 <main>
  bx lr
 8001faa:	4770      	bx	lr
  ldr r0, =_sdata
 8001fac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fb0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001fb4:	08009d1c 	.word	0x08009d1c
  ldr r2, =_sbss
 8001fb8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001fbc:	2000039c 	.word	0x2000039c

08001fc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fc0:	e7fe      	b.n	8001fc0 <ADC1_2_IRQHandler>
	...

08001fc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fc8:	4b08      	ldr	r3, [pc, #32]	; (8001fec <HAL_Init+0x28>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a07      	ldr	r2, [pc, #28]	; (8001fec <HAL_Init+0x28>)
 8001fce:	f043 0310 	orr.w	r3, r3, #16
 8001fd2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fd4:	2003      	movs	r0, #3
 8001fd6:	f000 fc6d 	bl	80028b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fda:	2000      	movs	r0, #0
 8001fdc:	f000 f808 	bl	8001ff0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fe0:	f7ff fd96 	bl	8001b10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40022000 	.word	0x40022000

08001ff0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ff8:	4b12      	ldr	r3, [pc, #72]	; (8002044 <HAL_InitTick+0x54>)
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	4b12      	ldr	r3, [pc, #72]	; (8002048 <HAL_InitTick+0x58>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	4619      	mov	r1, r3
 8002002:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002006:	fbb3 f3f1 	udiv	r3, r3, r1
 800200a:	fbb2 f3f3 	udiv	r3, r2, r3
 800200e:	4618      	mov	r0, r3
 8002010:	f000 fc85 	bl	800291e <HAL_SYSTICK_Config>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e00e      	b.n	800203c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2b0f      	cmp	r3, #15
 8002022:	d80a      	bhi.n	800203a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002024:	2200      	movs	r2, #0
 8002026:	6879      	ldr	r1, [r7, #4]
 8002028:	f04f 30ff 	mov.w	r0, #4294967295
 800202c:	f000 fc4d 	bl	80028ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002030:	4a06      	ldr	r2, [pc, #24]	; (800204c <HAL_InitTick+0x5c>)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002036:	2300      	movs	r3, #0
 8002038:	e000      	b.n	800203c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
}
 800203c:	4618      	mov	r0, r3
 800203e:	3708      	adds	r7, #8
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	20000000 	.word	0x20000000
 8002048:	20000008 	.word	0x20000008
 800204c:	20000004 	.word	0x20000004

08002050 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002054:	4b05      	ldr	r3, [pc, #20]	; (800206c <HAL_IncTick+0x1c>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	461a      	mov	r2, r3
 800205a:	4b05      	ldr	r3, [pc, #20]	; (8002070 <HAL_IncTick+0x20>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4413      	add	r3, r2
 8002060:	4a03      	ldr	r2, [pc, #12]	; (8002070 <HAL_IncTick+0x20>)
 8002062:	6013      	str	r3, [r2, #0]
}
 8002064:	bf00      	nop
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr
 800206c:	20000008 	.word	0x20000008
 8002070:	20000388 	.word	0x20000388

08002074 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  return uwTick;
 8002078:	4b02      	ldr	r3, [pc, #8]	; (8002084 <HAL_GetTick+0x10>)
 800207a:	681b      	ldr	r3, [r3, #0]
}
 800207c:	4618      	mov	r0, r3
 800207e:	46bd      	mov	sp, r7
 8002080:	bc80      	pop	{r7}
 8002082:	4770      	bx	lr
 8002084:	20000388 	.word	0x20000388

08002088 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002090:	f7ff fff0 	bl	8002074 <HAL_GetTick>
 8002094:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020a0:	d005      	beq.n	80020ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020a2:	4b0a      	ldr	r3, [pc, #40]	; (80020cc <HAL_Delay+0x44>)
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	461a      	mov	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	4413      	add	r3, r2
 80020ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020ae:	bf00      	nop
 80020b0:	f7ff ffe0 	bl	8002074 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d8f7      	bhi.n	80020b0 <HAL_Delay+0x28>
  {
  }
}
 80020c0:	bf00      	nop
 80020c2:	bf00      	nop
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	20000008 	.word	0x20000008

080020d0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020d8:	2300      	movs	r3, #0
 80020da:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80020dc:	2300      	movs	r3, #0
 80020de:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80020e0:	2300      	movs	r3, #0
 80020e2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80020e4:	2300      	movs	r3, #0
 80020e6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d101      	bne.n	80020f2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e0be      	b.n	8002270 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d109      	bne.n	8002114 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f7ff fd30 	bl	8001b74 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f000 fabf 	bl	8002698 <ADC_ConversionStop_Disable>
 800211a:	4603      	mov	r3, r0
 800211c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002122:	f003 0310 	and.w	r3, r3, #16
 8002126:	2b00      	cmp	r3, #0
 8002128:	f040 8099 	bne.w	800225e <HAL_ADC_Init+0x18e>
 800212c:	7dfb      	ldrb	r3, [r7, #23]
 800212e:	2b00      	cmp	r3, #0
 8002130:	f040 8095 	bne.w	800225e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002138:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800213c:	f023 0302 	bic.w	r3, r3, #2
 8002140:	f043 0202 	orr.w	r2, r3, #2
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002150:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	7b1b      	ldrb	r3, [r3, #12]
 8002156:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002158:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800215a:	68ba      	ldr	r2, [r7, #8]
 800215c:	4313      	orrs	r3, r2
 800215e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002168:	d003      	beq.n	8002172 <HAL_ADC_Init+0xa2>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d102      	bne.n	8002178 <HAL_ADC_Init+0xa8>
 8002172:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002176:	e000      	b.n	800217a <HAL_ADC_Init+0xaa>
 8002178:	2300      	movs	r3, #0
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	4313      	orrs	r3, r2
 800217e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	7d1b      	ldrb	r3, [r3, #20]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d119      	bne.n	80021bc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	7b1b      	ldrb	r3, [r3, #12]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d109      	bne.n	80021a4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	3b01      	subs	r3, #1
 8002196:	035a      	lsls	r2, r3, #13
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	4313      	orrs	r3, r2
 800219c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021a0:	613b      	str	r3, [r7, #16]
 80021a2:	e00b      	b.n	80021bc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a8:	f043 0220 	orr.w	r2, r3, #32
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b4:	f043 0201 	orr.w	r2, r3, #1
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	430a      	orrs	r2, r1
 80021ce:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	689a      	ldr	r2, [r3, #8]
 80021d6:	4b28      	ldr	r3, [pc, #160]	; (8002278 <HAL_ADC_Init+0x1a8>)
 80021d8:	4013      	ands	r3, r2
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	6812      	ldr	r2, [r2, #0]
 80021de:	68b9      	ldr	r1, [r7, #8]
 80021e0:	430b      	orrs	r3, r1
 80021e2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021ec:	d003      	beq.n	80021f6 <HAL_ADC_Init+0x126>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d104      	bne.n	8002200 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	3b01      	subs	r3, #1
 80021fc:	051b      	lsls	r3, r3, #20
 80021fe:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002206:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	430a      	orrs	r2, r1
 8002212:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	689a      	ldr	r2, [r3, #8]
 800221a:	4b18      	ldr	r3, [pc, #96]	; (800227c <HAL_ADC_Init+0x1ac>)
 800221c:	4013      	ands	r3, r2
 800221e:	68ba      	ldr	r2, [r7, #8]
 8002220:	429a      	cmp	r2, r3
 8002222:	d10b      	bne.n	800223c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800222e:	f023 0303 	bic.w	r3, r3, #3
 8002232:	f043 0201 	orr.w	r2, r3, #1
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800223a:	e018      	b.n	800226e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002240:	f023 0312 	bic.w	r3, r3, #18
 8002244:	f043 0210 	orr.w	r2, r3, #16
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002250:	f043 0201 	orr.w	r2, r3, #1
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800225c:	e007      	b.n	800226e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002262:	f043 0210 	orr.w	r2, r3, #16
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800226e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002270:	4618      	mov	r0, r3
 8002272:	3718      	adds	r7, #24
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	ffe1f7fd 	.word	0xffe1f7fd
 800227c:	ff1f0efe 	.word	0xff1f0efe

08002280 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002288:	2300      	movs	r3, #0
 800228a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002292:	2b01      	cmp	r3, #1
 8002294:	d101      	bne.n	800229a <HAL_ADC_Start+0x1a>
 8002296:	2302      	movs	r3, #2
 8002298:	e098      	b.n	80023cc <HAL_ADC_Start+0x14c>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2201      	movs	r2, #1
 800229e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f000 f99e 	bl	80025e4 <ADC_Enable>
 80022a8:	4603      	mov	r3, r0
 80022aa:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80022ac:	7bfb      	ldrb	r3, [r7, #15]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	f040 8087 	bne.w	80023c2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022bc:	f023 0301 	bic.w	r3, r3, #1
 80022c0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a41      	ldr	r2, [pc, #260]	; (80023d4 <HAL_ADC_Start+0x154>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d105      	bne.n	80022de <HAL_ADC_Start+0x5e>
 80022d2:	4b41      	ldr	r3, [pc, #260]	; (80023d8 <HAL_ADC_Start+0x158>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d115      	bne.n	800230a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d026      	beq.n	8002346 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022fc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002300:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002308:	e01d      	b.n	8002346 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800230e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a2f      	ldr	r2, [pc, #188]	; (80023d8 <HAL_ADC_Start+0x158>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d004      	beq.n	800232a <HAL_ADC_Start+0xaa>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a2b      	ldr	r2, [pc, #172]	; (80023d4 <HAL_ADC_Start+0x154>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d10d      	bne.n	8002346 <HAL_ADC_Start+0xc6>
 800232a:	4b2b      	ldr	r3, [pc, #172]	; (80023d8 <HAL_ADC_Start+0x158>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002332:	2b00      	cmp	r3, #0
 8002334:	d007      	beq.n	8002346 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800233a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800233e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800234a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d006      	beq.n	8002360 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002356:	f023 0206 	bic.w	r2, r3, #6
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	62da      	str	r2, [r3, #44]	; 0x2c
 800235e:	e002      	b.n	8002366 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f06f 0202 	mvn.w	r2, #2
 8002376:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002382:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002386:	d113      	bne.n	80023b0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800238c:	4a11      	ldr	r2, [pc, #68]	; (80023d4 <HAL_ADC_Start+0x154>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d105      	bne.n	800239e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002392:	4b11      	ldr	r3, [pc, #68]	; (80023d8 <HAL_ADC_Start+0x158>)
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800239a:	2b00      	cmp	r3, #0
 800239c:	d108      	bne.n	80023b0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	689a      	ldr	r2, [r3, #8]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80023ac:	609a      	str	r2, [r3, #8]
 80023ae:	e00c      	b.n	80023ca <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	689a      	ldr	r2, [r3, #8]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80023be:	609a      	str	r2, [r3, #8]
 80023c0:	e003      	b.n	80023ca <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80023ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3710      	adds	r7, #16
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	40012800 	.word	0x40012800
 80023d8:	40012400 	.word	0x40012400

080023dc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bc80      	pop	{r7}
 80023f2:	4770      	bx	lr

080023f4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023fe:	2300      	movs	r3, #0
 8002400:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002402:	2300      	movs	r3, #0
 8002404:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800240c:	2b01      	cmp	r3, #1
 800240e:	d101      	bne.n	8002414 <HAL_ADC_ConfigChannel+0x20>
 8002410:	2302      	movs	r3, #2
 8002412:	e0dc      	b.n	80025ce <HAL_ADC_ConfigChannel+0x1da>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	2b06      	cmp	r3, #6
 8002422:	d81c      	bhi.n	800245e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685a      	ldr	r2, [r3, #4]
 800242e:	4613      	mov	r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	4413      	add	r3, r2
 8002434:	3b05      	subs	r3, #5
 8002436:	221f      	movs	r2, #31
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	43db      	mvns	r3, r3
 800243e:	4019      	ands	r1, r3
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	6818      	ldr	r0, [r3, #0]
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685a      	ldr	r2, [r3, #4]
 8002448:	4613      	mov	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4413      	add	r3, r2
 800244e:	3b05      	subs	r3, #5
 8002450:	fa00 f203 	lsl.w	r2, r0, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	430a      	orrs	r2, r1
 800245a:	635a      	str	r2, [r3, #52]	; 0x34
 800245c:	e03c      	b.n	80024d8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	2b0c      	cmp	r3, #12
 8002464:	d81c      	bhi.n	80024a0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685a      	ldr	r2, [r3, #4]
 8002470:	4613      	mov	r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	4413      	add	r3, r2
 8002476:	3b23      	subs	r3, #35	; 0x23
 8002478:	221f      	movs	r2, #31
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	43db      	mvns	r3, r3
 8002480:	4019      	ands	r1, r3
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	6818      	ldr	r0, [r3, #0]
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685a      	ldr	r2, [r3, #4]
 800248a:	4613      	mov	r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	4413      	add	r3, r2
 8002490:	3b23      	subs	r3, #35	; 0x23
 8002492:	fa00 f203 	lsl.w	r2, r0, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	430a      	orrs	r2, r1
 800249c:	631a      	str	r2, [r3, #48]	; 0x30
 800249e:	e01b      	b.n	80024d8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685a      	ldr	r2, [r3, #4]
 80024aa:	4613      	mov	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4413      	add	r3, r2
 80024b0:	3b41      	subs	r3, #65	; 0x41
 80024b2:	221f      	movs	r2, #31
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	43db      	mvns	r3, r3
 80024ba:	4019      	ands	r1, r3
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	6818      	ldr	r0, [r3, #0]
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685a      	ldr	r2, [r3, #4]
 80024c4:	4613      	mov	r3, r2
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	4413      	add	r3, r2
 80024ca:	3b41      	subs	r3, #65	; 0x41
 80024cc:	fa00 f203 	lsl.w	r2, r0, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	430a      	orrs	r2, r1
 80024d6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2b09      	cmp	r3, #9
 80024de:	d91c      	bls.n	800251a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68d9      	ldr	r1, [r3, #12]
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	4613      	mov	r3, r2
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	4413      	add	r3, r2
 80024f0:	3b1e      	subs	r3, #30
 80024f2:	2207      	movs	r2, #7
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	43db      	mvns	r3, r3
 80024fa:	4019      	ands	r1, r3
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	6898      	ldr	r0, [r3, #8]
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	4613      	mov	r3, r2
 8002506:	005b      	lsls	r3, r3, #1
 8002508:	4413      	add	r3, r2
 800250a:	3b1e      	subs	r3, #30
 800250c:	fa00 f203 	lsl.w	r2, r0, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	430a      	orrs	r2, r1
 8002516:	60da      	str	r2, [r3, #12]
 8002518:	e019      	b.n	800254e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	6919      	ldr	r1, [r3, #16]
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	4613      	mov	r3, r2
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	4413      	add	r3, r2
 800252a:	2207      	movs	r2, #7
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	43db      	mvns	r3, r3
 8002532:	4019      	ands	r1, r3
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	6898      	ldr	r0, [r3, #8]
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	4613      	mov	r3, r2
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	4413      	add	r3, r2
 8002542:	fa00 f203 	lsl.w	r2, r0, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	430a      	orrs	r2, r1
 800254c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2b10      	cmp	r3, #16
 8002554:	d003      	beq.n	800255e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800255a:	2b11      	cmp	r3, #17
 800255c:	d132      	bne.n	80025c4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a1d      	ldr	r2, [pc, #116]	; (80025d8 <HAL_ADC_ConfigChannel+0x1e4>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d125      	bne.n	80025b4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d126      	bne.n	80025c4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	689a      	ldr	r2, [r3, #8]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002584:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2b10      	cmp	r3, #16
 800258c:	d11a      	bne.n	80025c4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800258e:	4b13      	ldr	r3, [pc, #76]	; (80025dc <HAL_ADC_ConfigChannel+0x1e8>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a13      	ldr	r2, [pc, #76]	; (80025e0 <HAL_ADC_ConfigChannel+0x1ec>)
 8002594:	fba2 2303 	umull	r2, r3, r2, r3
 8002598:	0c9a      	lsrs	r2, r3, #18
 800259a:	4613      	mov	r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	4413      	add	r3, r2
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80025a4:	e002      	b.n	80025ac <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	3b01      	subs	r3, #1
 80025aa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1f9      	bne.n	80025a6 <HAL_ADC_ConfigChannel+0x1b2>
 80025b2:	e007      	b.n	80025c4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b8:	f043 0220 	orr.w	r2, r3, #32
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80025cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3714      	adds	r7, #20
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bc80      	pop	{r7}
 80025d6:	4770      	bx	lr
 80025d8:	40012400 	.word	0x40012400
 80025dc:	20000000 	.word	0x20000000
 80025e0:	431bde83 	.word	0x431bde83

080025e4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025ec:	2300      	movs	r3, #0
 80025ee:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80025f0:	2300      	movs	r3, #0
 80025f2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d040      	beq.n	8002684 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	689a      	ldr	r2, [r3, #8]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f042 0201 	orr.w	r2, r2, #1
 8002610:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002612:	4b1f      	ldr	r3, [pc, #124]	; (8002690 <ADC_Enable+0xac>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a1f      	ldr	r2, [pc, #124]	; (8002694 <ADC_Enable+0xb0>)
 8002618:	fba2 2303 	umull	r2, r3, r2, r3
 800261c:	0c9b      	lsrs	r3, r3, #18
 800261e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002620:	e002      	b.n	8002628 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	3b01      	subs	r3, #1
 8002626:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d1f9      	bne.n	8002622 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800262e:	f7ff fd21 	bl	8002074 <HAL_GetTick>
 8002632:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002634:	e01f      	b.n	8002676 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002636:	f7ff fd1d 	bl	8002074 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b02      	cmp	r3, #2
 8002642:	d918      	bls.n	8002676 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	2b01      	cmp	r3, #1
 8002650:	d011      	beq.n	8002676 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002656:	f043 0210 	orr.w	r2, r3, #16
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002662:	f043 0201 	orr.w	r2, r3, #1
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e007      	b.n	8002686 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b01      	cmp	r3, #1
 8002682:	d1d8      	bne.n	8002636 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	20000000 	.word	0x20000000
 8002694:	431bde83 	.word	0x431bde83

08002698 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026a0:	2300      	movs	r3, #0
 80026a2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d12e      	bne.n	8002710 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	689a      	ldr	r2, [r3, #8]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f022 0201 	bic.w	r2, r2, #1
 80026c0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80026c2:	f7ff fcd7 	bl	8002074 <HAL_GetTick>
 80026c6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80026c8:	e01b      	b.n	8002702 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80026ca:	f7ff fcd3 	bl	8002074 <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d914      	bls.n	8002702 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d10d      	bne.n	8002702 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ea:	f043 0210 	orr.w	r2, r3, #16
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f6:	f043 0201 	orr.w	r2, r3, #1
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e007      	b.n	8002712 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f003 0301 	and.w	r3, r3, #1
 800270c:	2b01      	cmp	r3, #1
 800270e:	d0dc      	beq.n	80026ca <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3710      	adds	r7, #16
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
	...

0800271c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800271c:	b480      	push	{r7}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f003 0307 	and.w	r3, r3, #7
 800272a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800272c:	4b0c      	ldr	r3, [pc, #48]	; (8002760 <__NVIC_SetPriorityGrouping+0x44>)
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002732:	68ba      	ldr	r2, [r7, #8]
 8002734:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002738:	4013      	ands	r3, r2
 800273a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002744:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002748:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800274c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800274e:	4a04      	ldr	r2, [pc, #16]	; (8002760 <__NVIC_SetPriorityGrouping+0x44>)
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	60d3      	str	r3, [r2, #12]
}
 8002754:	bf00      	nop
 8002756:	3714      	adds	r7, #20
 8002758:	46bd      	mov	sp, r7
 800275a:	bc80      	pop	{r7}
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	e000ed00 	.word	0xe000ed00

08002764 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002768:	4b04      	ldr	r3, [pc, #16]	; (800277c <__NVIC_GetPriorityGrouping+0x18>)
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	0a1b      	lsrs	r3, r3, #8
 800276e:	f003 0307 	and.w	r3, r3, #7
}
 8002772:	4618      	mov	r0, r3
 8002774:	46bd      	mov	sp, r7
 8002776:	bc80      	pop	{r7}
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	e000ed00 	.word	0xe000ed00

08002780 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	4603      	mov	r3, r0
 8002788:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800278a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278e:	2b00      	cmp	r3, #0
 8002790:	db0b      	blt.n	80027aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002792:	79fb      	ldrb	r3, [r7, #7]
 8002794:	f003 021f 	and.w	r2, r3, #31
 8002798:	4906      	ldr	r1, [pc, #24]	; (80027b4 <__NVIC_EnableIRQ+0x34>)
 800279a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279e:	095b      	lsrs	r3, r3, #5
 80027a0:	2001      	movs	r0, #1
 80027a2:	fa00 f202 	lsl.w	r2, r0, r2
 80027a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc80      	pop	{r7}
 80027b2:	4770      	bx	lr
 80027b4:	e000e100 	.word	0xe000e100

080027b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	4603      	mov	r3, r0
 80027c0:	6039      	str	r1, [r7, #0]
 80027c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	db0a      	blt.n	80027e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	b2da      	uxtb	r2, r3
 80027d0:	490c      	ldr	r1, [pc, #48]	; (8002804 <__NVIC_SetPriority+0x4c>)
 80027d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d6:	0112      	lsls	r2, r2, #4
 80027d8:	b2d2      	uxtb	r2, r2
 80027da:	440b      	add	r3, r1
 80027dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027e0:	e00a      	b.n	80027f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	b2da      	uxtb	r2, r3
 80027e6:	4908      	ldr	r1, [pc, #32]	; (8002808 <__NVIC_SetPriority+0x50>)
 80027e8:	79fb      	ldrb	r3, [r7, #7]
 80027ea:	f003 030f 	and.w	r3, r3, #15
 80027ee:	3b04      	subs	r3, #4
 80027f0:	0112      	lsls	r2, r2, #4
 80027f2:	b2d2      	uxtb	r2, r2
 80027f4:	440b      	add	r3, r1
 80027f6:	761a      	strb	r2, [r3, #24]
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bc80      	pop	{r7}
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	e000e100 	.word	0xe000e100
 8002808:	e000ed00 	.word	0xe000ed00

0800280c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800280c:	b480      	push	{r7}
 800280e:	b089      	sub	sp, #36	; 0x24
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f003 0307 	and.w	r3, r3, #7
 800281e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	f1c3 0307 	rsb	r3, r3, #7
 8002826:	2b04      	cmp	r3, #4
 8002828:	bf28      	it	cs
 800282a:	2304      	movcs	r3, #4
 800282c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	3304      	adds	r3, #4
 8002832:	2b06      	cmp	r3, #6
 8002834:	d902      	bls.n	800283c <NVIC_EncodePriority+0x30>
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	3b03      	subs	r3, #3
 800283a:	e000      	b.n	800283e <NVIC_EncodePriority+0x32>
 800283c:	2300      	movs	r3, #0
 800283e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002840:	f04f 32ff 	mov.w	r2, #4294967295
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	fa02 f303 	lsl.w	r3, r2, r3
 800284a:	43da      	mvns	r2, r3
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	401a      	ands	r2, r3
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002854:	f04f 31ff 	mov.w	r1, #4294967295
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	fa01 f303 	lsl.w	r3, r1, r3
 800285e:	43d9      	mvns	r1, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002864:	4313      	orrs	r3, r2
         );
}
 8002866:	4618      	mov	r0, r3
 8002868:	3724      	adds	r7, #36	; 0x24
 800286a:	46bd      	mov	sp, r7
 800286c:	bc80      	pop	{r7}
 800286e:	4770      	bx	lr

08002870 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	3b01      	subs	r3, #1
 800287c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002880:	d301      	bcc.n	8002886 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002882:	2301      	movs	r3, #1
 8002884:	e00f      	b.n	80028a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002886:	4a0a      	ldr	r2, [pc, #40]	; (80028b0 <SysTick_Config+0x40>)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	3b01      	subs	r3, #1
 800288c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800288e:	210f      	movs	r1, #15
 8002890:	f04f 30ff 	mov.w	r0, #4294967295
 8002894:	f7ff ff90 	bl	80027b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002898:	4b05      	ldr	r3, [pc, #20]	; (80028b0 <SysTick_Config+0x40>)
 800289a:	2200      	movs	r2, #0
 800289c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800289e:	4b04      	ldr	r3, [pc, #16]	; (80028b0 <SysTick_Config+0x40>)
 80028a0:	2207      	movs	r2, #7
 80028a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	e000e010 	.word	0xe000e010

080028b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f7ff ff2d 	bl	800271c <__NVIC_SetPriorityGrouping>
}
 80028c2:	bf00      	nop
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b086      	sub	sp, #24
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	4603      	mov	r3, r0
 80028d2:	60b9      	str	r1, [r7, #8]
 80028d4:	607a      	str	r2, [r7, #4]
 80028d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028d8:	2300      	movs	r3, #0
 80028da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028dc:	f7ff ff42 	bl	8002764 <__NVIC_GetPriorityGrouping>
 80028e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	68b9      	ldr	r1, [r7, #8]
 80028e6:	6978      	ldr	r0, [r7, #20]
 80028e8:	f7ff ff90 	bl	800280c <NVIC_EncodePriority>
 80028ec:	4602      	mov	r2, r0
 80028ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028f2:	4611      	mov	r1, r2
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7ff ff5f 	bl	80027b8 <__NVIC_SetPriority>
}
 80028fa:	bf00      	nop
 80028fc:	3718      	adds	r7, #24
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	b082      	sub	sp, #8
 8002906:	af00      	add	r7, sp, #0
 8002908:	4603      	mov	r3, r0
 800290a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800290c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002910:	4618      	mov	r0, r3
 8002912:	f7ff ff35 	bl	8002780 <__NVIC_EnableIRQ>
}
 8002916:	bf00      	nop
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	b082      	sub	sp, #8
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f7ff ffa2 	bl	8002870 <SysTick_Config>
 800292c:	4603      	mov	r3, r0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002936:	b480      	push	{r7}
 8002938:	b085      	sub	sp, #20
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800293e:	2300      	movs	r3, #0
 8002940:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002948:	2b02      	cmp	r3, #2
 800294a:	d008      	beq.n	800295e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2204      	movs	r2, #4
 8002950:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e020      	b.n	80029a0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 020e 	bic.w	r2, r2, #14
 800296c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f022 0201 	bic.w	r2, r2, #1
 800297c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002986:	2101      	movs	r1, #1
 8002988:	fa01 f202 	lsl.w	r2, r1, r2
 800298c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2201      	movs	r2, #1
 8002992:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800299e:	7bfb      	ldrb	r3, [r7, #15]
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3714      	adds	r7, #20
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bc80      	pop	{r7}
 80029a8:	4770      	bx	lr
	...

080029ac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029b4:	2300      	movs	r3, #0
 80029b6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d005      	beq.n	80029ce <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2204      	movs	r2, #4
 80029c6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	73fb      	strb	r3, [r7, #15]
 80029cc:	e051      	b.n	8002a72 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f022 020e 	bic.w	r2, r2, #14
 80029dc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f022 0201 	bic.w	r2, r2, #1
 80029ec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a22      	ldr	r2, [pc, #136]	; (8002a7c <HAL_DMA_Abort_IT+0xd0>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d029      	beq.n	8002a4c <HAL_DMA_Abort_IT+0xa0>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a20      	ldr	r2, [pc, #128]	; (8002a80 <HAL_DMA_Abort_IT+0xd4>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d022      	beq.n	8002a48 <HAL_DMA_Abort_IT+0x9c>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a1f      	ldr	r2, [pc, #124]	; (8002a84 <HAL_DMA_Abort_IT+0xd8>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d01a      	beq.n	8002a42 <HAL_DMA_Abort_IT+0x96>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a1d      	ldr	r2, [pc, #116]	; (8002a88 <HAL_DMA_Abort_IT+0xdc>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d012      	beq.n	8002a3c <HAL_DMA_Abort_IT+0x90>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a1c      	ldr	r2, [pc, #112]	; (8002a8c <HAL_DMA_Abort_IT+0xe0>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d00a      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x8a>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a1a      	ldr	r2, [pc, #104]	; (8002a90 <HAL_DMA_Abort_IT+0xe4>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d102      	bne.n	8002a30 <HAL_DMA_Abort_IT+0x84>
 8002a2a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002a2e:	e00e      	b.n	8002a4e <HAL_DMA_Abort_IT+0xa2>
 8002a30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a34:	e00b      	b.n	8002a4e <HAL_DMA_Abort_IT+0xa2>
 8002a36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a3a:	e008      	b.n	8002a4e <HAL_DMA_Abort_IT+0xa2>
 8002a3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a40:	e005      	b.n	8002a4e <HAL_DMA_Abort_IT+0xa2>
 8002a42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a46:	e002      	b.n	8002a4e <HAL_DMA_Abort_IT+0xa2>
 8002a48:	2310      	movs	r3, #16
 8002a4a:	e000      	b.n	8002a4e <HAL_DMA_Abort_IT+0xa2>
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	4a11      	ldr	r2, [pc, #68]	; (8002a94 <HAL_DMA_Abort_IT+0xe8>)
 8002a50:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2201      	movs	r2, #1
 8002a56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d003      	beq.n	8002a72 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	4798      	blx	r3
    } 
  }
  return status;
 8002a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3710      	adds	r7, #16
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	40020008 	.word	0x40020008
 8002a80:	4002001c 	.word	0x4002001c
 8002a84:	40020030 	.word	0x40020030
 8002a88:	40020044 	.word	0x40020044
 8002a8c:	40020058 	.word	0x40020058
 8002a90:	4002006c 	.word	0x4002006c
 8002a94:	40020000 	.word	0x40020000

08002a98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b08b      	sub	sp, #44	; 0x2c
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002aaa:	e169      	b.n	8002d80 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002aac:	2201      	movs	r2, #1
 8002aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	69fa      	ldr	r2, [r7, #28]
 8002abc:	4013      	ands	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	f040 8158 	bne.w	8002d7a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	4a9a      	ldr	r2, [pc, #616]	; (8002d38 <HAL_GPIO_Init+0x2a0>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d05e      	beq.n	8002b92 <HAL_GPIO_Init+0xfa>
 8002ad4:	4a98      	ldr	r2, [pc, #608]	; (8002d38 <HAL_GPIO_Init+0x2a0>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d875      	bhi.n	8002bc6 <HAL_GPIO_Init+0x12e>
 8002ada:	4a98      	ldr	r2, [pc, #608]	; (8002d3c <HAL_GPIO_Init+0x2a4>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d058      	beq.n	8002b92 <HAL_GPIO_Init+0xfa>
 8002ae0:	4a96      	ldr	r2, [pc, #600]	; (8002d3c <HAL_GPIO_Init+0x2a4>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d86f      	bhi.n	8002bc6 <HAL_GPIO_Init+0x12e>
 8002ae6:	4a96      	ldr	r2, [pc, #600]	; (8002d40 <HAL_GPIO_Init+0x2a8>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d052      	beq.n	8002b92 <HAL_GPIO_Init+0xfa>
 8002aec:	4a94      	ldr	r2, [pc, #592]	; (8002d40 <HAL_GPIO_Init+0x2a8>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d869      	bhi.n	8002bc6 <HAL_GPIO_Init+0x12e>
 8002af2:	4a94      	ldr	r2, [pc, #592]	; (8002d44 <HAL_GPIO_Init+0x2ac>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d04c      	beq.n	8002b92 <HAL_GPIO_Init+0xfa>
 8002af8:	4a92      	ldr	r2, [pc, #584]	; (8002d44 <HAL_GPIO_Init+0x2ac>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d863      	bhi.n	8002bc6 <HAL_GPIO_Init+0x12e>
 8002afe:	4a92      	ldr	r2, [pc, #584]	; (8002d48 <HAL_GPIO_Init+0x2b0>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d046      	beq.n	8002b92 <HAL_GPIO_Init+0xfa>
 8002b04:	4a90      	ldr	r2, [pc, #576]	; (8002d48 <HAL_GPIO_Init+0x2b0>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d85d      	bhi.n	8002bc6 <HAL_GPIO_Init+0x12e>
 8002b0a:	2b12      	cmp	r3, #18
 8002b0c:	d82a      	bhi.n	8002b64 <HAL_GPIO_Init+0xcc>
 8002b0e:	2b12      	cmp	r3, #18
 8002b10:	d859      	bhi.n	8002bc6 <HAL_GPIO_Init+0x12e>
 8002b12:	a201      	add	r2, pc, #4	; (adr r2, 8002b18 <HAL_GPIO_Init+0x80>)
 8002b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b18:	08002b93 	.word	0x08002b93
 8002b1c:	08002b6d 	.word	0x08002b6d
 8002b20:	08002b7f 	.word	0x08002b7f
 8002b24:	08002bc1 	.word	0x08002bc1
 8002b28:	08002bc7 	.word	0x08002bc7
 8002b2c:	08002bc7 	.word	0x08002bc7
 8002b30:	08002bc7 	.word	0x08002bc7
 8002b34:	08002bc7 	.word	0x08002bc7
 8002b38:	08002bc7 	.word	0x08002bc7
 8002b3c:	08002bc7 	.word	0x08002bc7
 8002b40:	08002bc7 	.word	0x08002bc7
 8002b44:	08002bc7 	.word	0x08002bc7
 8002b48:	08002bc7 	.word	0x08002bc7
 8002b4c:	08002bc7 	.word	0x08002bc7
 8002b50:	08002bc7 	.word	0x08002bc7
 8002b54:	08002bc7 	.word	0x08002bc7
 8002b58:	08002bc7 	.word	0x08002bc7
 8002b5c:	08002b75 	.word	0x08002b75
 8002b60:	08002b89 	.word	0x08002b89
 8002b64:	4a79      	ldr	r2, [pc, #484]	; (8002d4c <HAL_GPIO_Init+0x2b4>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d013      	beq.n	8002b92 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002b6a:	e02c      	b.n	8002bc6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	623b      	str	r3, [r7, #32]
          break;
 8002b72:	e029      	b.n	8002bc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	3304      	adds	r3, #4
 8002b7a:	623b      	str	r3, [r7, #32]
          break;
 8002b7c:	e024      	b.n	8002bc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	3308      	adds	r3, #8
 8002b84:	623b      	str	r3, [r7, #32]
          break;
 8002b86:	e01f      	b.n	8002bc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	330c      	adds	r3, #12
 8002b8e:	623b      	str	r3, [r7, #32]
          break;
 8002b90:	e01a      	b.n	8002bc8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d102      	bne.n	8002ba0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b9a:	2304      	movs	r3, #4
 8002b9c:	623b      	str	r3, [r7, #32]
          break;
 8002b9e:	e013      	b.n	8002bc8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d105      	bne.n	8002bb4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ba8:	2308      	movs	r3, #8
 8002baa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	69fa      	ldr	r2, [r7, #28]
 8002bb0:	611a      	str	r2, [r3, #16]
          break;
 8002bb2:	e009      	b.n	8002bc8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002bb4:	2308      	movs	r3, #8
 8002bb6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	69fa      	ldr	r2, [r7, #28]
 8002bbc:	615a      	str	r2, [r3, #20]
          break;
 8002bbe:	e003      	b.n	8002bc8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	623b      	str	r3, [r7, #32]
          break;
 8002bc4:	e000      	b.n	8002bc8 <HAL_GPIO_Init+0x130>
          break;
 8002bc6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	2bff      	cmp	r3, #255	; 0xff
 8002bcc:	d801      	bhi.n	8002bd2 <HAL_GPIO_Init+0x13a>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	e001      	b.n	8002bd6 <HAL_GPIO_Init+0x13e>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	3304      	adds	r3, #4
 8002bd6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	2bff      	cmp	r3, #255	; 0xff
 8002bdc:	d802      	bhi.n	8002be4 <HAL_GPIO_Init+0x14c>
 8002bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	e002      	b.n	8002bea <HAL_GPIO_Init+0x152>
 8002be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be6:	3b08      	subs	r3, #8
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	210f      	movs	r1, #15
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf8:	43db      	mvns	r3, r3
 8002bfa:	401a      	ands	r2, r3
 8002bfc:	6a39      	ldr	r1, [r7, #32]
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	fa01 f303 	lsl.w	r3, r1, r3
 8002c04:	431a      	orrs	r2, r3
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	f000 80b1 	beq.w	8002d7a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c18:	4b4d      	ldr	r3, [pc, #308]	; (8002d50 <HAL_GPIO_Init+0x2b8>)
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	4a4c      	ldr	r2, [pc, #304]	; (8002d50 <HAL_GPIO_Init+0x2b8>)
 8002c1e:	f043 0301 	orr.w	r3, r3, #1
 8002c22:	6193      	str	r3, [r2, #24]
 8002c24:	4b4a      	ldr	r3, [pc, #296]	; (8002d50 <HAL_GPIO_Init+0x2b8>)
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	60bb      	str	r3, [r7, #8]
 8002c2e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002c30:	4a48      	ldr	r2, [pc, #288]	; (8002d54 <HAL_GPIO_Init+0x2bc>)
 8002c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c34:	089b      	lsrs	r3, r3, #2
 8002c36:	3302      	adds	r3, #2
 8002c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c3c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c40:	f003 0303 	and.w	r3, r3, #3
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	220f      	movs	r2, #15
 8002c48:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4c:	43db      	mvns	r3, r3
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	4013      	ands	r3, r2
 8002c52:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4a40      	ldr	r2, [pc, #256]	; (8002d58 <HAL_GPIO_Init+0x2c0>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d013      	beq.n	8002c84 <HAL_GPIO_Init+0x1ec>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4a3f      	ldr	r2, [pc, #252]	; (8002d5c <HAL_GPIO_Init+0x2c4>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d00d      	beq.n	8002c80 <HAL_GPIO_Init+0x1e8>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4a3e      	ldr	r2, [pc, #248]	; (8002d60 <HAL_GPIO_Init+0x2c8>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d007      	beq.n	8002c7c <HAL_GPIO_Init+0x1e4>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	4a3d      	ldr	r2, [pc, #244]	; (8002d64 <HAL_GPIO_Init+0x2cc>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d101      	bne.n	8002c78 <HAL_GPIO_Init+0x1e0>
 8002c74:	2303      	movs	r3, #3
 8002c76:	e006      	b.n	8002c86 <HAL_GPIO_Init+0x1ee>
 8002c78:	2304      	movs	r3, #4
 8002c7a:	e004      	b.n	8002c86 <HAL_GPIO_Init+0x1ee>
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	e002      	b.n	8002c86 <HAL_GPIO_Init+0x1ee>
 8002c80:	2301      	movs	r3, #1
 8002c82:	e000      	b.n	8002c86 <HAL_GPIO_Init+0x1ee>
 8002c84:	2300      	movs	r3, #0
 8002c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c88:	f002 0203 	and.w	r2, r2, #3
 8002c8c:	0092      	lsls	r2, r2, #2
 8002c8e:	4093      	lsls	r3, r2
 8002c90:	68fa      	ldr	r2, [r7, #12]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002c96:	492f      	ldr	r1, [pc, #188]	; (8002d54 <HAL_GPIO_Init+0x2bc>)
 8002c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9a:	089b      	lsrs	r3, r3, #2
 8002c9c:	3302      	adds	r3, #2
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d006      	beq.n	8002cbe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002cb0:	4b2d      	ldr	r3, [pc, #180]	; (8002d68 <HAL_GPIO_Init+0x2d0>)
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	492c      	ldr	r1, [pc, #176]	; (8002d68 <HAL_GPIO_Init+0x2d0>)
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	600b      	str	r3, [r1, #0]
 8002cbc:	e006      	b.n	8002ccc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002cbe:	4b2a      	ldr	r3, [pc, #168]	; (8002d68 <HAL_GPIO_Init+0x2d0>)
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	4928      	ldr	r1, [pc, #160]	; (8002d68 <HAL_GPIO_Init+0x2d0>)
 8002cc8:	4013      	ands	r3, r2
 8002cca:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d006      	beq.n	8002ce6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002cd8:	4b23      	ldr	r3, [pc, #140]	; (8002d68 <HAL_GPIO_Init+0x2d0>)
 8002cda:	685a      	ldr	r2, [r3, #4]
 8002cdc:	4922      	ldr	r1, [pc, #136]	; (8002d68 <HAL_GPIO_Init+0x2d0>)
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	604b      	str	r3, [r1, #4]
 8002ce4:	e006      	b.n	8002cf4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ce6:	4b20      	ldr	r3, [pc, #128]	; (8002d68 <HAL_GPIO_Init+0x2d0>)
 8002ce8:	685a      	ldr	r2, [r3, #4]
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	43db      	mvns	r3, r3
 8002cee:	491e      	ldr	r1, [pc, #120]	; (8002d68 <HAL_GPIO_Init+0x2d0>)
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d006      	beq.n	8002d0e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002d00:	4b19      	ldr	r3, [pc, #100]	; (8002d68 <HAL_GPIO_Init+0x2d0>)
 8002d02:	689a      	ldr	r2, [r3, #8]
 8002d04:	4918      	ldr	r1, [pc, #96]	; (8002d68 <HAL_GPIO_Init+0x2d0>)
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	608b      	str	r3, [r1, #8]
 8002d0c:	e006      	b.n	8002d1c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002d0e:	4b16      	ldr	r3, [pc, #88]	; (8002d68 <HAL_GPIO_Init+0x2d0>)
 8002d10:	689a      	ldr	r2, [r3, #8]
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	43db      	mvns	r3, r3
 8002d16:	4914      	ldr	r1, [pc, #80]	; (8002d68 <HAL_GPIO_Init+0x2d0>)
 8002d18:	4013      	ands	r3, r2
 8002d1a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d021      	beq.n	8002d6c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d28:	4b0f      	ldr	r3, [pc, #60]	; (8002d68 <HAL_GPIO_Init+0x2d0>)
 8002d2a:	68da      	ldr	r2, [r3, #12]
 8002d2c:	490e      	ldr	r1, [pc, #56]	; (8002d68 <HAL_GPIO_Init+0x2d0>)
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	60cb      	str	r3, [r1, #12]
 8002d34:	e021      	b.n	8002d7a <HAL_GPIO_Init+0x2e2>
 8002d36:	bf00      	nop
 8002d38:	10320000 	.word	0x10320000
 8002d3c:	10310000 	.word	0x10310000
 8002d40:	10220000 	.word	0x10220000
 8002d44:	10210000 	.word	0x10210000
 8002d48:	10120000 	.word	0x10120000
 8002d4c:	10110000 	.word	0x10110000
 8002d50:	40021000 	.word	0x40021000
 8002d54:	40010000 	.word	0x40010000
 8002d58:	40010800 	.word	0x40010800
 8002d5c:	40010c00 	.word	0x40010c00
 8002d60:	40011000 	.word	0x40011000
 8002d64:	40011400 	.word	0x40011400
 8002d68:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002d6c:	4b0b      	ldr	r3, [pc, #44]	; (8002d9c <HAL_GPIO_Init+0x304>)
 8002d6e:	68da      	ldr	r2, [r3, #12]
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	43db      	mvns	r3, r3
 8002d74:	4909      	ldr	r1, [pc, #36]	; (8002d9c <HAL_GPIO_Init+0x304>)
 8002d76:	4013      	ands	r3, r2
 8002d78:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d86:	fa22 f303 	lsr.w	r3, r2, r3
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	f47f ae8e 	bne.w	8002aac <HAL_GPIO_Init+0x14>
  }
}
 8002d90:	bf00      	nop
 8002d92:	bf00      	nop
 8002d94:	372c      	adds	r7, #44	; 0x2c
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bc80      	pop	{r7}
 8002d9a:	4770      	bx	lr
 8002d9c:	40010400 	.word	0x40010400

08002da0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	460b      	mov	r3, r1
 8002daa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689a      	ldr	r2, [r3, #8]
 8002db0:	887b      	ldrh	r3, [r7, #2]
 8002db2:	4013      	ands	r3, r2
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d002      	beq.n	8002dbe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002db8:	2301      	movs	r3, #1
 8002dba:	73fb      	strb	r3, [r7, #15]
 8002dbc:	e001      	b.n	8002dc2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3714      	adds	r7, #20
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bc80      	pop	{r7}
 8002dcc:	4770      	bx	lr

08002dce <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	b083      	sub	sp, #12
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	807b      	strh	r3, [r7, #2]
 8002dda:	4613      	mov	r3, r2
 8002ddc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002dde:	787b      	ldrb	r3, [r7, #1]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d003      	beq.n	8002dec <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002de4:	887a      	ldrh	r2, [r7, #2]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002dea:	e003      	b.n	8002df4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002dec:	887b      	ldrh	r3, [r7, #2]
 8002dee:	041a      	lsls	r2, r3, #16
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	611a      	str	r2, [r3, #16]
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bc80      	pop	{r7}
 8002dfc:	4770      	bx	lr
	...

08002e00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d101      	bne.n	8002e12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e26c      	b.n	80032ec <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	f000 8087 	beq.w	8002f2e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e20:	4b92      	ldr	r3, [pc, #584]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f003 030c 	and.w	r3, r3, #12
 8002e28:	2b04      	cmp	r3, #4
 8002e2a:	d00c      	beq.n	8002e46 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e2c:	4b8f      	ldr	r3, [pc, #572]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f003 030c 	and.w	r3, r3, #12
 8002e34:	2b08      	cmp	r3, #8
 8002e36:	d112      	bne.n	8002e5e <HAL_RCC_OscConfig+0x5e>
 8002e38:	4b8c      	ldr	r3, [pc, #560]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e44:	d10b      	bne.n	8002e5e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e46:	4b89      	ldr	r3, [pc, #548]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d06c      	beq.n	8002f2c <HAL_RCC_OscConfig+0x12c>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d168      	bne.n	8002f2c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e246      	b.n	80032ec <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e66:	d106      	bne.n	8002e76 <HAL_RCC_OscConfig+0x76>
 8002e68:	4b80      	ldr	r3, [pc, #512]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a7f      	ldr	r2, [pc, #508]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002e6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e72:	6013      	str	r3, [r2, #0]
 8002e74:	e02e      	b.n	8002ed4 <HAL_RCC_OscConfig+0xd4>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d10c      	bne.n	8002e98 <HAL_RCC_OscConfig+0x98>
 8002e7e:	4b7b      	ldr	r3, [pc, #492]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a7a      	ldr	r2, [pc, #488]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002e84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e88:	6013      	str	r3, [r2, #0]
 8002e8a:	4b78      	ldr	r3, [pc, #480]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a77      	ldr	r2, [pc, #476]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002e90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e94:	6013      	str	r3, [r2, #0]
 8002e96:	e01d      	b.n	8002ed4 <HAL_RCC_OscConfig+0xd4>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ea0:	d10c      	bne.n	8002ebc <HAL_RCC_OscConfig+0xbc>
 8002ea2:	4b72      	ldr	r3, [pc, #456]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a71      	ldr	r2, [pc, #452]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002ea8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002eac:	6013      	str	r3, [r2, #0]
 8002eae:	4b6f      	ldr	r3, [pc, #444]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a6e      	ldr	r2, [pc, #440]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002eb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eb8:	6013      	str	r3, [r2, #0]
 8002eba:	e00b      	b.n	8002ed4 <HAL_RCC_OscConfig+0xd4>
 8002ebc:	4b6b      	ldr	r3, [pc, #428]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a6a      	ldr	r2, [pc, #424]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002ec2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ec6:	6013      	str	r3, [r2, #0]
 8002ec8:	4b68      	ldr	r3, [pc, #416]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a67      	ldr	r2, [pc, #412]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002ece:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ed2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d013      	beq.n	8002f04 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002edc:	f7ff f8ca 	bl	8002074 <HAL_GetTick>
 8002ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ee2:	e008      	b.n	8002ef6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ee4:	f7ff f8c6 	bl	8002074 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b64      	cmp	r3, #100	; 0x64
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e1fa      	b.n	80032ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ef6:	4b5d      	ldr	r3, [pc, #372]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d0f0      	beq.n	8002ee4 <HAL_RCC_OscConfig+0xe4>
 8002f02:	e014      	b.n	8002f2e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f04:	f7ff f8b6 	bl	8002074 <HAL_GetTick>
 8002f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f0a:	e008      	b.n	8002f1e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f0c:	f7ff f8b2 	bl	8002074 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b64      	cmp	r3, #100	; 0x64
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e1e6      	b.n	80032ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f1e:	4b53      	ldr	r3, [pc, #332]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1f0      	bne.n	8002f0c <HAL_RCC_OscConfig+0x10c>
 8002f2a:	e000      	b.n	8002f2e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d063      	beq.n	8003002 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f3a:	4b4c      	ldr	r3, [pc, #304]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f003 030c 	and.w	r3, r3, #12
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00b      	beq.n	8002f5e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f46:	4b49      	ldr	r3, [pc, #292]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f003 030c 	and.w	r3, r3, #12
 8002f4e:	2b08      	cmp	r3, #8
 8002f50:	d11c      	bne.n	8002f8c <HAL_RCC_OscConfig+0x18c>
 8002f52:	4b46      	ldr	r3, [pc, #280]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d116      	bne.n	8002f8c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f5e:	4b43      	ldr	r3, [pc, #268]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d005      	beq.n	8002f76 <HAL_RCC_OscConfig+0x176>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d001      	beq.n	8002f76 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e1ba      	b.n	80032ec <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f76:	4b3d      	ldr	r3, [pc, #244]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	4939      	ldr	r1, [pc, #228]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f8a:	e03a      	b.n	8003002 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d020      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f94:	4b36      	ldr	r3, [pc, #216]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8002f96:	2201      	movs	r2, #1
 8002f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f9a:	f7ff f86b 	bl	8002074 <HAL_GetTick>
 8002f9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fa0:	e008      	b.n	8002fb4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fa2:	f7ff f867 	bl	8002074 <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d901      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e19b      	b.n	80032ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fb4:	4b2d      	ldr	r3, [pc, #180]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d0f0      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fc0:	4b2a      	ldr	r3, [pc, #168]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	695b      	ldr	r3, [r3, #20]
 8002fcc:	00db      	lsls	r3, r3, #3
 8002fce:	4927      	ldr	r1, [pc, #156]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	600b      	str	r3, [r1, #0]
 8002fd4:	e015      	b.n	8003002 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fd6:	4b26      	ldr	r3, [pc, #152]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fdc:	f7ff f84a 	bl	8002074 <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fe4:	f7ff f846 	bl	8002074 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e17a      	b.n	80032ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ff6:	4b1d      	ldr	r3, [pc, #116]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1f0      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0308 	and.w	r3, r3, #8
 800300a:	2b00      	cmp	r3, #0
 800300c:	d03a      	beq.n	8003084 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d019      	beq.n	800304a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003016:	4b17      	ldr	r3, [pc, #92]	; (8003074 <HAL_RCC_OscConfig+0x274>)
 8003018:	2201      	movs	r2, #1
 800301a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800301c:	f7ff f82a 	bl	8002074 <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003022:	e008      	b.n	8003036 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003024:	f7ff f826 	bl	8002074 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e15a      	b.n	80032ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003036:	4b0d      	ldr	r3, [pc, #52]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8003038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d0f0      	beq.n	8003024 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003042:	2001      	movs	r0, #1
 8003044:	f000 fad8 	bl	80035f8 <RCC_Delay>
 8003048:	e01c      	b.n	8003084 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800304a:	4b0a      	ldr	r3, [pc, #40]	; (8003074 <HAL_RCC_OscConfig+0x274>)
 800304c:	2200      	movs	r2, #0
 800304e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003050:	f7ff f810 	bl	8002074 <HAL_GetTick>
 8003054:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003056:	e00f      	b.n	8003078 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003058:	f7ff f80c 	bl	8002074 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b02      	cmp	r3, #2
 8003064:	d908      	bls.n	8003078 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e140      	b.n	80032ec <HAL_RCC_OscConfig+0x4ec>
 800306a:	bf00      	nop
 800306c:	40021000 	.word	0x40021000
 8003070:	42420000 	.word	0x42420000
 8003074:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003078:	4b9e      	ldr	r3, [pc, #632]	; (80032f4 <HAL_RCC_OscConfig+0x4f4>)
 800307a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d1e9      	bne.n	8003058 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0304 	and.w	r3, r3, #4
 800308c:	2b00      	cmp	r3, #0
 800308e:	f000 80a6 	beq.w	80031de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003092:	2300      	movs	r3, #0
 8003094:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003096:	4b97      	ldr	r3, [pc, #604]	; (80032f4 <HAL_RCC_OscConfig+0x4f4>)
 8003098:	69db      	ldr	r3, [r3, #28]
 800309a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d10d      	bne.n	80030be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030a2:	4b94      	ldr	r3, [pc, #592]	; (80032f4 <HAL_RCC_OscConfig+0x4f4>)
 80030a4:	69db      	ldr	r3, [r3, #28]
 80030a6:	4a93      	ldr	r2, [pc, #588]	; (80032f4 <HAL_RCC_OscConfig+0x4f4>)
 80030a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030ac:	61d3      	str	r3, [r2, #28]
 80030ae:	4b91      	ldr	r3, [pc, #580]	; (80032f4 <HAL_RCC_OscConfig+0x4f4>)
 80030b0:	69db      	ldr	r3, [r3, #28]
 80030b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030b6:	60bb      	str	r3, [r7, #8]
 80030b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030ba:	2301      	movs	r3, #1
 80030bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030be:	4b8e      	ldr	r3, [pc, #568]	; (80032f8 <HAL_RCC_OscConfig+0x4f8>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d118      	bne.n	80030fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030ca:	4b8b      	ldr	r3, [pc, #556]	; (80032f8 <HAL_RCC_OscConfig+0x4f8>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a8a      	ldr	r2, [pc, #552]	; (80032f8 <HAL_RCC_OscConfig+0x4f8>)
 80030d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030d6:	f7fe ffcd 	bl	8002074 <HAL_GetTick>
 80030da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030dc:	e008      	b.n	80030f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030de:	f7fe ffc9 	bl	8002074 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	2b64      	cmp	r3, #100	; 0x64
 80030ea:	d901      	bls.n	80030f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e0fd      	b.n	80032ec <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030f0:	4b81      	ldr	r3, [pc, #516]	; (80032f8 <HAL_RCC_OscConfig+0x4f8>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d0f0      	beq.n	80030de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	2b01      	cmp	r3, #1
 8003102:	d106      	bne.n	8003112 <HAL_RCC_OscConfig+0x312>
 8003104:	4b7b      	ldr	r3, [pc, #492]	; (80032f4 <HAL_RCC_OscConfig+0x4f4>)
 8003106:	6a1b      	ldr	r3, [r3, #32]
 8003108:	4a7a      	ldr	r2, [pc, #488]	; (80032f4 <HAL_RCC_OscConfig+0x4f4>)
 800310a:	f043 0301 	orr.w	r3, r3, #1
 800310e:	6213      	str	r3, [r2, #32]
 8003110:	e02d      	b.n	800316e <HAL_RCC_OscConfig+0x36e>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d10c      	bne.n	8003134 <HAL_RCC_OscConfig+0x334>
 800311a:	4b76      	ldr	r3, [pc, #472]	; (80032f4 <HAL_RCC_OscConfig+0x4f4>)
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	4a75      	ldr	r2, [pc, #468]	; (80032f4 <HAL_RCC_OscConfig+0x4f4>)
 8003120:	f023 0301 	bic.w	r3, r3, #1
 8003124:	6213      	str	r3, [r2, #32]
 8003126:	4b73      	ldr	r3, [pc, #460]	; (80032f4 <HAL_RCC_OscConfig+0x4f4>)
 8003128:	6a1b      	ldr	r3, [r3, #32]
 800312a:	4a72      	ldr	r2, [pc, #456]	; (80032f4 <HAL_RCC_OscConfig+0x4f4>)
 800312c:	f023 0304 	bic.w	r3, r3, #4
 8003130:	6213      	str	r3, [r2, #32]
 8003132:	e01c      	b.n	800316e <HAL_RCC_OscConfig+0x36e>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	2b05      	cmp	r3, #5
 800313a:	d10c      	bne.n	8003156 <HAL_RCC_OscConfig+0x356>
 800313c:	4b6d      	ldr	r3, [pc, #436]	; (80032f4 <HAL_RCC_OscConfig+0x4f4>)
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	4a6c      	ldr	r2, [pc, #432]	; (80032f4 <HAL_RCC_OscConfig+0x4f4>)
 8003142:	f043 0304 	orr.w	r3, r3, #4
 8003146:	6213      	str	r3, [r2, #32]
 8003148:	4b6a      	ldr	r3, [pc, #424]	; (80032f4 <HAL_RCC_OscConfig+0x4f4>)
 800314a:	6a1b      	ldr	r3, [r3, #32]
 800314c:	4a69      	ldr	r2, [pc, #420]	; (80032f4 <HAL_RCC_OscConfig+0x4f4>)
 800314e:	f043 0301 	orr.w	r3, r3, #1
 8003152:	6213      	str	r3, [r2, #32]
 8003154:	e00b      	b.n	800316e <HAL_RCC_OscConfig+0x36e>
 8003156:	4b67      	ldr	r3, [pc, #412]	; (80032f4 <HAL_RCC_OscConfig+0x4f4>)
 8003158:	6a1b      	ldr	r3, [r3, #32]
 800315a:	4a66      	ldr	r2, [pc, #408]	; (80032f4 <HAL_RCC_OscConfig+0x4f4>)
 800315c:	f023 0301 	bic.w	r3, r3, #1
 8003160:	6213      	str	r3, [r2, #32]
 8003162:	4b64      	ldr	r3, [pc, #400]	; (80032f4 <HAL_RCC_OscConfig+0x4f4>)
 8003164:	6a1b      	ldr	r3, [r3, #32]
 8003166:	4a63      	ldr	r2, [pc, #396]	; (80032f4 <HAL_RCC_OscConfig+0x4f4>)
 8003168:	f023 0304 	bic.w	r3, r3, #4
 800316c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d015      	beq.n	80031a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003176:	f7fe ff7d 	bl	8002074 <HAL_GetTick>
 800317a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800317c:	e00a      	b.n	8003194 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800317e:	f7fe ff79 	bl	8002074 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	f241 3288 	movw	r2, #5000	; 0x1388
 800318c:	4293      	cmp	r3, r2
 800318e:	d901      	bls.n	8003194 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e0ab      	b.n	80032ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003194:	4b57      	ldr	r3, [pc, #348]	; (80032f4 <HAL_RCC_OscConfig+0x4f4>)
 8003196:	6a1b      	ldr	r3, [r3, #32]
 8003198:	f003 0302 	and.w	r3, r3, #2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d0ee      	beq.n	800317e <HAL_RCC_OscConfig+0x37e>
 80031a0:	e014      	b.n	80031cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031a2:	f7fe ff67 	bl	8002074 <HAL_GetTick>
 80031a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031a8:	e00a      	b.n	80031c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031aa:	f7fe ff63 	bl	8002074 <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d901      	bls.n	80031c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e095      	b.n	80032ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031c0:	4b4c      	ldr	r3, [pc, #304]	; (80032f4 <HAL_RCC_OscConfig+0x4f4>)
 80031c2:	6a1b      	ldr	r3, [r3, #32]
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d1ee      	bne.n	80031aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80031cc:	7dfb      	ldrb	r3, [r7, #23]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d105      	bne.n	80031de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031d2:	4b48      	ldr	r3, [pc, #288]	; (80032f4 <HAL_RCC_OscConfig+0x4f4>)
 80031d4:	69db      	ldr	r3, [r3, #28]
 80031d6:	4a47      	ldr	r2, [pc, #284]	; (80032f4 <HAL_RCC_OscConfig+0x4f4>)
 80031d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	69db      	ldr	r3, [r3, #28]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	f000 8081 	beq.w	80032ea <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031e8:	4b42      	ldr	r3, [pc, #264]	; (80032f4 <HAL_RCC_OscConfig+0x4f4>)
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f003 030c 	and.w	r3, r3, #12
 80031f0:	2b08      	cmp	r3, #8
 80031f2:	d061      	beq.n	80032b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	69db      	ldr	r3, [r3, #28]
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d146      	bne.n	800328a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031fc:	4b3f      	ldr	r3, [pc, #252]	; (80032fc <HAL_RCC_OscConfig+0x4fc>)
 80031fe:	2200      	movs	r2, #0
 8003200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003202:	f7fe ff37 	bl	8002074 <HAL_GetTick>
 8003206:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003208:	e008      	b.n	800321c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800320a:	f7fe ff33 	bl	8002074 <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	2b02      	cmp	r3, #2
 8003216:	d901      	bls.n	800321c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e067      	b.n	80032ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800321c:	4b35      	ldr	r3, [pc, #212]	; (80032f4 <HAL_RCC_OscConfig+0x4f4>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d1f0      	bne.n	800320a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a1b      	ldr	r3, [r3, #32]
 800322c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003230:	d108      	bne.n	8003244 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003232:	4b30      	ldr	r3, [pc, #192]	; (80032f4 <HAL_RCC_OscConfig+0x4f4>)
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	492d      	ldr	r1, [pc, #180]	; (80032f4 <HAL_RCC_OscConfig+0x4f4>)
 8003240:	4313      	orrs	r3, r2
 8003242:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003244:	4b2b      	ldr	r3, [pc, #172]	; (80032f4 <HAL_RCC_OscConfig+0x4f4>)
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a19      	ldr	r1, [r3, #32]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003254:	430b      	orrs	r3, r1
 8003256:	4927      	ldr	r1, [pc, #156]	; (80032f4 <HAL_RCC_OscConfig+0x4f4>)
 8003258:	4313      	orrs	r3, r2
 800325a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800325c:	4b27      	ldr	r3, [pc, #156]	; (80032fc <HAL_RCC_OscConfig+0x4fc>)
 800325e:	2201      	movs	r2, #1
 8003260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003262:	f7fe ff07 	bl	8002074 <HAL_GetTick>
 8003266:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003268:	e008      	b.n	800327c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800326a:	f7fe ff03 	bl	8002074 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	2b02      	cmp	r3, #2
 8003276:	d901      	bls.n	800327c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e037      	b.n	80032ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800327c:	4b1d      	ldr	r3, [pc, #116]	; (80032f4 <HAL_RCC_OscConfig+0x4f4>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d0f0      	beq.n	800326a <HAL_RCC_OscConfig+0x46a>
 8003288:	e02f      	b.n	80032ea <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800328a:	4b1c      	ldr	r3, [pc, #112]	; (80032fc <HAL_RCC_OscConfig+0x4fc>)
 800328c:	2200      	movs	r2, #0
 800328e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003290:	f7fe fef0 	bl	8002074 <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003296:	e008      	b.n	80032aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003298:	f7fe feec 	bl	8002074 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e020      	b.n	80032ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032aa:	4b12      	ldr	r3, [pc, #72]	; (80032f4 <HAL_RCC_OscConfig+0x4f4>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1f0      	bne.n	8003298 <HAL_RCC_OscConfig+0x498>
 80032b6:	e018      	b.n	80032ea <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	69db      	ldr	r3, [r3, #28]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d101      	bne.n	80032c4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e013      	b.n	80032ec <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032c4:	4b0b      	ldr	r3, [pc, #44]	; (80032f4 <HAL_RCC_OscConfig+0x4f4>)
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a1b      	ldr	r3, [r3, #32]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d106      	bne.n	80032e6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d001      	beq.n	80032ea <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e000      	b.n	80032ec <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3718      	adds	r7, #24
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	40021000 	.word	0x40021000
 80032f8:	40007000 	.word	0x40007000
 80032fc:	42420060 	.word	0x42420060

08003300 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d101      	bne.n	8003314 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e0d0      	b.n	80034b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003314:	4b6a      	ldr	r3, [pc, #424]	; (80034c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0307 	and.w	r3, r3, #7
 800331c:	683a      	ldr	r2, [r7, #0]
 800331e:	429a      	cmp	r2, r3
 8003320:	d910      	bls.n	8003344 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003322:	4b67      	ldr	r3, [pc, #412]	; (80034c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f023 0207 	bic.w	r2, r3, #7
 800332a:	4965      	ldr	r1, [pc, #404]	; (80034c0 <HAL_RCC_ClockConfig+0x1c0>)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	4313      	orrs	r3, r2
 8003330:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003332:	4b63      	ldr	r3, [pc, #396]	; (80034c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0307 	and.w	r3, r3, #7
 800333a:	683a      	ldr	r2, [r7, #0]
 800333c:	429a      	cmp	r2, r3
 800333e:	d001      	beq.n	8003344 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e0b8      	b.n	80034b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0302 	and.w	r3, r3, #2
 800334c:	2b00      	cmp	r3, #0
 800334e:	d020      	beq.n	8003392 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0304 	and.w	r3, r3, #4
 8003358:	2b00      	cmp	r3, #0
 800335a:	d005      	beq.n	8003368 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800335c:	4b59      	ldr	r3, [pc, #356]	; (80034c4 <HAL_RCC_ClockConfig+0x1c4>)
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	4a58      	ldr	r2, [pc, #352]	; (80034c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003362:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003366:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0308 	and.w	r3, r3, #8
 8003370:	2b00      	cmp	r3, #0
 8003372:	d005      	beq.n	8003380 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003374:	4b53      	ldr	r3, [pc, #332]	; (80034c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	4a52      	ldr	r2, [pc, #328]	; (80034c4 <HAL_RCC_ClockConfig+0x1c4>)
 800337a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800337e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003380:	4b50      	ldr	r3, [pc, #320]	; (80034c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	494d      	ldr	r1, [pc, #308]	; (80034c4 <HAL_RCC_ClockConfig+0x1c4>)
 800338e:	4313      	orrs	r3, r2
 8003390:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0301 	and.w	r3, r3, #1
 800339a:	2b00      	cmp	r3, #0
 800339c:	d040      	beq.n	8003420 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d107      	bne.n	80033b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033a6:	4b47      	ldr	r3, [pc, #284]	; (80034c4 <HAL_RCC_ClockConfig+0x1c4>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d115      	bne.n	80033de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e07f      	b.n	80034b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d107      	bne.n	80033ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033be:	4b41      	ldr	r3, [pc, #260]	; (80034c4 <HAL_RCC_ClockConfig+0x1c4>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d109      	bne.n	80033de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e073      	b.n	80034b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ce:	4b3d      	ldr	r3, [pc, #244]	; (80034c4 <HAL_RCC_ClockConfig+0x1c4>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e06b      	b.n	80034b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033de:	4b39      	ldr	r3, [pc, #228]	; (80034c4 <HAL_RCC_ClockConfig+0x1c4>)
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f023 0203 	bic.w	r2, r3, #3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	4936      	ldr	r1, [pc, #216]	; (80034c4 <HAL_RCC_ClockConfig+0x1c4>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033f0:	f7fe fe40 	bl	8002074 <HAL_GetTick>
 80033f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033f6:	e00a      	b.n	800340e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033f8:	f7fe fe3c 	bl	8002074 <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	f241 3288 	movw	r2, #5000	; 0x1388
 8003406:	4293      	cmp	r3, r2
 8003408:	d901      	bls.n	800340e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e053      	b.n	80034b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800340e:	4b2d      	ldr	r3, [pc, #180]	; (80034c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f003 020c 	and.w	r2, r3, #12
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	429a      	cmp	r2, r3
 800341e:	d1eb      	bne.n	80033f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003420:	4b27      	ldr	r3, [pc, #156]	; (80034c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0307 	and.w	r3, r3, #7
 8003428:	683a      	ldr	r2, [r7, #0]
 800342a:	429a      	cmp	r2, r3
 800342c:	d210      	bcs.n	8003450 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800342e:	4b24      	ldr	r3, [pc, #144]	; (80034c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f023 0207 	bic.w	r2, r3, #7
 8003436:	4922      	ldr	r1, [pc, #136]	; (80034c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	4313      	orrs	r3, r2
 800343c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800343e:	4b20      	ldr	r3, [pc, #128]	; (80034c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0307 	and.w	r3, r3, #7
 8003446:	683a      	ldr	r2, [r7, #0]
 8003448:	429a      	cmp	r2, r3
 800344a:	d001      	beq.n	8003450 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e032      	b.n	80034b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0304 	and.w	r3, r3, #4
 8003458:	2b00      	cmp	r3, #0
 800345a:	d008      	beq.n	800346e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800345c:	4b19      	ldr	r3, [pc, #100]	; (80034c4 <HAL_RCC_ClockConfig+0x1c4>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	4916      	ldr	r1, [pc, #88]	; (80034c4 <HAL_RCC_ClockConfig+0x1c4>)
 800346a:	4313      	orrs	r3, r2
 800346c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0308 	and.w	r3, r3, #8
 8003476:	2b00      	cmp	r3, #0
 8003478:	d009      	beq.n	800348e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800347a:	4b12      	ldr	r3, [pc, #72]	; (80034c4 <HAL_RCC_ClockConfig+0x1c4>)
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	00db      	lsls	r3, r3, #3
 8003488:	490e      	ldr	r1, [pc, #56]	; (80034c4 <HAL_RCC_ClockConfig+0x1c4>)
 800348a:	4313      	orrs	r3, r2
 800348c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800348e:	f000 f821 	bl	80034d4 <HAL_RCC_GetSysClockFreq>
 8003492:	4602      	mov	r2, r0
 8003494:	4b0b      	ldr	r3, [pc, #44]	; (80034c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	091b      	lsrs	r3, r3, #4
 800349a:	f003 030f 	and.w	r3, r3, #15
 800349e:	490a      	ldr	r1, [pc, #40]	; (80034c8 <HAL_RCC_ClockConfig+0x1c8>)
 80034a0:	5ccb      	ldrb	r3, [r1, r3]
 80034a2:	fa22 f303 	lsr.w	r3, r2, r3
 80034a6:	4a09      	ldr	r2, [pc, #36]	; (80034cc <HAL_RCC_ClockConfig+0x1cc>)
 80034a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80034aa:	4b09      	ldr	r3, [pc, #36]	; (80034d0 <HAL_RCC_ClockConfig+0x1d0>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7fe fd9e 	bl	8001ff0 <HAL_InitTick>

  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3710      	adds	r7, #16
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	40022000 	.word	0x40022000
 80034c4:	40021000 	.word	0x40021000
 80034c8:	08009848 	.word	0x08009848
 80034cc:	20000000 	.word	0x20000000
 80034d0:	20000004 	.word	0x20000004

080034d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034d4:	b490      	push	{r4, r7}
 80034d6:	b08a      	sub	sp, #40	; 0x28
 80034d8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80034da:	4b2a      	ldr	r3, [pc, #168]	; (8003584 <HAL_RCC_GetSysClockFreq+0xb0>)
 80034dc:	1d3c      	adds	r4, r7, #4
 80034de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80034e4:	f240 2301 	movw	r3, #513	; 0x201
 80034e8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034ea:	2300      	movs	r3, #0
 80034ec:	61fb      	str	r3, [r7, #28]
 80034ee:	2300      	movs	r3, #0
 80034f0:	61bb      	str	r3, [r7, #24]
 80034f2:	2300      	movs	r3, #0
 80034f4:	627b      	str	r3, [r7, #36]	; 0x24
 80034f6:	2300      	movs	r3, #0
 80034f8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80034fa:	2300      	movs	r3, #0
 80034fc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80034fe:	4b22      	ldr	r3, [pc, #136]	; (8003588 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	f003 030c 	and.w	r3, r3, #12
 800350a:	2b04      	cmp	r3, #4
 800350c:	d002      	beq.n	8003514 <HAL_RCC_GetSysClockFreq+0x40>
 800350e:	2b08      	cmp	r3, #8
 8003510:	d003      	beq.n	800351a <HAL_RCC_GetSysClockFreq+0x46>
 8003512:	e02d      	b.n	8003570 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003514:	4b1d      	ldr	r3, [pc, #116]	; (800358c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003516:	623b      	str	r3, [r7, #32]
      break;
 8003518:	e02d      	b.n	8003576 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	0c9b      	lsrs	r3, r3, #18
 800351e:	f003 030f 	and.w	r3, r3, #15
 8003522:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003526:	4413      	add	r3, r2
 8003528:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800352c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d013      	beq.n	8003560 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003538:	4b13      	ldr	r3, [pc, #76]	; (8003588 <HAL_RCC_GetSysClockFreq+0xb4>)
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	0c5b      	lsrs	r3, r3, #17
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003546:	4413      	add	r3, r2
 8003548:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800354c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	4a0e      	ldr	r2, [pc, #56]	; (800358c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003552:	fb02 f203 	mul.w	r2, r2, r3
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	fbb2 f3f3 	udiv	r3, r2, r3
 800355c:	627b      	str	r3, [r7, #36]	; 0x24
 800355e:	e004      	b.n	800356a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	4a0b      	ldr	r2, [pc, #44]	; (8003590 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003564:	fb02 f303 	mul.w	r3, r2, r3
 8003568:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800356a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356c:	623b      	str	r3, [r7, #32]
      break;
 800356e:	e002      	b.n	8003576 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003570:	4b06      	ldr	r3, [pc, #24]	; (800358c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003572:	623b      	str	r3, [r7, #32]
      break;
 8003574:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003576:	6a3b      	ldr	r3, [r7, #32]
}
 8003578:	4618      	mov	r0, r3
 800357a:	3728      	adds	r7, #40	; 0x28
 800357c:	46bd      	mov	sp, r7
 800357e:	bc90      	pop	{r4, r7}
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	08009838 	.word	0x08009838
 8003588:	40021000 	.word	0x40021000
 800358c:	007a1200 	.word	0x007a1200
 8003590:	003d0900 	.word	0x003d0900

08003594 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003594:	b480      	push	{r7}
 8003596:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003598:	4b02      	ldr	r3, [pc, #8]	; (80035a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800359a:	681b      	ldr	r3, [r3, #0]
}
 800359c:	4618      	mov	r0, r3
 800359e:	46bd      	mov	sp, r7
 80035a0:	bc80      	pop	{r7}
 80035a2:	4770      	bx	lr
 80035a4:	20000000 	.word	0x20000000

080035a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035ac:	f7ff fff2 	bl	8003594 <HAL_RCC_GetHCLKFreq>
 80035b0:	4602      	mov	r2, r0
 80035b2:	4b05      	ldr	r3, [pc, #20]	; (80035c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	0a1b      	lsrs	r3, r3, #8
 80035b8:	f003 0307 	and.w	r3, r3, #7
 80035bc:	4903      	ldr	r1, [pc, #12]	; (80035cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80035be:	5ccb      	ldrb	r3, [r1, r3]
 80035c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	40021000 	.word	0x40021000
 80035cc:	08009858 	.word	0x08009858

080035d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035d4:	f7ff ffde 	bl	8003594 <HAL_RCC_GetHCLKFreq>
 80035d8:	4602      	mov	r2, r0
 80035da:	4b05      	ldr	r3, [pc, #20]	; (80035f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	0adb      	lsrs	r3, r3, #11
 80035e0:	f003 0307 	and.w	r3, r3, #7
 80035e4:	4903      	ldr	r1, [pc, #12]	; (80035f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035e6:	5ccb      	ldrb	r3, [r1, r3]
 80035e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	40021000 	.word	0x40021000
 80035f4:	08009858 	.word	0x08009858

080035f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b085      	sub	sp, #20
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003600:	4b0a      	ldr	r3, [pc, #40]	; (800362c <RCC_Delay+0x34>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a0a      	ldr	r2, [pc, #40]	; (8003630 <RCC_Delay+0x38>)
 8003606:	fba2 2303 	umull	r2, r3, r2, r3
 800360a:	0a5b      	lsrs	r3, r3, #9
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	fb02 f303 	mul.w	r3, r2, r3
 8003612:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003614:	bf00      	nop
  }
  while (Delay --);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	1e5a      	subs	r2, r3, #1
 800361a:	60fa      	str	r2, [r7, #12]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d1f9      	bne.n	8003614 <RCC_Delay+0x1c>
}
 8003620:	bf00      	nop
 8003622:	bf00      	nop
 8003624:	3714      	adds	r7, #20
 8003626:	46bd      	mov	sp, r7
 8003628:	bc80      	pop	{r7}
 800362a:	4770      	bx	lr
 800362c:	20000000 	.word	0x20000000
 8003630:	10624dd3 	.word	0x10624dd3

08003634 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b086      	sub	sp, #24
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800363c:	2300      	movs	r3, #0
 800363e:	613b      	str	r3, [r7, #16]
 8003640:	2300      	movs	r3, #0
 8003642:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0301 	and.w	r3, r3, #1
 800364c:	2b00      	cmp	r3, #0
 800364e:	d07d      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003650:	2300      	movs	r3, #0
 8003652:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003654:	4b4f      	ldr	r3, [pc, #316]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003656:	69db      	ldr	r3, [r3, #28]
 8003658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d10d      	bne.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003660:	4b4c      	ldr	r3, [pc, #304]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003662:	69db      	ldr	r3, [r3, #28]
 8003664:	4a4b      	ldr	r2, [pc, #300]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800366a:	61d3      	str	r3, [r2, #28]
 800366c:	4b49      	ldr	r3, [pc, #292]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800366e:	69db      	ldr	r3, [r3, #28]
 8003670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003674:	60bb      	str	r3, [r7, #8]
 8003676:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003678:	2301      	movs	r3, #1
 800367a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800367c:	4b46      	ldr	r3, [pc, #280]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003684:	2b00      	cmp	r3, #0
 8003686:	d118      	bne.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003688:	4b43      	ldr	r3, [pc, #268]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a42      	ldr	r2, [pc, #264]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800368e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003692:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003694:	f7fe fcee 	bl	8002074 <HAL_GetTick>
 8003698:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800369a:	e008      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800369c:	f7fe fcea 	bl	8002074 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b64      	cmp	r3, #100	; 0x64
 80036a8:	d901      	bls.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e06d      	b.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ae:	4b3a      	ldr	r3, [pc, #232]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d0f0      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036ba:	4b36      	ldr	r3, [pc, #216]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036bc:	6a1b      	ldr	r3, [r3, #32]
 80036be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036c2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d02e      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d027      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036d8:	4b2e      	ldr	r3, [pc, #184]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036da:	6a1b      	ldr	r3, [r3, #32]
 80036dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036e0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80036e2:	4b2e      	ldr	r3, [pc, #184]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036e4:	2201      	movs	r2, #1
 80036e6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036e8:	4b2c      	ldr	r3, [pc, #176]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80036ee:	4a29      	ldr	r2, [pc, #164]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f003 0301 	and.w	r3, r3, #1
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d014      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036fe:	f7fe fcb9 	bl	8002074 <HAL_GetTick>
 8003702:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003704:	e00a      	b.n	800371c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003706:	f7fe fcb5 	bl	8002074 <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	f241 3288 	movw	r2, #5000	; 0x1388
 8003714:	4293      	cmp	r3, r2
 8003716:	d901      	bls.n	800371c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e036      	b.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800371c:	4b1d      	ldr	r3, [pc, #116]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800371e:	6a1b      	ldr	r3, [r3, #32]
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	2b00      	cmp	r3, #0
 8003726:	d0ee      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003728:	4b1a      	ldr	r3, [pc, #104]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800372a:	6a1b      	ldr	r3, [r3, #32]
 800372c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	4917      	ldr	r1, [pc, #92]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003736:	4313      	orrs	r3, r2
 8003738:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800373a:	7dfb      	ldrb	r3, [r7, #23]
 800373c:	2b01      	cmp	r3, #1
 800373e:	d105      	bne.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003740:	4b14      	ldr	r3, [pc, #80]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003742:	69db      	ldr	r3, [r3, #28]
 8003744:	4a13      	ldr	r2, [pc, #76]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003746:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800374a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0302 	and.w	r3, r3, #2
 8003754:	2b00      	cmp	r3, #0
 8003756:	d008      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003758:	4b0e      	ldr	r3, [pc, #56]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	490b      	ldr	r1, [pc, #44]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003766:	4313      	orrs	r3, r2
 8003768:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0310 	and.w	r3, r3, #16
 8003772:	2b00      	cmp	r3, #0
 8003774:	d008      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003776:	4b07      	ldr	r3, [pc, #28]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	4904      	ldr	r1, [pc, #16]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003784:	4313      	orrs	r3, r2
 8003786:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3718      	adds	r7, #24
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	40021000 	.word	0x40021000
 8003798:	40007000 	.word	0x40007000
 800379c:	42420440 	.word	0x42420440

080037a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e076      	b.n	80038a0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d108      	bne.n	80037cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037c2:	d009      	beq.n	80037d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	61da      	str	r2, [r3, #28]
 80037ca:	e005      	b.n	80037d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d106      	bne.n	80037f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f7fe f9fa 	bl	8001bec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2202      	movs	r2, #2
 80037fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800380e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003820:	431a      	orrs	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800382a:	431a      	orrs	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	691b      	ldr	r3, [r3, #16]
 8003830:	f003 0302 	and.w	r3, r3, #2
 8003834:	431a      	orrs	r2, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	431a      	orrs	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003848:	431a      	orrs	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	69db      	ldr	r3, [r3, #28]
 800384e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003852:	431a      	orrs	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a1b      	ldr	r3, [r3, #32]
 8003858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800385c:	ea42 0103 	orr.w	r1, r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003864:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	430a      	orrs	r2, r1
 800386e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	0c1a      	lsrs	r2, r3, #16
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f002 0204 	and.w	r2, r2, #4
 800387e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	69da      	ldr	r2, [r3, #28]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800388e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2201      	movs	r2, #1
 800389a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800389e:	2300      	movs	r3, #0
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3708      	adds	r7, #8
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b08c      	sub	sp, #48	; 0x30
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	607a      	str	r2, [r7, #4]
 80038b4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80038b6:	2301      	movs	r3, #1
 80038b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80038ba:	2300      	movs	r3, #0
 80038bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d101      	bne.n	80038ce <HAL_SPI_TransmitReceive+0x26>
 80038ca:	2302      	movs	r3, #2
 80038cc:	e18a      	b.n	8003be4 <HAL_SPI_TransmitReceive+0x33c>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038d6:	f7fe fbcd 	bl	8002074 <HAL_GetTick>
 80038da:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80038ec:	887b      	ldrh	r3, [r7, #2]
 80038ee:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80038f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d00f      	beq.n	8003918 <HAL_SPI_TransmitReceive+0x70>
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038fe:	d107      	bne.n	8003910 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d103      	bne.n	8003910 <HAL_SPI_TransmitReceive+0x68>
 8003908:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800390c:	2b04      	cmp	r3, #4
 800390e:	d003      	beq.n	8003918 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003910:	2302      	movs	r3, #2
 8003912:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003916:	e15b      	b.n	8003bd0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d005      	beq.n	800392a <HAL_SPI_TransmitReceive+0x82>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d002      	beq.n	800392a <HAL_SPI_TransmitReceive+0x82>
 8003924:	887b      	ldrh	r3, [r7, #2]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d103      	bne.n	8003932 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003930:	e14e      	b.n	8003bd0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003938:	b2db      	uxtb	r3, r3
 800393a:	2b04      	cmp	r3, #4
 800393c:	d003      	beq.n	8003946 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2205      	movs	r2, #5
 8003942:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	887a      	ldrh	r2, [r7, #2]
 8003956:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	887a      	ldrh	r2, [r7, #2]
 800395c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	68ba      	ldr	r2, [r7, #8]
 8003962:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	887a      	ldrh	r2, [r7, #2]
 8003968:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	887a      	ldrh	r2, [r7, #2]
 800396e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2200      	movs	r2, #0
 8003974:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2200      	movs	r2, #0
 800397a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003986:	2b40      	cmp	r3, #64	; 0x40
 8003988:	d007      	beq.n	800399a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003998:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039a2:	d178      	bne.n	8003a96 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d002      	beq.n	80039b2 <HAL_SPI_TransmitReceive+0x10a>
 80039ac:	8b7b      	ldrh	r3, [r7, #26]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d166      	bne.n	8003a80 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b6:	881a      	ldrh	r2, [r3, #0]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c2:	1c9a      	adds	r2, r3, #2
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	3b01      	subs	r3, #1
 80039d0:	b29a      	uxth	r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039d6:	e053      	b.n	8003a80 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d11b      	bne.n	8003a1e <HAL_SPI_TransmitReceive+0x176>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d016      	beq.n	8003a1e <HAL_SPI_TransmitReceive+0x176>
 80039f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d113      	bne.n	8003a1e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fa:	881a      	ldrh	r2, [r3, #0]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a06:	1c9a      	adds	r2, r3, #2
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	3b01      	subs	r3, #1
 8003a14:	b29a      	uxth	r2, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f003 0301 	and.w	r3, r3, #1
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d119      	bne.n	8003a60 <HAL_SPI_TransmitReceive+0x1b8>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d014      	beq.n	8003a60 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68da      	ldr	r2, [r3, #12]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a40:	b292      	uxth	r2, r2
 8003a42:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a48:	1c9a      	adds	r2, r3, #2
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	3b01      	subs	r3, #1
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003a60:	f7fe fb08 	bl	8002074 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d807      	bhi.n	8003a80 <HAL_SPI_TransmitReceive+0x1d8>
 8003a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a76:	d003      	beq.n	8003a80 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003a7e:	e0a7      	b.n	8003bd0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1a6      	bne.n	80039d8 <HAL_SPI_TransmitReceive+0x130>
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1a1      	bne.n	80039d8 <HAL_SPI_TransmitReceive+0x130>
 8003a94:	e07c      	b.n	8003b90 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d002      	beq.n	8003aa4 <HAL_SPI_TransmitReceive+0x1fc>
 8003a9e:	8b7b      	ldrh	r3, [r7, #26]
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d16b      	bne.n	8003b7c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	330c      	adds	r3, #12
 8003aae:	7812      	ldrb	r2, [r2, #0]
 8003ab0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab6:	1c5a      	adds	r2, r3, #1
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	b29a      	uxth	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003aca:	e057      	b.n	8003b7c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d11c      	bne.n	8003b14 <HAL_SPI_TransmitReceive+0x26c>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d017      	beq.n	8003b14 <HAL_SPI_TransmitReceive+0x26c>
 8003ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d114      	bne.n	8003b14 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	330c      	adds	r3, #12
 8003af4:	7812      	ldrb	r2, [r2, #0]
 8003af6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afc:	1c5a      	adds	r2, r3, #1
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b10:	2300      	movs	r3, #0
 8003b12:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d119      	bne.n	8003b56 <HAL_SPI_TransmitReceive+0x2ae>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d014      	beq.n	8003b56 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68da      	ldr	r2, [r3, #12]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b36:	b2d2      	uxtb	r2, r2
 8003b38:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b3e:	1c5a      	adds	r2, r3, #1
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b52:	2301      	movs	r3, #1
 8003b54:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003b56:	f7fe fa8d 	bl	8002074 <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d803      	bhi.n	8003b6e <HAL_SPI_TransmitReceive+0x2c6>
 8003b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b6c:	d102      	bne.n	8003b74 <HAL_SPI_TransmitReceive+0x2cc>
 8003b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d103      	bne.n	8003b7c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003b7a:	e029      	b.n	8003bd0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d1a2      	bne.n	8003acc <HAL_SPI_TransmitReceive+0x224>
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d19d      	bne.n	8003acc <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b92:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b94:	68f8      	ldr	r0, [r7, #12]
 8003b96:	f000 f8b1 	bl	8003cfc <SPI_EndRxTxTransaction>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d006      	beq.n	8003bae <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2220      	movs	r2, #32
 8003baa:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003bac:	e010      	b.n	8003bd0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d10b      	bne.n	8003bce <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	617b      	str	r3, [r7, #20]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	617b      	str	r3, [r7, #20]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	617b      	str	r3, [r7, #20]
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	e000      	b.n	8003bd0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003bce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003be0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3730      	adds	r7, #48	; 0x30
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b088      	sub	sp, #32
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	603b      	str	r3, [r7, #0]
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003bfc:	f7fe fa3a 	bl	8002074 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c04:	1a9b      	subs	r3, r3, r2
 8003c06:	683a      	ldr	r2, [r7, #0]
 8003c08:	4413      	add	r3, r2
 8003c0a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003c0c:	f7fe fa32 	bl	8002074 <HAL_GetTick>
 8003c10:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003c12:	4b39      	ldr	r3, [pc, #228]	; (8003cf8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	015b      	lsls	r3, r3, #5
 8003c18:	0d1b      	lsrs	r3, r3, #20
 8003c1a:	69fa      	ldr	r2, [r7, #28]
 8003c1c:	fb02 f303 	mul.w	r3, r2, r3
 8003c20:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c22:	e054      	b.n	8003cce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c2a:	d050      	beq.n	8003cce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c2c:	f7fe fa22 	bl	8002074 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	69fa      	ldr	r2, [r7, #28]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d902      	bls.n	8003c42 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d13d      	bne.n	8003cbe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	685a      	ldr	r2, [r3, #4]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c50:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c5a:	d111      	bne.n	8003c80 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c64:	d004      	beq.n	8003c70 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c6e:	d107      	bne.n	8003c80 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c7e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c88:	d10f      	bne.n	8003caa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c98:	601a      	str	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ca8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e017      	b.n	8003cee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d101      	bne.n	8003cc8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	689a      	ldr	r2, [r3, #8]
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	68ba      	ldr	r2, [r7, #8]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	bf0c      	ite	eq
 8003cde:	2301      	moveq	r3, #1
 8003ce0:	2300      	movne	r3, #0
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	79fb      	ldrb	r3, [r7, #7]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d19b      	bne.n	8003c24 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3720      	adds	r7, #32
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	20000000 	.word	0x20000000

08003cfc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b086      	sub	sp, #24
 8003d00:	af02      	add	r7, sp, #8
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	9300      	str	r3, [sp, #0]
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	2180      	movs	r1, #128	; 0x80
 8003d12:	68f8      	ldr	r0, [r7, #12]
 8003d14:	f7ff ff6a 	bl	8003bec <SPI_WaitFlagStateUntilTimeout>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d007      	beq.n	8003d2e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d22:	f043 0220 	orr.w	r2, r3, #32
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e000      	b.n	8003d30 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3710      	adds	r7, #16
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d101      	bne.n	8003d4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e041      	b.n	8003dce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d106      	bne.n	8003d64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f7fd ff8e 	bl	8001c80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2202      	movs	r2, #2
 8003d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	3304      	adds	r3, #4
 8003d74:	4619      	mov	r1, r3
 8003d76:	4610      	mov	r0, r2
 8003d78:	f000 fa70 	bl	800425c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3708      	adds	r7, #8
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
	...

08003dd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d001      	beq.n	8003df0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e03a      	b.n	8003e66 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2202      	movs	r2, #2
 8003df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68da      	ldr	r2, [r3, #12]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f042 0201 	orr.w	r2, r2, #1
 8003e06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a18      	ldr	r2, [pc, #96]	; (8003e70 <HAL_TIM_Base_Start_IT+0x98>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d00e      	beq.n	8003e30 <HAL_TIM_Base_Start_IT+0x58>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e1a:	d009      	beq.n	8003e30 <HAL_TIM_Base_Start_IT+0x58>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a14      	ldr	r2, [pc, #80]	; (8003e74 <HAL_TIM_Base_Start_IT+0x9c>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d004      	beq.n	8003e30 <HAL_TIM_Base_Start_IT+0x58>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a13      	ldr	r2, [pc, #76]	; (8003e78 <HAL_TIM_Base_Start_IT+0xa0>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d111      	bne.n	8003e54 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f003 0307 	and.w	r3, r3, #7
 8003e3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2b06      	cmp	r3, #6
 8003e40:	d010      	beq.n	8003e64 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f042 0201 	orr.w	r2, r2, #1
 8003e50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e52:	e007      	b.n	8003e64 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f042 0201 	orr.w	r2, r2, #1
 8003e62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3714      	adds	r7, #20
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bc80      	pop	{r7}
 8003e6e:	4770      	bx	lr
 8003e70:	40012c00 	.word	0x40012c00
 8003e74:	40000400 	.word	0x40000400
 8003e78:	40000800 	.word	0x40000800

08003e7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d122      	bne.n	8003ed8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d11b      	bne.n	8003ed8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f06f 0202 	mvn.w	r2, #2
 8003ea8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2201      	movs	r2, #1
 8003eae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	f003 0303 	and.w	r3, r3, #3
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d003      	beq.n	8003ec6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f9b1 	bl	8004226 <HAL_TIM_IC_CaptureCallback>
 8003ec4:	e005      	b.n	8003ed2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 f9a4 	bl	8004214 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 f9b3 	bl	8004238 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	f003 0304 	and.w	r3, r3, #4
 8003ee2:	2b04      	cmp	r3, #4
 8003ee4:	d122      	bne.n	8003f2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	f003 0304 	and.w	r3, r3, #4
 8003ef0:	2b04      	cmp	r3, #4
 8003ef2:	d11b      	bne.n	8003f2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f06f 0204 	mvn.w	r2, #4
 8003efc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2202      	movs	r2, #2
 8003f02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d003      	beq.n	8003f1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 f987 	bl	8004226 <HAL_TIM_IC_CaptureCallback>
 8003f18:	e005      	b.n	8003f26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 f97a 	bl	8004214 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f000 f989 	bl	8004238 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	f003 0308 	and.w	r3, r3, #8
 8003f36:	2b08      	cmp	r3, #8
 8003f38:	d122      	bne.n	8003f80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	f003 0308 	and.w	r3, r3, #8
 8003f44:	2b08      	cmp	r3, #8
 8003f46:	d11b      	bne.n	8003f80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f06f 0208 	mvn.w	r2, #8
 8003f50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2204      	movs	r2, #4
 8003f56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	69db      	ldr	r3, [r3, #28]
 8003f5e:	f003 0303 	and.w	r3, r3, #3
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d003      	beq.n	8003f6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 f95d 	bl	8004226 <HAL_TIM_IC_CaptureCallback>
 8003f6c:	e005      	b.n	8003f7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 f950 	bl	8004214 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f000 f95f 	bl	8004238 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	f003 0310 	and.w	r3, r3, #16
 8003f8a:	2b10      	cmp	r3, #16
 8003f8c:	d122      	bne.n	8003fd4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	f003 0310 	and.w	r3, r3, #16
 8003f98:	2b10      	cmp	r3, #16
 8003f9a:	d11b      	bne.n	8003fd4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f06f 0210 	mvn.w	r2, #16
 8003fa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2208      	movs	r2, #8
 8003faa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	69db      	ldr	r3, [r3, #28]
 8003fb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d003      	beq.n	8003fc2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 f933 	bl	8004226 <HAL_TIM_IC_CaptureCallback>
 8003fc0:	e005      	b.n	8003fce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 f926 	bl	8004214 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f000 f935 	bl	8004238 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	f003 0301 	and.w	r3, r3, #1
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d10e      	bne.n	8004000 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	f003 0301 	and.w	r3, r3, #1
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d107      	bne.n	8004000 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f06f 0201 	mvn.w	r2, #1
 8003ff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f7fd f8ca 	bl	8001194 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800400a:	2b80      	cmp	r3, #128	; 0x80
 800400c:	d10e      	bne.n	800402c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004018:	2b80      	cmp	r3, #128	; 0x80
 800401a:	d107      	bne.n	800402c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 fa77 	bl	800451a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004036:	2b40      	cmp	r3, #64	; 0x40
 8004038:	d10e      	bne.n	8004058 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004044:	2b40      	cmp	r3, #64	; 0x40
 8004046:	d107      	bne.n	8004058 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 f8f9 	bl	800424a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	691b      	ldr	r3, [r3, #16]
 800405e:	f003 0320 	and.w	r3, r3, #32
 8004062:	2b20      	cmp	r3, #32
 8004064:	d10e      	bne.n	8004084 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	f003 0320 	and.w	r3, r3, #32
 8004070:	2b20      	cmp	r3, #32
 8004072:	d107      	bne.n	8004084 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f06f 0220 	mvn.w	r2, #32
 800407c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 fa42 	bl	8004508 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004084:	bf00      	nop
 8004086:	3708      	adds	r7, #8
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800409c:	2b01      	cmp	r3, #1
 800409e:	d101      	bne.n	80040a4 <HAL_TIM_ConfigClockSource+0x18>
 80040a0:	2302      	movs	r3, #2
 80040a2:	e0b3      	b.n	800420c <HAL_TIM_ConfigClockSource+0x180>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2202      	movs	r2, #2
 80040b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80040c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040ca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68fa      	ldr	r2, [r7, #12]
 80040d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040dc:	d03e      	beq.n	800415c <HAL_TIM_ConfigClockSource+0xd0>
 80040de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040e2:	f200 8087 	bhi.w	80041f4 <HAL_TIM_ConfigClockSource+0x168>
 80040e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ea:	f000 8085 	beq.w	80041f8 <HAL_TIM_ConfigClockSource+0x16c>
 80040ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040f2:	d87f      	bhi.n	80041f4 <HAL_TIM_ConfigClockSource+0x168>
 80040f4:	2b70      	cmp	r3, #112	; 0x70
 80040f6:	d01a      	beq.n	800412e <HAL_TIM_ConfigClockSource+0xa2>
 80040f8:	2b70      	cmp	r3, #112	; 0x70
 80040fa:	d87b      	bhi.n	80041f4 <HAL_TIM_ConfigClockSource+0x168>
 80040fc:	2b60      	cmp	r3, #96	; 0x60
 80040fe:	d050      	beq.n	80041a2 <HAL_TIM_ConfigClockSource+0x116>
 8004100:	2b60      	cmp	r3, #96	; 0x60
 8004102:	d877      	bhi.n	80041f4 <HAL_TIM_ConfigClockSource+0x168>
 8004104:	2b50      	cmp	r3, #80	; 0x50
 8004106:	d03c      	beq.n	8004182 <HAL_TIM_ConfigClockSource+0xf6>
 8004108:	2b50      	cmp	r3, #80	; 0x50
 800410a:	d873      	bhi.n	80041f4 <HAL_TIM_ConfigClockSource+0x168>
 800410c:	2b40      	cmp	r3, #64	; 0x40
 800410e:	d058      	beq.n	80041c2 <HAL_TIM_ConfigClockSource+0x136>
 8004110:	2b40      	cmp	r3, #64	; 0x40
 8004112:	d86f      	bhi.n	80041f4 <HAL_TIM_ConfigClockSource+0x168>
 8004114:	2b30      	cmp	r3, #48	; 0x30
 8004116:	d064      	beq.n	80041e2 <HAL_TIM_ConfigClockSource+0x156>
 8004118:	2b30      	cmp	r3, #48	; 0x30
 800411a:	d86b      	bhi.n	80041f4 <HAL_TIM_ConfigClockSource+0x168>
 800411c:	2b20      	cmp	r3, #32
 800411e:	d060      	beq.n	80041e2 <HAL_TIM_ConfigClockSource+0x156>
 8004120:	2b20      	cmp	r3, #32
 8004122:	d867      	bhi.n	80041f4 <HAL_TIM_ConfigClockSource+0x168>
 8004124:	2b00      	cmp	r3, #0
 8004126:	d05c      	beq.n	80041e2 <HAL_TIM_ConfigClockSource+0x156>
 8004128:	2b10      	cmp	r3, #16
 800412a:	d05a      	beq.n	80041e2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800412c:	e062      	b.n	80041f4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6818      	ldr	r0, [r3, #0]
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	6899      	ldr	r1, [r3, #8]
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	685a      	ldr	r2, [r3, #4]
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	f000 f966 	bl	800440e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004150:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68fa      	ldr	r2, [r7, #12]
 8004158:	609a      	str	r2, [r3, #8]
      break;
 800415a:	e04e      	b.n	80041fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6818      	ldr	r0, [r3, #0]
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	6899      	ldr	r1, [r3, #8]
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	685a      	ldr	r2, [r3, #4]
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	f000 f94f 	bl	800440e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	689a      	ldr	r2, [r3, #8]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800417e:	609a      	str	r2, [r3, #8]
      break;
 8004180:	e03b      	b.n	80041fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6818      	ldr	r0, [r3, #0]
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	6859      	ldr	r1, [r3, #4]
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	461a      	mov	r2, r3
 8004190:	f000 f8c6 	bl	8004320 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2150      	movs	r1, #80	; 0x50
 800419a:	4618      	mov	r0, r3
 800419c:	f000 f91d 	bl	80043da <TIM_ITRx_SetConfig>
      break;
 80041a0:	e02b      	b.n	80041fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6818      	ldr	r0, [r3, #0]
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	6859      	ldr	r1, [r3, #4]
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	461a      	mov	r2, r3
 80041b0:	f000 f8e4 	bl	800437c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	2160      	movs	r1, #96	; 0x60
 80041ba:	4618      	mov	r0, r3
 80041bc:	f000 f90d 	bl	80043da <TIM_ITRx_SetConfig>
      break;
 80041c0:	e01b      	b.n	80041fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6818      	ldr	r0, [r3, #0]
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	6859      	ldr	r1, [r3, #4]
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	461a      	mov	r2, r3
 80041d0:	f000 f8a6 	bl	8004320 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2140      	movs	r1, #64	; 0x40
 80041da:	4618      	mov	r0, r3
 80041dc:	f000 f8fd 	bl	80043da <TIM_ITRx_SetConfig>
      break;
 80041e0:	e00b      	b.n	80041fa <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4619      	mov	r1, r3
 80041ec:	4610      	mov	r0, r2
 80041ee:	f000 f8f4 	bl	80043da <TIM_ITRx_SetConfig>
        break;
 80041f2:	e002      	b.n	80041fa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80041f4:	bf00      	nop
 80041f6:	e000      	b.n	80041fa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80041f8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2201      	movs	r2, #1
 80041fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	3710      	adds	r7, #16
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800421c:	bf00      	nop
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	bc80      	pop	{r7}
 8004224:	4770      	bx	lr

08004226 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004226:	b480      	push	{r7}
 8004228:	b083      	sub	sp, #12
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800422e:	bf00      	nop
 8004230:	370c      	adds	r7, #12
 8004232:	46bd      	mov	sp, r7
 8004234:	bc80      	pop	{r7}
 8004236:	4770      	bx	lr

08004238 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004240:	bf00      	nop
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	bc80      	pop	{r7}
 8004248:	4770      	bx	lr

0800424a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800424a:	b480      	push	{r7}
 800424c:	b083      	sub	sp, #12
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004252:	bf00      	nop
 8004254:	370c      	adds	r7, #12
 8004256:	46bd      	mov	sp, r7
 8004258:	bc80      	pop	{r7}
 800425a:	4770      	bx	lr

0800425c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800425c:	b480      	push	{r7}
 800425e:	b085      	sub	sp, #20
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a29      	ldr	r2, [pc, #164]	; (8004314 <TIM_Base_SetConfig+0xb8>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d00b      	beq.n	800428c <TIM_Base_SetConfig+0x30>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800427a:	d007      	beq.n	800428c <TIM_Base_SetConfig+0x30>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a26      	ldr	r2, [pc, #152]	; (8004318 <TIM_Base_SetConfig+0xbc>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d003      	beq.n	800428c <TIM_Base_SetConfig+0x30>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	4a25      	ldr	r2, [pc, #148]	; (800431c <TIM_Base_SetConfig+0xc0>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d108      	bne.n	800429e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004292:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	4313      	orrs	r3, r2
 800429c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a1c      	ldr	r2, [pc, #112]	; (8004314 <TIM_Base_SetConfig+0xb8>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d00b      	beq.n	80042be <TIM_Base_SetConfig+0x62>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042ac:	d007      	beq.n	80042be <TIM_Base_SetConfig+0x62>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a19      	ldr	r2, [pc, #100]	; (8004318 <TIM_Base_SetConfig+0xbc>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d003      	beq.n	80042be <TIM_Base_SetConfig+0x62>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a18      	ldr	r2, [pc, #96]	; (800431c <TIM_Base_SetConfig+0xc0>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d108      	bne.n	80042d0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	4313      	orrs	r3, r2
 80042dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	68fa      	ldr	r2, [r7, #12]
 80042e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	689a      	ldr	r2, [r3, #8]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a07      	ldr	r2, [pc, #28]	; (8004314 <TIM_Base_SetConfig+0xb8>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d103      	bne.n	8004304 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	691a      	ldr	r2, [r3, #16]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	615a      	str	r2, [r3, #20]
}
 800430a:	bf00      	nop
 800430c:	3714      	adds	r7, #20
 800430e:	46bd      	mov	sp, r7
 8004310:	bc80      	pop	{r7}
 8004312:	4770      	bx	lr
 8004314:	40012c00 	.word	0x40012c00
 8004318:	40000400 	.word	0x40000400
 800431c:	40000800 	.word	0x40000800

08004320 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004320:	b480      	push	{r7}
 8004322:	b087      	sub	sp, #28
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6a1b      	ldr	r3, [r3, #32]
 8004330:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	f023 0201 	bic.w	r2, r3, #1
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800434a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	011b      	lsls	r3, r3, #4
 8004350:	693a      	ldr	r2, [r7, #16]
 8004352:	4313      	orrs	r3, r2
 8004354:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	f023 030a 	bic.w	r3, r3, #10
 800435c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800435e:	697a      	ldr	r2, [r7, #20]
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	4313      	orrs	r3, r2
 8004364:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	693a      	ldr	r2, [r7, #16]
 800436a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	697a      	ldr	r2, [r7, #20]
 8004370:	621a      	str	r2, [r3, #32]
}
 8004372:	bf00      	nop
 8004374:	371c      	adds	r7, #28
 8004376:	46bd      	mov	sp, r7
 8004378:	bc80      	pop	{r7}
 800437a:	4770      	bx	lr

0800437c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800437c:	b480      	push	{r7}
 800437e:	b087      	sub	sp, #28
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6a1b      	ldr	r3, [r3, #32]
 800438c:	f023 0210 	bic.w	r2, r3, #16
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6a1b      	ldr	r3, [r3, #32]
 800439e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	031b      	lsls	r3, r3, #12
 80043ac:	697a      	ldr	r2, [r7, #20]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80043b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	011b      	lsls	r3, r3, #4
 80043be:	693a      	ldr	r2, [r7, #16]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	697a      	ldr	r2, [r7, #20]
 80043c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	693a      	ldr	r2, [r7, #16]
 80043ce:	621a      	str	r2, [r3, #32]
}
 80043d0:	bf00      	nop
 80043d2:	371c      	adds	r7, #28
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bc80      	pop	{r7}
 80043d8:	4770      	bx	lr

080043da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043da:	b480      	push	{r7}
 80043dc:	b085      	sub	sp, #20
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
 80043e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043f2:	683a      	ldr	r2, [r7, #0]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	f043 0307 	orr.w	r3, r3, #7
 80043fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	609a      	str	r2, [r3, #8]
}
 8004404:	bf00      	nop
 8004406:	3714      	adds	r7, #20
 8004408:	46bd      	mov	sp, r7
 800440a:	bc80      	pop	{r7}
 800440c:	4770      	bx	lr

0800440e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800440e:	b480      	push	{r7}
 8004410:	b087      	sub	sp, #28
 8004412:	af00      	add	r7, sp, #0
 8004414:	60f8      	str	r0, [r7, #12]
 8004416:	60b9      	str	r1, [r7, #8]
 8004418:	607a      	str	r2, [r7, #4]
 800441a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004428:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	021a      	lsls	r2, r3, #8
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	431a      	orrs	r2, r3
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	4313      	orrs	r3, r2
 8004436:	697a      	ldr	r2, [r7, #20]
 8004438:	4313      	orrs	r3, r2
 800443a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	697a      	ldr	r2, [r7, #20]
 8004440:	609a      	str	r2, [r3, #8]
}
 8004442:	bf00      	nop
 8004444:	371c      	adds	r7, #28
 8004446:	46bd      	mov	sp, r7
 8004448:	bc80      	pop	{r7}
 800444a:	4770      	bx	lr

0800444c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800445c:	2b01      	cmp	r3, #1
 800445e:	d101      	bne.n	8004464 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004460:	2302      	movs	r3, #2
 8004462:	e046      	b.n	80044f2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2202      	movs	r2, #2
 8004470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800448a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68fa      	ldr	r2, [r7, #12]
 8004492:	4313      	orrs	r3, r2
 8004494:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a16      	ldr	r2, [pc, #88]	; (80044fc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d00e      	beq.n	80044c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044b0:	d009      	beq.n	80044c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a12      	ldr	r2, [pc, #72]	; (8004500 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d004      	beq.n	80044c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a10      	ldr	r2, [pc, #64]	; (8004504 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d10c      	bne.n	80044e0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	68ba      	ldr	r2, [r7, #8]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	68ba      	ldr	r2, [r7, #8]
 80044de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3714      	adds	r7, #20
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bc80      	pop	{r7}
 80044fa:	4770      	bx	lr
 80044fc:	40012c00 	.word	0x40012c00
 8004500:	40000400 	.word	0x40000400
 8004504:	40000800 	.word	0x40000800

08004508 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004510:	bf00      	nop
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	bc80      	pop	{r7}
 8004518:	4770      	bx	lr

0800451a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800451a:	b480      	push	{r7}
 800451c:	b083      	sub	sp, #12
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004522:	bf00      	nop
 8004524:	370c      	adds	r7, #12
 8004526:	46bd      	mov	sp, r7
 8004528:	bc80      	pop	{r7}
 800452a:	4770      	bx	lr

0800452c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d101      	bne.n	800453e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e03f      	b.n	80045be <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004544:	b2db      	uxtb	r3, r3
 8004546:	2b00      	cmp	r3, #0
 8004548:	d106      	bne.n	8004558 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f7fd fbba 	bl	8001ccc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2224      	movs	r2, #36	; 0x24
 800455c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68da      	ldr	r2, [r3, #12]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800456e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f000 fc85 	bl	8004e80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	691a      	ldr	r2, [r3, #16]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004584:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	695a      	ldr	r2, [r3, #20]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004594:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68da      	ldr	r2, [r3, #12]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2220      	movs	r2, #32
 80045b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2220      	movs	r2, #32
 80045b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3708      	adds	r7, #8
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b08a      	sub	sp, #40	; 0x28
 80045ca:	af02      	add	r7, sp, #8
 80045cc:	60f8      	str	r0, [r7, #12]
 80045ce:	60b9      	str	r1, [r7, #8]
 80045d0:	603b      	str	r3, [r7, #0]
 80045d2:	4613      	mov	r3, r2
 80045d4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80045d6:	2300      	movs	r3, #0
 80045d8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	2b20      	cmp	r3, #32
 80045e4:	d17c      	bne.n	80046e0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d002      	beq.n	80045f2 <HAL_UART_Transmit+0x2c>
 80045ec:	88fb      	ldrh	r3, [r7, #6]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d101      	bne.n	80045f6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e075      	b.n	80046e2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d101      	bne.n	8004604 <HAL_UART_Transmit+0x3e>
 8004600:	2302      	movs	r3, #2
 8004602:	e06e      	b.n	80046e2 <HAL_UART_Transmit+0x11c>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2200      	movs	r2, #0
 8004610:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2221      	movs	r2, #33	; 0x21
 8004616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800461a:	f7fd fd2b 	bl	8002074 <HAL_GetTick>
 800461e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	88fa      	ldrh	r2, [r7, #6]
 8004624:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	88fa      	ldrh	r2, [r7, #6]
 800462a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004634:	d108      	bne.n	8004648 <HAL_UART_Transmit+0x82>
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d104      	bne.n	8004648 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800463e:	2300      	movs	r3, #0
 8004640:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	61bb      	str	r3, [r7, #24]
 8004646:	e003      	b.n	8004650 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800464c:	2300      	movs	r3, #0
 800464e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2200      	movs	r2, #0
 8004654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004658:	e02a      	b.n	80046b0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	9300      	str	r3, [sp, #0]
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	2200      	movs	r2, #0
 8004662:	2180      	movs	r1, #128	; 0x80
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f000 fa38 	bl	8004ada <UART_WaitOnFlagUntilTimeout>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d001      	beq.n	8004674 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	e036      	b.n	80046e2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d10b      	bne.n	8004692 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	881b      	ldrh	r3, [r3, #0]
 800467e:	461a      	mov	r2, r3
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004688:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	3302      	adds	r3, #2
 800468e:	61bb      	str	r3, [r7, #24]
 8004690:	e007      	b.n	80046a2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	781a      	ldrb	r2, [r3, #0]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	3301      	adds	r3, #1
 80046a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	3b01      	subs	r3, #1
 80046aa:	b29a      	uxth	r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d1cf      	bne.n	800465a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	9300      	str	r3, [sp, #0]
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	2200      	movs	r2, #0
 80046c2:	2140      	movs	r1, #64	; 0x40
 80046c4:	68f8      	ldr	r0, [r7, #12]
 80046c6:	f000 fa08 	bl	8004ada <UART_WaitOnFlagUntilTimeout>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d001      	beq.n	80046d4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e006      	b.n	80046e2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2220      	movs	r2, #32
 80046d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80046dc:	2300      	movs	r3, #0
 80046de:	e000      	b.n	80046e2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80046e0:	2302      	movs	r3, #2
  }
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3720      	adds	r7, #32
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}

080046ea <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046ea:	b580      	push	{r7, lr}
 80046ec:	b084      	sub	sp, #16
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	60f8      	str	r0, [r7, #12]
 80046f2:	60b9      	str	r1, [r7, #8]
 80046f4:	4613      	mov	r3, r2
 80046f6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	2b20      	cmp	r3, #32
 8004702:	d11d      	bne.n	8004740 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d002      	beq.n	8004710 <HAL_UART_Receive_IT+0x26>
 800470a:	88fb      	ldrh	r3, [r7, #6]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d101      	bne.n	8004714 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e016      	b.n	8004742 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800471a:	2b01      	cmp	r3, #1
 800471c:	d101      	bne.n	8004722 <HAL_UART_Receive_IT+0x38>
 800471e:	2302      	movs	r3, #2
 8004720:	e00f      	b.n	8004742 <HAL_UART_Receive_IT+0x58>
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2201      	movs	r2, #1
 8004726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2200      	movs	r2, #0
 800472e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004730:	88fb      	ldrh	r3, [r7, #6]
 8004732:	461a      	mov	r2, r3
 8004734:	68b9      	ldr	r1, [r7, #8]
 8004736:	68f8      	ldr	r0, [r7, #12]
 8004738:	f000 fa19 	bl	8004b6e <UART_Start_Receive_IT>
 800473c:	4603      	mov	r3, r0
 800473e:	e000      	b.n	8004742 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004740:	2302      	movs	r3, #2
  }
}
 8004742:	4618      	mov	r0, r3
 8004744:	3710      	adds	r7, #16
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
	...

0800474c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b08a      	sub	sp, #40	; 0x28
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	695b      	ldr	r3, [r3, #20]
 800476a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800476c:	2300      	movs	r3, #0
 800476e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004770:	2300      	movs	r3, #0
 8004772:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004776:	f003 030f 	and.w	r3, r3, #15
 800477a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d10d      	bne.n	800479e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004784:	f003 0320 	and.w	r3, r3, #32
 8004788:	2b00      	cmp	r3, #0
 800478a:	d008      	beq.n	800479e <HAL_UART_IRQHandler+0x52>
 800478c:	6a3b      	ldr	r3, [r7, #32]
 800478e:	f003 0320 	and.w	r3, r3, #32
 8004792:	2b00      	cmp	r3, #0
 8004794:	d003      	beq.n	800479e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 fac9 	bl	8004d2e <UART_Receive_IT>
      return;
 800479c:	e17b      	b.n	8004a96 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	f000 80b1 	beq.w	8004908 <HAL_UART_IRQHandler+0x1bc>
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	f003 0301 	and.w	r3, r3, #1
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d105      	bne.n	80047bc <HAL_UART_IRQHandler+0x70>
 80047b0:	6a3b      	ldr	r3, [r7, #32]
 80047b2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	f000 80a6 	beq.w	8004908 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80047bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047be:	f003 0301 	and.w	r3, r3, #1
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00a      	beq.n	80047dc <HAL_UART_IRQHandler+0x90>
 80047c6:	6a3b      	ldr	r3, [r7, #32]
 80047c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d005      	beq.n	80047dc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d4:	f043 0201 	orr.w	r2, r3, #1
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80047dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047de:	f003 0304 	and.w	r3, r3, #4
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00a      	beq.n	80047fc <HAL_UART_IRQHandler+0xb0>
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	f003 0301 	and.w	r3, r3, #1
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d005      	beq.n	80047fc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f4:	f043 0202 	orr.w	r2, r3, #2
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80047fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fe:	f003 0302 	and.w	r3, r3, #2
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00a      	beq.n	800481c <HAL_UART_IRQHandler+0xd0>
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	f003 0301 	and.w	r3, r3, #1
 800480c:	2b00      	cmp	r3, #0
 800480e:	d005      	beq.n	800481c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004814:	f043 0204 	orr.w	r2, r3, #4
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800481c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481e:	f003 0308 	and.w	r3, r3, #8
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00f      	beq.n	8004846 <HAL_UART_IRQHandler+0xfa>
 8004826:	6a3b      	ldr	r3, [r7, #32]
 8004828:	f003 0320 	and.w	r3, r3, #32
 800482c:	2b00      	cmp	r3, #0
 800482e:	d104      	bne.n	800483a <HAL_UART_IRQHandler+0xee>
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	f003 0301 	and.w	r3, r3, #1
 8004836:	2b00      	cmp	r3, #0
 8004838:	d005      	beq.n	8004846 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483e:	f043 0208 	orr.w	r2, r3, #8
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484a:	2b00      	cmp	r3, #0
 800484c:	f000 811e 	beq.w	8004a8c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004852:	f003 0320 	and.w	r3, r3, #32
 8004856:	2b00      	cmp	r3, #0
 8004858:	d007      	beq.n	800486a <HAL_UART_IRQHandler+0x11e>
 800485a:	6a3b      	ldr	r3, [r7, #32]
 800485c:	f003 0320 	and.w	r3, r3, #32
 8004860:	2b00      	cmp	r3, #0
 8004862:	d002      	beq.n	800486a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f000 fa62 	bl	8004d2e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	695b      	ldr	r3, [r3, #20]
 8004870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004874:	2b00      	cmp	r3, #0
 8004876:	bf14      	ite	ne
 8004878:	2301      	movne	r3, #1
 800487a:	2300      	moveq	r3, #0
 800487c:	b2db      	uxtb	r3, r3
 800487e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004884:	f003 0308 	and.w	r3, r3, #8
 8004888:	2b00      	cmp	r3, #0
 800488a:	d102      	bne.n	8004892 <HAL_UART_IRQHandler+0x146>
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d031      	beq.n	80048f6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 f9a4 	bl	8004be0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	695b      	ldr	r3, [r3, #20]
 800489e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d023      	beq.n	80048ee <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	695a      	ldr	r2, [r3, #20]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048b4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d013      	beq.n	80048e6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c2:	4a76      	ldr	r2, [pc, #472]	; (8004a9c <HAL_UART_IRQHandler+0x350>)
 80048c4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7fe f86e 	bl	80029ac <HAL_DMA_Abort_IT>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d016      	beq.n	8004904 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80048e0:	4610      	mov	r0, r2
 80048e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048e4:	e00e      	b.n	8004904 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 f8e3 	bl	8004ab2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048ec:	e00a      	b.n	8004904 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 f8df 	bl	8004ab2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048f4:	e006      	b.n	8004904 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 f8db 	bl	8004ab2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004902:	e0c3      	b.n	8004a8c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004904:	bf00      	nop
    return;
 8004906:	e0c1      	b.n	8004a8c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490c:	2b01      	cmp	r3, #1
 800490e:	f040 80a1 	bne.w	8004a54 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004914:	f003 0310 	and.w	r3, r3, #16
 8004918:	2b00      	cmp	r3, #0
 800491a:	f000 809b 	beq.w	8004a54 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800491e:	6a3b      	ldr	r3, [r7, #32]
 8004920:	f003 0310 	and.w	r3, r3, #16
 8004924:	2b00      	cmp	r3, #0
 8004926:	f000 8095 	beq.w	8004a54 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800492a:	2300      	movs	r3, #0
 800492c:	60fb      	str	r3, [r7, #12]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	60fb      	str	r3, [r7, #12]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	60fb      	str	r3, [r7, #12]
 800493e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	695b      	ldr	r3, [r3, #20]
 8004946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800494a:	2b00      	cmp	r3, #0
 800494c:	d04e      	beq.n	80049ec <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004958:	8a3b      	ldrh	r3, [r7, #16]
 800495a:	2b00      	cmp	r3, #0
 800495c:	f000 8098 	beq.w	8004a90 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004964:	8a3a      	ldrh	r2, [r7, #16]
 8004966:	429a      	cmp	r2, r3
 8004968:	f080 8092 	bcs.w	8004a90 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	8a3a      	ldrh	r2, [r7, #16]
 8004970:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004976:	699b      	ldr	r3, [r3, #24]
 8004978:	2b20      	cmp	r3, #32
 800497a:	d02b      	beq.n	80049d4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68da      	ldr	r2, [r3, #12]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800498a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	695a      	ldr	r2, [r3, #20]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f022 0201 	bic.w	r2, r2, #1
 800499a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	695a      	ldr	r2, [r3, #20]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049aa:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2220      	movs	r2, #32
 80049b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68da      	ldr	r2, [r3, #12]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f022 0210 	bic.w	r2, r2, #16
 80049c8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ce:	4618      	mov	r0, r3
 80049d0:	f7fd ffb1 	bl	8002936 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049dc:	b29b      	uxth	r3, r3
 80049de:	1ad3      	subs	r3, r2, r3
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	4619      	mov	r1, r3
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f000 f86d 	bl	8004ac4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80049ea:	e051      	b.n	8004a90 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d047      	beq.n	8004a94 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004a04:	8a7b      	ldrh	r3, [r7, #18]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d044      	beq.n	8004a94 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68da      	ldr	r2, [r3, #12]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004a18:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	695a      	ldr	r2, [r3, #20]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f022 0201 	bic.w	r2, r2, #1
 8004a28:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2220      	movs	r2, #32
 8004a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	68da      	ldr	r2, [r3, #12]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f022 0210 	bic.w	r2, r2, #16
 8004a46:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a48:	8a7b      	ldrh	r3, [r7, #18]
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 f839 	bl	8004ac4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004a52:	e01f      	b.n	8004a94 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d008      	beq.n	8004a70 <HAL_UART_IRQHandler+0x324>
 8004a5e:	6a3b      	ldr	r3, [r7, #32]
 8004a60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d003      	beq.n	8004a70 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 f8f9 	bl	8004c60 <UART_Transmit_IT>
    return;
 8004a6e:	e012      	b.n	8004a96 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00d      	beq.n	8004a96 <HAL_UART_IRQHandler+0x34a>
 8004a7a:	6a3b      	ldr	r3, [r7, #32]
 8004a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d008      	beq.n	8004a96 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f000 f93a 	bl	8004cfe <UART_EndTransmit_IT>
    return;
 8004a8a:	e004      	b.n	8004a96 <HAL_UART_IRQHandler+0x34a>
    return;
 8004a8c:	bf00      	nop
 8004a8e:	e002      	b.n	8004a96 <HAL_UART_IRQHandler+0x34a>
      return;
 8004a90:	bf00      	nop
 8004a92:	e000      	b.n	8004a96 <HAL_UART_IRQHandler+0x34a>
      return;
 8004a94:	bf00      	nop
  }
}
 8004a96:	3728      	adds	r7, #40	; 0x28
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	08004c39 	.word	0x08004c39

08004aa0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004aa8:	bf00      	nop
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bc80      	pop	{r7}
 8004ab0:	4770      	bx	lr

08004ab2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ab2:	b480      	push	{r7}
 8004ab4:	b083      	sub	sp, #12
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004aba:	bf00      	nop
 8004abc:	370c      	adds	r7, #12
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bc80      	pop	{r7}
 8004ac2:	4770      	bx	lr

08004ac4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	460b      	mov	r3, r1
 8004ace:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ad0:	bf00      	nop
 8004ad2:	370c      	adds	r7, #12
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bc80      	pop	{r7}
 8004ad8:	4770      	bx	lr

08004ada <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004ada:	b580      	push	{r7, lr}
 8004adc:	b084      	sub	sp, #16
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	60f8      	str	r0, [r7, #12]
 8004ae2:	60b9      	str	r1, [r7, #8]
 8004ae4:	603b      	str	r3, [r7, #0]
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004aea:	e02c      	b.n	8004b46 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af2:	d028      	beq.n	8004b46 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d007      	beq.n	8004b0a <UART_WaitOnFlagUntilTimeout+0x30>
 8004afa:	f7fd fabb 	bl	8002074 <HAL_GetTick>
 8004afe:	4602      	mov	r2, r0
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	69ba      	ldr	r2, [r7, #24]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d21d      	bcs.n	8004b46 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68da      	ldr	r2, [r3, #12]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b18:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	695a      	ldr	r2, [r3, #20]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f022 0201 	bic.w	r2, r2, #1
 8004b28:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2220      	movs	r2, #32
 8004b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2220      	movs	r2, #32
 8004b36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e00f      	b.n	8004b66 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	4013      	ands	r3, r2
 8004b50:	68ba      	ldr	r2, [r7, #8]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	bf0c      	ite	eq
 8004b56:	2301      	moveq	r3, #1
 8004b58:	2300      	movne	r3, #0
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	79fb      	ldrb	r3, [r7, #7]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d0c3      	beq.n	8004aec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3710      	adds	r7, #16
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}

08004b6e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b6e:	b480      	push	{r7}
 8004b70:	b085      	sub	sp, #20
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	60f8      	str	r0, [r7, #12]
 8004b76:	60b9      	str	r1, [r7, #8]
 8004b78:	4613      	mov	r3, r2
 8004b7a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	68ba      	ldr	r2, [r7, #8]
 8004b80:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	88fa      	ldrh	r2, [r7, #6]
 8004b86:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	88fa      	ldrh	r2, [r7, #6]
 8004b8c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2222      	movs	r2, #34	; 0x22
 8004b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68da      	ldr	r2, [r3, #12]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bb2:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	695a      	ldr	r2, [r3, #20]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f042 0201 	orr.w	r2, r2, #1
 8004bc2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	68da      	ldr	r2, [r3, #12]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f042 0220 	orr.w	r2, r2, #32
 8004bd2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3714      	adds	r7, #20
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bc80      	pop	{r7}
 8004bde:	4770      	bx	lr

08004be0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68da      	ldr	r2, [r3, #12]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004bf6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	695a      	ldr	r2, [r3, #20]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f022 0201 	bic.w	r2, r2, #1
 8004c06:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d107      	bne.n	8004c20 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68da      	ldr	r2, [r3, #12]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f022 0210 	bic.w	r2, r2, #16
 8004c1e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2220      	movs	r2, #32
 8004c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004c2e:	bf00      	nop
 8004c30:	370c      	adds	r7, #12
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bc80      	pop	{r7}
 8004c36:	4770      	bx	lr

08004c38 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c44:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c52:	68f8      	ldr	r0, [r7, #12]
 8004c54:	f7ff ff2d 	bl	8004ab2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c58:	bf00      	nop
 8004c5a:	3710      	adds	r7, #16
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b085      	sub	sp, #20
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	2b21      	cmp	r3, #33	; 0x21
 8004c72:	d13e      	bne.n	8004cf2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c7c:	d114      	bne.n	8004ca8 <UART_Transmit_IT+0x48>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d110      	bne.n	8004ca8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a1b      	ldr	r3, [r3, #32]
 8004c8a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	881b      	ldrh	r3, [r3, #0]
 8004c90:	461a      	mov	r2, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c9a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a1b      	ldr	r3, [r3, #32]
 8004ca0:	1c9a      	adds	r2, r3, #2
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	621a      	str	r2, [r3, #32]
 8004ca6:	e008      	b.n	8004cba <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a1b      	ldr	r3, [r3, #32]
 8004cac:	1c59      	adds	r1, r3, #1
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	6211      	str	r1, [r2, #32]
 8004cb2:	781a      	ldrb	r2, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d10f      	bne.n	8004cee <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68da      	ldr	r2, [r3, #12]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004cdc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68da      	ldr	r2, [r3, #12]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	e000      	b.n	8004cf4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004cf2:	2302      	movs	r3, #2
  }
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3714      	adds	r7, #20
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bc80      	pop	{r7}
 8004cfc:	4770      	bx	lr

08004cfe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004cfe:	b580      	push	{r7, lr}
 8004d00:	b082      	sub	sp, #8
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68da      	ldr	r2, [r3, #12]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d14:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2220      	movs	r2, #32
 8004d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f7ff febe 	bl	8004aa0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3708      	adds	r7, #8
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}

08004d2e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004d2e:	b580      	push	{r7, lr}
 8004d30:	b086      	sub	sp, #24
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	2b22      	cmp	r3, #34	; 0x22
 8004d40:	f040 8099 	bne.w	8004e76 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d4c:	d117      	bne.n	8004d7e <UART_Receive_IT+0x50>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d113      	bne.n	8004d7e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004d56:	2300      	movs	r3, #0
 8004d58:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d5e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d6c:	b29a      	uxth	r2, r3
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d76:	1c9a      	adds	r2, r3, #2
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	629a      	str	r2, [r3, #40]	; 0x28
 8004d7c:	e026      	b.n	8004dcc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d82:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004d84:	2300      	movs	r3, #0
 8004d86:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d90:	d007      	beq.n	8004da2 <UART_Receive_IT+0x74>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d10a      	bne.n	8004db0 <UART_Receive_IT+0x82>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d106      	bne.n	8004db0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	b2da      	uxtb	r2, r3
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	701a      	strb	r2, [r3, #0]
 8004dae:	e008      	b.n	8004dc2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dbc:	b2da      	uxtb	r2, r3
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc6:	1c5a      	adds	r2, r3, #1
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	4619      	mov	r1, r3
 8004dda:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d148      	bne.n	8004e72 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68da      	ldr	r2, [r3, #12]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f022 0220 	bic.w	r2, r2, #32
 8004dee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	68da      	ldr	r2, [r3, #12]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004dfe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	695a      	ldr	r2, [r3, #20]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f022 0201 	bic.w	r2, r2, #1
 8004e0e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2220      	movs	r2, #32
 8004e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d123      	bne.n	8004e68 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68da      	ldr	r2, [r3, #12]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f022 0210 	bic.w	r2, r2, #16
 8004e34:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0310 	and.w	r3, r3, #16
 8004e40:	2b10      	cmp	r3, #16
 8004e42:	d10a      	bne.n	8004e5a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e44:	2300      	movs	r3, #0
 8004e46:	60fb      	str	r3, [r7, #12]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	60fb      	str	r3, [r7, #12]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	60fb      	str	r3, [r7, #12]
 8004e58:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e5e:	4619      	mov	r1, r3
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f7ff fe2f 	bl	8004ac4 <HAL_UARTEx_RxEventCallback>
 8004e66:	e002      	b.n	8004e6e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f7fc f94f 	bl	800110c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	e002      	b.n	8004e78 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004e72:	2300      	movs	r3, #0
 8004e74:	e000      	b.n	8004e78 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004e76:	2302      	movs	r3, #2
  }
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3718      	adds	r7, #24
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	68da      	ldr	r2, [r3, #12]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	430a      	orrs	r2, r1
 8004e9c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	689a      	ldr	r2, [r3, #8]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	431a      	orrs	r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	695b      	ldr	r3, [r3, #20]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004eba:	f023 030c 	bic.w	r3, r3, #12
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	6812      	ldr	r2, [r2, #0]
 8004ec2:	68b9      	ldr	r1, [r7, #8]
 8004ec4:	430b      	orrs	r3, r1
 8004ec6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	695b      	ldr	r3, [r3, #20]
 8004ece:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	699a      	ldr	r2, [r3, #24]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	430a      	orrs	r2, r1
 8004edc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a2c      	ldr	r2, [pc, #176]	; (8004f94 <UART_SetConfig+0x114>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d103      	bne.n	8004ef0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004ee8:	f7fe fb72 	bl	80035d0 <HAL_RCC_GetPCLK2Freq>
 8004eec:	60f8      	str	r0, [r7, #12]
 8004eee:	e002      	b.n	8004ef6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004ef0:	f7fe fb5a 	bl	80035a8 <HAL_RCC_GetPCLK1Freq>
 8004ef4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ef6:	68fa      	ldr	r2, [r7, #12]
 8004ef8:	4613      	mov	r3, r2
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	4413      	add	r3, r2
 8004efe:	009a      	lsls	r2, r3, #2
 8004f00:	441a      	add	r2, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f0c:	4a22      	ldr	r2, [pc, #136]	; (8004f98 <UART_SetConfig+0x118>)
 8004f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f12:	095b      	lsrs	r3, r3, #5
 8004f14:	0119      	lsls	r1, r3, #4
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	4613      	mov	r3, r2
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	4413      	add	r3, r2
 8004f1e:	009a      	lsls	r2, r3, #2
 8004f20:	441a      	add	r2, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f2c:	4b1a      	ldr	r3, [pc, #104]	; (8004f98 <UART_SetConfig+0x118>)
 8004f2e:	fba3 0302 	umull	r0, r3, r3, r2
 8004f32:	095b      	lsrs	r3, r3, #5
 8004f34:	2064      	movs	r0, #100	; 0x64
 8004f36:	fb00 f303 	mul.w	r3, r0, r3
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	011b      	lsls	r3, r3, #4
 8004f3e:	3332      	adds	r3, #50	; 0x32
 8004f40:	4a15      	ldr	r2, [pc, #84]	; (8004f98 <UART_SetConfig+0x118>)
 8004f42:	fba2 2303 	umull	r2, r3, r2, r3
 8004f46:	095b      	lsrs	r3, r3, #5
 8004f48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f4c:	4419      	add	r1, r3
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	4613      	mov	r3, r2
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	4413      	add	r3, r2
 8004f56:	009a      	lsls	r2, r3, #2
 8004f58:	441a      	add	r2, r3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f64:	4b0c      	ldr	r3, [pc, #48]	; (8004f98 <UART_SetConfig+0x118>)
 8004f66:	fba3 0302 	umull	r0, r3, r3, r2
 8004f6a:	095b      	lsrs	r3, r3, #5
 8004f6c:	2064      	movs	r0, #100	; 0x64
 8004f6e:	fb00 f303 	mul.w	r3, r0, r3
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	011b      	lsls	r3, r3, #4
 8004f76:	3332      	adds	r3, #50	; 0x32
 8004f78:	4a07      	ldr	r2, [pc, #28]	; (8004f98 <UART_SetConfig+0x118>)
 8004f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f7e:	095b      	lsrs	r3, r3, #5
 8004f80:	f003 020f 	and.w	r2, r3, #15
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	440a      	add	r2, r1
 8004f8a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004f8c:	bf00      	nop
 8004f8e:	3710      	adds	r7, #16
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	40013800 	.word	0x40013800
 8004f98:	51eb851f 	.word	0x51eb851f

08004f9c <__errno>:
 8004f9c:	4b01      	ldr	r3, [pc, #4]	; (8004fa4 <__errno+0x8>)
 8004f9e:	6818      	ldr	r0, [r3, #0]
 8004fa0:	4770      	bx	lr
 8004fa2:	bf00      	nop
 8004fa4:	2000000c 	.word	0x2000000c

08004fa8 <__libc_init_array>:
 8004fa8:	b570      	push	{r4, r5, r6, lr}
 8004faa:	2600      	movs	r6, #0
 8004fac:	4d0c      	ldr	r5, [pc, #48]	; (8004fe0 <__libc_init_array+0x38>)
 8004fae:	4c0d      	ldr	r4, [pc, #52]	; (8004fe4 <__libc_init_array+0x3c>)
 8004fb0:	1b64      	subs	r4, r4, r5
 8004fb2:	10a4      	asrs	r4, r4, #2
 8004fb4:	42a6      	cmp	r6, r4
 8004fb6:	d109      	bne.n	8004fcc <__libc_init_array+0x24>
 8004fb8:	f004 fc28 	bl	800980c <_init>
 8004fbc:	2600      	movs	r6, #0
 8004fbe:	4d0a      	ldr	r5, [pc, #40]	; (8004fe8 <__libc_init_array+0x40>)
 8004fc0:	4c0a      	ldr	r4, [pc, #40]	; (8004fec <__libc_init_array+0x44>)
 8004fc2:	1b64      	subs	r4, r4, r5
 8004fc4:	10a4      	asrs	r4, r4, #2
 8004fc6:	42a6      	cmp	r6, r4
 8004fc8:	d105      	bne.n	8004fd6 <__libc_init_array+0x2e>
 8004fca:	bd70      	pop	{r4, r5, r6, pc}
 8004fcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fd0:	4798      	blx	r3
 8004fd2:	3601      	adds	r6, #1
 8004fd4:	e7ee      	b.n	8004fb4 <__libc_init_array+0xc>
 8004fd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fda:	4798      	blx	r3
 8004fdc:	3601      	adds	r6, #1
 8004fde:	e7f2      	b.n	8004fc6 <__libc_init_array+0x1e>
 8004fe0:	08009d14 	.word	0x08009d14
 8004fe4:	08009d14 	.word	0x08009d14
 8004fe8:	08009d14 	.word	0x08009d14
 8004fec:	08009d18 	.word	0x08009d18

08004ff0 <memset>:
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	4402      	add	r2, r0
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d100      	bne.n	8004ffa <memset+0xa>
 8004ff8:	4770      	bx	lr
 8004ffa:	f803 1b01 	strb.w	r1, [r3], #1
 8004ffe:	e7f9      	b.n	8004ff4 <memset+0x4>

08005000 <__cvt>:
 8005000:	2b00      	cmp	r3, #0
 8005002:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005006:	461f      	mov	r7, r3
 8005008:	bfbb      	ittet	lt
 800500a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800500e:	461f      	movlt	r7, r3
 8005010:	2300      	movge	r3, #0
 8005012:	232d      	movlt	r3, #45	; 0x2d
 8005014:	b088      	sub	sp, #32
 8005016:	4614      	mov	r4, r2
 8005018:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800501a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800501c:	7013      	strb	r3, [r2, #0]
 800501e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005020:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005024:	f023 0820 	bic.w	r8, r3, #32
 8005028:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800502c:	d005      	beq.n	800503a <__cvt+0x3a>
 800502e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005032:	d100      	bne.n	8005036 <__cvt+0x36>
 8005034:	3501      	adds	r5, #1
 8005036:	2302      	movs	r3, #2
 8005038:	e000      	b.n	800503c <__cvt+0x3c>
 800503a:	2303      	movs	r3, #3
 800503c:	aa07      	add	r2, sp, #28
 800503e:	9204      	str	r2, [sp, #16]
 8005040:	aa06      	add	r2, sp, #24
 8005042:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005046:	e9cd 3500 	strd	r3, r5, [sp]
 800504a:	4622      	mov	r2, r4
 800504c:	463b      	mov	r3, r7
 800504e:	f001 fd9f 	bl	8006b90 <_dtoa_r>
 8005052:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005056:	4606      	mov	r6, r0
 8005058:	d102      	bne.n	8005060 <__cvt+0x60>
 800505a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800505c:	07db      	lsls	r3, r3, #31
 800505e:	d522      	bpl.n	80050a6 <__cvt+0xa6>
 8005060:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005064:	eb06 0905 	add.w	r9, r6, r5
 8005068:	d110      	bne.n	800508c <__cvt+0x8c>
 800506a:	7833      	ldrb	r3, [r6, #0]
 800506c:	2b30      	cmp	r3, #48	; 0x30
 800506e:	d10a      	bne.n	8005086 <__cvt+0x86>
 8005070:	2200      	movs	r2, #0
 8005072:	2300      	movs	r3, #0
 8005074:	4620      	mov	r0, r4
 8005076:	4639      	mov	r1, r7
 8005078:	f7fb fc96 	bl	80009a8 <__aeabi_dcmpeq>
 800507c:	b918      	cbnz	r0, 8005086 <__cvt+0x86>
 800507e:	f1c5 0501 	rsb	r5, r5, #1
 8005082:	f8ca 5000 	str.w	r5, [sl]
 8005086:	f8da 3000 	ldr.w	r3, [sl]
 800508a:	4499      	add	r9, r3
 800508c:	2200      	movs	r2, #0
 800508e:	2300      	movs	r3, #0
 8005090:	4620      	mov	r0, r4
 8005092:	4639      	mov	r1, r7
 8005094:	f7fb fc88 	bl	80009a8 <__aeabi_dcmpeq>
 8005098:	b108      	cbz	r0, 800509e <__cvt+0x9e>
 800509a:	f8cd 901c 	str.w	r9, [sp, #28]
 800509e:	2230      	movs	r2, #48	; 0x30
 80050a0:	9b07      	ldr	r3, [sp, #28]
 80050a2:	454b      	cmp	r3, r9
 80050a4:	d307      	bcc.n	80050b6 <__cvt+0xb6>
 80050a6:	4630      	mov	r0, r6
 80050a8:	9b07      	ldr	r3, [sp, #28]
 80050aa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80050ac:	1b9b      	subs	r3, r3, r6
 80050ae:	6013      	str	r3, [r2, #0]
 80050b0:	b008      	add	sp, #32
 80050b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050b6:	1c59      	adds	r1, r3, #1
 80050b8:	9107      	str	r1, [sp, #28]
 80050ba:	701a      	strb	r2, [r3, #0]
 80050bc:	e7f0      	b.n	80050a0 <__cvt+0xa0>

080050be <__exponent>:
 80050be:	4603      	mov	r3, r0
 80050c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050c2:	2900      	cmp	r1, #0
 80050c4:	f803 2b02 	strb.w	r2, [r3], #2
 80050c8:	bfb6      	itet	lt
 80050ca:	222d      	movlt	r2, #45	; 0x2d
 80050cc:	222b      	movge	r2, #43	; 0x2b
 80050ce:	4249      	neglt	r1, r1
 80050d0:	2909      	cmp	r1, #9
 80050d2:	7042      	strb	r2, [r0, #1]
 80050d4:	dd2b      	ble.n	800512e <__exponent+0x70>
 80050d6:	f10d 0407 	add.w	r4, sp, #7
 80050da:	46a4      	mov	ip, r4
 80050dc:	270a      	movs	r7, #10
 80050de:	fb91 f6f7 	sdiv	r6, r1, r7
 80050e2:	460a      	mov	r2, r1
 80050e4:	46a6      	mov	lr, r4
 80050e6:	fb07 1516 	mls	r5, r7, r6, r1
 80050ea:	2a63      	cmp	r2, #99	; 0x63
 80050ec:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80050f0:	4631      	mov	r1, r6
 80050f2:	f104 34ff 	add.w	r4, r4, #4294967295
 80050f6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80050fa:	dcf0      	bgt.n	80050de <__exponent+0x20>
 80050fc:	3130      	adds	r1, #48	; 0x30
 80050fe:	f1ae 0502 	sub.w	r5, lr, #2
 8005102:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005106:	4629      	mov	r1, r5
 8005108:	1c44      	adds	r4, r0, #1
 800510a:	4561      	cmp	r1, ip
 800510c:	d30a      	bcc.n	8005124 <__exponent+0x66>
 800510e:	f10d 0209 	add.w	r2, sp, #9
 8005112:	eba2 020e 	sub.w	r2, r2, lr
 8005116:	4565      	cmp	r5, ip
 8005118:	bf88      	it	hi
 800511a:	2200      	movhi	r2, #0
 800511c:	4413      	add	r3, r2
 800511e:	1a18      	subs	r0, r3, r0
 8005120:	b003      	add	sp, #12
 8005122:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005124:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005128:	f804 2f01 	strb.w	r2, [r4, #1]!
 800512c:	e7ed      	b.n	800510a <__exponent+0x4c>
 800512e:	2330      	movs	r3, #48	; 0x30
 8005130:	3130      	adds	r1, #48	; 0x30
 8005132:	7083      	strb	r3, [r0, #2]
 8005134:	70c1      	strb	r1, [r0, #3]
 8005136:	1d03      	adds	r3, r0, #4
 8005138:	e7f1      	b.n	800511e <__exponent+0x60>
	...

0800513c <_printf_float>:
 800513c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005140:	b091      	sub	sp, #68	; 0x44
 8005142:	460c      	mov	r4, r1
 8005144:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005148:	4616      	mov	r6, r2
 800514a:	461f      	mov	r7, r3
 800514c:	4605      	mov	r5, r0
 800514e:	f002 fe73 	bl	8007e38 <_localeconv_r>
 8005152:	6803      	ldr	r3, [r0, #0]
 8005154:	4618      	mov	r0, r3
 8005156:	9309      	str	r3, [sp, #36]	; 0x24
 8005158:	f7fa fffa 	bl	8000150 <strlen>
 800515c:	2300      	movs	r3, #0
 800515e:	930e      	str	r3, [sp, #56]	; 0x38
 8005160:	f8d8 3000 	ldr.w	r3, [r8]
 8005164:	900a      	str	r0, [sp, #40]	; 0x28
 8005166:	3307      	adds	r3, #7
 8005168:	f023 0307 	bic.w	r3, r3, #7
 800516c:	f103 0208 	add.w	r2, r3, #8
 8005170:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005174:	f8d4 b000 	ldr.w	fp, [r4]
 8005178:	f8c8 2000 	str.w	r2, [r8]
 800517c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005180:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005184:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005188:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800518c:	930b      	str	r3, [sp, #44]	; 0x2c
 800518e:	f04f 32ff 	mov.w	r2, #4294967295
 8005192:	4640      	mov	r0, r8
 8005194:	4b9c      	ldr	r3, [pc, #624]	; (8005408 <_printf_float+0x2cc>)
 8005196:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005198:	f7fb fc38 	bl	8000a0c <__aeabi_dcmpun>
 800519c:	bb70      	cbnz	r0, 80051fc <_printf_float+0xc0>
 800519e:	f04f 32ff 	mov.w	r2, #4294967295
 80051a2:	4640      	mov	r0, r8
 80051a4:	4b98      	ldr	r3, [pc, #608]	; (8005408 <_printf_float+0x2cc>)
 80051a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80051a8:	f7fb fc12 	bl	80009d0 <__aeabi_dcmple>
 80051ac:	bb30      	cbnz	r0, 80051fc <_printf_float+0xc0>
 80051ae:	2200      	movs	r2, #0
 80051b0:	2300      	movs	r3, #0
 80051b2:	4640      	mov	r0, r8
 80051b4:	4651      	mov	r1, sl
 80051b6:	f7fb fc01 	bl	80009bc <__aeabi_dcmplt>
 80051ba:	b110      	cbz	r0, 80051c2 <_printf_float+0x86>
 80051bc:	232d      	movs	r3, #45	; 0x2d
 80051be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051c2:	4b92      	ldr	r3, [pc, #584]	; (800540c <_printf_float+0x2d0>)
 80051c4:	4892      	ldr	r0, [pc, #584]	; (8005410 <_printf_float+0x2d4>)
 80051c6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80051ca:	bf94      	ite	ls
 80051cc:	4698      	movls	r8, r3
 80051ce:	4680      	movhi	r8, r0
 80051d0:	2303      	movs	r3, #3
 80051d2:	f04f 0a00 	mov.w	sl, #0
 80051d6:	6123      	str	r3, [r4, #16]
 80051d8:	f02b 0304 	bic.w	r3, fp, #4
 80051dc:	6023      	str	r3, [r4, #0]
 80051de:	4633      	mov	r3, r6
 80051e0:	4621      	mov	r1, r4
 80051e2:	4628      	mov	r0, r5
 80051e4:	9700      	str	r7, [sp, #0]
 80051e6:	aa0f      	add	r2, sp, #60	; 0x3c
 80051e8:	f000 f9d4 	bl	8005594 <_printf_common>
 80051ec:	3001      	adds	r0, #1
 80051ee:	f040 8090 	bne.w	8005312 <_printf_float+0x1d6>
 80051f2:	f04f 30ff 	mov.w	r0, #4294967295
 80051f6:	b011      	add	sp, #68	; 0x44
 80051f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051fc:	4642      	mov	r2, r8
 80051fe:	4653      	mov	r3, sl
 8005200:	4640      	mov	r0, r8
 8005202:	4651      	mov	r1, sl
 8005204:	f7fb fc02 	bl	8000a0c <__aeabi_dcmpun>
 8005208:	b148      	cbz	r0, 800521e <_printf_float+0xe2>
 800520a:	f1ba 0f00 	cmp.w	sl, #0
 800520e:	bfb8      	it	lt
 8005210:	232d      	movlt	r3, #45	; 0x2d
 8005212:	4880      	ldr	r0, [pc, #512]	; (8005414 <_printf_float+0x2d8>)
 8005214:	bfb8      	it	lt
 8005216:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800521a:	4b7f      	ldr	r3, [pc, #508]	; (8005418 <_printf_float+0x2dc>)
 800521c:	e7d3      	b.n	80051c6 <_printf_float+0x8a>
 800521e:	6863      	ldr	r3, [r4, #4]
 8005220:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005224:	1c5a      	adds	r2, r3, #1
 8005226:	d142      	bne.n	80052ae <_printf_float+0x172>
 8005228:	2306      	movs	r3, #6
 800522a:	6063      	str	r3, [r4, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	9206      	str	r2, [sp, #24]
 8005230:	aa0e      	add	r2, sp, #56	; 0x38
 8005232:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005236:	aa0d      	add	r2, sp, #52	; 0x34
 8005238:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800523c:	9203      	str	r2, [sp, #12]
 800523e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005242:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005246:	6023      	str	r3, [r4, #0]
 8005248:	6863      	ldr	r3, [r4, #4]
 800524a:	4642      	mov	r2, r8
 800524c:	9300      	str	r3, [sp, #0]
 800524e:	4628      	mov	r0, r5
 8005250:	4653      	mov	r3, sl
 8005252:	910b      	str	r1, [sp, #44]	; 0x2c
 8005254:	f7ff fed4 	bl	8005000 <__cvt>
 8005258:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800525a:	4680      	mov	r8, r0
 800525c:	2947      	cmp	r1, #71	; 0x47
 800525e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005260:	d108      	bne.n	8005274 <_printf_float+0x138>
 8005262:	1cc8      	adds	r0, r1, #3
 8005264:	db02      	blt.n	800526c <_printf_float+0x130>
 8005266:	6863      	ldr	r3, [r4, #4]
 8005268:	4299      	cmp	r1, r3
 800526a:	dd40      	ble.n	80052ee <_printf_float+0x1b2>
 800526c:	f1a9 0902 	sub.w	r9, r9, #2
 8005270:	fa5f f989 	uxtb.w	r9, r9
 8005274:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005278:	d81f      	bhi.n	80052ba <_printf_float+0x17e>
 800527a:	464a      	mov	r2, r9
 800527c:	3901      	subs	r1, #1
 800527e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005282:	910d      	str	r1, [sp, #52]	; 0x34
 8005284:	f7ff ff1b 	bl	80050be <__exponent>
 8005288:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800528a:	4682      	mov	sl, r0
 800528c:	1813      	adds	r3, r2, r0
 800528e:	2a01      	cmp	r2, #1
 8005290:	6123      	str	r3, [r4, #16]
 8005292:	dc02      	bgt.n	800529a <_printf_float+0x15e>
 8005294:	6822      	ldr	r2, [r4, #0]
 8005296:	07d2      	lsls	r2, r2, #31
 8005298:	d501      	bpl.n	800529e <_printf_float+0x162>
 800529a:	3301      	adds	r3, #1
 800529c:	6123      	str	r3, [r4, #16]
 800529e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d09b      	beq.n	80051de <_printf_float+0xa2>
 80052a6:	232d      	movs	r3, #45	; 0x2d
 80052a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052ac:	e797      	b.n	80051de <_printf_float+0xa2>
 80052ae:	2947      	cmp	r1, #71	; 0x47
 80052b0:	d1bc      	bne.n	800522c <_printf_float+0xf0>
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d1ba      	bne.n	800522c <_printf_float+0xf0>
 80052b6:	2301      	movs	r3, #1
 80052b8:	e7b7      	b.n	800522a <_printf_float+0xee>
 80052ba:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80052be:	d118      	bne.n	80052f2 <_printf_float+0x1b6>
 80052c0:	2900      	cmp	r1, #0
 80052c2:	6863      	ldr	r3, [r4, #4]
 80052c4:	dd0b      	ble.n	80052de <_printf_float+0x1a2>
 80052c6:	6121      	str	r1, [r4, #16]
 80052c8:	b913      	cbnz	r3, 80052d0 <_printf_float+0x194>
 80052ca:	6822      	ldr	r2, [r4, #0]
 80052cc:	07d0      	lsls	r0, r2, #31
 80052ce:	d502      	bpl.n	80052d6 <_printf_float+0x19a>
 80052d0:	3301      	adds	r3, #1
 80052d2:	440b      	add	r3, r1
 80052d4:	6123      	str	r3, [r4, #16]
 80052d6:	f04f 0a00 	mov.w	sl, #0
 80052da:	65a1      	str	r1, [r4, #88]	; 0x58
 80052dc:	e7df      	b.n	800529e <_printf_float+0x162>
 80052de:	b913      	cbnz	r3, 80052e6 <_printf_float+0x1aa>
 80052e0:	6822      	ldr	r2, [r4, #0]
 80052e2:	07d2      	lsls	r2, r2, #31
 80052e4:	d501      	bpl.n	80052ea <_printf_float+0x1ae>
 80052e6:	3302      	adds	r3, #2
 80052e8:	e7f4      	b.n	80052d4 <_printf_float+0x198>
 80052ea:	2301      	movs	r3, #1
 80052ec:	e7f2      	b.n	80052d4 <_printf_float+0x198>
 80052ee:	f04f 0967 	mov.w	r9, #103	; 0x67
 80052f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80052f4:	4299      	cmp	r1, r3
 80052f6:	db05      	blt.n	8005304 <_printf_float+0x1c8>
 80052f8:	6823      	ldr	r3, [r4, #0]
 80052fa:	6121      	str	r1, [r4, #16]
 80052fc:	07d8      	lsls	r0, r3, #31
 80052fe:	d5ea      	bpl.n	80052d6 <_printf_float+0x19a>
 8005300:	1c4b      	adds	r3, r1, #1
 8005302:	e7e7      	b.n	80052d4 <_printf_float+0x198>
 8005304:	2900      	cmp	r1, #0
 8005306:	bfcc      	ite	gt
 8005308:	2201      	movgt	r2, #1
 800530a:	f1c1 0202 	rsble	r2, r1, #2
 800530e:	4413      	add	r3, r2
 8005310:	e7e0      	b.n	80052d4 <_printf_float+0x198>
 8005312:	6823      	ldr	r3, [r4, #0]
 8005314:	055a      	lsls	r2, r3, #21
 8005316:	d407      	bmi.n	8005328 <_printf_float+0x1ec>
 8005318:	6923      	ldr	r3, [r4, #16]
 800531a:	4642      	mov	r2, r8
 800531c:	4631      	mov	r1, r6
 800531e:	4628      	mov	r0, r5
 8005320:	47b8      	blx	r7
 8005322:	3001      	adds	r0, #1
 8005324:	d12b      	bne.n	800537e <_printf_float+0x242>
 8005326:	e764      	b.n	80051f2 <_printf_float+0xb6>
 8005328:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800532c:	f240 80dd 	bls.w	80054ea <_printf_float+0x3ae>
 8005330:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005334:	2200      	movs	r2, #0
 8005336:	2300      	movs	r3, #0
 8005338:	f7fb fb36 	bl	80009a8 <__aeabi_dcmpeq>
 800533c:	2800      	cmp	r0, #0
 800533e:	d033      	beq.n	80053a8 <_printf_float+0x26c>
 8005340:	2301      	movs	r3, #1
 8005342:	4631      	mov	r1, r6
 8005344:	4628      	mov	r0, r5
 8005346:	4a35      	ldr	r2, [pc, #212]	; (800541c <_printf_float+0x2e0>)
 8005348:	47b8      	blx	r7
 800534a:	3001      	adds	r0, #1
 800534c:	f43f af51 	beq.w	80051f2 <_printf_float+0xb6>
 8005350:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005354:	429a      	cmp	r2, r3
 8005356:	db02      	blt.n	800535e <_printf_float+0x222>
 8005358:	6823      	ldr	r3, [r4, #0]
 800535a:	07d8      	lsls	r0, r3, #31
 800535c:	d50f      	bpl.n	800537e <_printf_float+0x242>
 800535e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005362:	4631      	mov	r1, r6
 8005364:	4628      	mov	r0, r5
 8005366:	47b8      	blx	r7
 8005368:	3001      	adds	r0, #1
 800536a:	f43f af42 	beq.w	80051f2 <_printf_float+0xb6>
 800536e:	f04f 0800 	mov.w	r8, #0
 8005372:	f104 091a 	add.w	r9, r4, #26
 8005376:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005378:	3b01      	subs	r3, #1
 800537a:	4543      	cmp	r3, r8
 800537c:	dc09      	bgt.n	8005392 <_printf_float+0x256>
 800537e:	6823      	ldr	r3, [r4, #0]
 8005380:	079b      	lsls	r3, r3, #30
 8005382:	f100 8102 	bmi.w	800558a <_printf_float+0x44e>
 8005386:	68e0      	ldr	r0, [r4, #12]
 8005388:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800538a:	4298      	cmp	r0, r3
 800538c:	bfb8      	it	lt
 800538e:	4618      	movlt	r0, r3
 8005390:	e731      	b.n	80051f6 <_printf_float+0xba>
 8005392:	2301      	movs	r3, #1
 8005394:	464a      	mov	r2, r9
 8005396:	4631      	mov	r1, r6
 8005398:	4628      	mov	r0, r5
 800539a:	47b8      	blx	r7
 800539c:	3001      	adds	r0, #1
 800539e:	f43f af28 	beq.w	80051f2 <_printf_float+0xb6>
 80053a2:	f108 0801 	add.w	r8, r8, #1
 80053a6:	e7e6      	b.n	8005376 <_printf_float+0x23a>
 80053a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	dc38      	bgt.n	8005420 <_printf_float+0x2e4>
 80053ae:	2301      	movs	r3, #1
 80053b0:	4631      	mov	r1, r6
 80053b2:	4628      	mov	r0, r5
 80053b4:	4a19      	ldr	r2, [pc, #100]	; (800541c <_printf_float+0x2e0>)
 80053b6:	47b8      	blx	r7
 80053b8:	3001      	adds	r0, #1
 80053ba:	f43f af1a 	beq.w	80051f2 <_printf_float+0xb6>
 80053be:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80053c2:	4313      	orrs	r3, r2
 80053c4:	d102      	bne.n	80053cc <_printf_float+0x290>
 80053c6:	6823      	ldr	r3, [r4, #0]
 80053c8:	07d9      	lsls	r1, r3, #31
 80053ca:	d5d8      	bpl.n	800537e <_printf_float+0x242>
 80053cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80053d0:	4631      	mov	r1, r6
 80053d2:	4628      	mov	r0, r5
 80053d4:	47b8      	blx	r7
 80053d6:	3001      	adds	r0, #1
 80053d8:	f43f af0b 	beq.w	80051f2 <_printf_float+0xb6>
 80053dc:	f04f 0900 	mov.w	r9, #0
 80053e0:	f104 0a1a 	add.w	sl, r4, #26
 80053e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053e6:	425b      	negs	r3, r3
 80053e8:	454b      	cmp	r3, r9
 80053ea:	dc01      	bgt.n	80053f0 <_printf_float+0x2b4>
 80053ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80053ee:	e794      	b.n	800531a <_printf_float+0x1de>
 80053f0:	2301      	movs	r3, #1
 80053f2:	4652      	mov	r2, sl
 80053f4:	4631      	mov	r1, r6
 80053f6:	4628      	mov	r0, r5
 80053f8:	47b8      	blx	r7
 80053fa:	3001      	adds	r0, #1
 80053fc:	f43f aef9 	beq.w	80051f2 <_printf_float+0xb6>
 8005400:	f109 0901 	add.w	r9, r9, #1
 8005404:	e7ee      	b.n	80053e4 <_printf_float+0x2a8>
 8005406:	bf00      	nop
 8005408:	7fefffff 	.word	0x7fefffff
 800540c:	08009864 	.word	0x08009864
 8005410:	08009868 	.word	0x08009868
 8005414:	08009870 	.word	0x08009870
 8005418:	0800986c 	.word	0x0800986c
 800541c:	08009874 	.word	0x08009874
 8005420:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005422:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005424:	429a      	cmp	r2, r3
 8005426:	bfa8      	it	ge
 8005428:	461a      	movge	r2, r3
 800542a:	2a00      	cmp	r2, #0
 800542c:	4691      	mov	r9, r2
 800542e:	dc37      	bgt.n	80054a0 <_printf_float+0x364>
 8005430:	f04f 0b00 	mov.w	fp, #0
 8005434:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005438:	f104 021a 	add.w	r2, r4, #26
 800543c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005440:	ebaa 0309 	sub.w	r3, sl, r9
 8005444:	455b      	cmp	r3, fp
 8005446:	dc33      	bgt.n	80054b0 <_printf_float+0x374>
 8005448:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800544c:	429a      	cmp	r2, r3
 800544e:	db3b      	blt.n	80054c8 <_printf_float+0x38c>
 8005450:	6823      	ldr	r3, [r4, #0]
 8005452:	07da      	lsls	r2, r3, #31
 8005454:	d438      	bmi.n	80054c8 <_printf_float+0x38c>
 8005456:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005458:	990d      	ldr	r1, [sp, #52]	; 0x34
 800545a:	eba2 030a 	sub.w	r3, r2, sl
 800545e:	eba2 0901 	sub.w	r9, r2, r1
 8005462:	4599      	cmp	r9, r3
 8005464:	bfa8      	it	ge
 8005466:	4699      	movge	r9, r3
 8005468:	f1b9 0f00 	cmp.w	r9, #0
 800546c:	dc34      	bgt.n	80054d8 <_printf_float+0x39c>
 800546e:	f04f 0800 	mov.w	r8, #0
 8005472:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005476:	f104 0a1a 	add.w	sl, r4, #26
 800547a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800547e:	1a9b      	subs	r3, r3, r2
 8005480:	eba3 0309 	sub.w	r3, r3, r9
 8005484:	4543      	cmp	r3, r8
 8005486:	f77f af7a 	ble.w	800537e <_printf_float+0x242>
 800548a:	2301      	movs	r3, #1
 800548c:	4652      	mov	r2, sl
 800548e:	4631      	mov	r1, r6
 8005490:	4628      	mov	r0, r5
 8005492:	47b8      	blx	r7
 8005494:	3001      	adds	r0, #1
 8005496:	f43f aeac 	beq.w	80051f2 <_printf_float+0xb6>
 800549a:	f108 0801 	add.w	r8, r8, #1
 800549e:	e7ec      	b.n	800547a <_printf_float+0x33e>
 80054a0:	4613      	mov	r3, r2
 80054a2:	4631      	mov	r1, r6
 80054a4:	4642      	mov	r2, r8
 80054a6:	4628      	mov	r0, r5
 80054a8:	47b8      	blx	r7
 80054aa:	3001      	adds	r0, #1
 80054ac:	d1c0      	bne.n	8005430 <_printf_float+0x2f4>
 80054ae:	e6a0      	b.n	80051f2 <_printf_float+0xb6>
 80054b0:	2301      	movs	r3, #1
 80054b2:	4631      	mov	r1, r6
 80054b4:	4628      	mov	r0, r5
 80054b6:	920b      	str	r2, [sp, #44]	; 0x2c
 80054b8:	47b8      	blx	r7
 80054ba:	3001      	adds	r0, #1
 80054bc:	f43f ae99 	beq.w	80051f2 <_printf_float+0xb6>
 80054c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80054c2:	f10b 0b01 	add.w	fp, fp, #1
 80054c6:	e7b9      	b.n	800543c <_printf_float+0x300>
 80054c8:	4631      	mov	r1, r6
 80054ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80054ce:	4628      	mov	r0, r5
 80054d0:	47b8      	blx	r7
 80054d2:	3001      	adds	r0, #1
 80054d4:	d1bf      	bne.n	8005456 <_printf_float+0x31a>
 80054d6:	e68c      	b.n	80051f2 <_printf_float+0xb6>
 80054d8:	464b      	mov	r3, r9
 80054da:	4631      	mov	r1, r6
 80054dc:	4628      	mov	r0, r5
 80054de:	eb08 020a 	add.w	r2, r8, sl
 80054e2:	47b8      	blx	r7
 80054e4:	3001      	adds	r0, #1
 80054e6:	d1c2      	bne.n	800546e <_printf_float+0x332>
 80054e8:	e683      	b.n	80051f2 <_printf_float+0xb6>
 80054ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80054ec:	2a01      	cmp	r2, #1
 80054ee:	dc01      	bgt.n	80054f4 <_printf_float+0x3b8>
 80054f0:	07db      	lsls	r3, r3, #31
 80054f2:	d537      	bpl.n	8005564 <_printf_float+0x428>
 80054f4:	2301      	movs	r3, #1
 80054f6:	4642      	mov	r2, r8
 80054f8:	4631      	mov	r1, r6
 80054fa:	4628      	mov	r0, r5
 80054fc:	47b8      	blx	r7
 80054fe:	3001      	adds	r0, #1
 8005500:	f43f ae77 	beq.w	80051f2 <_printf_float+0xb6>
 8005504:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005508:	4631      	mov	r1, r6
 800550a:	4628      	mov	r0, r5
 800550c:	47b8      	blx	r7
 800550e:	3001      	adds	r0, #1
 8005510:	f43f ae6f 	beq.w	80051f2 <_printf_float+0xb6>
 8005514:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005518:	2200      	movs	r2, #0
 800551a:	2300      	movs	r3, #0
 800551c:	f7fb fa44 	bl	80009a8 <__aeabi_dcmpeq>
 8005520:	b9d8      	cbnz	r0, 800555a <_printf_float+0x41e>
 8005522:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005524:	f108 0201 	add.w	r2, r8, #1
 8005528:	3b01      	subs	r3, #1
 800552a:	4631      	mov	r1, r6
 800552c:	4628      	mov	r0, r5
 800552e:	47b8      	blx	r7
 8005530:	3001      	adds	r0, #1
 8005532:	d10e      	bne.n	8005552 <_printf_float+0x416>
 8005534:	e65d      	b.n	80051f2 <_printf_float+0xb6>
 8005536:	2301      	movs	r3, #1
 8005538:	464a      	mov	r2, r9
 800553a:	4631      	mov	r1, r6
 800553c:	4628      	mov	r0, r5
 800553e:	47b8      	blx	r7
 8005540:	3001      	adds	r0, #1
 8005542:	f43f ae56 	beq.w	80051f2 <_printf_float+0xb6>
 8005546:	f108 0801 	add.w	r8, r8, #1
 800554a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800554c:	3b01      	subs	r3, #1
 800554e:	4543      	cmp	r3, r8
 8005550:	dcf1      	bgt.n	8005536 <_printf_float+0x3fa>
 8005552:	4653      	mov	r3, sl
 8005554:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005558:	e6e0      	b.n	800531c <_printf_float+0x1e0>
 800555a:	f04f 0800 	mov.w	r8, #0
 800555e:	f104 091a 	add.w	r9, r4, #26
 8005562:	e7f2      	b.n	800554a <_printf_float+0x40e>
 8005564:	2301      	movs	r3, #1
 8005566:	4642      	mov	r2, r8
 8005568:	e7df      	b.n	800552a <_printf_float+0x3ee>
 800556a:	2301      	movs	r3, #1
 800556c:	464a      	mov	r2, r9
 800556e:	4631      	mov	r1, r6
 8005570:	4628      	mov	r0, r5
 8005572:	47b8      	blx	r7
 8005574:	3001      	adds	r0, #1
 8005576:	f43f ae3c 	beq.w	80051f2 <_printf_float+0xb6>
 800557a:	f108 0801 	add.w	r8, r8, #1
 800557e:	68e3      	ldr	r3, [r4, #12]
 8005580:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005582:	1a5b      	subs	r3, r3, r1
 8005584:	4543      	cmp	r3, r8
 8005586:	dcf0      	bgt.n	800556a <_printf_float+0x42e>
 8005588:	e6fd      	b.n	8005386 <_printf_float+0x24a>
 800558a:	f04f 0800 	mov.w	r8, #0
 800558e:	f104 0919 	add.w	r9, r4, #25
 8005592:	e7f4      	b.n	800557e <_printf_float+0x442>

08005594 <_printf_common>:
 8005594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005598:	4616      	mov	r6, r2
 800559a:	4699      	mov	r9, r3
 800559c:	688a      	ldr	r2, [r1, #8]
 800559e:	690b      	ldr	r3, [r1, #16]
 80055a0:	4607      	mov	r7, r0
 80055a2:	4293      	cmp	r3, r2
 80055a4:	bfb8      	it	lt
 80055a6:	4613      	movlt	r3, r2
 80055a8:	6033      	str	r3, [r6, #0]
 80055aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80055ae:	460c      	mov	r4, r1
 80055b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80055b4:	b10a      	cbz	r2, 80055ba <_printf_common+0x26>
 80055b6:	3301      	adds	r3, #1
 80055b8:	6033      	str	r3, [r6, #0]
 80055ba:	6823      	ldr	r3, [r4, #0]
 80055bc:	0699      	lsls	r1, r3, #26
 80055be:	bf42      	ittt	mi
 80055c0:	6833      	ldrmi	r3, [r6, #0]
 80055c2:	3302      	addmi	r3, #2
 80055c4:	6033      	strmi	r3, [r6, #0]
 80055c6:	6825      	ldr	r5, [r4, #0]
 80055c8:	f015 0506 	ands.w	r5, r5, #6
 80055cc:	d106      	bne.n	80055dc <_printf_common+0x48>
 80055ce:	f104 0a19 	add.w	sl, r4, #25
 80055d2:	68e3      	ldr	r3, [r4, #12]
 80055d4:	6832      	ldr	r2, [r6, #0]
 80055d6:	1a9b      	subs	r3, r3, r2
 80055d8:	42ab      	cmp	r3, r5
 80055da:	dc28      	bgt.n	800562e <_printf_common+0x9a>
 80055dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80055e0:	1e13      	subs	r3, r2, #0
 80055e2:	6822      	ldr	r2, [r4, #0]
 80055e4:	bf18      	it	ne
 80055e6:	2301      	movne	r3, #1
 80055e8:	0692      	lsls	r2, r2, #26
 80055ea:	d42d      	bmi.n	8005648 <_printf_common+0xb4>
 80055ec:	4649      	mov	r1, r9
 80055ee:	4638      	mov	r0, r7
 80055f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80055f4:	47c0      	blx	r8
 80055f6:	3001      	adds	r0, #1
 80055f8:	d020      	beq.n	800563c <_printf_common+0xa8>
 80055fa:	6823      	ldr	r3, [r4, #0]
 80055fc:	68e5      	ldr	r5, [r4, #12]
 80055fe:	f003 0306 	and.w	r3, r3, #6
 8005602:	2b04      	cmp	r3, #4
 8005604:	bf18      	it	ne
 8005606:	2500      	movne	r5, #0
 8005608:	6832      	ldr	r2, [r6, #0]
 800560a:	f04f 0600 	mov.w	r6, #0
 800560e:	68a3      	ldr	r3, [r4, #8]
 8005610:	bf08      	it	eq
 8005612:	1aad      	subeq	r5, r5, r2
 8005614:	6922      	ldr	r2, [r4, #16]
 8005616:	bf08      	it	eq
 8005618:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800561c:	4293      	cmp	r3, r2
 800561e:	bfc4      	itt	gt
 8005620:	1a9b      	subgt	r3, r3, r2
 8005622:	18ed      	addgt	r5, r5, r3
 8005624:	341a      	adds	r4, #26
 8005626:	42b5      	cmp	r5, r6
 8005628:	d11a      	bne.n	8005660 <_printf_common+0xcc>
 800562a:	2000      	movs	r0, #0
 800562c:	e008      	b.n	8005640 <_printf_common+0xac>
 800562e:	2301      	movs	r3, #1
 8005630:	4652      	mov	r2, sl
 8005632:	4649      	mov	r1, r9
 8005634:	4638      	mov	r0, r7
 8005636:	47c0      	blx	r8
 8005638:	3001      	adds	r0, #1
 800563a:	d103      	bne.n	8005644 <_printf_common+0xb0>
 800563c:	f04f 30ff 	mov.w	r0, #4294967295
 8005640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005644:	3501      	adds	r5, #1
 8005646:	e7c4      	b.n	80055d2 <_printf_common+0x3e>
 8005648:	2030      	movs	r0, #48	; 0x30
 800564a:	18e1      	adds	r1, r4, r3
 800564c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005650:	1c5a      	adds	r2, r3, #1
 8005652:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005656:	4422      	add	r2, r4
 8005658:	3302      	adds	r3, #2
 800565a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800565e:	e7c5      	b.n	80055ec <_printf_common+0x58>
 8005660:	2301      	movs	r3, #1
 8005662:	4622      	mov	r2, r4
 8005664:	4649      	mov	r1, r9
 8005666:	4638      	mov	r0, r7
 8005668:	47c0      	blx	r8
 800566a:	3001      	adds	r0, #1
 800566c:	d0e6      	beq.n	800563c <_printf_common+0xa8>
 800566e:	3601      	adds	r6, #1
 8005670:	e7d9      	b.n	8005626 <_printf_common+0x92>
	...

08005674 <_printf_i>:
 8005674:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005678:	460c      	mov	r4, r1
 800567a:	7e27      	ldrb	r7, [r4, #24]
 800567c:	4691      	mov	r9, r2
 800567e:	2f78      	cmp	r7, #120	; 0x78
 8005680:	4680      	mov	r8, r0
 8005682:	469a      	mov	sl, r3
 8005684:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005686:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800568a:	d807      	bhi.n	800569c <_printf_i+0x28>
 800568c:	2f62      	cmp	r7, #98	; 0x62
 800568e:	d80a      	bhi.n	80056a6 <_printf_i+0x32>
 8005690:	2f00      	cmp	r7, #0
 8005692:	f000 80d9 	beq.w	8005848 <_printf_i+0x1d4>
 8005696:	2f58      	cmp	r7, #88	; 0x58
 8005698:	f000 80a4 	beq.w	80057e4 <_printf_i+0x170>
 800569c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80056a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80056a4:	e03a      	b.n	800571c <_printf_i+0xa8>
 80056a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80056aa:	2b15      	cmp	r3, #21
 80056ac:	d8f6      	bhi.n	800569c <_printf_i+0x28>
 80056ae:	a001      	add	r0, pc, #4	; (adr r0, 80056b4 <_printf_i+0x40>)
 80056b0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80056b4:	0800570d 	.word	0x0800570d
 80056b8:	08005721 	.word	0x08005721
 80056bc:	0800569d 	.word	0x0800569d
 80056c0:	0800569d 	.word	0x0800569d
 80056c4:	0800569d 	.word	0x0800569d
 80056c8:	0800569d 	.word	0x0800569d
 80056cc:	08005721 	.word	0x08005721
 80056d0:	0800569d 	.word	0x0800569d
 80056d4:	0800569d 	.word	0x0800569d
 80056d8:	0800569d 	.word	0x0800569d
 80056dc:	0800569d 	.word	0x0800569d
 80056e0:	0800582f 	.word	0x0800582f
 80056e4:	08005751 	.word	0x08005751
 80056e8:	08005811 	.word	0x08005811
 80056ec:	0800569d 	.word	0x0800569d
 80056f0:	0800569d 	.word	0x0800569d
 80056f4:	08005851 	.word	0x08005851
 80056f8:	0800569d 	.word	0x0800569d
 80056fc:	08005751 	.word	0x08005751
 8005700:	0800569d 	.word	0x0800569d
 8005704:	0800569d 	.word	0x0800569d
 8005708:	08005819 	.word	0x08005819
 800570c:	680b      	ldr	r3, [r1, #0]
 800570e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005712:	1d1a      	adds	r2, r3, #4
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	600a      	str	r2, [r1, #0]
 8005718:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800571c:	2301      	movs	r3, #1
 800571e:	e0a4      	b.n	800586a <_printf_i+0x1f6>
 8005720:	6825      	ldr	r5, [r4, #0]
 8005722:	6808      	ldr	r0, [r1, #0]
 8005724:	062e      	lsls	r6, r5, #24
 8005726:	f100 0304 	add.w	r3, r0, #4
 800572a:	d50a      	bpl.n	8005742 <_printf_i+0xce>
 800572c:	6805      	ldr	r5, [r0, #0]
 800572e:	600b      	str	r3, [r1, #0]
 8005730:	2d00      	cmp	r5, #0
 8005732:	da03      	bge.n	800573c <_printf_i+0xc8>
 8005734:	232d      	movs	r3, #45	; 0x2d
 8005736:	426d      	negs	r5, r5
 8005738:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800573c:	230a      	movs	r3, #10
 800573e:	485e      	ldr	r0, [pc, #376]	; (80058b8 <_printf_i+0x244>)
 8005740:	e019      	b.n	8005776 <_printf_i+0x102>
 8005742:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005746:	6805      	ldr	r5, [r0, #0]
 8005748:	600b      	str	r3, [r1, #0]
 800574a:	bf18      	it	ne
 800574c:	b22d      	sxthne	r5, r5
 800574e:	e7ef      	b.n	8005730 <_printf_i+0xbc>
 8005750:	680b      	ldr	r3, [r1, #0]
 8005752:	6825      	ldr	r5, [r4, #0]
 8005754:	1d18      	adds	r0, r3, #4
 8005756:	6008      	str	r0, [r1, #0]
 8005758:	0628      	lsls	r0, r5, #24
 800575a:	d501      	bpl.n	8005760 <_printf_i+0xec>
 800575c:	681d      	ldr	r5, [r3, #0]
 800575e:	e002      	b.n	8005766 <_printf_i+0xf2>
 8005760:	0669      	lsls	r1, r5, #25
 8005762:	d5fb      	bpl.n	800575c <_printf_i+0xe8>
 8005764:	881d      	ldrh	r5, [r3, #0]
 8005766:	2f6f      	cmp	r7, #111	; 0x6f
 8005768:	bf0c      	ite	eq
 800576a:	2308      	moveq	r3, #8
 800576c:	230a      	movne	r3, #10
 800576e:	4852      	ldr	r0, [pc, #328]	; (80058b8 <_printf_i+0x244>)
 8005770:	2100      	movs	r1, #0
 8005772:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005776:	6866      	ldr	r6, [r4, #4]
 8005778:	2e00      	cmp	r6, #0
 800577a:	bfa8      	it	ge
 800577c:	6821      	ldrge	r1, [r4, #0]
 800577e:	60a6      	str	r6, [r4, #8]
 8005780:	bfa4      	itt	ge
 8005782:	f021 0104 	bicge.w	r1, r1, #4
 8005786:	6021      	strge	r1, [r4, #0]
 8005788:	b90d      	cbnz	r5, 800578e <_printf_i+0x11a>
 800578a:	2e00      	cmp	r6, #0
 800578c:	d04d      	beq.n	800582a <_printf_i+0x1b6>
 800578e:	4616      	mov	r6, r2
 8005790:	fbb5 f1f3 	udiv	r1, r5, r3
 8005794:	fb03 5711 	mls	r7, r3, r1, r5
 8005798:	5dc7      	ldrb	r7, [r0, r7]
 800579a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800579e:	462f      	mov	r7, r5
 80057a0:	42bb      	cmp	r3, r7
 80057a2:	460d      	mov	r5, r1
 80057a4:	d9f4      	bls.n	8005790 <_printf_i+0x11c>
 80057a6:	2b08      	cmp	r3, #8
 80057a8:	d10b      	bne.n	80057c2 <_printf_i+0x14e>
 80057aa:	6823      	ldr	r3, [r4, #0]
 80057ac:	07df      	lsls	r7, r3, #31
 80057ae:	d508      	bpl.n	80057c2 <_printf_i+0x14e>
 80057b0:	6923      	ldr	r3, [r4, #16]
 80057b2:	6861      	ldr	r1, [r4, #4]
 80057b4:	4299      	cmp	r1, r3
 80057b6:	bfde      	ittt	le
 80057b8:	2330      	movle	r3, #48	; 0x30
 80057ba:	f806 3c01 	strble.w	r3, [r6, #-1]
 80057be:	f106 36ff 	addle.w	r6, r6, #4294967295
 80057c2:	1b92      	subs	r2, r2, r6
 80057c4:	6122      	str	r2, [r4, #16]
 80057c6:	464b      	mov	r3, r9
 80057c8:	4621      	mov	r1, r4
 80057ca:	4640      	mov	r0, r8
 80057cc:	f8cd a000 	str.w	sl, [sp]
 80057d0:	aa03      	add	r2, sp, #12
 80057d2:	f7ff fedf 	bl	8005594 <_printf_common>
 80057d6:	3001      	adds	r0, #1
 80057d8:	d14c      	bne.n	8005874 <_printf_i+0x200>
 80057da:	f04f 30ff 	mov.w	r0, #4294967295
 80057de:	b004      	add	sp, #16
 80057e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057e4:	4834      	ldr	r0, [pc, #208]	; (80058b8 <_printf_i+0x244>)
 80057e6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80057ea:	680e      	ldr	r6, [r1, #0]
 80057ec:	6823      	ldr	r3, [r4, #0]
 80057ee:	f856 5b04 	ldr.w	r5, [r6], #4
 80057f2:	061f      	lsls	r7, r3, #24
 80057f4:	600e      	str	r6, [r1, #0]
 80057f6:	d514      	bpl.n	8005822 <_printf_i+0x1ae>
 80057f8:	07d9      	lsls	r1, r3, #31
 80057fa:	bf44      	itt	mi
 80057fc:	f043 0320 	orrmi.w	r3, r3, #32
 8005800:	6023      	strmi	r3, [r4, #0]
 8005802:	b91d      	cbnz	r5, 800580c <_printf_i+0x198>
 8005804:	6823      	ldr	r3, [r4, #0]
 8005806:	f023 0320 	bic.w	r3, r3, #32
 800580a:	6023      	str	r3, [r4, #0]
 800580c:	2310      	movs	r3, #16
 800580e:	e7af      	b.n	8005770 <_printf_i+0xfc>
 8005810:	6823      	ldr	r3, [r4, #0]
 8005812:	f043 0320 	orr.w	r3, r3, #32
 8005816:	6023      	str	r3, [r4, #0]
 8005818:	2378      	movs	r3, #120	; 0x78
 800581a:	4828      	ldr	r0, [pc, #160]	; (80058bc <_printf_i+0x248>)
 800581c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005820:	e7e3      	b.n	80057ea <_printf_i+0x176>
 8005822:	065e      	lsls	r6, r3, #25
 8005824:	bf48      	it	mi
 8005826:	b2ad      	uxthmi	r5, r5
 8005828:	e7e6      	b.n	80057f8 <_printf_i+0x184>
 800582a:	4616      	mov	r6, r2
 800582c:	e7bb      	b.n	80057a6 <_printf_i+0x132>
 800582e:	680b      	ldr	r3, [r1, #0]
 8005830:	6826      	ldr	r6, [r4, #0]
 8005832:	1d1d      	adds	r5, r3, #4
 8005834:	6960      	ldr	r0, [r4, #20]
 8005836:	600d      	str	r5, [r1, #0]
 8005838:	0635      	lsls	r5, r6, #24
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	d501      	bpl.n	8005842 <_printf_i+0x1ce>
 800583e:	6018      	str	r0, [r3, #0]
 8005840:	e002      	b.n	8005848 <_printf_i+0x1d4>
 8005842:	0671      	lsls	r1, r6, #25
 8005844:	d5fb      	bpl.n	800583e <_printf_i+0x1ca>
 8005846:	8018      	strh	r0, [r3, #0]
 8005848:	2300      	movs	r3, #0
 800584a:	4616      	mov	r6, r2
 800584c:	6123      	str	r3, [r4, #16]
 800584e:	e7ba      	b.n	80057c6 <_printf_i+0x152>
 8005850:	680b      	ldr	r3, [r1, #0]
 8005852:	1d1a      	adds	r2, r3, #4
 8005854:	600a      	str	r2, [r1, #0]
 8005856:	681e      	ldr	r6, [r3, #0]
 8005858:	2100      	movs	r1, #0
 800585a:	4630      	mov	r0, r6
 800585c:	6862      	ldr	r2, [r4, #4]
 800585e:	f002 fb09 	bl	8007e74 <memchr>
 8005862:	b108      	cbz	r0, 8005868 <_printf_i+0x1f4>
 8005864:	1b80      	subs	r0, r0, r6
 8005866:	6060      	str	r0, [r4, #4]
 8005868:	6863      	ldr	r3, [r4, #4]
 800586a:	6123      	str	r3, [r4, #16]
 800586c:	2300      	movs	r3, #0
 800586e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005872:	e7a8      	b.n	80057c6 <_printf_i+0x152>
 8005874:	4632      	mov	r2, r6
 8005876:	4649      	mov	r1, r9
 8005878:	4640      	mov	r0, r8
 800587a:	6923      	ldr	r3, [r4, #16]
 800587c:	47d0      	blx	sl
 800587e:	3001      	adds	r0, #1
 8005880:	d0ab      	beq.n	80057da <_printf_i+0x166>
 8005882:	6823      	ldr	r3, [r4, #0]
 8005884:	079b      	lsls	r3, r3, #30
 8005886:	d413      	bmi.n	80058b0 <_printf_i+0x23c>
 8005888:	68e0      	ldr	r0, [r4, #12]
 800588a:	9b03      	ldr	r3, [sp, #12]
 800588c:	4298      	cmp	r0, r3
 800588e:	bfb8      	it	lt
 8005890:	4618      	movlt	r0, r3
 8005892:	e7a4      	b.n	80057de <_printf_i+0x16a>
 8005894:	2301      	movs	r3, #1
 8005896:	4632      	mov	r2, r6
 8005898:	4649      	mov	r1, r9
 800589a:	4640      	mov	r0, r8
 800589c:	47d0      	blx	sl
 800589e:	3001      	adds	r0, #1
 80058a0:	d09b      	beq.n	80057da <_printf_i+0x166>
 80058a2:	3501      	adds	r5, #1
 80058a4:	68e3      	ldr	r3, [r4, #12]
 80058a6:	9903      	ldr	r1, [sp, #12]
 80058a8:	1a5b      	subs	r3, r3, r1
 80058aa:	42ab      	cmp	r3, r5
 80058ac:	dcf2      	bgt.n	8005894 <_printf_i+0x220>
 80058ae:	e7eb      	b.n	8005888 <_printf_i+0x214>
 80058b0:	2500      	movs	r5, #0
 80058b2:	f104 0619 	add.w	r6, r4, #25
 80058b6:	e7f5      	b.n	80058a4 <_printf_i+0x230>
 80058b8:	08009876 	.word	0x08009876
 80058bc:	08009887 	.word	0x08009887

080058c0 <_scanf_float>:
 80058c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058c4:	b087      	sub	sp, #28
 80058c6:	9303      	str	r3, [sp, #12]
 80058c8:	688b      	ldr	r3, [r1, #8]
 80058ca:	4617      	mov	r7, r2
 80058cc:	1e5a      	subs	r2, r3, #1
 80058ce:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80058d2:	bf85      	ittet	hi
 80058d4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80058d8:	195b      	addhi	r3, r3, r5
 80058da:	2300      	movls	r3, #0
 80058dc:	9302      	strhi	r3, [sp, #8]
 80058de:	bf88      	it	hi
 80058e0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80058e4:	468b      	mov	fp, r1
 80058e6:	f04f 0500 	mov.w	r5, #0
 80058ea:	bf8c      	ite	hi
 80058ec:	608b      	strhi	r3, [r1, #8]
 80058ee:	9302      	strls	r3, [sp, #8]
 80058f0:	680b      	ldr	r3, [r1, #0]
 80058f2:	4680      	mov	r8, r0
 80058f4:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80058f8:	f84b 3b1c 	str.w	r3, [fp], #28
 80058fc:	460c      	mov	r4, r1
 80058fe:	465e      	mov	r6, fp
 8005900:	46aa      	mov	sl, r5
 8005902:	46a9      	mov	r9, r5
 8005904:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005908:	9501      	str	r5, [sp, #4]
 800590a:	68a2      	ldr	r2, [r4, #8]
 800590c:	b152      	cbz	r2, 8005924 <_scanf_float+0x64>
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	2b4e      	cmp	r3, #78	; 0x4e
 8005914:	d864      	bhi.n	80059e0 <_scanf_float+0x120>
 8005916:	2b40      	cmp	r3, #64	; 0x40
 8005918:	d83c      	bhi.n	8005994 <_scanf_float+0xd4>
 800591a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800591e:	b2c8      	uxtb	r0, r1
 8005920:	280e      	cmp	r0, #14
 8005922:	d93a      	bls.n	800599a <_scanf_float+0xda>
 8005924:	f1b9 0f00 	cmp.w	r9, #0
 8005928:	d003      	beq.n	8005932 <_scanf_float+0x72>
 800592a:	6823      	ldr	r3, [r4, #0]
 800592c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005930:	6023      	str	r3, [r4, #0]
 8005932:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005936:	f1ba 0f01 	cmp.w	sl, #1
 800593a:	f200 8113 	bhi.w	8005b64 <_scanf_float+0x2a4>
 800593e:	455e      	cmp	r6, fp
 8005940:	f200 8105 	bhi.w	8005b4e <_scanf_float+0x28e>
 8005944:	2501      	movs	r5, #1
 8005946:	4628      	mov	r0, r5
 8005948:	b007      	add	sp, #28
 800594a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800594e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005952:	2a0d      	cmp	r2, #13
 8005954:	d8e6      	bhi.n	8005924 <_scanf_float+0x64>
 8005956:	a101      	add	r1, pc, #4	; (adr r1, 800595c <_scanf_float+0x9c>)
 8005958:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800595c:	08005a9b 	.word	0x08005a9b
 8005960:	08005925 	.word	0x08005925
 8005964:	08005925 	.word	0x08005925
 8005968:	08005925 	.word	0x08005925
 800596c:	08005afb 	.word	0x08005afb
 8005970:	08005ad3 	.word	0x08005ad3
 8005974:	08005925 	.word	0x08005925
 8005978:	08005925 	.word	0x08005925
 800597c:	08005aa9 	.word	0x08005aa9
 8005980:	08005925 	.word	0x08005925
 8005984:	08005925 	.word	0x08005925
 8005988:	08005925 	.word	0x08005925
 800598c:	08005925 	.word	0x08005925
 8005990:	08005a61 	.word	0x08005a61
 8005994:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005998:	e7db      	b.n	8005952 <_scanf_float+0x92>
 800599a:	290e      	cmp	r1, #14
 800599c:	d8c2      	bhi.n	8005924 <_scanf_float+0x64>
 800599e:	a001      	add	r0, pc, #4	; (adr r0, 80059a4 <_scanf_float+0xe4>)
 80059a0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80059a4:	08005a53 	.word	0x08005a53
 80059a8:	08005925 	.word	0x08005925
 80059ac:	08005a53 	.word	0x08005a53
 80059b0:	08005ae7 	.word	0x08005ae7
 80059b4:	08005925 	.word	0x08005925
 80059b8:	08005a01 	.word	0x08005a01
 80059bc:	08005a3d 	.word	0x08005a3d
 80059c0:	08005a3d 	.word	0x08005a3d
 80059c4:	08005a3d 	.word	0x08005a3d
 80059c8:	08005a3d 	.word	0x08005a3d
 80059cc:	08005a3d 	.word	0x08005a3d
 80059d0:	08005a3d 	.word	0x08005a3d
 80059d4:	08005a3d 	.word	0x08005a3d
 80059d8:	08005a3d 	.word	0x08005a3d
 80059dc:	08005a3d 	.word	0x08005a3d
 80059e0:	2b6e      	cmp	r3, #110	; 0x6e
 80059e2:	d809      	bhi.n	80059f8 <_scanf_float+0x138>
 80059e4:	2b60      	cmp	r3, #96	; 0x60
 80059e6:	d8b2      	bhi.n	800594e <_scanf_float+0x8e>
 80059e8:	2b54      	cmp	r3, #84	; 0x54
 80059ea:	d077      	beq.n	8005adc <_scanf_float+0x21c>
 80059ec:	2b59      	cmp	r3, #89	; 0x59
 80059ee:	d199      	bne.n	8005924 <_scanf_float+0x64>
 80059f0:	2d07      	cmp	r5, #7
 80059f2:	d197      	bne.n	8005924 <_scanf_float+0x64>
 80059f4:	2508      	movs	r5, #8
 80059f6:	e029      	b.n	8005a4c <_scanf_float+0x18c>
 80059f8:	2b74      	cmp	r3, #116	; 0x74
 80059fa:	d06f      	beq.n	8005adc <_scanf_float+0x21c>
 80059fc:	2b79      	cmp	r3, #121	; 0x79
 80059fe:	e7f6      	b.n	80059ee <_scanf_float+0x12e>
 8005a00:	6821      	ldr	r1, [r4, #0]
 8005a02:	05c8      	lsls	r0, r1, #23
 8005a04:	d51a      	bpl.n	8005a3c <_scanf_float+0x17c>
 8005a06:	9b02      	ldr	r3, [sp, #8]
 8005a08:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005a0c:	6021      	str	r1, [r4, #0]
 8005a0e:	f109 0901 	add.w	r9, r9, #1
 8005a12:	b11b      	cbz	r3, 8005a1c <_scanf_float+0x15c>
 8005a14:	3b01      	subs	r3, #1
 8005a16:	3201      	adds	r2, #1
 8005a18:	9302      	str	r3, [sp, #8]
 8005a1a:	60a2      	str	r2, [r4, #8]
 8005a1c:	68a3      	ldr	r3, [r4, #8]
 8005a1e:	3b01      	subs	r3, #1
 8005a20:	60a3      	str	r3, [r4, #8]
 8005a22:	6923      	ldr	r3, [r4, #16]
 8005a24:	3301      	adds	r3, #1
 8005a26:	6123      	str	r3, [r4, #16]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	3b01      	subs	r3, #1
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	607b      	str	r3, [r7, #4]
 8005a30:	f340 8084 	ble.w	8005b3c <_scanf_float+0x27c>
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	3301      	adds	r3, #1
 8005a38:	603b      	str	r3, [r7, #0]
 8005a3a:	e766      	b.n	800590a <_scanf_float+0x4a>
 8005a3c:	eb1a 0f05 	cmn.w	sl, r5
 8005a40:	f47f af70 	bne.w	8005924 <_scanf_float+0x64>
 8005a44:	6822      	ldr	r2, [r4, #0]
 8005a46:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005a4a:	6022      	str	r2, [r4, #0]
 8005a4c:	f806 3b01 	strb.w	r3, [r6], #1
 8005a50:	e7e4      	b.n	8005a1c <_scanf_float+0x15c>
 8005a52:	6822      	ldr	r2, [r4, #0]
 8005a54:	0610      	lsls	r0, r2, #24
 8005a56:	f57f af65 	bpl.w	8005924 <_scanf_float+0x64>
 8005a5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a5e:	e7f4      	b.n	8005a4a <_scanf_float+0x18a>
 8005a60:	f1ba 0f00 	cmp.w	sl, #0
 8005a64:	d10e      	bne.n	8005a84 <_scanf_float+0x1c4>
 8005a66:	f1b9 0f00 	cmp.w	r9, #0
 8005a6a:	d10e      	bne.n	8005a8a <_scanf_float+0x1ca>
 8005a6c:	6822      	ldr	r2, [r4, #0]
 8005a6e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005a72:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005a76:	d108      	bne.n	8005a8a <_scanf_float+0x1ca>
 8005a78:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005a7c:	f04f 0a01 	mov.w	sl, #1
 8005a80:	6022      	str	r2, [r4, #0]
 8005a82:	e7e3      	b.n	8005a4c <_scanf_float+0x18c>
 8005a84:	f1ba 0f02 	cmp.w	sl, #2
 8005a88:	d055      	beq.n	8005b36 <_scanf_float+0x276>
 8005a8a:	2d01      	cmp	r5, #1
 8005a8c:	d002      	beq.n	8005a94 <_scanf_float+0x1d4>
 8005a8e:	2d04      	cmp	r5, #4
 8005a90:	f47f af48 	bne.w	8005924 <_scanf_float+0x64>
 8005a94:	3501      	adds	r5, #1
 8005a96:	b2ed      	uxtb	r5, r5
 8005a98:	e7d8      	b.n	8005a4c <_scanf_float+0x18c>
 8005a9a:	f1ba 0f01 	cmp.w	sl, #1
 8005a9e:	f47f af41 	bne.w	8005924 <_scanf_float+0x64>
 8005aa2:	f04f 0a02 	mov.w	sl, #2
 8005aa6:	e7d1      	b.n	8005a4c <_scanf_float+0x18c>
 8005aa8:	b97d      	cbnz	r5, 8005aca <_scanf_float+0x20a>
 8005aaa:	f1b9 0f00 	cmp.w	r9, #0
 8005aae:	f47f af3c 	bne.w	800592a <_scanf_float+0x6a>
 8005ab2:	6822      	ldr	r2, [r4, #0]
 8005ab4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005ab8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005abc:	f47f af39 	bne.w	8005932 <_scanf_float+0x72>
 8005ac0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005ac4:	2501      	movs	r5, #1
 8005ac6:	6022      	str	r2, [r4, #0]
 8005ac8:	e7c0      	b.n	8005a4c <_scanf_float+0x18c>
 8005aca:	2d03      	cmp	r5, #3
 8005acc:	d0e2      	beq.n	8005a94 <_scanf_float+0x1d4>
 8005ace:	2d05      	cmp	r5, #5
 8005ad0:	e7de      	b.n	8005a90 <_scanf_float+0x1d0>
 8005ad2:	2d02      	cmp	r5, #2
 8005ad4:	f47f af26 	bne.w	8005924 <_scanf_float+0x64>
 8005ad8:	2503      	movs	r5, #3
 8005ada:	e7b7      	b.n	8005a4c <_scanf_float+0x18c>
 8005adc:	2d06      	cmp	r5, #6
 8005ade:	f47f af21 	bne.w	8005924 <_scanf_float+0x64>
 8005ae2:	2507      	movs	r5, #7
 8005ae4:	e7b2      	b.n	8005a4c <_scanf_float+0x18c>
 8005ae6:	6822      	ldr	r2, [r4, #0]
 8005ae8:	0591      	lsls	r1, r2, #22
 8005aea:	f57f af1b 	bpl.w	8005924 <_scanf_float+0x64>
 8005aee:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005af2:	6022      	str	r2, [r4, #0]
 8005af4:	f8cd 9004 	str.w	r9, [sp, #4]
 8005af8:	e7a8      	b.n	8005a4c <_scanf_float+0x18c>
 8005afa:	6822      	ldr	r2, [r4, #0]
 8005afc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005b00:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005b04:	d006      	beq.n	8005b14 <_scanf_float+0x254>
 8005b06:	0550      	lsls	r0, r2, #21
 8005b08:	f57f af0c 	bpl.w	8005924 <_scanf_float+0x64>
 8005b0c:	f1b9 0f00 	cmp.w	r9, #0
 8005b10:	f43f af0f 	beq.w	8005932 <_scanf_float+0x72>
 8005b14:	0591      	lsls	r1, r2, #22
 8005b16:	bf58      	it	pl
 8005b18:	9901      	ldrpl	r1, [sp, #4]
 8005b1a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005b1e:	bf58      	it	pl
 8005b20:	eba9 0101 	subpl.w	r1, r9, r1
 8005b24:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005b28:	f04f 0900 	mov.w	r9, #0
 8005b2c:	bf58      	it	pl
 8005b2e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005b32:	6022      	str	r2, [r4, #0]
 8005b34:	e78a      	b.n	8005a4c <_scanf_float+0x18c>
 8005b36:	f04f 0a03 	mov.w	sl, #3
 8005b3a:	e787      	b.n	8005a4c <_scanf_float+0x18c>
 8005b3c:	4639      	mov	r1, r7
 8005b3e:	4640      	mov	r0, r8
 8005b40:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005b44:	4798      	blx	r3
 8005b46:	2800      	cmp	r0, #0
 8005b48:	f43f aedf 	beq.w	800590a <_scanf_float+0x4a>
 8005b4c:	e6ea      	b.n	8005924 <_scanf_float+0x64>
 8005b4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005b52:	463a      	mov	r2, r7
 8005b54:	4640      	mov	r0, r8
 8005b56:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005b5a:	4798      	blx	r3
 8005b5c:	6923      	ldr	r3, [r4, #16]
 8005b5e:	3b01      	subs	r3, #1
 8005b60:	6123      	str	r3, [r4, #16]
 8005b62:	e6ec      	b.n	800593e <_scanf_float+0x7e>
 8005b64:	1e6b      	subs	r3, r5, #1
 8005b66:	2b06      	cmp	r3, #6
 8005b68:	d825      	bhi.n	8005bb6 <_scanf_float+0x2f6>
 8005b6a:	2d02      	cmp	r5, #2
 8005b6c:	d836      	bhi.n	8005bdc <_scanf_float+0x31c>
 8005b6e:	455e      	cmp	r6, fp
 8005b70:	f67f aee8 	bls.w	8005944 <_scanf_float+0x84>
 8005b74:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005b78:	463a      	mov	r2, r7
 8005b7a:	4640      	mov	r0, r8
 8005b7c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005b80:	4798      	blx	r3
 8005b82:	6923      	ldr	r3, [r4, #16]
 8005b84:	3b01      	subs	r3, #1
 8005b86:	6123      	str	r3, [r4, #16]
 8005b88:	e7f1      	b.n	8005b6e <_scanf_float+0x2ae>
 8005b8a:	9802      	ldr	r0, [sp, #8]
 8005b8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005b90:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005b94:	463a      	mov	r2, r7
 8005b96:	9002      	str	r0, [sp, #8]
 8005b98:	4640      	mov	r0, r8
 8005b9a:	4798      	blx	r3
 8005b9c:	6923      	ldr	r3, [r4, #16]
 8005b9e:	3b01      	subs	r3, #1
 8005ba0:	6123      	str	r3, [r4, #16]
 8005ba2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005ba6:	fa5f fa8a 	uxtb.w	sl, sl
 8005baa:	f1ba 0f02 	cmp.w	sl, #2
 8005bae:	d1ec      	bne.n	8005b8a <_scanf_float+0x2ca>
 8005bb0:	3d03      	subs	r5, #3
 8005bb2:	b2ed      	uxtb	r5, r5
 8005bb4:	1b76      	subs	r6, r6, r5
 8005bb6:	6823      	ldr	r3, [r4, #0]
 8005bb8:	05da      	lsls	r2, r3, #23
 8005bba:	d52f      	bpl.n	8005c1c <_scanf_float+0x35c>
 8005bbc:	055b      	lsls	r3, r3, #21
 8005bbe:	d510      	bpl.n	8005be2 <_scanf_float+0x322>
 8005bc0:	455e      	cmp	r6, fp
 8005bc2:	f67f aebf 	bls.w	8005944 <_scanf_float+0x84>
 8005bc6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005bca:	463a      	mov	r2, r7
 8005bcc:	4640      	mov	r0, r8
 8005bce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005bd2:	4798      	blx	r3
 8005bd4:	6923      	ldr	r3, [r4, #16]
 8005bd6:	3b01      	subs	r3, #1
 8005bd8:	6123      	str	r3, [r4, #16]
 8005bda:	e7f1      	b.n	8005bc0 <_scanf_float+0x300>
 8005bdc:	46aa      	mov	sl, r5
 8005bde:	9602      	str	r6, [sp, #8]
 8005be0:	e7df      	b.n	8005ba2 <_scanf_float+0x2e2>
 8005be2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005be6:	6923      	ldr	r3, [r4, #16]
 8005be8:	2965      	cmp	r1, #101	; 0x65
 8005bea:	f103 33ff 	add.w	r3, r3, #4294967295
 8005bee:	f106 35ff 	add.w	r5, r6, #4294967295
 8005bf2:	6123      	str	r3, [r4, #16]
 8005bf4:	d00c      	beq.n	8005c10 <_scanf_float+0x350>
 8005bf6:	2945      	cmp	r1, #69	; 0x45
 8005bf8:	d00a      	beq.n	8005c10 <_scanf_float+0x350>
 8005bfa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005bfe:	463a      	mov	r2, r7
 8005c00:	4640      	mov	r0, r8
 8005c02:	4798      	blx	r3
 8005c04:	6923      	ldr	r3, [r4, #16]
 8005c06:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005c0a:	3b01      	subs	r3, #1
 8005c0c:	1eb5      	subs	r5, r6, #2
 8005c0e:	6123      	str	r3, [r4, #16]
 8005c10:	463a      	mov	r2, r7
 8005c12:	4640      	mov	r0, r8
 8005c14:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005c18:	4798      	blx	r3
 8005c1a:	462e      	mov	r6, r5
 8005c1c:	6825      	ldr	r5, [r4, #0]
 8005c1e:	f015 0510 	ands.w	r5, r5, #16
 8005c22:	d159      	bne.n	8005cd8 <_scanf_float+0x418>
 8005c24:	7035      	strb	r5, [r6, #0]
 8005c26:	6823      	ldr	r3, [r4, #0]
 8005c28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005c2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c30:	d11c      	bne.n	8005c6c <_scanf_float+0x3ac>
 8005c32:	9b01      	ldr	r3, [sp, #4]
 8005c34:	454b      	cmp	r3, r9
 8005c36:	eba3 0209 	sub.w	r2, r3, r9
 8005c3a:	d124      	bne.n	8005c86 <_scanf_float+0x3c6>
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	4659      	mov	r1, fp
 8005c40:	4640      	mov	r0, r8
 8005c42:	f000 fe89 	bl	8006958 <_strtod_r>
 8005c46:	f8d4 c000 	ldr.w	ip, [r4]
 8005c4a:	9b03      	ldr	r3, [sp, #12]
 8005c4c:	f01c 0f02 	tst.w	ip, #2
 8005c50:	4606      	mov	r6, r0
 8005c52:	460f      	mov	r7, r1
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	d021      	beq.n	8005c9c <_scanf_float+0x3dc>
 8005c58:	9903      	ldr	r1, [sp, #12]
 8005c5a:	1d1a      	adds	r2, r3, #4
 8005c5c:	600a      	str	r2, [r1, #0]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	e9c3 6700 	strd	r6, r7, [r3]
 8005c64:	68e3      	ldr	r3, [r4, #12]
 8005c66:	3301      	adds	r3, #1
 8005c68:	60e3      	str	r3, [r4, #12]
 8005c6a:	e66c      	b.n	8005946 <_scanf_float+0x86>
 8005c6c:	9b04      	ldr	r3, [sp, #16]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d0e4      	beq.n	8005c3c <_scanf_float+0x37c>
 8005c72:	9905      	ldr	r1, [sp, #20]
 8005c74:	230a      	movs	r3, #10
 8005c76:	462a      	mov	r2, r5
 8005c78:	4640      	mov	r0, r8
 8005c7a:	3101      	adds	r1, #1
 8005c7c:	f000 fef8 	bl	8006a70 <_strtol_r>
 8005c80:	9b04      	ldr	r3, [sp, #16]
 8005c82:	9e05      	ldr	r6, [sp, #20]
 8005c84:	1ac2      	subs	r2, r0, r3
 8005c86:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005c8a:	429e      	cmp	r6, r3
 8005c8c:	bf28      	it	cs
 8005c8e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005c92:	4630      	mov	r0, r6
 8005c94:	4911      	ldr	r1, [pc, #68]	; (8005cdc <_scanf_float+0x41c>)
 8005c96:	f000 f829 	bl	8005cec <siprintf>
 8005c9a:	e7cf      	b.n	8005c3c <_scanf_float+0x37c>
 8005c9c:	f01c 0f04 	tst.w	ip, #4
 8005ca0:	f103 0e04 	add.w	lr, r3, #4
 8005ca4:	d003      	beq.n	8005cae <_scanf_float+0x3ee>
 8005ca6:	9903      	ldr	r1, [sp, #12]
 8005ca8:	f8c1 e000 	str.w	lr, [r1]
 8005cac:	e7d7      	b.n	8005c5e <_scanf_float+0x39e>
 8005cae:	9a03      	ldr	r2, [sp, #12]
 8005cb0:	f8c2 e000 	str.w	lr, [r2]
 8005cb4:	f8d3 8000 	ldr.w	r8, [r3]
 8005cb8:	4602      	mov	r2, r0
 8005cba:	460b      	mov	r3, r1
 8005cbc:	f7fa fea6 	bl	8000a0c <__aeabi_dcmpun>
 8005cc0:	b128      	cbz	r0, 8005cce <_scanf_float+0x40e>
 8005cc2:	4807      	ldr	r0, [pc, #28]	; (8005ce0 <_scanf_float+0x420>)
 8005cc4:	f000 f80e 	bl	8005ce4 <nanf>
 8005cc8:	f8c8 0000 	str.w	r0, [r8]
 8005ccc:	e7ca      	b.n	8005c64 <_scanf_float+0x3a4>
 8005cce:	4630      	mov	r0, r6
 8005cd0:	4639      	mov	r1, r7
 8005cd2:	f7fa fef9 	bl	8000ac8 <__aeabi_d2f>
 8005cd6:	e7f7      	b.n	8005cc8 <_scanf_float+0x408>
 8005cd8:	2500      	movs	r5, #0
 8005cda:	e634      	b.n	8005946 <_scanf_float+0x86>
 8005cdc:	08009898 	.word	0x08009898
 8005ce0:	08009cb0 	.word	0x08009cb0

08005ce4 <nanf>:
 8005ce4:	4800      	ldr	r0, [pc, #0]	; (8005ce8 <nanf+0x4>)
 8005ce6:	4770      	bx	lr
 8005ce8:	7fc00000 	.word	0x7fc00000

08005cec <siprintf>:
 8005cec:	b40e      	push	{r1, r2, r3}
 8005cee:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005cf2:	b500      	push	{lr}
 8005cf4:	b09c      	sub	sp, #112	; 0x70
 8005cf6:	ab1d      	add	r3, sp, #116	; 0x74
 8005cf8:	9002      	str	r0, [sp, #8]
 8005cfa:	9006      	str	r0, [sp, #24]
 8005cfc:	9107      	str	r1, [sp, #28]
 8005cfe:	9104      	str	r1, [sp, #16]
 8005d00:	4808      	ldr	r0, [pc, #32]	; (8005d24 <siprintf+0x38>)
 8005d02:	4909      	ldr	r1, [pc, #36]	; (8005d28 <siprintf+0x3c>)
 8005d04:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d08:	9105      	str	r1, [sp, #20]
 8005d0a:	6800      	ldr	r0, [r0, #0]
 8005d0c:	a902      	add	r1, sp, #8
 8005d0e:	9301      	str	r3, [sp, #4]
 8005d10:	f002 fe94 	bl	8008a3c <_svfiprintf_r>
 8005d14:	2200      	movs	r2, #0
 8005d16:	9b02      	ldr	r3, [sp, #8]
 8005d18:	701a      	strb	r2, [r3, #0]
 8005d1a:	b01c      	add	sp, #112	; 0x70
 8005d1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d20:	b003      	add	sp, #12
 8005d22:	4770      	bx	lr
 8005d24:	2000000c 	.word	0x2000000c
 8005d28:	ffff0208 	.word	0xffff0208

08005d2c <sulp>:
 8005d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d30:	460f      	mov	r7, r1
 8005d32:	4690      	mov	r8, r2
 8005d34:	f002 fc2a 	bl	800858c <__ulp>
 8005d38:	4604      	mov	r4, r0
 8005d3a:	460d      	mov	r5, r1
 8005d3c:	f1b8 0f00 	cmp.w	r8, #0
 8005d40:	d011      	beq.n	8005d66 <sulp+0x3a>
 8005d42:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005d46:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	dd0b      	ble.n	8005d66 <sulp+0x3a>
 8005d4e:	2400      	movs	r4, #0
 8005d50:	051b      	lsls	r3, r3, #20
 8005d52:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005d56:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005d5a:	4622      	mov	r2, r4
 8005d5c:	462b      	mov	r3, r5
 8005d5e:	f7fa fbbb 	bl	80004d8 <__aeabi_dmul>
 8005d62:	4604      	mov	r4, r0
 8005d64:	460d      	mov	r5, r1
 8005d66:	4620      	mov	r0, r4
 8005d68:	4629      	mov	r1, r5
 8005d6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08005d70 <_strtod_l>:
 8005d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d74:	469b      	mov	fp, r3
 8005d76:	2300      	movs	r3, #0
 8005d78:	b0a1      	sub	sp, #132	; 0x84
 8005d7a:	931c      	str	r3, [sp, #112]	; 0x70
 8005d7c:	4ba1      	ldr	r3, [pc, #644]	; (8006004 <_strtod_l+0x294>)
 8005d7e:	4682      	mov	sl, r0
 8005d80:	681f      	ldr	r7, [r3, #0]
 8005d82:	460e      	mov	r6, r1
 8005d84:	4638      	mov	r0, r7
 8005d86:	9217      	str	r2, [sp, #92]	; 0x5c
 8005d88:	f7fa f9e2 	bl	8000150 <strlen>
 8005d8c:	f04f 0800 	mov.w	r8, #0
 8005d90:	4604      	mov	r4, r0
 8005d92:	f04f 0900 	mov.w	r9, #0
 8005d96:	961b      	str	r6, [sp, #108]	; 0x6c
 8005d98:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005d9a:	781a      	ldrb	r2, [r3, #0]
 8005d9c:	2a2b      	cmp	r2, #43	; 0x2b
 8005d9e:	d04c      	beq.n	8005e3a <_strtod_l+0xca>
 8005da0:	d83a      	bhi.n	8005e18 <_strtod_l+0xa8>
 8005da2:	2a0d      	cmp	r2, #13
 8005da4:	d833      	bhi.n	8005e0e <_strtod_l+0x9e>
 8005da6:	2a08      	cmp	r2, #8
 8005da8:	d833      	bhi.n	8005e12 <_strtod_l+0xa2>
 8005daa:	2a00      	cmp	r2, #0
 8005dac:	d03d      	beq.n	8005e2a <_strtod_l+0xba>
 8005dae:	2300      	movs	r3, #0
 8005db0:	930c      	str	r3, [sp, #48]	; 0x30
 8005db2:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8005db4:	782b      	ldrb	r3, [r5, #0]
 8005db6:	2b30      	cmp	r3, #48	; 0x30
 8005db8:	f040 80af 	bne.w	8005f1a <_strtod_l+0x1aa>
 8005dbc:	786b      	ldrb	r3, [r5, #1]
 8005dbe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005dc2:	2b58      	cmp	r3, #88	; 0x58
 8005dc4:	d16c      	bne.n	8005ea0 <_strtod_l+0x130>
 8005dc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005dc8:	4650      	mov	r0, sl
 8005dca:	9301      	str	r3, [sp, #4]
 8005dcc:	ab1c      	add	r3, sp, #112	; 0x70
 8005dce:	9300      	str	r3, [sp, #0]
 8005dd0:	4a8d      	ldr	r2, [pc, #564]	; (8006008 <_strtod_l+0x298>)
 8005dd2:	f8cd b008 	str.w	fp, [sp, #8]
 8005dd6:	ab1d      	add	r3, sp, #116	; 0x74
 8005dd8:	a91b      	add	r1, sp, #108	; 0x6c
 8005dda:	f001 fd2f 	bl	800783c <__gethex>
 8005dde:	f010 0607 	ands.w	r6, r0, #7
 8005de2:	4604      	mov	r4, r0
 8005de4:	d005      	beq.n	8005df2 <_strtod_l+0x82>
 8005de6:	2e06      	cmp	r6, #6
 8005de8:	d129      	bne.n	8005e3e <_strtod_l+0xce>
 8005dea:	2300      	movs	r3, #0
 8005dec:	3501      	adds	r5, #1
 8005dee:	951b      	str	r5, [sp, #108]	; 0x6c
 8005df0:	930c      	str	r3, [sp, #48]	; 0x30
 8005df2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	f040 8596 	bne.w	8006926 <_strtod_l+0xbb6>
 8005dfa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005dfc:	b1d3      	cbz	r3, 8005e34 <_strtod_l+0xc4>
 8005dfe:	4642      	mov	r2, r8
 8005e00:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005e04:	4610      	mov	r0, r2
 8005e06:	4619      	mov	r1, r3
 8005e08:	b021      	add	sp, #132	; 0x84
 8005e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e0e:	2a20      	cmp	r2, #32
 8005e10:	d1cd      	bne.n	8005dae <_strtod_l+0x3e>
 8005e12:	3301      	adds	r3, #1
 8005e14:	931b      	str	r3, [sp, #108]	; 0x6c
 8005e16:	e7bf      	b.n	8005d98 <_strtod_l+0x28>
 8005e18:	2a2d      	cmp	r2, #45	; 0x2d
 8005e1a:	d1c8      	bne.n	8005dae <_strtod_l+0x3e>
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	920c      	str	r2, [sp, #48]	; 0x30
 8005e20:	1c5a      	adds	r2, r3, #1
 8005e22:	921b      	str	r2, [sp, #108]	; 0x6c
 8005e24:	785b      	ldrb	r3, [r3, #1]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d1c3      	bne.n	8005db2 <_strtod_l+0x42>
 8005e2a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005e2c:	961b      	str	r6, [sp, #108]	; 0x6c
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	f040 8577 	bne.w	8006922 <_strtod_l+0xbb2>
 8005e34:	4642      	mov	r2, r8
 8005e36:	464b      	mov	r3, r9
 8005e38:	e7e4      	b.n	8005e04 <_strtod_l+0x94>
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	e7ef      	b.n	8005e1e <_strtod_l+0xae>
 8005e3e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005e40:	b13a      	cbz	r2, 8005e52 <_strtod_l+0xe2>
 8005e42:	2135      	movs	r1, #53	; 0x35
 8005e44:	a81e      	add	r0, sp, #120	; 0x78
 8005e46:	f002 fca5 	bl	8008794 <__copybits>
 8005e4a:	4650      	mov	r0, sl
 8005e4c:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005e4e:	f002 f86d 	bl	8007f2c <_Bfree>
 8005e52:	3e01      	subs	r6, #1
 8005e54:	2e05      	cmp	r6, #5
 8005e56:	d807      	bhi.n	8005e68 <_strtod_l+0xf8>
 8005e58:	e8df f006 	tbb	[pc, r6]
 8005e5c:	1d180b0e 	.word	0x1d180b0e
 8005e60:	030e      	.short	0x030e
 8005e62:	f04f 0900 	mov.w	r9, #0
 8005e66:	46c8      	mov	r8, r9
 8005e68:	0721      	lsls	r1, r4, #28
 8005e6a:	d5c2      	bpl.n	8005df2 <_strtod_l+0x82>
 8005e6c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8005e70:	e7bf      	b.n	8005df2 <_strtod_l+0x82>
 8005e72:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 8005e76:	e7f7      	b.n	8005e68 <_strtod_l+0xf8>
 8005e78:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005e7a:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 8005e7e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005e82:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005e86:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8005e8a:	e7ed      	b.n	8005e68 <_strtod_l+0xf8>
 8005e8c:	f04f 0800 	mov.w	r8, #0
 8005e90:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800600c <_strtod_l+0x29c>
 8005e94:	e7e8      	b.n	8005e68 <_strtod_l+0xf8>
 8005e96:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8005e9a:	f04f 38ff 	mov.w	r8, #4294967295
 8005e9e:	e7e3      	b.n	8005e68 <_strtod_l+0xf8>
 8005ea0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005ea2:	1c5a      	adds	r2, r3, #1
 8005ea4:	921b      	str	r2, [sp, #108]	; 0x6c
 8005ea6:	785b      	ldrb	r3, [r3, #1]
 8005ea8:	2b30      	cmp	r3, #48	; 0x30
 8005eaa:	d0f9      	beq.n	8005ea0 <_strtod_l+0x130>
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d0a0      	beq.n	8005df2 <_strtod_l+0x82>
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	9307      	str	r3, [sp, #28]
 8005eb4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005eb6:	220a      	movs	r2, #10
 8005eb8:	9308      	str	r3, [sp, #32]
 8005eba:	2300      	movs	r3, #0
 8005ebc:	469b      	mov	fp, r3
 8005ebe:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8005ec2:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8005ec4:	7805      	ldrb	r5, [r0, #0]
 8005ec6:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8005eca:	b2d9      	uxtb	r1, r3
 8005ecc:	2909      	cmp	r1, #9
 8005ece:	d926      	bls.n	8005f1e <_strtod_l+0x1ae>
 8005ed0:	4622      	mov	r2, r4
 8005ed2:	4639      	mov	r1, r7
 8005ed4:	f002 fec8 	bl	8008c68 <strncmp>
 8005ed8:	2800      	cmp	r0, #0
 8005eda:	d032      	beq.n	8005f42 <_strtod_l+0x1d2>
 8005edc:	2000      	movs	r0, #0
 8005ede:	462b      	mov	r3, r5
 8005ee0:	465c      	mov	r4, fp
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	9004      	str	r0, [sp, #16]
 8005ee6:	2b65      	cmp	r3, #101	; 0x65
 8005ee8:	d001      	beq.n	8005eee <_strtod_l+0x17e>
 8005eea:	2b45      	cmp	r3, #69	; 0x45
 8005eec:	d113      	bne.n	8005f16 <_strtod_l+0x1a6>
 8005eee:	b91c      	cbnz	r4, 8005ef8 <_strtod_l+0x188>
 8005ef0:	9b07      	ldr	r3, [sp, #28]
 8005ef2:	4303      	orrs	r3, r0
 8005ef4:	d099      	beq.n	8005e2a <_strtod_l+0xba>
 8005ef6:	2400      	movs	r4, #0
 8005ef8:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8005efa:	1c73      	adds	r3, r6, #1
 8005efc:	931b      	str	r3, [sp, #108]	; 0x6c
 8005efe:	7873      	ldrb	r3, [r6, #1]
 8005f00:	2b2b      	cmp	r3, #43	; 0x2b
 8005f02:	d078      	beq.n	8005ff6 <_strtod_l+0x286>
 8005f04:	2b2d      	cmp	r3, #45	; 0x2d
 8005f06:	d07b      	beq.n	8006000 <_strtod_l+0x290>
 8005f08:	2700      	movs	r7, #0
 8005f0a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8005f0e:	2909      	cmp	r1, #9
 8005f10:	f240 8082 	bls.w	8006018 <_strtod_l+0x2a8>
 8005f14:	961b      	str	r6, [sp, #108]	; 0x6c
 8005f16:	2500      	movs	r5, #0
 8005f18:	e09e      	b.n	8006058 <_strtod_l+0x2e8>
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	e7c9      	b.n	8005eb2 <_strtod_l+0x142>
 8005f1e:	f1bb 0f08 	cmp.w	fp, #8
 8005f22:	bfd5      	itete	le
 8005f24:	9906      	ldrle	r1, [sp, #24]
 8005f26:	9905      	ldrgt	r1, [sp, #20]
 8005f28:	fb02 3301 	mlale	r3, r2, r1, r3
 8005f2c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8005f30:	f100 0001 	add.w	r0, r0, #1
 8005f34:	bfd4      	ite	le
 8005f36:	9306      	strle	r3, [sp, #24]
 8005f38:	9305      	strgt	r3, [sp, #20]
 8005f3a:	f10b 0b01 	add.w	fp, fp, #1
 8005f3e:	901b      	str	r0, [sp, #108]	; 0x6c
 8005f40:	e7bf      	b.n	8005ec2 <_strtod_l+0x152>
 8005f42:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005f44:	191a      	adds	r2, r3, r4
 8005f46:	921b      	str	r2, [sp, #108]	; 0x6c
 8005f48:	5d1b      	ldrb	r3, [r3, r4]
 8005f4a:	f1bb 0f00 	cmp.w	fp, #0
 8005f4e:	d036      	beq.n	8005fbe <_strtod_l+0x24e>
 8005f50:	465c      	mov	r4, fp
 8005f52:	9004      	str	r0, [sp, #16]
 8005f54:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005f58:	2a09      	cmp	r2, #9
 8005f5a:	d912      	bls.n	8005f82 <_strtod_l+0x212>
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	e7c2      	b.n	8005ee6 <_strtod_l+0x176>
 8005f60:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005f62:	3001      	adds	r0, #1
 8005f64:	1c5a      	adds	r2, r3, #1
 8005f66:	921b      	str	r2, [sp, #108]	; 0x6c
 8005f68:	785b      	ldrb	r3, [r3, #1]
 8005f6a:	2b30      	cmp	r3, #48	; 0x30
 8005f6c:	d0f8      	beq.n	8005f60 <_strtod_l+0x1f0>
 8005f6e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8005f72:	2a08      	cmp	r2, #8
 8005f74:	f200 84dc 	bhi.w	8006930 <_strtod_l+0xbc0>
 8005f78:	9004      	str	r0, [sp, #16]
 8005f7a:	2000      	movs	r0, #0
 8005f7c:	4604      	mov	r4, r0
 8005f7e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005f80:	9208      	str	r2, [sp, #32]
 8005f82:	3b30      	subs	r3, #48	; 0x30
 8005f84:	f100 0201 	add.w	r2, r0, #1
 8005f88:	d013      	beq.n	8005fb2 <_strtod_l+0x242>
 8005f8a:	9904      	ldr	r1, [sp, #16]
 8005f8c:	1905      	adds	r5, r0, r4
 8005f8e:	4411      	add	r1, r2
 8005f90:	9104      	str	r1, [sp, #16]
 8005f92:	4622      	mov	r2, r4
 8005f94:	210a      	movs	r1, #10
 8005f96:	42aa      	cmp	r2, r5
 8005f98:	d113      	bne.n	8005fc2 <_strtod_l+0x252>
 8005f9a:	1822      	adds	r2, r4, r0
 8005f9c:	2a08      	cmp	r2, #8
 8005f9e:	f104 0401 	add.w	r4, r4, #1
 8005fa2:	4404      	add	r4, r0
 8005fa4:	dc1b      	bgt.n	8005fde <_strtod_l+0x26e>
 8005fa6:	220a      	movs	r2, #10
 8005fa8:	9906      	ldr	r1, [sp, #24]
 8005faa:	fb02 3301 	mla	r3, r2, r1, r3
 8005fae:	9306      	str	r3, [sp, #24]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005fb4:	4610      	mov	r0, r2
 8005fb6:	1c59      	adds	r1, r3, #1
 8005fb8:	911b      	str	r1, [sp, #108]	; 0x6c
 8005fba:	785b      	ldrb	r3, [r3, #1]
 8005fbc:	e7ca      	b.n	8005f54 <_strtod_l+0x1e4>
 8005fbe:	4658      	mov	r0, fp
 8005fc0:	e7d3      	b.n	8005f6a <_strtod_l+0x1fa>
 8005fc2:	2a08      	cmp	r2, #8
 8005fc4:	dc04      	bgt.n	8005fd0 <_strtod_l+0x260>
 8005fc6:	9f06      	ldr	r7, [sp, #24]
 8005fc8:	434f      	muls	r7, r1
 8005fca:	9706      	str	r7, [sp, #24]
 8005fcc:	3201      	adds	r2, #1
 8005fce:	e7e2      	b.n	8005f96 <_strtod_l+0x226>
 8005fd0:	1c57      	adds	r7, r2, #1
 8005fd2:	2f10      	cmp	r7, #16
 8005fd4:	bfde      	ittt	le
 8005fd6:	9f05      	ldrle	r7, [sp, #20]
 8005fd8:	434f      	mulle	r7, r1
 8005fda:	9705      	strle	r7, [sp, #20]
 8005fdc:	e7f6      	b.n	8005fcc <_strtod_l+0x25c>
 8005fde:	2c10      	cmp	r4, #16
 8005fe0:	bfdf      	itttt	le
 8005fe2:	220a      	movle	r2, #10
 8005fe4:	9905      	ldrle	r1, [sp, #20]
 8005fe6:	fb02 3301 	mlale	r3, r2, r1, r3
 8005fea:	9305      	strle	r3, [sp, #20]
 8005fec:	e7e0      	b.n	8005fb0 <_strtod_l+0x240>
 8005fee:	2300      	movs	r3, #0
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	9304      	str	r3, [sp, #16]
 8005ff4:	e77c      	b.n	8005ef0 <_strtod_l+0x180>
 8005ff6:	2700      	movs	r7, #0
 8005ff8:	1cb3      	adds	r3, r6, #2
 8005ffa:	931b      	str	r3, [sp, #108]	; 0x6c
 8005ffc:	78b3      	ldrb	r3, [r6, #2]
 8005ffe:	e784      	b.n	8005f0a <_strtod_l+0x19a>
 8006000:	2701      	movs	r7, #1
 8006002:	e7f9      	b.n	8005ff8 <_strtod_l+0x288>
 8006004:	08009af0 	.word	0x08009af0
 8006008:	080098a0 	.word	0x080098a0
 800600c:	7ff00000 	.word	0x7ff00000
 8006010:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006012:	1c59      	adds	r1, r3, #1
 8006014:	911b      	str	r1, [sp, #108]	; 0x6c
 8006016:	785b      	ldrb	r3, [r3, #1]
 8006018:	2b30      	cmp	r3, #48	; 0x30
 800601a:	d0f9      	beq.n	8006010 <_strtod_l+0x2a0>
 800601c:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8006020:	2908      	cmp	r1, #8
 8006022:	f63f af78 	bhi.w	8005f16 <_strtod_l+0x1a6>
 8006026:	f04f 0e0a 	mov.w	lr, #10
 800602a:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 800602e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006030:	9309      	str	r3, [sp, #36]	; 0x24
 8006032:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006034:	1c59      	adds	r1, r3, #1
 8006036:	911b      	str	r1, [sp, #108]	; 0x6c
 8006038:	785b      	ldrb	r3, [r3, #1]
 800603a:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 800603e:	2d09      	cmp	r5, #9
 8006040:	d935      	bls.n	80060ae <_strtod_l+0x33e>
 8006042:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006044:	1b49      	subs	r1, r1, r5
 8006046:	2908      	cmp	r1, #8
 8006048:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800604c:	dc02      	bgt.n	8006054 <_strtod_l+0x2e4>
 800604e:	4565      	cmp	r5, ip
 8006050:	bfa8      	it	ge
 8006052:	4665      	movge	r5, ip
 8006054:	b107      	cbz	r7, 8006058 <_strtod_l+0x2e8>
 8006056:	426d      	negs	r5, r5
 8006058:	2c00      	cmp	r4, #0
 800605a:	d14c      	bne.n	80060f6 <_strtod_l+0x386>
 800605c:	9907      	ldr	r1, [sp, #28]
 800605e:	4301      	orrs	r1, r0
 8006060:	f47f aec7 	bne.w	8005df2 <_strtod_l+0x82>
 8006064:	2a00      	cmp	r2, #0
 8006066:	f47f aee0 	bne.w	8005e2a <_strtod_l+0xba>
 800606a:	2b69      	cmp	r3, #105	; 0x69
 800606c:	d026      	beq.n	80060bc <_strtod_l+0x34c>
 800606e:	dc23      	bgt.n	80060b8 <_strtod_l+0x348>
 8006070:	2b49      	cmp	r3, #73	; 0x49
 8006072:	d023      	beq.n	80060bc <_strtod_l+0x34c>
 8006074:	2b4e      	cmp	r3, #78	; 0x4e
 8006076:	f47f aed8 	bne.w	8005e2a <_strtod_l+0xba>
 800607a:	499c      	ldr	r1, [pc, #624]	; (80062ec <_strtod_l+0x57c>)
 800607c:	a81b      	add	r0, sp, #108	; 0x6c
 800607e:	f001 fe2b 	bl	8007cd8 <__match>
 8006082:	2800      	cmp	r0, #0
 8006084:	f43f aed1 	beq.w	8005e2a <_strtod_l+0xba>
 8006088:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	2b28      	cmp	r3, #40	; 0x28
 800608e:	d12c      	bne.n	80060ea <_strtod_l+0x37a>
 8006090:	4997      	ldr	r1, [pc, #604]	; (80062f0 <_strtod_l+0x580>)
 8006092:	aa1e      	add	r2, sp, #120	; 0x78
 8006094:	a81b      	add	r0, sp, #108	; 0x6c
 8006096:	f001 fe33 	bl	8007d00 <__hexnan>
 800609a:	2805      	cmp	r0, #5
 800609c:	d125      	bne.n	80060ea <_strtod_l+0x37a>
 800609e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80060a0:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 80060a4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80060a8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80060ac:	e6a1      	b.n	8005df2 <_strtod_l+0x82>
 80060ae:	fb0e 3c0c 	mla	ip, lr, ip, r3
 80060b2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80060b6:	e7bc      	b.n	8006032 <_strtod_l+0x2c2>
 80060b8:	2b6e      	cmp	r3, #110	; 0x6e
 80060ba:	e7dc      	b.n	8006076 <_strtod_l+0x306>
 80060bc:	498d      	ldr	r1, [pc, #564]	; (80062f4 <_strtod_l+0x584>)
 80060be:	a81b      	add	r0, sp, #108	; 0x6c
 80060c0:	f001 fe0a 	bl	8007cd8 <__match>
 80060c4:	2800      	cmp	r0, #0
 80060c6:	f43f aeb0 	beq.w	8005e2a <_strtod_l+0xba>
 80060ca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80060cc:	498a      	ldr	r1, [pc, #552]	; (80062f8 <_strtod_l+0x588>)
 80060ce:	3b01      	subs	r3, #1
 80060d0:	a81b      	add	r0, sp, #108	; 0x6c
 80060d2:	931b      	str	r3, [sp, #108]	; 0x6c
 80060d4:	f001 fe00 	bl	8007cd8 <__match>
 80060d8:	b910      	cbnz	r0, 80060e0 <_strtod_l+0x370>
 80060da:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80060dc:	3301      	adds	r3, #1
 80060de:	931b      	str	r3, [sp, #108]	; 0x6c
 80060e0:	f04f 0800 	mov.w	r8, #0
 80060e4:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8006308 <_strtod_l+0x598>
 80060e8:	e683      	b.n	8005df2 <_strtod_l+0x82>
 80060ea:	4884      	ldr	r0, [pc, #528]	; (80062fc <_strtod_l+0x58c>)
 80060ec:	f002 fda6 	bl	8008c3c <nan>
 80060f0:	4680      	mov	r8, r0
 80060f2:	4689      	mov	r9, r1
 80060f4:	e67d      	b.n	8005df2 <_strtod_l+0x82>
 80060f6:	9b04      	ldr	r3, [sp, #16]
 80060f8:	f1bb 0f00 	cmp.w	fp, #0
 80060fc:	bf08      	it	eq
 80060fe:	46a3      	moveq	fp, r4
 8006100:	1aeb      	subs	r3, r5, r3
 8006102:	2c10      	cmp	r4, #16
 8006104:	9806      	ldr	r0, [sp, #24]
 8006106:	4626      	mov	r6, r4
 8006108:	9307      	str	r3, [sp, #28]
 800610a:	bfa8      	it	ge
 800610c:	2610      	movge	r6, #16
 800610e:	f7fa f969 	bl	80003e4 <__aeabi_ui2d>
 8006112:	2c09      	cmp	r4, #9
 8006114:	4680      	mov	r8, r0
 8006116:	4689      	mov	r9, r1
 8006118:	dd13      	ble.n	8006142 <_strtod_l+0x3d2>
 800611a:	4b79      	ldr	r3, [pc, #484]	; (8006300 <_strtod_l+0x590>)
 800611c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006120:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006124:	f7fa f9d8 	bl	80004d8 <__aeabi_dmul>
 8006128:	4680      	mov	r8, r0
 800612a:	9805      	ldr	r0, [sp, #20]
 800612c:	4689      	mov	r9, r1
 800612e:	f7fa f959 	bl	80003e4 <__aeabi_ui2d>
 8006132:	4602      	mov	r2, r0
 8006134:	460b      	mov	r3, r1
 8006136:	4640      	mov	r0, r8
 8006138:	4649      	mov	r1, r9
 800613a:	f7fa f817 	bl	800016c <__adddf3>
 800613e:	4680      	mov	r8, r0
 8006140:	4689      	mov	r9, r1
 8006142:	2c0f      	cmp	r4, #15
 8006144:	dc36      	bgt.n	80061b4 <_strtod_l+0x444>
 8006146:	9b07      	ldr	r3, [sp, #28]
 8006148:	2b00      	cmp	r3, #0
 800614a:	f43f ae52 	beq.w	8005df2 <_strtod_l+0x82>
 800614e:	dd22      	ble.n	8006196 <_strtod_l+0x426>
 8006150:	2b16      	cmp	r3, #22
 8006152:	dc09      	bgt.n	8006168 <_strtod_l+0x3f8>
 8006154:	4c6a      	ldr	r4, [pc, #424]	; (8006300 <_strtod_l+0x590>)
 8006156:	4642      	mov	r2, r8
 8006158:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 800615c:	464b      	mov	r3, r9
 800615e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8006162:	f7fa f9b9 	bl	80004d8 <__aeabi_dmul>
 8006166:	e7c3      	b.n	80060f0 <_strtod_l+0x380>
 8006168:	9a07      	ldr	r2, [sp, #28]
 800616a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800616e:	4293      	cmp	r3, r2
 8006170:	db20      	blt.n	80061b4 <_strtod_l+0x444>
 8006172:	4d63      	ldr	r5, [pc, #396]	; (8006300 <_strtod_l+0x590>)
 8006174:	f1c4 040f 	rsb	r4, r4, #15
 8006178:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800617c:	4642      	mov	r2, r8
 800617e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006182:	464b      	mov	r3, r9
 8006184:	f7fa f9a8 	bl	80004d8 <__aeabi_dmul>
 8006188:	9b07      	ldr	r3, [sp, #28]
 800618a:	1b1c      	subs	r4, r3, r4
 800618c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8006190:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006194:	e7e5      	b.n	8006162 <_strtod_l+0x3f2>
 8006196:	9b07      	ldr	r3, [sp, #28]
 8006198:	3316      	adds	r3, #22
 800619a:	db0b      	blt.n	80061b4 <_strtod_l+0x444>
 800619c:	9b04      	ldr	r3, [sp, #16]
 800619e:	4a58      	ldr	r2, [pc, #352]	; (8006300 <_strtod_l+0x590>)
 80061a0:	1b5d      	subs	r5, r3, r5
 80061a2:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80061a6:	4640      	mov	r0, r8
 80061a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80061ac:	4649      	mov	r1, r9
 80061ae:	f7fa fabd 	bl	800072c <__aeabi_ddiv>
 80061b2:	e79d      	b.n	80060f0 <_strtod_l+0x380>
 80061b4:	9b07      	ldr	r3, [sp, #28]
 80061b6:	1ba6      	subs	r6, r4, r6
 80061b8:	441e      	add	r6, r3
 80061ba:	2e00      	cmp	r6, #0
 80061bc:	dd71      	ble.n	80062a2 <_strtod_l+0x532>
 80061be:	f016 030f 	ands.w	r3, r6, #15
 80061c2:	d00a      	beq.n	80061da <_strtod_l+0x46a>
 80061c4:	494e      	ldr	r1, [pc, #312]	; (8006300 <_strtod_l+0x590>)
 80061c6:	4642      	mov	r2, r8
 80061c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80061cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80061d0:	464b      	mov	r3, r9
 80061d2:	f7fa f981 	bl	80004d8 <__aeabi_dmul>
 80061d6:	4680      	mov	r8, r0
 80061d8:	4689      	mov	r9, r1
 80061da:	f036 060f 	bics.w	r6, r6, #15
 80061de:	d050      	beq.n	8006282 <_strtod_l+0x512>
 80061e0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80061e4:	dd27      	ble.n	8006236 <_strtod_l+0x4c6>
 80061e6:	f04f 0b00 	mov.w	fp, #0
 80061ea:	f8cd b010 	str.w	fp, [sp, #16]
 80061ee:	f8cd b020 	str.w	fp, [sp, #32]
 80061f2:	f8cd b018 	str.w	fp, [sp, #24]
 80061f6:	2322      	movs	r3, #34	; 0x22
 80061f8:	f04f 0800 	mov.w	r8, #0
 80061fc:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8006308 <_strtod_l+0x598>
 8006200:	f8ca 3000 	str.w	r3, [sl]
 8006204:	9b08      	ldr	r3, [sp, #32]
 8006206:	2b00      	cmp	r3, #0
 8006208:	f43f adf3 	beq.w	8005df2 <_strtod_l+0x82>
 800620c:	4650      	mov	r0, sl
 800620e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006210:	f001 fe8c 	bl	8007f2c <_Bfree>
 8006214:	4650      	mov	r0, sl
 8006216:	9906      	ldr	r1, [sp, #24]
 8006218:	f001 fe88 	bl	8007f2c <_Bfree>
 800621c:	4650      	mov	r0, sl
 800621e:	9904      	ldr	r1, [sp, #16]
 8006220:	f001 fe84 	bl	8007f2c <_Bfree>
 8006224:	4650      	mov	r0, sl
 8006226:	9908      	ldr	r1, [sp, #32]
 8006228:	f001 fe80 	bl	8007f2c <_Bfree>
 800622c:	4659      	mov	r1, fp
 800622e:	4650      	mov	r0, sl
 8006230:	f001 fe7c 	bl	8007f2c <_Bfree>
 8006234:	e5dd      	b.n	8005df2 <_strtod_l+0x82>
 8006236:	2300      	movs	r3, #0
 8006238:	4640      	mov	r0, r8
 800623a:	4649      	mov	r1, r9
 800623c:	461f      	mov	r7, r3
 800623e:	1136      	asrs	r6, r6, #4
 8006240:	2e01      	cmp	r6, #1
 8006242:	dc21      	bgt.n	8006288 <_strtod_l+0x518>
 8006244:	b10b      	cbz	r3, 800624a <_strtod_l+0x4da>
 8006246:	4680      	mov	r8, r0
 8006248:	4689      	mov	r9, r1
 800624a:	4b2e      	ldr	r3, [pc, #184]	; (8006304 <_strtod_l+0x594>)
 800624c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006250:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006254:	4642      	mov	r2, r8
 8006256:	e9d7 0100 	ldrd	r0, r1, [r7]
 800625a:	464b      	mov	r3, r9
 800625c:	f7fa f93c 	bl	80004d8 <__aeabi_dmul>
 8006260:	4b29      	ldr	r3, [pc, #164]	; (8006308 <_strtod_l+0x598>)
 8006262:	460a      	mov	r2, r1
 8006264:	400b      	ands	r3, r1
 8006266:	4929      	ldr	r1, [pc, #164]	; (800630c <_strtod_l+0x59c>)
 8006268:	4680      	mov	r8, r0
 800626a:	428b      	cmp	r3, r1
 800626c:	d8bb      	bhi.n	80061e6 <_strtod_l+0x476>
 800626e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006272:	428b      	cmp	r3, r1
 8006274:	bf86      	itte	hi
 8006276:	f04f 38ff 	movhi.w	r8, #4294967295
 800627a:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8006310 <_strtod_l+0x5a0>
 800627e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8006282:	2300      	movs	r3, #0
 8006284:	9305      	str	r3, [sp, #20]
 8006286:	e07e      	b.n	8006386 <_strtod_l+0x616>
 8006288:	07f2      	lsls	r2, r6, #31
 800628a:	d507      	bpl.n	800629c <_strtod_l+0x52c>
 800628c:	4b1d      	ldr	r3, [pc, #116]	; (8006304 <_strtod_l+0x594>)
 800628e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006296:	f7fa f91f 	bl	80004d8 <__aeabi_dmul>
 800629a:	2301      	movs	r3, #1
 800629c:	3701      	adds	r7, #1
 800629e:	1076      	asrs	r6, r6, #1
 80062a0:	e7ce      	b.n	8006240 <_strtod_l+0x4d0>
 80062a2:	d0ee      	beq.n	8006282 <_strtod_l+0x512>
 80062a4:	4276      	negs	r6, r6
 80062a6:	f016 020f 	ands.w	r2, r6, #15
 80062aa:	d00a      	beq.n	80062c2 <_strtod_l+0x552>
 80062ac:	4b14      	ldr	r3, [pc, #80]	; (8006300 <_strtod_l+0x590>)
 80062ae:	4640      	mov	r0, r8
 80062b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062b4:	4649      	mov	r1, r9
 80062b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ba:	f7fa fa37 	bl	800072c <__aeabi_ddiv>
 80062be:	4680      	mov	r8, r0
 80062c0:	4689      	mov	r9, r1
 80062c2:	1136      	asrs	r6, r6, #4
 80062c4:	d0dd      	beq.n	8006282 <_strtod_l+0x512>
 80062c6:	2e1f      	cmp	r6, #31
 80062c8:	dd24      	ble.n	8006314 <_strtod_l+0x5a4>
 80062ca:	f04f 0b00 	mov.w	fp, #0
 80062ce:	f8cd b010 	str.w	fp, [sp, #16]
 80062d2:	f8cd b020 	str.w	fp, [sp, #32]
 80062d6:	f8cd b018 	str.w	fp, [sp, #24]
 80062da:	2322      	movs	r3, #34	; 0x22
 80062dc:	f04f 0800 	mov.w	r8, #0
 80062e0:	f04f 0900 	mov.w	r9, #0
 80062e4:	f8ca 3000 	str.w	r3, [sl]
 80062e8:	e78c      	b.n	8006204 <_strtod_l+0x494>
 80062ea:	bf00      	nop
 80062ec:	08009871 	.word	0x08009871
 80062f0:	080098b4 	.word	0x080098b4
 80062f4:	08009869 	.word	0x08009869
 80062f8:	080099f4 	.word	0x080099f4
 80062fc:	08009cb0 	.word	0x08009cb0
 8006300:	08009b90 	.word	0x08009b90
 8006304:	08009b68 	.word	0x08009b68
 8006308:	7ff00000 	.word	0x7ff00000
 800630c:	7ca00000 	.word	0x7ca00000
 8006310:	7fefffff 	.word	0x7fefffff
 8006314:	f016 0310 	ands.w	r3, r6, #16
 8006318:	bf18      	it	ne
 800631a:	236a      	movne	r3, #106	; 0x6a
 800631c:	4640      	mov	r0, r8
 800631e:	9305      	str	r3, [sp, #20]
 8006320:	4649      	mov	r1, r9
 8006322:	2300      	movs	r3, #0
 8006324:	4fb2      	ldr	r7, [pc, #712]	; (80065f0 <_strtod_l+0x880>)
 8006326:	07f2      	lsls	r2, r6, #31
 8006328:	d504      	bpl.n	8006334 <_strtod_l+0x5c4>
 800632a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800632e:	f7fa f8d3 	bl	80004d8 <__aeabi_dmul>
 8006332:	2301      	movs	r3, #1
 8006334:	1076      	asrs	r6, r6, #1
 8006336:	f107 0708 	add.w	r7, r7, #8
 800633a:	d1f4      	bne.n	8006326 <_strtod_l+0x5b6>
 800633c:	b10b      	cbz	r3, 8006342 <_strtod_l+0x5d2>
 800633e:	4680      	mov	r8, r0
 8006340:	4689      	mov	r9, r1
 8006342:	9b05      	ldr	r3, [sp, #20]
 8006344:	b1bb      	cbz	r3, 8006376 <_strtod_l+0x606>
 8006346:	f3c9 530a 	ubfx	r3, r9, #20, #11
 800634a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800634e:	2b00      	cmp	r3, #0
 8006350:	4649      	mov	r1, r9
 8006352:	dd10      	ble.n	8006376 <_strtod_l+0x606>
 8006354:	2b1f      	cmp	r3, #31
 8006356:	f340 812b 	ble.w	80065b0 <_strtod_l+0x840>
 800635a:	2b34      	cmp	r3, #52	; 0x34
 800635c:	bfd8      	it	le
 800635e:	f04f 32ff 	movle.w	r2, #4294967295
 8006362:	f04f 0800 	mov.w	r8, #0
 8006366:	bfcf      	iteee	gt
 8006368:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800636c:	3b20      	suble	r3, #32
 800636e:	fa02 f303 	lslle.w	r3, r2, r3
 8006372:	ea03 0901 	andle.w	r9, r3, r1
 8006376:	2200      	movs	r2, #0
 8006378:	2300      	movs	r3, #0
 800637a:	4640      	mov	r0, r8
 800637c:	4649      	mov	r1, r9
 800637e:	f7fa fb13 	bl	80009a8 <__aeabi_dcmpeq>
 8006382:	2800      	cmp	r0, #0
 8006384:	d1a1      	bne.n	80062ca <_strtod_l+0x55a>
 8006386:	9b06      	ldr	r3, [sp, #24]
 8006388:	465a      	mov	r2, fp
 800638a:	9300      	str	r3, [sp, #0]
 800638c:	4650      	mov	r0, sl
 800638e:	4623      	mov	r3, r4
 8006390:	9908      	ldr	r1, [sp, #32]
 8006392:	f001 fe37 	bl	8008004 <__s2b>
 8006396:	9008      	str	r0, [sp, #32]
 8006398:	2800      	cmp	r0, #0
 800639a:	f43f af24 	beq.w	80061e6 <_strtod_l+0x476>
 800639e:	9b04      	ldr	r3, [sp, #16]
 80063a0:	f04f 0b00 	mov.w	fp, #0
 80063a4:	1b5d      	subs	r5, r3, r5
 80063a6:	9b07      	ldr	r3, [sp, #28]
 80063a8:	f8cd b010 	str.w	fp, [sp, #16]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	bfb4      	ite	lt
 80063b0:	462b      	movlt	r3, r5
 80063b2:	2300      	movge	r3, #0
 80063b4:	930e      	str	r3, [sp, #56]	; 0x38
 80063b6:	9b07      	ldr	r3, [sp, #28]
 80063b8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80063bc:	9316      	str	r3, [sp, #88]	; 0x58
 80063be:	9b08      	ldr	r3, [sp, #32]
 80063c0:	4650      	mov	r0, sl
 80063c2:	6859      	ldr	r1, [r3, #4]
 80063c4:	f001 fd72 	bl	8007eac <_Balloc>
 80063c8:	9006      	str	r0, [sp, #24]
 80063ca:	2800      	cmp	r0, #0
 80063cc:	f43f af13 	beq.w	80061f6 <_strtod_l+0x486>
 80063d0:	9b08      	ldr	r3, [sp, #32]
 80063d2:	300c      	adds	r0, #12
 80063d4:	691a      	ldr	r2, [r3, #16]
 80063d6:	f103 010c 	add.w	r1, r3, #12
 80063da:	3202      	adds	r2, #2
 80063dc:	0092      	lsls	r2, r2, #2
 80063de:	f001 fd57 	bl	8007e90 <memcpy>
 80063e2:	ab1e      	add	r3, sp, #120	; 0x78
 80063e4:	9301      	str	r3, [sp, #4]
 80063e6:	ab1d      	add	r3, sp, #116	; 0x74
 80063e8:	9300      	str	r3, [sp, #0]
 80063ea:	4642      	mov	r2, r8
 80063ec:	464b      	mov	r3, r9
 80063ee:	4650      	mov	r0, sl
 80063f0:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 80063f4:	f002 f944 	bl	8008680 <__d2b>
 80063f8:	901c      	str	r0, [sp, #112]	; 0x70
 80063fa:	2800      	cmp	r0, #0
 80063fc:	f43f aefb 	beq.w	80061f6 <_strtod_l+0x486>
 8006400:	2101      	movs	r1, #1
 8006402:	4650      	mov	r0, sl
 8006404:	f001 fe96 	bl	8008134 <__i2b>
 8006408:	4603      	mov	r3, r0
 800640a:	9004      	str	r0, [sp, #16]
 800640c:	2800      	cmp	r0, #0
 800640e:	f43f aef2 	beq.w	80061f6 <_strtod_l+0x486>
 8006412:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8006414:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006416:	2d00      	cmp	r5, #0
 8006418:	bfab      	itete	ge
 800641a:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800641c:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800641e:	18ee      	addge	r6, r5, r3
 8006420:	1b5c      	sublt	r4, r3, r5
 8006422:	9b05      	ldr	r3, [sp, #20]
 8006424:	bfa8      	it	ge
 8006426:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8006428:	eba5 0503 	sub.w	r5, r5, r3
 800642c:	4415      	add	r5, r2
 800642e:	4b71      	ldr	r3, [pc, #452]	; (80065f4 <_strtod_l+0x884>)
 8006430:	f105 35ff 	add.w	r5, r5, #4294967295
 8006434:	bfb8      	it	lt
 8006436:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8006438:	429d      	cmp	r5, r3
 800643a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800643e:	f280 80c9 	bge.w	80065d4 <_strtod_l+0x864>
 8006442:	1b5b      	subs	r3, r3, r5
 8006444:	2b1f      	cmp	r3, #31
 8006446:	f04f 0701 	mov.w	r7, #1
 800644a:	eba2 0203 	sub.w	r2, r2, r3
 800644e:	f300 80b6 	bgt.w	80065be <_strtod_l+0x84e>
 8006452:	2500      	movs	r5, #0
 8006454:	fa07 f303 	lsl.w	r3, r7, r3
 8006458:	930f      	str	r3, [sp, #60]	; 0x3c
 800645a:	18b7      	adds	r7, r6, r2
 800645c:	9b05      	ldr	r3, [sp, #20]
 800645e:	42be      	cmp	r6, r7
 8006460:	4414      	add	r4, r2
 8006462:	441c      	add	r4, r3
 8006464:	4633      	mov	r3, r6
 8006466:	bfa8      	it	ge
 8006468:	463b      	movge	r3, r7
 800646a:	42a3      	cmp	r3, r4
 800646c:	bfa8      	it	ge
 800646e:	4623      	movge	r3, r4
 8006470:	2b00      	cmp	r3, #0
 8006472:	bfc2      	ittt	gt
 8006474:	1aff      	subgt	r7, r7, r3
 8006476:	1ae4      	subgt	r4, r4, r3
 8006478:	1af6      	subgt	r6, r6, r3
 800647a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800647c:	2b00      	cmp	r3, #0
 800647e:	dd17      	ble.n	80064b0 <_strtod_l+0x740>
 8006480:	461a      	mov	r2, r3
 8006482:	4650      	mov	r0, sl
 8006484:	9904      	ldr	r1, [sp, #16]
 8006486:	f001 ff0f 	bl	80082a8 <__pow5mult>
 800648a:	9004      	str	r0, [sp, #16]
 800648c:	2800      	cmp	r0, #0
 800648e:	f43f aeb2 	beq.w	80061f6 <_strtod_l+0x486>
 8006492:	4601      	mov	r1, r0
 8006494:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006496:	4650      	mov	r0, sl
 8006498:	f001 fe62 	bl	8008160 <__multiply>
 800649c:	9009      	str	r0, [sp, #36]	; 0x24
 800649e:	2800      	cmp	r0, #0
 80064a0:	f43f aea9 	beq.w	80061f6 <_strtod_l+0x486>
 80064a4:	4650      	mov	r0, sl
 80064a6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80064a8:	f001 fd40 	bl	8007f2c <_Bfree>
 80064ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064ae:	931c      	str	r3, [sp, #112]	; 0x70
 80064b0:	2f00      	cmp	r7, #0
 80064b2:	f300 8093 	bgt.w	80065dc <_strtod_l+0x86c>
 80064b6:	9b07      	ldr	r3, [sp, #28]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	dd08      	ble.n	80064ce <_strtod_l+0x75e>
 80064bc:	4650      	mov	r0, sl
 80064be:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80064c0:	9906      	ldr	r1, [sp, #24]
 80064c2:	f001 fef1 	bl	80082a8 <__pow5mult>
 80064c6:	9006      	str	r0, [sp, #24]
 80064c8:	2800      	cmp	r0, #0
 80064ca:	f43f ae94 	beq.w	80061f6 <_strtod_l+0x486>
 80064ce:	2c00      	cmp	r4, #0
 80064d0:	dd08      	ble.n	80064e4 <_strtod_l+0x774>
 80064d2:	4622      	mov	r2, r4
 80064d4:	4650      	mov	r0, sl
 80064d6:	9906      	ldr	r1, [sp, #24]
 80064d8:	f001 ff40 	bl	800835c <__lshift>
 80064dc:	9006      	str	r0, [sp, #24]
 80064de:	2800      	cmp	r0, #0
 80064e0:	f43f ae89 	beq.w	80061f6 <_strtod_l+0x486>
 80064e4:	2e00      	cmp	r6, #0
 80064e6:	dd08      	ble.n	80064fa <_strtod_l+0x78a>
 80064e8:	4632      	mov	r2, r6
 80064ea:	4650      	mov	r0, sl
 80064ec:	9904      	ldr	r1, [sp, #16]
 80064ee:	f001 ff35 	bl	800835c <__lshift>
 80064f2:	9004      	str	r0, [sp, #16]
 80064f4:	2800      	cmp	r0, #0
 80064f6:	f43f ae7e 	beq.w	80061f6 <_strtod_l+0x486>
 80064fa:	4650      	mov	r0, sl
 80064fc:	9a06      	ldr	r2, [sp, #24]
 80064fe:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006500:	f001 ffb4 	bl	800846c <__mdiff>
 8006504:	4683      	mov	fp, r0
 8006506:	2800      	cmp	r0, #0
 8006508:	f43f ae75 	beq.w	80061f6 <_strtod_l+0x486>
 800650c:	2400      	movs	r4, #0
 800650e:	68c3      	ldr	r3, [r0, #12]
 8006510:	9904      	ldr	r1, [sp, #16]
 8006512:	60c4      	str	r4, [r0, #12]
 8006514:	930d      	str	r3, [sp, #52]	; 0x34
 8006516:	f001 ff8d 	bl	8008434 <__mcmp>
 800651a:	42a0      	cmp	r0, r4
 800651c:	da70      	bge.n	8006600 <_strtod_l+0x890>
 800651e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006520:	ea53 0308 	orrs.w	r3, r3, r8
 8006524:	f040 8096 	bne.w	8006654 <_strtod_l+0x8e4>
 8006528:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800652c:	2b00      	cmp	r3, #0
 800652e:	f040 8091 	bne.w	8006654 <_strtod_l+0x8e4>
 8006532:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006536:	0d1b      	lsrs	r3, r3, #20
 8006538:	051b      	lsls	r3, r3, #20
 800653a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800653e:	f240 8089 	bls.w	8006654 <_strtod_l+0x8e4>
 8006542:	f8db 3014 	ldr.w	r3, [fp, #20]
 8006546:	b923      	cbnz	r3, 8006552 <_strtod_l+0x7e2>
 8006548:	f8db 3010 	ldr.w	r3, [fp, #16]
 800654c:	2b01      	cmp	r3, #1
 800654e:	f340 8081 	ble.w	8006654 <_strtod_l+0x8e4>
 8006552:	4659      	mov	r1, fp
 8006554:	2201      	movs	r2, #1
 8006556:	4650      	mov	r0, sl
 8006558:	f001 ff00 	bl	800835c <__lshift>
 800655c:	9904      	ldr	r1, [sp, #16]
 800655e:	4683      	mov	fp, r0
 8006560:	f001 ff68 	bl	8008434 <__mcmp>
 8006564:	2800      	cmp	r0, #0
 8006566:	dd75      	ble.n	8006654 <_strtod_l+0x8e4>
 8006568:	9905      	ldr	r1, [sp, #20]
 800656a:	464b      	mov	r3, r9
 800656c:	4a22      	ldr	r2, [pc, #136]	; (80065f8 <_strtod_l+0x888>)
 800656e:	2900      	cmp	r1, #0
 8006570:	f000 8091 	beq.w	8006696 <_strtod_l+0x926>
 8006574:	ea02 0109 	and.w	r1, r2, r9
 8006578:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800657c:	f300 808b 	bgt.w	8006696 <_strtod_l+0x926>
 8006580:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006584:	f77f aea9 	ble.w	80062da <_strtod_l+0x56a>
 8006588:	2300      	movs	r3, #0
 800658a:	4a1c      	ldr	r2, [pc, #112]	; (80065fc <_strtod_l+0x88c>)
 800658c:	4640      	mov	r0, r8
 800658e:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8006592:	4649      	mov	r1, r9
 8006594:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006598:	f7f9 ff9e 	bl	80004d8 <__aeabi_dmul>
 800659c:	460b      	mov	r3, r1
 800659e:	4303      	orrs	r3, r0
 80065a0:	bf08      	it	eq
 80065a2:	2322      	moveq	r3, #34	; 0x22
 80065a4:	4680      	mov	r8, r0
 80065a6:	4689      	mov	r9, r1
 80065a8:	bf08      	it	eq
 80065aa:	f8ca 3000 	streq.w	r3, [sl]
 80065ae:	e62d      	b.n	800620c <_strtod_l+0x49c>
 80065b0:	f04f 32ff 	mov.w	r2, #4294967295
 80065b4:	fa02 f303 	lsl.w	r3, r2, r3
 80065b8:	ea03 0808 	and.w	r8, r3, r8
 80065bc:	e6db      	b.n	8006376 <_strtod_l+0x606>
 80065be:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80065c2:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80065c6:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80065ca:	35e2      	adds	r5, #226	; 0xe2
 80065cc:	fa07 f505 	lsl.w	r5, r7, r5
 80065d0:	970f      	str	r7, [sp, #60]	; 0x3c
 80065d2:	e742      	b.n	800645a <_strtod_l+0x6ea>
 80065d4:	2301      	movs	r3, #1
 80065d6:	2500      	movs	r5, #0
 80065d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80065da:	e73e      	b.n	800645a <_strtod_l+0x6ea>
 80065dc:	463a      	mov	r2, r7
 80065de:	4650      	mov	r0, sl
 80065e0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80065e2:	f001 febb 	bl	800835c <__lshift>
 80065e6:	901c      	str	r0, [sp, #112]	; 0x70
 80065e8:	2800      	cmp	r0, #0
 80065ea:	f47f af64 	bne.w	80064b6 <_strtod_l+0x746>
 80065ee:	e602      	b.n	80061f6 <_strtod_l+0x486>
 80065f0:	080098c8 	.word	0x080098c8
 80065f4:	fffffc02 	.word	0xfffffc02
 80065f8:	7ff00000 	.word	0x7ff00000
 80065fc:	39500000 	.word	0x39500000
 8006600:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006604:	d166      	bne.n	80066d4 <_strtod_l+0x964>
 8006606:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006608:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800660c:	b35a      	cbz	r2, 8006666 <_strtod_l+0x8f6>
 800660e:	4a9c      	ldr	r2, [pc, #624]	; (8006880 <_strtod_l+0xb10>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d12c      	bne.n	800666e <_strtod_l+0x8fe>
 8006614:	9b05      	ldr	r3, [sp, #20]
 8006616:	4640      	mov	r0, r8
 8006618:	b303      	cbz	r3, 800665c <_strtod_l+0x8ec>
 800661a:	464b      	mov	r3, r9
 800661c:	4a99      	ldr	r2, [pc, #612]	; (8006884 <_strtod_l+0xb14>)
 800661e:	f04f 31ff 	mov.w	r1, #4294967295
 8006622:	401a      	ands	r2, r3
 8006624:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8006628:	d81b      	bhi.n	8006662 <_strtod_l+0x8f2>
 800662a:	0d12      	lsrs	r2, r2, #20
 800662c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006630:	fa01 f303 	lsl.w	r3, r1, r3
 8006634:	4298      	cmp	r0, r3
 8006636:	d11a      	bne.n	800666e <_strtod_l+0x8fe>
 8006638:	4b93      	ldr	r3, [pc, #588]	; (8006888 <_strtod_l+0xb18>)
 800663a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800663c:	429a      	cmp	r2, r3
 800663e:	d102      	bne.n	8006646 <_strtod_l+0x8d6>
 8006640:	3001      	adds	r0, #1
 8006642:	f43f add8 	beq.w	80061f6 <_strtod_l+0x486>
 8006646:	f04f 0800 	mov.w	r8, #0
 800664a:	4b8e      	ldr	r3, [pc, #568]	; (8006884 <_strtod_l+0xb14>)
 800664c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800664e:	401a      	ands	r2, r3
 8006650:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8006654:	9b05      	ldr	r3, [sp, #20]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d196      	bne.n	8006588 <_strtod_l+0x818>
 800665a:	e5d7      	b.n	800620c <_strtod_l+0x49c>
 800665c:	f04f 33ff 	mov.w	r3, #4294967295
 8006660:	e7e8      	b.n	8006634 <_strtod_l+0x8c4>
 8006662:	460b      	mov	r3, r1
 8006664:	e7e6      	b.n	8006634 <_strtod_l+0x8c4>
 8006666:	ea53 0308 	orrs.w	r3, r3, r8
 800666a:	f43f af7d 	beq.w	8006568 <_strtod_l+0x7f8>
 800666e:	b1e5      	cbz	r5, 80066aa <_strtod_l+0x93a>
 8006670:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006672:	421d      	tst	r5, r3
 8006674:	d0ee      	beq.n	8006654 <_strtod_l+0x8e4>
 8006676:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006678:	4640      	mov	r0, r8
 800667a:	4649      	mov	r1, r9
 800667c:	9a05      	ldr	r2, [sp, #20]
 800667e:	b1c3      	cbz	r3, 80066b2 <_strtod_l+0x942>
 8006680:	f7ff fb54 	bl	8005d2c <sulp>
 8006684:	4602      	mov	r2, r0
 8006686:	460b      	mov	r3, r1
 8006688:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800668c:	f7f9 fd6e 	bl	800016c <__adddf3>
 8006690:	4680      	mov	r8, r0
 8006692:	4689      	mov	r9, r1
 8006694:	e7de      	b.n	8006654 <_strtod_l+0x8e4>
 8006696:	4013      	ands	r3, r2
 8006698:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800669c:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80066a0:	f04f 38ff 	mov.w	r8, #4294967295
 80066a4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80066a8:	e7d4      	b.n	8006654 <_strtod_l+0x8e4>
 80066aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80066ac:	ea13 0f08 	tst.w	r3, r8
 80066b0:	e7e0      	b.n	8006674 <_strtod_l+0x904>
 80066b2:	f7ff fb3b 	bl	8005d2c <sulp>
 80066b6:	4602      	mov	r2, r0
 80066b8:	460b      	mov	r3, r1
 80066ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80066be:	f7f9 fd53 	bl	8000168 <__aeabi_dsub>
 80066c2:	2200      	movs	r2, #0
 80066c4:	2300      	movs	r3, #0
 80066c6:	4680      	mov	r8, r0
 80066c8:	4689      	mov	r9, r1
 80066ca:	f7fa f96d 	bl	80009a8 <__aeabi_dcmpeq>
 80066ce:	2800      	cmp	r0, #0
 80066d0:	d0c0      	beq.n	8006654 <_strtod_l+0x8e4>
 80066d2:	e602      	b.n	80062da <_strtod_l+0x56a>
 80066d4:	4658      	mov	r0, fp
 80066d6:	9904      	ldr	r1, [sp, #16]
 80066d8:	f002 f82e 	bl	8008738 <__ratio>
 80066dc:	2200      	movs	r2, #0
 80066de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80066e2:	4606      	mov	r6, r0
 80066e4:	460f      	mov	r7, r1
 80066e6:	f7fa f973 	bl	80009d0 <__aeabi_dcmple>
 80066ea:	2800      	cmp	r0, #0
 80066ec:	d075      	beq.n	80067da <_strtod_l+0xa6a>
 80066ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d047      	beq.n	8006784 <_strtod_l+0xa14>
 80066f4:	2600      	movs	r6, #0
 80066f6:	4f65      	ldr	r7, [pc, #404]	; (800688c <_strtod_l+0xb1c>)
 80066f8:	4d64      	ldr	r5, [pc, #400]	; (800688c <_strtod_l+0xb1c>)
 80066fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006700:	0d1b      	lsrs	r3, r3, #20
 8006702:	051b      	lsls	r3, r3, #20
 8006704:	930f      	str	r3, [sp, #60]	; 0x3c
 8006706:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006708:	4b61      	ldr	r3, [pc, #388]	; (8006890 <_strtod_l+0xb20>)
 800670a:	429a      	cmp	r2, r3
 800670c:	f040 80c8 	bne.w	80068a0 <_strtod_l+0xb30>
 8006710:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006714:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8006718:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800671a:	4640      	mov	r0, r8
 800671c:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8006720:	4649      	mov	r1, r9
 8006722:	f001 ff33 	bl	800858c <__ulp>
 8006726:	4602      	mov	r2, r0
 8006728:	460b      	mov	r3, r1
 800672a:	4630      	mov	r0, r6
 800672c:	4639      	mov	r1, r7
 800672e:	f7f9 fed3 	bl	80004d8 <__aeabi_dmul>
 8006732:	4642      	mov	r2, r8
 8006734:	464b      	mov	r3, r9
 8006736:	f7f9 fd19 	bl	800016c <__adddf3>
 800673a:	460b      	mov	r3, r1
 800673c:	4951      	ldr	r1, [pc, #324]	; (8006884 <_strtod_l+0xb14>)
 800673e:	4a55      	ldr	r2, [pc, #340]	; (8006894 <_strtod_l+0xb24>)
 8006740:	4019      	ands	r1, r3
 8006742:	4291      	cmp	r1, r2
 8006744:	4680      	mov	r8, r0
 8006746:	d95e      	bls.n	8006806 <_strtod_l+0xa96>
 8006748:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800674a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800674e:	4293      	cmp	r3, r2
 8006750:	d103      	bne.n	800675a <_strtod_l+0x9ea>
 8006752:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006754:	3301      	adds	r3, #1
 8006756:	f43f ad4e 	beq.w	80061f6 <_strtod_l+0x486>
 800675a:	f04f 38ff 	mov.w	r8, #4294967295
 800675e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8006888 <_strtod_l+0xb18>
 8006762:	4650      	mov	r0, sl
 8006764:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006766:	f001 fbe1 	bl	8007f2c <_Bfree>
 800676a:	4650      	mov	r0, sl
 800676c:	9906      	ldr	r1, [sp, #24]
 800676e:	f001 fbdd 	bl	8007f2c <_Bfree>
 8006772:	4650      	mov	r0, sl
 8006774:	9904      	ldr	r1, [sp, #16]
 8006776:	f001 fbd9 	bl	8007f2c <_Bfree>
 800677a:	4659      	mov	r1, fp
 800677c:	4650      	mov	r0, sl
 800677e:	f001 fbd5 	bl	8007f2c <_Bfree>
 8006782:	e61c      	b.n	80063be <_strtod_l+0x64e>
 8006784:	f1b8 0f00 	cmp.w	r8, #0
 8006788:	d119      	bne.n	80067be <_strtod_l+0xa4e>
 800678a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800678c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006790:	b9e3      	cbnz	r3, 80067cc <_strtod_l+0xa5c>
 8006792:	2200      	movs	r2, #0
 8006794:	4630      	mov	r0, r6
 8006796:	4639      	mov	r1, r7
 8006798:	4b3c      	ldr	r3, [pc, #240]	; (800688c <_strtod_l+0xb1c>)
 800679a:	f7fa f90f 	bl	80009bc <__aeabi_dcmplt>
 800679e:	b9c8      	cbnz	r0, 80067d4 <_strtod_l+0xa64>
 80067a0:	2200      	movs	r2, #0
 80067a2:	4630      	mov	r0, r6
 80067a4:	4639      	mov	r1, r7
 80067a6:	4b3c      	ldr	r3, [pc, #240]	; (8006898 <_strtod_l+0xb28>)
 80067a8:	f7f9 fe96 	bl	80004d8 <__aeabi_dmul>
 80067ac:	4604      	mov	r4, r0
 80067ae:	460d      	mov	r5, r1
 80067b0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80067b4:	9418      	str	r4, [sp, #96]	; 0x60
 80067b6:	9319      	str	r3, [sp, #100]	; 0x64
 80067b8:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 80067bc:	e79d      	b.n	80066fa <_strtod_l+0x98a>
 80067be:	f1b8 0f01 	cmp.w	r8, #1
 80067c2:	d103      	bne.n	80067cc <_strtod_l+0xa5c>
 80067c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	f43f ad87 	beq.w	80062da <_strtod_l+0x56a>
 80067cc:	2600      	movs	r6, #0
 80067ce:	2400      	movs	r4, #0
 80067d0:	4f32      	ldr	r7, [pc, #200]	; (800689c <_strtod_l+0xb2c>)
 80067d2:	e791      	b.n	80066f8 <_strtod_l+0x988>
 80067d4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80067d6:	4d30      	ldr	r5, [pc, #192]	; (8006898 <_strtod_l+0xb28>)
 80067d8:	e7ea      	b.n	80067b0 <_strtod_l+0xa40>
 80067da:	4b2f      	ldr	r3, [pc, #188]	; (8006898 <_strtod_l+0xb28>)
 80067dc:	2200      	movs	r2, #0
 80067de:	4630      	mov	r0, r6
 80067e0:	4639      	mov	r1, r7
 80067e2:	f7f9 fe79 	bl	80004d8 <__aeabi_dmul>
 80067e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067e8:	4604      	mov	r4, r0
 80067ea:	460d      	mov	r5, r1
 80067ec:	b933      	cbnz	r3, 80067fc <_strtod_l+0xa8c>
 80067ee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80067f2:	9010      	str	r0, [sp, #64]	; 0x40
 80067f4:	9311      	str	r3, [sp, #68]	; 0x44
 80067f6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80067fa:	e77e      	b.n	80066fa <_strtod_l+0x98a>
 80067fc:	4602      	mov	r2, r0
 80067fe:	460b      	mov	r3, r1
 8006800:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006804:	e7f7      	b.n	80067f6 <_strtod_l+0xa86>
 8006806:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800680a:	9b05      	ldr	r3, [sp, #20]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d1a8      	bne.n	8006762 <_strtod_l+0x9f2>
 8006810:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006814:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006816:	0d1b      	lsrs	r3, r3, #20
 8006818:	051b      	lsls	r3, r3, #20
 800681a:	429a      	cmp	r2, r3
 800681c:	d1a1      	bne.n	8006762 <_strtod_l+0x9f2>
 800681e:	4620      	mov	r0, r4
 8006820:	4629      	mov	r1, r5
 8006822:	f7fa faaf 	bl	8000d84 <__aeabi_d2lz>
 8006826:	f7f9 fe29 	bl	800047c <__aeabi_l2d>
 800682a:	4602      	mov	r2, r0
 800682c:	460b      	mov	r3, r1
 800682e:	4620      	mov	r0, r4
 8006830:	4629      	mov	r1, r5
 8006832:	f7f9 fc99 	bl	8000168 <__aeabi_dsub>
 8006836:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006838:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800683c:	ea43 0308 	orr.w	r3, r3, r8
 8006840:	4313      	orrs	r3, r2
 8006842:	4604      	mov	r4, r0
 8006844:	460d      	mov	r5, r1
 8006846:	d066      	beq.n	8006916 <_strtod_l+0xba6>
 8006848:	a309      	add	r3, pc, #36	; (adr r3, 8006870 <_strtod_l+0xb00>)
 800684a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800684e:	f7fa f8b5 	bl	80009bc <__aeabi_dcmplt>
 8006852:	2800      	cmp	r0, #0
 8006854:	f47f acda 	bne.w	800620c <_strtod_l+0x49c>
 8006858:	a307      	add	r3, pc, #28	; (adr r3, 8006878 <_strtod_l+0xb08>)
 800685a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800685e:	4620      	mov	r0, r4
 8006860:	4629      	mov	r1, r5
 8006862:	f7fa f8c9 	bl	80009f8 <__aeabi_dcmpgt>
 8006866:	2800      	cmp	r0, #0
 8006868:	f43f af7b 	beq.w	8006762 <_strtod_l+0x9f2>
 800686c:	e4ce      	b.n	800620c <_strtod_l+0x49c>
 800686e:	bf00      	nop
 8006870:	94a03595 	.word	0x94a03595
 8006874:	3fdfffff 	.word	0x3fdfffff
 8006878:	35afe535 	.word	0x35afe535
 800687c:	3fe00000 	.word	0x3fe00000
 8006880:	000fffff 	.word	0x000fffff
 8006884:	7ff00000 	.word	0x7ff00000
 8006888:	7fefffff 	.word	0x7fefffff
 800688c:	3ff00000 	.word	0x3ff00000
 8006890:	7fe00000 	.word	0x7fe00000
 8006894:	7c9fffff 	.word	0x7c9fffff
 8006898:	3fe00000 	.word	0x3fe00000
 800689c:	bff00000 	.word	0xbff00000
 80068a0:	9b05      	ldr	r3, [sp, #20]
 80068a2:	b313      	cbz	r3, 80068ea <_strtod_l+0xb7a>
 80068a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80068a6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80068aa:	d81e      	bhi.n	80068ea <_strtod_l+0xb7a>
 80068ac:	a326      	add	r3, pc, #152	; (adr r3, 8006948 <_strtod_l+0xbd8>)
 80068ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b2:	4620      	mov	r0, r4
 80068b4:	4629      	mov	r1, r5
 80068b6:	f7fa f88b 	bl	80009d0 <__aeabi_dcmple>
 80068ba:	b190      	cbz	r0, 80068e2 <_strtod_l+0xb72>
 80068bc:	4629      	mov	r1, r5
 80068be:	4620      	mov	r0, r4
 80068c0:	f7fa f8e2 	bl	8000a88 <__aeabi_d2uiz>
 80068c4:	2801      	cmp	r0, #1
 80068c6:	bf38      	it	cc
 80068c8:	2001      	movcc	r0, #1
 80068ca:	f7f9 fd8b 	bl	80003e4 <__aeabi_ui2d>
 80068ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80068d0:	4604      	mov	r4, r0
 80068d2:	460d      	mov	r5, r1
 80068d4:	b9d3      	cbnz	r3, 800690c <_strtod_l+0xb9c>
 80068d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80068da:	9012      	str	r0, [sp, #72]	; 0x48
 80068dc:	9313      	str	r3, [sp, #76]	; 0x4c
 80068de:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80068e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80068e4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80068e8:	1a9f      	subs	r7, r3, r2
 80068ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80068ee:	f001 fe4d 	bl	800858c <__ulp>
 80068f2:	4602      	mov	r2, r0
 80068f4:	460b      	mov	r3, r1
 80068f6:	4630      	mov	r0, r6
 80068f8:	4639      	mov	r1, r7
 80068fa:	f7f9 fded 	bl	80004d8 <__aeabi_dmul>
 80068fe:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006902:	f7f9 fc33 	bl	800016c <__adddf3>
 8006906:	4680      	mov	r8, r0
 8006908:	4689      	mov	r9, r1
 800690a:	e77e      	b.n	800680a <_strtod_l+0xa9a>
 800690c:	4602      	mov	r2, r0
 800690e:	460b      	mov	r3, r1
 8006910:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8006914:	e7e3      	b.n	80068de <_strtod_l+0xb6e>
 8006916:	a30e      	add	r3, pc, #56	; (adr r3, 8006950 <_strtod_l+0xbe0>)
 8006918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800691c:	f7fa f84e 	bl	80009bc <__aeabi_dcmplt>
 8006920:	e7a1      	b.n	8006866 <_strtod_l+0xaf6>
 8006922:	2300      	movs	r3, #0
 8006924:	930c      	str	r3, [sp, #48]	; 0x30
 8006926:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006928:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800692a:	6013      	str	r3, [r2, #0]
 800692c:	f7ff ba65 	b.w	8005dfa <_strtod_l+0x8a>
 8006930:	2b65      	cmp	r3, #101	; 0x65
 8006932:	f43f ab5c 	beq.w	8005fee <_strtod_l+0x27e>
 8006936:	2b45      	cmp	r3, #69	; 0x45
 8006938:	f43f ab59 	beq.w	8005fee <_strtod_l+0x27e>
 800693c:	2201      	movs	r2, #1
 800693e:	f7ff bb8d 	b.w	800605c <_strtod_l+0x2ec>
 8006942:	bf00      	nop
 8006944:	f3af 8000 	nop.w
 8006948:	ffc00000 	.word	0xffc00000
 800694c:	41dfffff 	.word	0x41dfffff
 8006950:	94a03595 	.word	0x94a03595
 8006954:	3fcfffff 	.word	0x3fcfffff

08006958 <_strtod_r>:
 8006958:	4b01      	ldr	r3, [pc, #4]	; (8006960 <_strtod_r+0x8>)
 800695a:	f7ff ba09 	b.w	8005d70 <_strtod_l>
 800695e:	bf00      	nop
 8006960:	20000074 	.word	0x20000074

08006964 <_strtol_l.isra.0>:
 8006964:	2b01      	cmp	r3, #1
 8006966:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800696a:	4686      	mov	lr, r0
 800696c:	d001      	beq.n	8006972 <_strtol_l.isra.0+0xe>
 800696e:	2b24      	cmp	r3, #36	; 0x24
 8006970:	d906      	bls.n	8006980 <_strtol_l.isra.0+0x1c>
 8006972:	f7fe fb13 	bl	8004f9c <__errno>
 8006976:	2316      	movs	r3, #22
 8006978:	6003      	str	r3, [r0, #0]
 800697a:	2000      	movs	r0, #0
 800697c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006980:	468c      	mov	ip, r1
 8006982:	4e3a      	ldr	r6, [pc, #232]	; (8006a6c <_strtol_l.isra.0+0x108>)
 8006984:	4660      	mov	r0, ip
 8006986:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800698a:	5da5      	ldrb	r5, [r4, r6]
 800698c:	f015 0508 	ands.w	r5, r5, #8
 8006990:	d1f8      	bne.n	8006984 <_strtol_l.isra.0+0x20>
 8006992:	2c2d      	cmp	r4, #45	; 0x2d
 8006994:	d133      	bne.n	80069fe <_strtol_l.isra.0+0x9a>
 8006996:	f04f 0801 	mov.w	r8, #1
 800699a:	f89c 4000 	ldrb.w	r4, [ip]
 800699e:	f100 0c02 	add.w	ip, r0, #2
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d05d      	beq.n	8006a62 <_strtol_l.isra.0+0xfe>
 80069a6:	2b10      	cmp	r3, #16
 80069a8:	d10c      	bne.n	80069c4 <_strtol_l.isra.0+0x60>
 80069aa:	2c30      	cmp	r4, #48	; 0x30
 80069ac:	d10a      	bne.n	80069c4 <_strtol_l.isra.0+0x60>
 80069ae:	f89c 0000 	ldrb.w	r0, [ip]
 80069b2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80069b6:	2858      	cmp	r0, #88	; 0x58
 80069b8:	d14e      	bne.n	8006a58 <_strtol_l.isra.0+0xf4>
 80069ba:	2310      	movs	r3, #16
 80069bc:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80069c0:	f10c 0c02 	add.w	ip, ip, #2
 80069c4:	2500      	movs	r5, #0
 80069c6:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 80069ca:	3f01      	subs	r7, #1
 80069cc:	fbb7 f9f3 	udiv	r9, r7, r3
 80069d0:	4628      	mov	r0, r5
 80069d2:	fb03 7a19 	mls	sl, r3, r9, r7
 80069d6:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80069da:	2e09      	cmp	r6, #9
 80069dc:	d818      	bhi.n	8006a10 <_strtol_l.isra.0+0xac>
 80069de:	4634      	mov	r4, r6
 80069e0:	42a3      	cmp	r3, r4
 80069e2:	dd24      	ble.n	8006a2e <_strtol_l.isra.0+0xca>
 80069e4:	2d00      	cmp	r5, #0
 80069e6:	db1f      	blt.n	8006a28 <_strtol_l.isra.0+0xc4>
 80069e8:	4581      	cmp	r9, r0
 80069ea:	d31d      	bcc.n	8006a28 <_strtol_l.isra.0+0xc4>
 80069ec:	d101      	bne.n	80069f2 <_strtol_l.isra.0+0x8e>
 80069ee:	45a2      	cmp	sl, r4
 80069f0:	db1a      	blt.n	8006a28 <_strtol_l.isra.0+0xc4>
 80069f2:	2501      	movs	r5, #1
 80069f4:	fb00 4003 	mla	r0, r0, r3, r4
 80069f8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80069fc:	e7eb      	b.n	80069d6 <_strtol_l.isra.0+0x72>
 80069fe:	2c2b      	cmp	r4, #43	; 0x2b
 8006a00:	bf08      	it	eq
 8006a02:	f89c 4000 	ldrbeq.w	r4, [ip]
 8006a06:	46a8      	mov	r8, r5
 8006a08:	bf08      	it	eq
 8006a0a:	f100 0c02 	addeq.w	ip, r0, #2
 8006a0e:	e7c8      	b.n	80069a2 <_strtol_l.isra.0+0x3e>
 8006a10:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8006a14:	2e19      	cmp	r6, #25
 8006a16:	d801      	bhi.n	8006a1c <_strtol_l.isra.0+0xb8>
 8006a18:	3c37      	subs	r4, #55	; 0x37
 8006a1a:	e7e1      	b.n	80069e0 <_strtol_l.isra.0+0x7c>
 8006a1c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8006a20:	2e19      	cmp	r6, #25
 8006a22:	d804      	bhi.n	8006a2e <_strtol_l.isra.0+0xca>
 8006a24:	3c57      	subs	r4, #87	; 0x57
 8006a26:	e7db      	b.n	80069e0 <_strtol_l.isra.0+0x7c>
 8006a28:	f04f 35ff 	mov.w	r5, #4294967295
 8006a2c:	e7e4      	b.n	80069f8 <_strtol_l.isra.0+0x94>
 8006a2e:	2d00      	cmp	r5, #0
 8006a30:	da08      	bge.n	8006a44 <_strtol_l.isra.0+0xe0>
 8006a32:	2322      	movs	r3, #34	; 0x22
 8006a34:	4638      	mov	r0, r7
 8006a36:	f8ce 3000 	str.w	r3, [lr]
 8006a3a:	2a00      	cmp	r2, #0
 8006a3c:	d09e      	beq.n	800697c <_strtol_l.isra.0+0x18>
 8006a3e:	f10c 31ff 	add.w	r1, ip, #4294967295
 8006a42:	e007      	b.n	8006a54 <_strtol_l.isra.0+0xf0>
 8006a44:	f1b8 0f00 	cmp.w	r8, #0
 8006a48:	d000      	beq.n	8006a4c <_strtol_l.isra.0+0xe8>
 8006a4a:	4240      	negs	r0, r0
 8006a4c:	2a00      	cmp	r2, #0
 8006a4e:	d095      	beq.n	800697c <_strtol_l.isra.0+0x18>
 8006a50:	2d00      	cmp	r5, #0
 8006a52:	d1f4      	bne.n	8006a3e <_strtol_l.isra.0+0xda>
 8006a54:	6011      	str	r1, [r2, #0]
 8006a56:	e791      	b.n	800697c <_strtol_l.isra.0+0x18>
 8006a58:	2430      	movs	r4, #48	; 0x30
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d1b2      	bne.n	80069c4 <_strtol_l.isra.0+0x60>
 8006a5e:	2308      	movs	r3, #8
 8006a60:	e7b0      	b.n	80069c4 <_strtol_l.isra.0+0x60>
 8006a62:	2c30      	cmp	r4, #48	; 0x30
 8006a64:	d0a3      	beq.n	80069ae <_strtol_l.isra.0+0x4a>
 8006a66:	230a      	movs	r3, #10
 8006a68:	e7ac      	b.n	80069c4 <_strtol_l.isra.0+0x60>
 8006a6a:	bf00      	nop
 8006a6c:	080098f1 	.word	0x080098f1

08006a70 <_strtol_r>:
 8006a70:	f7ff bf78 	b.w	8006964 <_strtol_l.isra.0>

08006a74 <quorem>:
 8006a74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a78:	6903      	ldr	r3, [r0, #16]
 8006a7a:	690c      	ldr	r4, [r1, #16]
 8006a7c:	4607      	mov	r7, r0
 8006a7e:	42a3      	cmp	r3, r4
 8006a80:	f2c0 8083 	blt.w	8006b8a <quorem+0x116>
 8006a84:	3c01      	subs	r4, #1
 8006a86:	f100 0514 	add.w	r5, r0, #20
 8006a8a:	f101 0814 	add.w	r8, r1, #20
 8006a8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a92:	9301      	str	r3, [sp, #4]
 8006a94:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006a98:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a9c:	3301      	adds	r3, #1
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	fbb2 f6f3 	udiv	r6, r2, r3
 8006aa4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006aa8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006aac:	d332      	bcc.n	8006b14 <quorem+0xa0>
 8006aae:	f04f 0e00 	mov.w	lr, #0
 8006ab2:	4640      	mov	r0, r8
 8006ab4:	46ac      	mov	ip, r5
 8006ab6:	46f2      	mov	sl, lr
 8006ab8:	f850 2b04 	ldr.w	r2, [r0], #4
 8006abc:	b293      	uxth	r3, r2
 8006abe:	fb06 e303 	mla	r3, r6, r3, lr
 8006ac2:	0c12      	lsrs	r2, r2, #16
 8006ac4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006ac8:	fb06 e202 	mla	r2, r6, r2, lr
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	ebaa 0303 	sub.w	r3, sl, r3
 8006ad2:	f8dc a000 	ldr.w	sl, [ip]
 8006ad6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006ada:	fa1f fa8a 	uxth.w	sl, sl
 8006ade:	4453      	add	r3, sl
 8006ae0:	fa1f fa82 	uxth.w	sl, r2
 8006ae4:	f8dc 2000 	ldr.w	r2, [ip]
 8006ae8:	4581      	cmp	r9, r0
 8006aea:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006aee:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006af8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006afc:	f84c 3b04 	str.w	r3, [ip], #4
 8006b00:	d2da      	bcs.n	8006ab8 <quorem+0x44>
 8006b02:	f855 300b 	ldr.w	r3, [r5, fp]
 8006b06:	b92b      	cbnz	r3, 8006b14 <quorem+0xa0>
 8006b08:	9b01      	ldr	r3, [sp, #4]
 8006b0a:	3b04      	subs	r3, #4
 8006b0c:	429d      	cmp	r5, r3
 8006b0e:	461a      	mov	r2, r3
 8006b10:	d32f      	bcc.n	8006b72 <quorem+0xfe>
 8006b12:	613c      	str	r4, [r7, #16]
 8006b14:	4638      	mov	r0, r7
 8006b16:	f001 fc8d 	bl	8008434 <__mcmp>
 8006b1a:	2800      	cmp	r0, #0
 8006b1c:	db25      	blt.n	8006b6a <quorem+0xf6>
 8006b1e:	4628      	mov	r0, r5
 8006b20:	f04f 0c00 	mov.w	ip, #0
 8006b24:	3601      	adds	r6, #1
 8006b26:	f858 1b04 	ldr.w	r1, [r8], #4
 8006b2a:	f8d0 e000 	ldr.w	lr, [r0]
 8006b2e:	b28b      	uxth	r3, r1
 8006b30:	ebac 0303 	sub.w	r3, ip, r3
 8006b34:	fa1f f28e 	uxth.w	r2, lr
 8006b38:	4413      	add	r3, r2
 8006b3a:	0c0a      	lsrs	r2, r1, #16
 8006b3c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006b40:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b4a:	45c1      	cmp	r9, r8
 8006b4c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006b50:	f840 3b04 	str.w	r3, [r0], #4
 8006b54:	d2e7      	bcs.n	8006b26 <quorem+0xb2>
 8006b56:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b5e:	b922      	cbnz	r2, 8006b6a <quorem+0xf6>
 8006b60:	3b04      	subs	r3, #4
 8006b62:	429d      	cmp	r5, r3
 8006b64:	461a      	mov	r2, r3
 8006b66:	d30a      	bcc.n	8006b7e <quorem+0x10a>
 8006b68:	613c      	str	r4, [r7, #16]
 8006b6a:	4630      	mov	r0, r6
 8006b6c:	b003      	add	sp, #12
 8006b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b72:	6812      	ldr	r2, [r2, #0]
 8006b74:	3b04      	subs	r3, #4
 8006b76:	2a00      	cmp	r2, #0
 8006b78:	d1cb      	bne.n	8006b12 <quorem+0x9e>
 8006b7a:	3c01      	subs	r4, #1
 8006b7c:	e7c6      	b.n	8006b0c <quorem+0x98>
 8006b7e:	6812      	ldr	r2, [r2, #0]
 8006b80:	3b04      	subs	r3, #4
 8006b82:	2a00      	cmp	r2, #0
 8006b84:	d1f0      	bne.n	8006b68 <quorem+0xf4>
 8006b86:	3c01      	subs	r4, #1
 8006b88:	e7eb      	b.n	8006b62 <quorem+0xee>
 8006b8a:	2000      	movs	r0, #0
 8006b8c:	e7ee      	b.n	8006b6c <quorem+0xf8>
	...

08006b90 <_dtoa_r>:
 8006b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b94:	4616      	mov	r6, r2
 8006b96:	461f      	mov	r7, r3
 8006b98:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006b9a:	b099      	sub	sp, #100	; 0x64
 8006b9c:	4605      	mov	r5, r0
 8006b9e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006ba2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006ba6:	b974      	cbnz	r4, 8006bc6 <_dtoa_r+0x36>
 8006ba8:	2010      	movs	r0, #16
 8006baa:	f001 f949 	bl	8007e40 <malloc>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	6268      	str	r0, [r5, #36]	; 0x24
 8006bb2:	b920      	cbnz	r0, 8006bbe <_dtoa_r+0x2e>
 8006bb4:	21ea      	movs	r1, #234	; 0xea
 8006bb6:	4bae      	ldr	r3, [pc, #696]	; (8006e70 <_dtoa_r+0x2e0>)
 8006bb8:	48ae      	ldr	r0, [pc, #696]	; (8006e74 <_dtoa_r+0x2e4>)
 8006bba:	f002 f875 	bl	8008ca8 <__assert_func>
 8006bbe:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006bc2:	6004      	str	r4, [r0, #0]
 8006bc4:	60c4      	str	r4, [r0, #12]
 8006bc6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006bc8:	6819      	ldr	r1, [r3, #0]
 8006bca:	b151      	cbz	r1, 8006be2 <_dtoa_r+0x52>
 8006bcc:	685a      	ldr	r2, [r3, #4]
 8006bce:	2301      	movs	r3, #1
 8006bd0:	4093      	lsls	r3, r2
 8006bd2:	604a      	str	r2, [r1, #4]
 8006bd4:	608b      	str	r3, [r1, #8]
 8006bd6:	4628      	mov	r0, r5
 8006bd8:	f001 f9a8 	bl	8007f2c <_Bfree>
 8006bdc:	2200      	movs	r2, #0
 8006bde:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006be0:	601a      	str	r2, [r3, #0]
 8006be2:	1e3b      	subs	r3, r7, #0
 8006be4:	bfaf      	iteee	ge
 8006be6:	2300      	movge	r3, #0
 8006be8:	2201      	movlt	r2, #1
 8006bea:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006bee:	9305      	strlt	r3, [sp, #20]
 8006bf0:	bfa8      	it	ge
 8006bf2:	f8c8 3000 	strge.w	r3, [r8]
 8006bf6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006bfa:	4b9f      	ldr	r3, [pc, #636]	; (8006e78 <_dtoa_r+0x2e8>)
 8006bfc:	bfb8      	it	lt
 8006bfe:	f8c8 2000 	strlt.w	r2, [r8]
 8006c02:	ea33 0309 	bics.w	r3, r3, r9
 8006c06:	d119      	bne.n	8006c3c <_dtoa_r+0xac>
 8006c08:	f242 730f 	movw	r3, #9999	; 0x270f
 8006c0c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006c0e:	6013      	str	r3, [r2, #0]
 8006c10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006c14:	4333      	orrs	r3, r6
 8006c16:	f000 8580 	beq.w	800771a <_dtoa_r+0xb8a>
 8006c1a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006c1c:	b953      	cbnz	r3, 8006c34 <_dtoa_r+0xa4>
 8006c1e:	4b97      	ldr	r3, [pc, #604]	; (8006e7c <_dtoa_r+0x2ec>)
 8006c20:	e022      	b.n	8006c68 <_dtoa_r+0xd8>
 8006c22:	4b97      	ldr	r3, [pc, #604]	; (8006e80 <_dtoa_r+0x2f0>)
 8006c24:	9308      	str	r3, [sp, #32]
 8006c26:	3308      	adds	r3, #8
 8006c28:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006c2a:	6013      	str	r3, [r2, #0]
 8006c2c:	9808      	ldr	r0, [sp, #32]
 8006c2e:	b019      	add	sp, #100	; 0x64
 8006c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c34:	4b91      	ldr	r3, [pc, #580]	; (8006e7c <_dtoa_r+0x2ec>)
 8006c36:	9308      	str	r3, [sp, #32]
 8006c38:	3303      	adds	r3, #3
 8006c3a:	e7f5      	b.n	8006c28 <_dtoa_r+0x98>
 8006c3c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006c40:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006c44:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006c48:	2200      	movs	r2, #0
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	f7f9 feac 	bl	80009a8 <__aeabi_dcmpeq>
 8006c50:	4680      	mov	r8, r0
 8006c52:	b158      	cbz	r0, 8006c6c <_dtoa_r+0xdc>
 8006c54:	2301      	movs	r3, #1
 8006c56:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006c58:	6013      	str	r3, [r2, #0]
 8006c5a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	f000 8559 	beq.w	8007714 <_dtoa_r+0xb84>
 8006c62:	4888      	ldr	r0, [pc, #544]	; (8006e84 <_dtoa_r+0x2f4>)
 8006c64:	6018      	str	r0, [r3, #0]
 8006c66:	1e43      	subs	r3, r0, #1
 8006c68:	9308      	str	r3, [sp, #32]
 8006c6a:	e7df      	b.n	8006c2c <_dtoa_r+0x9c>
 8006c6c:	ab16      	add	r3, sp, #88	; 0x58
 8006c6e:	9301      	str	r3, [sp, #4]
 8006c70:	ab17      	add	r3, sp, #92	; 0x5c
 8006c72:	9300      	str	r3, [sp, #0]
 8006c74:	4628      	mov	r0, r5
 8006c76:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006c7a:	f001 fd01 	bl	8008680 <__d2b>
 8006c7e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006c82:	4682      	mov	sl, r0
 8006c84:	2c00      	cmp	r4, #0
 8006c86:	d07e      	beq.n	8006d86 <_dtoa_r+0x1f6>
 8006c88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006c8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c8e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006c92:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c96:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006c9a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006c9e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	4b78      	ldr	r3, [pc, #480]	; (8006e88 <_dtoa_r+0x2f8>)
 8006ca6:	f7f9 fa5f 	bl	8000168 <__aeabi_dsub>
 8006caa:	a36b      	add	r3, pc, #428	; (adr r3, 8006e58 <_dtoa_r+0x2c8>)
 8006cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb0:	f7f9 fc12 	bl	80004d8 <__aeabi_dmul>
 8006cb4:	a36a      	add	r3, pc, #424	; (adr r3, 8006e60 <_dtoa_r+0x2d0>)
 8006cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cba:	f7f9 fa57 	bl	800016c <__adddf3>
 8006cbe:	4606      	mov	r6, r0
 8006cc0:	4620      	mov	r0, r4
 8006cc2:	460f      	mov	r7, r1
 8006cc4:	f7f9 fb9e 	bl	8000404 <__aeabi_i2d>
 8006cc8:	a367      	add	r3, pc, #412	; (adr r3, 8006e68 <_dtoa_r+0x2d8>)
 8006cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cce:	f7f9 fc03 	bl	80004d8 <__aeabi_dmul>
 8006cd2:	4602      	mov	r2, r0
 8006cd4:	460b      	mov	r3, r1
 8006cd6:	4630      	mov	r0, r6
 8006cd8:	4639      	mov	r1, r7
 8006cda:	f7f9 fa47 	bl	800016c <__adddf3>
 8006cde:	4606      	mov	r6, r0
 8006ce0:	460f      	mov	r7, r1
 8006ce2:	f7f9 fea9 	bl	8000a38 <__aeabi_d2iz>
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	4681      	mov	r9, r0
 8006cea:	2300      	movs	r3, #0
 8006cec:	4630      	mov	r0, r6
 8006cee:	4639      	mov	r1, r7
 8006cf0:	f7f9 fe64 	bl	80009bc <__aeabi_dcmplt>
 8006cf4:	b148      	cbz	r0, 8006d0a <_dtoa_r+0x17a>
 8006cf6:	4648      	mov	r0, r9
 8006cf8:	f7f9 fb84 	bl	8000404 <__aeabi_i2d>
 8006cfc:	4632      	mov	r2, r6
 8006cfe:	463b      	mov	r3, r7
 8006d00:	f7f9 fe52 	bl	80009a8 <__aeabi_dcmpeq>
 8006d04:	b908      	cbnz	r0, 8006d0a <_dtoa_r+0x17a>
 8006d06:	f109 39ff 	add.w	r9, r9, #4294967295
 8006d0a:	f1b9 0f16 	cmp.w	r9, #22
 8006d0e:	d857      	bhi.n	8006dc0 <_dtoa_r+0x230>
 8006d10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006d14:	4b5d      	ldr	r3, [pc, #372]	; (8006e8c <_dtoa_r+0x2fc>)
 8006d16:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8006d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d1e:	f7f9 fe4d 	bl	80009bc <__aeabi_dcmplt>
 8006d22:	2800      	cmp	r0, #0
 8006d24:	d04e      	beq.n	8006dc4 <_dtoa_r+0x234>
 8006d26:	2300      	movs	r3, #0
 8006d28:	f109 39ff 	add.w	r9, r9, #4294967295
 8006d2c:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d2e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006d30:	1b1c      	subs	r4, r3, r4
 8006d32:	1e63      	subs	r3, r4, #1
 8006d34:	9309      	str	r3, [sp, #36]	; 0x24
 8006d36:	bf49      	itett	mi
 8006d38:	f1c4 0301 	rsbmi	r3, r4, #1
 8006d3c:	2300      	movpl	r3, #0
 8006d3e:	9306      	strmi	r3, [sp, #24]
 8006d40:	2300      	movmi	r3, #0
 8006d42:	bf54      	ite	pl
 8006d44:	9306      	strpl	r3, [sp, #24]
 8006d46:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006d48:	f1b9 0f00 	cmp.w	r9, #0
 8006d4c:	db3c      	blt.n	8006dc8 <_dtoa_r+0x238>
 8006d4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d50:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006d54:	444b      	add	r3, r9
 8006d56:	9309      	str	r3, [sp, #36]	; 0x24
 8006d58:	2300      	movs	r3, #0
 8006d5a:	930a      	str	r3, [sp, #40]	; 0x28
 8006d5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d5e:	2b09      	cmp	r3, #9
 8006d60:	d86c      	bhi.n	8006e3c <_dtoa_r+0x2ac>
 8006d62:	2b05      	cmp	r3, #5
 8006d64:	bfc4      	itt	gt
 8006d66:	3b04      	subgt	r3, #4
 8006d68:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006d6a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d6c:	bfc8      	it	gt
 8006d6e:	2400      	movgt	r4, #0
 8006d70:	f1a3 0302 	sub.w	r3, r3, #2
 8006d74:	bfd8      	it	le
 8006d76:	2401      	movle	r4, #1
 8006d78:	2b03      	cmp	r3, #3
 8006d7a:	f200 808b 	bhi.w	8006e94 <_dtoa_r+0x304>
 8006d7e:	e8df f003 	tbb	[pc, r3]
 8006d82:	4f2d      	.short	0x4f2d
 8006d84:	5b4d      	.short	0x5b4d
 8006d86:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006d8a:	441c      	add	r4, r3
 8006d8c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006d90:	2b20      	cmp	r3, #32
 8006d92:	bfc3      	ittte	gt
 8006d94:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006d98:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8006d9c:	fa09 f303 	lslgt.w	r3, r9, r3
 8006da0:	f1c3 0320 	rsble	r3, r3, #32
 8006da4:	bfc6      	itte	gt
 8006da6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006daa:	4318      	orrgt	r0, r3
 8006dac:	fa06 f003 	lslle.w	r0, r6, r3
 8006db0:	f7f9 fb18 	bl	80003e4 <__aeabi_ui2d>
 8006db4:	2301      	movs	r3, #1
 8006db6:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006dba:	3c01      	subs	r4, #1
 8006dbc:	9313      	str	r3, [sp, #76]	; 0x4c
 8006dbe:	e770      	b.n	8006ca2 <_dtoa_r+0x112>
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	e7b3      	b.n	8006d2c <_dtoa_r+0x19c>
 8006dc4:	900f      	str	r0, [sp, #60]	; 0x3c
 8006dc6:	e7b2      	b.n	8006d2e <_dtoa_r+0x19e>
 8006dc8:	9b06      	ldr	r3, [sp, #24]
 8006dca:	eba3 0309 	sub.w	r3, r3, r9
 8006dce:	9306      	str	r3, [sp, #24]
 8006dd0:	f1c9 0300 	rsb	r3, r9, #0
 8006dd4:	930a      	str	r3, [sp, #40]	; 0x28
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	930e      	str	r3, [sp, #56]	; 0x38
 8006dda:	e7bf      	b.n	8006d5c <_dtoa_r+0x1cc>
 8006ddc:	2300      	movs	r3, #0
 8006dde:	930b      	str	r3, [sp, #44]	; 0x2c
 8006de0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	dc59      	bgt.n	8006e9a <_dtoa_r+0x30a>
 8006de6:	f04f 0b01 	mov.w	fp, #1
 8006dea:	465b      	mov	r3, fp
 8006dec:	f8cd b008 	str.w	fp, [sp, #8]
 8006df0:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8006df4:	2200      	movs	r2, #0
 8006df6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006df8:	6042      	str	r2, [r0, #4]
 8006dfa:	2204      	movs	r2, #4
 8006dfc:	f102 0614 	add.w	r6, r2, #20
 8006e00:	429e      	cmp	r6, r3
 8006e02:	6841      	ldr	r1, [r0, #4]
 8006e04:	d94f      	bls.n	8006ea6 <_dtoa_r+0x316>
 8006e06:	4628      	mov	r0, r5
 8006e08:	f001 f850 	bl	8007eac <_Balloc>
 8006e0c:	9008      	str	r0, [sp, #32]
 8006e0e:	2800      	cmp	r0, #0
 8006e10:	d14d      	bne.n	8006eae <_dtoa_r+0x31e>
 8006e12:	4602      	mov	r2, r0
 8006e14:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006e18:	4b1d      	ldr	r3, [pc, #116]	; (8006e90 <_dtoa_r+0x300>)
 8006e1a:	e6cd      	b.n	8006bb8 <_dtoa_r+0x28>
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	e7de      	b.n	8006dde <_dtoa_r+0x24e>
 8006e20:	2300      	movs	r3, #0
 8006e22:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e24:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006e26:	eb09 0b03 	add.w	fp, r9, r3
 8006e2a:	f10b 0301 	add.w	r3, fp, #1
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	9302      	str	r3, [sp, #8]
 8006e32:	bfb8      	it	lt
 8006e34:	2301      	movlt	r3, #1
 8006e36:	e7dd      	b.n	8006df4 <_dtoa_r+0x264>
 8006e38:	2301      	movs	r3, #1
 8006e3a:	e7f2      	b.n	8006e22 <_dtoa_r+0x292>
 8006e3c:	2401      	movs	r4, #1
 8006e3e:	2300      	movs	r3, #0
 8006e40:	940b      	str	r4, [sp, #44]	; 0x2c
 8006e42:	9322      	str	r3, [sp, #136]	; 0x88
 8006e44:	f04f 3bff 	mov.w	fp, #4294967295
 8006e48:	2200      	movs	r2, #0
 8006e4a:	2312      	movs	r3, #18
 8006e4c:	f8cd b008 	str.w	fp, [sp, #8]
 8006e50:	9223      	str	r2, [sp, #140]	; 0x8c
 8006e52:	e7cf      	b.n	8006df4 <_dtoa_r+0x264>
 8006e54:	f3af 8000 	nop.w
 8006e58:	636f4361 	.word	0x636f4361
 8006e5c:	3fd287a7 	.word	0x3fd287a7
 8006e60:	8b60c8b3 	.word	0x8b60c8b3
 8006e64:	3fc68a28 	.word	0x3fc68a28
 8006e68:	509f79fb 	.word	0x509f79fb
 8006e6c:	3fd34413 	.word	0x3fd34413
 8006e70:	080099fe 	.word	0x080099fe
 8006e74:	08009a15 	.word	0x08009a15
 8006e78:	7ff00000 	.word	0x7ff00000
 8006e7c:	080099fa 	.word	0x080099fa
 8006e80:	080099f1 	.word	0x080099f1
 8006e84:	08009875 	.word	0x08009875
 8006e88:	3ff80000 	.word	0x3ff80000
 8006e8c:	08009b90 	.word	0x08009b90
 8006e90:	08009a74 	.word	0x08009a74
 8006e94:	2301      	movs	r3, #1
 8006e96:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e98:	e7d4      	b.n	8006e44 <_dtoa_r+0x2b4>
 8006e9a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8006e9e:	465b      	mov	r3, fp
 8006ea0:	f8cd b008 	str.w	fp, [sp, #8]
 8006ea4:	e7a6      	b.n	8006df4 <_dtoa_r+0x264>
 8006ea6:	3101      	adds	r1, #1
 8006ea8:	6041      	str	r1, [r0, #4]
 8006eaa:	0052      	lsls	r2, r2, #1
 8006eac:	e7a6      	b.n	8006dfc <_dtoa_r+0x26c>
 8006eae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006eb0:	9a08      	ldr	r2, [sp, #32]
 8006eb2:	601a      	str	r2, [r3, #0]
 8006eb4:	9b02      	ldr	r3, [sp, #8]
 8006eb6:	2b0e      	cmp	r3, #14
 8006eb8:	f200 80a8 	bhi.w	800700c <_dtoa_r+0x47c>
 8006ebc:	2c00      	cmp	r4, #0
 8006ebe:	f000 80a5 	beq.w	800700c <_dtoa_r+0x47c>
 8006ec2:	f1b9 0f00 	cmp.w	r9, #0
 8006ec6:	dd34      	ble.n	8006f32 <_dtoa_r+0x3a2>
 8006ec8:	4a9a      	ldr	r2, [pc, #616]	; (8007134 <_dtoa_r+0x5a4>)
 8006eca:	f009 030f 	and.w	r3, r9, #15
 8006ece:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006ed2:	f419 7f80 	tst.w	r9, #256	; 0x100
 8006ed6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006eda:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006ede:	ea4f 1429 	mov.w	r4, r9, asr #4
 8006ee2:	d016      	beq.n	8006f12 <_dtoa_r+0x382>
 8006ee4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006ee8:	4b93      	ldr	r3, [pc, #588]	; (8007138 <_dtoa_r+0x5a8>)
 8006eea:	2703      	movs	r7, #3
 8006eec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006ef0:	f7f9 fc1c 	bl	800072c <__aeabi_ddiv>
 8006ef4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ef8:	f004 040f 	and.w	r4, r4, #15
 8006efc:	4e8e      	ldr	r6, [pc, #568]	; (8007138 <_dtoa_r+0x5a8>)
 8006efe:	b954      	cbnz	r4, 8006f16 <_dtoa_r+0x386>
 8006f00:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006f04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f08:	f7f9 fc10 	bl	800072c <__aeabi_ddiv>
 8006f0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f10:	e029      	b.n	8006f66 <_dtoa_r+0x3d6>
 8006f12:	2702      	movs	r7, #2
 8006f14:	e7f2      	b.n	8006efc <_dtoa_r+0x36c>
 8006f16:	07e1      	lsls	r1, r4, #31
 8006f18:	d508      	bpl.n	8006f2c <_dtoa_r+0x39c>
 8006f1a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006f1e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006f22:	f7f9 fad9 	bl	80004d8 <__aeabi_dmul>
 8006f26:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006f2a:	3701      	adds	r7, #1
 8006f2c:	1064      	asrs	r4, r4, #1
 8006f2e:	3608      	adds	r6, #8
 8006f30:	e7e5      	b.n	8006efe <_dtoa_r+0x36e>
 8006f32:	f000 80a5 	beq.w	8007080 <_dtoa_r+0x4f0>
 8006f36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006f3a:	f1c9 0400 	rsb	r4, r9, #0
 8006f3e:	4b7d      	ldr	r3, [pc, #500]	; (8007134 <_dtoa_r+0x5a4>)
 8006f40:	f004 020f 	and.w	r2, r4, #15
 8006f44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f4c:	f7f9 fac4 	bl	80004d8 <__aeabi_dmul>
 8006f50:	2702      	movs	r7, #2
 8006f52:	2300      	movs	r3, #0
 8006f54:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f58:	4e77      	ldr	r6, [pc, #476]	; (8007138 <_dtoa_r+0x5a8>)
 8006f5a:	1124      	asrs	r4, r4, #4
 8006f5c:	2c00      	cmp	r4, #0
 8006f5e:	f040 8084 	bne.w	800706a <_dtoa_r+0x4da>
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d1d2      	bne.n	8006f0c <_dtoa_r+0x37c>
 8006f66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	f000 808b 	beq.w	8007084 <_dtoa_r+0x4f4>
 8006f6e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006f72:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006f76:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	4b6f      	ldr	r3, [pc, #444]	; (800713c <_dtoa_r+0x5ac>)
 8006f7e:	f7f9 fd1d 	bl	80009bc <__aeabi_dcmplt>
 8006f82:	2800      	cmp	r0, #0
 8006f84:	d07e      	beq.n	8007084 <_dtoa_r+0x4f4>
 8006f86:	9b02      	ldr	r3, [sp, #8]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d07b      	beq.n	8007084 <_dtoa_r+0x4f4>
 8006f8c:	f1bb 0f00 	cmp.w	fp, #0
 8006f90:	dd38      	ble.n	8007004 <_dtoa_r+0x474>
 8006f92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006f96:	2200      	movs	r2, #0
 8006f98:	4b69      	ldr	r3, [pc, #420]	; (8007140 <_dtoa_r+0x5b0>)
 8006f9a:	f7f9 fa9d 	bl	80004d8 <__aeabi_dmul>
 8006f9e:	465c      	mov	r4, fp
 8006fa0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006fa4:	f109 38ff 	add.w	r8, r9, #4294967295
 8006fa8:	3701      	adds	r7, #1
 8006faa:	4638      	mov	r0, r7
 8006fac:	f7f9 fa2a 	bl	8000404 <__aeabi_i2d>
 8006fb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006fb4:	f7f9 fa90 	bl	80004d8 <__aeabi_dmul>
 8006fb8:	2200      	movs	r2, #0
 8006fba:	4b62      	ldr	r3, [pc, #392]	; (8007144 <_dtoa_r+0x5b4>)
 8006fbc:	f7f9 f8d6 	bl	800016c <__adddf3>
 8006fc0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006fc4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006fc8:	9611      	str	r6, [sp, #68]	; 0x44
 8006fca:	2c00      	cmp	r4, #0
 8006fcc:	d15d      	bne.n	800708a <_dtoa_r+0x4fa>
 8006fce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	4b5c      	ldr	r3, [pc, #368]	; (8007148 <_dtoa_r+0x5b8>)
 8006fd6:	f7f9 f8c7 	bl	8000168 <__aeabi_dsub>
 8006fda:	4602      	mov	r2, r0
 8006fdc:	460b      	mov	r3, r1
 8006fde:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006fe2:	4633      	mov	r3, r6
 8006fe4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006fe6:	f7f9 fd07 	bl	80009f8 <__aeabi_dcmpgt>
 8006fea:	2800      	cmp	r0, #0
 8006fec:	f040 829e 	bne.w	800752c <_dtoa_r+0x99c>
 8006ff0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ff4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006ff6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006ffa:	f7f9 fcdf 	bl	80009bc <__aeabi_dcmplt>
 8006ffe:	2800      	cmp	r0, #0
 8007000:	f040 8292 	bne.w	8007528 <_dtoa_r+0x998>
 8007004:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007008:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800700c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800700e:	2b00      	cmp	r3, #0
 8007010:	f2c0 8153 	blt.w	80072ba <_dtoa_r+0x72a>
 8007014:	f1b9 0f0e 	cmp.w	r9, #14
 8007018:	f300 814f 	bgt.w	80072ba <_dtoa_r+0x72a>
 800701c:	4b45      	ldr	r3, [pc, #276]	; (8007134 <_dtoa_r+0x5a4>)
 800701e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8007022:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007026:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800702a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800702c:	2b00      	cmp	r3, #0
 800702e:	f280 80db 	bge.w	80071e8 <_dtoa_r+0x658>
 8007032:	9b02      	ldr	r3, [sp, #8]
 8007034:	2b00      	cmp	r3, #0
 8007036:	f300 80d7 	bgt.w	80071e8 <_dtoa_r+0x658>
 800703a:	f040 8274 	bne.w	8007526 <_dtoa_r+0x996>
 800703e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007042:	2200      	movs	r2, #0
 8007044:	4b40      	ldr	r3, [pc, #256]	; (8007148 <_dtoa_r+0x5b8>)
 8007046:	f7f9 fa47 	bl	80004d8 <__aeabi_dmul>
 800704a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800704e:	f7f9 fcc9 	bl	80009e4 <__aeabi_dcmpge>
 8007052:	9c02      	ldr	r4, [sp, #8]
 8007054:	4626      	mov	r6, r4
 8007056:	2800      	cmp	r0, #0
 8007058:	f040 824a 	bne.w	80074f0 <_dtoa_r+0x960>
 800705c:	2331      	movs	r3, #49	; 0x31
 800705e:	9f08      	ldr	r7, [sp, #32]
 8007060:	f109 0901 	add.w	r9, r9, #1
 8007064:	f807 3b01 	strb.w	r3, [r7], #1
 8007068:	e246      	b.n	80074f8 <_dtoa_r+0x968>
 800706a:	07e2      	lsls	r2, r4, #31
 800706c:	d505      	bpl.n	800707a <_dtoa_r+0x4ea>
 800706e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007072:	f7f9 fa31 	bl	80004d8 <__aeabi_dmul>
 8007076:	2301      	movs	r3, #1
 8007078:	3701      	adds	r7, #1
 800707a:	1064      	asrs	r4, r4, #1
 800707c:	3608      	adds	r6, #8
 800707e:	e76d      	b.n	8006f5c <_dtoa_r+0x3cc>
 8007080:	2702      	movs	r7, #2
 8007082:	e770      	b.n	8006f66 <_dtoa_r+0x3d6>
 8007084:	46c8      	mov	r8, r9
 8007086:	9c02      	ldr	r4, [sp, #8]
 8007088:	e78f      	b.n	8006faa <_dtoa_r+0x41a>
 800708a:	9908      	ldr	r1, [sp, #32]
 800708c:	4b29      	ldr	r3, [pc, #164]	; (8007134 <_dtoa_r+0x5a4>)
 800708e:	4421      	add	r1, r4
 8007090:	9112      	str	r1, [sp, #72]	; 0x48
 8007092:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007094:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007098:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800709c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80070a0:	2900      	cmp	r1, #0
 80070a2:	d055      	beq.n	8007150 <_dtoa_r+0x5c0>
 80070a4:	2000      	movs	r0, #0
 80070a6:	4929      	ldr	r1, [pc, #164]	; (800714c <_dtoa_r+0x5bc>)
 80070a8:	f7f9 fb40 	bl	800072c <__aeabi_ddiv>
 80070ac:	463b      	mov	r3, r7
 80070ae:	4632      	mov	r2, r6
 80070b0:	f7f9 f85a 	bl	8000168 <__aeabi_dsub>
 80070b4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80070b8:	9f08      	ldr	r7, [sp, #32]
 80070ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80070be:	f7f9 fcbb 	bl	8000a38 <__aeabi_d2iz>
 80070c2:	4604      	mov	r4, r0
 80070c4:	f7f9 f99e 	bl	8000404 <__aeabi_i2d>
 80070c8:	4602      	mov	r2, r0
 80070ca:	460b      	mov	r3, r1
 80070cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80070d0:	f7f9 f84a 	bl	8000168 <__aeabi_dsub>
 80070d4:	4602      	mov	r2, r0
 80070d6:	460b      	mov	r3, r1
 80070d8:	3430      	adds	r4, #48	; 0x30
 80070da:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80070de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80070e2:	f807 4b01 	strb.w	r4, [r7], #1
 80070e6:	f7f9 fc69 	bl	80009bc <__aeabi_dcmplt>
 80070ea:	2800      	cmp	r0, #0
 80070ec:	d174      	bne.n	80071d8 <_dtoa_r+0x648>
 80070ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80070f2:	2000      	movs	r0, #0
 80070f4:	4911      	ldr	r1, [pc, #68]	; (800713c <_dtoa_r+0x5ac>)
 80070f6:	f7f9 f837 	bl	8000168 <__aeabi_dsub>
 80070fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80070fe:	f7f9 fc5d 	bl	80009bc <__aeabi_dcmplt>
 8007102:	2800      	cmp	r0, #0
 8007104:	f040 80b6 	bne.w	8007274 <_dtoa_r+0x6e4>
 8007108:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800710a:	429f      	cmp	r7, r3
 800710c:	f43f af7a 	beq.w	8007004 <_dtoa_r+0x474>
 8007110:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007114:	2200      	movs	r2, #0
 8007116:	4b0a      	ldr	r3, [pc, #40]	; (8007140 <_dtoa_r+0x5b0>)
 8007118:	f7f9 f9de 	bl	80004d8 <__aeabi_dmul>
 800711c:	2200      	movs	r2, #0
 800711e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007122:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007126:	4b06      	ldr	r3, [pc, #24]	; (8007140 <_dtoa_r+0x5b0>)
 8007128:	f7f9 f9d6 	bl	80004d8 <__aeabi_dmul>
 800712c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007130:	e7c3      	b.n	80070ba <_dtoa_r+0x52a>
 8007132:	bf00      	nop
 8007134:	08009b90 	.word	0x08009b90
 8007138:	08009b68 	.word	0x08009b68
 800713c:	3ff00000 	.word	0x3ff00000
 8007140:	40240000 	.word	0x40240000
 8007144:	401c0000 	.word	0x401c0000
 8007148:	40140000 	.word	0x40140000
 800714c:	3fe00000 	.word	0x3fe00000
 8007150:	4630      	mov	r0, r6
 8007152:	4639      	mov	r1, r7
 8007154:	f7f9 f9c0 	bl	80004d8 <__aeabi_dmul>
 8007158:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800715a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800715e:	9c08      	ldr	r4, [sp, #32]
 8007160:	9314      	str	r3, [sp, #80]	; 0x50
 8007162:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007166:	f7f9 fc67 	bl	8000a38 <__aeabi_d2iz>
 800716a:	9015      	str	r0, [sp, #84]	; 0x54
 800716c:	f7f9 f94a 	bl	8000404 <__aeabi_i2d>
 8007170:	4602      	mov	r2, r0
 8007172:	460b      	mov	r3, r1
 8007174:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007178:	f7f8 fff6 	bl	8000168 <__aeabi_dsub>
 800717c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800717e:	4606      	mov	r6, r0
 8007180:	3330      	adds	r3, #48	; 0x30
 8007182:	f804 3b01 	strb.w	r3, [r4], #1
 8007186:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007188:	460f      	mov	r7, r1
 800718a:	429c      	cmp	r4, r3
 800718c:	f04f 0200 	mov.w	r2, #0
 8007190:	d124      	bne.n	80071dc <_dtoa_r+0x64c>
 8007192:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007196:	4bb3      	ldr	r3, [pc, #716]	; (8007464 <_dtoa_r+0x8d4>)
 8007198:	f7f8 ffe8 	bl	800016c <__adddf3>
 800719c:	4602      	mov	r2, r0
 800719e:	460b      	mov	r3, r1
 80071a0:	4630      	mov	r0, r6
 80071a2:	4639      	mov	r1, r7
 80071a4:	f7f9 fc28 	bl	80009f8 <__aeabi_dcmpgt>
 80071a8:	2800      	cmp	r0, #0
 80071aa:	d162      	bne.n	8007272 <_dtoa_r+0x6e2>
 80071ac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80071b0:	2000      	movs	r0, #0
 80071b2:	49ac      	ldr	r1, [pc, #688]	; (8007464 <_dtoa_r+0x8d4>)
 80071b4:	f7f8 ffd8 	bl	8000168 <__aeabi_dsub>
 80071b8:	4602      	mov	r2, r0
 80071ba:	460b      	mov	r3, r1
 80071bc:	4630      	mov	r0, r6
 80071be:	4639      	mov	r1, r7
 80071c0:	f7f9 fbfc 	bl	80009bc <__aeabi_dcmplt>
 80071c4:	2800      	cmp	r0, #0
 80071c6:	f43f af1d 	beq.w	8007004 <_dtoa_r+0x474>
 80071ca:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80071cc:	1e7b      	subs	r3, r7, #1
 80071ce:	9314      	str	r3, [sp, #80]	; 0x50
 80071d0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80071d4:	2b30      	cmp	r3, #48	; 0x30
 80071d6:	d0f8      	beq.n	80071ca <_dtoa_r+0x63a>
 80071d8:	46c1      	mov	r9, r8
 80071da:	e03a      	b.n	8007252 <_dtoa_r+0x6c2>
 80071dc:	4ba2      	ldr	r3, [pc, #648]	; (8007468 <_dtoa_r+0x8d8>)
 80071de:	f7f9 f97b 	bl	80004d8 <__aeabi_dmul>
 80071e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80071e6:	e7bc      	b.n	8007162 <_dtoa_r+0x5d2>
 80071e8:	9f08      	ldr	r7, [sp, #32]
 80071ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80071ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80071f2:	f7f9 fa9b 	bl	800072c <__aeabi_ddiv>
 80071f6:	f7f9 fc1f 	bl	8000a38 <__aeabi_d2iz>
 80071fa:	4604      	mov	r4, r0
 80071fc:	f7f9 f902 	bl	8000404 <__aeabi_i2d>
 8007200:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007204:	f7f9 f968 	bl	80004d8 <__aeabi_dmul>
 8007208:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800720c:	460b      	mov	r3, r1
 800720e:	4602      	mov	r2, r0
 8007210:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007214:	f7f8 ffa8 	bl	8000168 <__aeabi_dsub>
 8007218:	f807 6b01 	strb.w	r6, [r7], #1
 800721c:	9e08      	ldr	r6, [sp, #32]
 800721e:	9b02      	ldr	r3, [sp, #8]
 8007220:	1bbe      	subs	r6, r7, r6
 8007222:	42b3      	cmp	r3, r6
 8007224:	d13a      	bne.n	800729c <_dtoa_r+0x70c>
 8007226:	4602      	mov	r2, r0
 8007228:	460b      	mov	r3, r1
 800722a:	f7f8 ff9f 	bl	800016c <__adddf3>
 800722e:	4602      	mov	r2, r0
 8007230:	460b      	mov	r3, r1
 8007232:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007236:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800723a:	f7f9 fbdd 	bl	80009f8 <__aeabi_dcmpgt>
 800723e:	bb58      	cbnz	r0, 8007298 <_dtoa_r+0x708>
 8007240:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007244:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007248:	f7f9 fbae 	bl	80009a8 <__aeabi_dcmpeq>
 800724c:	b108      	cbz	r0, 8007252 <_dtoa_r+0x6c2>
 800724e:	07e1      	lsls	r1, r4, #31
 8007250:	d422      	bmi.n	8007298 <_dtoa_r+0x708>
 8007252:	4628      	mov	r0, r5
 8007254:	4651      	mov	r1, sl
 8007256:	f000 fe69 	bl	8007f2c <_Bfree>
 800725a:	2300      	movs	r3, #0
 800725c:	703b      	strb	r3, [r7, #0]
 800725e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007260:	f109 0001 	add.w	r0, r9, #1
 8007264:	6018      	str	r0, [r3, #0]
 8007266:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007268:	2b00      	cmp	r3, #0
 800726a:	f43f acdf 	beq.w	8006c2c <_dtoa_r+0x9c>
 800726e:	601f      	str	r7, [r3, #0]
 8007270:	e4dc      	b.n	8006c2c <_dtoa_r+0x9c>
 8007272:	4627      	mov	r7, r4
 8007274:	463b      	mov	r3, r7
 8007276:	461f      	mov	r7, r3
 8007278:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800727c:	2a39      	cmp	r2, #57	; 0x39
 800727e:	d107      	bne.n	8007290 <_dtoa_r+0x700>
 8007280:	9a08      	ldr	r2, [sp, #32]
 8007282:	429a      	cmp	r2, r3
 8007284:	d1f7      	bne.n	8007276 <_dtoa_r+0x6e6>
 8007286:	2230      	movs	r2, #48	; 0x30
 8007288:	9908      	ldr	r1, [sp, #32]
 800728a:	f108 0801 	add.w	r8, r8, #1
 800728e:	700a      	strb	r2, [r1, #0]
 8007290:	781a      	ldrb	r2, [r3, #0]
 8007292:	3201      	adds	r2, #1
 8007294:	701a      	strb	r2, [r3, #0]
 8007296:	e79f      	b.n	80071d8 <_dtoa_r+0x648>
 8007298:	46c8      	mov	r8, r9
 800729a:	e7eb      	b.n	8007274 <_dtoa_r+0x6e4>
 800729c:	2200      	movs	r2, #0
 800729e:	4b72      	ldr	r3, [pc, #456]	; (8007468 <_dtoa_r+0x8d8>)
 80072a0:	f7f9 f91a 	bl	80004d8 <__aeabi_dmul>
 80072a4:	4602      	mov	r2, r0
 80072a6:	460b      	mov	r3, r1
 80072a8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80072ac:	2200      	movs	r2, #0
 80072ae:	2300      	movs	r3, #0
 80072b0:	f7f9 fb7a 	bl	80009a8 <__aeabi_dcmpeq>
 80072b4:	2800      	cmp	r0, #0
 80072b6:	d098      	beq.n	80071ea <_dtoa_r+0x65a>
 80072b8:	e7cb      	b.n	8007252 <_dtoa_r+0x6c2>
 80072ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80072bc:	2a00      	cmp	r2, #0
 80072be:	f000 80cd 	beq.w	800745c <_dtoa_r+0x8cc>
 80072c2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80072c4:	2a01      	cmp	r2, #1
 80072c6:	f300 80af 	bgt.w	8007428 <_dtoa_r+0x898>
 80072ca:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80072cc:	2a00      	cmp	r2, #0
 80072ce:	f000 80a7 	beq.w	8007420 <_dtoa_r+0x890>
 80072d2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80072d6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80072d8:	9f06      	ldr	r7, [sp, #24]
 80072da:	9a06      	ldr	r2, [sp, #24]
 80072dc:	2101      	movs	r1, #1
 80072de:	441a      	add	r2, r3
 80072e0:	9206      	str	r2, [sp, #24]
 80072e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072e4:	4628      	mov	r0, r5
 80072e6:	441a      	add	r2, r3
 80072e8:	9209      	str	r2, [sp, #36]	; 0x24
 80072ea:	f000 ff23 	bl	8008134 <__i2b>
 80072ee:	4606      	mov	r6, r0
 80072f0:	2f00      	cmp	r7, #0
 80072f2:	dd0c      	ble.n	800730e <_dtoa_r+0x77e>
 80072f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	dd09      	ble.n	800730e <_dtoa_r+0x77e>
 80072fa:	42bb      	cmp	r3, r7
 80072fc:	bfa8      	it	ge
 80072fe:	463b      	movge	r3, r7
 8007300:	9a06      	ldr	r2, [sp, #24]
 8007302:	1aff      	subs	r7, r7, r3
 8007304:	1ad2      	subs	r2, r2, r3
 8007306:	9206      	str	r2, [sp, #24]
 8007308:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800730a:	1ad3      	subs	r3, r2, r3
 800730c:	9309      	str	r3, [sp, #36]	; 0x24
 800730e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007310:	b1f3      	cbz	r3, 8007350 <_dtoa_r+0x7c0>
 8007312:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007314:	2b00      	cmp	r3, #0
 8007316:	f000 80a9 	beq.w	800746c <_dtoa_r+0x8dc>
 800731a:	2c00      	cmp	r4, #0
 800731c:	dd10      	ble.n	8007340 <_dtoa_r+0x7b0>
 800731e:	4631      	mov	r1, r6
 8007320:	4622      	mov	r2, r4
 8007322:	4628      	mov	r0, r5
 8007324:	f000 ffc0 	bl	80082a8 <__pow5mult>
 8007328:	4652      	mov	r2, sl
 800732a:	4601      	mov	r1, r0
 800732c:	4606      	mov	r6, r0
 800732e:	4628      	mov	r0, r5
 8007330:	f000 ff16 	bl	8008160 <__multiply>
 8007334:	4680      	mov	r8, r0
 8007336:	4651      	mov	r1, sl
 8007338:	4628      	mov	r0, r5
 800733a:	f000 fdf7 	bl	8007f2c <_Bfree>
 800733e:	46c2      	mov	sl, r8
 8007340:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007342:	1b1a      	subs	r2, r3, r4
 8007344:	d004      	beq.n	8007350 <_dtoa_r+0x7c0>
 8007346:	4651      	mov	r1, sl
 8007348:	4628      	mov	r0, r5
 800734a:	f000 ffad 	bl	80082a8 <__pow5mult>
 800734e:	4682      	mov	sl, r0
 8007350:	2101      	movs	r1, #1
 8007352:	4628      	mov	r0, r5
 8007354:	f000 feee 	bl	8008134 <__i2b>
 8007358:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800735a:	4604      	mov	r4, r0
 800735c:	2b00      	cmp	r3, #0
 800735e:	f340 8087 	ble.w	8007470 <_dtoa_r+0x8e0>
 8007362:	461a      	mov	r2, r3
 8007364:	4601      	mov	r1, r0
 8007366:	4628      	mov	r0, r5
 8007368:	f000 ff9e 	bl	80082a8 <__pow5mult>
 800736c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800736e:	4604      	mov	r4, r0
 8007370:	2b01      	cmp	r3, #1
 8007372:	f340 8080 	ble.w	8007476 <_dtoa_r+0x8e6>
 8007376:	f04f 0800 	mov.w	r8, #0
 800737a:	6923      	ldr	r3, [r4, #16]
 800737c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007380:	6918      	ldr	r0, [r3, #16]
 8007382:	f000 fe89 	bl	8008098 <__hi0bits>
 8007386:	f1c0 0020 	rsb	r0, r0, #32
 800738a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800738c:	4418      	add	r0, r3
 800738e:	f010 001f 	ands.w	r0, r0, #31
 8007392:	f000 8092 	beq.w	80074ba <_dtoa_r+0x92a>
 8007396:	f1c0 0320 	rsb	r3, r0, #32
 800739a:	2b04      	cmp	r3, #4
 800739c:	f340 808a 	ble.w	80074b4 <_dtoa_r+0x924>
 80073a0:	f1c0 001c 	rsb	r0, r0, #28
 80073a4:	9b06      	ldr	r3, [sp, #24]
 80073a6:	4407      	add	r7, r0
 80073a8:	4403      	add	r3, r0
 80073aa:	9306      	str	r3, [sp, #24]
 80073ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073ae:	4403      	add	r3, r0
 80073b0:	9309      	str	r3, [sp, #36]	; 0x24
 80073b2:	9b06      	ldr	r3, [sp, #24]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	dd05      	ble.n	80073c4 <_dtoa_r+0x834>
 80073b8:	4651      	mov	r1, sl
 80073ba:	461a      	mov	r2, r3
 80073bc:	4628      	mov	r0, r5
 80073be:	f000 ffcd 	bl	800835c <__lshift>
 80073c2:	4682      	mov	sl, r0
 80073c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	dd05      	ble.n	80073d6 <_dtoa_r+0x846>
 80073ca:	4621      	mov	r1, r4
 80073cc:	461a      	mov	r2, r3
 80073ce:	4628      	mov	r0, r5
 80073d0:	f000 ffc4 	bl	800835c <__lshift>
 80073d4:	4604      	mov	r4, r0
 80073d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d070      	beq.n	80074be <_dtoa_r+0x92e>
 80073dc:	4621      	mov	r1, r4
 80073de:	4650      	mov	r0, sl
 80073e0:	f001 f828 	bl	8008434 <__mcmp>
 80073e4:	2800      	cmp	r0, #0
 80073e6:	da6a      	bge.n	80074be <_dtoa_r+0x92e>
 80073e8:	2300      	movs	r3, #0
 80073ea:	4651      	mov	r1, sl
 80073ec:	220a      	movs	r2, #10
 80073ee:	4628      	mov	r0, r5
 80073f0:	f000 fdbe 	bl	8007f70 <__multadd>
 80073f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073f6:	4682      	mov	sl, r0
 80073f8:	f109 39ff 	add.w	r9, r9, #4294967295
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	f000 8193 	beq.w	8007728 <_dtoa_r+0xb98>
 8007402:	4631      	mov	r1, r6
 8007404:	2300      	movs	r3, #0
 8007406:	220a      	movs	r2, #10
 8007408:	4628      	mov	r0, r5
 800740a:	f000 fdb1 	bl	8007f70 <__multadd>
 800740e:	f1bb 0f00 	cmp.w	fp, #0
 8007412:	4606      	mov	r6, r0
 8007414:	f300 8093 	bgt.w	800753e <_dtoa_r+0x9ae>
 8007418:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800741a:	2b02      	cmp	r3, #2
 800741c:	dc57      	bgt.n	80074ce <_dtoa_r+0x93e>
 800741e:	e08e      	b.n	800753e <_dtoa_r+0x9ae>
 8007420:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007422:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007426:	e756      	b.n	80072d6 <_dtoa_r+0x746>
 8007428:	9b02      	ldr	r3, [sp, #8]
 800742a:	1e5c      	subs	r4, r3, #1
 800742c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800742e:	42a3      	cmp	r3, r4
 8007430:	bfb7      	itett	lt
 8007432:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007434:	1b1c      	subge	r4, r3, r4
 8007436:	1ae2      	sublt	r2, r4, r3
 8007438:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800743a:	bfbe      	ittt	lt
 800743c:	940a      	strlt	r4, [sp, #40]	; 0x28
 800743e:	189b      	addlt	r3, r3, r2
 8007440:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007442:	9b02      	ldr	r3, [sp, #8]
 8007444:	bfb8      	it	lt
 8007446:	2400      	movlt	r4, #0
 8007448:	2b00      	cmp	r3, #0
 800744a:	bfbb      	ittet	lt
 800744c:	9b06      	ldrlt	r3, [sp, #24]
 800744e:	9a02      	ldrlt	r2, [sp, #8]
 8007450:	9f06      	ldrge	r7, [sp, #24]
 8007452:	1a9f      	sublt	r7, r3, r2
 8007454:	bfac      	ite	ge
 8007456:	9b02      	ldrge	r3, [sp, #8]
 8007458:	2300      	movlt	r3, #0
 800745a:	e73e      	b.n	80072da <_dtoa_r+0x74a>
 800745c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800745e:	9f06      	ldr	r7, [sp, #24]
 8007460:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007462:	e745      	b.n	80072f0 <_dtoa_r+0x760>
 8007464:	3fe00000 	.word	0x3fe00000
 8007468:	40240000 	.word	0x40240000
 800746c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800746e:	e76a      	b.n	8007346 <_dtoa_r+0x7b6>
 8007470:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007472:	2b01      	cmp	r3, #1
 8007474:	dc19      	bgt.n	80074aa <_dtoa_r+0x91a>
 8007476:	9b04      	ldr	r3, [sp, #16]
 8007478:	b9bb      	cbnz	r3, 80074aa <_dtoa_r+0x91a>
 800747a:	9b05      	ldr	r3, [sp, #20]
 800747c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007480:	b99b      	cbnz	r3, 80074aa <_dtoa_r+0x91a>
 8007482:	9b05      	ldr	r3, [sp, #20]
 8007484:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007488:	0d1b      	lsrs	r3, r3, #20
 800748a:	051b      	lsls	r3, r3, #20
 800748c:	b183      	cbz	r3, 80074b0 <_dtoa_r+0x920>
 800748e:	f04f 0801 	mov.w	r8, #1
 8007492:	9b06      	ldr	r3, [sp, #24]
 8007494:	3301      	adds	r3, #1
 8007496:	9306      	str	r3, [sp, #24]
 8007498:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800749a:	3301      	adds	r3, #1
 800749c:	9309      	str	r3, [sp, #36]	; 0x24
 800749e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	f47f af6a 	bne.w	800737a <_dtoa_r+0x7ea>
 80074a6:	2001      	movs	r0, #1
 80074a8:	e76f      	b.n	800738a <_dtoa_r+0x7fa>
 80074aa:	f04f 0800 	mov.w	r8, #0
 80074ae:	e7f6      	b.n	800749e <_dtoa_r+0x90e>
 80074b0:	4698      	mov	r8, r3
 80074b2:	e7f4      	b.n	800749e <_dtoa_r+0x90e>
 80074b4:	f43f af7d 	beq.w	80073b2 <_dtoa_r+0x822>
 80074b8:	4618      	mov	r0, r3
 80074ba:	301c      	adds	r0, #28
 80074bc:	e772      	b.n	80073a4 <_dtoa_r+0x814>
 80074be:	9b02      	ldr	r3, [sp, #8]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	dc36      	bgt.n	8007532 <_dtoa_r+0x9a2>
 80074c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80074c6:	2b02      	cmp	r3, #2
 80074c8:	dd33      	ble.n	8007532 <_dtoa_r+0x9a2>
 80074ca:	f8dd b008 	ldr.w	fp, [sp, #8]
 80074ce:	f1bb 0f00 	cmp.w	fp, #0
 80074d2:	d10d      	bne.n	80074f0 <_dtoa_r+0x960>
 80074d4:	4621      	mov	r1, r4
 80074d6:	465b      	mov	r3, fp
 80074d8:	2205      	movs	r2, #5
 80074da:	4628      	mov	r0, r5
 80074dc:	f000 fd48 	bl	8007f70 <__multadd>
 80074e0:	4601      	mov	r1, r0
 80074e2:	4604      	mov	r4, r0
 80074e4:	4650      	mov	r0, sl
 80074e6:	f000 ffa5 	bl	8008434 <__mcmp>
 80074ea:	2800      	cmp	r0, #0
 80074ec:	f73f adb6 	bgt.w	800705c <_dtoa_r+0x4cc>
 80074f0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80074f2:	9f08      	ldr	r7, [sp, #32]
 80074f4:	ea6f 0903 	mvn.w	r9, r3
 80074f8:	f04f 0800 	mov.w	r8, #0
 80074fc:	4621      	mov	r1, r4
 80074fe:	4628      	mov	r0, r5
 8007500:	f000 fd14 	bl	8007f2c <_Bfree>
 8007504:	2e00      	cmp	r6, #0
 8007506:	f43f aea4 	beq.w	8007252 <_dtoa_r+0x6c2>
 800750a:	f1b8 0f00 	cmp.w	r8, #0
 800750e:	d005      	beq.n	800751c <_dtoa_r+0x98c>
 8007510:	45b0      	cmp	r8, r6
 8007512:	d003      	beq.n	800751c <_dtoa_r+0x98c>
 8007514:	4641      	mov	r1, r8
 8007516:	4628      	mov	r0, r5
 8007518:	f000 fd08 	bl	8007f2c <_Bfree>
 800751c:	4631      	mov	r1, r6
 800751e:	4628      	mov	r0, r5
 8007520:	f000 fd04 	bl	8007f2c <_Bfree>
 8007524:	e695      	b.n	8007252 <_dtoa_r+0x6c2>
 8007526:	2400      	movs	r4, #0
 8007528:	4626      	mov	r6, r4
 800752a:	e7e1      	b.n	80074f0 <_dtoa_r+0x960>
 800752c:	46c1      	mov	r9, r8
 800752e:	4626      	mov	r6, r4
 8007530:	e594      	b.n	800705c <_dtoa_r+0x4cc>
 8007532:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007534:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007538:	2b00      	cmp	r3, #0
 800753a:	f000 80fc 	beq.w	8007736 <_dtoa_r+0xba6>
 800753e:	2f00      	cmp	r7, #0
 8007540:	dd05      	ble.n	800754e <_dtoa_r+0x9be>
 8007542:	4631      	mov	r1, r6
 8007544:	463a      	mov	r2, r7
 8007546:	4628      	mov	r0, r5
 8007548:	f000 ff08 	bl	800835c <__lshift>
 800754c:	4606      	mov	r6, r0
 800754e:	f1b8 0f00 	cmp.w	r8, #0
 8007552:	d05c      	beq.n	800760e <_dtoa_r+0xa7e>
 8007554:	4628      	mov	r0, r5
 8007556:	6871      	ldr	r1, [r6, #4]
 8007558:	f000 fca8 	bl	8007eac <_Balloc>
 800755c:	4607      	mov	r7, r0
 800755e:	b928      	cbnz	r0, 800756c <_dtoa_r+0x9dc>
 8007560:	4602      	mov	r2, r0
 8007562:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007566:	4b7e      	ldr	r3, [pc, #504]	; (8007760 <_dtoa_r+0xbd0>)
 8007568:	f7ff bb26 	b.w	8006bb8 <_dtoa_r+0x28>
 800756c:	6932      	ldr	r2, [r6, #16]
 800756e:	f106 010c 	add.w	r1, r6, #12
 8007572:	3202      	adds	r2, #2
 8007574:	0092      	lsls	r2, r2, #2
 8007576:	300c      	adds	r0, #12
 8007578:	f000 fc8a 	bl	8007e90 <memcpy>
 800757c:	2201      	movs	r2, #1
 800757e:	4639      	mov	r1, r7
 8007580:	4628      	mov	r0, r5
 8007582:	f000 feeb 	bl	800835c <__lshift>
 8007586:	46b0      	mov	r8, r6
 8007588:	4606      	mov	r6, r0
 800758a:	9b08      	ldr	r3, [sp, #32]
 800758c:	3301      	adds	r3, #1
 800758e:	9302      	str	r3, [sp, #8]
 8007590:	9b08      	ldr	r3, [sp, #32]
 8007592:	445b      	add	r3, fp
 8007594:	930a      	str	r3, [sp, #40]	; 0x28
 8007596:	9b04      	ldr	r3, [sp, #16]
 8007598:	f003 0301 	and.w	r3, r3, #1
 800759c:	9309      	str	r3, [sp, #36]	; 0x24
 800759e:	9b02      	ldr	r3, [sp, #8]
 80075a0:	4621      	mov	r1, r4
 80075a2:	4650      	mov	r0, sl
 80075a4:	f103 3bff 	add.w	fp, r3, #4294967295
 80075a8:	f7ff fa64 	bl	8006a74 <quorem>
 80075ac:	4603      	mov	r3, r0
 80075ae:	4641      	mov	r1, r8
 80075b0:	3330      	adds	r3, #48	; 0x30
 80075b2:	9004      	str	r0, [sp, #16]
 80075b4:	4650      	mov	r0, sl
 80075b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80075b8:	f000 ff3c 	bl	8008434 <__mcmp>
 80075bc:	4632      	mov	r2, r6
 80075be:	9006      	str	r0, [sp, #24]
 80075c0:	4621      	mov	r1, r4
 80075c2:	4628      	mov	r0, r5
 80075c4:	f000 ff52 	bl	800846c <__mdiff>
 80075c8:	68c2      	ldr	r2, [r0, #12]
 80075ca:	4607      	mov	r7, r0
 80075cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075ce:	bb02      	cbnz	r2, 8007612 <_dtoa_r+0xa82>
 80075d0:	4601      	mov	r1, r0
 80075d2:	4650      	mov	r0, sl
 80075d4:	f000 ff2e 	bl	8008434 <__mcmp>
 80075d8:	4602      	mov	r2, r0
 80075da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075dc:	4639      	mov	r1, r7
 80075de:	4628      	mov	r0, r5
 80075e0:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80075e4:	f000 fca2 	bl	8007f2c <_Bfree>
 80075e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80075ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80075ec:	9f02      	ldr	r7, [sp, #8]
 80075ee:	ea43 0102 	orr.w	r1, r3, r2
 80075f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075f4:	430b      	orrs	r3, r1
 80075f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075f8:	d10d      	bne.n	8007616 <_dtoa_r+0xa86>
 80075fa:	2b39      	cmp	r3, #57	; 0x39
 80075fc:	d027      	beq.n	800764e <_dtoa_r+0xabe>
 80075fe:	9a06      	ldr	r2, [sp, #24]
 8007600:	2a00      	cmp	r2, #0
 8007602:	dd01      	ble.n	8007608 <_dtoa_r+0xa78>
 8007604:	9b04      	ldr	r3, [sp, #16]
 8007606:	3331      	adds	r3, #49	; 0x31
 8007608:	f88b 3000 	strb.w	r3, [fp]
 800760c:	e776      	b.n	80074fc <_dtoa_r+0x96c>
 800760e:	4630      	mov	r0, r6
 8007610:	e7b9      	b.n	8007586 <_dtoa_r+0x9f6>
 8007612:	2201      	movs	r2, #1
 8007614:	e7e2      	b.n	80075dc <_dtoa_r+0xa4c>
 8007616:	9906      	ldr	r1, [sp, #24]
 8007618:	2900      	cmp	r1, #0
 800761a:	db04      	blt.n	8007626 <_dtoa_r+0xa96>
 800761c:	9822      	ldr	r0, [sp, #136]	; 0x88
 800761e:	4301      	orrs	r1, r0
 8007620:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007622:	4301      	orrs	r1, r0
 8007624:	d120      	bne.n	8007668 <_dtoa_r+0xad8>
 8007626:	2a00      	cmp	r2, #0
 8007628:	ddee      	ble.n	8007608 <_dtoa_r+0xa78>
 800762a:	4651      	mov	r1, sl
 800762c:	2201      	movs	r2, #1
 800762e:	4628      	mov	r0, r5
 8007630:	9302      	str	r3, [sp, #8]
 8007632:	f000 fe93 	bl	800835c <__lshift>
 8007636:	4621      	mov	r1, r4
 8007638:	4682      	mov	sl, r0
 800763a:	f000 fefb 	bl	8008434 <__mcmp>
 800763e:	2800      	cmp	r0, #0
 8007640:	9b02      	ldr	r3, [sp, #8]
 8007642:	dc02      	bgt.n	800764a <_dtoa_r+0xaba>
 8007644:	d1e0      	bne.n	8007608 <_dtoa_r+0xa78>
 8007646:	07da      	lsls	r2, r3, #31
 8007648:	d5de      	bpl.n	8007608 <_dtoa_r+0xa78>
 800764a:	2b39      	cmp	r3, #57	; 0x39
 800764c:	d1da      	bne.n	8007604 <_dtoa_r+0xa74>
 800764e:	2339      	movs	r3, #57	; 0x39
 8007650:	f88b 3000 	strb.w	r3, [fp]
 8007654:	463b      	mov	r3, r7
 8007656:	461f      	mov	r7, r3
 8007658:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800765c:	3b01      	subs	r3, #1
 800765e:	2a39      	cmp	r2, #57	; 0x39
 8007660:	d050      	beq.n	8007704 <_dtoa_r+0xb74>
 8007662:	3201      	adds	r2, #1
 8007664:	701a      	strb	r2, [r3, #0]
 8007666:	e749      	b.n	80074fc <_dtoa_r+0x96c>
 8007668:	2a00      	cmp	r2, #0
 800766a:	dd03      	ble.n	8007674 <_dtoa_r+0xae4>
 800766c:	2b39      	cmp	r3, #57	; 0x39
 800766e:	d0ee      	beq.n	800764e <_dtoa_r+0xabe>
 8007670:	3301      	adds	r3, #1
 8007672:	e7c9      	b.n	8007608 <_dtoa_r+0xa78>
 8007674:	9a02      	ldr	r2, [sp, #8]
 8007676:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007678:	f802 3c01 	strb.w	r3, [r2, #-1]
 800767c:	428a      	cmp	r2, r1
 800767e:	d02a      	beq.n	80076d6 <_dtoa_r+0xb46>
 8007680:	4651      	mov	r1, sl
 8007682:	2300      	movs	r3, #0
 8007684:	220a      	movs	r2, #10
 8007686:	4628      	mov	r0, r5
 8007688:	f000 fc72 	bl	8007f70 <__multadd>
 800768c:	45b0      	cmp	r8, r6
 800768e:	4682      	mov	sl, r0
 8007690:	f04f 0300 	mov.w	r3, #0
 8007694:	f04f 020a 	mov.w	r2, #10
 8007698:	4641      	mov	r1, r8
 800769a:	4628      	mov	r0, r5
 800769c:	d107      	bne.n	80076ae <_dtoa_r+0xb1e>
 800769e:	f000 fc67 	bl	8007f70 <__multadd>
 80076a2:	4680      	mov	r8, r0
 80076a4:	4606      	mov	r6, r0
 80076a6:	9b02      	ldr	r3, [sp, #8]
 80076a8:	3301      	adds	r3, #1
 80076aa:	9302      	str	r3, [sp, #8]
 80076ac:	e777      	b.n	800759e <_dtoa_r+0xa0e>
 80076ae:	f000 fc5f 	bl	8007f70 <__multadd>
 80076b2:	4631      	mov	r1, r6
 80076b4:	4680      	mov	r8, r0
 80076b6:	2300      	movs	r3, #0
 80076b8:	220a      	movs	r2, #10
 80076ba:	4628      	mov	r0, r5
 80076bc:	f000 fc58 	bl	8007f70 <__multadd>
 80076c0:	4606      	mov	r6, r0
 80076c2:	e7f0      	b.n	80076a6 <_dtoa_r+0xb16>
 80076c4:	f1bb 0f00 	cmp.w	fp, #0
 80076c8:	bfcc      	ite	gt
 80076ca:	465f      	movgt	r7, fp
 80076cc:	2701      	movle	r7, #1
 80076ce:	f04f 0800 	mov.w	r8, #0
 80076d2:	9a08      	ldr	r2, [sp, #32]
 80076d4:	4417      	add	r7, r2
 80076d6:	4651      	mov	r1, sl
 80076d8:	2201      	movs	r2, #1
 80076da:	4628      	mov	r0, r5
 80076dc:	9302      	str	r3, [sp, #8]
 80076de:	f000 fe3d 	bl	800835c <__lshift>
 80076e2:	4621      	mov	r1, r4
 80076e4:	4682      	mov	sl, r0
 80076e6:	f000 fea5 	bl	8008434 <__mcmp>
 80076ea:	2800      	cmp	r0, #0
 80076ec:	dcb2      	bgt.n	8007654 <_dtoa_r+0xac4>
 80076ee:	d102      	bne.n	80076f6 <_dtoa_r+0xb66>
 80076f0:	9b02      	ldr	r3, [sp, #8]
 80076f2:	07db      	lsls	r3, r3, #31
 80076f4:	d4ae      	bmi.n	8007654 <_dtoa_r+0xac4>
 80076f6:	463b      	mov	r3, r7
 80076f8:	461f      	mov	r7, r3
 80076fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80076fe:	2a30      	cmp	r2, #48	; 0x30
 8007700:	d0fa      	beq.n	80076f8 <_dtoa_r+0xb68>
 8007702:	e6fb      	b.n	80074fc <_dtoa_r+0x96c>
 8007704:	9a08      	ldr	r2, [sp, #32]
 8007706:	429a      	cmp	r2, r3
 8007708:	d1a5      	bne.n	8007656 <_dtoa_r+0xac6>
 800770a:	2331      	movs	r3, #49	; 0x31
 800770c:	f109 0901 	add.w	r9, r9, #1
 8007710:	7013      	strb	r3, [r2, #0]
 8007712:	e6f3      	b.n	80074fc <_dtoa_r+0x96c>
 8007714:	4b13      	ldr	r3, [pc, #76]	; (8007764 <_dtoa_r+0xbd4>)
 8007716:	f7ff baa7 	b.w	8006c68 <_dtoa_r+0xd8>
 800771a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800771c:	2b00      	cmp	r3, #0
 800771e:	f47f aa80 	bne.w	8006c22 <_dtoa_r+0x92>
 8007722:	4b11      	ldr	r3, [pc, #68]	; (8007768 <_dtoa_r+0xbd8>)
 8007724:	f7ff baa0 	b.w	8006c68 <_dtoa_r+0xd8>
 8007728:	f1bb 0f00 	cmp.w	fp, #0
 800772c:	dc03      	bgt.n	8007736 <_dtoa_r+0xba6>
 800772e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007730:	2b02      	cmp	r3, #2
 8007732:	f73f aecc 	bgt.w	80074ce <_dtoa_r+0x93e>
 8007736:	9f08      	ldr	r7, [sp, #32]
 8007738:	4621      	mov	r1, r4
 800773a:	4650      	mov	r0, sl
 800773c:	f7ff f99a 	bl	8006a74 <quorem>
 8007740:	9a08      	ldr	r2, [sp, #32]
 8007742:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007746:	f807 3b01 	strb.w	r3, [r7], #1
 800774a:	1aba      	subs	r2, r7, r2
 800774c:	4593      	cmp	fp, r2
 800774e:	ddb9      	ble.n	80076c4 <_dtoa_r+0xb34>
 8007750:	4651      	mov	r1, sl
 8007752:	2300      	movs	r3, #0
 8007754:	220a      	movs	r2, #10
 8007756:	4628      	mov	r0, r5
 8007758:	f000 fc0a 	bl	8007f70 <__multadd>
 800775c:	4682      	mov	sl, r0
 800775e:	e7eb      	b.n	8007738 <_dtoa_r+0xba8>
 8007760:	08009a74 	.word	0x08009a74
 8007764:	08009874 	.word	0x08009874
 8007768:	080099f1 	.word	0x080099f1

0800776c <rshift>:
 800776c:	6903      	ldr	r3, [r0, #16]
 800776e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007772:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007776:	f100 0414 	add.w	r4, r0, #20
 800777a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800777e:	dd46      	ble.n	800780e <rshift+0xa2>
 8007780:	f011 011f 	ands.w	r1, r1, #31
 8007784:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007788:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800778c:	d10c      	bne.n	80077a8 <rshift+0x3c>
 800778e:	4629      	mov	r1, r5
 8007790:	f100 0710 	add.w	r7, r0, #16
 8007794:	42b1      	cmp	r1, r6
 8007796:	d335      	bcc.n	8007804 <rshift+0x98>
 8007798:	1a9b      	subs	r3, r3, r2
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	1eea      	subs	r2, r5, #3
 800779e:	4296      	cmp	r6, r2
 80077a0:	bf38      	it	cc
 80077a2:	2300      	movcc	r3, #0
 80077a4:	4423      	add	r3, r4
 80077a6:	e015      	b.n	80077d4 <rshift+0x68>
 80077a8:	46a1      	mov	r9, r4
 80077aa:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80077ae:	f1c1 0820 	rsb	r8, r1, #32
 80077b2:	40cf      	lsrs	r7, r1
 80077b4:	f105 0e04 	add.w	lr, r5, #4
 80077b8:	4576      	cmp	r6, lr
 80077ba:	46f4      	mov	ip, lr
 80077bc:	d816      	bhi.n	80077ec <rshift+0x80>
 80077be:	1a9b      	subs	r3, r3, r2
 80077c0:	009a      	lsls	r2, r3, #2
 80077c2:	3a04      	subs	r2, #4
 80077c4:	3501      	adds	r5, #1
 80077c6:	42ae      	cmp	r6, r5
 80077c8:	bf38      	it	cc
 80077ca:	2200      	movcc	r2, #0
 80077cc:	18a3      	adds	r3, r4, r2
 80077ce:	50a7      	str	r7, [r4, r2]
 80077d0:	b107      	cbz	r7, 80077d4 <rshift+0x68>
 80077d2:	3304      	adds	r3, #4
 80077d4:	42a3      	cmp	r3, r4
 80077d6:	eba3 0204 	sub.w	r2, r3, r4
 80077da:	bf08      	it	eq
 80077dc:	2300      	moveq	r3, #0
 80077de:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80077e2:	6102      	str	r2, [r0, #16]
 80077e4:	bf08      	it	eq
 80077e6:	6143      	streq	r3, [r0, #20]
 80077e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80077ec:	f8dc c000 	ldr.w	ip, [ip]
 80077f0:	fa0c fc08 	lsl.w	ip, ip, r8
 80077f4:	ea4c 0707 	orr.w	r7, ip, r7
 80077f8:	f849 7b04 	str.w	r7, [r9], #4
 80077fc:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007800:	40cf      	lsrs	r7, r1
 8007802:	e7d9      	b.n	80077b8 <rshift+0x4c>
 8007804:	f851 cb04 	ldr.w	ip, [r1], #4
 8007808:	f847 cf04 	str.w	ip, [r7, #4]!
 800780c:	e7c2      	b.n	8007794 <rshift+0x28>
 800780e:	4623      	mov	r3, r4
 8007810:	e7e0      	b.n	80077d4 <rshift+0x68>

08007812 <__hexdig_fun>:
 8007812:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007816:	2b09      	cmp	r3, #9
 8007818:	d802      	bhi.n	8007820 <__hexdig_fun+0xe>
 800781a:	3820      	subs	r0, #32
 800781c:	b2c0      	uxtb	r0, r0
 800781e:	4770      	bx	lr
 8007820:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007824:	2b05      	cmp	r3, #5
 8007826:	d801      	bhi.n	800782c <__hexdig_fun+0x1a>
 8007828:	3847      	subs	r0, #71	; 0x47
 800782a:	e7f7      	b.n	800781c <__hexdig_fun+0xa>
 800782c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007830:	2b05      	cmp	r3, #5
 8007832:	d801      	bhi.n	8007838 <__hexdig_fun+0x26>
 8007834:	3827      	subs	r0, #39	; 0x27
 8007836:	e7f1      	b.n	800781c <__hexdig_fun+0xa>
 8007838:	2000      	movs	r0, #0
 800783a:	4770      	bx	lr

0800783c <__gethex>:
 800783c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007840:	b08b      	sub	sp, #44	; 0x2c
 8007842:	9306      	str	r3, [sp, #24]
 8007844:	4bb9      	ldr	r3, [pc, #740]	; (8007b2c <__gethex+0x2f0>)
 8007846:	9002      	str	r0, [sp, #8]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	468b      	mov	fp, r1
 800784c:	4618      	mov	r0, r3
 800784e:	4690      	mov	r8, r2
 8007850:	9303      	str	r3, [sp, #12]
 8007852:	f7f8 fc7d 	bl	8000150 <strlen>
 8007856:	4682      	mov	sl, r0
 8007858:	9b03      	ldr	r3, [sp, #12]
 800785a:	f8db 2000 	ldr.w	r2, [fp]
 800785e:	4403      	add	r3, r0
 8007860:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007864:	9307      	str	r3, [sp, #28]
 8007866:	1c93      	adds	r3, r2, #2
 8007868:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800786c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007870:	32fe      	adds	r2, #254	; 0xfe
 8007872:	18d1      	adds	r1, r2, r3
 8007874:	461f      	mov	r7, r3
 8007876:	f813 0b01 	ldrb.w	r0, [r3], #1
 800787a:	9101      	str	r1, [sp, #4]
 800787c:	2830      	cmp	r0, #48	; 0x30
 800787e:	d0f8      	beq.n	8007872 <__gethex+0x36>
 8007880:	f7ff ffc7 	bl	8007812 <__hexdig_fun>
 8007884:	4604      	mov	r4, r0
 8007886:	2800      	cmp	r0, #0
 8007888:	d13a      	bne.n	8007900 <__gethex+0xc4>
 800788a:	4652      	mov	r2, sl
 800788c:	4638      	mov	r0, r7
 800788e:	9903      	ldr	r1, [sp, #12]
 8007890:	f001 f9ea 	bl	8008c68 <strncmp>
 8007894:	4605      	mov	r5, r0
 8007896:	2800      	cmp	r0, #0
 8007898:	d166      	bne.n	8007968 <__gethex+0x12c>
 800789a:	f817 000a 	ldrb.w	r0, [r7, sl]
 800789e:	eb07 060a 	add.w	r6, r7, sl
 80078a2:	f7ff ffb6 	bl	8007812 <__hexdig_fun>
 80078a6:	2800      	cmp	r0, #0
 80078a8:	d060      	beq.n	800796c <__gethex+0x130>
 80078aa:	4633      	mov	r3, r6
 80078ac:	7818      	ldrb	r0, [r3, #0]
 80078ae:	461f      	mov	r7, r3
 80078b0:	2830      	cmp	r0, #48	; 0x30
 80078b2:	f103 0301 	add.w	r3, r3, #1
 80078b6:	d0f9      	beq.n	80078ac <__gethex+0x70>
 80078b8:	f7ff ffab 	bl	8007812 <__hexdig_fun>
 80078bc:	2301      	movs	r3, #1
 80078be:	fab0 f480 	clz	r4, r0
 80078c2:	4635      	mov	r5, r6
 80078c4:	0964      	lsrs	r4, r4, #5
 80078c6:	9301      	str	r3, [sp, #4]
 80078c8:	463a      	mov	r2, r7
 80078ca:	4616      	mov	r6, r2
 80078cc:	7830      	ldrb	r0, [r6, #0]
 80078ce:	3201      	adds	r2, #1
 80078d0:	f7ff ff9f 	bl	8007812 <__hexdig_fun>
 80078d4:	2800      	cmp	r0, #0
 80078d6:	d1f8      	bne.n	80078ca <__gethex+0x8e>
 80078d8:	4652      	mov	r2, sl
 80078da:	4630      	mov	r0, r6
 80078dc:	9903      	ldr	r1, [sp, #12]
 80078de:	f001 f9c3 	bl	8008c68 <strncmp>
 80078e2:	b980      	cbnz	r0, 8007906 <__gethex+0xca>
 80078e4:	b94d      	cbnz	r5, 80078fa <__gethex+0xbe>
 80078e6:	eb06 050a 	add.w	r5, r6, sl
 80078ea:	462a      	mov	r2, r5
 80078ec:	4616      	mov	r6, r2
 80078ee:	7830      	ldrb	r0, [r6, #0]
 80078f0:	3201      	adds	r2, #1
 80078f2:	f7ff ff8e 	bl	8007812 <__hexdig_fun>
 80078f6:	2800      	cmp	r0, #0
 80078f8:	d1f8      	bne.n	80078ec <__gethex+0xb0>
 80078fa:	1bad      	subs	r5, r5, r6
 80078fc:	00ad      	lsls	r5, r5, #2
 80078fe:	e004      	b.n	800790a <__gethex+0xce>
 8007900:	2400      	movs	r4, #0
 8007902:	4625      	mov	r5, r4
 8007904:	e7e0      	b.n	80078c8 <__gethex+0x8c>
 8007906:	2d00      	cmp	r5, #0
 8007908:	d1f7      	bne.n	80078fa <__gethex+0xbe>
 800790a:	7833      	ldrb	r3, [r6, #0]
 800790c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007910:	2b50      	cmp	r3, #80	; 0x50
 8007912:	d139      	bne.n	8007988 <__gethex+0x14c>
 8007914:	7873      	ldrb	r3, [r6, #1]
 8007916:	2b2b      	cmp	r3, #43	; 0x2b
 8007918:	d02a      	beq.n	8007970 <__gethex+0x134>
 800791a:	2b2d      	cmp	r3, #45	; 0x2d
 800791c:	d02c      	beq.n	8007978 <__gethex+0x13c>
 800791e:	f04f 0900 	mov.w	r9, #0
 8007922:	1c71      	adds	r1, r6, #1
 8007924:	7808      	ldrb	r0, [r1, #0]
 8007926:	f7ff ff74 	bl	8007812 <__hexdig_fun>
 800792a:	1e43      	subs	r3, r0, #1
 800792c:	b2db      	uxtb	r3, r3
 800792e:	2b18      	cmp	r3, #24
 8007930:	d82a      	bhi.n	8007988 <__gethex+0x14c>
 8007932:	f1a0 0210 	sub.w	r2, r0, #16
 8007936:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800793a:	f7ff ff6a 	bl	8007812 <__hexdig_fun>
 800793e:	1e43      	subs	r3, r0, #1
 8007940:	b2db      	uxtb	r3, r3
 8007942:	2b18      	cmp	r3, #24
 8007944:	d91b      	bls.n	800797e <__gethex+0x142>
 8007946:	f1b9 0f00 	cmp.w	r9, #0
 800794a:	d000      	beq.n	800794e <__gethex+0x112>
 800794c:	4252      	negs	r2, r2
 800794e:	4415      	add	r5, r2
 8007950:	f8cb 1000 	str.w	r1, [fp]
 8007954:	b1d4      	cbz	r4, 800798c <__gethex+0x150>
 8007956:	9b01      	ldr	r3, [sp, #4]
 8007958:	2b00      	cmp	r3, #0
 800795a:	bf14      	ite	ne
 800795c:	2700      	movne	r7, #0
 800795e:	2706      	moveq	r7, #6
 8007960:	4638      	mov	r0, r7
 8007962:	b00b      	add	sp, #44	; 0x2c
 8007964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007968:	463e      	mov	r6, r7
 800796a:	4625      	mov	r5, r4
 800796c:	2401      	movs	r4, #1
 800796e:	e7cc      	b.n	800790a <__gethex+0xce>
 8007970:	f04f 0900 	mov.w	r9, #0
 8007974:	1cb1      	adds	r1, r6, #2
 8007976:	e7d5      	b.n	8007924 <__gethex+0xe8>
 8007978:	f04f 0901 	mov.w	r9, #1
 800797c:	e7fa      	b.n	8007974 <__gethex+0x138>
 800797e:	230a      	movs	r3, #10
 8007980:	fb03 0202 	mla	r2, r3, r2, r0
 8007984:	3a10      	subs	r2, #16
 8007986:	e7d6      	b.n	8007936 <__gethex+0xfa>
 8007988:	4631      	mov	r1, r6
 800798a:	e7e1      	b.n	8007950 <__gethex+0x114>
 800798c:	4621      	mov	r1, r4
 800798e:	1bf3      	subs	r3, r6, r7
 8007990:	3b01      	subs	r3, #1
 8007992:	2b07      	cmp	r3, #7
 8007994:	dc0a      	bgt.n	80079ac <__gethex+0x170>
 8007996:	9802      	ldr	r0, [sp, #8]
 8007998:	f000 fa88 	bl	8007eac <_Balloc>
 800799c:	4604      	mov	r4, r0
 800799e:	b940      	cbnz	r0, 80079b2 <__gethex+0x176>
 80079a0:	4602      	mov	r2, r0
 80079a2:	21de      	movs	r1, #222	; 0xde
 80079a4:	4b62      	ldr	r3, [pc, #392]	; (8007b30 <__gethex+0x2f4>)
 80079a6:	4863      	ldr	r0, [pc, #396]	; (8007b34 <__gethex+0x2f8>)
 80079a8:	f001 f97e 	bl	8008ca8 <__assert_func>
 80079ac:	3101      	adds	r1, #1
 80079ae:	105b      	asrs	r3, r3, #1
 80079b0:	e7ef      	b.n	8007992 <__gethex+0x156>
 80079b2:	f04f 0b00 	mov.w	fp, #0
 80079b6:	f100 0914 	add.w	r9, r0, #20
 80079ba:	f1ca 0301 	rsb	r3, sl, #1
 80079be:	f8cd 9010 	str.w	r9, [sp, #16]
 80079c2:	f8cd b004 	str.w	fp, [sp, #4]
 80079c6:	9308      	str	r3, [sp, #32]
 80079c8:	42b7      	cmp	r7, r6
 80079ca:	d33f      	bcc.n	8007a4c <__gethex+0x210>
 80079cc:	9f04      	ldr	r7, [sp, #16]
 80079ce:	9b01      	ldr	r3, [sp, #4]
 80079d0:	f847 3b04 	str.w	r3, [r7], #4
 80079d4:	eba7 0709 	sub.w	r7, r7, r9
 80079d8:	10bf      	asrs	r7, r7, #2
 80079da:	6127      	str	r7, [r4, #16]
 80079dc:	4618      	mov	r0, r3
 80079de:	f000 fb5b 	bl	8008098 <__hi0bits>
 80079e2:	017f      	lsls	r7, r7, #5
 80079e4:	f8d8 6000 	ldr.w	r6, [r8]
 80079e8:	1a3f      	subs	r7, r7, r0
 80079ea:	42b7      	cmp	r7, r6
 80079ec:	dd62      	ble.n	8007ab4 <__gethex+0x278>
 80079ee:	1bbf      	subs	r7, r7, r6
 80079f0:	4639      	mov	r1, r7
 80079f2:	4620      	mov	r0, r4
 80079f4:	f000 fef1 	bl	80087da <__any_on>
 80079f8:	4682      	mov	sl, r0
 80079fa:	b1a8      	cbz	r0, 8007a28 <__gethex+0x1ec>
 80079fc:	f04f 0a01 	mov.w	sl, #1
 8007a00:	1e7b      	subs	r3, r7, #1
 8007a02:	1159      	asrs	r1, r3, #5
 8007a04:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007a08:	f003 021f 	and.w	r2, r3, #31
 8007a0c:	fa0a f202 	lsl.w	r2, sl, r2
 8007a10:	420a      	tst	r2, r1
 8007a12:	d009      	beq.n	8007a28 <__gethex+0x1ec>
 8007a14:	4553      	cmp	r3, sl
 8007a16:	dd05      	ble.n	8007a24 <__gethex+0x1e8>
 8007a18:	4620      	mov	r0, r4
 8007a1a:	1eb9      	subs	r1, r7, #2
 8007a1c:	f000 fedd 	bl	80087da <__any_on>
 8007a20:	2800      	cmp	r0, #0
 8007a22:	d144      	bne.n	8007aae <__gethex+0x272>
 8007a24:	f04f 0a02 	mov.w	sl, #2
 8007a28:	4639      	mov	r1, r7
 8007a2a:	4620      	mov	r0, r4
 8007a2c:	f7ff fe9e 	bl	800776c <rshift>
 8007a30:	443d      	add	r5, r7
 8007a32:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007a36:	42ab      	cmp	r3, r5
 8007a38:	da4a      	bge.n	8007ad0 <__gethex+0x294>
 8007a3a:	4621      	mov	r1, r4
 8007a3c:	9802      	ldr	r0, [sp, #8]
 8007a3e:	f000 fa75 	bl	8007f2c <_Bfree>
 8007a42:	2300      	movs	r3, #0
 8007a44:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007a46:	27a3      	movs	r7, #163	; 0xa3
 8007a48:	6013      	str	r3, [r2, #0]
 8007a4a:	e789      	b.n	8007960 <__gethex+0x124>
 8007a4c:	1e73      	subs	r3, r6, #1
 8007a4e:	9a07      	ldr	r2, [sp, #28]
 8007a50:	9305      	str	r3, [sp, #20]
 8007a52:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d019      	beq.n	8007a8e <__gethex+0x252>
 8007a5a:	f1bb 0f20 	cmp.w	fp, #32
 8007a5e:	d107      	bne.n	8007a70 <__gethex+0x234>
 8007a60:	9b04      	ldr	r3, [sp, #16]
 8007a62:	9a01      	ldr	r2, [sp, #4]
 8007a64:	f843 2b04 	str.w	r2, [r3], #4
 8007a68:	9304      	str	r3, [sp, #16]
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	469b      	mov	fp, r3
 8007a6e:	9301      	str	r3, [sp, #4]
 8007a70:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007a74:	f7ff fecd 	bl	8007812 <__hexdig_fun>
 8007a78:	9b01      	ldr	r3, [sp, #4]
 8007a7a:	f000 000f 	and.w	r0, r0, #15
 8007a7e:	fa00 f00b 	lsl.w	r0, r0, fp
 8007a82:	4303      	orrs	r3, r0
 8007a84:	9301      	str	r3, [sp, #4]
 8007a86:	f10b 0b04 	add.w	fp, fp, #4
 8007a8a:	9b05      	ldr	r3, [sp, #20]
 8007a8c:	e00d      	b.n	8007aaa <__gethex+0x26e>
 8007a8e:	9b05      	ldr	r3, [sp, #20]
 8007a90:	9a08      	ldr	r2, [sp, #32]
 8007a92:	4413      	add	r3, r2
 8007a94:	42bb      	cmp	r3, r7
 8007a96:	d3e0      	bcc.n	8007a5a <__gethex+0x21e>
 8007a98:	4618      	mov	r0, r3
 8007a9a:	4652      	mov	r2, sl
 8007a9c:	9903      	ldr	r1, [sp, #12]
 8007a9e:	9309      	str	r3, [sp, #36]	; 0x24
 8007aa0:	f001 f8e2 	bl	8008c68 <strncmp>
 8007aa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aa6:	2800      	cmp	r0, #0
 8007aa8:	d1d7      	bne.n	8007a5a <__gethex+0x21e>
 8007aaa:	461e      	mov	r6, r3
 8007aac:	e78c      	b.n	80079c8 <__gethex+0x18c>
 8007aae:	f04f 0a03 	mov.w	sl, #3
 8007ab2:	e7b9      	b.n	8007a28 <__gethex+0x1ec>
 8007ab4:	da09      	bge.n	8007aca <__gethex+0x28e>
 8007ab6:	1bf7      	subs	r7, r6, r7
 8007ab8:	4621      	mov	r1, r4
 8007aba:	463a      	mov	r2, r7
 8007abc:	9802      	ldr	r0, [sp, #8]
 8007abe:	f000 fc4d 	bl	800835c <__lshift>
 8007ac2:	4604      	mov	r4, r0
 8007ac4:	1bed      	subs	r5, r5, r7
 8007ac6:	f100 0914 	add.w	r9, r0, #20
 8007aca:	f04f 0a00 	mov.w	sl, #0
 8007ace:	e7b0      	b.n	8007a32 <__gethex+0x1f6>
 8007ad0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007ad4:	42a8      	cmp	r0, r5
 8007ad6:	dd71      	ble.n	8007bbc <__gethex+0x380>
 8007ad8:	1b45      	subs	r5, r0, r5
 8007ada:	42ae      	cmp	r6, r5
 8007adc:	dc34      	bgt.n	8007b48 <__gethex+0x30c>
 8007ade:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007ae2:	2b02      	cmp	r3, #2
 8007ae4:	d028      	beq.n	8007b38 <__gethex+0x2fc>
 8007ae6:	2b03      	cmp	r3, #3
 8007ae8:	d02a      	beq.n	8007b40 <__gethex+0x304>
 8007aea:	2b01      	cmp	r3, #1
 8007aec:	d115      	bne.n	8007b1a <__gethex+0x2de>
 8007aee:	42ae      	cmp	r6, r5
 8007af0:	d113      	bne.n	8007b1a <__gethex+0x2de>
 8007af2:	2e01      	cmp	r6, #1
 8007af4:	d10b      	bne.n	8007b0e <__gethex+0x2d2>
 8007af6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007afa:	9a06      	ldr	r2, [sp, #24]
 8007afc:	2762      	movs	r7, #98	; 0x62
 8007afe:	6013      	str	r3, [r2, #0]
 8007b00:	2301      	movs	r3, #1
 8007b02:	6123      	str	r3, [r4, #16]
 8007b04:	f8c9 3000 	str.w	r3, [r9]
 8007b08:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007b0a:	601c      	str	r4, [r3, #0]
 8007b0c:	e728      	b.n	8007960 <__gethex+0x124>
 8007b0e:	4620      	mov	r0, r4
 8007b10:	1e71      	subs	r1, r6, #1
 8007b12:	f000 fe62 	bl	80087da <__any_on>
 8007b16:	2800      	cmp	r0, #0
 8007b18:	d1ed      	bne.n	8007af6 <__gethex+0x2ba>
 8007b1a:	4621      	mov	r1, r4
 8007b1c:	9802      	ldr	r0, [sp, #8]
 8007b1e:	f000 fa05 	bl	8007f2c <_Bfree>
 8007b22:	2300      	movs	r3, #0
 8007b24:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007b26:	2750      	movs	r7, #80	; 0x50
 8007b28:	6013      	str	r3, [r2, #0]
 8007b2a:	e719      	b.n	8007960 <__gethex+0x124>
 8007b2c:	08009af0 	.word	0x08009af0
 8007b30:	08009a74 	.word	0x08009a74
 8007b34:	08009a85 	.word	0x08009a85
 8007b38:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d1ed      	bne.n	8007b1a <__gethex+0x2de>
 8007b3e:	e7da      	b.n	8007af6 <__gethex+0x2ba>
 8007b40:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d1d7      	bne.n	8007af6 <__gethex+0x2ba>
 8007b46:	e7e8      	b.n	8007b1a <__gethex+0x2de>
 8007b48:	1e6f      	subs	r7, r5, #1
 8007b4a:	f1ba 0f00 	cmp.w	sl, #0
 8007b4e:	d132      	bne.n	8007bb6 <__gethex+0x37a>
 8007b50:	b127      	cbz	r7, 8007b5c <__gethex+0x320>
 8007b52:	4639      	mov	r1, r7
 8007b54:	4620      	mov	r0, r4
 8007b56:	f000 fe40 	bl	80087da <__any_on>
 8007b5a:	4682      	mov	sl, r0
 8007b5c:	2101      	movs	r1, #1
 8007b5e:	117b      	asrs	r3, r7, #5
 8007b60:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007b64:	f007 071f 	and.w	r7, r7, #31
 8007b68:	fa01 f707 	lsl.w	r7, r1, r7
 8007b6c:	421f      	tst	r7, r3
 8007b6e:	f04f 0702 	mov.w	r7, #2
 8007b72:	4629      	mov	r1, r5
 8007b74:	4620      	mov	r0, r4
 8007b76:	bf18      	it	ne
 8007b78:	f04a 0a02 	orrne.w	sl, sl, #2
 8007b7c:	1b76      	subs	r6, r6, r5
 8007b7e:	f7ff fdf5 	bl	800776c <rshift>
 8007b82:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007b86:	f1ba 0f00 	cmp.w	sl, #0
 8007b8a:	d048      	beq.n	8007c1e <__gethex+0x3e2>
 8007b8c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007b90:	2b02      	cmp	r3, #2
 8007b92:	d015      	beq.n	8007bc0 <__gethex+0x384>
 8007b94:	2b03      	cmp	r3, #3
 8007b96:	d017      	beq.n	8007bc8 <__gethex+0x38c>
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d109      	bne.n	8007bb0 <__gethex+0x374>
 8007b9c:	f01a 0f02 	tst.w	sl, #2
 8007ba0:	d006      	beq.n	8007bb0 <__gethex+0x374>
 8007ba2:	f8d9 0000 	ldr.w	r0, [r9]
 8007ba6:	ea4a 0a00 	orr.w	sl, sl, r0
 8007baa:	f01a 0f01 	tst.w	sl, #1
 8007bae:	d10e      	bne.n	8007bce <__gethex+0x392>
 8007bb0:	f047 0710 	orr.w	r7, r7, #16
 8007bb4:	e033      	b.n	8007c1e <__gethex+0x3e2>
 8007bb6:	f04f 0a01 	mov.w	sl, #1
 8007bba:	e7cf      	b.n	8007b5c <__gethex+0x320>
 8007bbc:	2701      	movs	r7, #1
 8007bbe:	e7e2      	b.n	8007b86 <__gethex+0x34a>
 8007bc0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007bc2:	f1c3 0301 	rsb	r3, r3, #1
 8007bc6:	9315      	str	r3, [sp, #84]	; 0x54
 8007bc8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d0f0      	beq.n	8007bb0 <__gethex+0x374>
 8007bce:	f04f 0c00 	mov.w	ip, #0
 8007bd2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007bd6:	f104 0314 	add.w	r3, r4, #20
 8007bda:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007bde:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007be2:	4618      	mov	r0, r3
 8007be4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007be8:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007bec:	d01c      	beq.n	8007c28 <__gethex+0x3ec>
 8007bee:	3201      	adds	r2, #1
 8007bf0:	6002      	str	r2, [r0, #0]
 8007bf2:	2f02      	cmp	r7, #2
 8007bf4:	f104 0314 	add.w	r3, r4, #20
 8007bf8:	d13d      	bne.n	8007c76 <__gethex+0x43a>
 8007bfa:	f8d8 2000 	ldr.w	r2, [r8]
 8007bfe:	3a01      	subs	r2, #1
 8007c00:	42b2      	cmp	r2, r6
 8007c02:	d10a      	bne.n	8007c1a <__gethex+0x3de>
 8007c04:	2201      	movs	r2, #1
 8007c06:	1171      	asrs	r1, r6, #5
 8007c08:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007c0c:	f006 061f 	and.w	r6, r6, #31
 8007c10:	fa02 f606 	lsl.w	r6, r2, r6
 8007c14:	421e      	tst	r6, r3
 8007c16:	bf18      	it	ne
 8007c18:	4617      	movne	r7, r2
 8007c1a:	f047 0720 	orr.w	r7, r7, #32
 8007c1e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007c20:	601c      	str	r4, [r3, #0]
 8007c22:	9b06      	ldr	r3, [sp, #24]
 8007c24:	601d      	str	r5, [r3, #0]
 8007c26:	e69b      	b.n	8007960 <__gethex+0x124>
 8007c28:	4299      	cmp	r1, r3
 8007c2a:	f843 cc04 	str.w	ip, [r3, #-4]
 8007c2e:	d8d8      	bhi.n	8007be2 <__gethex+0x3a6>
 8007c30:	68a3      	ldr	r3, [r4, #8]
 8007c32:	459b      	cmp	fp, r3
 8007c34:	db17      	blt.n	8007c66 <__gethex+0x42a>
 8007c36:	6861      	ldr	r1, [r4, #4]
 8007c38:	9802      	ldr	r0, [sp, #8]
 8007c3a:	3101      	adds	r1, #1
 8007c3c:	f000 f936 	bl	8007eac <_Balloc>
 8007c40:	4681      	mov	r9, r0
 8007c42:	b918      	cbnz	r0, 8007c4c <__gethex+0x410>
 8007c44:	4602      	mov	r2, r0
 8007c46:	2184      	movs	r1, #132	; 0x84
 8007c48:	4b19      	ldr	r3, [pc, #100]	; (8007cb0 <__gethex+0x474>)
 8007c4a:	e6ac      	b.n	80079a6 <__gethex+0x16a>
 8007c4c:	6922      	ldr	r2, [r4, #16]
 8007c4e:	f104 010c 	add.w	r1, r4, #12
 8007c52:	3202      	adds	r2, #2
 8007c54:	0092      	lsls	r2, r2, #2
 8007c56:	300c      	adds	r0, #12
 8007c58:	f000 f91a 	bl	8007e90 <memcpy>
 8007c5c:	4621      	mov	r1, r4
 8007c5e:	9802      	ldr	r0, [sp, #8]
 8007c60:	f000 f964 	bl	8007f2c <_Bfree>
 8007c64:	464c      	mov	r4, r9
 8007c66:	6923      	ldr	r3, [r4, #16]
 8007c68:	1c5a      	adds	r2, r3, #1
 8007c6a:	6122      	str	r2, [r4, #16]
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007c72:	615a      	str	r2, [r3, #20]
 8007c74:	e7bd      	b.n	8007bf2 <__gethex+0x3b6>
 8007c76:	6922      	ldr	r2, [r4, #16]
 8007c78:	455a      	cmp	r2, fp
 8007c7a:	dd0b      	ble.n	8007c94 <__gethex+0x458>
 8007c7c:	2101      	movs	r1, #1
 8007c7e:	4620      	mov	r0, r4
 8007c80:	f7ff fd74 	bl	800776c <rshift>
 8007c84:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007c88:	3501      	adds	r5, #1
 8007c8a:	42ab      	cmp	r3, r5
 8007c8c:	f6ff aed5 	blt.w	8007a3a <__gethex+0x1fe>
 8007c90:	2701      	movs	r7, #1
 8007c92:	e7c2      	b.n	8007c1a <__gethex+0x3de>
 8007c94:	f016 061f 	ands.w	r6, r6, #31
 8007c98:	d0fa      	beq.n	8007c90 <__gethex+0x454>
 8007c9a:	449a      	add	sl, r3
 8007c9c:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8007ca0:	f000 f9fa 	bl	8008098 <__hi0bits>
 8007ca4:	f1c6 0620 	rsb	r6, r6, #32
 8007ca8:	42b0      	cmp	r0, r6
 8007caa:	dbe7      	blt.n	8007c7c <__gethex+0x440>
 8007cac:	e7f0      	b.n	8007c90 <__gethex+0x454>
 8007cae:	bf00      	nop
 8007cb0:	08009a74 	.word	0x08009a74

08007cb4 <L_shift>:
 8007cb4:	f1c2 0208 	rsb	r2, r2, #8
 8007cb8:	0092      	lsls	r2, r2, #2
 8007cba:	b570      	push	{r4, r5, r6, lr}
 8007cbc:	f1c2 0620 	rsb	r6, r2, #32
 8007cc0:	6843      	ldr	r3, [r0, #4]
 8007cc2:	6804      	ldr	r4, [r0, #0]
 8007cc4:	fa03 f506 	lsl.w	r5, r3, r6
 8007cc8:	432c      	orrs	r4, r5
 8007cca:	40d3      	lsrs	r3, r2
 8007ccc:	6004      	str	r4, [r0, #0]
 8007cce:	f840 3f04 	str.w	r3, [r0, #4]!
 8007cd2:	4288      	cmp	r0, r1
 8007cd4:	d3f4      	bcc.n	8007cc0 <L_shift+0xc>
 8007cd6:	bd70      	pop	{r4, r5, r6, pc}

08007cd8 <__match>:
 8007cd8:	b530      	push	{r4, r5, lr}
 8007cda:	6803      	ldr	r3, [r0, #0]
 8007cdc:	3301      	adds	r3, #1
 8007cde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ce2:	b914      	cbnz	r4, 8007cea <__match+0x12>
 8007ce4:	6003      	str	r3, [r0, #0]
 8007ce6:	2001      	movs	r0, #1
 8007ce8:	bd30      	pop	{r4, r5, pc}
 8007cea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007cee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007cf2:	2d19      	cmp	r5, #25
 8007cf4:	bf98      	it	ls
 8007cf6:	3220      	addls	r2, #32
 8007cf8:	42a2      	cmp	r2, r4
 8007cfa:	d0f0      	beq.n	8007cde <__match+0x6>
 8007cfc:	2000      	movs	r0, #0
 8007cfe:	e7f3      	b.n	8007ce8 <__match+0x10>

08007d00 <__hexnan>:
 8007d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d04:	2500      	movs	r5, #0
 8007d06:	680b      	ldr	r3, [r1, #0]
 8007d08:	4682      	mov	sl, r0
 8007d0a:	115e      	asrs	r6, r3, #5
 8007d0c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007d10:	f013 031f 	ands.w	r3, r3, #31
 8007d14:	bf18      	it	ne
 8007d16:	3604      	addne	r6, #4
 8007d18:	1f37      	subs	r7, r6, #4
 8007d1a:	4690      	mov	r8, r2
 8007d1c:	46b9      	mov	r9, r7
 8007d1e:	463c      	mov	r4, r7
 8007d20:	46ab      	mov	fp, r5
 8007d22:	b087      	sub	sp, #28
 8007d24:	6801      	ldr	r1, [r0, #0]
 8007d26:	9301      	str	r3, [sp, #4]
 8007d28:	f846 5c04 	str.w	r5, [r6, #-4]
 8007d2c:	9502      	str	r5, [sp, #8]
 8007d2e:	784a      	ldrb	r2, [r1, #1]
 8007d30:	1c4b      	adds	r3, r1, #1
 8007d32:	9303      	str	r3, [sp, #12]
 8007d34:	b342      	cbz	r2, 8007d88 <__hexnan+0x88>
 8007d36:	4610      	mov	r0, r2
 8007d38:	9105      	str	r1, [sp, #20]
 8007d3a:	9204      	str	r2, [sp, #16]
 8007d3c:	f7ff fd69 	bl	8007812 <__hexdig_fun>
 8007d40:	2800      	cmp	r0, #0
 8007d42:	d14f      	bne.n	8007de4 <__hexnan+0xe4>
 8007d44:	9a04      	ldr	r2, [sp, #16]
 8007d46:	9905      	ldr	r1, [sp, #20]
 8007d48:	2a20      	cmp	r2, #32
 8007d4a:	d818      	bhi.n	8007d7e <__hexnan+0x7e>
 8007d4c:	9b02      	ldr	r3, [sp, #8]
 8007d4e:	459b      	cmp	fp, r3
 8007d50:	dd13      	ble.n	8007d7a <__hexnan+0x7a>
 8007d52:	454c      	cmp	r4, r9
 8007d54:	d206      	bcs.n	8007d64 <__hexnan+0x64>
 8007d56:	2d07      	cmp	r5, #7
 8007d58:	dc04      	bgt.n	8007d64 <__hexnan+0x64>
 8007d5a:	462a      	mov	r2, r5
 8007d5c:	4649      	mov	r1, r9
 8007d5e:	4620      	mov	r0, r4
 8007d60:	f7ff ffa8 	bl	8007cb4 <L_shift>
 8007d64:	4544      	cmp	r4, r8
 8007d66:	d950      	bls.n	8007e0a <__hexnan+0x10a>
 8007d68:	2300      	movs	r3, #0
 8007d6a:	f1a4 0904 	sub.w	r9, r4, #4
 8007d6e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007d72:	461d      	mov	r5, r3
 8007d74:	464c      	mov	r4, r9
 8007d76:	f8cd b008 	str.w	fp, [sp, #8]
 8007d7a:	9903      	ldr	r1, [sp, #12]
 8007d7c:	e7d7      	b.n	8007d2e <__hexnan+0x2e>
 8007d7e:	2a29      	cmp	r2, #41	; 0x29
 8007d80:	d156      	bne.n	8007e30 <__hexnan+0x130>
 8007d82:	3102      	adds	r1, #2
 8007d84:	f8ca 1000 	str.w	r1, [sl]
 8007d88:	f1bb 0f00 	cmp.w	fp, #0
 8007d8c:	d050      	beq.n	8007e30 <__hexnan+0x130>
 8007d8e:	454c      	cmp	r4, r9
 8007d90:	d206      	bcs.n	8007da0 <__hexnan+0xa0>
 8007d92:	2d07      	cmp	r5, #7
 8007d94:	dc04      	bgt.n	8007da0 <__hexnan+0xa0>
 8007d96:	462a      	mov	r2, r5
 8007d98:	4649      	mov	r1, r9
 8007d9a:	4620      	mov	r0, r4
 8007d9c:	f7ff ff8a 	bl	8007cb4 <L_shift>
 8007da0:	4544      	cmp	r4, r8
 8007da2:	d934      	bls.n	8007e0e <__hexnan+0x10e>
 8007da4:	4623      	mov	r3, r4
 8007da6:	f1a8 0204 	sub.w	r2, r8, #4
 8007daa:	f853 1b04 	ldr.w	r1, [r3], #4
 8007dae:	429f      	cmp	r7, r3
 8007db0:	f842 1f04 	str.w	r1, [r2, #4]!
 8007db4:	d2f9      	bcs.n	8007daa <__hexnan+0xaa>
 8007db6:	1b3b      	subs	r3, r7, r4
 8007db8:	f023 0303 	bic.w	r3, r3, #3
 8007dbc:	3304      	adds	r3, #4
 8007dbe:	3401      	adds	r4, #1
 8007dc0:	3e03      	subs	r6, #3
 8007dc2:	42b4      	cmp	r4, r6
 8007dc4:	bf88      	it	hi
 8007dc6:	2304      	movhi	r3, #4
 8007dc8:	2200      	movs	r2, #0
 8007dca:	4443      	add	r3, r8
 8007dcc:	f843 2b04 	str.w	r2, [r3], #4
 8007dd0:	429f      	cmp	r7, r3
 8007dd2:	d2fb      	bcs.n	8007dcc <__hexnan+0xcc>
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	b91b      	cbnz	r3, 8007de0 <__hexnan+0xe0>
 8007dd8:	4547      	cmp	r7, r8
 8007dda:	d127      	bne.n	8007e2c <__hexnan+0x12c>
 8007ddc:	2301      	movs	r3, #1
 8007dde:	603b      	str	r3, [r7, #0]
 8007de0:	2005      	movs	r0, #5
 8007de2:	e026      	b.n	8007e32 <__hexnan+0x132>
 8007de4:	3501      	adds	r5, #1
 8007de6:	2d08      	cmp	r5, #8
 8007de8:	f10b 0b01 	add.w	fp, fp, #1
 8007dec:	dd06      	ble.n	8007dfc <__hexnan+0xfc>
 8007dee:	4544      	cmp	r4, r8
 8007df0:	d9c3      	bls.n	8007d7a <__hexnan+0x7a>
 8007df2:	2300      	movs	r3, #0
 8007df4:	2501      	movs	r5, #1
 8007df6:	f844 3c04 	str.w	r3, [r4, #-4]
 8007dfa:	3c04      	subs	r4, #4
 8007dfc:	6822      	ldr	r2, [r4, #0]
 8007dfe:	f000 000f 	and.w	r0, r0, #15
 8007e02:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007e06:	6022      	str	r2, [r4, #0]
 8007e08:	e7b7      	b.n	8007d7a <__hexnan+0x7a>
 8007e0a:	2508      	movs	r5, #8
 8007e0c:	e7b5      	b.n	8007d7a <__hexnan+0x7a>
 8007e0e:	9b01      	ldr	r3, [sp, #4]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d0df      	beq.n	8007dd4 <__hexnan+0xd4>
 8007e14:	f04f 32ff 	mov.w	r2, #4294967295
 8007e18:	f1c3 0320 	rsb	r3, r3, #32
 8007e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8007e20:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007e24:	401a      	ands	r2, r3
 8007e26:	f846 2c04 	str.w	r2, [r6, #-4]
 8007e2a:	e7d3      	b.n	8007dd4 <__hexnan+0xd4>
 8007e2c:	3f04      	subs	r7, #4
 8007e2e:	e7d1      	b.n	8007dd4 <__hexnan+0xd4>
 8007e30:	2004      	movs	r0, #4
 8007e32:	b007      	add	sp, #28
 8007e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007e38 <_localeconv_r>:
 8007e38:	4800      	ldr	r0, [pc, #0]	; (8007e3c <_localeconv_r+0x4>)
 8007e3a:	4770      	bx	lr
 8007e3c:	20000164 	.word	0x20000164

08007e40 <malloc>:
 8007e40:	4b02      	ldr	r3, [pc, #8]	; (8007e4c <malloc+0xc>)
 8007e42:	4601      	mov	r1, r0
 8007e44:	6818      	ldr	r0, [r3, #0]
 8007e46:	f000 bd43 	b.w	80088d0 <_malloc_r>
 8007e4a:	bf00      	nop
 8007e4c:	2000000c 	.word	0x2000000c

08007e50 <__ascii_mbtowc>:
 8007e50:	b082      	sub	sp, #8
 8007e52:	b901      	cbnz	r1, 8007e56 <__ascii_mbtowc+0x6>
 8007e54:	a901      	add	r1, sp, #4
 8007e56:	b142      	cbz	r2, 8007e6a <__ascii_mbtowc+0x1a>
 8007e58:	b14b      	cbz	r3, 8007e6e <__ascii_mbtowc+0x1e>
 8007e5a:	7813      	ldrb	r3, [r2, #0]
 8007e5c:	600b      	str	r3, [r1, #0]
 8007e5e:	7812      	ldrb	r2, [r2, #0]
 8007e60:	1e10      	subs	r0, r2, #0
 8007e62:	bf18      	it	ne
 8007e64:	2001      	movne	r0, #1
 8007e66:	b002      	add	sp, #8
 8007e68:	4770      	bx	lr
 8007e6a:	4610      	mov	r0, r2
 8007e6c:	e7fb      	b.n	8007e66 <__ascii_mbtowc+0x16>
 8007e6e:	f06f 0001 	mvn.w	r0, #1
 8007e72:	e7f8      	b.n	8007e66 <__ascii_mbtowc+0x16>

08007e74 <memchr>:
 8007e74:	4603      	mov	r3, r0
 8007e76:	b510      	push	{r4, lr}
 8007e78:	b2c9      	uxtb	r1, r1
 8007e7a:	4402      	add	r2, r0
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	4618      	mov	r0, r3
 8007e80:	d101      	bne.n	8007e86 <memchr+0x12>
 8007e82:	2000      	movs	r0, #0
 8007e84:	e003      	b.n	8007e8e <memchr+0x1a>
 8007e86:	7804      	ldrb	r4, [r0, #0]
 8007e88:	3301      	adds	r3, #1
 8007e8a:	428c      	cmp	r4, r1
 8007e8c:	d1f6      	bne.n	8007e7c <memchr+0x8>
 8007e8e:	bd10      	pop	{r4, pc}

08007e90 <memcpy>:
 8007e90:	440a      	add	r2, r1
 8007e92:	4291      	cmp	r1, r2
 8007e94:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e98:	d100      	bne.n	8007e9c <memcpy+0xc>
 8007e9a:	4770      	bx	lr
 8007e9c:	b510      	push	{r4, lr}
 8007e9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ea2:	4291      	cmp	r1, r2
 8007ea4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ea8:	d1f9      	bne.n	8007e9e <memcpy+0xe>
 8007eaa:	bd10      	pop	{r4, pc}

08007eac <_Balloc>:
 8007eac:	b570      	push	{r4, r5, r6, lr}
 8007eae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007eb0:	4604      	mov	r4, r0
 8007eb2:	460d      	mov	r5, r1
 8007eb4:	b976      	cbnz	r6, 8007ed4 <_Balloc+0x28>
 8007eb6:	2010      	movs	r0, #16
 8007eb8:	f7ff ffc2 	bl	8007e40 <malloc>
 8007ebc:	4602      	mov	r2, r0
 8007ebe:	6260      	str	r0, [r4, #36]	; 0x24
 8007ec0:	b920      	cbnz	r0, 8007ecc <_Balloc+0x20>
 8007ec2:	2166      	movs	r1, #102	; 0x66
 8007ec4:	4b17      	ldr	r3, [pc, #92]	; (8007f24 <_Balloc+0x78>)
 8007ec6:	4818      	ldr	r0, [pc, #96]	; (8007f28 <_Balloc+0x7c>)
 8007ec8:	f000 feee 	bl	8008ca8 <__assert_func>
 8007ecc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ed0:	6006      	str	r6, [r0, #0]
 8007ed2:	60c6      	str	r6, [r0, #12]
 8007ed4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007ed6:	68f3      	ldr	r3, [r6, #12]
 8007ed8:	b183      	cbz	r3, 8007efc <_Balloc+0x50>
 8007eda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007edc:	68db      	ldr	r3, [r3, #12]
 8007ede:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007ee2:	b9b8      	cbnz	r0, 8007f14 <_Balloc+0x68>
 8007ee4:	2101      	movs	r1, #1
 8007ee6:	fa01 f605 	lsl.w	r6, r1, r5
 8007eea:	1d72      	adds	r2, r6, #5
 8007eec:	4620      	mov	r0, r4
 8007eee:	0092      	lsls	r2, r2, #2
 8007ef0:	f000 fc94 	bl	800881c <_calloc_r>
 8007ef4:	b160      	cbz	r0, 8007f10 <_Balloc+0x64>
 8007ef6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007efa:	e00e      	b.n	8007f1a <_Balloc+0x6e>
 8007efc:	2221      	movs	r2, #33	; 0x21
 8007efe:	2104      	movs	r1, #4
 8007f00:	4620      	mov	r0, r4
 8007f02:	f000 fc8b 	bl	800881c <_calloc_r>
 8007f06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f08:	60f0      	str	r0, [r6, #12]
 8007f0a:	68db      	ldr	r3, [r3, #12]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d1e4      	bne.n	8007eda <_Balloc+0x2e>
 8007f10:	2000      	movs	r0, #0
 8007f12:	bd70      	pop	{r4, r5, r6, pc}
 8007f14:	6802      	ldr	r2, [r0, #0]
 8007f16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007f20:	e7f7      	b.n	8007f12 <_Balloc+0x66>
 8007f22:	bf00      	nop
 8007f24:	080099fe 	.word	0x080099fe
 8007f28:	08009b04 	.word	0x08009b04

08007f2c <_Bfree>:
 8007f2c:	b570      	push	{r4, r5, r6, lr}
 8007f2e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007f30:	4605      	mov	r5, r0
 8007f32:	460c      	mov	r4, r1
 8007f34:	b976      	cbnz	r6, 8007f54 <_Bfree+0x28>
 8007f36:	2010      	movs	r0, #16
 8007f38:	f7ff ff82 	bl	8007e40 <malloc>
 8007f3c:	4602      	mov	r2, r0
 8007f3e:	6268      	str	r0, [r5, #36]	; 0x24
 8007f40:	b920      	cbnz	r0, 8007f4c <_Bfree+0x20>
 8007f42:	218a      	movs	r1, #138	; 0x8a
 8007f44:	4b08      	ldr	r3, [pc, #32]	; (8007f68 <_Bfree+0x3c>)
 8007f46:	4809      	ldr	r0, [pc, #36]	; (8007f6c <_Bfree+0x40>)
 8007f48:	f000 feae 	bl	8008ca8 <__assert_func>
 8007f4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f50:	6006      	str	r6, [r0, #0]
 8007f52:	60c6      	str	r6, [r0, #12]
 8007f54:	b13c      	cbz	r4, 8007f66 <_Bfree+0x3a>
 8007f56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007f58:	6862      	ldr	r2, [r4, #4]
 8007f5a:	68db      	ldr	r3, [r3, #12]
 8007f5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007f60:	6021      	str	r1, [r4, #0]
 8007f62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007f66:	bd70      	pop	{r4, r5, r6, pc}
 8007f68:	080099fe 	.word	0x080099fe
 8007f6c:	08009b04 	.word	0x08009b04

08007f70 <__multadd>:
 8007f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f74:	4698      	mov	r8, r3
 8007f76:	460c      	mov	r4, r1
 8007f78:	2300      	movs	r3, #0
 8007f7a:	690e      	ldr	r6, [r1, #16]
 8007f7c:	4607      	mov	r7, r0
 8007f7e:	f101 0014 	add.w	r0, r1, #20
 8007f82:	6805      	ldr	r5, [r0, #0]
 8007f84:	3301      	adds	r3, #1
 8007f86:	b2a9      	uxth	r1, r5
 8007f88:	fb02 8101 	mla	r1, r2, r1, r8
 8007f8c:	0c2d      	lsrs	r5, r5, #16
 8007f8e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007f92:	fb02 c505 	mla	r5, r2, r5, ip
 8007f96:	b289      	uxth	r1, r1
 8007f98:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007f9c:	429e      	cmp	r6, r3
 8007f9e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007fa2:	f840 1b04 	str.w	r1, [r0], #4
 8007fa6:	dcec      	bgt.n	8007f82 <__multadd+0x12>
 8007fa8:	f1b8 0f00 	cmp.w	r8, #0
 8007fac:	d022      	beq.n	8007ff4 <__multadd+0x84>
 8007fae:	68a3      	ldr	r3, [r4, #8]
 8007fb0:	42b3      	cmp	r3, r6
 8007fb2:	dc19      	bgt.n	8007fe8 <__multadd+0x78>
 8007fb4:	6861      	ldr	r1, [r4, #4]
 8007fb6:	4638      	mov	r0, r7
 8007fb8:	3101      	adds	r1, #1
 8007fba:	f7ff ff77 	bl	8007eac <_Balloc>
 8007fbe:	4605      	mov	r5, r0
 8007fc0:	b928      	cbnz	r0, 8007fce <__multadd+0x5e>
 8007fc2:	4602      	mov	r2, r0
 8007fc4:	21b5      	movs	r1, #181	; 0xb5
 8007fc6:	4b0d      	ldr	r3, [pc, #52]	; (8007ffc <__multadd+0x8c>)
 8007fc8:	480d      	ldr	r0, [pc, #52]	; (8008000 <__multadd+0x90>)
 8007fca:	f000 fe6d 	bl	8008ca8 <__assert_func>
 8007fce:	6922      	ldr	r2, [r4, #16]
 8007fd0:	f104 010c 	add.w	r1, r4, #12
 8007fd4:	3202      	adds	r2, #2
 8007fd6:	0092      	lsls	r2, r2, #2
 8007fd8:	300c      	adds	r0, #12
 8007fda:	f7ff ff59 	bl	8007e90 <memcpy>
 8007fde:	4621      	mov	r1, r4
 8007fe0:	4638      	mov	r0, r7
 8007fe2:	f7ff ffa3 	bl	8007f2c <_Bfree>
 8007fe6:	462c      	mov	r4, r5
 8007fe8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007fec:	3601      	adds	r6, #1
 8007fee:	f8c3 8014 	str.w	r8, [r3, #20]
 8007ff2:	6126      	str	r6, [r4, #16]
 8007ff4:	4620      	mov	r0, r4
 8007ff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ffa:	bf00      	nop
 8007ffc:	08009a74 	.word	0x08009a74
 8008000:	08009b04 	.word	0x08009b04

08008004 <__s2b>:
 8008004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008008:	4615      	mov	r5, r2
 800800a:	2209      	movs	r2, #9
 800800c:	461f      	mov	r7, r3
 800800e:	3308      	adds	r3, #8
 8008010:	460c      	mov	r4, r1
 8008012:	fb93 f3f2 	sdiv	r3, r3, r2
 8008016:	4606      	mov	r6, r0
 8008018:	2201      	movs	r2, #1
 800801a:	2100      	movs	r1, #0
 800801c:	429a      	cmp	r2, r3
 800801e:	db09      	blt.n	8008034 <__s2b+0x30>
 8008020:	4630      	mov	r0, r6
 8008022:	f7ff ff43 	bl	8007eac <_Balloc>
 8008026:	b940      	cbnz	r0, 800803a <__s2b+0x36>
 8008028:	4602      	mov	r2, r0
 800802a:	21ce      	movs	r1, #206	; 0xce
 800802c:	4b18      	ldr	r3, [pc, #96]	; (8008090 <__s2b+0x8c>)
 800802e:	4819      	ldr	r0, [pc, #100]	; (8008094 <__s2b+0x90>)
 8008030:	f000 fe3a 	bl	8008ca8 <__assert_func>
 8008034:	0052      	lsls	r2, r2, #1
 8008036:	3101      	adds	r1, #1
 8008038:	e7f0      	b.n	800801c <__s2b+0x18>
 800803a:	9b08      	ldr	r3, [sp, #32]
 800803c:	2d09      	cmp	r5, #9
 800803e:	6143      	str	r3, [r0, #20]
 8008040:	f04f 0301 	mov.w	r3, #1
 8008044:	6103      	str	r3, [r0, #16]
 8008046:	dd16      	ble.n	8008076 <__s2b+0x72>
 8008048:	f104 0909 	add.w	r9, r4, #9
 800804c:	46c8      	mov	r8, r9
 800804e:	442c      	add	r4, r5
 8008050:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008054:	4601      	mov	r1, r0
 8008056:	220a      	movs	r2, #10
 8008058:	4630      	mov	r0, r6
 800805a:	3b30      	subs	r3, #48	; 0x30
 800805c:	f7ff ff88 	bl	8007f70 <__multadd>
 8008060:	45a0      	cmp	r8, r4
 8008062:	d1f5      	bne.n	8008050 <__s2b+0x4c>
 8008064:	f1a5 0408 	sub.w	r4, r5, #8
 8008068:	444c      	add	r4, r9
 800806a:	1b2d      	subs	r5, r5, r4
 800806c:	1963      	adds	r3, r4, r5
 800806e:	42bb      	cmp	r3, r7
 8008070:	db04      	blt.n	800807c <__s2b+0x78>
 8008072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008076:	2509      	movs	r5, #9
 8008078:	340a      	adds	r4, #10
 800807a:	e7f6      	b.n	800806a <__s2b+0x66>
 800807c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008080:	4601      	mov	r1, r0
 8008082:	220a      	movs	r2, #10
 8008084:	4630      	mov	r0, r6
 8008086:	3b30      	subs	r3, #48	; 0x30
 8008088:	f7ff ff72 	bl	8007f70 <__multadd>
 800808c:	e7ee      	b.n	800806c <__s2b+0x68>
 800808e:	bf00      	nop
 8008090:	08009a74 	.word	0x08009a74
 8008094:	08009b04 	.word	0x08009b04

08008098 <__hi0bits>:
 8008098:	0c02      	lsrs	r2, r0, #16
 800809a:	0412      	lsls	r2, r2, #16
 800809c:	4603      	mov	r3, r0
 800809e:	b9ca      	cbnz	r2, 80080d4 <__hi0bits+0x3c>
 80080a0:	0403      	lsls	r3, r0, #16
 80080a2:	2010      	movs	r0, #16
 80080a4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80080a8:	bf04      	itt	eq
 80080aa:	021b      	lsleq	r3, r3, #8
 80080ac:	3008      	addeq	r0, #8
 80080ae:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80080b2:	bf04      	itt	eq
 80080b4:	011b      	lsleq	r3, r3, #4
 80080b6:	3004      	addeq	r0, #4
 80080b8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80080bc:	bf04      	itt	eq
 80080be:	009b      	lsleq	r3, r3, #2
 80080c0:	3002      	addeq	r0, #2
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	db05      	blt.n	80080d2 <__hi0bits+0x3a>
 80080c6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80080ca:	f100 0001 	add.w	r0, r0, #1
 80080ce:	bf08      	it	eq
 80080d0:	2020      	moveq	r0, #32
 80080d2:	4770      	bx	lr
 80080d4:	2000      	movs	r0, #0
 80080d6:	e7e5      	b.n	80080a4 <__hi0bits+0xc>

080080d8 <__lo0bits>:
 80080d8:	6803      	ldr	r3, [r0, #0]
 80080da:	4602      	mov	r2, r0
 80080dc:	f013 0007 	ands.w	r0, r3, #7
 80080e0:	d00b      	beq.n	80080fa <__lo0bits+0x22>
 80080e2:	07d9      	lsls	r1, r3, #31
 80080e4:	d422      	bmi.n	800812c <__lo0bits+0x54>
 80080e6:	0798      	lsls	r0, r3, #30
 80080e8:	bf49      	itett	mi
 80080ea:	085b      	lsrmi	r3, r3, #1
 80080ec:	089b      	lsrpl	r3, r3, #2
 80080ee:	2001      	movmi	r0, #1
 80080f0:	6013      	strmi	r3, [r2, #0]
 80080f2:	bf5c      	itt	pl
 80080f4:	2002      	movpl	r0, #2
 80080f6:	6013      	strpl	r3, [r2, #0]
 80080f8:	4770      	bx	lr
 80080fa:	b299      	uxth	r1, r3
 80080fc:	b909      	cbnz	r1, 8008102 <__lo0bits+0x2a>
 80080fe:	2010      	movs	r0, #16
 8008100:	0c1b      	lsrs	r3, r3, #16
 8008102:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008106:	bf04      	itt	eq
 8008108:	0a1b      	lsreq	r3, r3, #8
 800810a:	3008      	addeq	r0, #8
 800810c:	0719      	lsls	r1, r3, #28
 800810e:	bf04      	itt	eq
 8008110:	091b      	lsreq	r3, r3, #4
 8008112:	3004      	addeq	r0, #4
 8008114:	0799      	lsls	r1, r3, #30
 8008116:	bf04      	itt	eq
 8008118:	089b      	lsreq	r3, r3, #2
 800811a:	3002      	addeq	r0, #2
 800811c:	07d9      	lsls	r1, r3, #31
 800811e:	d403      	bmi.n	8008128 <__lo0bits+0x50>
 8008120:	085b      	lsrs	r3, r3, #1
 8008122:	f100 0001 	add.w	r0, r0, #1
 8008126:	d003      	beq.n	8008130 <__lo0bits+0x58>
 8008128:	6013      	str	r3, [r2, #0]
 800812a:	4770      	bx	lr
 800812c:	2000      	movs	r0, #0
 800812e:	4770      	bx	lr
 8008130:	2020      	movs	r0, #32
 8008132:	4770      	bx	lr

08008134 <__i2b>:
 8008134:	b510      	push	{r4, lr}
 8008136:	460c      	mov	r4, r1
 8008138:	2101      	movs	r1, #1
 800813a:	f7ff feb7 	bl	8007eac <_Balloc>
 800813e:	4602      	mov	r2, r0
 8008140:	b928      	cbnz	r0, 800814e <__i2b+0x1a>
 8008142:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008146:	4b04      	ldr	r3, [pc, #16]	; (8008158 <__i2b+0x24>)
 8008148:	4804      	ldr	r0, [pc, #16]	; (800815c <__i2b+0x28>)
 800814a:	f000 fdad 	bl	8008ca8 <__assert_func>
 800814e:	2301      	movs	r3, #1
 8008150:	6144      	str	r4, [r0, #20]
 8008152:	6103      	str	r3, [r0, #16]
 8008154:	bd10      	pop	{r4, pc}
 8008156:	bf00      	nop
 8008158:	08009a74 	.word	0x08009a74
 800815c:	08009b04 	.word	0x08009b04

08008160 <__multiply>:
 8008160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008164:	4614      	mov	r4, r2
 8008166:	690a      	ldr	r2, [r1, #16]
 8008168:	6923      	ldr	r3, [r4, #16]
 800816a:	460d      	mov	r5, r1
 800816c:	429a      	cmp	r2, r3
 800816e:	bfbe      	ittt	lt
 8008170:	460b      	movlt	r3, r1
 8008172:	4625      	movlt	r5, r4
 8008174:	461c      	movlt	r4, r3
 8008176:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800817a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800817e:	68ab      	ldr	r3, [r5, #8]
 8008180:	6869      	ldr	r1, [r5, #4]
 8008182:	eb0a 0709 	add.w	r7, sl, r9
 8008186:	42bb      	cmp	r3, r7
 8008188:	b085      	sub	sp, #20
 800818a:	bfb8      	it	lt
 800818c:	3101      	addlt	r1, #1
 800818e:	f7ff fe8d 	bl	8007eac <_Balloc>
 8008192:	b930      	cbnz	r0, 80081a2 <__multiply+0x42>
 8008194:	4602      	mov	r2, r0
 8008196:	f240 115d 	movw	r1, #349	; 0x15d
 800819a:	4b41      	ldr	r3, [pc, #260]	; (80082a0 <__multiply+0x140>)
 800819c:	4841      	ldr	r0, [pc, #260]	; (80082a4 <__multiply+0x144>)
 800819e:	f000 fd83 	bl	8008ca8 <__assert_func>
 80081a2:	f100 0614 	add.w	r6, r0, #20
 80081a6:	4633      	mov	r3, r6
 80081a8:	2200      	movs	r2, #0
 80081aa:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80081ae:	4543      	cmp	r3, r8
 80081b0:	d31e      	bcc.n	80081f0 <__multiply+0x90>
 80081b2:	f105 0c14 	add.w	ip, r5, #20
 80081b6:	f104 0314 	add.w	r3, r4, #20
 80081ba:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80081be:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80081c2:	9202      	str	r2, [sp, #8]
 80081c4:	ebac 0205 	sub.w	r2, ip, r5
 80081c8:	3a15      	subs	r2, #21
 80081ca:	f022 0203 	bic.w	r2, r2, #3
 80081ce:	3204      	adds	r2, #4
 80081d0:	f105 0115 	add.w	r1, r5, #21
 80081d4:	458c      	cmp	ip, r1
 80081d6:	bf38      	it	cc
 80081d8:	2204      	movcc	r2, #4
 80081da:	9201      	str	r2, [sp, #4]
 80081dc:	9a02      	ldr	r2, [sp, #8]
 80081de:	9303      	str	r3, [sp, #12]
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d808      	bhi.n	80081f6 <__multiply+0x96>
 80081e4:	2f00      	cmp	r7, #0
 80081e6:	dc55      	bgt.n	8008294 <__multiply+0x134>
 80081e8:	6107      	str	r7, [r0, #16]
 80081ea:	b005      	add	sp, #20
 80081ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081f0:	f843 2b04 	str.w	r2, [r3], #4
 80081f4:	e7db      	b.n	80081ae <__multiply+0x4e>
 80081f6:	f8b3 a000 	ldrh.w	sl, [r3]
 80081fa:	f1ba 0f00 	cmp.w	sl, #0
 80081fe:	d020      	beq.n	8008242 <__multiply+0xe2>
 8008200:	46b1      	mov	r9, r6
 8008202:	2200      	movs	r2, #0
 8008204:	f105 0e14 	add.w	lr, r5, #20
 8008208:	f85e 4b04 	ldr.w	r4, [lr], #4
 800820c:	f8d9 b000 	ldr.w	fp, [r9]
 8008210:	b2a1      	uxth	r1, r4
 8008212:	fa1f fb8b 	uxth.w	fp, fp
 8008216:	fb0a b101 	mla	r1, sl, r1, fp
 800821a:	4411      	add	r1, r2
 800821c:	f8d9 2000 	ldr.w	r2, [r9]
 8008220:	0c24      	lsrs	r4, r4, #16
 8008222:	0c12      	lsrs	r2, r2, #16
 8008224:	fb0a 2404 	mla	r4, sl, r4, r2
 8008228:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800822c:	b289      	uxth	r1, r1
 800822e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008232:	45f4      	cmp	ip, lr
 8008234:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008238:	f849 1b04 	str.w	r1, [r9], #4
 800823c:	d8e4      	bhi.n	8008208 <__multiply+0xa8>
 800823e:	9901      	ldr	r1, [sp, #4]
 8008240:	5072      	str	r2, [r6, r1]
 8008242:	9a03      	ldr	r2, [sp, #12]
 8008244:	3304      	adds	r3, #4
 8008246:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800824a:	f1b9 0f00 	cmp.w	r9, #0
 800824e:	d01f      	beq.n	8008290 <__multiply+0x130>
 8008250:	46b6      	mov	lr, r6
 8008252:	f04f 0a00 	mov.w	sl, #0
 8008256:	6834      	ldr	r4, [r6, #0]
 8008258:	f105 0114 	add.w	r1, r5, #20
 800825c:	880a      	ldrh	r2, [r1, #0]
 800825e:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008262:	b2a4      	uxth	r4, r4
 8008264:	fb09 b202 	mla	r2, r9, r2, fp
 8008268:	4492      	add	sl, r2
 800826a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800826e:	f84e 4b04 	str.w	r4, [lr], #4
 8008272:	f851 4b04 	ldr.w	r4, [r1], #4
 8008276:	f8be 2000 	ldrh.w	r2, [lr]
 800827a:	0c24      	lsrs	r4, r4, #16
 800827c:	fb09 2404 	mla	r4, r9, r4, r2
 8008280:	458c      	cmp	ip, r1
 8008282:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008286:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800828a:	d8e7      	bhi.n	800825c <__multiply+0xfc>
 800828c:	9a01      	ldr	r2, [sp, #4]
 800828e:	50b4      	str	r4, [r6, r2]
 8008290:	3604      	adds	r6, #4
 8008292:	e7a3      	b.n	80081dc <__multiply+0x7c>
 8008294:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008298:	2b00      	cmp	r3, #0
 800829a:	d1a5      	bne.n	80081e8 <__multiply+0x88>
 800829c:	3f01      	subs	r7, #1
 800829e:	e7a1      	b.n	80081e4 <__multiply+0x84>
 80082a0:	08009a74 	.word	0x08009a74
 80082a4:	08009b04 	.word	0x08009b04

080082a8 <__pow5mult>:
 80082a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082ac:	4615      	mov	r5, r2
 80082ae:	f012 0203 	ands.w	r2, r2, #3
 80082b2:	4606      	mov	r6, r0
 80082b4:	460f      	mov	r7, r1
 80082b6:	d007      	beq.n	80082c8 <__pow5mult+0x20>
 80082b8:	4c25      	ldr	r4, [pc, #148]	; (8008350 <__pow5mult+0xa8>)
 80082ba:	3a01      	subs	r2, #1
 80082bc:	2300      	movs	r3, #0
 80082be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80082c2:	f7ff fe55 	bl	8007f70 <__multadd>
 80082c6:	4607      	mov	r7, r0
 80082c8:	10ad      	asrs	r5, r5, #2
 80082ca:	d03d      	beq.n	8008348 <__pow5mult+0xa0>
 80082cc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80082ce:	b97c      	cbnz	r4, 80082f0 <__pow5mult+0x48>
 80082d0:	2010      	movs	r0, #16
 80082d2:	f7ff fdb5 	bl	8007e40 <malloc>
 80082d6:	4602      	mov	r2, r0
 80082d8:	6270      	str	r0, [r6, #36]	; 0x24
 80082da:	b928      	cbnz	r0, 80082e8 <__pow5mult+0x40>
 80082dc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80082e0:	4b1c      	ldr	r3, [pc, #112]	; (8008354 <__pow5mult+0xac>)
 80082e2:	481d      	ldr	r0, [pc, #116]	; (8008358 <__pow5mult+0xb0>)
 80082e4:	f000 fce0 	bl	8008ca8 <__assert_func>
 80082e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80082ec:	6004      	str	r4, [r0, #0]
 80082ee:	60c4      	str	r4, [r0, #12]
 80082f0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80082f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80082f8:	b94c      	cbnz	r4, 800830e <__pow5mult+0x66>
 80082fa:	f240 2171 	movw	r1, #625	; 0x271
 80082fe:	4630      	mov	r0, r6
 8008300:	f7ff ff18 	bl	8008134 <__i2b>
 8008304:	2300      	movs	r3, #0
 8008306:	4604      	mov	r4, r0
 8008308:	f8c8 0008 	str.w	r0, [r8, #8]
 800830c:	6003      	str	r3, [r0, #0]
 800830e:	f04f 0900 	mov.w	r9, #0
 8008312:	07eb      	lsls	r3, r5, #31
 8008314:	d50a      	bpl.n	800832c <__pow5mult+0x84>
 8008316:	4639      	mov	r1, r7
 8008318:	4622      	mov	r2, r4
 800831a:	4630      	mov	r0, r6
 800831c:	f7ff ff20 	bl	8008160 <__multiply>
 8008320:	4680      	mov	r8, r0
 8008322:	4639      	mov	r1, r7
 8008324:	4630      	mov	r0, r6
 8008326:	f7ff fe01 	bl	8007f2c <_Bfree>
 800832a:	4647      	mov	r7, r8
 800832c:	106d      	asrs	r5, r5, #1
 800832e:	d00b      	beq.n	8008348 <__pow5mult+0xa0>
 8008330:	6820      	ldr	r0, [r4, #0]
 8008332:	b938      	cbnz	r0, 8008344 <__pow5mult+0x9c>
 8008334:	4622      	mov	r2, r4
 8008336:	4621      	mov	r1, r4
 8008338:	4630      	mov	r0, r6
 800833a:	f7ff ff11 	bl	8008160 <__multiply>
 800833e:	6020      	str	r0, [r4, #0]
 8008340:	f8c0 9000 	str.w	r9, [r0]
 8008344:	4604      	mov	r4, r0
 8008346:	e7e4      	b.n	8008312 <__pow5mult+0x6a>
 8008348:	4638      	mov	r0, r7
 800834a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800834e:	bf00      	nop
 8008350:	08009c58 	.word	0x08009c58
 8008354:	080099fe 	.word	0x080099fe
 8008358:	08009b04 	.word	0x08009b04

0800835c <__lshift>:
 800835c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008360:	460c      	mov	r4, r1
 8008362:	4607      	mov	r7, r0
 8008364:	4691      	mov	r9, r2
 8008366:	6923      	ldr	r3, [r4, #16]
 8008368:	6849      	ldr	r1, [r1, #4]
 800836a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800836e:	68a3      	ldr	r3, [r4, #8]
 8008370:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008374:	f108 0601 	add.w	r6, r8, #1
 8008378:	42b3      	cmp	r3, r6
 800837a:	db0b      	blt.n	8008394 <__lshift+0x38>
 800837c:	4638      	mov	r0, r7
 800837e:	f7ff fd95 	bl	8007eac <_Balloc>
 8008382:	4605      	mov	r5, r0
 8008384:	b948      	cbnz	r0, 800839a <__lshift+0x3e>
 8008386:	4602      	mov	r2, r0
 8008388:	f240 11d9 	movw	r1, #473	; 0x1d9
 800838c:	4b27      	ldr	r3, [pc, #156]	; (800842c <__lshift+0xd0>)
 800838e:	4828      	ldr	r0, [pc, #160]	; (8008430 <__lshift+0xd4>)
 8008390:	f000 fc8a 	bl	8008ca8 <__assert_func>
 8008394:	3101      	adds	r1, #1
 8008396:	005b      	lsls	r3, r3, #1
 8008398:	e7ee      	b.n	8008378 <__lshift+0x1c>
 800839a:	2300      	movs	r3, #0
 800839c:	f100 0114 	add.w	r1, r0, #20
 80083a0:	f100 0210 	add.w	r2, r0, #16
 80083a4:	4618      	mov	r0, r3
 80083a6:	4553      	cmp	r3, sl
 80083a8:	db33      	blt.n	8008412 <__lshift+0xb6>
 80083aa:	6920      	ldr	r0, [r4, #16]
 80083ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80083b0:	f104 0314 	add.w	r3, r4, #20
 80083b4:	f019 091f 	ands.w	r9, r9, #31
 80083b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80083bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80083c0:	d02b      	beq.n	800841a <__lshift+0xbe>
 80083c2:	468a      	mov	sl, r1
 80083c4:	2200      	movs	r2, #0
 80083c6:	f1c9 0e20 	rsb	lr, r9, #32
 80083ca:	6818      	ldr	r0, [r3, #0]
 80083cc:	fa00 f009 	lsl.w	r0, r0, r9
 80083d0:	4302      	orrs	r2, r0
 80083d2:	f84a 2b04 	str.w	r2, [sl], #4
 80083d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80083da:	459c      	cmp	ip, r3
 80083dc:	fa22 f20e 	lsr.w	r2, r2, lr
 80083e0:	d8f3      	bhi.n	80083ca <__lshift+0x6e>
 80083e2:	ebac 0304 	sub.w	r3, ip, r4
 80083e6:	3b15      	subs	r3, #21
 80083e8:	f023 0303 	bic.w	r3, r3, #3
 80083ec:	3304      	adds	r3, #4
 80083ee:	f104 0015 	add.w	r0, r4, #21
 80083f2:	4584      	cmp	ip, r0
 80083f4:	bf38      	it	cc
 80083f6:	2304      	movcc	r3, #4
 80083f8:	50ca      	str	r2, [r1, r3]
 80083fa:	b10a      	cbz	r2, 8008400 <__lshift+0xa4>
 80083fc:	f108 0602 	add.w	r6, r8, #2
 8008400:	3e01      	subs	r6, #1
 8008402:	4638      	mov	r0, r7
 8008404:	4621      	mov	r1, r4
 8008406:	612e      	str	r6, [r5, #16]
 8008408:	f7ff fd90 	bl	8007f2c <_Bfree>
 800840c:	4628      	mov	r0, r5
 800840e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008412:	f842 0f04 	str.w	r0, [r2, #4]!
 8008416:	3301      	adds	r3, #1
 8008418:	e7c5      	b.n	80083a6 <__lshift+0x4a>
 800841a:	3904      	subs	r1, #4
 800841c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008420:	459c      	cmp	ip, r3
 8008422:	f841 2f04 	str.w	r2, [r1, #4]!
 8008426:	d8f9      	bhi.n	800841c <__lshift+0xc0>
 8008428:	e7ea      	b.n	8008400 <__lshift+0xa4>
 800842a:	bf00      	nop
 800842c:	08009a74 	.word	0x08009a74
 8008430:	08009b04 	.word	0x08009b04

08008434 <__mcmp>:
 8008434:	4603      	mov	r3, r0
 8008436:	690a      	ldr	r2, [r1, #16]
 8008438:	6900      	ldr	r0, [r0, #16]
 800843a:	b530      	push	{r4, r5, lr}
 800843c:	1a80      	subs	r0, r0, r2
 800843e:	d10d      	bne.n	800845c <__mcmp+0x28>
 8008440:	3314      	adds	r3, #20
 8008442:	3114      	adds	r1, #20
 8008444:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008448:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800844c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008450:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008454:	4295      	cmp	r5, r2
 8008456:	d002      	beq.n	800845e <__mcmp+0x2a>
 8008458:	d304      	bcc.n	8008464 <__mcmp+0x30>
 800845a:	2001      	movs	r0, #1
 800845c:	bd30      	pop	{r4, r5, pc}
 800845e:	42a3      	cmp	r3, r4
 8008460:	d3f4      	bcc.n	800844c <__mcmp+0x18>
 8008462:	e7fb      	b.n	800845c <__mcmp+0x28>
 8008464:	f04f 30ff 	mov.w	r0, #4294967295
 8008468:	e7f8      	b.n	800845c <__mcmp+0x28>
	...

0800846c <__mdiff>:
 800846c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008470:	460c      	mov	r4, r1
 8008472:	4606      	mov	r6, r0
 8008474:	4611      	mov	r1, r2
 8008476:	4620      	mov	r0, r4
 8008478:	4692      	mov	sl, r2
 800847a:	f7ff ffdb 	bl	8008434 <__mcmp>
 800847e:	1e05      	subs	r5, r0, #0
 8008480:	d111      	bne.n	80084a6 <__mdiff+0x3a>
 8008482:	4629      	mov	r1, r5
 8008484:	4630      	mov	r0, r6
 8008486:	f7ff fd11 	bl	8007eac <_Balloc>
 800848a:	4602      	mov	r2, r0
 800848c:	b928      	cbnz	r0, 800849a <__mdiff+0x2e>
 800848e:	f240 2132 	movw	r1, #562	; 0x232
 8008492:	4b3c      	ldr	r3, [pc, #240]	; (8008584 <__mdiff+0x118>)
 8008494:	483c      	ldr	r0, [pc, #240]	; (8008588 <__mdiff+0x11c>)
 8008496:	f000 fc07 	bl	8008ca8 <__assert_func>
 800849a:	2301      	movs	r3, #1
 800849c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80084a0:	4610      	mov	r0, r2
 80084a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084a6:	bfa4      	itt	ge
 80084a8:	4653      	movge	r3, sl
 80084aa:	46a2      	movge	sl, r4
 80084ac:	4630      	mov	r0, r6
 80084ae:	f8da 1004 	ldr.w	r1, [sl, #4]
 80084b2:	bfa6      	itte	ge
 80084b4:	461c      	movge	r4, r3
 80084b6:	2500      	movge	r5, #0
 80084b8:	2501      	movlt	r5, #1
 80084ba:	f7ff fcf7 	bl	8007eac <_Balloc>
 80084be:	4602      	mov	r2, r0
 80084c0:	b918      	cbnz	r0, 80084ca <__mdiff+0x5e>
 80084c2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80084c6:	4b2f      	ldr	r3, [pc, #188]	; (8008584 <__mdiff+0x118>)
 80084c8:	e7e4      	b.n	8008494 <__mdiff+0x28>
 80084ca:	f100 0814 	add.w	r8, r0, #20
 80084ce:	f8da 7010 	ldr.w	r7, [sl, #16]
 80084d2:	60c5      	str	r5, [r0, #12]
 80084d4:	f04f 0c00 	mov.w	ip, #0
 80084d8:	f10a 0514 	add.w	r5, sl, #20
 80084dc:	f10a 0010 	add.w	r0, sl, #16
 80084e0:	46c2      	mov	sl, r8
 80084e2:	6926      	ldr	r6, [r4, #16]
 80084e4:	f104 0914 	add.w	r9, r4, #20
 80084e8:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 80084ec:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80084f0:	f850 bf04 	ldr.w	fp, [r0, #4]!
 80084f4:	f859 3b04 	ldr.w	r3, [r9], #4
 80084f8:	fa1f f18b 	uxth.w	r1, fp
 80084fc:	4461      	add	r1, ip
 80084fe:	fa1f fc83 	uxth.w	ip, r3
 8008502:	0c1b      	lsrs	r3, r3, #16
 8008504:	eba1 010c 	sub.w	r1, r1, ip
 8008508:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800850c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008510:	b289      	uxth	r1, r1
 8008512:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008516:	454e      	cmp	r6, r9
 8008518:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800851c:	f84a 3b04 	str.w	r3, [sl], #4
 8008520:	d8e6      	bhi.n	80084f0 <__mdiff+0x84>
 8008522:	1b33      	subs	r3, r6, r4
 8008524:	3b15      	subs	r3, #21
 8008526:	f023 0303 	bic.w	r3, r3, #3
 800852a:	3415      	adds	r4, #21
 800852c:	3304      	adds	r3, #4
 800852e:	42a6      	cmp	r6, r4
 8008530:	bf38      	it	cc
 8008532:	2304      	movcc	r3, #4
 8008534:	441d      	add	r5, r3
 8008536:	4443      	add	r3, r8
 8008538:	461e      	mov	r6, r3
 800853a:	462c      	mov	r4, r5
 800853c:	4574      	cmp	r4, lr
 800853e:	d30e      	bcc.n	800855e <__mdiff+0xf2>
 8008540:	f10e 0103 	add.w	r1, lr, #3
 8008544:	1b49      	subs	r1, r1, r5
 8008546:	f021 0103 	bic.w	r1, r1, #3
 800854a:	3d03      	subs	r5, #3
 800854c:	45ae      	cmp	lr, r5
 800854e:	bf38      	it	cc
 8008550:	2100      	movcc	r1, #0
 8008552:	4419      	add	r1, r3
 8008554:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008558:	b18b      	cbz	r3, 800857e <__mdiff+0x112>
 800855a:	6117      	str	r7, [r2, #16]
 800855c:	e7a0      	b.n	80084a0 <__mdiff+0x34>
 800855e:	f854 8b04 	ldr.w	r8, [r4], #4
 8008562:	fa1f f188 	uxth.w	r1, r8
 8008566:	4461      	add	r1, ip
 8008568:	1408      	asrs	r0, r1, #16
 800856a:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800856e:	b289      	uxth	r1, r1
 8008570:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008574:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008578:	f846 1b04 	str.w	r1, [r6], #4
 800857c:	e7de      	b.n	800853c <__mdiff+0xd0>
 800857e:	3f01      	subs	r7, #1
 8008580:	e7e8      	b.n	8008554 <__mdiff+0xe8>
 8008582:	bf00      	nop
 8008584:	08009a74 	.word	0x08009a74
 8008588:	08009b04 	.word	0x08009b04

0800858c <__ulp>:
 800858c:	4b11      	ldr	r3, [pc, #68]	; (80085d4 <__ulp+0x48>)
 800858e:	400b      	ands	r3, r1
 8008590:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008594:	2b00      	cmp	r3, #0
 8008596:	dd02      	ble.n	800859e <__ulp+0x12>
 8008598:	2000      	movs	r0, #0
 800859a:	4619      	mov	r1, r3
 800859c:	4770      	bx	lr
 800859e:	425b      	negs	r3, r3
 80085a0:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80085a4:	f04f 0000 	mov.w	r0, #0
 80085a8:	f04f 0100 	mov.w	r1, #0
 80085ac:	ea4f 5223 	mov.w	r2, r3, asr #20
 80085b0:	da04      	bge.n	80085bc <__ulp+0x30>
 80085b2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80085b6:	fa43 f102 	asr.w	r1, r3, r2
 80085ba:	4770      	bx	lr
 80085bc:	f1a2 0314 	sub.w	r3, r2, #20
 80085c0:	2b1e      	cmp	r3, #30
 80085c2:	bfd6      	itet	le
 80085c4:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80085c8:	2301      	movgt	r3, #1
 80085ca:	fa22 f303 	lsrle.w	r3, r2, r3
 80085ce:	4618      	mov	r0, r3
 80085d0:	4770      	bx	lr
 80085d2:	bf00      	nop
 80085d4:	7ff00000 	.word	0x7ff00000

080085d8 <__b2d>:
 80085d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085dc:	6907      	ldr	r7, [r0, #16]
 80085de:	f100 0914 	add.w	r9, r0, #20
 80085e2:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80085e6:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80085ea:	f1a7 0804 	sub.w	r8, r7, #4
 80085ee:	4630      	mov	r0, r6
 80085f0:	f7ff fd52 	bl	8008098 <__hi0bits>
 80085f4:	f1c0 0320 	rsb	r3, r0, #32
 80085f8:	280a      	cmp	r0, #10
 80085fa:	600b      	str	r3, [r1, #0]
 80085fc:	491f      	ldr	r1, [pc, #124]	; (800867c <__b2d+0xa4>)
 80085fe:	dc17      	bgt.n	8008630 <__b2d+0x58>
 8008600:	45c1      	cmp	r9, r8
 8008602:	bf28      	it	cs
 8008604:	2200      	movcs	r2, #0
 8008606:	f1c0 0c0b 	rsb	ip, r0, #11
 800860a:	fa26 f30c 	lsr.w	r3, r6, ip
 800860e:	bf38      	it	cc
 8008610:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008614:	ea43 0501 	orr.w	r5, r3, r1
 8008618:	f100 0315 	add.w	r3, r0, #21
 800861c:	fa06 f303 	lsl.w	r3, r6, r3
 8008620:	fa22 f20c 	lsr.w	r2, r2, ip
 8008624:	ea43 0402 	orr.w	r4, r3, r2
 8008628:	4620      	mov	r0, r4
 800862a:	4629      	mov	r1, r5
 800862c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008630:	45c1      	cmp	r9, r8
 8008632:	bf2e      	itee	cs
 8008634:	2200      	movcs	r2, #0
 8008636:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800863a:	f1a7 0808 	subcc.w	r8, r7, #8
 800863e:	f1b0 030b 	subs.w	r3, r0, #11
 8008642:	d016      	beq.n	8008672 <__b2d+0x9a>
 8008644:	f1c3 0720 	rsb	r7, r3, #32
 8008648:	fa22 f107 	lsr.w	r1, r2, r7
 800864c:	45c8      	cmp	r8, r9
 800864e:	fa06 f603 	lsl.w	r6, r6, r3
 8008652:	ea46 0601 	orr.w	r6, r6, r1
 8008656:	bf94      	ite	ls
 8008658:	2100      	movls	r1, #0
 800865a:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800865e:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8008662:	fa02 f003 	lsl.w	r0, r2, r3
 8008666:	40f9      	lsrs	r1, r7
 8008668:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800866c:	ea40 0401 	orr.w	r4, r0, r1
 8008670:	e7da      	b.n	8008628 <__b2d+0x50>
 8008672:	4614      	mov	r4, r2
 8008674:	ea46 0501 	orr.w	r5, r6, r1
 8008678:	e7d6      	b.n	8008628 <__b2d+0x50>
 800867a:	bf00      	nop
 800867c:	3ff00000 	.word	0x3ff00000

08008680 <__d2b>:
 8008680:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008684:	2101      	movs	r1, #1
 8008686:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800868a:	4690      	mov	r8, r2
 800868c:	461d      	mov	r5, r3
 800868e:	f7ff fc0d 	bl	8007eac <_Balloc>
 8008692:	4604      	mov	r4, r0
 8008694:	b930      	cbnz	r0, 80086a4 <__d2b+0x24>
 8008696:	4602      	mov	r2, r0
 8008698:	f240 310a 	movw	r1, #778	; 0x30a
 800869c:	4b24      	ldr	r3, [pc, #144]	; (8008730 <__d2b+0xb0>)
 800869e:	4825      	ldr	r0, [pc, #148]	; (8008734 <__d2b+0xb4>)
 80086a0:	f000 fb02 	bl	8008ca8 <__assert_func>
 80086a4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80086a8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80086ac:	bb2d      	cbnz	r5, 80086fa <__d2b+0x7a>
 80086ae:	9301      	str	r3, [sp, #4]
 80086b0:	f1b8 0300 	subs.w	r3, r8, #0
 80086b4:	d026      	beq.n	8008704 <__d2b+0x84>
 80086b6:	4668      	mov	r0, sp
 80086b8:	9300      	str	r3, [sp, #0]
 80086ba:	f7ff fd0d 	bl	80080d8 <__lo0bits>
 80086be:	9900      	ldr	r1, [sp, #0]
 80086c0:	b1f0      	cbz	r0, 8008700 <__d2b+0x80>
 80086c2:	9a01      	ldr	r2, [sp, #4]
 80086c4:	f1c0 0320 	rsb	r3, r0, #32
 80086c8:	fa02 f303 	lsl.w	r3, r2, r3
 80086cc:	430b      	orrs	r3, r1
 80086ce:	40c2      	lsrs	r2, r0
 80086d0:	6163      	str	r3, [r4, #20]
 80086d2:	9201      	str	r2, [sp, #4]
 80086d4:	9b01      	ldr	r3, [sp, #4]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	bf14      	ite	ne
 80086da:	2102      	movne	r1, #2
 80086dc:	2101      	moveq	r1, #1
 80086de:	61a3      	str	r3, [r4, #24]
 80086e0:	6121      	str	r1, [r4, #16]
 80086e2:	b1c5      	cbz	r5, 8008716 <__d2b+0x96>
 80086e4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80086e8:	4405      	add	r5, r0
 80086ea:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80086ee:	603d      	str	r5, [r7, #0]
 80086f0:	6030      	str	r0, [r6, #0]
 80086f2:	4620      	mov	r0, r4
 80086f4:	b002      	add	sp, #8
 80086f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80086fe:	e7d6      	b.n	80086ae <__d2b+0x2e>
 8008700:	6161      	str	r1, [r4, #20]
 8008702:	e7e7      	b.n	80086d4 <__d2b+0x54>
 8008704:	a801      	add	r0, sp, #4
 8008706:	f7ff fce7 	bl	80080d8 <__lo0bits>
 800870a:	2101      	movs	r1, #1
 800870c:	9b01      	ldr	r3, [sp, #4]
 800870e:	6121      	str	r1, [r4, #16]
 8008710:	6163      	str	r3, [r4, #20]
 8008712:	3020      	adds	r0, #32
 8008714:	e7e5      	b.n	80086e2 <__d2b+0x62>
 8008716:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800871a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800871e:	6038      	str	r0, [r7, #0]
 8008720:	6918      	ldr	r0, [r3, #16]
 8008722:	f7ff fcb9 	bl	8008098 <__hi0bits>
 8008726:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800872a:	6031      	str	r1, [r6, #0]
 800872c:	e7e1      	b.n	80086f2 <__d2b+0x72>
 800872e:	bf00      	nop
 8008730:	08009a74 	.word	0x08009a74
 8008734:	08009b04 	.word	0x08009b04

08008738 <__ratio>:
 8008738:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800873c:	4688      	mov	r8, r1
 800873e:	4669      	mov	r1, sp
 8008740:	4681      	mov	r9, r0
 8008742:	f7ff ff49 	bl	80085d8 <__b2d>
 8008746:	460f      	mov	r7, r1
 8008748:	4604      	mov	r4, r0
 800874a:	460d      	mov	r5, r1
 800874c:	4640      	mov	r0, r8
 800874e:	a901      	add	r1, sp, #4
 8008750:	f7ff ff42 	bl	80085d8 <__b2d>
 8008754:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008758:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800875c:	468b      	mov	fp, r1
 800875e:	eba3 0c02 	sub.w	ip, r3, r2
 8008762:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008766:	1a9b      	subs	r3, r3, r2
 8008768:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800876c:	2b00      	cmp	r3, #0
 800876e:	bfd5      	itete	le
 8008770:	460a      	movle	r2, r1
 8008772:	462a      	movgt	r2, r5
 8008774:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008778:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800877c:	bfd8      	it	le
 800877e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008782:	465b      	mov	r3, fp
 8008784:	4602      	mov	r2, r0
 8008786:	4639      	mov	r1, r7
 8008788:	4620      	mov	r0, r4
 800878a:	f7f7 ffcf 	bl	800072c <__aeabi_ddiv>
 800878e:	b003      	add	sp, #12
 8008790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008794 <__copybits>:
 8008794:	3901      	subs	r1, #1
 8008796:	b570      	push	{r4, r5, r6, lr}
 8008798:	1149      	asrs	r1, r1, #5
 800879a:	6914      	ldr	r4, [r2, #16]
 800879c:	3101      	adds	r1, #1
 800879e:	f102 0314 	add.w	r3, r2, #20
 80087a2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80087a6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80087aa:	1f05      	subs	r5, r0, #4
 80087ac:	42a3      	cmp	r3, r4
 80087ae:	d30c      	bcc.n	80087ca <__copybits+0x36>
 80087b0:	1aa3      	subs	r3, r4, r2
 80087b2:	3b11      	subs	r3, #17
 80087b4:	f023 0303 	bic.w	r3, r3, #3
 80087b8:	3211      	adds	r2, #17
 80087ba:	42a2      	cmp	r2, r4
 80087bc:	bf88      	it	hi
 80087be:	2300      	movhi	r3, #0
 80087c0:	4418      	add	r0, r3
 80087c2:	2300      	movs	r3, #0
 80087c4:	4288      	cmp	r0, r1
 80087c6:	d305      	bcc.n	80087d4 <__copybits+0x40>
 80087c8:	bd70      	pop	{r4, r5, r6, pc}
 80087ca:	f853 6b04 	ldr.w	r6, [r3], #4
 80087ce:	f845 6f04 	str.w	r6, [r5, #4]!
 80087d2:	e7eb      	b.n	80087ac <__copybits+0x18>
 80087d4:	f840 3b04 	str.w	r3, [r0], #4
 80087d8:	e7f4      	b.n	80087c4 <__copybits+0x30>

080087da <__any_on>:
 80087da:	f100 0214 	add.w	r2, r0, #20
 80087de:	6900      	ldr	r0, [r0, #16]
 80087e0:	114b      	asrs	r3, r1, #5
 80087e2:	4298      	cmp	r0, r3
 80087e4:	b510      	push	{r4, lr}
 80087e6:	db11      	blt.n	800880c <__any_on+0x32>
 80087e8:	dd0a      	ble.n	8008800 <__any_on+0x26>
 80087ea:	f011 011f 	ands.w	r1, r1, #31
 80087ee:	d007      	beq.n	8008800 <__any_on+0x26>
 80087f0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80087f4:	fa24 f001 	lsr.w	r0, r4, r1
 80087f8:	fa00 f101 	lsl.w	r1, r0, r1
 80087fc:	428c      	cmp	r4, r1
 80087fe:	d10b      	bne.n	8008818 <__any_on+0x3e>
 8008800:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008804:	4293      	cmp	r3, r2
 8008806:	d803      	bhi.n	8008810 <__any_on+0x36>
 8008808:	2000      	movs	r0, #0
 800880a:	bd10      	pop	{r4, pc}
 800880c:	4603      	mov	r3, r0
 800880e:	e7f7      	b.n	8008800 <__any_on+0x26>
 8008810:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008814:	2900      	cmp	r1, #0
 8008816:	d0f5      	beq.n	8008804 <__any_on+0x2a>
 8008818:	2001      	movs	r0, #1
 800881a:	e7f6      	b.n	800880a <__any_on+0x30>

0800881c <_calloc_r>:
 800881c:	b538      	push	{r3, r4, r5, lr}
 800881e:	fb02 f501 	mul.w	r5, r2, r1
 8008822:	4629      	mov	r1, r5
 8008824:	f000 f854 	bl	80088d0 <_malloc_r>
 8008828:	4604      	mov	r4, r0
 800882a:	b118      	cbz	r0, 8008834 <_calloc_r+0x18>
 800882c:	462a      	mov	r2, r5
 800882e:	2100      	movs	r1, #0
 8008830:	f7fc fbde 	bl	8004ff0 <memset>
 8008834:	4620      	mov	r0, r4
 8008836:	bd38      	pop	{r3, r4, r5, pc}

08008838 <_free_r>:
 8008838:	b538      	push	{r3, r4, r5, lr}
 800883a:	4605      	mov	r5, r0
 800883c:	2900      	cmp	r1, #0
 800883e:	d043      	beq.n	80088c8 <_free_r+0x90>
 8008840:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008844:	1f0c      	subs	r4, r1, #4
 8008846:	2b00      	cmp	r3, #0
 8008848:	bfb8      	it	lt
 800884a:	18e4      	addlt	r4, r4, r3
 800884c:	f000 fa76 	bl	8008d3c <__malloc_lock>
 8008850:	4a1e      	ldr	r2, [pc, #120]	; (80088cc <_free_r+0x94>)
 8008852:	6813      	ldr	r3, [r2, #0]
 8008854:	4610      	mov	r0, r2
 8008856:	b933      	cbnz	r3, 8008866 <_free_r+0x2e>
 8008858:	6063      	str	r3, [r4, #4]
 800885a:	6014      	str	r4, [r2, #0]
 800885c:	4628      	mov	r0, r5
 800885e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008862:	f000 ba71 	b.w	8008d48 <__malloc_unlock>
 8008866:	42a3      	cmp	r3, r4
 8008868:	d90a      	bls.n	8008880 <_free_r+0x48>
 800886a:	6821      	ldr	r1, [r4, #0]
 800886c:	1862      	adds	r2, r4, r1
 800886e:	4293      	cmp	r3, r2
 8008870:	bf01      	itttt	eq
 8008872:	681a      	ldreq	r2, [r3, #0]
 8008874:	685b      	ldreq	r3, [r3, #4]
 8008876:	1852      	addeq	r2, r2, r1
 8008878:	6022      	streq	r2, [r4, #0]
 800887a:	6063      	str	r3, [r4, #4]
 800887c:	6004      	str	r4, [r0, #0]
 800887e:	e7ed      	b.n	800885c <_free_r+0x24>
 8008880:	461a      	mov	r2, r3
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	b10b      	cbz	r3, 800888a <_free_r+0x52>
 8008886:	42a3      	cmp	r3, r4
 8008888:	d9fa      	bls.n	8008880 <_free_r+0x48>
 800888a:	6811      	ldr	r1, [r2, #0]
 800888c:	1850      	adds	r0, r2, r1
 800888e:	42a0      	cmp	r0, r4
 8008890:	d10b      	bne.n	80088aa <_free_r+0x72>
 8008892:	6820      	ldr	r0, [r4, #0]
 8008894:	4401      	add	r1, r0
 8008896:	1850      	adds	r0, r2, r1
 8008898:	4283      	cmp	r3, r0
 800889a:	6011      	str	r1, [r2, #0]
 800889c:	d1de      	bne.n	800885c <_free_r+0x24>
 800889e:	6818      	ldr	r0, [r3, #0]
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	4401      	add	r1, r0
 80088a4:	6011      	str	r1, [r2, #0]
 80088a6:	6053      	str	r3, [r2, #4]
 80088a8:	e7d8      	b.n	800885c <_free_r+0x24>
 80088aa:	d902      	bls.n	80088b2 <_free_r+0x7a>
 80088ac:	230c      	movs	r3, #12
 80088ae:	602b      	str	r3, [r5, #0]
 80088b0:	e7d4      	b.n	800885c <_free_r+0x24>
 80088b2:	6820      	ldr	r0, [r4, #0]
 80088b4:	1821      	adds	r1, r4, r0
 80088b6:	428b      	cmp	r3, r1
 80088b8:	bf01      	itttt	eq
 80088ba:	6819      	ldreq	r1, [r3, #0]
 80088bc:	685b      	ldreq	r3, [r3, #4]
 80088be:	1809      	addeq	r1, r1, r0
 80088c0:	6021      	streq	r1, [r4, #0]
 80088c2:	6063      	str	r3, [r4, #4]
 80088c4:	6054      	str	r4, [r2, #4]
 80088c6:	e7c9      	b.n	800885c <_free_r+0x24>
 80088c8:	bd38      	pop	{r3, r4, r5, pc}
 80088ca:	bf00      	nop
 80088cc:	20000204 	.word	0x20000204

080088d0 <_malloc_r>:
 80088d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088d2:	1ccd      	adds	r5, r1, #3
 80088d4:	f025 0503 	bic.w	r5, r5, #3
 80088d8:	3508      	adds	r5, #8
 80088da:	2d0c      	cmp	r5, #12
 80088dc:	bf38      	it	cc
 80088de:	250c      	movcc	r5, #12
 80088e0:	2d00      	cmp	r5, #0
 80088e2:	4606      	mov	r6, r0
 80088e4:	db01      	blt.n	80088ea <_malloc_r+0x1a>
 80088e6:	42a9      	cmp	r1, r5
 80088e8:	d903      	bls.n	80088f2 <_malloc_r+0x22>
 80088ea:	230c      	movs	r3, #12
 80088ec:	6033      	str	r3, [r6, #0]
 80088ee:	2000      	movs	r0, #0
 80088f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088f2:	f000 fa23 	bl	8008d3c <__malloc_lock>
 80088f6:	4921      	ldr	r1, [pc, #132]	; (800897c <_malloc_r+0xac>)
 80088f8:	680a      	ldr	r2, [r1, #0]
 80088fa:	4614      	mov	r4, r2
 80088fc:	b99c      	cbnz	r4, 8008926 <_malloc_r+0x56>
 80088fe:	4f20      	ldr	r7, [pc, #128]	; (8008980 <_malloc_r+0xb0>)
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	b923      	cbnz	r3, 800890e <_malloc_r+0x3e>
 8008904:	4621      	mov	r1, r4
 8008906:	4630      	mov	r0, r6
 8008908:	f000 f99e 	bl	8008c48 <_sbrk_r>
 800890c:	6038      	str	r0, [r7, #0]
 800890e:	4629      	mov	r1, r5
 8008910:	4630      	mov	r0, r6
 8008912:	f000 f999 	bl	8008c48 <_sbrk_r>
 8008916:	1c43      	adds	r3, r0, #1
 8008918:	d123      	bne.n	8008962 <_malloc_r+0x92>
 800891a:	230c      	movs	r3, #12
 800891c:	4630      	mov	r0, r6
 800891e:	6033      	str	r3, [r6, #0]
 8008920:	f000 fa12 	bl	8008d48 <__malloc_unlock>
 8008924:	e7e3      	b.n	80088ee <_malloc_r+0x1e>
 8008926:	6823      	ldr	r3, [r4, #0]
 8008928:	1b5b      	subs	r3, r3, r5
 800892a:	d417      	bmi.n	800895c <_malloc_r+0x8c>
 800892c:	2b0b      	cmp	r3, #11
 800892e:	d903      	bls.n	8008938 <_malloc_r+0x68>
 8008930:	6023      	str	r3, [r4, #0]
 8008932:	441c      	add	r4, r3
 8008934:	6025      	str	r5, [r4, #0]
 8008936:	e004      	b.n	8008942 <_malloc_r+0x72>
 8008938:	6863      	ldr	r3, [r4, #4]
 800893a:	42a2      	cmp	r2, r4
 800893c:	bf0c      	ite	eq
 800893e:	600b      	streq	r3, [r1, #0]
 8008940:	6053      	strne	r3, [r2, #4]
 8008942:	4630      	mov	r0, r6
 8008944:	f000 fa00 	bl	8008d48 <__malloc_unlock>
 8008948:	f104 000b 	add.w	r0, r4, #11
 800894c:	1d23      	adds	r3, r4, #4
 800894e:	f020 0007 	bic.w	r0, r0, #7
 8008952:	1ac2      	subs	r2, r0, r3
 8008954:	d0cc      	beq.n	80088f0 <_malloc_r+0x20>
 8008956:	1a1b      	subs	r3, r3, r0
 8008958:	50a3      	str	r3, [r4, r2]
 800895a:	e7c9      	b.n	80088f0 <_malloc_r+0x20>
 800895c:	4622      	mov	r2, r4
 800895e:	6864      	ldr	r4, [r4, #4]
 8008960:	e7cc      	b.n	80088fc <_malloc_r+0x2c>
 8008962:	1cc4      	adds	r4, r0, #3
 8008964:	f024 0403 	bic.w	r4, r4, #3
 8008968:	42a0      	cmp	r0, r4
 800896a:	d0e3      	beq.n	8008934 <_malloc_r+0x64>
 800896c:	1a21      	subs	r1, r4, r0
 800896e:	4630      	mov	r0, r6
 8008970:	f000 f96a 	bl	8008c48 <_sbrk_r>
 8008974:	3001      	adds	r0, #1
 8008976:	d1dd      	bne.n	8008934 <_malloc_r+0x64>
 8008978:	e7cf      	b.n	800891a <_malloc_r+0x4a>
 800897a:	bf00      	nop
 800897c:	20000204 	.word	0x20000204
 8008980:	20000208 	.word	0x20000208

08008984 <__ssputs_r>:
 8008984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008988:	688e      	ldr	r6, [r1, #8]
 800898a:	4682      	mov	sl, r0
 800898c:	429e      	cmp	r6, r3
 800898e:	460c      	mov	r4, r1
 8008990:	4690      	mov	r8, r2
 8008992:	461f      	mov	r7, r3
 8008994:	d838      	bhi.n	8008a08 <__ssputs_r+0x84>
 8008996:	898a      	ldrh	r2, [r1, #12]
 8008998:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800899c:	d032      	beq.n	8008a04 <__ssputs_r+0x80>
 800899e:	6825      	ldr	r5, [r4, #0]
 80089a0:	6909      	ldr	r1, [r1, #16]
 80089a2:	3301      	adds	r3, #1
 80089a4:	eba5 0901 	sub.w	r9, r5, r1
 80089a8:	6965      	ldr	r5, [r4, #20]
 80089aa:	444b      	add	r3, r9
 80089ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80089b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80089b4:	106d      	asrs	r5, r5, #1
 80089b6:	429d      	cmp	r5, r3
 80089b8:	bf38      	it	cc
 80089ba:	461d      	movcc	r5, r3
 80089bc:	0553      	lsls	r3, r2, #21
 80089be:	d531      	bpl.n	8008a24 <__ssputs_r+0xa0>
 80089c0:	4629      	mov	r1, r5
 80089c2:	f7ff ff85 	bl	80088d0 <_malloc_r>
 80089c6:	4606      	mov	r6, r0
 80089c8:	b950      	cbnz	r0, 80089e0 <__ssputs_r+0x5c>
 80089ca:	230c      	movs	r3, #12
 80089cc:	f04f 30ff 	mov.w	r0, #4294967295
 80089d0:	f8ca 3000 	str.w	r3, [sl]
 80089d4:	89a3      	ldrh	r3, [r4, #12]
 80089d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089da:	81a3      	strh	r3, [r4, #12]
 80089dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089e0:	464a      	mov	r2, r9
 80089e2:	6921      	ldr	r1, [r4, #16]
 80089e4:	f7ff fa54 	bl	8007e90 <memcpy>
 80089e8:	89a3      	ldrh	r3, [r4, #12]
 80089ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80089ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089f2:	81a3      	strh	r3, [r4, #12]
 80089f4:	6126      	str	r6, [r4, #16]
 80089f6:	444e      	add	r6, r9
 80089f8:	6026      	str	r6, [r4, #0]
 80089fa:	463e      	mov	r6, r7
 80089fc:	6165      	str	r5, [r4, #20]
 80089fe:	eba5 0509 	sub.w	r5, r5, r9
 8008a02:	60a5      	str	r5, [r4, #8]
 8008a04:	42be      	cmp	r6, r7
 8008a06:	d900      	bls.n	8008a0a <__ssputs_r+0x86>
 8008a08:	463e      	mov	r6, r7
 8008a0a:	4632      	mov	r2, r6
 8008a0c:	4641      	mov	r1, r8
 8008a0e:	6820      	ldr	r0, [r4, #0]
 8008a10:	f000 f97a 	bl	8008d08 <memmove>
 8008a14:	68a3      	ldr	r3, [r4, #8]
 8008a16:	6822      	ldr	r2, [r4, #0]
 8008a18:	1b9b      	subs	r3, r3, r6
 8008a1a:	4432      	add	r2, r6
 8008a1c:	2000      	movs	r0, #0
 8008a1e:	60a3      	str	r3, [r4, #8]
 8008a20:	6022      	str	r2, [r4, #0]
 8008a22:	e7db      	b.n	80089dc <__ssputs_r+0x58>
 8008a24:	462a      	mov	r2, r5
 8008a26:	f000 f995 	bl	8008d54 <_realloc_r>
 8008a2a:	4606      	mov	r6, r0
 8008a2c:	2800      	cmp	r0, #0
 8008a2e:	d1e1      	bne.n	80089f4 <__ssputs_r+0x70>
 8008a30:	4650      	mov	r0, sl
 8008a32:	6921      	ldr	r1, [r4, #16]
 8008a34:	f7ff ff00 	bl	8008838 <_free_r>
 8008a38:	e7c7      	b.n	80089ca <__ssputs_r+0x46>
	...

08008a3c <_svfiprintf_r>:
 8008a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a40:	4698      	mov	r8, r3
 8008a42:	898b      	ldrh	r3, [r1, #12]
 8008a44:	4607      	mov	r7, r0
 8008a46:	061b      	lsls	r3, r3, #24
 8008a48:	460d      	mov	r5, r1
 8008a4a:	4614      	mov	r4, r2
 8008a4c:	b09d      	sub	sp, #116	; 0x74
 8008a4e:	d50e      	bpl.n	8008a6e <_svfiprintf_r+0x32>
 8008a50:	690b      	ldr	r3, [r1, #16]
 8008a52:	b963      	cbnz	r3, 8008a6e <_svfiprintf_r+0x32>
 8008a54:	2140      	movs	r1, #64	; 0x40
 8008a56:	f7ff ff3b 	bl	80088d0 <_malloc_r>
 8008a5a:	6028      	str	r0, [r5, #0]
 8008a5c:	6128      	str	r0, [r5, #16]
 8008a5e:	b920      	cbnz	r0, 8008a6a <_svfiprintf_r+0x2e>
 8008a60:	230c      	movs	r3, #12
 8008a62:	603b      	str	r3, [r7, #0]
 8008a64:	f04f 30ff 	mov.w	r0, #4294967295
 8008a68:	e0d1      	b.n	8008c0e <_svfiprintf_r+0x1d2>
 8008a6a:	2340      	movs	r3, #64	; 0x40
 8008a6c:	616b      	str	r3, [r5, #20]
 8008a6e:	2300      	movs	r3, #0
 8008a70:	9309      	str	r3, [sp, #36]	; 0x24
 8008a72:	2320      	movs	r3, #32
 8008a74:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a78:	2330      	movs	r3, #48	; 0x30
 8008a7a:	f04f 0901 	mov.w	r9, #1
 8008a7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a82:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008c28 <_svfiprintf_r+0x1ec>
 8008a86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a8a:	4623      	mov	r3, r4
 8008a8c:	469a      	mov	sl, r3
 8008a8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a92:	b10a      	cbz	r2, 8008a98 <_svfiprintf_r+0x5c>
 8008a94:	2a25      	cmp	r2, #37	; 0x25
 8008a96:	d1f9      	bne.n	8008a8c <_svfiprintf_r+0x50>
 8008a98:	ebba 0b04 	subs.w	fp, sl, r4
 8008a9c:	d00b      	beq.n	8008ab6 <_svfiprintf_r+0x7a>
 8008a9e:	465b      	mov	r3, fp
 8008aa0:	4622      	mov	r2, r4
 8008aa2:	4629      	mov	r1, r5
 8008aa4:	4638      	mov	r0, r7
 8008aa6:	f7ff ff6d 	bl	8008984 <__ssputs_r>
 8008aaa:	3001      	adds	r0, #1
 8008aac:	f000 80aa 	beq.w	8008c04 <_svfiprintf_r+0x1c8>
 8008ab0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ab2:	445a      	add	r2, fp
 8008ab4:	9209      	str	r2, [sp, #36]	; 0x24
 8008ab6:	f89a 3000 	ldrb.w	r3, [sl]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	f000 80a2 	beq.w	8008c04 <_svfiprintf_r+0x1c8>
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	f04f 32ff 	mov.w	r2, #4294967295
 8008ac6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008aca:	f10a 0a01 	add.w	sl, sl, #1
 8008ace:	9304      	str	r3, [sp, #16]
 8008ad0:	9307      	str	r3, [sp, #28]
 8008ad2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ad6:	931a      	str	r3, [sp, #104]	; 0x68
 8008ad8:	4654      	mov	r4, sl
 8008ada:	2205      	movs	r2, #5
 8008adc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ae0:	4851      	ldr	r0, [pc, #324]	; (8008c28 <_svfiprintf_r+0x1ec>)
 8008ae2:	f7ff f9c7 	bl	8007e74 <memchr>
 8008ae6:	9a04      	ldr	r2, [sp, #16]
 8008ae8:	b9d8      	cbnz	r0, 8008b22 <_svfiprintf_r+0xe6>
 8008aea:	06d0      	lsls	r0, r2, #27
 8008aec:	bf44      	itt	mi
 8008aee:	2320      	movmi	r3, #32
 8008af0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008af4:	0711      	lsls	r1, r2, #28
 8008af6:	bf44      	itt	mi
 8008af8:	232b      	movmi	r3, #43	; 0x2b
 8008afa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008afe:	f89a 3000 	ldrb.w	r3, [sl]
 8008b02:	2b2a      	cmp	r3, #42	; 0x2a
 8008b04:	d015      	beq.n	8008b32 <_svfiprintf_r+0xf6>
 8008b06:	4654      	mov	r4, sl
 8008b08:	2000      	movs	r0, #0
 8008b0a:	f04f 0c0a 	mov.w	ip, #10
 8008b0e:	9a07      	ldr	r2, [sp, #28]
 8008b10:	4621      	mov	r1, r4
 8008b12:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b16:	3b30      	subs	r3, #48	; 0x30
 8008b18:	2b09      	cmp	r3, #9
 8008b1a:	d94e      	bls.n	8008bba <_svfiprintf_r+0x17e>
 8008b1c:	b1b0      	cbz	r0, 8008b4c <_svfiprintf_r+0x110>
 8008b1e:	9207      	str	r2, [sp, #28]
 8008b20:	e014      	b.n	8008b4c <_svfiprintf_r+0x110>
 8008b22:	eba0 0308 	sub.w	r3, r0, r8
 8008b26:	fa09 f303 	lsl.w	r3, r9, r3
 8008b2a:	4313      	orrs	r3, r2
 8008b2c:	46a2      	mov	sl, r4
 8008b2e:	9304      	str	r3, [sp, #16]
 8008b30:	e7d2      	b.n	8008ad8 <_svfiprintf_r+0x9c>
 8008b32:	9b03      	ldr	r3, [sp, #12]
 8008b34:	1d19      	adds	r1, r3, #4
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	9103      	str	r1, [sp, #12]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	bfbb      	ittet	lt
 8008b3e:	425b      	neglt	r3, r3
 8008b40:	f042 0202 	orrlt.w	r2, r2, #2
 8008b44:	9307      	strge	r3, [sp, #28]
 8008b46:	9307      	strlt	r3, [sp, #28]
 8008b48:	bfb8      	it	lt
 8008b4a:	9204      	strlt	r2, [sp, #16]
 8008b4c:	7823      	ldrb	r3, [r4, #0]
 8008b4e:	2b2e      	cmp	r3, #46	; 0x2e
 8008b50:	d10c      	bne.n	8008b6c <_svfiprintf_r+0x130>
 8008b52:	7863      	ldrb	r3, [r4, #1]
 8008b54:	2b2a      	cmp	r3, #42	; 0x2a
 8008b56:	d135      	bne.n	8008bc4 <_svfiprintf_r+0x188>
 8008b58:	9b03      	ldr	r3, [sp, #12]
 8008b5a:	3402      	adds	r4, #2
 8008b5c:	1d1a      	adds	r2, r3, #4
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	9203      	str	r2, [sp, #12]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	bfb8      	it	lt
 8008b66:	f04f 33ff 	movlt.w	r3, #4294967295
 8008b6a:	9305      	str	r3, [sp, #20]
 8008b6c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008c38 <_svfiprintf_r+0x1fc>
 8008b70:	2203      	movs	r2, #3
 8008b72:	4650      	mov	r0, sl
 8008b74:	7821      	ldrb	r1, [r4, #0]
 8008b76:	f7ff f97d 	bl	8007e74 <memchr>
 8008b7a:	b140      	cbz	r0, 8008b8e <_svfiprintf_r+0x152>
 8008b7c:	2340      	movs	r3, #64	; 0x40
 8008b7e:	eba0 000a 	sub.w	r0, r0, sl
 8008b82:	fa03 f000 	lsl.w	r0, r3, r0
 8008b86:	9b04      	ldr	r3, [sp, #16]
 8008b88:	3401      	adds	r4, #1
 8008b8a:	4303      	orrs	r3, r0
 8008b8c:	9304      	str	r3, [sp, #16]
 8008b8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b92:	2206      	movs	r2, #6
 8008b94:	4825      	ldr	r0, [pc, #148]	; (8008c2c <_svfiprintf_r+0x1f0>)
 8008b96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b9a:	f7ff f96b 	bl	8007e74 <memchr>
 8008b9e:	2800      	cmp	r0, #0
 8008ba0:	d038      	beq.n	8008c14 <_svfiprintf_r+0x1d8>
 8008ba2:	4b23      	ldr	r3, [pc, #140]	; (8008c30 <_svfiprintf_r+0x1f4>)
 8008ba4:	bb1b      	cbnz	r3, 8008bee <_svfiprintf_r+0x1b2>
 8008ba6:	9b03      	ldr	r3, [sp, #12]
 8008ba8:	3307      	adds	r3, #7
 8008baa:	f023 0307 	bic.w	r3, r3, #7
 8008bae:	3308      	adds	r3, #8
 8008bb0:	9303      	str	r3, [sp, #12]
 8008bb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bb4:	4433      	add	r3, r6
 8008bb6:	9309      	str	r3, [sp, #36]	; 0x24
 8008bb8:	e767      	b.n	8008a8a <_svfiprintf_r+0x4e>
 8008bba:	460c      	mov	r4, r1
 8008bbc:	2001      	movs	r0, #1
 8008bbe:	fb0c 3202 	mla	r2, ip, r2, r3
 8008bc2:	e7a5      	b.n	8008b10 <_svfiprintf_r+0xd4>
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	f04f 0c0a 	mov.w	ip, #10
 8008bca:	4619      	mov	r1, r3
 8008bcc:	3401      	adds	r4, #1
 8008bce:	9305      	str	r3, [sp, #20]
 8008bd0:	4620      	mov	r0, r4
 8008bd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008bd6:	3a30      	subs	r2, #48	; 0x30
 8008bd8:	2a09      	cmp	r2, #9
 8008bda:	d903      	bls.n	8008be4 <_svfiprintf_r+0x1a8>
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d0c5      	beq.n	8008b6c <_svfiprintf_r+0x130>
 8008be0:	9105      	str	r1, [sp, #20]
 8008be2:	e7c3      	b.n	8008b6c <_svfiprintf_r+0x130>
 8008be4:	4604      	mov	r4, r0
 8008be6:	2301      	movs	r3, #1
 8008be8:	fb0c 2101 	mla	r1, ip, r1, r2
 8008bec:	e7f0      	b.n	8008bd0 <_svfiprintf_r+0x194>
 8008bee:	ab03      	add	r3, sp, #12
 8008bf0:	9300      	str	r3, [sp, #0]
 8008bf2:	462a      	mov	r2, r5
 8008bf4:	4638      	mov	r0, r7
 8008bf6:	4b0f      	ldr	r3, [pc, #60]	; (8008c34 <_svfiprintf_r+0x1f8>)
 8008bf8:	a904      	add	r1, sp, #16
 8008bfa:	f7fc fa9f 	bl	800513c <_printf_float>
 8008bfe:	1c42      	adds	r2, r0, #1
 8008c00:	4606      	mov	r6, r0
 8008c02:	d1d6      	bne.n	8008bb2 <_svfiprintf_r+0x176>
 8008c04:	89ab      	ldrh	r3, [r5, #12]
 8008c06:	065b      	lsls	r3, r3, #25
 8008c08:	f53f af2c 	bmi.w	8008a64 <_svfiprintf_r+0x28>
 8008c0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c0e:	b01d      	add	sp, #116	; 0x74
 8008c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c14:	ab03      	add	r3, sp, #12
 8008c16:	9300      	str	r3, [sp, #0]
 8008c18:	462a      	mov	r2, r5
 8008c1a:	4638      	mov	r0, r7
 8008c1c:	4b05      	ldr	r3, [pc, #20]	; (8008c34 <_svfiprintf_r+0x1f8>)
 8008c1e:	a904      	add	r1, sp, #16
 8008c20:	f7fc fd28 	bl	8005674 <_printf_i>
 8008c24:	e7eb      	b.n	8008bfe <_svfiprintf_r+0x1c2>
 8008c26:	bf00      	nop
 8008c28:	08009c64 	.word	0x08009c64
 8008c2c:	08009c6e 	.word	0x08009c6e
 8008c30:	0800513d 	.word	0x0800513d
 8008c34:	08008985 	.word	0x08008985
 8008c38:	08009c6a 	.word	0x08009c6a

08008c3c <nan>:
 8008c3c:	2000      	movs	r0, #0
 8008c3e:	4901      	ldr	r1, [pc, #4]	; (8008c44 <nan+0x8>)
 8008c40:	4770      	bx	lr
 8008c42:	bf00      	nop
 8008c44:	7ff80000 	.word	0x7ff80000

08008c48 <_sbrk_r>:
 8008c48:	b538      	push	{r3, r4, r5, lr}
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	4d05      	ldr	r5, [pc, #20]	; (8008c64 <_sbrk_r+0x1c>)
 8008c4e:	4604      	mov	r4, r0
 8008c50:	4608      	mov	r0, r1
 8008c52:	602b      	str	r3, [r5, #0]
 8008c54:	f7f9 f954 	bl	8001f00 <_sbrk>
 8008c58:	1c43      	adds	r3, r0, #1
 8008c5a:	d102      	bne.n	8008c62 <_sbrk_r+0x1a>
 8008c5c:	682b      	ldr	r3, [r5, #0]
 8008c5e:	b103      	cbz	r3, 8008c62 <_sbrk_r+0x1a>
 8008c60:	6023      	str	r3, [r4, #0]
 8008c62:	bd38      	pop	{r3, r4, r5, pc}
 8008c64:	2000038c 	.word	0x2000038c

08008c68 <strncmp>:
 8008c68:	b510      	push	{r4, lr}
 8008c6a:	b16a      	cbz	r2, 8008c88 <strncmp+0x20>
 8008c6c:	3901      	subs	r1, #1
 8008c6e:	1884      	adds	r4, r0, r2
 8008c70:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008c74:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d103      	bne.n	8008c84 <strncmp+0x1c>
 8008c7c:	42a0      	cmp	r0, r4
 8008c7e:	d001      	beq.n	8008c84 <strncmp+0x1c>
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d1f5      	bne.n	8008c70 <strncmp+0x8>
 8008c84:	1a98      	subs	r0, r3, r2
 8008c86:	bd10      	pop	{r4, pc}
 8008c88:	4610      	mov	r0, r2
 8008c8a:	e7fc      	b.n	8008c86 <strncmp+0x1e>

08008c8c <__ascii_wctomb>:
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	4608      	mov	r0, r1
 8008c90:	b141      	cbz	r1, 8008ca4 <__ascii_wctomb+0x18>
 8008c92:	2aff      	cmp	r2, #255	; 0xff
 8008c94:	d904      	bls.n	8008ca0 <__ascii_wctomb+0x14>
 8008c96:	228a      	movs	r2, #138	; 0x8a
 8008c98:	f04f 30ff 	mov.w	r0, #4294967295
 8008c9c:	601a      	str	r2, [r3, #0]
 8008c9e:	4770      	bx	lr
 8008ca0:	2001      	movs	r0, #1
 8008ca2:	700a      	strb	r2, [r1, #0]
 8008ca4:	4770      	bx	lr
	...

08008ca8 <__assert_func>:
 8008ca8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008caa:	4614      	mov	r4, r2
 8008cac:	461a      	mov	r2, r3
 8008cae:	4b09      	ldr	r3, [pc, #36]	; (8008cd4 <__assert_func+0x2c>)
 8008cb0:	4605      	mov	r5, r0
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	68d8      	ldr	r0, [r3, #12]
 8008cb6:	b14c      	cbz	r4, 8008ccc <__assert_func+0x24>
 8008cb8:	4b07      	ldr	r3, [pc, #28]	; (8008cd8 <__assert_func+0x30>)
 8008cba:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008cbe:	9100      	str	r1, [sp, #0]
 8008cc0:	462b      	mov	r3, r5
 8008cc2:	4906      	ldr	r1, [pc, #24]	; (8008cdc <__assert_func+0x34>)
 8008cc4:	f000 f80e 	bl	8008ce4 <fiprintf>
 8008cc8:	f000 fa82 	bl	80091d0 <abort>
 8008ccc:	4b04      	ldr	r3, [pc, #16]	; (8008ce0 <__assert_func+0x38>)
 8008cce:	461c      	mov	r4, r3
 8008cd0:	e7f3      	b.n	8008cba <__assert_func+0x12>
 8008cd2:	bf00      	nop
 8008cd4:	2000000c 	.word	0x2000000c
 8008cd8:	08009c75 	.word	0x08009c75
 8008cdc:	08009c82 	.word	0x08009c82
 8008ce0:	08009cb0 	.word	0x08009cb0

08008ce4 <fiprintf>:
 8008ce4:	b40e      	push	{r1, r2, r3}
 8008ce6:	b503      	push	{r0, r1, lr}
 8008ce8:	4601      	mov	r1, r0
 8008cea:	ab03      	add	r3, sp, #12
 8008cec:	4805      	ldr	r0, [pc, #20]	; (8008d04 <fiprintf+0x20>)
 8008cee:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cf2:	6800      	ldr	r0, [r0, #0]
 8008cf4:	9301      	str	r3, [sp, #4]
 8008cf6:	f000 f87b 	bl	8008df0 <_vfiprintf_r>
 8008cfa:	b002      	add	sp, #8
 8008cfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d00:	b003      	add	sp, #12
 8008d02:	4770      	bx	lr
 8008d04:	2000000c 	.word	0x2000000c

08008d08 <memmove>:
 8008d08:	4288      	cmp	r0, r1
 8008d0a:	b510      	push	{r4, lr}
 8008d0c:	eb01 0402 	add.w	r4, r1, r2
 8008d10:	d902      	bls.n	8008d18 <memmove+0x10>
 8008d12:	4284      	cmp	r4, r0
 8008d14:	4623      	mov	r3, r4
 8008d16:	d807      	bhi.n	8008d28 <memmove+0x20>
 8008d18:	1e43      	subs	r3, r0, #1
 8008d1a:	42a1      	cmp	r1, r4
 8008d1c:	d008      	beq.n	8008d30 <memmove+0x28>
 8008d1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008d26:	e7f8      	b.n	8008d1a <memmove+0x12>
 8008d28:	4601      	mov	r1, r0
 8008d2a:	4402      	add	r2, r0
 8008d2c:	428a      	cmp	r2, r1
 8008d2e:	d100      	bne.n	8008d32 <memmove+0x2a>
 8008d30:	bd10      	pop	{r4, pc}
 8008d32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008d36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008d3a:	e7f7      	b.n	8008d2c <memmove+0x24>

08008d3c <__malloc_lock>:
 8008d3c:	4801      	ldr	r0, [pc, #4]	; (8008d44 <__malloc_lock+0x8>)
 8008d3e:	f000 bc07 	b.w	8009550 <__retarget_lock_acquire_recursive>
 8008d42:	bf00      	nop
 8008d44:	20000394 	.word	0x20000394

08008d48 <__malloc_unlock>:
 8008d48:	4801      	ldr	r0, [pc, #4]	; (8008d50 <__malloc_unlock+0x8>)
 8008d4a:	f000 bc02 	b.w	8009552 <__retarget_lock_release_recursive>
 8008d4e:	bf00      	nop
 8008d50:	20000394 	.word	0x20000394

08008d54 <_realloc_r>:
 8008d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d56:	4607      	mov	r7, r0
 8008d58:	4614      	mov	r4, r2
 8008d5a:	460e      	mov	r6, r1
 8008d5c:	b921      	cbnz	r1, 8008d68 <_realloc_r+0x14>
 8008d5e:	4611      	mov	r1, r2
 8008d60:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008d64:	f7ff bdb4 	b.w	80088d0 <_malloc_r>
 8008d68:	b922      	cbnz	r2, 8008d74 <_realloc_r+0x20>
 8008d6a:	f7ff fd65 	bl	8008838 <_free_r>
 8008d6e:	4625      	mov	r5, r4
 8008d70:	4628      	mov	r0, r5
 8008d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d74:	f000 fc52 	bl	800961c <_malloc_usable_size_r>
 8008d78:	42a0      	cmp	r0, r4
 8008d7a:	d20f      	bcs.n	8008d9c <_realloc_r+0x48>
 8008d7c:	4621      	mov	r1, r4
 8008d7e:	4638      	mov	r0, r7
 8008d80:	f7ff fda6 	bl	80088d0 <_malloc_r>
 8008d84:	4605      	mov	r5, r0
 8008d86:	2800      	cmp	r0, #0
 8008d88:	d0f2      	beq.n	8008d70 <_realloc_r+0x1c>
 8008d8a:	4631      	mov	r1, r6
 8008d8c:	4622      	mov	r2, r4
 8008d8e:	f7ff f87f 	bl	8007e90 <memcpy>
 8008d92:	4631      	mov	r1, r6
 8008d94:	4638      	mov	r0, r7
 8008d96:	f7ff fd4f 	bl	8008838 <_free_r>
 8008d9a:	e7e9      	b.n	8008d70 <_realloc_r+0x1c>
 8008d9c:	4635      	mov	r5, r6
 8008d9e:	e7e7      	b.n	8008d70 <_realloc_r+0x1c>

08008da0 <__sfputc_r>:
 8008da0:	6893      	ldr	r3, [r2, #8]
 8008da2:	b410      	push	{r4}
 8008da4:	3b01      	subs	r3, #1
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	6093      	str	r3, [r2, #8]
 8008daa:	da07      	bge.n	8008dbc <__sfputc_r+0x1c>
 8008dac:	6994      	ldr	r4, [r2, #24]
 8008dae:	42a3      	cmp	r3, r4
 8008db0:	db01      	blt.n	8008db6 <__sfputc_r+0x16>
 8008db2:	290a      	cmp	r1, #10
 8008db4:	d102      	bne.n	8008dbc <__sfputc_r+0x1c>
 8008db6:	bc10      	pop	{r4}
 8008db8:	f000 b94a 	b.w	8009050 <__swbuf_r>
 8008dbc:	6813      	ldr	r3, [r2, #0]
 8008dbe:	1c58      	adds	r0, r3, #1
 8008dc0:	6010      	str	r0, [r2, #0]
 8008dc2:	7019      	strb	r1, [r3, #0]
 8008dc4:	4608      	mov	r0, r1
 8008dc6:	bc10      	pop	{r4}
 8008dc8:	4770      	bx	lr

08008dca <__sfputs_r>:
 8008dca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dcc:	4606      	mov	r6, r0
 8008dce:	460f      	mov	r7, r1
 8008dd0:	4614      	mov	r4, r2
 8008dd2:	18d5      	adds	r5, r2, r3
 8008dd4:	42ac      	cmp	r4, r5
 8008dd6:	d101      	bne.n	8008ddc <__sfputs_r+0x12>
 8008dd8:	2000      	movs	r0, #0
 8008dda:	e007      	b.n	8008dec <__sfputs_r+0x22>
 8008ddc:	463a      	mov	r2, r7
 8008dde:	4630      	mov	r0, r6
 8008de0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008de4:	f7ff ffdc 	bl	8008da0 <__sfputc_r>
 8008de8:	1c43      	adds	r3, r0, #1
 8008dea:	d1f3      	bne.n	8008dd4 <__sfputs_r+0xa>
 8008dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008df0 <_vfiprintf_r>:
 8008df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008df4:	460d      	mov	r5, r1
 8008df6:	4614      	mov	r4, r2
 8008df8:	4698      	mov	r8, r3
 8008dfa:	4606      	mov	r6, r0
 8008dfc:	b09d      	sub	sp, #116	; 0x74
 8008dfe:	b118      	cbz	r0, 8008e08 <_vfiprintf_r+0x18>
 8008e00:	6983      	ldr	r3, [r0, #24]
 8008e02:	b90b      	cbnz	r3, 8008e08 <_vfiprintf_r+0x18>
 8008e04:	f000 fb06 	bl	8009414 <__sinit>
 8008e08:	4b89      	ldr	r3, [pc, #548]	; (8009030 <_vfiprintf_r+0x240>)
 8008e0a:	429d      	cmp	r5, r3
 8008e0c:	d11b      	bne.n	8008e46 <_vfiprintf_r+0x56>
 8008e0e:	6875      	ldr	r5, [r6, #4]
 8008e10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e12:	07d9      	lsls	r1, r3, #31
 8008e14:	d405      	bmi.n	8008e22 <_vfiprintf_r+0x32>
 8008e16:	89ab      	ldrh	r3, [r5, #12]
 8008e18:	059a      	lsls	r2, r3, #22
 8008e1a:	d402      	bmi.n	8008e22 <_vfiprintf_r+0x32>
 8008e1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e1e:	f000 fb97 	bl	8009550 <__retarget_lock_acquire_recursive>
 8008e22:	89ab      	ldrh	r3, [r5, #12]
 8008e24:	071b      	lsls	r3, r3, #28
 8008e26:	d501      	bpl.n	8008e2c <_vfiprintf_r+0x3c>
 8008e28:	692b      	ldr	r3, [r5, #16]
 8008e2a:	b9eb      	cbnz	r3, 8008e68 <_vfiprintf_r+0x78>
 8008e2c:	4629      	mov	r1, r5
 8008e2e:	4630      	mov	r0, r6
 8008e30:	f000 f960 	bl	80090f4 <__swsetup_r>
 8008e34:	b1c0      	cbz	r0, 8008e68 <_vfiprintf_r+0x78>
 8008e36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e38:	07dc      	lsls	r4, r3, #31
 8008e3a:	d50e      	bpl.n	8008e5a <_vfiprintf_r+0x6a>
 8008e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e40:	b01d      	add	sp, #116	; 0x74
 8008e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e46:	4b7b      	ldr	r3, [pc, #492]	; (8009034 <_vfiprintf_r+0x244>)
 8008e48:	429d      	cmp	r5, r3
 8008e4a:	d101      	bne.n	8008e50 <_vfiprintf_r+0x60>
 8008e4c:	68b5      	ldr	r5, [r6, #8]
 8008e4e:	e7df      	b.n	8008e10 <_vfiprintf_r+0x20>
 8008e50:	4b79      	ldr	r3, [pc, #484]	; (8009038 <_vfiprintf_r+0x248>)
 8008e52:	429d      	cmp	r5, r3
 8008e54:	bf08      	it	eq
 8008e56:	68f5      	ldreq	r5, [r6, #12]
 8008e58:	e7da      	b.n	8008e10 <_vfiprintf_r+0x20>
 8008e5a:	89ab      	ldrh	r3, [r5, #12]
 8008e5c:	0598      	lsls	r0, r3, #22
 8008e5e:	d4ed      	bmi.n	8008e3c <_vfiprintf_r+0x4c>
 8008e60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e62:	f000 fb76 	bl	8009552 <__retarget_lock_release_recursive>
 8008e66:	e7e9      	b.n	8008e3c <_vfiprintf_r+0x4c>
 8008e68:	2300      	movs	r3, #0
 8008e6a:	9309      	str	r3, [sp, #36]	; 0x24
 8008e6c:	2320      	movs	r3, #32
 8008e6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e72:	2330      	movs	r3, #48	; 0x30
 8008e74:	f04f 0901 	mov.w	r9, #1
 8008e78:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e7c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800903c <_vfiprintf_r+0x24c>
 8008e80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e84:	4623      	mov	r3, r4
 8008e86:	469a      	mov	sl, r3
 8008e88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e8c:	b10a      	cbz	r2, 8008e92 <_vfiprintf_r+0xa2>
 8008e8e:	2a25      	cmp	r2, #37	; 0x25
 8008e90:	d1f9      	bne.n	8008e86 <_vfiprintf_r+0x96>
 8008e92:	ebba 0b04 	subs.w	fp, sl, r4
 8008e96:	d00b      	beq.n	8008eb0 <_vfiprintf_r+0xc0>
 8008e98:	465b      	mov	r3, fp
 8008e9a:	4622      	mov	r2, r4
 8008e9c:	4629      	mov	r1, r5
 8008e9e:	4630      	mov	r0, r6
 8008ea0:	f7ff ff93 	bl	8008dca <__sfputs_r>
 8008ea4:	3001      	adds	r0, #1
 8008ea6:	f000 80aa 	beq.w	8008ffe <_vfiprintf_r+0x20e>
 8008eaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008eac:	445a      	add	r2, fp
 8008eae:	9209      	str	r2, [sp, #36]	; 0x24
 8008eb0:	f89a 3000 	ldrb.w	r3, [sl]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	f000 80a2 	beq.w	8008ffe <_vfiprintf_r+0x20e>
 8008eba:	2300      	movs	r3, #0
 8008ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8008ec0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ec4:	f10a 0a01 	add.w	sl, sl, #1
 8008ec8:	9304      	str	r3, [sp, #16]
 8008eca:	9307      	str	r3, [sp, #28]
 8008ecc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ed0:	931a      	str	r3, [sp, #104]	; 0x68
 8008ed2:	4654      	mov	r4, sl
 8008ed4:	2205      	movs	r2, #5
 8008ed6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008eda:	4858      	ldr	r0, [pc, #352]	; (800903c <_vfiprintf_r+0x24c>)
 8008edc:	f7fe ffca 	bl	8007e74 <memchr>
 8008ee0:	9a04      	ldr	r2, [sp, #16]
 8008ee2:	b9d8      	cbnz	r0, 8008f1c <_vfiprintf_r+0x12c>
 8008ee4:	06d1      	lsls	r1, r2, #27
 8008ee6:	bf44      	itt	mi
 8008ee8:	2320      	movmi	r3, #32
 8008eea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008eee:	0713      	lsls	r3, r2, #28
 8008ef0:	bf44      	itt	mi
 8008ef2:	232b      	movmi	r3, #43	; 0x2b
 8008ef4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ef8:	f89a 3000 	ldrb.w	r3, [sl]
 8008efc:	2b2a      	cmp	r3, #42	; 0x2a
 8008efe:	d015      	beq.n	8008f2c <_vfiprintf_r+0x13c>
 8008f00:	4654      	mov	r4, sl
 8008f02:	2000      	movs	r0, #0
 8008f04:	f04f 0c0a 	mov.w	ip, #10
 8008f08:	9a07      	ldr	r2, [sp, #28]
 8008f0a:	4621      	mov	r1, r4
 8008f0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f10:	3b30      	subs	r3, #48	; 0x30
 8008f12:	2b09      	cmp	r3, #9
 8008f14:	d94e      	bls.n	8008fb4 <_vfiprintf_r+0x1c4>
 8008f16:	b1b0      	cbz	r0, 8008f46 <_vfiprintf_r+0x156>
 8008f18:	9207      	str	r2, [sp, #28]
 8008f1a:	e014      	b.n	8008f46 <_vfiprintf_r+0x156>
 8008f1c:	eba0 0308 	sub.w	r3, r0, r8
 8008f20:	fa09 f303 	lsl.w	r3, r9, r3
 8008f24:	4313      	orrs	r3, r2
 8008f26:	46a2      	mov	sl, r4
 8008f28:	9304      	str	r3, [sp, #16]
 8008f2a:	e7d2      	b.n	8008ed2 <_vfiprintf_r+0xe2>
 8008f2c:	9b03      	ldr	r3, [sp, #12]
 8008f2e:	1d19      	adds	r1, r3, #4
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	9103      	str	r1, [sp, #12]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	bfbb      	ittet	lt
 8008f38:	425b      	neglt	r3, r3
 8008f3a:	f042 0202 	orrlt.w	r2, r2, #2
 8008f3e:	9307      	strge	r3, [sp, #28]
 8008f40:	9307      	strlt	r3, [sp, #28]
 8008f42:	bfb8      	it	lt
 8008f44:	9204      	strlt	r2, [sp, #16]
 8008f46:	7823      	ldrb	r3, [r4, #0]
 8008f48:	2b2e      	cmp	r3, #46	; 0x2e
 8008f4a:	d10c      	bne.n	8008f66 <_vfiprintf_r+0x176>
 8008f4c:	7863      	ldrb	r3, [r4, #1]
 8008f4e:	2b2a      	cmp	r3, #42	; 0x2a
 8008f50:	d135      	bne.n	8008fbe <_vfiprintf_r+0x1ce>
 8008f52:	9b03      	ldr	r3, [sp, #12]
 8008f54:	3402      	adds	r4, #2
 8008f56:	1d1a      	adds	r2, r3, #4
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	9203      	str	r2, [sp, #12]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	bfb8      	it	lt
 8008f60:	f04f 33ff 	movlt.w	r3, #4294967295
 8008f64:	9305      	str	r3, [sp, #20]
 8008f66:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800904c <_vfiprintf_r+0x25c>
 8008f6a:	2203      	movs	r2, #3
 8008f6c:	4650      	mov	r0, sl
 8008f6e:	7821      	ldrb	r1, [r4, #0]
 8008f70:	f7fe ff80 	bl	8007e74 <memchr>
 8008f74:	b140      	cbz	r0, 8008f88 <_vfiprintf_r+0x198>
 8008f76:	2340      	movs	r3, #64	; 0x40
 8008f78:	eba0 000a 	sub.w	r0, r0, sl
 8008f7c:	fa03 f000 	lsl.w	r0, r3, r0
 8008f80:	9b04      	ldr	r3, [sp, #16]
 8008f82:	3401      	adds	r4, #1
 8008f84:	4303      	orrs	r3, r0
 8008f86:	9304      	str	r3, [sp, #16]
 8008f88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f8c:	2206      	movs	r2, #6
 8008f8e:	482c      	ldr	r0, [pc, #176]	; (8009040 <_vfiprintf_r+0x250>)
 8008f90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f94:	f7fe ff6e 	bl	8007e74 <memchr>
 8008f98:	2800      	cmp	r0, #0
 8008f9a:	d03f      	beq.n	800901c <_vfiprintf_r+0x22c>
 8008f9c:	4b29      	ldr	r3, [pc, #164]	; (8009044 <_vfiprintf_r+0x254>)
 8008f9e:	bb1b      	cbnz	r3, 8008fe8 <_vfiprintf_r+0x1f8>
 8008fa0:	9b03      	ldr	r3, [sp, #12]
 8008fa2:	3307      	adds	r3, #7
 8008fa4:	f023 0307 	bic.w	r3, r3, #7
 8008fa8:	3308      	adds	r3, #8
 8008faa:	9303      	str	r3, [sp, #12]
 8008fac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fae:	443b      	add	r3, r7
 8008fb0:	9309      	str	r3, [sp, #36]	; 0x24
 8008fb2:	e767      	b.n	8008e84 <_vfiprintf_r+0x94>
 8008fb4:	460c      	mov	r4, r1
 8008fb6:	2001      	movs	r0, #1
 8008fb8:	fb0c 3202 	mla	r2, ip, r2, r3
 8008fbc:	e7a5      	b.n	8008f0a <_vfiprintf_r+0x11a>
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	f04f 0c0a 	mov.w	ip, #10
 8008fc4:	4619      	mov	r1, r3
 8008fc6:	3401      	adds	r4, #1
 8008fc8:	9305      	str	r3, [sp, #20]
 8008fca:	4620      	mov	r0, r4
 8008fcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008fd0:	3a30      	subs	r2, #48	; 0x30
 8008fd2:	2a09      	cmp	r2, #9
 8008fd4:	d903      	bls.n	8008fde <_vfiprintf_r+0x1ee>
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d0c5      	beq.n	8008f66 <_vfiprintf_r+0x176>
 8008fda:	9105      	str	r1, [sp, #20]
 8008fdc:	e7c3      	b.n	8008f66 <_vfiprintf_r+0x176>
 8008fde:	4604      	mov	r4, r0
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	fb0c 2101 	mla	r1, ip, r1, r2
 8008fe6:	e7f0      	b.n	8008fca <_vfiprintf_r+0x1da>
 8008fe8:	ab03      	add	r3, sp, #12
 8008fea:	9300      	str	r3, [sp, #0]
 8008fec:	462a      	mov	r2, r5
 8008fee:	4630      	mov	r0, r6
 8008ff0:	4b15      	ldr	r3, [pc, #84]	; (8009048 <_vfiprintf_r+0x258>)
 8008ff2:	a904      	add	r1, sp, #16
 8008ff4:	f7fc f8a2 	bl	800513c <_printf_float>
 8008ff8:	4607      	mov	r7, r0
 8008ffa:	1c78      	adds	r0, r7, #1
 8008ffc:	d1d6      	bne.n	8008fac <_vfiprintf_r+0x1bc>
 8008ffe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009000:	07d9      	lsls	r1, r3, #31
 8009002:	d405      	bmi.n	8009010 <_vfiprintf_r+0x220>
 8009004:	89ab      	ldrh	r3, [r5, #12]
 8009006:	059a      	lsls	r2, r3, #22
 8009008:	d402      	bmi.n	8009010 <_vfiprintf_r+0x220>
 800900a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800900c:	f000 faa1 	bl	8009552 <__retarget_lock_release_recursive>
 8009010:	89ab      	ldrh	r3, [r5, #12]
 8009012:	065b      	lsls	r3, r3, #25
 8009014:	f53f af12 	bmi.w	8008e3c <_vfiprintf_r+0x4c>
 8009018:	9809      	ldr	r0, [sp, #36]	; 0x24
 800901a:	e711      	b.n	8008e40 <_vfiprintf_r+0x50>
 800901c:	ab03      	add	r3, sp, #12
 800901e:	9300      	str	r3, [sp, #0]
 8009020:	462a      	mov	r2, r5
 8009022:	4630      	mov	r0, r6
 8009024:	4b08      	ldr	r3, [pc, #32]	; (8009048 <_vfiprintf_r+0x258>)
 8009026:	a904      	add	r1, sp, #16
 8009028:	f7fc fb24 	bl	8005674 <_printf_i>
 800902c:	e7e4      	b.n	8008ff8 <_vfiprintf_r+0x208>
 800902e:	bf00      	nop
 8009030:	08009cd4 	.word	0x08009cd4
 8009034:	08009cf4 	.word	0x08009cf4
 8009038:	08009cb4 	.word	0x08009cb4
 800903c:	08009c64 	.word	0x08009c64
 8009040:	08009c6e 	.word	0x08009c6e
 8009044:	0800513d 	.word	0x0800513d
 8009048:	08008dcb 	.word	0x08008dcb
 800904c:	08009c6a 	.word	0x08009c6a

08009050 <__swbuf_r>:
 8009050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009052:	460e      	mov	r6, r1
 8009054:	4614      	mov	r4, r2
 8009056:	4605      	mov	r5, r0
 8009058:	b118      	cbz	r0, 8009062 <__swbuf_r+0x12>
 800905a:	6983      	ldr	r3, [r0, #24]
 800905c:	b90b      	cbnz	r3, 8009062 <__swbuf_r+0x12>
 800905e:	f000 f9d9 	bl	8009414 <__sinit>
 8009062:	4b21      	ldr	r3, [pc, #132]	; (80090e8 <__swbuf_r+0x98>)
 8009064:	429c      	cmp	r4, r3
 8009066:	d12b      	bne.n	80090c0 <__swbuf_r+0x70>
 8009068:	686c      	ldr	r4, [r5, #4]
 800906a:	69a3      	ldr	r3, [r4, #24]
 800906c:	60a3      	str	r3, [r4, #8]
 800906e:	89a3      	ldrh	r3, [r4, #12]
 8009070:	071a      	lsls	r2, r3, #28
 8009072:	d52f      	bpl.n	80090d4 <__swbuf_r+0x84>
 8009074:	6923      	ldr	r3, [r4, #16]
 8009076:	b36b      	cbz	r3, 80090d4 <__swbuf_r+0x84>
 8009078:	6923      	ldr	r3, [r4, #16]
 800907a:	6820      	ldr	r0, [r4, #0]
 800907c:	b2f6      	uxtb	r6, r6
 800907e:	1ac0      	subs	r0, r0, r3
 8009080:	6963      	ldr	r3, [r4, #20]
 8009082:	4637      	mov	r7, r6
 8009084:	4283      	cmp	r3, r0
 8009086:	dc04      	bgt.n	8009092 <__swbuf_r+0x42>
 8009088:	4621      	mov	r1, r4
 800908a:	4628      	mov	r0, r5
 800908c:	f000 f92e 	bl	80092ec <_fflush_r>
 8009090:	bb30      	cbnz	r0, 80090e0 <__swbuf_r+0x90>
 8009092:	68a3      	ldr	r3, [r4, #8]
 8009094:	3001      	adds	r0, #1
 8009096:	3b01      	subs	r3, #1
 8009098:	60a3      	str	r3, [r4, #8]
 800909a:	6823      	ldr	r3, [r4, #0]
 800909c:	1c5a      	adds	r2, r3, #1
 800909e:	6022      	str	r2, [r4, #0]
 80090a0:	701e      	strb	r6, [r3, #0]
 80090a2:	6963      	ldr	r3, [r4, #20]
 80090a4:	4283      	cmp	r3, r0
 80090a6:	d004      	beq.n	80090b2 <__swbuf_r+0x62>
 80090a8:	89a3      	ldrh	r3, [r4, #12]
 80090aa:	07db      	lsls	r3, r3, #31
 80090ac:	d506      	bpl.n	80090bc <__swbuf_r+0x6c>
 80090ae:	2e0a      	cmp	r6, #10
 80090b0:	d104      	bne.n	80090bc <__swbuf_r+0x6c>
 80090b2:	4621      	mov	r1, r4
 80090b4:	4628      	mov	r0, r5
 80090b6:	f000 f919 	bl	80092ec <_fflush_r>
 80090ba:	b988      	cbnz	r0, 80090e0 <__swbuf_r+0x90>
 80090bc:	4638      	mov	r0, r7
 80090be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090c0:	4b0a      	ldr	r3, [pc, #40]	; (80090ec <__swbuf_r+0x9c>)
 80090c2:	429c      	cmp	r4, r3
 80090c4:	d101      	bne.n	80090ca <__swbuf_r+0x7a>
 80090c6:	68ac      	ldr	r4, [r5, #8]
 80090c8:	e7cf      	b.n	800906a <__swbuf_r+0x1a>
 80090ca:	4b09      	ldr	r3, [pc, #36]	; (80090f0 <__swbuf_r+0xa0>)
 80090cc:	429c      	cmp	r4, r3
 80090ce:	bf08      	it	eq
 80090d0:	68ec      	ldreq	r4, [r5, #12]
 80090d2:	e7ca      	b.n	800906a <__swbuf_r+0x1a>
 80090d4:	4621      	mov	r1, r4
 80090d6:	4628      	mov	r0, r5
 80090d8:	f000 f80c 	bl	80090f4 <__swsetup_r>
 80090dc:	2800      	cmp	r0, #0
 80090de:	d0cb      	beq.n	8009078 <__swbuf_r+0x28>
 80090e0:	f04f 37ff 	mov.w	r7, #4294967295
 80090e4:	e7ea      	b.n	80090bc <__swbuf_r+0x6c>
 80090e6:	bf00      	nop
 80090e8:	08009cd4 	.word	0x08009cd4
 80090ec:	08009cf4 	.word	0x08009cf4
 80090f0:	08009cb4 	.word	0x08009cb4

080090f4 <__swsetup_r>:
 80090f4:	4b32      	ldr	r3, [pc, #200]	; (80091c0 <__swsetup_r+0xcc>)
 80090f6:	b570      	push	{r4, r5, r6, lr}
 80090f8:	681d      	ldr	r5, [r3, #0]
 80090fa:	4606      	mov	r6, r0
 80090fc:	460c      	mov	r4, r1
 80090fe:	b125      	cbz	r5, 800910a <__swsetup_r+0x16>
 8009100:	69ab      	ldr	r3, [r5, #24]
 8009102:	b913      	cbnz	r3, 800910a <__swsetup_r+0x16>
 8009104:	4628      	mov	r0, r5
 8009106:	f000 f985 	bl	8009414 <__sinit>
 800910a:	4b2e      	ldr	r3, [pc, #184]	; (80091c4 <__swsetup_r+0xd0>)
 800910c:	429c      	cmp	r4, r3
 800910e:	d10f      	bne.n	8009130 <__swsetup_r+0x3c>
 8009110:	686c      	ldr	r4, [r5, #4]
 8009112:	89a3      	ldrh	r3, [r4, #12]
 8009114:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009118:	0719      	lsls	r1, r3, #28
 800911a:	d42c      	bmi.n	8009176 <__swsetup_r+0x82>
 800911c:	06dd      	lsls	r5, r3, #27
 800911e:	d411      	bmi.n	8009144 <__swsetup_r+0x50>
 8009120:	2309      	movs	r3, #9
 8009122:	6033      	str	r3, [r6, #0]
 8009124:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009128:	f04f 30ff 	mov.w	r0, #4294967295
 800912c:	81a3      	strh	r3, [r4, #12]
 800912e:	e03e      	b.n	80091ae <__swsetup_r+0xba>
 8009130:	4b25      	ldr	r3, [pc, #148]	; (80091c8 <__swsetup_r+0xd4>)
 8009132:	429c      	cmp	r4, r3
 8009134:	d101      	bne.n	800913a <__swsetup_r+0x46>
 8009136:	68ac      	ldr	r4, [r5, #8]
 8009138:	e7eb      	b.n	8009112 <__swsetup_r+0x1e>
 800913a:	4b24      	ldr	r3, [pc, #144]	; (80091cc <__swsetup_r+0xd8>)
 800913c:	429c      	cmp	r4, r3
 800913e:	bf08      	it	eq
 8009140:	68ec      	ldreq	r4, [r5, #12]
 8009142:	e7e6      	b.n	8009112 <__swsetup_r+0x1e>
 8009144:	0758      	lsls	r0, r3, #29
 8009146:	d512      	bpl.n	800916e <__swsetup_r+0x7a>
 8009148:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800914a:	b141      	cbz	r1, 800915e <__swsetup_r+0x6a>
 800914c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009150:	4299      	cmp	r1, r3
 8009152:	d002      	beq.n	800915a <__swsetup_r+0x66>
 8009154:	4630      	mov	r0, r6
 8009156:	f7ff fb6f 	bl	8008838 <_free_r>
 800915a:	2300      	movs	r3, #0
 800915c:	6363      	str	r3, [r4, #52]	; 0x34
 800915e:	89a3      	ldrh	r3, [r4, #12]
 8009160:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009164:	81a3      	strh	r3, [r4, #12]
 8009166:	2300      	movs	r3, #0
 8009168:	6063      	str	r3, [r4, #4]
 800916a:	6923      	ldr	r3, [r4, #16]
 800916c:	6023      	str	r3, [r4, #0]
 800916e:	89a3      	ldrh	r3, [r4, #12]
 8009170:	f043 0308 	orr.w	r3, r3, #8
 8009174:	81a3      	strh	r3, [r4, #12]
 8009176:	6923      	ldr	r3, [r4, #16]
 8009178:	b94b      	cbnz	r3, 800918e <__swsetup_r+0x9a>
 800917a:	89a3      	ldrh	r3, [r4, #12]
 800917c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009180:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009184:	d003      	beq.n	800918e <__swsetup_r+0x9a>
 8009186:	4621      	mov	r1, r4
 8009188:	4630      	mov	r0, r6
 800918a:	f000 fa07 	bl	800959c <__smakebuf_r>
 800918e:	89a0      	ldrh	r0, [r4, #12]
 8009190:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009194:	f010 0301 	ands.w	r3, r0, #1
 8009198:	d00a      	beq.n	80091b0 <__swsetup_r+0xbc>
 800919a:	2300      	movs	r3, #0
 800919c:	60a3      	str	r3, [r4, #8]
 800919e:	6963      	ldr	r3, [r4, #20]
 80091a0:	425b      	negs	r3, r3
 80091a2:	61a3      	str	r3, [r4, #24]
 80091a4:	6923      	ldr	r3, [r4, #16]
 80091a6:	b943      	cbnz	r3, 80091ba <__swsetup_r+0xc6>
 80091a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80091ac:	d1ba      	bne.n	8009124 <__swsetup_r+0x30>
 80091ae:	bd70      	pop	{r4, r5, r6, pc}
 80091b0:	0781      	lsls	r1, r0, #30
 80091b2:	bf58      	it	pl
 80091b4:	6963      	ldrpl	r3, [r4, #20]
 80091b6:	60a3      	str	r3, [r4, #8]
 80091b8:	e7f4      	b.n	80091a4 <__swsetup_r+0xb0>
 80091ba:	2000      	movs	r0, #0
 80091bc:	e7f7      	b.n	80091ae <__swsetup_r+0xba>
 80091be:	bf00      	nop
 80091c0:	2000000c 	.word	0x2000000c
 80091c4:	08009cd4 	.word	0x08009cd4
 80091c8:	08009cf4 	.word	0x08009cf4
 80091cc:	08009cb4 	.word	0x08009cb4

080091d0 <abort>:
 80091d0:	2006      	movs	r0, #6
 80091d2:	b508      	push	{r3, lr}
 80091d4:	f000 fa52 	bl	800967c <raise>
 80091d8:	2001      	movs	r0, #1
 80091da:	f7f8 fe1e 	bl	8001e1a <_exit>
	...

080091e0 <__sflush_r>:
 80091e0:	898a      	ldrh	r2, [r1, #12]
 80091e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091e6:	4605      	mov	r5, r0
 80091e8:	0710      	lsls	r0, r2, #28
 80091ea:	460c      	mov	r4, r1
 80091ec:	d458      	bmi.n	80092a0 <__sflush_r+0xc0>
 80091ee:	684b      	ldr	r3, [r1, #4]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	dc05      	bgt.n	8009200 <__sflush_r+0x20>
 80091f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	dc02      	bgt.n	8009200 <__sflush_r+0x20>
 80091fa:	2000      	movs	r0, #0
 80091fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009200:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009202:	2e00      	cmp	r6, #0
 8009204:	d0f9      	beq.n	80091fa <__sflush_r+0x1a>
 8009206:	2300      	movs	r3, #0
 8009208:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800920c:	682f      	ldr	r7, [r5, #0]
 800920e:	602b      	str	r3, [r5, #0]
 8009210:	d032      	beq.n	8009278 <__sflush_r+0x98>
 8009212:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009214:	89a3      	ldrh	r3, [r4, #12]
 8009216:	075a      	lsls	r2, r3, #29
 8009218:	d505      	bpl.n	8009226 <__sflush_r+0x46>
 800921a:	6863      	ldr	r3, [r4, #4]
 800921c:	1ac0      	subs	r0, r0, r3
 800921e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009220:	b10b      	cbz	r3, 8009226 <__sflush_r+0x46>
 8009222:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009224:	1ac0      	subs	r0, r0, r3
 8009226:	2300      	movs	r3, #0
 8009228:	4602      	mov	r2, r0
 800922a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800922c:	4628      	mov	r0, r5
 800922e:	6a21      	ldr	r1, [r4, #32]
 8009230:	47b0      	blx	r6
 8009232:	1c43      	adds	r3, r0, #1
 8009234:	89a3      	ldrh	r3, [r4, #12]
 8009236:	d106      	bne.n	8009246 <__sflush_r+0x66>
 8009238:	6829      	ldr	r1, [r5, #0]
 800923a:	291d      	cmp	r1, #29
 800923c:	d82c      	bhi.n	8009298 <__sflush_r+0xb8>
 800923e:	4a2a      	ldr	r2, [pc, #168]	; (80092e8 <__sflush_r+0x108>)
 8009240:	40ca      	lsrs	r2, r1
 8009242:	07d6      	lsls	r6, r2, #31
 8009244:	d528      	bpl.n	8009298 <__sflush_r+0xb8>
 8009246:	2200      	movs	r2, #0
 8009248:	6062      	str	r2, [r4, #4]
 800924a:	6922      	ldr	r2, [r4, #16]
 800924c:	04d9      	lsls	r1, r3, #19
 800924e:	6022      	str	r2, [r4, #0]
 8009250:	d504      	bpl.n	800925c <__sflush_r+0x7c>
 8009252:	1c42      	adds	r2, r0, #1
 8009254:	d101      	bne.n	800925a <__sflush_r+0x7a>
 8009256:	682b      	ldr	r3, [r5, #0]
 8009258:	b903      	cbnz	r3, 800925c <__sflush_r+0x7c>
 800925a:	6560      	str	r0, [r4, #84]	; 0x54
 800925c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800925e:	602f      	str	r7, [r5, #0]
 8009260:	2900      	cmp	r1, #0
 8009262:	d0ca      	beq.n	80091fa <__sflush_r+0x1a>
 8009264:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009268:	4299      	cmp	r1, r3
 800926a:	d002      	beq.n	8009272 <__sflush_r+0x92>
 800926c:	4628      	mov	r0, r5
 800926e:	f7ff fae3 	bl	8008838 <_free_r>
 8009272:	2000      	movs	r0, #0
 8009274:	6360      	str	r0, [r4, #52]	; 0x34
 8009276:	e7c1      	b.n	80091fc <__sflush_r+0x1c>
 8009278:	6a21      	ldr	r1, [r4, #32]
 800927a:	2301      	movs	r3, #1
 800927c:	4628      	mov	r0, r5
 800927e:	47b0      	blx	r6
 8009280:	1c41      	adds	r1, r0, #1
 8009282:	d1c7      	bne.n	8009214 <__sflush_r+0x34>
 8009284:	682b      	ldr	r3, [r5, #0]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d0c4      	beq.n	8009214 <__sflush_r+0x34>
 800928a:	2b1d      	cmp	r3, #29
 800928c:	d001      	beq.n	8009292 <__sflush_r+0xb2>
 800928e:	2b16      	cmp	r3, #22
 8009290:	d101      	bne.n	8009296 <__sflush_r+0xb6>
 8009292:	602f      	str	r7, [r5, #0]
 8009294:	e7b1      	b.n	80091fa <__sflush_r+0x1a>
 8009296:	89a3      	ldrh	r3, [r4, #12]
 8009298:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800929c:	81a3      	strh	r3, [r4, #12]
 800929e:	e7ad      	b.n	80091fc <__sflush_r+0x1c>
 80092a0:	690f      	ldr	r7, [r1, #16]
 80092a2:	2f00      	cmp	r7, #0
 80092a4:	d0a9      	beq.n	80091fa <__sflush_r+0x1a>
 80092a6:	0793      	lsls	r3, r2, #30
 80092a8:	bf18      	it	ne
 80092aa:	2300      	movne	r3, #0
 80092ac:	680e      	ldr	r6, [r1, #0]
 80092ae:	bf08      	it	eq
 80092b0:	694b      	ldreq	r3, [r1, #20]
 80092b2:	eba6 0807 	sub.w	r8, r6, r7
 80092b6:	600f      	str	r7, [r1, #0]
 80092b8:	608b      	str	r3, [r1, #8]
 80092ba:	f1b8 0f00 	cmp.w	r8, #0
 80092be:	dd9c      	ble.n	80091fa <__sflush_r+0x1a>
 80092c0:	4643      	mov	r3, r8
 80092c2:	463a      	mov	r2, r7
 80092c4:	4628      	mov	r0, r5
 80092c6:	6a21      	ldr	r1, [r4, #32]
 80092c8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80092ca:	47b0      	blx	r6
 80092cc:	2800      	cmp	r0, #0
 80092ce:	dc06      	bgt.n	80092de <__sflush_r+0xfe>
 80092d0:	89a3      	ldrh	r3, [r4, #12]
 80092d2:	f04f 30ff 	mov.w	r0, #4294967295
 80092d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092da:	81a3      	strh	r3, [r4, #12]
 80092dc:	e78e      	b.n	80091fc <__sflush_r+0x1c>
 80092de:	4407      	add	r7, r0
 80092e0:	eba8 0800 	sub.w	r8, r8, r0
 80092e4:	e7e9      	b.n	80092ba <__sflush_r+0xda>
 80092e6:	bf00      	nop
 80092e8:	20400001 	.word	0x20400001

080092ec <_fflush_r>:
 80092ec:	b538      	push	{r3, r4, r5, lr}
 80092ee:	690b      	ldr	r3, [r1, #16]
 80092f0:	4605      	mov	r5, r0
 80092f2:	460c      	mov	r4, r1
 80092f4:	b913      	cbnz	r3, 80092fc <_fflush_r+0x10>
 80092f6:	2500      	movs	r5, #0
 80092f8:	4628      	mov	r0, r5
 80092fa:	bd38      	pop	{r3, r4, r5, pc}
 80092fc:	b118      	cbz	r0, 8009306 <_fflush_r+0x1a>
 80092fe:	6983      	ldr	r3, [r0, #24]
 8009300:	b90b      	cbnz	r3, 8009306 <_fflush_r+0x1a>
 8009302:	f000 f887 	bl	8009414 <__sinit>
 8009306:	4b14      	ldr	r3, [pc, #80]	; (8009358 <_fflush_r+0x6c>)
 8009308:	429c      	cmp	r4, r3
 800930a:	d11b      	bne.n	8009344 <_fflush_r+0x58>
 800930c:	686c      	ldr	r4, [r5, #4]
 800930e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d0ef      	beq.n	80092f6 <_fflush_r+0xa>
 8009316:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009318:	07d0      	lsls	r0, r2, #31
 800931a:	d404      	bmi.n	8009326 <_fflush_r+0x3a>
 800931c:	0599      	lsls	r1, r3, #22
 800931e:	d402      	bmi.n	8009326 <_fflush_r+0x3a>
 8009320:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009322:	f000 f915 	bl	8009550 <__retarget_lock_acquire_recursive>
 8009326:	4628      	mov	r0, r5
 8009328:	4621      	mov	r1, r4
 800932a:	f7ff ff59 	bl	80091e0 <__sflush_r>
 800932e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009330:	4605      	mov	r5, r0
 8009332:	07da      	lsls	r2, r3, #31
 8009334:	d4e0      	bmi.n	80092f8 <_fflush_r+0xc>
 8009336:	89a3      	ldrh	r3, [r4, #12]
 8009338:	059b      	lsls	r3, r3, #22
 800933a:	d4dd      	bmi.n	80092f8 <_fflush_r+0xc>
 800933c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800933e:	f000 f908 	bl	8009552 <__retarget_lock_release_recursive>
 8009342:	e7d9      	b.n	80092f8 <_fflush_r+0xc>
 8009344:	4b05      	ldr	r3, [pc, #20]	; (800935c <_fflush_r+0x70>)
 8009346:	429c      	cmp	r4, r3
 8009348:	d101      	bne.n	800934e <_fflush_r+0x62>
 800934a:	68ac      	ldr	r4, [r5, #8]
 800934c:	e7df      	b.n	800930e <_fflush_r+0x22>
 800934e:	4b04      	ldr	r3, [pc, #16]	; (8009360 <_fflush_r+0x74>)
 8009350:	429c      	cmp	r4, r3
 8009352:	bf08      	it	eq
 8009354:	68ec      	ldreq	r4, [r5, #12]
 8009356:	e7da      	b.n	800930e <_fflush_r+0x22>
 8009358:	08009cd4 	.word	0x08009cd4
 800935c:	08009cf4 	.word	0x08009cf4
 8009360:	08009cb4 	.word	0x08009cb4

08009364 <std>:
 8009364:	2300      	movs	r3, #0
 8009366:	b510      	push	{r4, lr}
 8009368:	4604      	mov	r4, r0
 800936a:	e9c0 3300 	strd	r3, r3, [r0]
 800936e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009372:	6083      	str	r3, [r0, #8]
 8009374:	8181      	strh	r1, [r0, #12]
 8009376:	6643      	str	r3, [r0, #100]	; 0x64
 8009378:	81c2      	strh	r2, [r0, #14]
 800937a:	6183      	str	r3, [r0, #24]
 800937c:	4619      	mov	r1, r3
 800937e:	2208      	movs	r2, #8
 8009380:	305c      	adds	r0, #92	; 0x5c
 8009382:	f7fb fe35 	bl	8004ff0 <memset>
 8009386:	4b05      	ldr	r3, [pc, #20]	; (800939c <std+0x38>)
 8009388:	6224      	str	r4, [r4, #32]
 800938a:	6263      	str	r3, [r4, #36]	; 0x24
 800938c:	4b04      	ldr	r3, [pc, #16]	; (80093a0 <std+0x3c>)
 800938e:	62a3      	str	r3, [r4, #40]	; 0x28
 8009390:	4b04      	ldr	r3, [pc, #16]	; (80093a4 <std+0x40>)
 8009392:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009394:	4b04      	ldr	r3, [pc, #16]	; (80093a8 <std+0x44>)
 8009396:	6323      	str	r3, [r4, #48]	; 0x30
 8009398:	bd10      	pop	{r4, pc}
 800939a:	bf00      	nop
 800939c:	080096b5 	.word	0x080096b5
 80093a0:	080096d7 	.word	0x080096d7
 80093a4:	0800970f 	.word	0x0800970f
 80093a8:	08009733 	.word	0x08009733

080093ac <_cleanup_r>:
 80093ac:	4901      	ldr	r1, [pc, #4]	; (80093b4 <_cleanup_r+0x8>)
 80093ae:	f000 b8af 	b.w	8009510 <_fwalk_reent>
 80093b2:	bf00      	nop
 80093b4:	080092ed 	.word	0x080092ed

080093b8 <__sfmoreglue>:
 80093b8:	b570      	push	{r4, r5, r6, lr}
 80093ba:	2568      	movs	r5, #104	; 0x68
 80093bc:	1e4a      	subs	r2, r1, #1
 80093be:	4355      	muls	r5, r2
 80093c0:	460e      	mov	r6, r1
 80093c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80093c6:	f7ff fa83 	bl	80088d0 <_malloc_r>
 80093ca:	4604      	mov	r4, r0
 80093cc:	b140      	cbz	r0, 80093e0 <__sfmoreglue+0x28>
 80093ce:	2100      	movs	r1, #0
 80093d0:	e9c0 1600 	strd	r1, r6, [r0]
 80093d4:	300c      	adds	r0, #12
 80093d6:	60a0      	str	r0, [r4, #8]
 80093d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80093dc:	f7fb fe08 	bl	8004ff0 <memset>
 80093e0:	4620      	mov	r0, r4
 80093e2:	bd70      	pop	{r4, r5, r6, pc}

080093e4 <__sfp_lock_acquire>:
 80093e4:	4801      	ldr	r0, [pc, #4]	; (80093ec <__sfp_lock_acquire+0x8>)
 80093e6:	f000 b8b3 	b.w	8009550 <__retarget_lock_acquire_recursive>
 80093ea:	bf00      	nop
 80093ec:	20000398 	.word	0x20000398

080093f0 <__sfp_lock_release>:
 80093f0:	4801      	ldr	r0, [pc, #4]	; (80093f8 <__sfp_lock_release+0x8>)
 80093f2:	f000 b8ae 	b.w	8009552 <__retarget_lock_release_recursive>
 80093f6:	bf00      	nop
 80093f8:	20000398 	.word	0x20000398

080093fc <__sinit_lock_acquire>:
 80093fc:	4801      	ldr	r0, [pc, #4]	; (8009404 <__sinit_lock_acquire+0x8>)
 80093fe:	f000 b8a7 	b.w	8009550 <__retarget_lock_acquire_recursive>
 8009402:	bf00      	nop
 8009404:	20000393 	.word	0x20000393

08009408 <__sinit_lock_release>:
 8009408:	4801      	ldr	r0, [pc, #4]	; (8009410 <__sinit_lock_release+0x8>)
 800940a:	f000 b8a2 	b.w	8009552 <__retarget_lock_release_recursive>
 800940e:	bf00      	nop
 8009410:	20000393 	.word	0x20000393

08009414 <__sinit>:
 8009414:	b510      	push	{r4, lr}
 8009416:	4604      	mov	r4, r0
 8009418:	f7ff fff0 	bl	80093fc <__sinit_lock_acquire>
 800941c:	69a3      	ldr	r3, [r4, #24]
 800941e:	b11b      	cbz	r3, 8009428 <__sinit+0x14>
 8009420:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009424:	f7ff bff0 	b.w	8009408 <__sinit_lock_release>
 8009428:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800942c:	6523      	str	r3, [r4, #80]	; 0x50
 800942e:	4b13      	ldr	r3, [pc, #76]	; (800947c <__sinit+0x68>)
 8009430:	4a13      	ldr	r2, [pc, #76]	; (8009480 <__sinit+0x6c>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	62a2      	str	r2, [r4, #40]	; 0x28
 8009436:	42a3      	cmp	r3, r4
 8009438:	bf08      	it	eq
 800943a:	2301      	moveq	r3, #1
 800943c:	4620      	mov	r0, r4
 800943e:	bf08      	it	eq
 8009440:	61a3      	streq	r3, [r4, #24]
 8009442:	f000 f81f 	bl	8009484 <__sfp>
 8009446:	6060      	str	r0, [r4, #4]
 8009448:	4620      	mov	r0, r4
 800944a:	f000 f81b 	bl	8009484 <__sfp>
 800944e:	60a0      	str	r0, [r4, #8]
 8009450:	4620      	mov	r0, r4
 8009452:	f000 f817 	bl	8009484 <__sfp>
 8009456:	2200      	movs	r2, #0
 8009458:	2104      	movs	r1, #4
 800945a:	60e0      	str	r0, [r4, #12]
 800945c:	6860      	ldr	r0, [r4, #4]
 800945e:	f7ff ff81 	bl	8009364 <std>
 8009462:	2201      	movs	r2, #1
 8009464:	2109      	movs	r1, #9
 8009466:	68a0      	ldr	r0, [r4, #8]
 8009468:	f7ff ff7c 	bl	8009364 <std>
 800946c:	2202      	movs	r2, #2
 800946e:	2112      	movs	r1, #18
 8009470:	68e0      	ldr	r0, [r4, #12]
 8009472:	f7ff ff77 	bl	8009364 <std>
 8009476:	2301      	movs	r3, #1
 8009478:	61a3      	str	r3, [r4, #24]
 800947a:	e7d1      	b.n	8009420 <__sinit+0xc>
 800947c:	08009860 	.word	0x08009860
 8009480:	080093ad 	.word	0x080093ad

08009484 <__sfp>:
 8009484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009486:	4607      	mov	r7, r0
 8009488:	f7ff ffac 	bl	80093e4 <__sfp_lock_acquire>
 800948c:	4b1e      	ldr	r3, [pc, #120]	; (8009508 <__sfp+0x84>)
 800948e:	681e      	ldr	r6, [r3, #0]
 8009490:	69b3      	ldr	r3, [r6, #24]
 8009492:	b913      	cbnz	r3, 800949a <__sfp+0x16>
 8009494:	4630      	mov	r0, r6
 8009496:	f7ff ffbd 	bl	8009414 <__sinit>
 800949a:	3648      	adds	r6, #72	; 0x48
 800949c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80094a0:	3b01      	subs	r3, #1
 80094a2:	d503      	bpl.n	80094ac <__sfp+0x28>
 80094a4:	6833      	ldr	r3, [r6, #0]
 80094a6:	b30b      	cbz	r3, 80094ec <__sfp+0x68>
 80094a8:	6836      	ldr	r6, [r6, #0]
 80094aa:	e7f7      	b.n	800949c <__sfp+0x18>
 80094ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80094b0:	b9d5      	cbnz	r5, 80094e8 <__sfp+0x64>
 80094b2:	4b16      	ldr	r3, [pc, #88]	; (800950c <__sfp+0x88>)
 80094b4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80094b8:	60e3      	str	r3, [r4, #12]
 80094ba:	6665      	str	r5, [r4, #100]	; 0x64
 80094bc:	f000 f847 	bl	800954e <__retarget_lock_init_recursive>
 80094c0:	f7ff ff96 	bl	80093f0 <__sfp_lock_release>
 80094c4:	2208      	movs	r2, #8
 80094c6:	4629      	mov	r1, r5
 80094c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80094cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80094d0:	6025      	str	r5, [r4, #0]
 80094d2:	61a5      	str	r5, [r4, #24]
 80094d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80094d8:	f7fb fd8a 	bl	8004ff0 <memset>
 80094dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80094e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80094e4:	4620      	mov	r0, r4
 80094e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094e8:	3468      	adds	r4, #104	; 0x68
 80094ea:	e7d9      	b.n	80094a0 <__sfp+0x1c>
 80094ec:	2104      	movs	r1, #4
 80094ee:	4638      	mov	r0, r7
 80094f0:	f7ff ff62 	bl	80093b8 <__sfmoreglue>
 80094f4:	4604      	mov	r4, r0
 80094f6:	6030      	str	r0, [r6, #0]
 80094f8:	2800      	cmp	r0, #0
 80094fa:	d1d5      	bne.n	80094a8 <__sfp+0x24>
 80094fc:	f7ff ff78 	bl	80093f0 <__sfp_lock_release>
 8009500:	230c      	movs	r3, #12
 8009502:	603b      	str	r3, [r7, #0]
 8009504:	e7ee      	b.n	80094e4 <__sfp+0x60>
 8009506:	bf00      	nop
 8009508:	08009860 	.word	0x08009860
 800950c:	ffff0001 	.word	0xffff0001

08009510 <_fwalk_reent>:
 8009510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009514:	4606      	mov	r6, r0
 8009516:	4688      	mov	r8, r1
 8009518:	2700      	movs	r7, #0
 800951a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800951e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009522:	f1b9 0901 	subs.w	r9, r9, #1
 8009526:	d505      	bpl.n	8009534 <_fwalk_reent+0x24>
 8009528:	6824      	ldr	r4, [r4, #0]
 800952a:	2c00      	cmp	r4, #0
 800952c:	d1f7      	bne.n	800951e <_fwalk_reent+0xe>
 800952e:	4638      	mov	r0, r7
 8009530:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009534:	89ab      	ldrh	r3, [r5, #12]
 8009536:	2b01      	cmp	r3, #1
 8009538:	d907      	bls.n	800954a <_fwalk_reent+0x3a>
 800953a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800953e:	3301      	adds	r3, #1
 8009540:	d003      	beq.n	800954a <_fwalk_reent+0x3a>
 8009542:	4629      	mov	r1, r5
 8009544:	4630      	mov	r0, r6
 8009546:	47c0      	blx	r8
 8009548:	4307      	orrs	r7, r0
 800954a:	3568      	adds	r5, #104	; 0x68
 800954c:	e7e9      	b.n	8009522 <_fwalk_reent+0x12>

0800954e <__retarget_lock_init_recursive>:
 800954e:	4770      	bx	lr

08009550 <__retarget_lock_acquire_recursive>:
 8009550:	4770      	bx	lr

08009552 <__retarget_lock_release_recursive>:
 8009552:	4770      	bx	lr

08009554 <__swhatbuf_r>:
 8009554:	b570      	push	{r4, r5, r6, lr}
 8009556:	460e      	mov	r6, r1
 8009558:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800955c:	4614      	mov	r4, r2
 800955e:	2900      	cmp	r1, #0
 8009560:	461d      	mov	r5, r3
 8009562:	b096      	sub	sp, #88	; 0x58
 8009564:	da07      	bge.n	8009576 <__swhatbuf_r+0x22>
 8009566:	2300      	movs	r3, #0
 8009568:	602b      	str	r3, [r5, #0]
 800956a:	89b3      	ldrh	r3, [r6, #12]
 800956c:	061a      	lsls	r2, r3, #24
 800956e:	d410      	bmi.n	8009592 <__swhatbuf_r+0x3e>
 8009570:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009574:	e00e      	b.n	8009594 <__swhatbuf_r+0x40>
 8009576:	466a      	mov	r2, sp
 8009578:	f000 f902 	bl	8009780 <_fstat_r>
 800957c:	2800      	cmp	r0, #0
 800957e:	dbf2      	blt.n	8009566 <__swhatbuf_r+0x12>
 8009580:	9a01      	ldr	r2, [sp, #4]
 8009582:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009586:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800958a:	425a      	negs	r2, r3
 800958c:	415a      	adcs	r2, r3
 800958e:	602a      	str	r2, [r5, #0]
 8009590:	e7ee      	b.n	8009570 <__swhatbuf_r+0x1c>
 8009592:	2340      	movs	r3, #64	; 0x40
 8009594:	2000      	movs	r0, #0
 8009596:	6023      	str	r3, [r4, #0]
 8009598:	b016      	add	sp, #88	; 0x58
 800959a:	bd70      	pop	{r4, r5, r6, pc}

0800959c <__smakebuf_r>:
 800959c:	898b      	ldrh	r3, [r1, #12]
 800959e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80095a0:	079d      	lsls	r5, r3, #30
 80095a2:	4606      	mov	r6, r0
 80095a4:	460c      	mov	r4, r1
 80095a6:	d507      	bpl.n	80095b8 <__smakebuf_r+0x1c>
 80095a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80095ac:	6023      	str	r3, [r4, #0]
 80095ae:	6123      	str	r3, [r4, #16]
 80095b0:	2301      	movs	r3, #1
 80095b2:	6163      	str	r3, [r4, #20]
 80095b4:	b002      	add	sp, #8
 80095b6:	bd70      	pop	{r4, r5, r6, pc}
 80095b8:	466a      	mov	r2, sp
 80095ba:	ab01      	add	r3, sp, #4
 80095bc:	f7ff ffca 	bl	8009554 <__swhatbuf_r>
 80095c0:	9900      	ldr	r1, [sp, #0]
 80095c2:	4605      	mov	r5, r0
 80095c4:	4630      	mov	r0, r6
 80095c6:	f7ff f983 	bl	80088d0 <_malloc_r>
 80095ca:	b948      	cbnz	r0, 80095e0 <__smakebuf_r+0x44>
 80095cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095d0:	059a      	lsls	r2, r3, #22
 80095d2:	d4ef      	bmi.n	80095b4 <__smakebuf_r+0x18>
 80095d4:	f023 0303 	bic.w	r3, r3, #3
 80095d8:	f043 0302 	orr.w	r3, r3, #2
 80095dc:	81a3      	strh	r3, [r4, #12]
 80095de:	e7e3      	b.n	80095a8 <__smakebuf_r+0xc>
 80095e0:	4b0d      	ldr	r3, [pc, #52]	; (8009618 <__smakebuf_r+0x7c>)
 80095e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80095e4:	89a3      	ldrh	r3, [r4, #12]
 80095e6:	6020      	str	r0, [r4, #0]
 80095e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095ec:	81a3      	strh	r3, [r4, #12]
 80095ee:	9b00      	ldr	r3, [sp, #0]
 80095f0:	6120      	str	r0, [r4, #16]
 80095f2:	6163      	str	r3, [r4, #20]
 80095f4:	9b01      	ldr	r3, [sp, #4]
 80095f6:	b15b      	cbz	r3, 8009610 <__smakebuf_r+0x74>
 80095f8:	4630      	mov	r0, r6
 80095fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80095fe:	f000 f8d1 	bl	80097a4 <_isatty_r>
 8009602:	b128      	cbz	r0, 8009610 <__smakebuf_r+0x74>
 8009604:	89a3      	ldrh	r3, [r4, #12]
 8009606:	f023 0303 	bic.w	r3, r3, #3
 800960a:	f043 0301 	orr.w	r3, r3, #1
 800960e:	81a3      	strh	r3, [r4, #12]
 8009610:	89a0      	ldrh	r0, [r4, #12]
 8009612:	4305      	orrs	r5, r0
 8009614:	81a5      	strh	r5, [r4, #12]
 8009616:	e7cd      	b.n	80095b4 <__smakebuf_r+0x18>
 8009618:	080093ad 	.word	0x080093ad

0800961c <_malloc_usable_size_r>:
 800961c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009620:	1f18      	subs	r0, r3, #4
 8009622:	2b00      	cmp	r3, #0
 8009624:	bfbc      	itt	lt
 8009626:	580b      	ldrlt	r3, [r1, r0]
 8009628:	18c0      	addlt	r0, r0, r3
 800962a:	4770      	bx	lr

0800962c <_raise_r>:
 800962c:	291f      	cmp	r1, #31
 800962e:	b538      	push	{r3, r4, r5, lr}
 8009630:	4604      	mov	r4, r0
 8009632:	460d      	mov	r5, r1
 8009634:	d904      	bls.n	8009640 <_raise_r+0x14>
 8009636:	2316      	movs	r3, #22
 8009638:	6003      	str	r3, [r0, #0]
 800963a:	f04f 30ff 	mov.w	r0, #4294967295
 800963e:	bd38      	pop	{r3, r4, r5, pc}
 8009640:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009642:	b112      	cbz	r2, 800964a <_raise_r+0x1e>
 8009644:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009648:	b94b      	cbnz	r3, 800965e <_raise_r+0x32>
 800964a:	4620      	mov	r0, r4
 800964c:	f000 f830 	bl	80096b0 <_getpid_r>
 8009650:	462a      	mov	r2, r5
 8009652:	4601      	mov	r1, r0
 8009654:	4620      	mov	r0, r4
 8009656:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800965a:	f000 b817 	b.w	800968c <_kill_r>
 800965e:	2b01      	cmp	r3, #1
 8009660:	d00a      	beq.n	8009678 <_raise_r+0x4c>
 8009662:	1c59      	adds	r1, r3, #1
 8009664:	d103      	bne.n	800966e <_raise_r+0x42>
 8009666:	2316      	movs	r3, #22
 8009668:	6003      	str	r3, [r0, #0]
 800966a:	2001      	movs	r0, #1
 800966c:	e7e7      	b.n	800963e <_raise_r+0x12>
 800966e:	2400      	movs	r4, #0
 8009670:	4628      	mov	r0, r5
 8009672:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009676:	4798      	blx	r3
 8009678:	2000      	movs	r0, #0
 800967a:	e7e0      	b.n	800963e <_raise_r+0x12>

0800967c <raise>:
 800967c:	4b02      	ldr	r3, [pc, #8]	; (8009688 <raise+0xc>)
 800967e:	4601      	mov	r1, r0
 8009680:	6818      	ldr	r0, [r3, #0]
 8009682:	f7ff bfd3 	b.w	800962c <_raise_r>
 8009686:	bf00      	nop
 8009688:	2000000c 	.word	0x2000000c

0800968c <_kill_r>:
 800968c:	b538      	push	{r3, r4, r5, lr}
 800968e:	2300      	movs	r3, #0
 8009690:	4d06      	ldr	r5, [pc, #24]	; (80096ac <_kill_r+0x20>)
 8009692:	4604      	mov	r4, r0
 8009694:	4608      	mov	r0, r1
 8009696:	4611      	mov	r1, r2
 8009698:	602b      	str	r3, [r5, #0]
 800969a:	f7f8 fbae 	bl	8001dfa <_kill>
 800969e:	1c43      	adds	r3, r0, #1
 80096a0:	d102      	bne.n	80096a8 <_kill_r+0x1c>
 80096a2:	682b      	ldr	r3, [r5, #0]
 80096a4:	b103      	cbz	r3, 80096a8 <_kill_r+0x1c>
 80096a6:	6023      	str	r3, [r4, #0]
 80096a8:	bd38      	pop	{r3, r4, r5, pc}
 80096aa:	bf00      	nop
 80096ac:	2000038c 	.word	0x2000038c

080096b0 <_getpid_r>:
 80096b0:	f7f8 bb9c 	b.w	8001dec <_getpid>

080096b4 <__sread>:
 80096b4:	b510      	push	{r4, lr}
 80096b6:	460c      	mov	r4, r1
 80096b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096bc:	f000 f894 	bl	80097e8 <_read_r>
 80096c0:	2800      	cmp	r0, #0
 80096c2:	bfab      	itete	ge
 80096c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80096c6:	89a3      	ldrhlt	r3, [r4, #12]
 80096c8:	181b      	addge	r3, r3, r0
 80096ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80096ce:	bfac      	ite	ge
 80096d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80096d2:	81a3      	strhlt	r3, [r4, #12]
 80096d4:	bd10      	pop	{r4, pc}

080096d6 <__swrite>:
 80096d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096da:	461f      	mov	r7, r3
 80096dc:	898b      	ldrh	r3, [r1, #12]
 80096de:	4605      	mov	r5, r0
 80096e0:	05db      	lsls	r3, r3, #23
 80096e2:	460c      	mov	r4, r1
 80096e4:	4616      	mov	r6, r2
 80096e6:	d505      	bpl.n	80096f4 <__swrite+0x1e>
 80096e8:	2302      	movs	r3, #2
 80096ea:	2200      	movs	r2, #0
 80096ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096f0:	f000 f868 	bl	80097c4 <_lseek_r>
 80096f4:	89a3      	ldrh	r3, [r4, #12]
 80096f6:	4632      	mov	r2, r6
 80096f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80096fc:	81a3      	strh	r3, [r4, #12]
 80096fe:	4628      	mov	r0, r5
 8009700:	463b      	mov	r3, r7
 8009702:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009706:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800970a:	f000 b817 	b.w	800973c <_write_r>

0800970e <__sseek>:
 800970e:	b510      	push	{r4, lr}
 8009710:	460c      	mov	r4, r1
 8009712:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009716:	f000 f855 	bl	80097c4 <_lseek_r>
 800971a:	1c43      	adds	r3, r0, #1
 800971c:	89a3      	ldrh	r3, [r4, #12]
 800971e:	bf15      	itete	ne
 8009720:	6560      	strne	r0, [r4, #84]	; 0x54
 8009722:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009726:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800972a:	81a3      	strheq	r3, [r4, #12]
 800972c:	bf18      	it	ne
 800972e:	81a3      	strhne	r3, [r4, #12]
 8009730:	bd10      	pop	{r4, pc}

08009732 <__sclose>:
 8009732:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009736:	f000 b813 	b.w	8009760 <_close_r>
	...

0800973c <_write_r>:
 800973c:	b538      	push	{r3, r4, r5, lr}
 800973e:	4604      	mov	r4, r0
 8009740:	4608      	mov	r0, r1
 8009742:	4611      	mov	r1, r2
 8009744:	2200      	movs	r2, #0
 8009746:	4d05      	ldr	r5, [pc, #20]	; (800975c <_write_r+0x20>)
 8009748:	602a      	str	r2, [r5, #0]
 800974a:	461a      	mov	r2, r3
 800974c:	f7f8 fb8c 	bl	8001e68 <_write>
 8009750:	1c43      	adds	r3, r0, #1
 8009752:	d102      	bne.n	800975a <_write_r+0x1e>
 8009754:	682b      	ldr	r3, [r5, #0]
 8009756:	b103      	cbz	r3, 800975a <_write_r+0x1e>
 8009758:	6023      	str	r3, [r4, #0]
 800975a:	bd38      	pop	{r3, r4, r5, pc}
 800975c:	2000038c 	.word	0x2000038c

08009760 <_close_r>:
 8009760:	b538      	push	{r3, r4, r5, lr}
 8009762:	2300      	movs	r3, #0
 8009764:	4d05      	ldr	r5, [pc, #20]	; (800977c <_close_r+0x1c>)
 8009766:	4604      	mov	r4, r0
 8009768:	4608      	mov	r0, r1
 800976a:	602b      	str	r3, [r5, #0]
 800976c:	f7f8 fb98 	bl	8001ea0 <_close>
 8009770:	1c43      	adds	r3, r0, #1
 8009772:	d102      	bne.n	800977a <_close_r+0x1a>
 8009774:	682b      	ldr	r3, [r5, #0]
 8009776:	b103      	cbz	r3, 800977a <_close_r+0x1a>
 8009778:	6023      	str	r3, [r4, #0]
 800977a:	bd38      	pop	{r3, r4, r5, pc}
 800977c:	2000038c 	.word	0x2000038c

08009780 <_fstat_r>:
 8009780:	b538      	push	{r3, r4, r5, lr}
 8009782:	2300      	movs	r3, #0
 8009784:	4d06      	ldr	r5, [pc, #24]	; (80097a0 <_fstat_r+0x20>)
 8009786:	4604      	mov	r4, r0
 8009788:	4608      	mov	r0, r1
 800978a:	4611      	mov	r1, r2
 800978c:	602b      	str	r3, [r5, #0]
 800978e:	f7f8 fb92 	bl	8001eb6 <_fstat>
 8009792:	1c43      	adds	r3, r0, #1
 8009794:	d102      	bne.n	800979c <_fstat_r+0x1c>
 8009796:	682b      	ldr	r3, [r5, #0]
 8009798:	b103      	cbz	r3, 800979c <_fstat_r+0x1c>
 800979a:	6023      	str	r3, [r4, #0]
 800979c:	bd38      	pop	{r3, r4, r5, pc}
 800979e:	bf00      	nop
 80097a0:	2000038c 	.word	0x2000038c

080097a4 <_isatty_r>:
 80097a4:	b538      	push	{r3, r4, r5, lr}
 80097a6:	2300      	movs	r3, #0
 80097a8:	4d05      	ldr	r5, [pc, #20]	; (80097c0 <_isatty_r+0x1c>)
 80097aa:	4604      	mov	r4, r0
 80097ac:	4608      	mov	r0, r1
 80097ae:	602b      	str	r3, [r5, #0]
 80097b0:	f7f8 fb90 	bl	8001ed4 <_isatty>
 80097b4:	1c43      	adds	r3, r0, #1
 80097b6:	d102      	bne.n	80097be <_isatty_r+0x1a>
 80097b8:	682b      	ldr	r3, [r5, #0]
 80097ba:	b103      	cbz	r3, 80097be <_isatty_r+0x1a>
 80097bc:	6023      	str	r3, [r4, #0]
 80097be:	bd38      	pop	{r3, r4, r5, pc}
 80097c0:	2000038c 	.word	0x2000038c

080097c4 <_lseek_r>:
 80097c4:	b538      	push	{r3, r4, r5, lr}
 80097c6:	4604      	mov	r4, r0
 80097c8:	4608      	mov	r0, r1
 80097ca:	4611      	mov	r1, r2
 80097cc:	2200      	movs	r2, #0
 80097ce:	4d05      	ldr	r5, [pc, #20]	; (80097e4 <_lseek_r+0x20>)
 80097d0:	602a      	str	r2, [r5, #0]
 80097d2:	461a      	mov	r2, r3
 80097d4:	f7f8 fb88 	bl	8001ee8 <_lseek>
 80097d8:	1c43      	adds	r3, r0, #1
 80097da:	d102      	bne.n	80097e2 <_lseek_r+0x1e>
 80097dc:	682b      	ldr	r3, [r5, #0]
 80097de:	b103      	cbz	r3, 80097e2 <_lseek_r+0x1e>
 80097e0:	6023      	str	r3, [r4, #0]
 80097e2:	bd38      	pop	{r3, r4, r5, pc}
 80097e4:	2000038c 	.word	0x2000038c

080097e8 <_read_r>:
 80097e8:	b538      	push	{r3, r4, r5, lr}
 80097ea:	4604      	mov	r4, r0
 80097ec:	4608      	mov	r0, r1
 80097ee:	4611      	mov	r1, r2
 80097f0:	2200      	movs	r2, #0
 80097f2:	4d05      	ldr	r5, [pc, #20]	; (8009808 <_read_r+0x20>)
 80097f4:	602a      	str	r2, [r5, #0]
 80097f6:	461a      	mov	r2, r3
 80097f8:	f7f8 fb19 	bl	8001e2e <_read>
 80097fc:	1c43      	adds	r3, r0, #1
 80097fe:	d102      	bne.n	8009806 <_read_r+0x1e>
 8009800:	682b      	ldr	r3, [r5, #0]
 8009802:	b103      	cbz	r3, 8009806 <_read_r+0x1e>
 8009804:	6023      	str	r3, [r4, #0]
 8009806:	bd38      	pop	{r3, r4, r5, pc}
 8009808:	2000038c 	.word	0x2000038c

0800980c <_init>:
 800980c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800980e:	bf00      	nop
 8009810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009812:	bc08      	pop	{r3}
 8009814:	469e      	mov	lr, r3
 8009816:	4770      	bx	lr

08009818 <_fini>:
 8009818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800981a:	bf00      	nop
 800981c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800981e:	bc08      	pop	{r3}
 8009820:	469e      	mov	lr, r3
 8009822:	4770      	bx	lr
