
NRF24.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007748  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000094c  08007858  08007858  00017858  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081a4  080081a4  00020204  2**0
                  CONTENTS
  4 .ARM          00000000  080081a4  080081a4  00020204  2**0
                  CONTENTS
  5 .preinit_array 00000000  080081a4  080081a4  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080081a4  080081a4  000181a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080081a8  080081a8  000181a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  080081ac  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  20000204  080083b0  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c8  080083b0  000203c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d787  00000000  00000000  0002022d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002370  00000000  00000000  0002d9b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c28  00000000  00000000  0002fd28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b50  00000000  00000000  00030950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003950  00000000  00000000  000314a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c985  00000000  00000000  00034df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b30b  00000000  00000000  00041775  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cca80  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004264  00000000  00000000  000ccad4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000204 	.word	0x20000204
 800012c:	00000000 	.word	0x00000000
 8000130:	08007840 	.word	0x08007840

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000208 	.word	0x20000208
 800014c:	08007840 	.word	0x08007840

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 8000a94:	4b0a      	ldr	r3, [pc, #40]	; (8000ac0 <NRF24_DelayMicroSeconds+0x38>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a0a      	ldr	r2, [pc, #40]	; (8000ac4 <NRF24_DelayMicroSeconds+0x3c>)
 8000a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a9e:	0c9a      	lsrs	r2, r3, #18
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	fb02 f303 	mul.w	r3, r2, r3
 8000aa6:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 8000aa8:	bf00      	nop
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	1e5a      	subs	r2, r3, #1
 8000aae:	60fa      	str	r2, [r7, #12]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d1fa      	bne.n	8000aaa <NRF24_DelayMicroSeconds+0x22>
}
 8000ab4:	bf00      	nop
 8000ab6:	bf00      	nop
 8000ab8:	3714      	adds	r7, #20
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bc80      	pop	{r7}
 8000abe:	4770      	bx	lr
 8000ac0:	20000028 	.word	0x20000028
 8000ac4:	165e9f81 	.word	0x165e9f81

08000ac8 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d008      	beq.n	8000ae8 <NRF24_csn+0x20>
 8000ad6:	4b0a      	ldr	r3, [pc, #40]	; (8000b00 <NRF24_csn+0x38>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a0a      	ldr	r2, [pc, #40]	; (8000b04 <NRF24_csn+0x3c>)
 8000adc:	8811      	ldrh	r1, [r2, #0]
 8000ade:	2201      	movs	r2, #1
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f002 fbbd 	bl	8003260 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8000ae6:	e007      	b.n	8000af8 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8000ae8:	4b05      	ldr	r3, [pc, #20]	; (8000b00 <NRF24_csn+0x38>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a05      	ldr	r2, [pc, #20]	; (8000b04 <NRF24_csn+0x3c>)
 8000aee:	8811      	ldrh	r1, [r2, #0]
 8000af0:	2200      	movs	r2, #0
 8000af2:	4618      	mov	r0, r3
 8000af4:	f002 fbb4 	bl	8003260 <HAL_GPIO_WritePin>
}
 8000af8:	bf00      	nop
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20000228 	.word	0x20000228
 8000b04:	2000022c 	.word	0x2000022c

08000b08 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d008      	beq.n	8000b28 <NRF24_ce+0x20>
 8000b16:	4b0a      	ldr	r3, [pc, #40]	; (8000b40 <NRF24_ce+0x38>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a0a      	ldr	r2, [pc, #40]	; (8000b44 <NRF24_ce+0x3c>)
 8000b1c:	8811      	ldrh	r1, [r2, #0]
 8000b1e:	2201      	movs	r2, #1
 8000b20:	4618      	mov	r0, r3
 8000b22:	f002 fb9d 	bl	8003260 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8000b26:	e007      	b.n	8000b38 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8000b28:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <NRF24_ce+0x38>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a05      	ldr	r2, [pc, #20]	; (8000b44 <NRF24_ce+0x3c>)
 8000b2e:	8811      	ldrh	r1, [r2, #0]
 8000b30:	2200      	movs	r2, #0
 8000b32:	4618      	mov	r0, r3
 8000b34:	f002 fb94 	bl	8003260 <HAL_GPIO_WritePin>
}
 8000b38:	bf00      	nop
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20000228 	.word	0x20000228
 8000b44:	2000022e 	.word	0x2000022e

08000b48 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8000b52:	2000      	movs	r0, #0
 8000b54:	f7ff ffb8 	bl	8000ac8 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000b58:	79fb      	ldrb	r3, [r7, #7]
 8000b5a:	f003 031f 	and.w	r3, r3, #31
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000b62:	f107 010c 	add.w	r1, r7, #12
 8000b66:	2364      	movs	r3, #100	; 0x64
 8000b68:	2201      	movs	r2, #1
 8000b6a:	480a      	ldr	r0, [pc, #40]	; (8000b94 <NRF24_read_register+0x4c>)
 8000b6c:	f003 f8fe 	bl	8003d6c <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8000b70:	f107 030c 	add.w	r3, r7, #12
 8000b74:	1c59      	adds	r1, r3, #1
 8000b76:	2364      	movs	r3, #100	; 0x64
 8000b78:	2201      	movs	r2, #1
 8000b7a:	4806      	ldr	r0, [pc, #24]	; (8000b94 <NRF24_read_register+0x4c>)
 8000b7c:	f003 fa32 	bl	8003fe4 <HAL_SPI_Receive>
	retData = spiBuf[1];
 8000b80:	7b7b      	ldrb	r3, [r7, #13]
 8000b82:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8000b84:	2001      	movs	r0, #1
 8000b86:	f7ff ff9f 	bl	8000ac8 <NRF24_csn>
	return retData;
 8000b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3710      	adds	r7, #16
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20000230 	.word	0x20000230

08000b98 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	6039      	str	r1, [r7, #0]
 8000ba2:	71fb      	strb	r3, [r7, #7]
 8000ba4:	4613      	mov	r3, r2
 8000ba6:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000ba8:	2000      	movs	r0, #0
 8000baa:	f7ff ff8d 	bl	8000ac8 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	f003 031f 	and.w	r3, r3, #31
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000bb8:	f107 010c 	add.w	r1, r7, #12
 8000bbc:	2364      	movs	r3, #100	; 0x64
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	4808      	ldr	r0, [pc, #32]	; (8000be4 <NRF24_read_registerN+0x4c>)
 8000bc2:	f003 f8d3 	bl	8003d6c <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8000bc6:	79bb      	ldrb	r3, [r7, #6]
 8000bc8:	b29a      	uxth	r2, r3
 8000bca:	2364      	movs	r3, #100	; 0x64
 8000bcc:	6839      	ldr	r1, [r7, #0]
 8000bce:	4805      	ldr	r0, [pc, #20]	; (8000be4 <NRF24_read_registerN+0x4c>)
 8000bd0:	f003 fa08 	bl	8003fe4 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	f7ff ff77 	bl	8000ac8 <NRF24_csn>
}
 8000bda:	bf00      	nop
 8000bdc:	3710      	adds	r7, #16
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20000230 	.word	0x20000230

08000be8 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	460a      	mov	r2, r1
 8000bf2:	71fb      	strb	r3, [r7, #7]
 8000bf4:	4613      	mov	r3, r2
 8000bf6:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	f7ff ff65 	bl	8000ac8 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	f043 0320 	orr.w	r3, r3, #32
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8000c08:	79bb      	ldrb	r3, [r7, #6]
 8000c0a:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8000c0c:	f107 010c 	add.w	r1, r7, #12
 8000c10:	2364      	movs	r3, #100	; 0x64
 8000c12:	2202      	movs	r2, #2
 8000c14:	4804      	ldr	r0, [pc, #16]	; (8000c28 <NRF24_write_register+0x40>)
 8000c16:	f003 f8a9 	bl	8003d6c <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000c1a:	2001      	movs	r0, #1
 8000c1c:	f7ff ff54 	bl	8000ac8 <NRF24_csn>
}
 8000c20:	bf00      	nop
 8000c22:	3710      	adds	r7, #16
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20000230 	.word	0x20000230

08000c2c <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	6039      	str	r1, [r7, #0]
 8000c36:	71fb      	strb	r3, [r7, #7]
 8000c38:	4613      	mov	r3, r2
 8000c3a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	f7ff ff43 	bl	8000ac8 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	f043 0320 	orr.w	r3, r3, #32
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000c4c:	f107 010c 	add.w	r1, r7, #12
 8000c50:	2364      	movs	r3, #100	; 0x64
 8000c52:	2201      	movs	r2, #1
 8000c54:	4808      	ldr	r0, [pc, #32]	; (8000c78 <NRF24_write_registerN+0x4c>)
 8000c56:	f003 f889 	bl	8003d6c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8000c5a:	79bb      	ldrb	r3, [r7, #6]
 8000c5c:	b29a      	uxth	r2, r3
 8000c5e:	2364      	movs	r3, #100	; 0x64
 8000c60:	6839      	ldr	r1, [r7, #0]
 8000c62:	4805      	ldr	r0, [pc, #20]	; (8000c78 <NRF24_write_registerN+0x4c>)
 8000c64:	f003 f882 	bl	8003d6c <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000c68:	2001      	movs	r0, #1
 8000c6a:	f7ff ff2d 	bl	8000ac8 <NRF24_csn>
}
 8000c6e:	bf00      	nop
 8000c70:	3710      	adds	r7, #16
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20000230 	.word	0x20000230

08000c7c <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	460b      	mov	r3, r1
 8000c86:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 8000c88:	2000      	movs	r0, #0
 8000c8a:	f7ff ff1d 	bl	8000ac8 <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 8000c8e:	23a0      	movs	r3, #160	; 0xa0
 8000c90:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 8000c92:	f107 010f 	add.w	r1, r7, #15
 8000c96:	2364      	movs	r3, #100	; 0x64
 8000c98:	2201      	movs	r2, #1
 8000c9a:	4808      	ldr	r0, [pc, #32]	; (8000cbc <NRF24_write_payload+0x40>)
 8000c9c:	f003 f866 	bl	8003d6c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 8000ca0:	78fb      	ldrb	r3, [r7, #3]
 8000ca2:	b29a      	uxth	r2, r3
 8000ca4:	2364      	movs	r3, #100	; 0x64
 8000ca6:	6879      	ldr	r1, [r7, #4]
 8000ca8:	4804      	ldr	r0, [pc, #16]	; (8000cbc <NRF24_write_payload+0x40>)
 8000caa:	f003 f85f 	bl	8003d6c <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000cae:	2001      	movs	r0, #1
 8000cb0:	f7ff ff0a 	bl	8000ac8 <NRF24_csn>
}
 8000cb4:	bf00      	nop
 8000cb6:	3710      	adds	r7, #16
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20000230 	.word	0x20000230

08000cc0 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8000cc4:	21ff      	movs	r1, #255	; 0xff
 8000cc6:	20e1      	movs	r0, #225	; 0xe1
 8000cc8:	f7ff ff8e 	bl	8000be8 <NRF24_write_register>
}
 8000ccc:	bf00      	nop
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8000cd4:	21ff      	movs	r1, #255	; 0xff
 8000cd6:	20e2      	movs	r0, #226	; 0xe2
 8000cd8:	f7ff ff86 	bl	8000be8 <NRF24_write_register>
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8000ce6:	2007      	movs	r0, #7
 8000ce8:	f7ff ff2e 	bl	8000b48 <NRF24_read_register>
 8000cec:	4603      	mov	r3, r0
 8000cee:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
	...

08000cfc <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8000cfc:	b082      	sub	sp, #8
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b084      	sub	sp, #16
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
 8000d06:	61fb      	str	r3, [r7, #28]
 8000d08:	460b      	mov	r3, r1
 8000d0a:	807b      	strh	r3, [r7, #2]
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8000d10:	4b66      	ldr	r3, [pc, #408]	; (8000eac <NRF24_begin+0x1b0>)
 8000d12:	4618      	mov	r0, r3
 8000d14:	f107 031c 	add.w	r3, r7, #28
 8000d18:	2258      	movs	r2, #88	; 0x58
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	f003 fef0 	bl	8004b00 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8000d20:	4a63      	ldr	r2, [pc, #396]	; (8000eb0 <NRF24_begin+0x1b4>)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8000d26:	4a63      	ldr	r2, [pc, #396]	; (8000eb4 <NRF24_begin+0x1b8>)
 8000d28:	887b      	ldrh	r3, [r7, #2]
 8000d2a:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000d2c:	4a62      	ldr	r2, [pc, #392]	; (8000eb8 <NRF24_begin+0x1bc>)
 8000d2e:	883b      	ldrh	r3, [r7, #0]
 8000d30:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 8000d32:	2001      	movs	r0, #1
 8000d34:	f7ff fec8 	bl	8000ac8 <NRF24_csn>
	NRF24_ce(0);
 8000d38:	2000      	movs	r0, #0
 8000d3a:	f7ff fee5 	bl	8000b08 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8000d3e:	2005      	movs	r0, #5
 8000d40:	f001 fbd8 	bl	80024f4 <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8000d44:	2108      	movs	r1, #8
 8000d46:	2000      	movs	r0, #0
 8000d48:	f7ff ff4e 	bl	8000be8 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000d4c:	213f      	movs	r1, #63	; 0x3f
 8000d4e:	2001      	movs	r0, #1
 8000d50:	f7ff ff4a 	bl	8000be8 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8000d54:	2103      	movs	r1, #3
 8000d56:	2002      	movs	r0, #2
 8000d58:	f7ff ff46 	bl	8000be8 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000d5c:	2103      	movs	r1, #3
 8000d5e:	2003      	movs	r0, #3
 8000d60:	f7ff ff42 	bl	8000be8 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8000d64:	2103      	movs	r1, #3
 8000d66:	2004      	movs	r0, #4
 8000d68:	f7ff ff3e 	bl	8000be8 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8000d6c:	2102      	movs	r1, #2
 8000d6e:	2005      	movs	r0, #5
 8000d70:	f7ff ff3a 	bl	8000be8 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8000d74:	210f      	movs	r1, #15
 8000d76:	2006      	movs	r0, #6
 8000d78:	f7ff ff36 	bl	8000be8 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8000d7c:	210e      	movs	r1, #14
 8000d7e:	2007      	movs	r0, #7
 8000d80:	f7ff ff32 	bl	8000be8 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8000d84:	2100      	movs	r1, #0
 8000d86:	2008      	movs	r0, #8
 8000d88:	f7ff ff2e 	bl	8000be8 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	2009      	movs	r0, #9
 8000d90:	f7ff ff2a 	bl	8000be8 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8000d94:	23e7      	movs	r3, #231	; 0xe7
 8000d96:	733b      	strb	r3, [r7, #12]
 8000d98:	23e7      	movs	r3, #231	; 0xe7
 8000d9a:	72fb      	strb	r3, [r7, #11]
 8000d9c:	23e7      	movs	r3, #231	; 0xe7
 8000d9e:	72bb      	strb	r3, [r7, #10]
 8000da0:	23e7      	movs	r3, #231	; 0xe7
 8000da2:	727b      	strb	r3, [r7, #9]
 8000da4:	23e7      	movs	r3, #231	; 0xe7
 8000da6:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8000da8:	f107 0308 	add.w	r3, r7, #8
 8000dac:	2205      	movs	r2, #5
 8000dae:	4619      	mov	r1, r3
 8000db0:	200a      	movs	r0, #10
 8000db2:	f7ff ff3b 	bl	8000c2c <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 8000db6:	23c2      	movs	r3, #194	; 0xc2
 8000db8:	733b      	strb	r3, [r7, #12]
 8000dba:	23c2      	movs	r3, #194	; 0xc2
 8000dbc:	72fb      	strb	r3, [r7, #11]
 8000dbe:	23c2      	movs	r3, #194	; 0xc2
 8000dc0:	72bb      	strb	r3, [r7, #10]
 8000dc2:	23c2      	movs	r3, #194	; 0xc2
 8000dc4:	727b      	strb	r3, [r7, #9]
 8000dc6:	23c2      	movs	r3, #194	; 0xc2
 8000dc8:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8000dca:	f107 0308 	add.w	r3, r7, #8
 8000dce:	2205      	movs	r2, #5
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	200b      	movs	r0, #11
 8000dd4:	f7ff ff2a 	bl	8000c2c <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8000dd8:	21c3      	movs	r1, #195	; 0xc3
 8000dda:	200c      	movs	r0, #12
 8000ddc:	f7ff ff04 	bl	8000be8 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8000de0:	21c4      	movs	r1, #196	; 0xc4
 8000de2:	200d      	movs	r0, #13
 8000de4:	f7ff ff00 	bl	8000be8 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8000de8:	21c5      	movs	r1, #197	; 0xc5
 8000dea:	200e      	movs	r0, #14
 8000dec:	f7ff fefc 	bl	8000be8 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8000df0:	21c6      	movs	r1, #198	; 0xc6
 8000df2:	200f      	movs	r0, #15
 8000df4:	f7ff fef8 	bl	8000be8 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8000df8:	23e7      	movs	r3, #231	; 0xe7
 8000dfa:	733b      	strb	r3, [r7, #12]
 8000dfc:	23e7      	movs	r3, #231	; 0xe7
 8000dfe:	72fb      	strb	r3, [r7, #11]
 8000e00:	23e7      	movs	r3, #231	; 0xe7
 8000e02:	72bb      	strb	r3, [r7, #10]
 8000e04:	23e7      	movs	r3, #231	; 0xe7
 8000e06:	727b      	strb	r3, [r7, #9]
 8000e08:	23e7      	movs	r3, #231	; 0xe7
 8000e0a:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8000e0c:	f107 0308 	add.w	r3, r7, #8
 8000e10:	2205      	movs	r2, #5
 8000e12:	4619      	mov	r1, r3
 8000e14:	2010      	movs	r0, #16
 8000e16:	f7ff ff09 	bl	8000c2c <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	2011      	movs	r0, #17
 8000e1e:	f7ff fee3 	bl	8000be8 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8000e22:	2100      	movs	r1, #0
 8000e24:	2012      	movs	r0, #18
 8000e26:	f7ff fedf 	bl	8000be8 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	2013      	movs	r0, #19
 8000e2e:	f7ff fedb 	bl	8000be8 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8000e32:	2100      	movs	r1, #0
 8000e34:	2014      	movs	r0, #20
 8000e36:	f7ff fed7 	bl	8000be8 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	2015      	movs	r0, #21
 8000e3e:	f7ff fed3 	bl	8000be8 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8000e42:	2100      	movs	r1, #0
 8000e44:	2016      	movs	r0, #22
 8000e46:	f7ff fecf 	bl	8000be8 <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 8000e4a:	f000 fa87 	bl	800135c <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8000e4e:	2100      	movs	r1, #0
 8000e50:	201c      	movs	r0, #28
 8000e52:	f7ff fec9 	bl	8000be8 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8000e56:	2100      	movs	r1, #0
 8000e58:	201d      	movs	r0, #29
 8000e5a:	f7ff fec5 	bl	8000be8 <NRF24_write_register>
	printRadioSettings();
 8000e5e:	f000 fa97 	bl	8001390 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8000e62:	210f      	movs	r1, #15
 8000e64:	200f      	movs	r0, #15
 8000e66:	f000 f8ad 	bl	8000fc4 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8000e6a:	2003      	movs	r0, #3
 8000e6c:	f000 f925 	bl	80010ba <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8000e70:	2001      	movs	r0, #1
 8000e72:	f000 f95b 	bl	800112c <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8000e76:	2002      	movs	r0, #2
 8000e78:	f000 f99e 	bl	80011b8 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8000e7c:	f000 f8f0 	bl	8001060 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8000e80:	2020      	movs	r0, #32
 8000e82:	f000 f8cf 	bl	8001024 <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 8000e86:	f000 fa60 	bl	800134a <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8000e8a:	204c      	movs	r0, #76	; 0x4c
 8000e8c:	f000 f8b5 	bl	8000ffa <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8000e90:	f7ff ff16 	bl	8000cc0 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000e94:	f7ff ff1c 	bl	8000cd0 <NRF24_flush_rx>
	
	NRF24_powerDown();
 8000e98:	f000 f9b6 	bl	8001208 <NRF24_powerDown>
	
}
 8000e9c:	bf00      	nop
 8000e9e:	3710      	adds	r7, #16
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ea6:	b002      	add	sp, #8
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	20000230 	.word	0x20000230
 8000eb0:	20000228 	.word	0x20000228
 8000eb4:	2000022c 	.word	0x2000022c
 8000eb8:	2000022e 	.word	0x2000022e

08000ebc <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 8000ec0:	2000      	movs	r0, #0
 8000ec2:	f7ff fe21 	bl	8000b08 <NRF24_ce>
	NRF24_flush_tx();
 8000ec6:	f7ff fefb 	bl	8000cc0 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000eca:	f7ff ff01 	bl	8000cd0 <NRF24_flush_rx>
}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
	...

08000ed4 <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	460b      	mov	r3, r1
 8000ede:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 8000ee0:	f000 fa33 	bl	800134a <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 8000ee4:	78fb      	ldrb	r3, [r7, #3]
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f000 f9cc 	bl	8001286 <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 8000eee:	f001 faf7 	bl	80024e0 <HAL_GetTick>
 8000ef2:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 8000ef4:	230a      	movs	r3, #10
 8000ef6:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 8000ef8:	f107 030d 	add.w	r3, r7, #13
 8000efc:	2201      	movs	r2, #1
 8000efe:	4619      	mov	r1, r3
 8000f00:	2008      	movs	r0, #8
 8000f02:	f7ff fe49 	bl	8000b98 <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 8000f06:	f7ff feeb 	bl	8000ce0 <NRF24_get_status>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 8000f0e:	7bfb      	ldrb	r3, [r7, #15]
 8000f10:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d107      	bne.n	8000f28 <NRF24_write+0x54>
 8000f18:	f001 fae2 	bl	80024e0 <HAL_GetTick>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d8e7      	bhi.n	8000ef8 <NRF24_write+0x24>
	
//	printConfigReg();
//	printStatusReg();
	
	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 8000f28:	f107 010b 	add.w	r1, r7, #11
 8000f2c:	f107 030c 	add.w	r3, r7, #12
 8000f30:	4a0c      	ldr	r2, [pc, #48]	; (8000f64 <NRF24_write+0x90>)
 8000f32:	4618      	mov	r0, r3
 8000f34:	f000 f9d6 	bl	80012e4 <NRF24_whatHappened>
	retStatus = tx_ok;
 8000f38:	7b3b      	ldrb	r3, [r7, #12]
 8000f3a:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 8000f3c:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <NRF24_write+0x90>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d005      	beq.n	8000f50 <NRF24_write+0x7c>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 8000f44:	f000 f884 	bl	8001050 <NRF24_getDynamicPayloadSize>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <NRF24_write+0x94>)
 8000f4e:	701a      	strb	r2, [r3, #0]
	}
	
	//Power down
	NRF24_available();
 8000f50:	f000 f80c 	bl	8000f6c <NRF24_available>
	NRF24_flush_tx();
 8000f54:	f7ff feb4 	bl	8000cc0 <NRF24_flush_tx>
	return retStatus;
 8000f58:	7bbb      	ldrb	r3, [r7, #14]
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3718      	adds	r7, #24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000220 	.word	0x20000220
 8000f68:	20000221 	.word	0x20000221

08000f6c <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8000f70:	2000      	movs	r0, #0
 8000f72:	f000 f958 	bl	8001226 <NRF24_availablePipe>
 8000f76:	4603      	mov	r3, r0
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <NRF24_openWritingPipe>:
	NRF24_getDynamicPayloadSize();
	return rxStatus;
}
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 8000f86:	463b      	mov	r3, r7
 8000f88:	2205      	movs	r2, #5
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	200a      	movs	r0, #10
 8000f8e:	f7ff fe4d 	bl	8000c2c <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 8000f92:	463b      	mov	r3, r7
 8000f94:	2205      	movs	r2, #5
 8000f96:	4619      	mov	r1, r3
 8000f98:	2010      	movs	r0, #16
 8000f9a:	f7ff fe47 	bl	8000c2c <NRF24_write_registerN>
	
	const uint8_t max_payload_size = 32;
 8000f9e:	2320      	movs	r3, #32
 8000fa0:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 8000fa2:	4b07      	ldr	r3, [pc, #28]	; (8000fc0 <NRF24_openWritingPipe+0x44>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	7bfa      	ldrb	r2, [r7, #15]
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	bf28      	it	cs
 8000fac:	4613      	movcs	r3, r2
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	2011      	movs	r0, #17
 8000fb4:	f7ff fe18 	bl	8000be8 <NRF24_write_register>
}
 8000fb8:	bf00      	nop
 8000fba:	3710      	adds	r7, #16
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20000222 	.word	0x20000222

08000fc4 <NRF24_setRetries>:
	}
	
}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	460a      	mov	r2, r1
 8000fce:	71fb      	strb	r3, [r7, #7]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	011b      	lsls	r3, r3, #4
 8000fd8:	b25a      	sxtb	r2, r3
 8000fda:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000fde:	f003 030f 	and.w	r3, r3, #15
 8000fe2:	b25b      	sxtb	r3, r3
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	b25b      	sxtb	r3, r3
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	4619      	mov	r1, r3
 8000fec:	2004      	movs	r0, #4
 8000fee:	f7ff fdfb 	bl	8000be8 <NRF24_write_register>
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b084      	sub	sp, #16
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	4603      	mov	r3, r0
 8001002:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8001004:	237f      	movs	r3, #127	; 0x7f
 8001006:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8001008:	7bfa      	ldrb	r2, [r7, #15]
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	4293      	cmp	r3, r2
 800100e:	bf28      	it	cs
 8001010:	4613      	movcs	r3, r2
 8001012:	b2db      	uxtb	r3, r3
 8001014:	4619      	mov	r1, r3
 8001016:	2005      	movs	r0, #5
 8001018:	f7ff fde6 	bl	8000be8 <NRF24_write_register>
}
 800101c:	bf00      	nop
 800101e:	3710      	adds	r7, #16
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 800102e:	2320      	movs	r3, #32
 8001030:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8001032:	7bfa      	ldrb	r2, [r7, #15]
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	4293      	cmp	r3, r2
 8001038:	bf28      	it	cs
 800103a:	4613      	movcs	r3, r2
 800103c:	b2da      	uxtb	r2, r3
 800103e:	4b03      	ldr	r3, [pc, #12]	; (800104c <NRF24_setPayloadSize+0x28>)
 8001040:	701a      	strb	r2, [r3, #0]
}
 8001042:	bf00      	nop
 8001044:	3714      	adds	r7, #20
 8001046:	46bd      	mov	sp, r7
 8001048:	bc80      	pop	{r7}
 800104a:	4770      	bx	lr
 800104c:	20000222 	.word	0x20000222

08001050 <NRF24_getDynamicPayloadSize>:
{
	return payload_size;
}
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8001054:	2060      	movs	r0, #96	; 0x60
 8001056:	f7ff fd77 	bl	8000b48 <NRF24_read_register>
 800105a:	4603      	mov	r3, r0
}
 800105c:	4618      	mov	r0, r3
 800105e:	bd80      	pop	{r7, pc}

08001060 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;
	
}
void NRF24_disableDynamicPayloads(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8001064:	201d      	movs	r0, #29
 8001066:	f7ff fd6f 	bl	8000b48 <NRF24_read_register>
 800106a:	4603      	mov	r3, r0
 800106c:	f023 0304 	bic.w	r3, r3, #4
 8001070:	b2db      	uxtb	r3, r3
 8001072:	4619      	mov	r1, r3
 8001074:	201d      	movs	r0, #29
 8001076:	f7ff fdb7 	bl	8000be8 <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 800107a:	2100      	movs	r1, #0
 800107c:	201c      	movs	r0, #28
 800107e:	f7ff fdb3 	bl	8000be8 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8001082:	4b02      	ldr	r3, [pc, #8]	; (800108c <NRF24_disableDynamicPayloads+0x2c>)
 8001084:	2200      	movs	r2, #0
 8001086:	701a      	strb	r2, [r3, #0]
}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000223 	.word	0x20000223

08001090 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d004      	beq.n	80010aa <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 80010a0:	213f      	movs	r1, #63	; 0x3f
 80010a2:	2001      	movs	r0, #1
 80010a4:	f7ff fda0 	bl	8000be8 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 80010a8:	e003      	b.n	80010b2 <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 80010aa:	2100      	movs	r1, #0
 80010ac:	2001      	movs	r0, #1
 80010ae:	f7ff fd9b 	bl	8000be8 <NRF24_write_register>
}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b084      	sub	sp, #16
 80010be:	af00      	add	r7, sp, #0
 80010c0:	4603      	mov	r3, r0
 80010c2:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80010c4:	2006      	movs	r0, #6
 80010c6:	f7ff fd3f 	bl	8000b48 <NRF24_read_register>
 80010ca:	4603      	mov	r3, r0
 80010cc:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
 80010d0:	f023 0306 	bic.w	r3, r3, #6
 80010d4:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	2b03      	cmp	r3, #3
 80010da:	d104      	bne.n	80010e6 <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80010dc:	7bfb      	ldrb	r3, [r7, #15]
 80010de:	f043 0306 	orr.w	r3, r3, #6
 80010e2:	73fb      	strb	r3, [r7, #15]
 80010e4:	e019      	b.n	800111a <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d104      	bne.n	80010f6 <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 80010ec:	7bfb      	ldrb	r3, [r7, #15]
 80010ee:	f043 0304 	orr.w	r3, r3, #4
 80010f2:	73fb      	strb	r3, [r7, #15]
 80010f4:	e011      	b.n	800111a <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d104      	bne.n	8001106 <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 80010fc:	7bfb      	ldrb	r3, [r7, #15]
 80010fe:	f043 0302 	orr.w	r3, r3, #2
 8001102:	73fb      	strb	r3, [r7, #15]
 8001104:	e009      	b.n	800111a <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d006      	beq.n	800111a <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	2b04      	cmp	r3, #4
 8001110:	d103      	bne.n	800111a <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8001112:	7bfb      	ldrb	r3, [r7, #15]
 8001114:	f043 0306 	orr.w	r3, r3, #6
 8001118:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 800111a:	7bfb      	ldrb	r3, [r7, #15]
 800111c:	4619      	mov	r1, r3
 800111e:	2006      	movs	r0, #6
 8001120:	f7ff fd62 	bl	8000be8 <NRF24_write_register>
}
 8001124:	bf00      	nop
 8001126:	3710      	adds	r7, #16
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8001136:	2300      	movs	r3, #0
 8001138:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 800113a:	2006      	movs	r0, #6
 800113c:	f7ff fd04 	bl	8000b48 <NRF24_read_register>
 8001140:	4603      	mov	r3, r0
 8001142:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8001144:	4b1b      	ldr	r3, [pc, #108]	; (80011b4 <NRF24_setDataRate+0x88>)
 8001146:	2200      	movs	r2, #0
 8001148:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 800114a:	7bbb      	ldrb	r3, [r7, #14]
 800114c:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8001150:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	2b02      	cmp	r3, #2
 8001156:	d107      	bne.n	8001168 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8001158:	4b16      	ldr	r3, [pc, #88]	; (80011b4 <NRF24_setDataRate+0x88>)
 800115a:	2200      	movs	r2, #0
 800115c:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 800115e:	7bbb      	ldrb	r3, [r7, #14]
 8001160:	f043 0320 	orr.w	r3, r3, #32
 8001164:	73bb      	strb	r3, [r7, #14]
 8001166:	e00d      	b.n	8001184 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8001168:	79fb      	ldrb	r3, [r7, #7]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d107      	bne.n	800117e <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 800116e:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <NRF24_setDataRate+0x88>)
 8001170:	2201      	movs	r2, #1
 8001172:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8001174:	7bbb      	ldrb	r3, [r7, #14]
 8001176:	f043 0308 	orr.w	r3, r3, #8
 800117a:	73bb      	strb	r3, [r7, #14]
 800117c:	e002      	b.n	8001184 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 800117e:	4b0d      	ldr	r3, [pc, #52]	; (80011b4 <NRF24_setDataRate+0x88>)
 8001180:	2200      	movs	r2, #0
 8001182:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8001184:	7bbb      	ldrb	r3, [r7, #14]
 8001186:	4619      	mov	r1, r3
 8001188:	2006      	movs	r0, #6
 800118a:	f7ff fd2d 	bl	8000be8 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 800118e:	2006      	movs	r0, #6
 8001190:	f7ff fcda 	bl	8000b48 <NRF24_read_register>
 8001194:	4603      	mov	r3, r0
 8001196:	461a      	mov	r2, r3
 8001198:	7bbb      	ldrb	r3, [r7, #14]
 800119a:	4293      	cmp	r3, r2
 800119c:	d102      	bne.n	80011a4 <NRF24_setDataRate+0x78>
  {
    result = true;
 800119e:	2301      	movs	r3, #1
 80011a0:	73fb      	strb	r3, [r7, #15]
 80011a2:	e002      	b.n	80011aa <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 80011a4:	4b03      	ldr	r3, [pc, #12]	; (80011b4 <NRF24_setDataRate+0x88>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	701a      	strb	r2, [r3, #0]
  }

  return result;
 80011aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3710      	adds	r7, #16
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	20000224 	.word	0x20000224

080011b8 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 80011c2:	2000      	movs	r0, #0
 80011c4:	f7ff fcc0 	bl	8000b48 <NRF24_read_register>
 80011c8:	4603      	mov	r3, r0
 80011ca:	f023 030c 	bic.w	r3, r3, #12
 80011ce:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d00f      	beq.n	80011f6 <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d104      	bne.n	80011e6 <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 80011dc:	7bfb      	ldrb	r3, [r7, #15]
 80011de:	f043 0308 	orr.w	r3, r3, #8
 80011e2:	73fb      	strb	r3, [r7, #15]
 80011e4:	e007      	b.n	80011f6 <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 80011e6:	7bfb      	ldrb	r3, [r7, #15]
 80011e8:	f043 0308 	orr.w	r3, r3, #8
 80011ec:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 80011ee:	7bfb      	ldrb	r3, [r7, #15]
 80011f0:	f043 0304 	orr.w	r3, r3, #4
 80011f4:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 80011f6:	7bfb      	ldrb	r3, [r7, #15]
 80011f8:	4619      	mov	r1, r3
 80011fa:	2000      	movs	r0, #0
 80011fc:	f7ff fcf4 	bl	8000be8 <NRF24_write_register>
}
 8001200:	bf00      	nop
 8001202:	3710      	adds	r7, #16
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}

08001208 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 800120c:	2000      	movs	r0, #0
 800120e:	f7ff fc9b 	bl	8000b48 <NRF24_read_register>
 8001212:	4603      	mov	r3, r0
 8001214:	f023 0302 	bic.w	r3, r3, #2
 8001218:	b2db      	uxtb	r3, r3
 800121a:	4619      	mov	r1, r3
 800121c:	2000      	movs	r0, #0
 800121e:	f7ff fce3 	bl	8000be8 <NRF24_write_register>
}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}

08001226 <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b084      	sub	sp, #16
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 800122e:	f7ff fd57 	bl	8000ce0 <NRF24_get_status>
 8001232:	4603      	mov	r3, r0
 8001234:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8001236:	7bfb      	ldrb	r3, [r7, #15]
 8001238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800123c:	2b00      	cmp	r3, #0
 800123e:	bf14      	ite	ne
 8001240:	2301      	movne	r3, #1
 8001242:	2300      	moveq	r3, #0
 8001244:	73bb      	strb	r3, [r7, #14]

  if (result)
 8001246:	7bbb      	ldrb	r3, [r7, #14]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d017      	beq.n	800127c <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d007      	beq.n	8001262 <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8001252:	7bfb      	ldrb	r3, [r7, #15]
 8001254:	085b      	lsrs	r3, r3, #1
 8001256:	b2db      	uxtb	r3, r3
 8001258:	f003 0307 	and.w	r3, r3, #7
 800125c:	b2da      	uxtb	r2, r3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8001262:	2140      	movs	r1, #64	; 0x40
 8001264:	2007      	movs	r0, #7
 8001266:	f7ff fcbf 	bl	8000be8 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 800126a:	7bfb      	ldrb	r3, [r7, #15]
 800126c:	f003 0320 	and.w	r3, r3, #32
 8001270:	2b00      	cmp	r3, #0
 8001272:	d003      	beq.n	800127c <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8001274:	2120      	movs	r1, #32
 8001276:	2007      	movs	r0, #7
 8001278:	f7ff fcb6 	bl	8000be8 <NRF24_write_register>
    }
  }
  return result;
 800127c:	7bbb      	ldrb	r3, [r7, #14]
}
 800127e:	4618      	mov	r0, r3
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 8001286:	b580      	push	{r7, lr}
 8001288:	b082      	sub	sp, #8
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
 800128e:	460b      	mov	r3, r1
 8001290:	70fb      	strb	r3, [r7, #3]
  // Transmitter power-up
  NRF24_ce(0);
 8001292:	2000      	movs	r0, #0
 8001294:	f7ff fc38 	bl	8000b08 <NRF24_ce>
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 8001298:	2000      	movs	r0, #0
 800129a:	f7ff fc55 	bl	8000b48 <NRF24_read_register>
 800129e:	4603      	mov	r3, r0
 80012a0:	f043 0302 	orr.w	r3, r3, #2
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	f023 0301 	bic.w	r3, r3, #1
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	4619      	mov	r1, r3
 80012ae:	2000      	movs	r0, #0
 80012b0:	f7ff fc9a 	bl	8000be8 <NRF24_write_register>
  NRF24_ce(1);
 80012b4:	2001      	movs	r0, #1
 80012b6:	f7ff fc27 	bl	8000b08 <NRF24_ce>
  NRF24_DelayMicroSeconds(150);
 80012ba:	2096      	movs	r0, #150	; 0x96
 80012bc:	f7ff fbe4 	bl	8000a88 <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 80012c0:	78fb      	ldrb	r3, [r7, #3]
 80012c2:	4619      	mov	r1, r3
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f7ff fcd9 	bl	8000c7c <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 80012ca:	2001      	movs	r0, #1
 80012cc:	f7ff fc1c 	bl	8000b08 <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 80012d0:	200f      	movs	r0, #15
 80012d2:	f7ff fbd9 	bl	8000a88 <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 80012d6:	2000      	movs	r0, #0
 80012d8:	f7ff fc16 	bl	8000b08 <NRF24_ce>
}
 80012dc:	bf00      	nop
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 80012f0:	f7ff fcf6 	bl	8000ce0 <NRF24_get_status>
 80012f4:	4603      	mov	r3, r0
 80012f6:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	2200      	movs	r2, #0
 80012fc:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 80012fe:	2170      	movs	r1, #112	; 0x70
 8001300:	2007      	movs	r0, #7
 8001302:	f7ff fc71 	bl	8000be8 <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 8001306:	7dfb      	ldrb	r3, [r7, #23]
 8001308:	f003 0320 	and.w	r3, r3, #32
 800130c:	2b00      	cmp	r3, #0
 800130e:	bf14      	ite	ne
 8001310:	2301      	movne	r3, #1
 8001312:	2300      	moveq	r3, #0
 8001314:	b2da      	uxtb	r2, r3
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 800131a:	7dfb      	ldrb	r3, [r7, #23]
 800131c:	f003 0310 	and.w	r3, r3, #16
 8001320:	2b00      	cmp	r3, #0
 8001322:	bf14      	ite	ne
 8001324:	2301      	movne	r3, #1
 8001326:	2300      	moveq	r3, #0
 8001328:	b2da      	uxtb	r2, r3
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 800132e:	7dfb      	ldrb	r3, [r7, #23]
 8001330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001334:	2b00      	cmp	r3, #0
 8001336:	bf14      	ite	ne
 8001338:	2301      	movne	r3, #1
 800133a:	2300      	moveq	r3, #0
 800133c:	b2da      	uxtb	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	701a      	strb	r2, [r3, #0]
}
 8001342:	bf00      	nop
 8001344:	3718      	adds	r7, #24
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 800134e:	2170      	movs	r1, #112	; 0x70
 8001350:	2007      	movs	r0, #7
 8001352:	f7ff fc49 	bl	8000be8 <NRF24_write_register>
}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
	...

0800135c <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8001362:	2000      	movs	r0, #0
 8001364:	f7ff fbb0 	bl	8000ac8 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8001368:	2350      	movs	r3, #80	; 0x50
 800136a:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 800136c:	2373      	movs	r3, #115	; 0x73
 800136e:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8001370:	1d39      	adds	r1, r7, #4
 8001372:	2364      	movs	r3, #100	; 0x64
 8001374:	2202      	movs	r2, #2
 8001376:	4805      	ldr	r0, [pc, #20]	; (800138c <NRF24_ACTIVATE_cmd+0x30>)
 8001378:	f002 fcf8 	bl	8003d6c <HAL_SPI_Transmit>
	NRF24_csn(1);
 800137c:	2001      	movs	r0, #1
 800137e:	f7ff fba3 	bl	8000ac8 <NRF24_csn>
}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000230 	.word	0x20000230

08001390 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8001390:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001392:	b0a1      	sub	sp, #132	; 0x84
 8001394:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8001396:	f107 0308 	add.w	r3, r7, #8
 800139a:	49c3      	ldr	r1, [pc, #780]	; (80016a8 <printRadioSettings+0x318>)
 800139c:	4618      	mov	r0, r3
 800139e:	f004 f825 	bl	80053ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80013a2:	f107 0308 	add.w	r3, r7, #8
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7fe fed2 	bl	8000150 <strlen>
 80013ac:	4603      	mov	r3, r0
 80013ae:	b29a      	uxth	r2, r3
 80013b0:	f107 0108 	add.w	r1, r7, #8
 80013b4:	230a      	movs	r3, #10
 80013b6:	48bd      	ldr	r0, [pc, #756]	; (80016ac <printRadioSettings+0x31c>)
 80013b8:	f003 fa0d 	bl	80047d6 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 80013bc:	2000      	movs	r0, #0
 80013be:	f7ff fbc3 	bl	8000b48 <NRF24_read_register>
 80013c2:	4603      	mov	r3, r0
 80013c4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 80013c8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013cc:	f003 0308 	and.w	r3, r3, #8
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d013      	beq.n	80013fc <printRadioSettings+0x6c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 80013d4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013d8:	f003 0304 	and.w	r3, r3, #4
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d006      	beq.n	80013ee <printRadioSettings+0x5e>
 80013e0:	f107 0308 	add.w	r3, r7, #8
 80013e4:	49b2      	ldr	r1, [pc, #712]	; (80016b0 <printRadioSettings+0x320>)
 80013e6:	4618      	mov	r0, r3
 80013e8:	f004 f800 	bl	80053ec <siprintf>
 80013ec:	e00c      	b.n	8001408 <printRadioSettings+0x78>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 80013ee:	f107 0308 	add.w	r3, r7, #8
 80013f2:	49b0      	ldr	r1, [pc, #704]	; (80016b4 <printRadioSettings+0x324>)
 80013f4:	4618      	mov	r0, r3
 80013f6:	f003 fff9 	bl	80053ec <siprintf>
 80013fa:	e005      	b.n	8001408 <printRadioSettings+0x78>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 80013fc:	f107 0308 	add.w	r3, r7, #8
 8001400:	49ad      	ldr	r1, [pc, #692]	; (80016b8 <printRadioSettings+0x328>)
 8001402:	4618      	mov	r0, r3
 8001404:	f003 fff2 	bl	80053ec <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001408:	f107 0308 	add.w	r3, r7, #8
 800140c:	4618      	mov	r0, r3
 800140e:	f7fe fe9f 	bl	8000150 <strlen>
 8001412:	4603      	mov	r3, r0
 8001414:	b29a      	uxth	r2, r3
 8001416:	f107 0108 	add.w	r1, r7, #8
 800141a:	230a      	movs	r3, #10
 800141c:	48a3      	ldr	r0, [pc, #652]	; (80016ac <printRadioSettings+0x31c>)
 800141e:	f003 f9da 	bl	80047d6 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8001422:	2001      	movs	r0, #1
 8001424:	f7ff fb90 	bl	8000b48 <NRF24_read_register>
 8001428:	4603      	mov	r3, r0
 800142a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800142e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001432:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001436:	2b00      	cmp	r3, #0
 8001438:	bfcc      	ite	gt
 800143a:	2301      	movgt	r3, #1
 800143c:	2300      	movle	r3, #0
 800143e:	b2db      	uxtb	r3, r3
 8001440:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001442:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001446:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800144a:	2b00      	cmp	r3, #0
 800144c:	bfcc      	ite	gt
 800144e:	2301      	movgt	r3, #1
 8001450:	2300      	movle	r3, #0
 8001452:	b2db      	uxtb	r3, r3
 8001454:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001456:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800145a:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800145e:	2b00      	cmp	r3, #0
 8001460:	bfcc      	ite	gt
 8001462:	2301      	movgt	r3, #1
 8001464:	2300      	movle	r3, #0
 8001466:	b2db      	uxtb	r3, r3
 8001468:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800146a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800146e:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001472:	2b00      	cmp	r3, #0
 8001474:	bfcc      	ite	gt
 8001476:	2301      	movgt	r3, #1
 8001478:	2300      	movle	r3, #0
 800147a:	b2db      	uxtb	r3, r3
 800147c:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800147e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001482:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001486:	2b00      	cmp	r3, #0
 8001488:	bfcc      	ite	gt
 800148a:	2301      	movgt	r3, #1
 800148c:	2300      	movle	r3, #0
 800148e:	b2db      	uxtb	r3, r3
 8001490:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001492:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001496:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800149a:	2b00      	cmp	r3, #0
 800149c:	bfcc      	ite	gt
 800149e:	2301      	movgt	r3, #1
 80014a0:	2300      	movle	r3, #0
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	f107 0008 	add.w	r0, r7, #8
 80014a8:	9303      	str	r3, [sp, #12]
 80014aa:	9402      	str	r4, [sp, #8]
 80014ac:	9101      	str	r1, [sp, #4]
 80014ae:	9200      	str	r2, [sp, #0]
 80014b0:	4633      	mov	r3, r6
 80014b2:	462a      	mov	r2, r5
 80014b4:	4981      	ldr	r1, [pc, #516]	; (80016bc <printRadioSettings+0x32c>)
 80014b6:	f003 ff99 	bl	80053ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014ba:	f107 0308 	add.w	r3, r7, #8
 80014be:	4618      	mov	r0, r3
 80014c0:	f7fe fe46 	bl	8000150 <strlen>
 80014c4:	4603      	mov	r3, r0
 80014c6:	b29a      	uxth	r2, r3
 80014c8:	f107 0108 	add.w	r1, r7, #8
 80014cc:	230a      	movs	r3, #10
 80014ce:	4877      	ldr	r0, [pc, #476]	; (80016ac <printRadioSettings+0x31c>)
 80014d0:	f003 f981 	bl	80047d6 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 80014d4:	2002      	movs	r0, #2
 80014d6:	f7ff fb37 	bl	8000b48 <NRF24_read_register>
 80014da:	4603      	mov	r3, r0
 80014dc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80014e0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80014e4:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	bfcc      	ite	gt
 80014ec:	2301      	movgt	r3, #1
 80014ee:	2300      	movle	r3, #0
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80014f4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80014f8:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	bfcc      	ite	gt
 8001500:	2301      	movgt	r3, #1
 8001502:	2300      	movle	r3, #0
 8001504:	b2db      	uxtb	r3, r3
 8001506:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001508:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800150c:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001510:	2b00      	cmp	r3, #0
 8001512:	bfcc      	ite	gt
 8001514:	2301      	movgt	r3, #1
 8001516:	2300      	movle	r3, #0
 8001518:	b2db      	uxtb	r3, r3
 800151a:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800151c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001520:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001524:	2b00      	cmp	r3, #0
 8001526:	bfcc      	ite	gt
 8001528:	2301      	movgt	r3, #1
 800152a:	2300      	movle	r3, #0
 800152c:	b2db      	uxtb	r3, r3
 800152e:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001530:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001534:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001538:	2b00      	cmp	r3, #0
 800153a:	bfcc      	ite	gt
 800153c:	2301      	movgt	r3, #1
 800153e:	2300      	movle	r3, #0
 8001540:	b2db      	uxtb	r3, r3
 8001542:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001544:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001548:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800154c:	2b00      	cmp	r3, #0
 800154e:	bfcc      	ite	gt
 8001550:	2301      	movgt	r3, #1
 8001552:	2300      	movle	r3, #0
 8001554:	b2db      	uxtb	r3, r3
 8001556:	f107 0008 	add.w	r0, r7, #8
 800155a:	9303      	str	r3, [sp, #12]
 800155c:	9402      	str	r4, [sp, #8]
 800155e:	9101      	str	r1, [sp, #4]
 8001560:	9200      	str	r2, [sp, #0]
 8001562:	4633      	mov	r3, r6
 8001564:	462a      	mov	r2, r5
 8001566:	4956      	ldr	r1, [pc, #344]	; (80016c0 <printRadioSettings+0x330>)
 8001568:	f003 ff40 	bl	80053ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800156c:	f107 0308 	add.w	r3, r7, #8
 8001570:	4618      	mov	r0, r3
 8001572:	f7fe fded 	bl	8000150 <strlen>
 8001576:	4603      	mov	r3, r0
 8001578:	b29a      	uxth	r2, r3
 800157a:	f107 0108 	add.w	r1, r7, #8
 800157e:	230a      	movs	r3, #10
 8001580:	484a      	ldr	r0, [pc, #296]	; (80016ac <printRadioSettings+0x31c>)
 8001582:	f003 f928 	bl	80047d6 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8001586:	2003      	movs	r0, #3
 8001588:	f7ff fade 	bl	8000b48 <NRF24_read_register>
 800158c:	4603      	mov	r3, r0
 800158e:	f003 0303 	and.w	r3, r3, #3
 8001592:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 8001596:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800159a:	3302      	adds	r3, #2
 800159c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 80015a0:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80015a4:	f107 0308 	add.w	r3, r7, #8
 80015a8:	4946      	ldr	r1, [pc, #280]	; (80016c4 <printRadioSettings+0x334>)
 80015aa:	4618      	mov	r0, r3
 80015ac:	f003 ff1e 	bl	80053ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015b0:	f107 0308 	add.w	r3, r7, #8
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7fe fdcb 	bl	8000150 <strlen>
 80015ba:	4603      	mov	r3, r0
 80015bc:	b29a      	uxth	r2, r3
 80015be:	f107 0108 	add.w	r1, r7, #8
 80015c2:	230a      	movs	r3, #10
 80015c4:	4839      	ldr	r0, [pc, #228]	; (80016ac <printRadioSettings+0x31c>)
 80015c6:	f003 f906 	bl	80047d6 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 80015ca:	2005      	movs	r0, #5
 80015cc:	f7ff fabc 	bl	8000b48 <NRF24_read_register>
 80015d0:	4603      	mov	r3, r0
 80015d2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 80015d6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80015de:	f107 0308 	add.w	r3, r7, #8
 80015e2:	4939      	ldr	r1, [pc, #228]	; (80016c8 <printRadioSettings+0x338>)
 80015e4:	4618      	mov	r0, r3
 80015e6:	f003 ff01 	bl	80053ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015ea:	f107 0308 	add.w	r3, r7, #8
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7fe fdae 	bl	8000150 <strlen>
 80015f4:	4603      	mov	r3, r0
 80015f6:	b29a      	uxth	r2, r3
 80015f8:	f107 0108 	add.w	r1, r7, #8
 80015fc:	230a      	movs	r3, #10
 80015fe:	482b      	ldr	r0, [pc, #172]	; (80016ac <printRadioSettings+0x31c>)
 8001600:	f003 f8e9 	bl	80047d6 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8001604:	2006      	movs	r0, #6
 8001606:	f7ff fa9f 	bl	8000b48 <NRF24_read_register>
 800160a:	4603      	mov	r3, r0
 800160c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8001610:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001614:	f003 0308 	and.w	r3, r3, #8
 8001618:	2b00      	cmp	r3, #0
 800161a:	d006      	beq.n	800162a <printRadioSettings+0x29a>
 800161c:	f107 0308 	add.w	r3, r7, #8
 8001620:	492a      	ldr	r1, [pc, #168]	; (80016cc <printRadioSettings+0x33c>)
 8001622:	4618      	mov	r0, r3
 8001624:	f003 fee2 	bl	80053ec <siprintf>
 8001628:	e005      	b.n	8001636 <printRadioSettings+0x2a6>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 800162a:	f107 0308 	add.w	r3, r7, #8
 800162e:	4928      	ldr	r1, [pc, #160]	; (80016d0 <printRadioSettings+0x340>)
 8001630:	4618      	mov	r0, r3
 8001632:	f003 fedb 	bl	80053ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001636:	f107 0308 	add.w	r3, r7, #8
 800163a:	4618      	mov	r0, r3
 800163c:	f7fe fd88 	bl	8000150 <strlen>
 8001640:	4603      	mov	r3, r0
 8001642:	b29a      	uxth	r2, r3
 8001644:	f107 0108 	add.w	r1, r7, #8
 8001648:	230a      	movs	r3, #10
 800164a:	4818      	ldr	r0, [pc, #96]	; (80016ac <printRadioSettings+0x31c>)
 800164c:	f003 f8c3 	bl	80047d6 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8001650:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001654:	f003 0306 	and.w	r3, r3, #6
 8001658:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 800165c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001660:	085b      	lsrs	r3, r3, #1
 8001662:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8001666:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800166a:	2b00      	cmp	r3, #0
 800166c:	d106      	bne.n	800167c <printRadioSettings+0x2ec>
 800166e:	f107 0308 	add.w	r3, r7, #8
 8001672:	4918      	ldr	r1, [pc, #96]	; (80016d4 <printRadioSettings+0x344>)
 8001674:	4618      	mov	r0, r3
 8001676:	f003 feb9 	bl	80053ec <siprintf>
 800167a:	e03b      	b.n	80016f4 <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 800167c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001680:	2b01      	cmp	r3, #1
 8001682:	d106      	bne.n	8001692 <printRadioSettings+0x302>
 8001684:	f107 0308 	add.w	r3, r7, #8
 8001688:	4913      	ldr	r1, [pc, #76]	; (80016d8 <printRadioSettings+0x348>)
 800168a:	4618      	mov	r0, r3
 800168c:	f003 feae 	bl	80053ec <siprintf>
 8001690:	e030      	b.n	80016f4 <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8001692:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001696:	2b02      	cmp	r3, #2
 8001698:	d122      	bne.n	80016e0 <printRadioSettings+0x350>
 800169a:	f107 0308 	add.w	r3, r7, #8
 800169e:	490f      	ldr	r1, [pc, #60]	; (80016dc <printRadioSettings+0x34c>)
 80016a0:	4618      	mov	r0, r3
 80016a2:	f003 fea3 	bl	80053ec <siprintf>
 80016a6:	e025      	b.n	80016f4 <printRadioSettings+0x364>
 80016a8:	08007858 	.word	0x08007858
 80016ac:	20000288 	.word	0x20000288
 80016b0:	0800788c 	.word	0x0800788c
 80016b4:	080078a8 	.word	0x080078a8
 80016b8:	080078c4 	.word	0x080078c4
 80016bc:	080078d8 	.word	0x080078d8
 80016c0:	0800791c 	.word	0x0800791c
 80016c4:	08007968 	.word	0x08007968
 80016c8:	08007984 	.word	0x08007984
 80016cc:	08007998 	.word	0x08007998
 80016d0:	080079b0 	.word	0x080079b0
 80016d4:	080079c8 	.word	0x080079c8
 80016d8:	080079dc 	.word	0x080079dc
 80016dc:	080079f0 	.word	0x080079f0
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 80016e0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80016e4:	2b03      	cmp	r3, #3
 80016e6:	d105      	bne.n	80016f4 <printRadioSettings+0x364>
 80016e8:	f107 0308 	add.w	r3, r7, #8
 80016ec:	49d7      	ldr	r1, [pc, #860]	; (8001a4c <printRadioSettings+0x6bc>)
 80016ee:	4618      	mov	r0, r3
 80016f0:	f003 fe7c 	bl	80053ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016f4:	f107 0308 	add.w	r3, r7, #8
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7fe fd29 	bl	8000150 <strlen>
 80016fe:	4603      	mov	r3, r0
 8001700:	b29a      	uxth	r2, r3
 8001702:	f107 0108 	add.w	r1, r7, #8
 8001706:	230a      	movs	r3, #10
 8001708:	48d1      	ldr	r0, [pc, #836]	; (8001a50 <printRadioSettings+0x6c0>)
 800170a:	f003 f864 	bl	80047d6 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 800170e:	463b      	mov	r3, r7
 8001710:	2205      	movs	r2, #5
 8001712:	4619      	mov	r1, r3
 8001714:	200a      	movs	r0, #10
 8001716:	f7ff fa3f 	bl	8000b98 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800171a:	793b      	ldrb	r3, [r7, #4]
 800171c:	461c      	mov	r4, r3
 800171e:	78fb      	ldrb	r3, [r7, #3]
 8001720:	461d      	mov	r5, r3
 8001722:	78bb      	ldrb	r3, [r7, #2]
 8001724:	787a      	ldrb	r2, [r7, #1]
 8001726:	7839      	ldrb	r1, [r7, #0]
 8001728:	f107 0008 	add.w	r0, r7, #8
 800172c:	9102      	str	r1, [sp, #8]
 800172e:	9201      	str	r2, [sp, #4]
 8001730:	9300      	str	r3, [sp, #0]
 8001732:	462b      	mov	r3, r5
 8001734:	4622      	mov	r2, r4
 8001736:	49c7      	ldr	r1, [pc, #796]	; (8001a54 <printRadioSettings+0x6c4>)
 8001738:	f003 fe58 	bl	80053ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800173c:	f107 0308 	add.w	r3, r7, #8
 8001740:	4618      	mov	r0, r3
 8001742:	f7fe fd05 	bl	8000150 <strlen>
 8001746:	4603      	mov	r3, r0
 8001748:	b29a      	uxth	r2, r3
 800174a:	f107 0108 	add.w	r1, r7, #8
 800174e:	230a      	movs	r3, #10
 8001750:	48bf      	ldr	r0, [pc, #764]	; (8001a50 <printRadioSettings+0x6c0>)
 8001752:	f003 f840 	bl	80047d6 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 8001756:	463b      	mov	r3, r7
 8001758:	2205      	movs	r2, #5
 800175a:	4619      	mov	r1, r3
 800175c:	200b      	movs	r0, #11
 800175e:	f7ff fa1b 	bl	8000b98 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001762:	793b      	ldrb	r3, [r7, #4]
 8001764:	461c      	mov	r4, r3
 8001766:	78fb      	ldrb	r3, [r7, #3]
 8001768:	461d      	mov	r5, r3
 800176a:	78bb      	ldrb	r3, [r7, #2]
 800176c:	787a      	ldrb	r2, [r7, #1]
 800176e:	7839      	ldrb	r1, [r7, #0]
 8001770:	f107 0008 	add.w	r0, r7, #8
 8001774:	9102      	str	r1, [sp, #8]
 8001776:	9201      	str	r2, [sp, #4]
 8001778:	9300      	str	r3, [sp, #0]
 800177a:	462b      	mov	r3, r5
 800177c:	4622      	mov	r2, r4
 800177e:	49b6      	ldr	r1, [pc, #728]	; (8001a58 <printRadioSettings+0x6c8>)
 8001780:	f003 fe34 	bl	80053ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001784:	f107 0308 	add.w	r3, r7, #8
 8001788:	4618      	mov	r0, r3
 800178a:	f7fe fce1 	bl	8000150 <strlen>
 800178e:	4603      	mov	r3, r0
 8001790:	b29a      	uxth	r2, r3
 8001792:	f107 0108 	add.w	r1, r7, #8
 8001796:	230a      	movs	r3, #10
 8001798:	48ad      	ldr	r0, [pc, #692]	; (8001a50 <printRadioSettings+0x6c0>)
 800179a:	f003 f81c 	bl	80047d6 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 800179e:	463b      	mov	r3, r7
 80017a0:	2201      	movs	r2, #1
 80017a2:	4619      	mov	r1, r3
 80017a4:	200c      	movs	r0, #12
 80017a6:	f7ff f9f7 	bl	8000b98 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80017aa:	783b      	ldrb	r3, [r7, #0]
 80017ac:	461a      	mov	r2, r3
 80017ae:	f107 0308 	add.w	r3, r7, #8
 80017b2:	49aa      	ldr	r1, [pc, #680]	; (8001a5c <printRadioSettings+0x6cc>)
 80017b4:	4618      	mov	r0, r3
 80017b6:	f003 fe19 	bl	80053ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80017ba:	f107 0308 	add.w	r3, r7, #8
 80017be:	4618      	mov	r0, r3
 80017c0:	f7fe fcc6 	bl	8000150 <strlen>
 80017c4:	4603      	mov	r3, r0
 80017c6:	b29a      	uxth	r2, r3
 80017c8:	f107 0108 	add.w	r1, r7, #8
 80017cc:	230a      	movs	r3, #10
 80017ce:	48a0      	ldr	r0, [pc, #640]	; (8001a50 <printRadioSettings+0x6c0>)
 80017d0:	f003 f801 	bl	80047d6 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 80017d4:	463b      	mov	r3, r7
 80017d6:	2201      	movs	r2, #1
 80017d8:	4619      	mov	r1, r3
 80017da:	200d      	movs	r0, #13
 80017dc:	f7ff f9dc 	bl	8000b98 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80017e0:	783b      	ldrb	r3, [r7, #0]
 80017e2:	461a      	mov	r2, r3
 80017e4:	f107 0308 	add.w	r3, r7, #8
 80017e8:	499d      	ldr	r1, [pc, #628]	; (8001a60 <printRadioSettings+0x6d0>)
 80017ea:	4618      	mov	r0, r3
 80017ec:	f003 fdfe 	bl	80053ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80017f0:	f107 0308 	add.w	r3, r7, #8
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7fe fcab 	bl	8000150 <strlen>
 80017fa:	4603      	mov	r3, r0
 80017fc:	b29a      	uxth	r2, r3
 80017fe:	f107 0108 	add.w	r1, r7, #8
 8001802:	230a      	movs	r3, #10
 8001804:	4892      	ldr	r0, [pc, #584]	; (8001a50 <printRadioSettings+0x6c0>)
 8001806:	f002 ffe6 	bl	80047d6 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 800180a:	463b      	mov	r3, r7
 800180c:	2201      	movs	r2, #1
 800180e:	4619      	mov	r1, r3
 8001810:	200e      	movs	r0, #14
 8001812:	f7ff f9c1 	bl	8000b98 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001816:	783b      	ldrb	r3, [r7, #0]
 8001818:	461a      	mov	r2, r3
 800181a:	f107 0308 	add.w	r3, r7, #8
 800181e:	4991      	ldr	r1, [pc, #580]	; (8001a64 <printRadioSettings+0x6d4>)
 8001820:	4618      	mov	r0, r3
 8001822:	f003 fde3 	bl	80053ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001826:	f107 0308 	add.w	r3, r7, #8
 800182a:	4618      	mov	r0, r3
 800182c:	f7fe fc90 	bl	8000150 <strlen>
 8001830:	4603      	mov	r3, r0
 8001832:	b29a      	uxth	r2, r3
 8001834:	f107 0108 	add.w	r1, r7, #8
 8001838:	230a      	movs	r3, #10
 800183a:	4885      	ldr	r0, [pc, #532]	; (8001a50 <printRadioSettings+0x6c0>)
 800183c:	f002 ffcb 	bl	80047d6 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8001840:	463b      	mov	r3, r7
 8001842:	2201      	movs	r2, #1
 8001844:	4619      	mov	r1, r3
 8001846:	200f      	movs	r0, #15
 8001848:	f7ff f9a6 	bl	8000b98 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800184c:	783b      	ldrb	r3, [r7, #0]
 800184e:	461a      	mov	r2, r3
 8001850:	f107 0308 	add.w	r3, r7, #8
 8001854:	4984      	ldr	r1, [pc, #528]	; (8001a68 <printRadioSettings+0x6d8>)
 8001856:	4618      	mov	r0, r3
 8001858:	f003 fdc8 	bl	80053ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800185c:	f107 0308 	add.w	r3, r7, #8
 8001860:	4618      	mov	r0, r3
 8001862:	f7fe fc75 	bl	8000150 <strlen>
 8001866:	4603      	mov	r3, r0
 8001868:	b29a      	uxth	r2, r3
 800186a:	f107 0108 	add.w	r1, r7, #8
 800186e:	230a      	movs	r3, #10
 8001870:	4877      	ldr	r0, [pc, #476]	; (8001a50 <printRadioSettings+0x6c0>)
 8001872:	f002 ffb0 	bl	80047d6 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8001876:	463b      	mov	r3, r7
 8001878:	2205      	movs	r2, #5
 800187a:	4619      	mov	r1, r3
 800187c:	2010      	movs	r0, #16
 800187e:	f7ff f98b 	bl	8000b98 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001882:	793b      	ldrb	r3, [r7, #4]
 8001884:	461c      	mov	r4, r3
 8001886:	78fb      	ldrb	r3, [r7, #3]
 8001888:	461d      	mov	r5, r3
 800188a:	78bb      	ldrb	r3, [r7, #2]
 800188c:	787a      	ldrb	r2, [r7, #1]
 800188e:	7839      	ldrb	r1, [r7, #0]
 8001890:	f107 0008 	add.w	r0, r7, #8
 8001894:	9102      	str	r1, [sp, #8]
 8001896:	9201      	str	r2, [sp, #4]
 8001898:	9300      	str	r3, [sp, #0]
 800189a:	462b      	mov	r3, r5
 800189c:	4622      	mov	r2, r4
 800189e:	4973      	ldr	r1, [pc, #460]	; (8001a6c <printRadioSettings+0x6dc>)
 80018a0:	f003 fda4 	bl	80053ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018a4:	f107 0308 	add.w	r3, r7, #8
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7fe fc51 	bl	8000150 <strlen>
 80018ae:	4603      	mov	r3, r0
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	f107 0108 	add.w	r1, r7, #8
 80018b6:	230a      	movs	r3, #10
 80018b8:	4865      	ldr	r0, [pc, #404]	; (8001a50 <printRadioSettings+0x6c0>)
 80018ba:	f002 ff8c 	bl	80047d6 <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 80018be:	2011      	movs	r0, #17
 80018c0:	f7ff f942 	bl	8000b48 <NRF24_read_register>
 80018c4:	4603      	mov	r3, r0
 80018c6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80018ca:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80018ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018d2:	f107 0308 	add.w	r3, r7, #8
 80018d6:	4966      	ldr	r1, [pc, #408]	; (8001a70 <printRadioSettings+0x6e0>)
 80018d8:	4618      	mov	r0, r3
 80018da:	f003 fd87 	bl	80053ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018de:	f107 0308 	add.w	r3, r7, #8
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7fe fc34 	bl	8000150 <strlen>
 80018e8:	4603      	mov	r3, r0
 80018ea:	b29a      	uxth	r2, r3
 80018ec:	f107 0108 	add.w	r1, r7, #8
 80018f0:	230a      	movs	r3, #10
 80018f2:	4857      	ldr	r0, [pc, #348]	; (8001a50 <printRadioSettings+0x6c0>)
 80018f4:	f002 ff6f 	bl	80047d6 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 80018f8:	2012      	movs	r0, #18
 80018fa:	f7ff f925 	bl	8000b48 <NRF24_read_register>
 80018fe:	4603      	mov	r3, r0
 8001900:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001904:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001908:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800190c:	f107 0308 	add.w	r3, r7, #8
 8001910:	4958      	ldr	r1, [pc, #352]	; (8001a74 <printRadioSettings+0x6e4>)
 8001912:	4618      	mov	r0, r3
 8001914:	f003 fd6a 	bl	80053ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001918:	f107 0308 	add.w	r3, r7, #8
 800191c:	4618      	mov	r0, r3
 800191e:	f7fe fc17 	bl	8000150 <strlen>
 8001922:	4603      	mov	r3, r0
 8001924:	b29a      	uxth	r2, r3
 8001926:	f107 0108 	add.w	r1, r7, #8
 800192a:	230a      	movs	r3, #10
 800192c:	4848      	ldr	r0, [pc, #288]	; (8001a50 <printRadioSettings+0x6c0>)
 800192e:	f002 ff52 	bl	80047d6 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 8001932:	2013      	movs	r0, #19
 8001934:	f7ff f908 	bl	8000b48 <NRF24_read_register>
 8001938:	4603      	mov	r3, r0
 800193a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800193e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001942:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001946:	f107 0308 	add.w	r3, r7, #8
 800194a:	494b      	ldr	r1, [pc, #300]	; (8001a78 <printRadioSettings+0x6e8>)
 800194c:	4618      	mov	r0, r3
 800194e:	f003 fd4d 	bl	80053ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001952:	f107 0308 	add.w	r3, r7, #8
 8001956:	4618      	mov	r0, r3
 8001958:	f7fe fbfa 	bl	8000150 <strlen>
 800195c:	4603      	mov	r3, r0
 800195e:	b29a      	uxth	r2, r3
 8001960:	f107 0108 	add.w	r1, r7, #8
 8001964:	230a      	movs	r3, #10
 8001966:	483a      	ldr	r0, [pc, #232]	; (8001a50 <printRadioSettings+0x6c0>)
 8001968:	f002 ff35 	bl	80047d6 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 800196c:	2014      	movs	r0, #20
 800196e:	f7ff f8eb 	bl	8000b48 <NRF24_read_register>
 8001972:	4603      	mov	r3, r0
 8001974:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001978:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800197c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001980:	f107 0308 	add.w	r3, r7, #8
 8001984:	493d      	ldr	r1, [pc, #244]	; (8001a7c <printRadioSettings+0x6ec>)
 8001986:	4618      	mov	r0, r3
 8001988:	f003 fd30 	bl	80053ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800198c:	f107 0308 	add.w	r3, r7, #8
 8001990:	4618      	mov	r0, r3
 8001992:	f7fe fbdd 	bl	8000150 <strlen>
 8001996:	4603      	mov	r3, r0
 8001998:	b29a      	uxth	r2, r3
 800199a:	f107 0108 	add.w	r1, r7, #8
 800199e:	230a      	movs	r3, #10
 80019a0:	482b      	ldr	r0, [pc, #172]	; (8001a50 <printRadioSettings+0x6c0>)
 80019a2:	f002 ff18 	bl	80047d6 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 80019a6:	2015      	movs	r0, #21
 80019a8:	f7ff f8ce 	bl	8000b48 <NRF24_read_register>
 80019ac:	4603      	mov	r3, r0
 80019ae:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80019b2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80019b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019ba:	f107 0308 	add.w	r3, r7, #8
 80019be:	4930      	ldr	r1, [pc, #192]	; (8001a80 <printRadioSettings+0x6f0>)
 80019c0:	4618      	mov	r0, r3
 80019c2:	f003 fd13 	bl	80053ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80019c6:	f107 0308 	add.w	r3, r7, #8
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7fe fbc0 	bl	8000150 <strlen>
 80019d0:	4603      	mov	r3, r0
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	f107 0108 	add.w	r1, r7, #8
 80019d8:	230a      	movs	r3, #10
 80019da:	481d      	ldr	r0, [pc, #116]	; (8001a50 <printRadioSettings+0x6c0>)
 80019dc:	f002 fefb 	bl	80047d6 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 80019e0:	2016      	movs	r0, #22
 80019e2:	f7ff f8b1 	bl	8000b48 <NRF24_read_register>
 80019e6:	4603      	mov	r3, r0
 80019e8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80019ec:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80019f0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019f4:	f107 0308 	add.w	r3, r7, #8
 80019f8:	4922      	ldr	r1, [pc, #136]	; (8001a84 <printRadioSettings+0x6f4>)
 80019fa:	4618      	mov	r0, r3
 80019fc:	f003 fcf6 	bl	80053ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a00:	f107 0308 	add.w	r3, r7, #8
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7fe fba3 	bl	8000150 <strlen>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	b29a      	uxth	r2, r3
 8001a0e:	f107 0108 	add.w	r1, r7, #8
 8001a12:	230a      	movs	r3, #10
 8001a14:	480e      	ldr	r0, [pc, #56]	; (8001a50 <printRadioSettings+0x6c0>)
 8001a16:	f002 fede 	bl	80047d6 <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8001a1a:	201c      	movs	r0, #28
 8001a1c:	f7ff f894 	bl	8000b48 <NRF24_read_register>
 8001a20:	4603      	mov	r3, r0
 8001a22:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001a26:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a2a:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	bfcc      	ite	gt
 8001a32:	2301      	movgt	r3, #1
 8001a34:	2300      	movle	r3, #0
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001a3a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a3e:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	bfcc      	ite	gt
 8001a46:	2301      	movgt	r3, #1
 8001a48:	2300      	movle	r3, #0
 8001a4a:	e01d      	b.n	8001a88 <printRadioSettings+0x6f8>
 8001a4c:	08007a04 	.word	0x08007a04
 8001a50:	20000288 	.word	0x20000288
 8001a54:	08007a18 	.word	0x08007a18
 8001a58:	08007a48 	.word	0x08007a48
 8001a5c:	08007a78 	.word	0x08007a78
 8001a60:	08007aa0 	.word	0x08007aa0
 8001a64:	08007ac8 	.word	0x08007ac8
 8001a68:	08007af0 	.word	0x08007af0
 8001a6c:	08007b18 	.word	0x08007b18
 8001a70:	08007b44 	.word	0x08007b44
 8001a74:	08007b60 	.word	0x08007b60
 8001a78:	08007b7c 	.word	0x08007b7c
 8001a7c:	08007b98 	.word	0x08007b98
 8001a80:	08007bb4 	.word	0x08007bb4
 8001a84:	08007bd0 	.word	0x08007bd0
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001a8c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a90:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	bfcc      	ite	gt
 8001a98:	2301      	movgt	r3, #1
 8001a9a:	2300      	movle	r3, #0
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001aa0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001aa4:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	bfcc      	ite	gt
 8001aac:	2301      	movgt	r3, #1
 8001aae:	2300      	movle	r3, #0
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001ab4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001ab8:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	bfcc      	ite	gt
 8001ac0:	2301      	movgt	r3, #1
 8001ac2:	2300      	movle	r3, #0
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001ac8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001acc:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	bfcc      	ite	gt
 8001ad4:	2301      	movgt	r3, #1
 8001ad6:	2300      	movle	r3, #0
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	f107 0008 	add.w	r0, r7, #8
 8001ade:	9303      	str	r3, [sp, #12]
 8001ae0:	9402      	str	r4, [sp, #8]
 8001ae2:	9101      	str	r1, [sp, #4]
 8001ae4:	9200      	str	r2, [sp, #0]
 8001ae6:	4633      	mov	r3, r6
 8001ae8:	462a      	mov	r2, r5
 8001aea:	4936      	ldr	r1, [pc, #216]	; (8001bc4 <printRadioSettings+0x834>)
 8001aec:	f003 fc7e 	bl	80053ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001af0:	f107 0308 	add.w	r3, r7, #8
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7fe fb2b 	bl	8000150 <strlen>
 8001afa:	4603      	mov	r3, r0
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	f107 0108 	add.w	r1, r7, #8
 8001b02:	230a      	movs	r3, #10
 8001b04:	4830      	ldr	r0, [pc, #192]	; (8001bc8 <printRadioSettings+0x838>)
 8001b06:	f002 fe66 	bl	80047d6 <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8001b0a:	201d      	movs	r0, #29
 8001b0c:	f7ff f81c 	bl	8000b48 <NRF24_read_register>
 8001b10:	4603      	mov	r3, r0
 8001b12:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8001b16:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001b1a:	f003 0304 	and.w	r3, r3, #4
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d006      	beq.n	8001b30 <printRadioSettings+0x7a0>
 8001b22:	f107 0308 	add.w	r3, r7, #8
 8001b26:	4929      	ldr	r1, [pc, #164]	; (8001bcc <printRadioSettings+0x83c>)
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f003 fc5f 	bl	80053ec <siprintf>
 8001b2e:	e005      	b.n	8001b3c <printRadioSettings+0x7ac>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8001b30:	f107 0308 	add.w	r3, r7, #8
 8001b34:	4926      	ldr	r1, [pc, #152]	; (8001bd0 <printRadioSettings+0x840>)
 8001b36:	4618      	mov	r0, r3
 8001b38:	f003 fc58 	bl	80053ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001b3c:	f107 0308 	add.w	r3, r7, #8
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7fe fb05 	bl	8000150 <strlen>
 8001b46:	4603      	mov	r3, r0
 8001b48:	b29a      	uxth	r2, r3
 8001b4a:	f107 0108 	add.w	r1, r7, #8
 8001b4e:	230a      	movs	r3, #10
 8001b50:	481d      	ldr	r0, [pc, #116]	; (8001bc8 <printRadioSettings+0x838>)
 8001b52:	f002 fe40 	bl	80047d6 <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8001b56:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d006      	beq.n	8001b70 <printRadioSettings+0x7e0>
 8001b62:	f107 0308 	add.w	r3, r7, #8
 8001b66:	491b      	ldr	r1, [pc, #108]	; (8001bd4 <printRadioSettings+0x844>)
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f003 fc3f 	bl	80053ec <siprintf>
 8001b6e:	e005      	b.n	8001b7c <printRadioSettings+0x7ec>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8001b70:	f107 0308 	add.w	r3, r7, #8
 8001b74:	4918      	ldr	r1, [pc, #96]	; (8001bd8 <printRadioSettings+0x848>)
 8001b76:	4618      	mov	r0, r3
 8001b78:	f003 fc38 	bl	80053ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001b7c:	f107 0308 	add.w	r3, r7, #8
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7fe fae5 	bl	8000150 <strlen>
 8001b86:	4603      	mov	r3, r0
 8001b88:	b29a      	uxth	r2, r3
 8001b8a:	f107 0108 	add.w	r1, r7, #8
 8001b8e:	230a      	movs	r3, #10
 8001b90:	480d      	ldr	r0, [pc, #52]	; (8001bc8 <printRadioSettings+0x838>)
 8001b92:	f002 fe20 	bl	80047d6 <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8001b96:	f107 0308 	add.w	r3, r7, #8
 8001b9a:	4910      	ldr	r1, [pc, #64]	; (8001bdc <printRadioSettings+0x84c>)
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f003 fc25 	bl	80053ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001ba2:	f107 0308 	add.w	r3, r7, #8
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7fe fad2 	bl	8000150 <strlen>
 8001bac:	4603      	mov	r3, r0
 8001bae:	b29a      	uxth	r2, r3
 8001bb0:	f107 0108 	add.w	r1, r7, #8
 8001bb4:	230a      	movs	r3, #10
 8001bb6:	4804      	ldr	r0, [pc, #16]	; (8001bc8 <printRadioSettings+0x838>)
 8001bb8:	f002 fe0d 	bl	80047d6 <HAL_UART_Transmit>
}
 8001bbc:	bf00      	nop
 8001bbe:	3774      	adds	r7, #116	; 0x74
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bc4:	08007bec 	.word	0x08007bec
 8001bc8:	20000288 	.word	0x20000288
 8001bcc:	08007c38 	.word	0x08007c38
 8001bd0:	08007c50 	.word	0x08007c50
 8001bd4:	08007c68 	.word	0x08007c68
 8001bd8:	08007c84 	.word	0x08007c84
 8001bdc:	08007858 	.word	0x08007858

08001be0 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 8001be0:	b084      	sub	sp, #16
 8001be2:	b580      	push	{r7, lr}
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	f107 0c08 	add.w	ip, r7, #8
 8001bea:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 8001bee:	4b07      	ldr	r3, [pc, #28]	; (8001c0c <nrf24_DebugUART_Init+0x2c>)
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f107 0308 	add.w	r3, r7, #8
 8001bf6:	2244      	movs	r2, #68	; 0x44
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	f002 ff81 	bl	8004b00 <memcpy>
}
 8001bfe:	bf00      	nop
 8001c00:	46bd      	mov	sp, r7
 8001c02:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001c06:	b004      	add	sp, #16
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	20000288 	.word	0x20000288

08001c10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c12:	b097      	sub	sp, #92	; 0x5c
 8001c14:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c16:	f000 fc0b 	bl	8002430 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c1a:	f000 f85d 	bl	8001cd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c1e:	f000 f955 	bl	8001ecc <MX_GPIO_Init>
  MX_SPI1_Init();
 8001c22:	f000 f8f3 	bl	8001e0c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001c26:	f000 f927 	bl	8001e78 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001c2a:	f000 f8b1 	bl	8001d90 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  	HAL_ADC_Start_IT(&hadc1);
 8001c2e:	4823      	ldr	r0, [pc, #140]	; (8001cbc <main+0xac>)
 8001c30:	f000 fd5c 	bl	80026ec <HAL_ADC_Start_IT>

	NRF24_begin(GPIOB, CSNpin_Pin, CEpin_Pin, hspi1);
 8001c34:	4c22      	ldr	r4, [pc, #136]	; (8001cc0 <main+0xb0>)
 8001c36:	4668      	mov	r0, sp
 8001c38:	1d23      	adds	r3, r4, #4
 8001c3a:	2254      	movs	r2, #84	; 0x54
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	f002 ff5f 	bl	8004b00 <memcpy>
 8001c42:	6823      	ldr	r3, [r4, #0]
 8001c44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c4c:	481d      	ldr	r0, [pc, #116]	; (8001cc4 <main+0xb4>)
 8001c4e:	f7ff f855 	bl	8000cfc <NRF24_begin>
	nrf24_DebugUART_Init(huart2);
 8001c52:	4e1d      	ldr	r6, [pc, #116]	; (8001cc8 <main+0xb8>)
 8001c54:	466d      	mov	r5, sp
 8001c56:	f106 0410 	add.w	r4, r6, #16
 8001c5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c66:	6823      	ldr	r3, [r4, #0]
 8001c68:	602b      	str	r3, [r5, #0]
 8001c6a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001c6e:	f7ff ffb7 	bl	8001be0 <nrf24_DebugUART_Init>
	printRadioSettings();
 8001c72:	f7ff fb8d 	bl	8001390 <printRadioSettings>
//  NRF24_begin(GPIOB, GPIO_PIN_8, GPIO_PIN_9,hspi1);
//  nrf24_DebugUART_Init(huart2);
//  printRadioSettings();

// *** TRANSMIT ***
	NRF24_stopListening();
 8001c76:	f7ff f921 	bl	8000ebc <NRF24_stopListening>
	NRF24_openWritingPipe(Txaddrs);
 8001c7a:	4b14      	ldr	r3, [pc, #80]	; (8001ccc <main+0xbc>)
 8001c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c80:	4610      	mov	r0, r2
 8001c82:	4619      	mov	r1, r3
 8001c84:	f7ff f97a 	bl	8000f7c <NRF24_openWritingPipe>
	NRF24_setAutoAck(false);
 8001c88:	2000      	movs	r0, #0
 8001c8a:	f7ff fa01 	bl	8001090 <NRF24_setAutoAck>
	NRF24_setChannel(52);
 8001c8e:	2034      	movs	r0, #52	; 0x34
 8001c90:	f7ff f9b3 	bl	8000ffa <NRF24_setChannel>
	NRF24_setPayloadSize(32);
 8001c94:	2020      	movs	r0, #32
 8001c96:	f7ff f9c5 	bl	8001024 <NRF24_setPayloadSize>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		if(NRF24_write(myTx, sizeof(myTx))){
 8001c9a:	2120      	movs	r1, #32
 8001c9c:	480c      	ldr	r0, [pc, #48]	; (8001cd0 <main+0xc0>)
 8001c9e:	f7ff f919 	bl	8000ed4 <NRF24_write>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d004      	beq.n	8001cb2 <main+0xa2>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001ca8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cac:	4809      	ldr	r0, [pc, #36]	; (8001cd4 <main+0xc4>)
 8001cae:	f001 faef 	bl	8003290 <HAL_GPIO_TogglePin>

		}

		HAL_Delay(2000);
 8001cb2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001cb6:	f000 fc1d 	bl	80024f4 <HAL_Delay>
		if(NRF24_write(myTx, sizeof(myTx))){
 8001cba:	e7ee      	b.n	8001c9a <main+0x8a>
 8001cbc:	200002dc 	.word	0x200002dc
 8001cc0:	2000030c 	.word	0x2000030c
 8001cc4:	40010c00 	.word	0x40010c00
 8001cc8:	20000364 	.word	0x20000364
 8001ccc:	20000000 	.word	0x20000000
 8001cd0:	20000008 	.word	0x20000008
 8001cd4:	40011000 	.word	0x40011000

08001cd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b094      	sub	sp, #80	; 0x50
 8001cdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ce2:	2228      	movs	r2, #40	; 0x28
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f002 ff18 	bl	8004b1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cec:	f107 0314 	add.w	r3, r7, #20
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	60da      	str	r2, [r3, #12]
 8001cfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cfc:	1d3b      	adds	r3, r7, #4
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	605a      	str	r2, [r3, #4]
 8001d04:	609a      	str	r2, [r3, #8]
 8001d06:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d10:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001d12:	2300      	movs	r3, #0
 8001d14:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d16:	2301      	movs	r3, #1
 8001d18:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d22:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001d24:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001d28:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f001 fac8 	bl	80032c4 <HAL_RCC_OscConfig>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001d3a:	f000 f94b 	bl	8001fd4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d3e:	230f      	movs	r3, #15
 8001d40:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d42:	2302      	movs	r3, #2
 8001d44:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d46:	2300      	movs	r3, #0
 8001d48:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d4e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d50:	2300      	movs	r3, #0
 8001d52:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d54:	f107 0314 	add.w	r3, r7, #20
 8001d58:	2102      	movs	r1, #2
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f001 fd32 	bl	80037c4 <HAL_RCC_ClockConfig>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001d66:	f000 f935 	bl	8001fd4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001d6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d72:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d74:	1d3b      	adds	r3, r7, #4
 8001d76:	4618      	mov	r0, r3
 8001d78:	f001 febe 	bl	8003af8 <HAL_RCCEx_PeriphCLKConfig>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001d82:	f000 f927 	bl	8001fd4 <Error_Handler>
  }
}
 8001d86:	bf00      	nop
 8001d88:	3750      	adds	r7, #80	; 0x50
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
	...

08001d90 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d96:	1d3b      	adds	r3, r7, #4
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	605a      	str	r2, [r3, #4]
 8001d9e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001da0:	4b18      	ldr	r3, [pc, #96]	; (8001e04 <MX_ADC1_Init+0x74>)
 8001da2:	4a19      	ldr	r2, [pc, #100]	; (8001e08 <MX_ADC1_Init+0x78>)
 8001da4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001da6:	4b17      	ldr	r3, [pc, #92]	; (8001e04 <MX_ADC1_Init+0x74>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001dac:	4b15      	ldr	r3, [pc, #84]	; (8001e04 <MX_ADC1_Init+0x74>)
 8001dae:	2201      	movs	r2, #1
 8001db0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001db2:	4b14      	ldr	r3, [pc, #80]	; (8001e04 <MX_ADC1_Init+0x74>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001db8:	4b12      	ldr	r3, [pc, #72]	; (8001e04 <MX_ADC1_Init+0x74>)
 8001dba:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001dbe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001dc0:	4b10      	ldr	r3, [pc, #64]	; (8001e04 <MX_ADC1_Init+0x74>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001dc6:	4b0f      	ldr	r3, [pc, #60]	; (8001e04 <MX_ADC1_Init+0x74>)
 8001dc8:	2201      	movs	r2, #1
 8001dca:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001dcc:	480d      	ldr	r0, [pc, #52]	; (8001e04 <MX_ADC1_Init+0x74>)
 8001dce:	f000 fbb5 	bl	800253c <HAL_ADC_Init>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001dd8:	f000 f8fc 	bl	8001fd4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001de0:	2301      	movs	r3, #1
 8001de2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001de4:	2307      	movs	r3, #7
 8001de6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001de8:	1d3b      	adds	r3, r7, #4
 8001dea:	4619      	mov	r1, r3
 8001dec:	4805      	ldr	r0, [pc, #20]	; (8001e04 <MX_ADC1_Init+0x74>)
 8001dee:	f000 fe09 	bl	8002a04 <HAL_ADC_ConfigChannel>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001df8:	f000 f8ec 	bl	8001fd4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001dfc:	bf00      	nop
 8001dfe:	3710      	adds	r7, #16
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	200002dc 	.word	0x200002dc
 8001e08:	40012400 	.word	0x40012400

08001e0c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001e10:	4b17      	ldr	r3, [pc, #92]	; (8001e70 <MX_SPI1_Init+0x64>)
 8001e12:	4a18      	ldr	r2, [pc, #96]	; (8001e74 <MX_SPI1_Init+0x68>)
 8001e14:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e16:	4b16      	ldr	r3, [pc, #88]	; (8001e70 <MX_SPI1_Init+0x64>)
 8001e18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e1c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e1e:	4b14      	ldr	r3, [pc, #80]	; (8001e70 <MX_SPI1_Init+0x64>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e24:	4b12      	ldr	r3, [pc, #72]	; (8001e70 <MX_SPI1_Init+0x64>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e2a:	4b11      	ldr	r3, [pc, #68]	; (8001e70 <MX_SPI1_Init+0x64>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e30:	4b0f      	ldr	r3, [pc, #60]	; (8001e70 <MX_SPI1_Init+0x64>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e36:	4b0e      	ldr	r3, [pc, #56]	; (8001e70 <MX_SPI1_Init+0x64>)
 8001e38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e3c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001e3e:	4b0c      	ldr	r3, [pc, #48]	; (8001e70 <MX_SPI1_Init+0x64>)
 8001e40:	2228      	movs	r2, #40	; 0x28
 8001e42:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e44:	4b0a      	ldr	r3, [pc, #40]	; (8001e70 <MX_SPI1_Init+0x64>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e4a:	4b09      	ldr	r3, [pc, #36]	; (8001e70 <MX_SPI1_Init+0x64>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e50:	4b07      	ldr	r3, [pc, #28]	; (8001e70 <MX_SPI1_Init+0x64>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001e56:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <MX_SPI1_Init+0x64>)
 8001e58:	220a      	movs	r2, #10
 8001e5a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e5c:	4804      	ldr	r0, [pc, #16]	; (8001e70 <MX_SPI1_Init+0x64>)
 8001e5e:	f001 ff01 	bl	8003c64 <HAL_SPI_Init>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001e68:	f000 f8b4 	bl	8001fd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e6c:	bf00      	nop
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	2000030c 	.word	0x2000030c
 8001e74:	40013000 	.word	0x40013000

08001e78 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e7c:	4b11      	ldr	r3, [pc, #68]	; (8001ec4 <MX_USART2_UART_Init+0x4c>)
 8001e7e:	4a12      	ldr	r2, [pc, #72]	; (8001ec8 <MX_USART2_UART_Init+0x50>)
 8001e80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e82:	4b10      	ldr	r3, [pc, #64]	; (8001ec4 <MX_USART2_UART_Init+0x4c>)
 8001e84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e8a:	4b0e      	ldr	r3, [pc, #56]	; (8001ec4 <MX_USART2_UART_Init+0x4c>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e90:	4b0c      	ldr	r3, [pc, #48]	; (8001ec4 <MX_USART2_UART_Init+0x4c>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e96:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <MX_USART2_UART_Init+0x4c>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e9c:	4b09      	ldr	r3, [pc, #36]	; (8001ec4 <MX_USART2_UART_Init+0x4c>)
 8001e9e:	220c      	movs	r2, #12
 8001ea0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ea2:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <MX_USART2_UART_Init+0x4c>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ea8:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <MX_USART2_UART_Init+0x4c>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001eae:	4805      	ldr	r0, [pc, #20]	; (8001ec4 <MX_USART2_UART_Init+0x4c>)
 8001eb0:	f002 fc44 	bl	800473c <HAL_UART_Init>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001eba:	f000 f88b 	bl	8001fd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	20000364 	.word	0x20000364
 8001ec8:	40004400 	.word	0x40004400

08001ecc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b088      	sub	sp, #32
 8001ed0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed2:	f107 0310 	add.w	r3, r7, #16
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	601a      	str	r2, [r3, #0]
 8001eda:	605a      	str	r2, [r3, #4]
 8001edc:	609a      	str	r2, [r3, #8]
 8001ede:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ee0:	4b38      	ldr	r3, [pc, #224]	; (8001fc4 <MX_GPIO_Init+0xf8>)
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	4a37      	ldr	r2, [pc, #220]	; (8001fc4 <MX_GPIO_Init+0xf8>)
 8001ee6:	f043 0310 	orr.w	r3, r3, #16
 8001eea:	6193      	str	r3, [r2, #24]
 8001eec:	4b35      	ldr	r3, [pc, #212]	; (8001fc4 <MX_GPIO_Init+0xf8>)
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	f003 0310 	and.w	r3, r3, #16
 8001ef4:	60fb      	str	r3, [r7, #12]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ef8:	4b32      	ldr	r3, [pc, #200]	; (8001fc4 <MX_GPIO_Init+0xf8>)
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	4a31      	ldr	r2, [pc, #196]	; (8001fc4 <MX_GPIO_Init+0xf8>)
 8001efe:	f043 0320 	orr.w	r3, r3, #32
 8001f02:	6193      	str	r3, [r2, #24]
 8001f04:	4b2f      	ldr	r3, [pc, #188]	; (8001fc4 <MX_GPIO_Init+0xf8>)
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	f003 0320 	and.w	r3, r3, #32
 8001f0c:	60bb      	str	r3, [r7, #8]
 8001f0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f10:	4b2c      	ldr	r3, [pc, #176]	; (8001fc4 <MX_GPIO_Init+0xf8>)
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	4a2b      	ldr	r2, [pc, #172]	; (8001fc4 <MX_GPIO_Init+0xf8>)
 8001f16:	f043 0304 	orr.w	r3, r3, #4
 8001f1a:	6193      	str	r3, [r2, #24]
 8001f1c:	4b29      	ldr	r3, [pc, #164]	; (8001fc4 <MX_GPIO_Init+0xf8>)
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	f003 0304 	and.w	r3, r3, #4
 8001f24:	607b      	str	r3, [r7, #4]
 8001f26:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f28:	4b26      	ldr	r3, [pc, #152]	; (8001fc4 <MX_GPIO_Init+0xf8>)
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	4a25      	ldr	r2, [pc, #148]	; (8001fc4 <MX_GPIO_Init+0xf8>)
 8001f2e:	f043 0308 	orr.w	r3, r3, #8
 8001f32:	6193      	str	r3, [r2, #24]
 8001f34:	4b23      	ldr	r3, [pc, #140]	; (8001fc4 <MX_GPIO_Init+0xf8>)
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	f003 0308 	and.w	r3, r3, #8
 8001f3c:	603b      	str	r3, [r7, #0]
 8001f3e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001f40:	2200      	movs	r2, #0
 8001f42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f46:	4820      	ldr	r0, [pc, #128]	; (8001fc8 <MX_GPIO_Init+0xfc>)
 8001f48:	f001 f98a 	bl	8003260 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	2101      	movs	r1, #1
 8001f50:	481e      	ldr	r0, [pc, #120]	; (8001fcc <MX_GPIO_Init+0x100>)
 8001f52:	f001 f985 	bl	8003260 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|CSNpin_Pin|CEpin_Pin, GPIO_PIN_RESET);
 8001f56:	2200      	movs	r2, #0
 8001f58:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8001f5c:	481c      	ldr	r0, [pc, #112]	; (8001fd0 <MX_GPIO_Init+0x104>)
 8001f5e:	f001 f97f 	bl	8003260 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001f62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f70:	2302      	movs	r3, #2
 8001f72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f74:	f107 0310 	add.w	r3, r7, #16
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4813      	ldr	r0, [pc, #76]	; (8001fc8 <MX_GPIO_Init+0xfc>)
 8001f7c:	f000 ffec 	bl	8002f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f80:	2301      	movs	r3, #1
 8001f82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f84:	2301      	movs	r3, #1
 8001f86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f90:	f107 0310 	add.w	r3, r7, #16
 8001f94:	4619      	mov	r1, r3
 8001f96:	480d      	ldr	r0, [pc, #52]	; (8001fcc <MX_GPIO_Init+0x100>)
 8001f98:	f000 ffde 	bl	8002f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 CSNpin_Pin CEpin_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_10|CSNpin_Pin|CEpin_Pin;
 8001f9c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001fa0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001faa:	2302      	movs	r3, #2
 8001fac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fae:	f107 0310 	add.w	r3, r7, #16
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	4806      	ldr	r0, [pc, #24]	; (8001fd0 <MX_GPIO_Init+0x104>)
 8001fb6:	f000 ffcf 	bl	8002f58 <HAL_GPIO_Init>

}
 8001fba:	bf00      	nop
 8001fbc:	3720      	adds	r7, #32
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	40011000 	.word	0x40011000
 8001fcc:	40010800 	.word	0x40010800
 8001fd0:	40010c00 	.word	0x40010c00

08001fd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fd8:	b672      	cpsid	i
}
 8001fda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001fdc:	e7fe      	b.n	8001fdc <Error_Handler+0x8>
	...

08001fe0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001fe6:	4b15      	ldr	r3, [pc, #84]	; (800203c <HAL_MspInit+0x5c>)
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	4a14      	ldr	r2, [pc, #80]	; (800203c <HAL_MspInit+0x5c>)
 8001fec:	f043 0301 	orr.w	r3, r3, #1
 8001ff0:	6193      	str	r3, [r2, #24]
 8001ff2:	4b12      	ldr	r3, [pc, #72]	; (800203c <HAL_MspInit+0x5c>)
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	60bb      	str	r3, [r7, #8]
 8001ffc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ffe:	4b0f      	ldr	r3, [pc, #60]	; (800203c <HAL_MspInit+0x5c>)
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	4a0e      	ldr	r2, [pc, #56]	; (800203c <HAL_MspInit+0x5c>)
 8002004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002008:	61d3      	str	r3, [r2, #28]
 800200a:	4b0c      	ldr	r3, [pc, #48]	; (800203c <HAL_MspInit+0x5c>)
 800200c:	69db      	ldr	r3, [r3, #28]
 800200e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002012:	607b      	str	r3, [r7, #4]
 8002014:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002016:	4b0a      	ldr	r3, [pc, #40]	; (8002040 <HAL_MspInit+0x60>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	4a04      	ldr	r2, [pc, #16]	; (8002040 <HAL_MspInit+0x60>)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002032:	bf00      	nop
 8002034:	3714      	adds	r7, #20
 8002036:	46bd      	mov	sp, r7
 8002038:	bc80      	pop	{r7}
 800203a:	4770      	bx	lr
 800203c:	40021000 	.word	0x40021000
 8002040:	40010000 	.word	0x40010000

08002044 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b088      	sub	sp, #32
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800204c:	f107 0310 	add.w	r3, r7, #16
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	605a      	str	r2, [r3, #4]
 8002056:	609a      	str	r2, [r3, #8]
 8002058:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a18      	ldr	r2, [pc, #96]	; (80020c0 <HAL_ADC_MspInit+0x7c>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d129      	bne.n	80020b8 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002064:	4b17      	ldr	r3, [pc, #92]	; (80020c4 <HAL_ADC_MspInit+0x80>)
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	4a16      	ldr	r2, [pc, #88]	; (80020c4 <HAL_ADC_MspInit+0x80>)
 800206a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800206e:	6193      	str	r3, [r2, #24]
 8002070:	4b14      	ldr	r3, [pc, #80]	; (80020c4 <HAL_ADC_MspInit+0x80>)
 8002072:	699b      	ldr	r3, [r3, #24]
 8002074:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002078:	60fb      	str	r3, [r7, #12]
 800207a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800207c:	4b11      	ldr	r3, [pc, #68]	; (80020c4 <HAL_ADC_MspInit+0x80>)
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	4a10      	ldr	r2, [pc, #64]	; (80020c4 <HAL_ADC_MspInit+0x80>)
 8002082:	f043 0304 	orr.w	r3, r3, #4
 8002086:	6193      	str	r3, [r2, #24]
 8002088:	4b0e      	ldr	r3, [pc, #56]	; (80020c4 <HAL_ADC_MspInit+0x80>)
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	f003 0304 	and.w	r3, r3, #4
 8002090:	60bb      	str	r3, [r7, #8]
 8002092:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002094:	2302      	movs	r3, #2
 8002096:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002098:	2303      	movs	r3, #3
 800209a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800209c:	f107 0310 	add.w	r3, r7, #16
 80020a0:	4619      	mov	r1, r3
 80020a2:	4809      	ldr	r0, [pc, #36]	; (80020c8 <HAL_ADC_MspInit+0x84>)
 80020a4:	f000 ff58 	bl	8002f58 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 80020a8:	2200      	movs	r2, #0
 80020aa:	2102      	movs	r1, #2
 80020ac:	2012      	movs	r0, #18
 80020ae:	f000 ff1c 	bl	8002eea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80020b2:	2012      	movs	r0, #18
 80020b4:	f000 ff35 	bl	8002f22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80020b8:	bf00      	nop
 80020ba:	3720      	adds	r7, #32
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	40012400 	.word	0x40012400
 80020c4:	40021000 	.word	0x40021000
 80020c8:	40010800 	.word	0x40010800

080020cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b088      	sub	sp, #32
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d4:	f107 0310 	add.w	r3, r7, #16
 80020d8:	2200      	movs	r2, #0
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	605a      	str	r2, [r3, #4]
 80020de:	609a      	str	r2, [r3, #8]
 80020e0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a1b      	ldr	r2, [pc, #108]	; (8002154 <HAL_SPI_MspInit+0x88>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d12f      	bne.n	800214c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020ec:	4b1a      	ldr	r3, [pc, #104]	; (8002158 <HAL_SPI_MspInit+0x8c>)
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	4a19      	ldr	r2, [pc, #100]	; (8002158 <HAL_SPI_MspInit+0x8c>)
 80020f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020f6:	6193      	str	r3, [r2, #24]
 80020f8:	4b17      	ldr	r3, [pc, #92]	; (8002158 <HAL_SPI_MspInit+0x8c>)
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002100:	60fb      	str	r3, [r7, #12]
 8002102:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002104:	4b14      	ldr	r3, [pc, #80]	; (8002158 <HAL_SPI_MspInit+0x8c>)
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	4a13      	ldr	r2, [pc, #76]	; (8002158 <HAL_SPI_MspInit+0x8c>)
 800210a:	f043 0304 	orr.w	r3, r3, #4
 800210e:	6193      	str	r3, [r2, #24]
 8002110:	4b11      	ldr	r3, [pc, #68]	; (8002158 <HAL_SPI_MspInit+0x8c>)
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	f003 0304 	and.w	r3, r3, #4
 8002118:	60bb      	str	r3, [r7, #8]
 800211a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800211c:	23a0      	movs	r3, #160	; 0xa0
 800211e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002120:	2302      	movs	r3, #2
 8002122:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002124:	2303      	movs	r3, #3
 8002126:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002128:	f107 0310 	add.w	r3, r7, #16
 800212c:	4619      	mov	r1, r3
 800212e:	480b      	ldr	r0, [pc, #44]	; (800215c <HAL_SPI_MspInit+0x90>)
 8002130:	f000 ff12 	bl	8002f58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002134:	2340      	movs	r3, #64	; 0x40
 8002136:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002138:	2300      	movs	r3, #0
 800213a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213c:	2300      	movs	r3, #0
 800213e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002140:	f107 0310 	add.w	r3, r7, #16
 8002144:	4619      	mov	r1, r3
 8002146:	4805      	ldr	r0, [pc, #20]	; (800215c <HAL_SPI_MspInit+0x90>)
 8002148:	f000 ff06 	bl	8002f58 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800214c:	bf00      	nop
 800214e:	3720      	adds	r7, #32
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	40013000 	.word	0x40013000
 8002158:	40021000 	.word	0x40021000
 800215c:	40010800 	.word	0x40010800

08002160 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b088      	sub	sp, #32
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002168:	f107 0310 	add.w	r3, r7, #16
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	605a      	str	r2, [r3, #4]
 8002172:	609a      	str	r2, [r3, #8]
 8002174:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a1b      	ldr	r2, [pc, #108]	; (80021e8 <HAL_UART_MspInit+0x88>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d12f      	bne.n	80021e0 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002180:	4b1a      	ldr	r3, [pc, #104]	; (80021ec <HAL_UART_MspInit+0x8c>)
 8002182:	69db      	ldr	r3, [r3, #28]
 8002184:	4a19      	ldr	r2, [pc, #100]	; (80021ec <HAL_UART_MspInit+0x8c>)
 8002186:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800218a:	61d3      	str	r3, [r2, #28]
 800218c:	4b17      	ldr	r3, [pc, #92]	; (80021ec <HAL_UART_MspInit+0x8c>)
 800218e:	69db      	ldr	r3, [r3, #28]
 8002190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002194:	60fb      	str	r3, [r7, #12]
 8002196:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002198:	4b14      	ldr	r3, [pc, #80]	; (80021ec <HAL_UART_MspInit+0x8c>)
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	4a13      	ldr	r2, [pc, #76]	; (80021ec <HAL_UART_MspInit+0x8c>)
 800219e:	f043 0304 	orr.w	r3, r3, #4
 80021a2:	6193      	str	r3, [r2, #24]
 80021a4:	4b11      	ldr	r3, [pc, #68]	; (80021ec <HAL_UART_MspInit+0x8c>)
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	f003 0304 	and.w	r3, r3, #4
 80021ac:	60bb      	str	r3, [r7, #8]
 80021ae:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021b0:	2304      	movs	r3, #4
 80021b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b4:	2302      	movs	r3, #2
 80021b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021b8:	2303      	movs	r3, #3
 80021ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021bc:	f107 0310 	add.w	r3, r7, #16
 80021c0:	4619      	mov	r1, r3
 80021c2:	480b      	ldr	r0, [pc, #44]	; (80021f0 <HAL_UART_MspInit+0x90>)
 80021c4:	f000 fec8 	bl	8002f58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80021c8:	2308      	movs	r3, #8
 80021ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021cc:	2300      	movs	r3, #0
 80021ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d0:	2300      	movs	r3, #0
 80021d2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021d4:	f107 0310 	add.w	r3, r7, #16
 80021d8:	4619      	mov	r1, r3
 80021da:	4805      	ldr	r0, [pc, #20]	; (80021f0 <HAL_UART_MspInit+0x90>)
 80021dc:	f000 febc 	bl	8002f58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80021e0:	bf00      	nop
 80021e2:	3720      	adds	r7, #32
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40004400 	.word	0x40004400
 80021ec:	40021000 	.word	0x40021000
 80021f0:	40010800 	.word	0x40010800

080021f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021f8:	e7fe      	b.n	80021f8 <NMI_Handler+0x4>

080021fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021fa:	b480      	push	{r7}
 80021fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021fe:	e7fe      	b.n	80021fe <HardFault_Handler+0x4>

08002200 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002204:	e7fe      	b.n	8002204 <MemManage_Handler+0x4>

08002206 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002206:	b480      	push	{r7}
 8002208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800220a:	e7fe      	b.n	800220a <BusFault_Handler+0x4>

0800220c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002210:	e7fe      	b.n	8002210 <UsageFault_Handler+0x4>

08002212 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002212:	b480      	push	{r7}
 8002214:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002216:	bf00      	nop
 8002218:	46bd      	mov	sp, r7
 800221a:	bc80      	pop	{r7}
 800221c:	4770      	bx	lr

0800221e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800221e:	b480      	push	{r7}
 8002220:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002222:	bf00      	nop
 8002224:	46bd      	mov	sp, r7
 8002226:	bc80      	pop	{r7}
 8002228:	4770      	bx	lr

0800222a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800222a:	b480      	push	{r7}
 800222c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800222e:	bf00      	nop
 8002230:	46bd      	mov	sp, r7
 8002232:	bc80      	pop	{r7}
 8002234:	4770      	bx	lr

08002236 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800223a:	f000 f93f 	bl	80024bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800223e:	bf00      	nop
 8002240:	bd80      	pop	{r7, pc}
	...

08002244 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002248:	4802      	ldr	r0, [pc, #8]	; (8002254 <ADC1_2_IRQHandler+0x10>)
 800224a:	f000 fb05 	bl	8002858 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800224e:	bf00      	nop
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	200002dc 	.word	0x200002dc

08002258 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
	return 1;
 800225c:	2301      	movs	r3, #1
}
 800225e:	4618      	mov	r0, r3
 8002260:	46bd      	mov	sp, r7
 8002262:	bc80      	pop	{r7}
 8002264:	4770      	bx	lr

08002266 <_kill>:

int _kill(int pid, int sig)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b082      	sub	sp, #8
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
 800226e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002270:	f002 fc1c 	bl	8004aac <__errno>
 8002274:	4603      	mov	r3, r0
 8002276:	2216      	movs	r2, #22
 8002278:	601a      	str	r2, [r3, #0]
	return -1;
 800227a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800227e:	4618      	mov	r0, r3
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <_exit>:

void _exit (int status)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b082      	sub	sp, #8
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800228e:	f04f 31ff 	mov.w	r1, #4294967295
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f7ff ffe7 	bl	8002266 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002298:	e7fe      	b.n	8002298 <_exit+0x12>

0800229a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b086      	sub	sp, #24
 800229e:	af00      	add	r7, sp, #0
 80022a0:	60f8      	str	r0, [r7, #12]
 80022a2:	60b9      	str	r1, [r7, #8]
 80022a4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022a6:	2300      	movs	r3, #0
 80022a8:	617b      	str	r3, [r7, #20]
 80022aa:	e00a      	b.n	80022c2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80022ac:	f3af 8000 	nop.w
 80022b0:	4601      	mov	r1, r0
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	1c5a      	adds	r2, r3, #1
 80022b6:	60ba      	str	r2, [r7, #8]
 80022b8:	b2ca      	uxtb	r2, r1
 80022ba:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	3301      	adds	r3, #1
 80022c0:	617b      	str	r3, [r7, #20]
 80022c2:	697a      	ldr	r2, [r7, #20]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	dbf0      	blt.n	80022ac <_read+0x12>
	}

return len;
 80022ca:	687b      	ldr	r3, [r7, #4]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3718      	adds	r7, #24
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022e0:	2300      	movs	r3, #0
 80022e2:	617b      	str	r3, [r7, #20]
 80022e4:	e009      	b.n	80022fa <_write+0x26>
	{
		__io_putchar(*ptr++);
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	1c5a      	adds	r2, r3, #1
 80022ea:	60ba      	str	r2, [r7, #8]
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	3301      	adds	r3, #1
 80022f8:	617b      	str	r3, [r7, #20]
 80022fa:	697a      	ldr	r2, [r7, #20]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	429a      	cmp	r2, r3
 8002300:	dbf1      	blt.n	80022e6 <_write+0x12>
	}
	return len;
 8002302:	687b      	ldr	r3, [r7, #4]
}
 8002304:	4618      	mov	r0, r3
 8002306:	3718      	adds	r7, #24
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <_close>:

int _close(int file)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
	return -1;
 8002314:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002318:	4618      	mov	r0, r3
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	bc80      	pop	{r7}
 8002320:	4770      	bx	lr

08002322 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002322:	b480      	push	{r7}
 8002324:	b083      	sub	sp, #12
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
 800232a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002332:	605a      	str	r2, [r3, #4]
	return 0;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	bc80      	pop	{r7}
 800233e:	4770      	bx	lr

08002340 <_isatty>:

int _isatty(int file)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
	return 1;
 8002348:	2301      	movs	r3, #1
}
 800234a:	4618      	mov	r0, r3
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	bc80      	pop	{r7}
 8002352:	4770      	bx	lr

08002354 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
	return 0;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3714      	adds	r7, #20
 8002366:	46bd      	mov	sp, r7
 8002368:	bc80      	pop	{r7}
 800236a:	4770      	bx	lr

0800236c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002374:	4a14      	ldr	r2, [pc, #80]	; (80023c8 <_sbrk+0x5c>)
 8002376:	4b15      	ldr	r3, [pc, #84]	; (80023cc <_sbrk+0x60>)
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002380:	4b13      	ldr	r3, [pc, #76]	; (80023d0 <_sbrk+0x64>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d102      	bne.n	800238e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002388:	4b11      	ldr	r3, [pc, #68]	; (80023d0 <_sbrk+0x64>)
 800238a:	4a12      	ldr	r2, [pc, #72]	; (80023d4 <_sbrk+0x68>)
 800238c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800238e:	4b10      	ldr	r3, [pc, #64]	; (80023d0 <_sbrk+0x64>)
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4413      	add	r3, r2
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	429a      	cmp	r2, r3
 800239a:	d207      	bcs.n	80023ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800239c:	f002 fb86 	bl	8004aac <__errno>
 80023a0:	4603      	mov	r3, r0
 80023a2:	220c      	movs	r2, #12
 80023a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023a6:	f04f 33ff 	mov.w	r3, #4294967295
 80023aa:	e009      	b.n	80023c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023ac:	4b08      	ldr	r3, [pc, #32]	; (80023d0 <_sbrk+0x64>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023b2:	4b07      	ldr	r3, [pc, #28]	; (80023d0 <_sbrk+0x64>)
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4413      	add	r3, r2
 80023ba:	4a05      	ldr	r2, [pc, #20]	; (80023d0 <_sbrk+0x64>)
 80023bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023be:	68fb      	ldr	r3, [r7, #12]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3718      	adds	r7, #24
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	20005000 	.word	0x20005000
 80023cc:	00000400 	.word	0x00000400
 80023d0:	200002cc 	.word	0x200002cc
 80023d4:	200003c8 	.word	0x200003c8

080023d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023dc:	bf00      	nop
 80023de:	46bd      	mov	sp, r7
 80023e0:	bc80      	pop	{r7}
 80023e2:	4770      	bx	lr

080023e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023e4:	480c      	ldr	r0, [pc, #48]	; (8002418 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80023e6:	490d      	ldr	r1, [pc, #52]	; (800241c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80023e8:	4a0d      	ldr	r2, [pc, #52]	; (8002420 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80023ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023ec:	e002      	b.n	80023f4 <LoopCopyDataInit>

080023ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023f2:	3304      	adds	r3, #4

080023f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023f8:	d3f9      	bcc.n	80023ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023fa:	4a0a      	ldr	r2, [pc, #40]	; (8002424 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80023fc:	4c0a      	ldr	r4, [pc, #40]	; (8002428 <LoopFillZerobss+0x22>)
  movs r3, #0
 80023fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002400:	e001      	b.n	8002406 <LoopFillZerobss>

08002402 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002402:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002404:	3204      	adds	r2, #4

08002406 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002406:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002408:	d3fb      	bcc.n	8002402 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800240a:	f7ff ffe5 	bl	80023d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800240e:	f002 fb53 	bl	8004ab8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002412:	f7ff fbfd 	bl	8001c10 <main>
  bx lr
 8002416:	4770      	bx	lr
  ldr r0, =_sdata
 8002418:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800241c:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8002420:	080081ac 	.word	0x080081ac
  ldr r2, =_sbss
 8002424:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 8002428:	200003c8 	.word	0x200003c8

0800242c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800242c:	e7fe      	b.n	800242c <CAN1_RX1_IRQHandler>
	...

08002430 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002434:	4b08      	ldr	r3, [pc, #32]	; (8002458 <HAL_Init+0x28>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a07      	ldr	r2, [pc, #28]	; (8002458 <HAL_Init+0x28>)
 800243a:	f043 0310 	orr.w	r3, r3, #16
 800243e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002440:	2003      	movs	r0, #3
 8002442:	f000 fd47 	bl	8002ed4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002446:	2000      	movs	r0, #0
 8002448:	f000 f808 	bl	800245c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800244c:	f7ff fdc8 	bl	8001fe0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	40022000 	.word	0x40022000

0800245c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002464:	4b12      	ldr	r3, [pc, #72]	; (80024b0 <HAL_InitTick+0x54>)
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	4b12      	ldr	r3, [pc, #72]	; (80024b4 <HAL_InitTick+0x58>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	4619      	mov	r1, r3
 800246e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002472:	fbb3 f3f1 	udiv	r3, r3, r1
 8002476:	fbb2 f3f3 	udiv	r3, r2, r3
 800247a:	4618      	mov	r0, r3
 800247c:	f000 fd5f 	bl	8002f3e <HAL_SYSTICK_Config>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e00e      	b.n	80024a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2b0f      	cmp	r3, #15
 800248e:	d80a      	bhi.n	80024a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002490:	2200      	movs	r2, #0
 8002492:	6879      	ldr	r1, [r7, #4]
 8002494:	f04f 30ff 	mov.w	r0, #4294967295
 8002498:	f000 fd27 	bl	8002eea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800249c:	4a06      	ldr	r2, [pc, #24]	; (80024b8 <HAL_InitTick+0x5c>)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024a2:	2300      	movs	r3, #0
 80024a4:	e000      	b.n	80024a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3708      	adds	r7, #8
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	20000028 	.word	0x20000028
 80024b4:	20000030 	.word	0x20000030
 80024b8:	2000002c 	.word	0x2000002c

080024bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024c0:	4b05      	ldr	r3, [pc, #20]	; (80024d8 <HAL_IncTick+0x1c>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	461a      	mov	r2, r3
 80024c6:	4b05      	ldr	r3, [pc, #20]	; (80024dc <HAL_IncTick+0x20>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4413      	add	r3, r2
 80024cc:	4a03      	ldr	r2, [pc, #12]	; (80024dc <HAL_IncTick+0x20>)
 80024ce:	6013      	str	r3, [r2, #0]
}
 80024d0:	bf00      	nop
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bc80      	pop	{r7}
 80024d6:	4770      	bx	lr
 80024d8:	20000030 	.word	0x20000030
 80024dc:	200003b4 	.word	0x200003b4

080024e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  return uwTick;
 80024e4:	4b02      	ldr	r3, [pc, #8]	; (80024f0 <HAL_GetTick+0x10>)
 80024e6:	681b      	ldr	r3, [r3, #0]
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bc80      	pop	{r7}
 80024ee:	4770      	bx	lr
 80024f0:	200003b4 	.word	0x200003b4

080024f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024fc:	f7ff fff0 	bl	80024e0 <HAL_GetTick>
 8002500:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800250c:	d005      	beq.n	800251a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800250e:	4b0a      	ldr	r3, [pc, #40]	; (8002538 <HAL_Delay+0x44>)
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	461a      	mov	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	4413      	add	r3, r2
 8002518:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800251a:	bf00      	nop
 800251c:	f7ff ffe0 	bl	80024e0 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	429a      	cmp	r2, r3
 800252a:	d8f7      	bhi.n	800251c <HAL_Delay+0x28>
  {
  }
}
 800252c:	bf00      	nop
 800252e:	bf00      	nop
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	20000030 	.word	0x20000030

0800253c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b086      	sub	sp, #24
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002544:	2300      	movs	r3, #0
 8002546:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002548:	2300      	movs	r3, #0
 800254a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800254c:	2300      	movs	r3, #0
 800254e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002550:	2300      	movs	r3, #0
 8002552:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d101      	bne.n	800255e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e0be      	b.n	80026dc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002568:	2b00      	cmp	r3, #0
 800256a:	d109      	bne.n	8002580 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f7ff fd62 	bl	8002044 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f000 fb91 	bl	8002ca8 <ADC_ConversionStop_Disable>
 8002586:	4603      	mov	r3, r0
 8002588:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258e:	f003 0310 	and.w	r3, r3, #16
 8002592:	2b00      	cmp	r3, #0
 8002594:	f040 8099 	bne.w	80026ca <HAL_ADC_Init+0x18e>
 8002598:	7dfb      	ldrb	r3, [r7, #23]
 800259a:	2b00      	cmp	r3, #0
 800259c:	f040 8095 	bne.w	80026ca <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80025a8:	f023 0302 	bic.w	r3, r3, #2
 80025ac:	f043 0202 	orr.w	r2, r3, #2
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80025bc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	7b1b      	ldrb	r3, [r3, #12]
 80025c2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80025c4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80025c6:	68ba      	ldr	r2, [r7, #8]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025d4:	d003      	beq.n	80025de <HAL_ADC_Init+0xa2>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d102      	bne.n	80025e4 <HAL_ADC_Init+0xa8>
 80025de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025e2:	e000      	b.n	80025e6 <HAL_ADC_Init+0xaa>
 80025e4:	2300      	movs	r3, #0
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	7d1b      	ldrb	r3, [r3, #20]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d119      	bne.n	8002628 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	7b1b      	ldrb	r3, [r3, #12]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d109      	bne.n	8002610 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	3b01      	subs	r3, #1
 8002602:	035a      	lsls	r2, r3, #13
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	4313      	orrs	r3, r2
 8002608:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800260c:	613b      	str	r3, [r7, #16]
 800260e:	e00b      	b.n	8002628 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002614:	f043 0220 	orr.w	r2, r3, #32
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002620:	f043 0201 	orr.w	r2, r3, #1
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	430a      	orrs	r2, r1
 800263a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	689a      	ldr	r2, [r3, #8]
 8002642:	4b28      	ldr	r3, [pc, #160]	; (80026e4 <HAL_ADC_Init+0x1a8>)
 8002644:	4013      	ands	r3, r2
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	6812      	ldr	r2, [r2, #0]
 800264a:	68b9      	ldr	r1, [r7, #8]
 800264c:	430b      	orrs	r3, r1
 800264e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002658:	d003      	beq.n	8002662 <HAL_ADC_Init+0x126>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d104      	bne.n	800266c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	3b01      	subs	r3, #1
 8002668:	051b      	lsls	r3, r3, #20
 800266a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002672:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	430a      	orrs	r2, r1
 800267e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	689a      	ldr	r2, [r3, #8]
 8002686:	4b18      	ldr	r3, [pc, #96]	; (80026e8 <HAL_ADC_Init+0x1ac>)
 8002688:	4013      	ands	r3, r2
 800268a:	68ba      	ldr	r2, [r7, #8]
 800268c:	429a      	cmp	r2, r3
 800268e:	d10b      	bne.n	80026a8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269a:	f023 0303 	bic.w	r3, r3, #3
 800269e:	f043 0201 	orr.w	r2, r3, #1
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80026a6:	e018      	b.n	80026da <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ac:	f023 0312 	bic.w	r3, r3, #18
 80026b0:	f043 0210 	orr.w	r2, r3, #16
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026bc:	f043 0201 	orr.w	r2, r3, #1
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80026c8:	e007      	b.n	80026da <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ce:	f043 0210 	orr.w	r2, r3, #16
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80026da:	7dfb      	ldrb	r3, [r7, #23]
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3718      	adds	r7, #24
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	ffe1f7fd 	.word	0xffe1f7fd
 80026e8:	ff1f0efe 	.word	0xff1f0efe

080026ec <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026f4:	2300      	movs	r3, #0
 80026f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d101      	bne.n	8002706 <HAL_ADC_Start_IT+0x1a>
 8002702:	2302      	movs	r3, #2
 8002704:	e0a0      	b.n	8002848 <HAL_ADC_Start_IT+0x15c>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2201      	movs	r2, #1
 800270a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 fa70 	bl	8002bf4 <ADC_Enable>
 8002714:	4603      	mov	r3, r0
 8002716:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002718:	7bfb      	ldrb	r3, [r7, #15]
 800271a:	2b00      	cmp	r3, #0
 800271c:	f040 808f 	bne.w	800283e <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002724:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002728:	f023 0301 	bic.w	r3, r3, #1
 800272c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a45      	ldr	r2, [pc, #276]	; (8002850 <HAL_ADC_Start_IT+0x164>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d105      	bne.n	800274a <HAL_ADC_Start_IT+0x5e>
 800273e:	4b45      	ldr	r3, [pc, #276]	; (8002854 <HAL_ADC_Start_IT+0x168>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d115      	bne.n	8002776 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800274e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002760:	2b00      	cmp	r3, #0
 8002762:	d026      	beq.n	80027b2 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002768:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800276c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002774:	e01d      	b.n	80027b2 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a33      	ldr	r2, [pc, #204]	; (8002854 <HAL_ADC_Start_IT+0x168>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d004      	beq.n	8002796 <HAL_ADC_Start_IT+0xaa>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a2f      	ldr	r2, [pc, #188]	; (8002850 <HAL_ADC_Start_IT+0x164>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d10d      	bne.n	80027b2 <HAL_ADC_Start_IT+0xc6>
 8002796:	4b2f      	ldr	r3, [pc, #188]	; (8002854 <HAL_ADC_Start_IT+0x168>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d007      	beq.n	80027b2 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027aa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d006      	beq.n	80027cc <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c2:	f023 0206 	bic.w	r2, r3, #6
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80027ca:	e002      	b.n	80027d2 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f06f 0202 	mvn.w	r2, #2
 80027e2:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	685a      	ldr	r2, [r3, #4]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f042 0220 	orr.w	r2, r2, #32
 80027f2:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80027fe:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002802:	d113      	bne.n	800282c <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002808:	4a11      	ldr	r2, [pc, #68]	; (8002850 <HAL_ADC_Start_IT+0x164>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d105      	bne.n	800281a <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800280e:	4b11      	ldr	r3, [pc, #68]	; (8002854 <HAL_ADC_Start_IT+0x168>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002816:	2b00      	cmp	r3, #0
 8002818:	d108      	bne.n	800282c <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	689a      	ldr	r2, [r3, #8]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002828:	609a      	str	r2, [r3, #8]
 800282a:	e00c      	b.n	8002846 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	689a      	ldr	r2, [r3, #8]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800283a:	609a      	str	r2, [r3, #8]
 800283c:	e003      	b.n	8002846 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002846:	7bfb      	ldrb	r3, [r7, #15]
}
 8002848:	4618      	mov	r0, r3
 800284a:	3710      	adds	r7, #16
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	40012800 	.word	0x40012800
 8002854:	40012400 	.word	0x40012400

08002858 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f003 0320 	and.w	r3, r3, #32
 800286a:	2b20      	cmp	r3, #32
 800286c:	d140      	bne.n	80028f0 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0302 	and.w	r3, r3, #2
 8002878:	2b02      	cmp	r3, #2
 800287a:	d139      	bne.n	80028f0 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002880:	f003 0310 	and.w	r3, r3, #16
 8002884:	2b00      	cmp	r3, #0
 8002886:	d105      	bne.n	8002894 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800288c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800289e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80028a2:	d11d      	bne.n	80028e0 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d119      	bne.n	80028e0 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f022 0220 	bic.w	r2, r2, #32
 80028ba:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d105      	bne.n	80028e0 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d8:	f043 0201 	orr.w	r2, r3, #1
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f000 f87c 	bl	80029de <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f06f 0212 	mvn.w	r2, #18
 80028ee:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028fa:	2b80      	cmp	r3, #128	; 0x80
 80028fc:	d14f      	bne.n	800299e <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0304 	and.w	r3, r3, #4
 8002908:	2b04      	cmp	r3, #4
 800290a:	d148      	bne.n	800299e <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002910:	f003 0310 	and.w	r3, r3, #16
 8002914:	2b00      	cmp	r3, #0
 8002916:	d105      	bne.n	8002924 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800291c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800292e:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8002932:	d012      	beq.n	800295a <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800293e:	2b00      	cmp	r3, #0
 8002940:	d125      	bne.n	800298e <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800294c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002950:	d11d      	bne.n	800298e <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002956:	2b00      	cmp	r3, #0
 8002958:	d119      	bne.n	800298e <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	685a      	ldr	r2, [r3, #4]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002968:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800296e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297e:	2b00      	cmp	r3, #0
 8002980:	d105      	bne.n	800298e <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002986:	f043 0201 	orr.w	r2, r3, #1
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f000 f9cb 	bl	8002d2a <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f06f 020c 	mvn.w	r2, #12
 800299c:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029a8:	2b40      	cmp	r3, #64	; 0x40
 80029aa:	d114      	bne.n	80029d6 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d10d      	bne.n	80029d6 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029be:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 f812 	bl	80029f0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f06f 0201 	mvn.w	r2, #1
 80029d4:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80029d6:	bf00      	nop
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80029de:	b480      	push	{r7}
 80029e0:	b083      	sub	sp, #12
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80029e6:	bf00      	nop
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bc80      	pop	{r7}
 80029ee:	4770      	bx	lr

080029f0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80029f8:	bf00      	nop
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bc80      	pop	{r7}
 8002a00:	4770      	bx	lr
	...

08002a04 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002a12:	2300      	movs	r3, #0
 8002a14:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d101      	bne.n	8002a24 <HAL_ADC_ConfigChannel+0x20>
 8002a20:	2302      	movs	r3, #2
 8002a22:	e0dc      	b.n	8002bde <HAL_ADC_ConfigChannel+0x1da>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	2b06      	cmp	r3, #6
 8002a32:	d81c      	bhi.n	8002a6e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685a      	ldr	r2, [r3, #4]
 8002a3e:	4613      	mov	r3, r2
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	4413      	add	r3, r2
 8002a44:	3b05      	subs	r3, #5
 8002a46:	221f      	movs	r2, #31
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	43db      	mvns	r3, r3
 8002a4e:	4019      	ands	r1, r3
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	6818      	ldr	r0, [r3, #0]
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685a      	ldr	r2, [r3, #4]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	4413      	add	r3, r2
 8002a5e:	3b05      	subs	r3, #5
 8002a60:	fa00 f203 	lsl.w	r2, r0, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	635a      	str	r2, [r3, #52]	; 0x34
 8002a6c:	e03c      	b.n	8002ae8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	2b0c      	cmp	r3, #12
 8002a74:	d81c      	bhi.n	8002ab0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685a      	ldr	r2, [r3, #4]
 8002a80:	4613      	mov	r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	4413      	add	r3, r2
 8002a86:	3b23      	subs	r3, #35	; 0x23
 8002a88:	221f      	movs	r2, #31
 8002a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8e:	43db      	mvns	r3, r3
 8002a90:	4019      	ands	r1, r3
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	6818      	ldr	r0, [r3, #0]
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685a      	ldr	r2, [r3, #4]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	4413      	add	r3, r2
 8002aa0:	3b23      	subs	r3, #35	; 0x23
 8002aa2:	fa00 f203 	lsl.w	r2, r0, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	631a      	str	r2, [r3, #48]	; 0x30
 8002aae:	e01b      	b.n	8002ae8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685a      	ldr	r2, [r3, #4]
 8002aba:	4613      	mov	r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	4413      	add	r3, r2
 8002ac0:	3b41      	subs	r3, #65	; 0x41
 8002ac2:	221f      	movs	r2, #31
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	4019      	ands	r1, r3
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	6818      	ldr	r0, [r3, #0]
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685a      	ldr	r2, [r3, #4]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	4413      	add	r3, r2
 8002ada:	3b41      	subs	r3, #65	; 0x41
 8002adc:	fa00 f203 	lsl.w	r2, r0, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2b09      	cmp	r3, #9
 8002aee:	d91c      	bls.n	8002b2a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68d9      	ldr	r1, [r3, #12]
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	4613      	mov	r3, r2
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	4413      	add	r3, r2
 8002b00:	3b1e      	subs	r3, #30
 8002b02:	2207      	movs	r2, #7
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	4019      	ands	r1, r3
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	6898      	ldr	r0, [r3, #8]
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	4613      	mov	r3, r2
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	4413      	add	r3, r2
 8002b1a:	3b1e      	subs	r3, #30
 8002b1c:	fa00 f203 	lsl.w	r2, r0, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	430a      	orrs	r2, r1
 8002b26:	60da      	str	r2, [r3, #12]
 8002b28:	e019      	b.n	8002b5e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	6919      	ldr	r1, [r3, #16]
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	4613      	mov	r3, r2
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	4413      	add	r3, r2
 8002b3a:	2207      	movs	r2, #7
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	43db      	mvns	r3, r3
 8002b42:	4019      	ands	r1, r3
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	6898      	ldr	r0, [r3, #8]
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	4413      	add	r3, r2
 8002b52:	fa00 f203 	lsl.w	r2, r0, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2b10      	cmp	r3, #16
 8002b64:	d003      	beq.n	8002b6e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002b6a:	2b11      	cmp	r3, #17
 8002b6c:	d132      	bne.n	8002bd4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a1d      	ldr	r2, [pc, #116]	; (8002be8 <HAL_ADC_ConfigChannel+0x1e4>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d125      	bne.n	8002bc4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d126      	bne.n	8002bd4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	689a      	ldr	r2, [r3, #8]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002b94:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2b10      	cmp	r3, #16
 8002b9c:	d11a      	bne.n	8002bd4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b9e:	4b13      	ldr	r3, [pc, #76]	; (8002bec <HAL_ADC_ConfigChannel+0x1e8>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a13      	ldr	r2, [pc, #76]	; (8002bf0 <HAL_ADC_ConfigChannel+0x1ec>)
 8002ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba8:	0c9a      	lsrs	r2, r3, #18
 8002baa:	4613      	mov	r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	4413      	add	r3, r2
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002bb4:	e002      	b.n	8002bbc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	3b01      	subs	r3, #1
 8002bba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1f9      	bne.n	8002bb6 <HAL_ADC_ConfigChannel+0x1b2>
 8002bc2:	e007      	b.n	8002bd4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc8:	f043 0220 	orr.w	r2, r3, #32
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3714      	adds	r7, #20
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bc80      	pop	{r7}
 8002be6:	4770      	bx	lr
 8002be8:	40012400 	.word	0x40012400
 8002bec:	20000028 	.word	0x20000028
 8002bf0:	431bde83 	.word	0x431bde83

08002bf4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002c00:	2300      	movs	r3, #0
 8002c02:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d040      	beq.n	8002c94 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	689a      	ldr	r2, [r3, #8]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f042 0201 	orr.w	r2, r2, #1
 8002c20:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002c22:	4b1f      	ldr	r3, [pc, #124]	; (8002ca0 <ADC_Enable+0xac>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a1f      	ldr	r2, [pc, #124]	; (8002ca4 <ADC_Enable+0xb0>)
 8002c28:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2c:	0c9b      	lsrs	r3, r3, #18
 8002c2e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002c30:	e002      	b.n	8002c38 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	3b01      	subs	r3, #1
 8002c36:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d1f9      	bne.n	8002c32 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c3e:	f7ff fc4f 	bl	80024e0 <HAL_GetTick>
 8002c42:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002c44:	e01f      	b.n	8002c86 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c46:	f7ff fc4b 	bl	80024e0 <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d918      	bls.n	8002c86 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d011      	beq.n	8002c86 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c66:	f043 0210 	orr.w	r2, r3, #16
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c72:	f043 0201 	orr.w	r2, r3, #1
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e007      	b.n	8002c96 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f003 0301 	and.w	r3, r3, #1
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d1d8      	bne.n	8002c46 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	20000028 	.word	0x20000028
 8002ca4:	431bde83 	.word	0x431bde83

08002ca8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d12e      	bne.n	8002d20 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	689a      	ldr	r2, [r3, #8]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f022 0201 	bic.w	r2, r2, #1
 8002cd0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002cd2:	f7ff fc05 	bl	80024e0 <HAL_GetTick>
 8002cd6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002cd8:	e01b      	b.n	8002d12 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002cda:	f7ff fc01 	bl	80024e0 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d914      	bls.n	8002d12 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d10d      	bne.n	8002d12 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfa:	f043 0210 	orr.w	r2, r3, #16
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d06:	f043 0201 	orr.w	r2, r3, #1
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e007      	b.n	8002d22 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f003 0301 	and.w	r3, r3, #1
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d0dc      	beq.n	8002cda <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3710      	adds	r7, #16
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b083      	sub	sp, #12
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002d32:	bf00      	nop
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bc80      	pop	{r7}
 8002d3a:	4770      	bx	lr

08002d3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f003 0307 	and.w	r3, r3, #7
 8002d4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d4c:	4b0c      	ldr	r3, [pc, #48]	; (8002d80 <__NVIC_SetPriorityGrouping+0x44>)
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d52:	68ba      	ldr	r2, [r7, #8]
 8002d54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d58:	4013      	ands	r3, r2
 8002d5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d6e:	4a04      	ldr	r2, [pc, #16]	; (8002d80 <__NVIC_SetPriorityGrouping+0x44>)
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	60d3      	str	r3, [r2, #12]
}
 8002d74:	bf00      	nop
 8002d76:	3714      	adds	r7, #20
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bc80      	pop	{r7}
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	e000ed00 	.word	0xe000ed00

08002d84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d88:	4b04      	ldr	r3, [pc, #16]	; (8002d9c <__NVIC_GetPriorityGrouping+0x18>)
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	0a1b      	lsrs	r3, r3, #8
 8002d8e:	f003 0307 	and.w	r3, r3, #7
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bc80      	pop	{r7}
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	e000ed00 	.word	0xe000ed00

08002da0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	4603      	mov	r3, r0
 8002da8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	db0b      	blt.n	8002dca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002db2:	79fb      	ldrb	r3, [r7, #7]
 8002db4:	f003 021f 	and.w	r2, r3, #31
 8002db8:	4906      	ldr	r1, [pc, #24]	; (8002dd4 <__NVIC_EnableIRQ+0x34>)
 8002dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dbe:	095b      	lsrs	r3, r3, #5
 8002dc0:	2001      	movs	r0, #1
 8002dc2:	fa00 f202 	lsl.w	r2, r0, r2
 8002dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002dca:	bf00      	nop
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bc80      	pop	{r7}
 8002dd2:	4770      	bx	lr
 8002dd4:	e000e100 	.word	0xe000e100

08002dd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	4603      	mov	r3, r0
 8002de0:	6039      	str	r1, [r7, #0]
 8002de2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	db0a      	blt.n	8002e02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	b2da      	uxtb	r2, r3
 8002df0:	490c      	ldr	r1, [pc, #48]	; (8002e24 <__NVIC_SetPriority+0x4c>)
 8002df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df6:	0112      	lsls	r2, r2, #4
 8002df8:	b2d2      	uxtb	r2, r2
 8002dfa:	440b      	add	r3, r1
 8002dfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e00:	e00a      	b.n	8002e18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	b2da      	uxtb	r2, r3
 8002e06:	4908      	ldr	r1, [pc, #32]	; (8002e28 <__NVIC_SetPriority+0x50>)
 8002e08:	79fb      	ldrb	r3, [r7, #7]
 8002e0a:	f003 030f 	and.w	r3, r3, #15
 8002e0e:	3b04      	subs	r3, #4
 8002e10:	0112      	lsls	r2, r2, #4
 8002e12:	b2d2      	uxtb	r2, r2
 8002e14:	440b      	add	r3, r1
 8002e16:	761a      	strb	r2, [r3, #24]
}
 8002e18:	bf00      	nop
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bc80      	pop	{r7}
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	e000e100 	.word	0xe000e100
 8002e28:	e000ed00 	.word	0xe000ed00

08002e2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b089      	sub	sp, #36	; 0x24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f003 0307 	and.w	r3, r3, #7
 8002e3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	f1c3 0307 	rsb	r3, r3, #7
 8002e46:	2b04      	cmp	r3, #4
 8002e48:	bf28      	it	cs
 8002e4a:	2304      	movcs	r3, #4
 8002e4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	3304      	adds	r3, #4
 8002e52:	2b06      	cmp	r3, #6
 8002e54:	d902      	bls.n	8002e5c <NVIC_EncodePriority+0x30>
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	3b03      	subs	r3, #3
 8002e5a:	e000      	b.n	8002e5e <NVIC_EncodePriority+0x32>
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e60:	f04f 32ff 	mov.w	r2, #4294967295
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6a:	43da      	mvns	r2, r3
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	401a      	ands	r2, r3
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e74:	f04f 31ff 	mov.w	r1, #4294967295
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e7e:	43d9      	mvns	r1, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e84:	4313      	orrs	r3, r2
         );
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3724      	adds	r7, #36	; 0x24
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bc80      	pop	{r7}
 8002e8e:	4770      	bx	lr

08002e90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ea0:	d301      	bcc.n	8002ea6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e00f      	b.n	8002ec6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ea6:	4a0a      	ldr	r2, [pc, #40]	; (8002ed0 <SysTick_Config+0x40>)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002eae:	210f      	movs	r1, #15
 8002eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8002eb4:	f7ff ff90 	bl	8002dd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002eb8:	4b05      	ldr	r3, [pc, #20]	; (8002ed0 <SysTick_Config+0x40>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ebe:	4b04      	ldr	r3, [pc, #16]	; (8002ed0 <SysTick_Config+0x40>)
 8002ec0:	2207      	movs	r2, #7
 8002ec2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	e000e010 	.word	0xe000e010

08002ed4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f7ff ff2d 	bl	8002d3c <__NVIC_SetPriorityGrouping>
}
 8002ee2:	bf00      	nop
 8002ee4:	3708      	adds	r7, #8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b086      	sub	sp, #24
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	60b9      	str	r1, [r7, #8]
 8002ef4:	607a      	str	r2, [r7, #4]
 8002ef6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002efc:	f7ff ff42 	bl	8002d84 <__NVIC_GetPriorityGrouping>
 8002f00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	68b9      	ldr	r1, [r7, #8]
 8002f06:	6978      	ldr	r0, [r7, #20]
 8002f08:	f7ff ff90 	bl	8002e2c <NVIC_EncodePriority>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f12:	4611      	mov	r1, r2
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7ff ff5f 	bl	8002dd8 <__NVIC_SetPriority>
}
 8002f1a:	bf00      	nop
 8002f1c:	3718      	adds	r7, #24
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b082      	sub	sp, #8
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	4603      	mov	r3, r0
 8002f2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7ff ff35 	bl	8002da0 <__NVIC_EnableIRQ>
}
 8002f36:	bf00      	nop
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b082      	sub	sp, #8
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f7ff ffa2 	bl	8002e90 <SysTick_Config>
 8002f4c:	4603      	mov	r3, r0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
	...

08002f58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b08b      	sub	sp, #44	; 0x2c
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f62:	2300      	movs	r3, #0
 8002f64:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002f66:	2300      	movs	r3, #0
 8002f68:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f6a:	e169      	b.n	8003240 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f70:	fa02 f303 	lsl.w	r3, r2, r3
 8002f74:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	69fa      	ldr	r2, [r7, #28]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	f040 8158 	bne.w	800323a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	4a9a      	ldr	r2, [pc, #616]	; (80031f8 <HAL_GPIO_Init+0x2a0>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d05e      	beq.n	8003052 <HAL_GPIO_Init+0xfa>
 8002f94:	4a98      	ldr	r2, [pc, #608]	; (80031f8 <HAL_GPIO_Init+0x2a0>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d875      	bhi.n	8003086 <HAL_GPIO_Init+0x12e>
 8002f9a:	4a98      	ldr	r2, [pc, #608]	; (80031fc <HAL_GPIO_Init+0x2a4>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d058      	beq.n	8003052 <HAL_GPIO_Init+0xfa>
 8002fa0:	4a96      	ldr	r2, [pc, #600]	; (80031fc <HAL_GPIO_Init+0x2a4>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d86f      	bhi.n	8003086 <HAL_GPIO_Init+0x12e>
 8002fa6:	4a96      	ldr	r2, [pc, #600]	; (8003200 <HAL_GPIO_Init+0x2a8>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d052      	beq.n	8003052 <HAL_GPIO_Init+0xfa>
 8002fac:	4a94      	ldr	r2, [pc, #592]	; (8003200 <HAL_GPIO_Init+0x2a8>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d869      	bhi.n	8003086 <HAL_GPIO_Init+0x12e>
 8002fb2:	4a94      	ldr	r2, [pc, #592]	; (8003204 <HAL_GPIO_Init+0x2ac>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d04c      	beq.n	8003052 <HAL_GPIO_Init+0xfa>
 8002fb8:	4a92      	ldr	r2, [pc, #584]	; (8003204 <HAL_GPIO_Init+0x2ac>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d863      	bhi.n	8003086 <HAL_GPIO_Init+0x12e>
 8002fbe:	4a92      	ldr	r2, [pc, #584]	; (8003208 <HAL_GPIO_Init+0x2b0>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d046      	beq.n	8003052 <HAL_GPIO_Init+0xfa>
 8002fc4:	4a90      	ldr	r2, [pc, #576]	; (8003208 <HAL_GPIO_Init+0x2b0>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d85d      	bhi.n	8003086 <HAL_GPIO_Init+0x12e>
 8002fca:	2b12      	cmp	r3, #18
 8002fcc:	d82a      	bhi.n	8003024 <HAL_GPIO_Init+0xcc>
 8002fce:	2b12      	cmp	r3, #18
 8002fd0:	d859      	bhi.n	8003086 <HAL_GPIO_Init+0x12e>
 8002fd2:	a201      	add	r2, pc, #4	; (adr r2, 8002fd8 <HAL_GPIO_Init+0x80>)
 8002fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fd8:	08003053 	.word	0x08003053
 8002fdc:	0800302d 	.word	0x0800302d
 8002fe0:	0800303f 	.word	0x0800303f
 8002fe4:	08003081 	.word	0x08003081
 8002fe8:	08003087 	.word	0x08003087
 8002fec:	08003087 	.word	0x08003087
 8002ff0:	08003087 	.word	0x08003087
 8002ff4:	08003087 	.word	0x08003087
 8002ff8:	08003087 	.word	0x08003087
 8002ffc:	08003087 	.word	0x08003087
 8003000:	08003087 	.word	0x08003087
 8003004:	08003087 	.word	0x08003087
 8003008:	08003087 	.word	0x08003087
 800300c:	08003087 	.word	0x08003087
 8003010:	08003087 	.word	0x08003087
 8003014:	08003087 	.word	0x08003087
 8003018:	08003087 	.word	0x08003087
 800301c:	08003035 	.word	0x08003035
 8003020:	08003049 	.word	0x08003049
 8003024:	4a79      	ldr	r2, [pc, #484]	; (800320c <HAL_GPIO_Init+0x2b4>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d013      	beq.n	8003052 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800302a:	e02c      	b.n	8003086 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	623b      	str	r3, [r7, #32]
          break;
 8003032:	e029      	b.n	8003088 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	3304      	adds	r3, #4
 800303a:	623b      	str	r3, [r7, #32]
          break;
 800303c:	e024      	b.n	8003088 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	3308      	adds	r3, #8
 8003044:	623b      	str	r3, [r7, #32]
          break;
 8003046:	e01f      	b.n	8003088 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	330c      	adds	r3, #12
 800304e:	623b      	str	r3, [r7, #32]
          break;
 8003050:	e01a      	b.n	8003088 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d102      	bne.n	8003060 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800305a:	2304      	movs	r3, #4
 800305c:	623b      	str	r3, [r7, #32]
          break;
 800305e:	e013      	b.n	8003088 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d105      	bne.n	8003074 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003068:	2308      	movs	r3, #8
 800306a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	69fa      	ldr	r2, [r7, #28]
 8003070:	611a      	str	r2, [r3, #16]
          break;
 8003072:	e009      	b.n	8003088 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003074:	2308      	movs	r3, #8
 8003076:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	69fa      	ldr	r2, [r7, #28]
 800307c:	615a      	str	r2, [r3, #20]
          break;
 800307e:	e003      	b.n	8003088 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003080:	2300      	movs	r3, #0
 8003082:	623b      	str	r3, [r7, #32]
          break;
 8003084:	e000      	b.n	8003088 <HAL_GPIO_Init+0x130>
          break;
 8003086:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	2bff      	cmp	r3, #255	; 0xff
 800308c:	d801      	bhi.n	8003092 <HAL_GPIO_Init+0x13a>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	e001      	b.n	8003096 <HAL_GPIO_Init+0x13e>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	3304      	adds	r3, #4
 8003096:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	2bff      	cmp	r3, #255	; 0xff
 800309c:	d802      	bhi.n	80030a4 <HAL_GPIO_Init+0x14c>
 800309e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	e002      	b.n	80030aa <HAL_GPIO_Init+0x152>
 80030a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a6:	3b08      	subs	r3, #8
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	210f      	movs	r1, #15
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	fa01 f303 	lsl.w	r3, r1, r3
 80030b8:	43db      	mvns	r3, r3
 80030ba:	401a      	ands	r2, r3
 80030bc:	6a39      	ldr	r1, [r7, #32]
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	fa01 f303 	lsl.w	r3, r1, r3
 80030c4:	431a      	orrs	r2, r3
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	f000 80b1 	beq.w	800323a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80030d8:	4b4d      	ldr	r3, [pc, #308]	; (8003210 <HAL_GPIO_Init+0x2b8>)
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	4a4c      	ldr	r2, [pc, #304]	; (8003210 <HAL_GPIO_Init+0x2b8>)
 80030de:	f043 0301 	orr.w	r3, r3, #1
 80030e2:	6193      	str	r3, [r2, #24]
 80030e4:	4b4a      	ldr	r3, [pc, #296]	; (8003210 <HAL_GPIO_Init+0x2b8>)
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	f003 0301 	and.w	r3, r3, #1
 80030ec:	60bb      	str	r3, [r7, #8]
 80030ee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80030f0:	4a48      	ldr	r2, [pc, #288]	; (8003214 <HAL_GPIO_Init+0x2bc>)
 80030f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f4:	089b      	lsrs	r3, r3, #2
 80030f6:	3302      	adds	r3, #2
 80030f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030fc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80030fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003100:	f003 0303 	and.w	r3, r3, #3
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	220f      	movs	r2, #15
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	43db      	mvns	r3, r3
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	4013      	ands	r3, r2
 8003112:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a40      	ldr	r2, [pc, #256]	; (8003218 <HAL_GPIO_Init+0x2c0>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d013      	beq.n	8003144 <HAL_GPIO_Init+0x1ec>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4a3f      	ldr	r2, [pc, #252]	; (800321c <HAL_GPIO_Init+0x2c4>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d00d      	beq.n	8003140 <HAL_GPIO_Init+0x1e8>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a3e      	ldr	r2, [pc, #248]	; (8003220 <HAL_GPIO_Init+0x2c8>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d007      	beq.n	800313c <HAL_GPIO_Init+0x1e4>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4a3d      	ldr	r2, [pc, #244]	; (8003224 <HAL_GPIO_Init+0x2cc>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d101      	bne.n	8003138 <HAL_GPIO_Init+0x1e0>
 8003134:	2303      	movs	r3, #3
 8003136:	e006      	b.n	8003146 <HAL_GPIO_Init+0x1ee>
 8003138:	2304      	movs	r3, #4
 800313a:	e004      	b.n	8003146 <HAL_GPIO_Init+0x1ee>
 800313c:	2302      	movs	r3, #2
 800313e:	e002      	b.n	8003146 <HAL_GPIO_Init+0x1ee>
 8003140:	2301      	movs	r3, #1
 8003142:	e000      	b.n	8003146 <HAL_GPIO_Init+0x1ee>
 8003144:	2300      	movs	r3, #0
 8003146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003148:	f002 0203 	and.w	r2, r2, #3
 800314c:	0092      	lsls	r2, r2, #2
 800314e:	4093      	lsls	r3, r2
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	4313      	orrs	r3, r2
 8003154:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003156:	492f      	ldr	r1, [pc, #188]	; (8003214 <HAL_GPIO_Init+0x2bc>)
 8003158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315a:	089b      	lsrs	r3, r3, #2
 800315c:	3302      	adds	r3, #2
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d006      	beq.n	800317e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003170:	4b2d      	ldr	r3, [pc, #180]	; (8003228 <HAL_GPIO_Init+0x2d0>)
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	492c      	ldr	r1, [pc, #176]	; (8003228 <HAL_GPIO_Init+0x2d0>)
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	4313      	orrs	r3, r2
 800317a:	600b      	str	r3, [r1, #0]
 800317c:	e006      	b.n	800318c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800317e:	4b2a      	ldr	r3, [pc, #168]	; (8003228 <HAL_GPIO_Init+0x2d0>)
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	43db      	mvns	r3, r3
 8003186:	4928      	ldr	r1, [pc, #160]	; (8003228 <HAL_GPIO_Init+0x2d0>)
 8003188:	4013      	ands	r3, r2
 800318a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d006      	beq.n	80031a6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003198:	4b23      	ldr	r3, [pc, #140]	; (8003228 <HAL_GPIO_Init+0x2d0>)
 800319a:	685a      	ldr	r2, [r3, #4]
 800319c:	4922      	ldr	r1, [pc, #136]	; (8003228 <HAL_GPIO_Init+0x2d0>)
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	604b      	str	r3, [r1, #4]
 80031a4:	e006      	b.n	80031b4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80031a6:	4b20      	ldr	r3, [pc, #128]	; (8003228 <HAL_GPIO_Init+0x2d0>)
 80031a8:	685a      	ldr	r2, [r3, #4]
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	43db      	mvns	r3, r3
 80031ae:	491e      	ldr	r1, [pc, #120]	; (8003228 <HAL_GPIO_Init+0x2d0>)
 80031b0:	4013      	ands	r3, r2
 80031b2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d006      	beq.n	80031ce <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80031c0:	4b19      	ldr	r3, [pc, #100]	; (8003228 <HAL_GPIO_Init+0x2d0>)
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	4918      	ldr	r1, [pc, #96]	; (8003228 <HAL_GPIO_Init+0x2d0>)
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	608b      	str	r3, [r1, #8]
 80031cc:	e006      	b.n	80031dc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80031ce:	4b16      	ldr	r3, [pc, #88]	; (8003228 <HAL_GPIO_Init+0x2d0>)
 80031d0:	689a      	ldr	r2, [r3, #8]
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	43db      	mvns	r3, r3
 80031d6:	4914      	ldr	r1, [pc, #80]	; (8003228 <HAL_GPIO_Init+0x2d0>)
 80031d8:	4013      	ands	r3, r2
 80031da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d021      	beq.n	800322c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80031e8:	4b0f      	ldr	r3, [pc, #60]	; (8003228 <HAL_GPIO_Init+0x2d0>)
 80031ea:	68da      	ldr	r2, [r3, #12]
 80031ec:	490e      	ldr	r1, [pc, #56]	; (8003228 <HAL_GPIO_Init+0x2d0>)
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	60cb      	str	r3, [r1, #12]
 80031f4:	e021      	b.n	800323a <HAL_GPIO_Init+0x2e2>
 80031f6:	bf00      	nop
 80031f8:	10320000 	.word	0x10320000
 80031fc:	10310000 	.word	0x10310000
 8003200:	10220000 	.word	0x10220000
 8003204:	10210000 	.word	0x10210000
 8003208:	10120000 	.word	0x10120000
 800320c:	10110000 	.word	0x10110000
 8003210:	40021000 	.word	0x40021000
 8003214:	40010000 	.word	0x40010000
 8003218:	40010800 	.word	0x40010800
 800321c:	40010c00 	.word	0x40010c00
 8003220:	40011000 	.word	0x40011000
 8003224:	40011400 	.word	0x40011400
 8003228:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800322c:	4b0b      	ldr	r3, [pc, #44]	; (800325c <HAL_GPIO_Init+0x304>)
 800322e:	68da      	ldr	r2, [r3, #12]
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	43db      	mvns	r3, r3
 8003234:	4909      	ldr	r1, [pc, #36]	; (800325c <HAL_GPIO_Init+0x304>)
 8003236:	4013      	ands	r3, r2
 8003238:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800323a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323c:	3301      	adds	r3, #1
 800323e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003246:	fa22 f303 	lsr.w	r3, r2, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	f47f ae8e 	bne.w	8002f6c <HAL_GPIO_Init+0x14>
  }
}
 8003250:	bf00      	nop
 8003252:	bf00      	nop
 8003254:	372c      	adds	r7, #44	; 0x2c
 8003256:	46bd      	mov	sp, r7
 8003258:	bc80      	pop	{r7}
 800325a:	4770      	bx	lr
 800325c:	40010400 	.word	0x40010400

08003260 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	460b      	mov	r3, r1
 800326a:	807b      	strh	r3, [r7, #2]
 800326c:	4613      	mov	r3, r2
 800326e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003270:	787b      	ldrb	r3, [r7, #1]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d003      	beq.n	800327e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003276:	887a      	ldrh	r2, [r7, #2]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800327c:	e003      	b.n	8003286 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800327e:	887b      	ldrh	r3, [r7, #2]
 8003280:	041a      	lsls	r2, r3, #16
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	611a      	str	r2, [r3, #16]
}
 8003286:	bf00      	nop
 8003288:	370c      	adds	r7, #12
 800328a:	46bd      	mov	sp, r7
 800328c:	bc80      	pop	{r7}
 800328e:	4770      	bx	lr

08003290 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003290:	b480      	push	{r7}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	460b      	mov	r3, r1
 800329a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80032a2:	887a      	ldrh	r2, [r7, #2]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	4013      	ands	r3, r2
 80032a8:	041a      	lsls	r2, r3, #16
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	43d9      	mvns	r1, r3
 80032ae:	887b      	ldrh	r3, [r7, #2]
 80032b0:	400b      	ands	r3, r1
 80032b2:	431a      	orrs	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	611a      	str	r2, [r3, #16]
}
 80032b8:	bf00      	nop
 80032ba:	3714      	adds	r7, #20
 80032bc:	46bd      	mov	sp, r7
 80032be:	bc80      	pop	{r7}
 80032c0:	4770      	bx	lr
	...

080032c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b086      	sub	sp, #24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d101      	bne.n	80032d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e26c      	b.n	80037b0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	2b00      	cmp	r3, #0
 80032e0:	f000 8087 	beq.w	80033f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032e4:	4b92      	ldr	r3, [pc, #584]	; (8003530 <HAL_RCC_OscConfig+0x26c>)
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f003 030c 	and.w	r3, r3, #12
 80032ec:	2b04      	cmp	r3, #4
 80032ee:	d00c      	beq.n	800330a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80032f0:	4b8f      	ldr	r3, [pc, #572]	; (8003530 <HAL_RCC_OscConfig+0x26c>)
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f003 030c 	and.w	r3, r3, #12
 80032f8:	2b08      	cmp	r3, #8
 80032fa:	d112      	bne.n	8003322 <HAL_RCC_OscConfig+0x5e>
 80032fc:	4b8c      	ldr	r3, [pc, #560]	; (8003530 <HAL_RCC_OscConfig+0x26c>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003308:	d10b      	bne.n	8003322 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800330a:	4b89      	ldr	r3, [pc, #548]	; (8003530 <HAL_RCC_OscConfig+0x26c>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d06c      	beq.n	80033f0 <HAL_RCC_OscConfig+0x12c>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d168      	bne.n	80033f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e246      	b.n	80037b0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800332a:	d106      	bne.n	800333a <HAL_RCC_OscConfig+0x76>
 800332c:	4b80      	ldr	r3, [pc, #512]	; (8003530 <HAL_RCC_OscConfig+0x26c>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a7f      	ldr	r2, [pc, #508]	; (8003530 <HAL_RCC_OscConfig+0x26c>)
 8003332:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003336:	6013      	str	r3, [r2, #0]
 8003338:	e02e      	b.n	8003398 <HAL_RCC_OscConfig+0xd4>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10c      	bne.n	800335c <HAL_RCC_OscConfig+0x98>
 8003342:	4b7b      	ldr	r3, [pc, #492]	; (8003530 <HAL_RCC_OscConfig+0x26c>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a7a      	ldr	r2, [pc, #488]	; (8003530 <HAL_RCC_OscConfig+0x26c>)
 8003348:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800334c:	6013      	str	r3, [r2, #0]
 800334e:	4b78      	ldr	r3, [pc, #480]	; (8003530 <HAL_RCC_OscConfig+0x26c>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a77      	ldr	r2, [pc, #476]	; (8003530 <HAL_RCC_OscConfig+0x26c>)
 8003354:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003358:	6013      	str	r3, [r2, #0]
 800335a:	e01d      	b.n	8003398 <HAL_RCC_OscConfig+0xd4>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003364:	d10c      	bne.n	8003380 <HAL_RCC_OscConfig+0xbc>
 8003366:	4b72      	ldr	r3, [pc, #456]	; (8003530 <HAL_RCC_OscConfig+0x26c>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a71      	ldr	r2, [pc, #452]	; (8003530 <HAL_RCC_OscConfig+0x26c>)
 800336c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003370:	6013      	str	r3, [r2, #0]
 8003372:	4b6f      	ldr	r3, [pc, #444]	; (8003530 <HAL_RCC_OscConfig+0x26c>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a6e      	ldr	r2, [pc, #440]	; (8003530 <HAL_RCC_OscConfig+0x26c>)
 8003378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800337c:	6013      	str	r3, [r2, #0]
 800337e:	e00b      	b.n	8003398 <HAL_RCC_OscConfig+0xd4>
 8003380:	4b6b      	ldr	r3, [pc, #428]	; (8003530 <HAL_RCC_OscConfig+0x26c>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a6a      	ldr	r2, [pc, #424]	; (8003530 <HAL_RCC_OscConfig+0x26c>)
 8003386:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800338a:	6013      	str	r3, [r2, #0]
 800338c:	4b68      	ldr	r3, [pc, #416]	; (8003530 <HAL_RCC_OscConfig+0x26c>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a67      	ldr	r2, [pc, #412]	; (8003530 <HAL_RCC_OscConfig+0x26c>)
 8003392:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003396:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d013      	beq.n	80033c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a0:	f7ff f89e 	bl	80024e0 <HAL_GetTick>
 80033a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033a6:	e008      	b.n	80033ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033a8:	f7ff f89a 	bl	80024e0 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b64      	cmp	r3, #100	; 0x64
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e1fa      	b.n	80037b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ba:	4b5d      	ldr	r3, [pc, #372]	; (8003530 <HAL_RCC_OscConfig+0x26c>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d0f0      	beq.n	80033a8 <HAL_RCC_OscConfig+0xe4>
 80033c6:	e014      	b.n	80033f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c8:	f7ff f88a 	bl	80024e0 <HAL_GetTick>
 80033cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ce:	e008      	b.n	80033e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033d0:	f7ff f886 	bl	80024e0 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b64      	cmp	r3, #100	; 0x64
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e1e6      	b.n	80037b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033e2:	4b53      	ldr	r3, [pc, #332]	; (8003530 <HAL_RCC_OscConfig+0x26c>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1f0      	bne.n	80033d0 <HAL_RCC_OscConfig+0x10c>
 80033ee:	e000      	b.n	80033f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d063      	beq.n	80034c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033fe:	4b4c      	ldr	r3, [pc, #304]	; (8003530 <HAL_RCC_OscConfig+0x26c>)
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f003 030c 	and.w	r3, r3, #12
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00b      	beq.n	8003422 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800340a:	4b49      	ldr	r3, [pc, #292]	; (8003530 <HAL_RCC_OscConfig+0x26c>)
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f003 030c 	and.w	r3, r3, #12
 8003412:	2b08      	cmp	r3, #8
 8003414:	d11c      	bne.n	8003450 <HAL_RCC_OscConfig+0x18c>
 8003416:	4b46      	ldr	r3, [pc, #280]	; (8003530 <HAL_RCC_OscConfig+0x26c>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d116      	bne.n	8003450 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003422:	4b43      	ldr	r3, [pc, #268]	; (8003530 <HAL_RCC_OscConfig+0x26c>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d005      	beq.n	800343a <HAL_RCC_OscConfig+0x176>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d001      	beq.n	800343a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e1ba      	b.n	80037b0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800343a:	4b3d      	ldr	r3, [pc, #244]	; (8003530 <HAL_RCC_OscConfig+0x26c>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	4939      	ldr	r1, [pc, #228]	; (8003530 <HAL_RCC_OscConfig+0x26c>)
 800344a:	4313      	orrs	r3, r2
 800344c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800344e:	e03a      	b.n	80034c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d020      	beq.n	800349a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003458:	4b36      	ldr	r3, [pc, #216]	; (8003534 <HAL_RCC_OscConfig+0x270>)
 800345a:	2201      	movs	r2, #1
 800345c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800345e:	f7ff f83f 	bl	80024e0 <HAL_GetTick>
 8003462:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003464:	e008      	b.n	8003478 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003466:	f7ff f83b 	bl	80024e0 <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	2b02      	cmp	r3, #2
 8003472:	d901      	bls.n	8003478 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e19b      	b.n	80037b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003478:	4b2d      	ldr	r3, [pc, #180]	; (8003530 <HAL_RCC_OscConfig+0x26c>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0302 	and.w	r3, r3, #2
 8003480:	2b00      	cmp	r3, #0
 8003482:	d0f0      	beq.n	8003466 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003484:	4b2a      	ldr	r3, [pc, #168]	; (8003530 <HAL_RCC_OscConfig+0x26c>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	695b      	ldr	r3, [r3, #20]
 8003490:	00db      	lsls	r3, r3, #3
 8003492:	4927      	ldr	r1, [pc, #156]	; (8003530 <HAL_RCC_OscConfig+0x26c>)
 8003494:	4313      	orrs	r3, r2
 8003496:	600b      	str	r3, [r1, #0]
 8003498:	e015      	b.n	80034c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800349a:	4b26      	ldr	r3, [pc, #152]	; (8003534 <HAL_RCC_OscConfig+0x270>)
 800349c:	2200      	movs	r2, #0
 800349e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a0:	f7ff f81e 	bl	80024e0 <HAL_GetTick>
 80034a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034a6:	e008      	b.n	80034ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034a8:	f7ff f81a 	bl	80024e0 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e17a      	b.n	80037b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ba:	4b1d      	ldr	r3, [pc, #116]	; (8003530 <HAL_RCC_OscConfig+0x26c>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1f0      	bne.n	80034a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0308 	and.w	r3, r3, #8
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d03a      	beq.n	8003548 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d019      	beq.n	800350e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034da:	4b17      	ldr	r3, [pc, #92]	; (8003538 <HAL_RCC_OscConfig+0x274>)
 80034dc:	2201      	movs	r2, #1
 80034de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034e0:	f7fe fffe 	bl	80024e0 <HAL_GetTick>
 80034e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034e6:	e008      	b.n	80034fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034e8:	f7fe fffa 	bl	80024e0 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e15a      	b.n	80037b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034fa:	4b0d      	ldr	r3, [pc, #52]	; (8003530 <HAL_RCC_OscConfig+0x26c>)
 80034fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	2b00      	cmp	r3, #0
 8003504:	d0f0      	beq.n	80034e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003506:	2001      	movs	r0, #1
 8003508:	f000 fad8 	bl	8003abc <RCC_Delay>
 800350c:	e01c      	b.n	8003548 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800350e:	4b0a      	ldr	r3, [pc, #40]	; (8003538 <HAL_RCC_OscConfig+0x274>)
 8003510:	2200      	movs	r2, #0
 8003512:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003514:	f7fe ffe4 	bl	80024e0 <HAL_GetTick>
 8003518:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800351a:	e00f      	b.n	800353c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800351c:	f7fe ffe0 	bl	80024e0 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b02      	cmp	r3, #2
 8003528:	d908      	bls.n	800353c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e140      	b.n	80037b0 <HAL_RCC_OscConfig+0x4ec>
 800352e:	bf00      	nop
 8003530:	40021000 	.word	0x40021000
 8003534:	42420000 	.word	0x42420000
 8003538:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800353c:	4b9e      	ldr	r3, [pc, #632]	; (80037b8 <HAL_RCC_OscConfig+0x4f4>)
 800353e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003540:	f003 0302 	and.w	r3, r3, #2
 8003544:	2b00      	cmp	r3, #0
 8003546:	d1e9      	bne.n	800351c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0304 	and.w	r3, r3, #4
 8003550:	2b00      	cmp	r3, #0
 8003552:	f000 80a6 	beq.w	80036a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003556:	2300      	movs	r3, #0
 8003558:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800355a:	4b97      	ldr	r3, [pc, #604]	; (80037b8 <HAL_RCC_OscConfig+0x4f4>)
 800355c:	69db      	ldr	r3, [r3, #28]
 800355e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d10d      	bne.n	8003582 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003566:	4b94      	ldr	r3, [pc, #592]	; (80037b8 <HAL_RCC_OscConfig+0x4f4>)
 8003568:	69db      	ldr	r3, [r3, #28]
 800356a:	4a93      	ldr	r2, [pc, #588]	; (80037b8 <HAL_RCC_OscConfig+0x4f4>)
 800356c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003570:	61d3      	str	r3, [r2, #28]
 8003572:	4b91      	ldr	r3, [pc, #580]	; (80037b8 <HAL_RCC_OscConfig+0x4f4>)
 8003574:	69db      	ldr	r3, [r3, #28]
 8003576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800357a:	60bb      	str	r3, [r7, #8]
 800357c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800357e:	2301      	movs	r3, #1
 8003580:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003582:	4b8e      	ldr	r3, [pc, #568]	; (80037bc <HAL_RCC_OscConfig+0x4f8>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800358a:	2b00      	cmp	r3, #0
 800358c:	d118      	bne.n	80035c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800358e:	4b8b      	ldr	r3, [pc, #556]	; (80037bc <HAL_RCC_OscConfig+0x4f8>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a8a      	ldr	r2, [pc, #552]	; (80037bc <HAL_RCC_OscConfig+0x4f8>)
 8003594:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003598:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800359a:	f7fe ffa1 	bl	80024e0 <HAL_GetTick>
 800359e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035a0:	e008      	b.n	80035b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035a2:	f7fe ff9d 	bl	80024e0 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	2b64      	cmp	r3, #100	; 0x64
 80035ae:	d901      	bls.n	80035b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e0fd      	b.n	80037b0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035b4:	4b81      	ldr	r3, [pc, #516]	; (80037bc <HAL_RCC_OscConfig+0x4f8>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d0f0      	beq.n	80035a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d106      	bne.n	80035d6 <HAL_RCC_OscConfig+0x312>
 80035c8:	4b7b      	ldr	r3, [pc, #492]	; (80037b8 <HAL_RCC_OscConfig+0x4f4>)
 80035ca:	6a1b      	ldr	r3, [r3, #32]
 80035cc:	4a7a      	ldr	r2, [pc, #488]	; (80037b8 <HAL_RCC_OscConfig+0x4f4>)
 80035ce:	f043 0301 	orr.w	r3, r3, #1
 80035d2:	6213      	str	r3, [r2, #32]
 80035d4:	e02d      	b.n	8003632 <HAL_RCC_OscConfig+0x36e>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10c      	bne.n	80035f8 <HAL_RCC_OscConfig+0x334>
 80035de:	4b76      	ldr	r3, [pc, #472]	; (80037b8 <HAL_RCC_OscConfig+0x4f4>)
 80035e0:	6a1b      	ldr	r3, [r3, #32]
 80035e2:	4a75      	ldr	r2, [pc, #468]	; (80037b8 <HAL_RCC_OscConfig+0x4f4>)
 80035e4:	f023 0301 	bic.w	r3, r3, #1
 80035e8:	6213      	str	r3, [r2, #32]
 80035ea:	4b73      	ldr	r3, [pc, #460]	; (80037b8 <HAL_RCC_OscConfig+0x4f4>)
 80035ec:	6a1b      	ldr	r3, [r3, #32]
 80035ee:	4a72      	ldr	r2, [pc, #456]	; (80037b8 <HAL_RCC_OscConfig+0x4f4>)
 80035f0:	f023 0304 	bic.w	r3, r3, #4
 80035f4:	6213      	str	r3, [r2, #32]
 80035f6:	e01c      	b.n	8003632 <HAL_RCC_OscConfig+0x36e>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	2b05      	cmp	r3, #5
 80035fe:	d10c      	bne.n	800361a <HAL_RCC_OscConfig+0x356>
 8003600:	4b6d      	ldr	r3, [pc, #436]	; (80037b8 <HAL_RCC_OscConfig+0x4f4>)
 8003602:	6a1b      	ldr	r3, [r3, #32]
 8003604:	4a6c      	ldr	r2, [pc, #432]	; (80037b8 <HAL_RCC_OscConfig+0x4f4>)
 8003606:	f043 0304 	orr.w	r3, r3, #4
 800360a:	6213      	str	r3, [r2, #32]
 800360c:	4b6a      	ldr	r3, [pc, #424]	; (80037b8 <HAL_RCC_OscConfig+0x4f4>)
 800360e:	6a1b      	ldr	r3, [r3, #32]
 8003610:	4a69      	ldr	r2, [pc, #420]	; (80037b8 <HAL_RCC_OscConfig+0x4f4>)
 8003612:	f043 0301 	orr.w	r3, r3, #1
 8003616:	6213      	str	r3, [r2, #32]
 8003618:	e00b      	b.n	8003632 <HAL_RCC_OscConfig+0x36e>
 800361a:	4b67      	ldr	r3, [pc, #412]	; (80037b8 <HAL_RCC_OscConfig+0x4f4>)
 800361c:	6a1b      	ldr	r3, [r3, #32]
 800361e:	4a66      	ldr	r2, [pc, #408]	; (80037b8 <HAL_RCC_OscConfig+0x4f4>)
 8003620:	f023 0301 	bic.w	r3, r3, #1
 8003624:	6213      	str	r3, [r2, #32]
 8003626:	4b64      	ldr	r3, [pc, #400]	; (80037b8 <HAL_RCC_OscConfig+0x4f4>)
 8003628:	6a1b      	ldr	r3, [r3, #32]
 800362a:	4a63      	ldr	r2, [pc, #396]	; (80037b8 <HAL_RCC_OscConfig+0x4f4>)
 800362c:	f023 0304 	bic.w	r3, r3, #4
 8003630:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d015      	beq.n	8003666 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800363a:	f7fe ff51 	bl	80024e0 <HAL_GetTick>
 800363e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003640:	e00a      	b.n	8003658 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003642:	f7fe ff4d 	bl	80024e0 <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003650:	4293      	cmp	r3, r2
 8003652:	d901      	bls.n	8003658 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e0ab      	b.n	80037b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003658:	4b57      	ldr	r3, [pc, #348]	; (80037b8 <HAL_RCC_OscConfig+0x4f4>)
 800365a:	6a1b      	ldr	r3, [r3, #32]
 800365c:	f003 0302 	and.w	r3, r3, #2
 8003660:	2b00      	cmp	r3, #0
 8003662:	d0ee      	beq.n	8003642 <HAL_RCC_OscConfig+0x37e>
 8003664:	e014      	b.n	8003690 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003666:	f7fe ff3b 	bl	80024e0 <HAL_GetTick>
 800366a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800366c:	e00a      	b.n	8003684 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800366e:	f7fe ff37 	bl	80024e0 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	f241 3288 	movw	r2, #5000	; 0x1388
 800367c:	4293      	cmp	r3, r2
 800367e:	d901      	bls.n	8003684 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e095      	b.n	80037b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003684:	4b4c      	ldr	r3, [pc, #304]	; (80037b8 <HAL_RCC_OscConfig+0x4f4>)
 8003686:	6a1b      	ldr	r3, [r3, #32]
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d1ee      	bne.n	800366e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003690:	7dfb      	ldrb	r3, [r7, #23]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d105      	bne.n	80036a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003696:	4b48      	ldr	r3, [pc, #288]	; (80037b8 <HAL_RCC_OscConfig+0x4f4>)
 8003698:	69db      	ldr	r3, [r3, #28]
 800369a:	4a47      	ldr	r2, [pc, #284]	; (80037b8 <HAL_RCC_OscConfig+0x4f4>)
 800369c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	69db      	ldr	r3, [r3, #28]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f000 8081 	beq.w	80037ae <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036ac:	4b42      	ldr	r3, [pc, #264]	; (80037b8 <HAL_RCC_OscConfig+0x4f4>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f003 030c 	and.w	r3, r3, #12
 80036b4:	2b08      	cmp	r3, #8
 80036b6:	d061      	beq.n	800377c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	69db      	ldr	r3, [r3, #28]
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d146      	bne.n	800374e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036c0:	4b3f      	ldr	r3, [pc, #252]	; (80037c0 <HAL_RCC_OscConfig+0x4fc>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c6:	f7fe ff0b 	bl	80024e0 <HAL_GetTick>
 80036ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036cc:	e008      	b.n	80036e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ce:	f7fe ff07 	bl	80024e0 <HAL_GetTick>
 80036d2:	4602      	mov	r2, r0
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d901      	bls.n	80036e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	e067      	b.n	80037b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036e0:	4b35      	ldr	r3, [pc, #212]	; (80037b8 <HAL_RCC_OscConfig+0x4f4>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d1f0      	bne.n	80036ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a1b      	ldr	r3, [r3, #32]
 80036f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036f4:	d108      	bne.n	8003708 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80036f6:	4b30      	ldr	r3, [pc, #192]	; (80037b8 <HAL_RCC_OscConfig+0x4f4>)
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	492d      	ldr	r1, [pc, #180]	; (80037b8 <HAL_RCC_OscConfig+0x4f4>)
 8003704:	4313      	orrs	r3, r2
 8003706:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003708:	4b2b      	ldr	r3, [pc, #172]	; (80037b8 <HAL_RCC_OscConfig+0x4f4>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a19      	ldr	r1, [r3, #32]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003718:	430b      	orrs	r3, r1
 800371a:	4927      	ldr	r1, [pc, #156]	; (80037b8 <HAL_RCC_OscConfig+0x4f4>)
 800371c:	4313      	orrs	r3, r2
 800371e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003720:	4b27      	ldr	r3, [pc, #156]	; (80037c0 <HAL_RCC_OscConfig+0x4fc>)
 8003722:	2201      	movs	r2, #1
 8003724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003726:	f7fe fedb 	bl	80024e0 <HAL_GetTick>
 800372a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800372c:	e008      	b.n	8003740 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800372e:	f7fe fed7 	bl	80024e0 <HAL_GetTick>
 8003732:	4602      	mov	r2, r0
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	2b02      	cmp	r3, #2
 800373a:	d901      	bls.n	8003740 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800373c:	2303      	movs	r3, #3
 800373e:	e037      	b.n	80037b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003740:	4b1d      	ldr	r3, [pc, #116]	; (80037b8 <HAL_RCC_OscConfig+0x4f4>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d0f0      	beq.n	800372e <HAL_RCC_OscConfig+0x46a>
 800374c:	e02f      	b.n	80037ae <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800374e:	4b1c      	ldr	r3, [pc, #112]	; (80037c0 <HAL_RCC_OscConfig+0x4fc>)
 8003750:	2200      	movs	r2, #0
 8003752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003754:	f7fe fec4 	bl	80024e0 <HAL_GetTick>
 8003758:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800375a:	e008      	b.n	800376e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800375c:	f7fe fec0 	bl	80024e0 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b02      	cmp	r3, #2
 8003768:	d901      	bls.n	800376e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e020      	b.n	80037b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800376e:	4b12      	ldr	r3, [pc, #72]	; (80037b8 <HAL_RCC_OscConfig+0x4f4>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d1f0      	bne.n	800375c <HAL_RCC_OscConfig+0x498>
 800377a:	e018      	b.n	80037ae <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	69db      	ldr	r3, [r3, #28]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d101      	bne.n	8003788 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e013      	b.n	80037b0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003788:	4b0b      	ldr	r3, [pc, #44]	; (80037b8 <HAL_RCC_OscConfig+0x4f4>)
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a1b      	ldr	r3, [r3, #32]
 8003798:	429a      	cmp	r2, r3
 800379a:	d106      	bne.n	80037aa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d001      	beq.n	80037ae <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e000      	b.n	80037b0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3718      	adds	r7, #24
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	40021000 	.word	0x40021000
 80037bc:	40007000 	.word	0x40007000
 80037c0:	42420060 	.word	0x42420060

080037c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d101      	bne.n	80037d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e0d0      	b.n	800397a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037d8:	4b6a      	ldr	r3, [pc, #424]	; (8003984 <HAL_RCC_ClockConfig+0x1c0>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0307 	and.w	r3, r3, #7
 80037e0:	683a      	ldr	r2, [r7, #0]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d910      	bls.n	8003808 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037e6:	4b67      	ldr	r3, [pc, #412]	; (8003984 <HAL_RCC_ClockConfig+0x1c0>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f023 0207 	bic.w	r2, r3, #7
 80037ee:	4965      	ldr	r1, [pc, #404]	; (8003984 <HAL_RCC_ClockConfig+0x1c0>)
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037f6:	4b63      	ldr	r3, [pc, #396]	; (8003984 <HAL_RCC_ClockConfig+0x1c0>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0307 	and.w	r3, r3, #7
 80037fe:	683a      	ldr	r2, [r7, #0]
 8003800:	429a      	cmp	r2, r3
 8003802:	d001      	beq.n	8003808 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e0b8      	b.n	800397a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0302 	and.w	r3, r3, #2
 8003810:	2b00      	cmp	r3, #0
 8003812:	d020      	beq.n	8003856 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0304 	and.w	r3, r3, #4
 800381c:	2b00      	cmp	r3, #0
 800381e:	d005      	beq.n	800382c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003820:	4b59      	ldr	r3, [pc, #356]	; (8003988 <HAL_RCC_ClockConfig+0x1c4>)
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	4a58      	ldr	r2, [pc, #352]	; (8003988 <HAL_RCC_ClockConfig+0x1c4>)
 8003826:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800382a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0308 	and.w	r3, r3, #8
 8003834:	2b00      	cmp	r3, #0
 8003836:	d005      	beq.n	8003844 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003838:	4b53      	ldr	r3, [pc, #332]	; (8003988 <HAL_RCC_ClockConfig+0x1c4>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	4a52      	ldr	r2, [pc, #328]	; (8003988 <HAL_RCC_ClockConfig+0x1c4>)
 800383e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003842:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003844:	4b50      	ldr	r3, [pc, #320]	; (8003988 <HAL_RCC_ClockConfig+0x1c4>)
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	494d      	ldr	r1, [pc, #308]	; (8003988 <HAL_RCC_ClockConfig+0x1c4>)
 8003852:	4313      	orrs	r3, r2
 8003854:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	2b00      	cmp	r3, #0
 8003860:	d040      	beq.n	80038e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	2b01      	cmp	r3, #1
 8003868:	d107      	bne.n	800387a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800386a:	4b47      	ldr	r3, [pc, #284]	; (8003988 <HAL_RCC_ClockConfig+0x1c4>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d115      	bne.n	80038a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e07f      	b.n	800397a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	2b02      	cmp	r3, #2
 8003880:	d107      	bne.n	8003892 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003882:	4b41      	ldr	r3, [pc, #260]	; (8003988 <HAL_RCC_ClockConfig+0x1c4>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d109      	bne.n	80038a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e073      	b.n	800397a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003892:	4b3d      	ldr	r3, [pc, #244]	; (8003988 <HAL_RCC_ClockConfig+0x1c4>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d101      	bne.n	80038a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e06b      	b.n	800397a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038a2:	4b39      	ldr	r3, [pc, #228]	; (8003988 <HAL_RCC_ClockConfig+0x1c4>)
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f023 0203 	bic.w	r2, r3, #3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	4936      	ldr	r1, [pc, #216]	; (8003988 <HAL_RCC_ClockConfig+0x1c4>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038b4:	f7fe fe14 	bl	80024e0 <HAL_GetTick>
 80038b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ba:	e00a      	b.n	80038d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038bc:	f7fe fe10 	bl	80024e0 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e053      	b.n	800397a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038d2:	4b2d      	ldr	r3, [pc, #180]	; (8003988 <HAL_RCC_ClockConfig+0x1c4>)
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f003 020c 	and.w	r2, r3, #12
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d1eb      	bne.n	80038bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038e4:	4b27      	ldr	r3, [pc, #156]	; (8003984 <HAL_RCC_ClockConfig+0x1c0>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0307 	and.w	r3, r3, #7
 80038ec:	683a      	ldr	r2, [r7, #0]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d210      	bcs.n	8003914 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038f2:	4b24      	ldr	r3, [pc, #144]	; (8003984 <HAL_RCC_ClockConfig+0x1c0>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f023 0207 	bic.w	r2, r3, #7
 80038fa:	4922      	ldr	r1, [pc, #136]	; (8003984 <HAL_RCC_ClockConfig+0x1c0>)
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	4313      	orrs	r3, r2
 8003900:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003902:	4b20      	ldr	r3, [pc, #128]	; (8003984 <HAL_RCC_ClockConfig+0x1c0>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0307 	and.w	r3, r3, #7
 800390a:	683a      	ldr	r2, [r7, #0]
 800390c:	429a      	cmp	r2, r3
 800390e:	d001      	beq.n	8003914 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e032      	b.n	800397a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0304 	and.w	r3, r3, #4
 800391c:	2b00      	cmp	r3, #0
 800391e:	d008      	beq.n	8003932 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003920:	4b19      	ldr	r3, [pc, #100]	; (8003988 <HAL_RCC_ClockConfig+0x1c4>)
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	4916      	ldr	r1, [pc, #88]	; (8003988 <HAL_RCC_ClockConfig+0x1c4>)
 800392e:	4313      	orrs	r3, r2
 8003930:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0308 	and.w	r3, r3, #8
 800393a:	2b00      	cmp	r3, #0
 800393c:	d009      	beq.n	8003952 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800393e:	4b12      	ldr	r3, [pc, #72]	; (8003988 <HAL_RCC_ClockConfig+0x1c4>)
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	00db      	lsls	r3, r3, #3
 800394c:	490e      	ldr	r1, [pc, #56]	; (8003988 <HAL_RCC_ClockConfig+0x1c4>)
 800394e:	4313      	orrs	r3, r2
 8003950:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003952:	f000 f821 	bl	8003998 <HAL_RCC_GetSysClockFreq>
 8003956:	4602      	mov	r2, r0
 8003958:	4b0b      	ldr	r3, [pc, #44]	; (8003988 <HAL_RCC_ClockConfig+0x1c4>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	091b      	lsrs	r3, r3, #4
 800395e:	f003 030f 	and.w	r3, r3, #15
 8003962:	490a      	ldr	r1, [pc, #40]	; (800398c <HAL_RCC_ClockConfig+0x1c8>)
 8003964:	5ccb      	ldrb	r3, [r1, r3]
 8003966:	fa22 f303 	lsr.w	r3, r2, r3
 800396a:	4a09      	ldr	r2, [pc, #36]	; (8003990 <HAL_RCC_ClockConfig+0x1cc>)
 800396c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800396e:	4b09      	ldr	r3, [pc, #36]	; (8003994 <HAL_RCC_ClockConfig+0x1d0>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4618      	mov	r0, r3
 8003974:	f7fe fd72 	bl	800245c <HAL_InitTick>

  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	40022000 	.word	0x40022000
 8003988:	40021000 	.word	0x40021000
 800398c:	08007dac 	.word	0x08007dac
 8003990:	20000028 	.word	0x20000028
 8003994:	2000002c 	.word	0x2000002c

08003998 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003998:	b490      	push	{r4, r7}
 800399a:	b08a      	sub	sp, #40	; 0x28
 800399c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800399e:	4b2a      	ldr	r3, [pc, #168]	; (8003a48 <HAL_RCC_GetSysClockFreq+0xb0>)
 80039a0:	1d3c      	adds	r4, r7, #4
 80039a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80039a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80039a8:	f240 2301 	movw	r3, #513	; 0x201
 80039ac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80039ae:	2300      	movs	r3, #0
 80039b0:	61fb      	str	r3, [r7, #28]
 80039b2:	2300      	movs	r3, #0
 80039b4:	61bb      	str	r3, [r7, #24]
 80039b6:	2300      	movs	r3, #0
 80039b8:	627b      	str	r3, [r7, #36]	; 0x24
 80039ba:	2300      	movs	r3, #0
 80039bc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80039be:	2300      	movs	r3, #0
 80039c0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80039c2:	4b22      	ldr	r3, [pc, #136]	; (8003a4c <HAL_RCC_GetSysClockFreq+0xb4>)
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	f003 030c 	and.w	r3, r3, #12
 80039ce:	2b04      	cmp	r3, #4
 80039d0:	d002      	beq.n	80039d8 <HAL_RCC_GetSysClockFreq+0x40>
 80039d2:	2b08      	cmp	r3, #8
 80039d4:	d003      	beq.n	80039de <HAL_RCC_GetSysClockFreq+0x46>
 80039d6:	e02d      	b.n	8003a34 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039d8:	4b1d      	ldr	r3, [pc, #116]	; (8003a50 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039da:	623b      	str	r3, [r7, #32]
      break;
 80039dc:	e02d      	b.n	8003a3a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	0c9b      	lsrs	r3, r3, #18
 80039e2:	f003 030f 	and.w	r3, r3, #15
 80039e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80039ea:	4413      	add	r3, r2
 80039ec:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80039f0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d013      	beq.n	8003a24 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80039fc:	4b13      	ldr	r3, [pc, #76]	; (8003a4c <HAL_RCC_GetSysClockFreq+0xb4>)
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	0c5b      	lsrs	r3, r3, #17
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003a0a:	4413      	add	r3, r2
 8003a0c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003a10:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	4a0e      	ldr	r2, [pc, #56]	; (8003a50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a16:	fb02 f203 	mul.w	r2, r2, r3
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a20:	627b      	str	r3, [r7, #36]	; 0x24
 8003a22:	e004      	b.n	8003a2e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	4a0b      	ldr	r2, [pc, #44]	; (8003a54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a28:	fb02 f303 	mul.w	r3, r2, r3
 8003a2c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a30:	623b      	str	r3, [r7, #32]
      break;
 8003a32:	e002      	b.n	8003a3a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a34:	4b06      	ldr	r3, [pc, #24]	; (8003a50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a36:	623b      	str	r3, [r7, #32]
      break;
 8003a38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a3a:	6a3b      	ldr	r3, [r7, #32]
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3728      	adds	r7, #40	; 0x28
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bc90      	pop	{r4, r7}
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	08007d9c 	.word	0x08007d9c
 8003a4c:	40021000 	.word	0x40021000
 8003a50:	007a1200 	.word	0x007a1200
 8003a54:	003d0900 	.word	0x003d0900

08003a58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a5c:	4b02      	ldr	r3, [pc, #8]	; (8003a68 <HAL_RCC_GetHCLKFreq+0x10>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bc80      	pop	{r7}
 8003a66:	4770      	bx	lr
 8003a68:	20000028 	.word	0x20000028

08003a6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a70:	f7ff fff2 	bl	8003a58 <HAL_RCC_GetHCLKFreq>
 8003a74:	4602      	mov	r2, r0
 8003a76:	4b05      	ldr	r3, [pc, #20]	; (8003a8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	0a1b      	lsrs	r3, r3, #8
 8003a7c:	f003 0307 	and.w	r3, r3, #7
 8003a80:	4903      	ldr	r1, [pc, #12]	; (8003a90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a82:	5ccb      	ldrb	r3, [r1, r3]
 8003a84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	40021000 	.word	0x40021000
 8003a90:	08007dbc 	.word	0x08007dbc

08003a94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a98:	f7ff ffde 	bl	8003a58 <HAL_RCC_GetHCLKFreq>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	4b05      	ldr	r3, [pc, #20]	; (8003ab4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	0adb      	lsrs	r3, r3, #11
 8003aa4:	f003 0307 	and.w	r3, r3, #7
 8003aa8:	4903      	ldr	r1, [pc, #12]	; (8003ab8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003aaa:	5ccb      	ldrb	r3, [r1, r3]
 8003aac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	40021000 	.word	0x40021000
 8003ab8:	08007dbc 	.word	0x08007dbc

08003abc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ac4:	4b0a      	ldr	r3, [pc, #40]	; (8003af0 <RCC_Delay+0x34>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a0a      	ldr	r2, [pc, #40]	; (8003af4 <RCC_Delay+0x38>)
 8003aca:	fba2 2303 	umull	r2, r3, r2, r3
 8003ace:	0a5b      	lsrs	r3, r3, #9
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	fb02 f303 	mul.w	r3, r2, r3
 8003ad6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ad8:	bf00      	nop
  }
  while (Delay --);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	1e5a      	subs	r2, r3, #1
 8003ade:	60fa      	str	r2, [r7, #12]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d1f9      	bne.n	8003ad8 <RCC_Delay+0x1c>
}
 8003ae4:	bf00      	nop
 8003ae6:	bf00      	nop
 8003ae8:	3714      	adds	r7, #20
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bc80      	pop	{r7}
 8003aee:	4770      	bx	lr
 8003af0:	20000028 	.word	0x20000028
 8003af4:	10624dd3 	.word	0x10624dd3

08003af8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b086      	sub	sp, #24
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003b00:	2300      	movs	r3, #0
 8003b02:	613b      	str	r3, [r7, #16]
 8003b04:	2300      	movs	r3, #0
 8003b06:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0301 	and.w	r3, r3, #1
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d07d      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003b14:	2300      	movs	r3, #0
 8003b16:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b18:	4b4f      	ldr	r3, [pc, #316]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b1a:	69db      	ldr	r3, [r3, #28]
 8003b1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d10d      	bne.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b24:	4b4c      	ldr	r3, [pc, #304]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b26:	69db      	ldr	r3, [r3, #28]
 8003b28:	4a4b      	ldr	r2, [pc, #300]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b2e:	61d3      	str	r3, [r2, #28]
 8003b30:	4b49      	ldr	r3, [pc, #292]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b32:	69db      	ldr	r3, [r3, #28]
 8003b34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b38:	60bb      	str	r3, [r7, #8]
 8003b3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b40:	4b46      	ldr	r3, [pc, #280]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d118      	bne.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b4c:	4b43      	ldr	r3, [pc, #268]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a42      	ldr	r2, [pc, #264]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b56:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b58:	f7fe fcc2 	bl	80024e0 <HAL_GetTick>
 8003b5c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b5e:	e008      	b.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b60:	f7fe fcbe 	bl	80024e0 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b64      	cmp	r3, #100	; 0x64
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e06d      	b.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b72:	4b3a      	ldr	r3, [pc, #232]	; (8003c5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d0f0      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b7e:	4b36      	ldr	r3, [pc, #216]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b80:	6a1b      	ldr	r3, [r3, #32]
 8003b82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b86:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d02e      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d027      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b9c:	4b2e      	ldr	r3, [pc, #184]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b9e:	6a1b      	ldr	r3, [r3, #32]
 8003ba0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ba4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ba6:	4b2e      	ldr	r3, [pc, #184]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ba8:	2201      	movs	r2, #1
 8003baa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003bac:	4b2c      	ldr	r3, [pc, #176]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003bae:	2200      	movs	r2, #0
 8003bb0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003bb2:	4a29      	ldr	r2, [pc, #164]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d014      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc2:	f7fe fc8d 	bl	80024e0 <HAL_GetTick>
 8003bc6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bc8:	e00a      	b.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bca:	f7fe fc89 	bl	80024e0 <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d901      	bls.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e036      	b.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003be0:	4b1d      	ldr	r3, [pc, #116]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003be2:	6a1b      	ldr	r3, [r3, #32]
 8003be4:	f003 0302 	and.w	r3, r3, #2
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d0ee      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bec:	4b1a      	ldr	r3, [pc, #104]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bee:	6a1b      	ldr	r3, [r3, #32]
 8003bf0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	4917      	ldr	r1, [pc, #92]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003bfe:	7dfb      	ldrb	r3, [r7, #23]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d105      	bne.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c04:	4b14      	ldr	r3, [pc, #80]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c06:	69db      	ldr	r3, [r3, #28]
 8003c08:	4a13      	ldr	r2, [pc, #76]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c0e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0302 	and.w	r3, r3, #2
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d008      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c1c:	4b0e      	ldr	r3, [pc, #56]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	490b      	ldr	r1, [pc, #44]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0310 	and.w	r3, r3, #16
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d008      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c3a:	4b07      	ldr	r3, [pc, #28]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	4904      	ldr	r1, [pc, #16]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3718      	adds	r7, #24
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	40021000 	.word	0x40021000
 8003c5c:	40007000 	.word	0x40007000
 8003c60:	42420440 	.word	0x42420440

08003c64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d101      	bne.n	8003c76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e076      	b.n	8003d64 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d108      	bne.n	8003c90 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c86:	d009      	beq.n	8003c9c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	61da      	str	r2, [r3, #28]
 8003c8e:	e005      	b.n	8003c9c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d106      	bne.n	8003cbc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f7fe fa08 	bl	80020cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2202      	movs	r2, #2
 8003cc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cd2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003ce4:	431a      	orrs	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	f003 0302 	and.w	r3, r3, #2
 8003cf8:	431a      	orrs	r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	695b      	ldr	r3, [r3, #20]
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	431a      	orrs	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d0c:	431a      	orrs	r2, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	69db      	ldr	r3, [r3, #28]
 8003d12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d16:	431a      	orrs	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a1b      	ldr	r3, [r3, #32]
 8003d1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d20:	ea42 0103 	orr.w	r1, r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d28:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	430a      	orrs	r2, r1
 8003d32:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	0c1a      	lsrs	r2, r3, #16
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f002 0204 	and.w	r2, r2, #4
 8003d42:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	69da      	ldr	r2, [r3, #28]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d52:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003d62:	2300      	movs	r3, #0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3708      	adds	r7, #8
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b088      	sub	sp, #32
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	603b      	str	r3, [r7, #0]
 8003d78:	4613      	mov	r3, r2
 8003d7a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d101      	bne.n	8003d8e <HAL_SPI_Transmit+0x22>
 8003d8a:	2302      	movs	r3, #2
 8003d8c:	e126      	b.n	8003fdc <HAL_SPI_Transmit+0x270>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d96:	f7fe fba3 	bl	80024e0 <HAL_GetTick>
 8003d9a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003d9c:	88fb      	ldrh	r3, [r7, #6]
 8003d9e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d002      	beq.n	8003db2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003dac:	2302      	movs	r3, #2
 8003dae:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003db0:	e10b      	b.n	8003fca <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d002      	beq.n	8003dbe <HAL_SPI_Transmit+0x52>
 8003db8:	88fb      	ldrh	r3, [r7, #6]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d102      	bne.n	8003dc4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003dc2:	e102      	b.n	8003fca <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2203      	movs	r2, #3
 8003dc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	68ba      	ldr	r2, [r7, #8]
 8003dd6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	88fa      	ldrh	r2, [r7, #6]
 8003ddc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	88fa      	ldrh	r2, [r7, #6]
 8003de2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2200      	movs	r2, #0
 8003de8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2200      	movs	r2, #0
 8003dee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2200      	movs	r2, #0
 8003df4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e0a:	d10f      	bne.n	8003e2c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e1a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e2a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e36:	2b40      	cmp	r3, #64	; 0x40
 8003e38:	d007      	beq.n	8003e4a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e48:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e52:	d14b      	bne.n	8003eec <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d002      	beq.n	8003e62 <HAL_SPI_Transmit+0xf6>
 8003e5c:	8afb      	ldrh	r3, [r7, #22]
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d13e      	bne.n	8003ee0 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e66:	881a      	ldrh	r2, [r3, #0]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e72:	1c9a      	adds	r2, r3, #2
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	b29a      	uxth	r2, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003e86:	e02b      	b.n	8003ee0 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f003 0302 	and.w	r3, r3, #2
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d112      	bne.n	8003ebc <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9a:	881a      	ldrh	r2, [r3, #0]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea6:	1c9a      	adds	r2, r3, #2
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	b29a      	uxth	r2, r3
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	86da      	strh	r2, [r3, #54]	; 0x36
 8003eba:	e011      	b.n	8003ee0 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ebc:	f7fe fb10 	bl	80024e0 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	683a      	ldr	r2, [r7, #0]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d803      	bhi.n	8003ed4 <HAL_SPI_Transmit+0x168>
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed2:	d102      	bne.n	8003eda <HAL_SPI_Transmit+0x16e>
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d102      	bne.n	8003ee0 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003ede:	e074      	b.n	8003fca <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1ce      	bne.n	8003e88 <HAL_SPI_Transmit+0x11c>
 8003eea:	e04c      	b.n	8003f86 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d002      	beq.n	8003efa <HAL_SPI_Transmit+0x18e>
 8003ef4:	8afb      	ldrh	r3, [r7, #22]
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d140      	bne.n	8003f7c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	330c      	adds	r3, #12
 8003f04:	7812      	ldrb	r2, [r2, #0]
 8003f06:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0c:	1c5a      	adds	r2, r3, #1
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	b29a      	uxth	r2, r3
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003f20:	e02c      	b.n	8003f7c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	f003 0302 	and.w	r3, r3, #2
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d113      	bne.n	8003f58 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	330c      	adds	r3, #12
 8003f3a:	7812      	ldrb	r2, [r2, #0]
 8003f3c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f42:	1c5a      	adds	r2, r3, #1
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	86da      	strh	r2, [r3, #54]	; 0x36
 8003f56:	e011      	b.n	8003f7c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f58:	f7fe fac2 	bl	80024e0 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	683a      	ldr	r2, [r7, #0]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d803      	bhi.n	8003f70 <HAL_SPI_Transmit+0x204>
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f6e:	d102      	bne.n	8003f76 <HAL_SPI_Transmit+0x20a>
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d102      	bne.n	8003f7c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003f7a:	e026      	b.n	8003fca <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d1cd      	bne.n	8003f22 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f86:	69ba      	ldr	r2, [r7, #24]
 8003f88:	6839      	ldr	r1, [r7, #0]
 8003f8a:	68f8      	ldr	r0, [r7, #12]
 8003f8c:	f000 fbb8 	bl	8004700 <SPI_EndRxTxTransaction>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d002      	beq.n	8003f9c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2220      	movs	r2, #32
 8003f9a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d10a      	bne.n	8003fba <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	613b      	str	r3, [r7, #16]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	613b      	str	r3, [r7, #16]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	613b      	str	r3, [r7, #16]
 8003fb8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d002      	beq.n	8003fc8 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	77fb      	strb	r3, [r7, #31]
 8003fc6:	e000      	b.n	8003fca <HAL_SPI_Transmit+0x25e>
  }

error:
 8003fc8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003fda:	7ffb      	ldrb	r3, [r7, #31]
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3720      	adds	r7, #32
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b088      	sub	sp, #32
 8003fe8:	af02      	add	r7, sp, #8
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	603b      	str	r3, [r7, #0]
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004000:	d112      	bne.n	8004028 <HAL_SPI_Receive+0x44>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d10e      	bne.n	8004028 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2204      	movs	r2, #4
 800400e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004012:	88fa      	ldrh	r2, [r7, #6]
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	9300      	str	r3, [sp, #0]
 8004018:	4613      	mov	r3, r2
 800401a:	68ba      	ldr	r2, [r7, #8]
 800401c:	68b9      	ldr	r1, [r7, #8]
 800401e:	68f8      	ldr	r0, [r7, #12]
 8004020:	f000 f8f1 	bl	8004206 <HAL_SPI_TransmitReceive>
 8004024:	4603      	mov	r3, r0
 8004026:	e0ea      	b.n	80041fe <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800402e:	2b01      	cmp	r3, #1
 8004030:	d101      	bne.n	8004036 <HAL_SPI_Receive+0x52>
 8004032:	2302      	movs	r3, #2
 8004034:	e0e3      	b.n	80041fe <HAL_SPI_Receive+0x21a>
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2201      	movs	r2, #1
 800403a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800403e:	f7fe fa4f 	bl	80024e0 <HAL_GetTick>
 8004042:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800404a:	b2db      	uxtb	r3, r3
 800404c:	2b01      	cmp	r3, #1
 800404e:	d002      	beq.n	8004056 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004050:	2302      	movs	r3, #2
 8004052:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004054:	e0ca      	b.n	80041ec <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d002      	beq.n	8004062 <HAL_SPI_Receive+0x7e>
 800405c:	88fb      	ldrh	r3, [r7, #6]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d102      	bne.n	8004068 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004066:	e0c1      	b.n	80041ec <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2204      	movs	r2, #4
 800406c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2200      	movs	r2, #0
 8004074:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	68ba      	ldr	r2, [r7, #8]
 800407a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	88fa      	ldrh	r2, [r7, #6]
 8004080:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	88fa      	ldrh	r2, [r7, #6]
 8004086:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2200      	movs	r2, #0
 8004092:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2200      	movs	r2, #0
 800409e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040ae:	d10f      	bne.n	80040d0 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040be:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80040ce:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040da:	2b40      	cmp	r3, #64	; 0x40
 80040dc:	d007      	beq.n	80040ee <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040ec:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d162      	bne.n	80041bc <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80040f6:	e02e      	b.n	8004156 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f003 0301 	and.w	r3, r3, #1
 8004102:	2b01      	cmp	r3, #1
 8004104:	d115      	bne.n	8004132 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f103 020c 	add.w	r2, r3, #12
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004112:	7812      	ldrb	r2, [r2, #0]
 8004114:	b2d2      	uxtb	r2, r2
 8004116:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800411c:	1c5a      	adds	r2, r3, #1
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004126:	b29b      	uxth	r3, r3
 8004128:	3b01      	subs	r3, #1
 800412a:	b29a      	uxth	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004130:	e011      	b.n	8004156 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004132:	f7fe f9d5 	bl	80024e0 <HAL_GetTick>
 8004136:	4602      	mov	r2, r0
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	683a      	ldr	r2, [r7, #0]
 800413e:	429a      	cmp	r2, r3
 8004140:	d803      	bhi.n	800414a <HAL_SPI_Receive+0x166>
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004148:	d102      	bne.n	8004150 <HAL_SPI_Receive+0x16c>
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d102      	bne.n	8004156 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004154:	e04a      	b.n	80041ec <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800415a:	b29b      	uxth	r3, r3
 800415c:	2b00      	cmp	r3, #0
 800415e:	d1cb      	bne.n	80040f8 <HAL_SPI_Receive+0x114>
 8004160:	e031      	b.n	80041c6 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f003 0301 	and.w	r3, r3, #1
 800416c:	2b01      	cmp	r3, #1
 800416e:	d113      	bne.n	8004198 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68da      	ldr	r2, [r3, #12]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800417a:	b292      	uxth	r2, r2
 800417c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004182:	1c9a      	adds	r2, r3, #2
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800418c:	b29b      	uxth	r3, r3
 800418e:	3b01      	subs	r3, #1
 8004190:	b29a      	uxth	r2, r3
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004196:	e011      	b.n	80041bc <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004198:	f7fe f9a2 	bl	80024e0 <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	683a      	ldr	r2, [r7, #0]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d803      	bhi.n	80041b0 <HAL_SPI_Receive+0x1cc>
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ae:	d102      	bne.n	80041b6 <HAL_SPI_Receive+0x1d2>
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d102      	bne.n	80041bc <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80041ba:	e017      	b.n	80041ec <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1cd      	bne.n	8004162 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041c6:	693a      	ldr	r2, [r7, #16]
 80041c8:	6839      	ldr	r1, [r7, #0]
 80041ca:	68f8      	ldr	r0, [r7, #12]
 80041cc:	f000 fa46 	bl	800465c <SPI_EndRxTransaction>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d002      	beq.n	80041dc <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2220      	movs	r2, #32
 80041da:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d002      	beq.n	80041ea <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	75fb      	strb	r3, [r7, #23]
 80041e8:	e000      	b.n	80041ec <HAL_SPI_Receive+0x208>
  }

error :
 80041ea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80041fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3718      	adds	r7, #24
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004206:	b580      	push	{r7, lr}
 8004208:	b08c      	sub	sp, #48	; 0x30
 800420a:	af00      	add	r7, sp, #0
 800420c:	60f8      	str	r0, [r7, #12]
 800420e:	60b9      	str	r1, [r7, #8]
 8004210:	607a      	str	r2, [r7, #4]
 8004212:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004214:	2301      	movs	r3, #1
 8004216:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004218:	2300      	movs	r3, #0
 800421a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004224:	2b01      	cmp	r3, #1
 8004226:	d101      	bne.n	800422c <HAL_SPI_TransmitReceive+0x26>
 8004228:	2302      	movs	r3, #2
 800422a:	e18a      	b.n	8004542 <HAL_SPI_TransmitReceive+0x33c>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004234:	f7fe f954 	bl	80024e0 <HAL_GetTick>
 8004238:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004240:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800424a:	887b      	ldrh	r3, [r7, #2]
 800424c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800424e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004252:	2b01      	cmp	r3, #1
 8004254:	d00f      	beq.n	8004276 <HAL_SPI_TransmitReceive+0x70>
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800425c:	d107      	bne.n	800426e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d103      	bne.n	800426e <HAL_SPI_TransmitReceive+0x68>
 8004266:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800426a:	2b04      	cmp	r3, #4
 800426c:	d003      	beq.n	8004276 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800426e:	2302      	movs	r3, #2
 8004270:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004274:	e15b      	b.n	800452e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d005      	beq.n	8004288 <HAL_SPI_TransmitReceive+0x82>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d002      	beq.n	8004288 <HAL_SPI_TransmitReceive+0x82>
 8004282:	887b      	ldrh	r3, [r7, #2]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d103      	bne.n	8004290 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800428e:	e14e      	b.n	800452e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004296:	b2db      	uxtb	r3, r3
 8004298:	2b04      	cmp	r3, #4
 800429a:	d003      	beq.n	80042a4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2205      	movs	r2, #5
 80042a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2200      	movs	r2, #0
 80042a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	887a      	ldrh	r2, [r7, #2]
 80042b4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	887a      	ldrh	r2, [r7, #2]
 80042ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	68ba      	ldr	r2, [r7, #8]
 80042c0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	887a      	ldrh	r2, [r7, #2]
 80042c6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	887a      	ldrh	r2, [r7, #2]
 80042cc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2200      	movs	r2, #0
 80042d8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042e4:	2b40      	cmp	r3, #64	; 0x40
 80042e6:	d007      	beq.n	80042f8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004300:	d178      	bne.n	80043f4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d002      	beq.n	8004310 <HAL_SPI_TransmitReceive+0x10a>
 800430a:	8b7b      	ldrh	r3, [r7, #26]
 800430c:	2b01      	cmp	r3, #1
 800430e:	d166      	bne.n	80043de <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004314:	881a      	ldrh	r2, [r3, #0]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004320:	1c9a      	adds	r2, r3, #2
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800432a:	b29b      	uxth	r3, r3
 800432c:	3b01      	subs	r3, #1
 800432e:	b29a      	uxth	r2, r3
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004334:	e053      	b.n	80043de <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b02      	cmp	r3, #2
 8004342:	d11b      	bne.n	800437c <HAL_SPI_TransmitReceive+0x176>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004348:	b29b      	uxth	r3, r3
 800434a:	2b00      	cmp	r3, #0
 800434c:	d016      	beq.n	800437c <HAL_SPI_TransmitReceive+0x176>
 800434e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004350:	2b01      	cmp	r3, #1
 8004352:	d113      	bne.n	800437c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004358:	881a      	ldrh	r2, [r3, #0]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004364:	1c9a      	adds	r2, r3, #2
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800436e:	b29b      	uxth	r3, r3
 8004370:	3b01      	subs	r3, #1
 8004372:	b29a      	uxth	r2, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004378:	2300      	movs	r3, #0
 800437a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f003 0301 	and.w	r3, r3, #1
 8004386:	2b01      	cmp	r3, #1
 8004388:	d119      	bne.n	80043be <HAL_SPI_TransmitReceive+0x1b8>
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800438e:	b29b      	uxth	r3, r3
 8004390:	2b00      	cmp	r3, #0
 8004392:	d014      	beq.n	80043be <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68da      	ldr	r2, [r3, #12]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800439e:	b292      	uxth	r2, r2
 80043a0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a6:	1c9a      	adds	r2, r3, #2
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	3b01      	subs	r3, #1
 80043b4:	b29a      	uxth	r2, r3
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80043ba:	2301      	movs	r3, #1
 80043bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80043be:	f7fe f88f 	bl	80024e0 <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d807      	bhi.n	80043de <HAL_SPI_TransmitReceive+0x1d8>
 80043ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d4:	d003      	beq.n	80043de <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80043dc:	e0a7      	b.n	800452e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d1a6      	bne.n	8004336 <HAL_SPI_TransmitReceive+0x130>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1a1      	bne.n	8004336 <HAL_SPI_TransmitReceive+0x130>
 80043f2:	e07c      	b.n	80044ee <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d002      	beq.n	8004402 <HAL_SPI_TransmitReceive+0x1fc>
 80043fc:	8b7b      	ldrh	r3, [r7, #26]
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d16b      	bne.n	80044da <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	330c      	adds	r3, #12
 800440c:	7812      	ldrb	r2, [r2, #0]
 800440e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004414:	1c5a      	adds	r2, r3, #1
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800441e:	b29b      	uxth	r3, r3
 8004420:	3b01      	subs	r3, #1
 8004422:	b29a      	uxth	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004428:	e057      	b.n	80044da <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	f003 0302 	and.w	r3, r3, #2
 8004434:	2b02      	cmp	r3, #2
 8004436:	d11c      	bne.n	8004472 <HAL_SPI_TransmitReceive+0x26c>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800443c:	b29b      	uxth	r3, r3
 800443e:	2b00      	cmp	r3, #0
 8004440:	d017      	beq.n	8004472 <HAL_SPI_TransmitReceive+0x26c>
 8004442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004444:	2b01      	cmp	r3, #1
 8004446:	d114      	bne.n	8004472 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	330c      	adds	r3, #12
 8004452:	7812      	ldrb	r2, [r2, #0]
 8004454:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445a:	1c5a      	adds	r2, r3, #1
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004464:	b29b      	uxth	r3, r3
 8004466:	3b01      	subs	r3, #1
 8004468:	b29a      	uxth	r2, r3
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800446e:	2300      	movs	r3, #0
 8004470:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f003 0301 	and.w	r3, r3, #1
 800447c:	2b01      	cmp	r3, #1
 800447e:	d119      	bne.n	80044b4 <HAL_SPI_TransmitReceive+0x2ae>
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004484:	b29b      	uxth	r3, r3
 8004486:	2b00      	cmp	r3, #0
 8004488:	d014      	beq.n	80044b4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68da      	ldr	r2, [r3, #12]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004494:	b2d2      	uxtb	r2, r2
 8004496:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800449c:	1c5a      	adds	r2, r3, #1
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	3b01      	subs	r3, #1
 80044aa:	b29a      	uxth	r2, r3
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80044b0:	2301      	movs	r3, #1
 80044b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80044b4:	f7fe f814 	bl	80024e0 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d803      	bhi.n	80044cc <HAL_SPI_TransmitReceive+0x2c6>
 80044c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ca:	d102      	bne.n	80044d2 <HAL_SPI_TransmitReceive+0x2cc>
 80044cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d103      	bne.n	80044da <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80044d8:	e029      	b.n	800452e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044de:	b29b      	uxth	r3, r3
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d1a2      	bne.n	800442a <HAL_SPI_TransmitReceive+0x224>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d19d      	bne.n	800442a <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80044ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80044f2:	68f8      	ldr	r0, [r7, #12]
 80044f4:	f000 f904 	bl	8004700 <SPI_EndRxTxTransaction>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d006      	beq.n	800450c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2220      	movs	r2, #32
 8004508:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800450a:	e010      	b.n	800452e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d10b      	bne.n	800452c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004514:	2300      	movs	r3, #0
 8004516:	617b      	str	r3, [r7, #20]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	617b      	str	r3, [r7, #20]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	617b      	str	r3, [r7, #20]
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	e000      	b.n	800452e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800452c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2201      	movs	r2, #1
 8004532:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800453e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004542:	4618      	mov	r0, r3
 8004544:	3730      	adds	r7, #48	; 0x30
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
	...

0800454c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b088      	sub	sp, #32
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	603b      	str	r3, [r7, #0]
 8004558:	4613      	mov	r3, r2
 800455a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800455c:	f7fd ffc0 	bl	80024e0 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004564:	1a9b      	subs	r3, r3, r2
 8004566:	683a      	ldr	r2, [r7, #0]
 8004568:	4413      	add	r3, r2
 800456a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800456c:	f7fd ffb8 	bl	80024e0 <HAL_GetTick>
 8004570:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004572:	4b39      	ldr	r3, [pc, #228]	; (8004658 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	015b      	lsls	r3, r3, #5
 8004578:	0d1b      	lsrs	r3, r3, #20
 800457a:	69fa      	ldr	r2, [r7, #28]
 800457c:	fb02 f303 	mul.w	r3, r2, r3
 8004580:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004582:	e054      	b.n	800462e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800458a:	d050      	beq.n	800462e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800458c:	f7fd ffa8 	bl	80024e0 <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	69fa      	ldr	r2, [r7, #28]
 8004598:	429a      	cmp	r2, r3
 800459a:	d902      	bls.n	80045a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d13d      	bne.n	800461e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	685a      	ldr	r2, [r3, #4]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80045b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045ba:	d111      	bne.n	80045e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045c4:	d004      	beq.n	80045d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045ce:	d107      	bne.n	80045e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045e8:	d10f      	bne.n	800460a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045f8:	601a      	str	r2, [r3, #0]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004608:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2201      	movs	r2, #1
 800460e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e017      	b.n	800464e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d101      	bne.n	8004628 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004624:	2300      	movs	r3, #0
 8004626:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	3b01      	subs	r3, #1
 800462c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	689a      	ldr	r2, [r3, #8]
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	4013      	ands	r3, r2
 8004638:	68ba      	ldr	r2, [r7, #8]
 800463a:	429a      	cmp	r2, r3
 800463c:	bf0c      	ite	eq
 800463e:	2301      	moveq	r3, #1
 8004640:	2300      	movne	r3, #0
 8004642:	b2db      	uxtb	r3, r3
 8004644:	461a      	mov	r2, r3
 8004646:	79fb      	ldrb	r3, [r7, #7]
 8004648:	429a      	cmp	r2, r3
 800464a:	d19b      	bne.n	8004584 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3720      	adds	r7, #32
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	20000028 	.word	0x20000028

0800465c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b086      	sub	sp, #24
 8004660:	af02      	add	r7, sp, #8
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004670:	d111      	bne.n	8004696 <SPI_EndRxTransaction+0x3a>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800467a:	d004      	beq.n	8004686 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004684:	d107      	bne.n	8004696 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004694:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800469e:	d117      	bne.n	80046d0 <SPI_EndRxTransaction+0x74>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046a8:	d112      	bne.n	80046d0 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	9300      	str	r3, [sp, #0]
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	2200      	movs	r2, #0
 80046b2:	2101      	movs	r1, #1
 80046b4:	68f8      	ldr	r0, [r7, #12]
 80046b6:	f7ff ff49 	bl	800454c <SPI_WaitFlagStateUntilTimeout>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d01a      	beq.n	80046f6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046c4:	f043 0220 	orr.w	r2, r3, #32
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	e013      	b.n	80046f8 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	9300      	str	r3, [sp, #0]
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	2200      	movs	r2, #0
 80046d8:	2180      	movs	r1, #128	; 0x80
 80046da:	68f8      	ldr	r0, [r7, #12]
 80046dc:	f7ff ff36 	bl	800454c <SPI_WaitFlagStateUntilTimeout>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d007      	beq.n	80046f6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ea:	f043 0220 	orr.w	r2, r3, #32
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e000      	b.n	80046f8 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80046f6:	2300      	movs	r3, #0
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3710      	adds	r7, #16
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af02      	add	r7, sp, #8
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	9300      	str	r3, [sp, #0]
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	2200      	movs	r2, #0
 8004714:	2180      	movs	r1, #128	; 0x80
 8004716:	68f8      	ldr	r0, [r7, #12]
 8004718:	f7ff ff18 	bl	800454c <SPI_WaitFlagStateUntilTimeout>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d007      	beq.n	8004732 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004726:	f043 0220 	orr.w	r2, r3, #32
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e000      	b.n	8004734 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004732:	2300      	movs	r3, #0
}
 8004734:	4618      	mov	r0, r3
 8004736:	3710      	adds	r7, #16
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}

0800473c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d101      	bne.n	800474e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e03f      	b.n	80047ce <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004754:	b2db      	uxtb	r3, r3
 8004756:	2b00      	cmp	r3, #0
 8004758:	d106      	bne.n	8004768 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f7fd fcfc 	bl	8002160 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2224      	movs	r2, #36	; 0x24
 800476c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68da      	ldr	r2, [r3, #12]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800477e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f000 f905 	bl	8004990 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	691a      	ldr	r2, [r3, #16]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004794:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	695a      	ldr	r2, [r3, #20]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68da      	ldr	r2, [r3, #12]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2220      	movs	r2, #32
 80047c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2220      	movs	r2, #32
 80047c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3708      	adds	r7, #8
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b08a      	sub	sp, #40	; 0x28
 80047da:	af02      	add	r7, sp, #8
 80047dc:	60f8      	str	r0, [r7, #12]
 80047de:	60b9      	str	r1, [r7, #8]
 80047e0:	603b      	str	r3, [r7, #0]
 80047e2:	4613      	mov	r3, r2
 80047e4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80047e6:	2300      	movs	r3, #0
 80047e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	2b20      	cmp	r3, #32
 80047f4:	d17c      	bne.n	80048f0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d002      	beq.n	8004802 <HAL_UART_Transmit+0x2c>
 80047fc:	88fb      	ldrh	r3, [r7, #6]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d101      	bne.n	8004806 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e075      	b.n	80048f2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800480c:	2b01      	cmp	r3, #1
 800480e:	d101      	bne.n	8004814 <HAL_UART_Transmit+0x3e>
 8004810:	2302      	movs	r3, #2
 8004812:	e06e      	b.n	80048f2 <HAL_UART_Transmit+0x11c>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2200      	movs	r2, #0
 8004820:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2221      	movs	r2, #33	; 0x21
 8004826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800482a:	f7fd fe59 	bl	80024e0 <HAL_GetTick>
 800482e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	88fa      	ldrh	r2, [r7, #6]
 8004834:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	88fa      	ldrh	r2, [r7, #6]
 800483a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004844:	d108      	bne.n	8004858 <HAL_UART_Transmit+0x82>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d104      	bne.n	8004858 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800484e:	2300      	movs	r3, #0
 8004850:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	61bb      	str	r3, [r7, #24]
 8004856:	e003      	b.n	8004860 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800485c:	2300      	movs	r3, #0
 800485e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004868:	e02a      	b.n	80048c0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	9300      	str	r3, [sp, #0]
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	2200      	movs	r2, #0
 8004872:	2180      	movs	r1, #128	; 0x80
 8004874:	68f8      	ldr	r0, [r7, #12]
 8004876:	f000 f840 	bl	80048fa <UART_WaitOnFlagUntilTimeout>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d001      	beq.n	8004884 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e036      	b.n	80048f2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d10b      	bne.n	80048a2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	881b      	ldrh	r3, [r3, #0]
 800488e:	461a      	mov	r2, r3
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004898:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	3302      	adds	r3, #2
 800489e:	61bb      	str	r3, [r7, #24]
 80048a0:	e007      	b.n	80048b2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	781a      	ldrb	r2, [r3, #0]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	3301      	adds	r3, #1
 80048b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	3b01      	subs	r3, #1
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1cf      	bne.n	800486a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	9300      	str	r3, [sp, #0]
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	2200      	movs	r2, #0
 80048d2:	2140      	movs	r1, #64	; 0x40
 80048d4:	68f8      	ldr	r0, [r7, #12]
 80048d6:	f000 f810 	bl	80048fa <UART_WaitOnFlagUntilTimeout>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d001      	beq.n	80048e4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e006      	b.n	80048f2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2220      	movs	r2, #32
 80048e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80048ec:	2300      	movs	r3, #0
 80048ee:	e000      	b.n	80048f2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80048f0:	2302      	movs	r3, #2
  }
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3720      	adds	r7, #32
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}

080048fa <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80048fa:	b580      	push	{r7, lr}
 80048fc:	b084      	sub	sp, #16
 80048fe:	af00      	add	r7, sp, #0
 8004900:	60f8      	str	r0, [r7, #12]
 8004902:	60b9      	str	r1, [r7, #8]
 8004904:	603b      	str	r3, [r7, #0]
 8004906:	4613      	mov	r3, r2
 8004908:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800490a:	e02c      	b.n	8004966 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004912:	d028      	beq.n	8004966 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d007      	beq.n	800492a <UART_WaitOnFlagUntilTimeout+0x30>
 800491a:	f7fd fde1 	bl	80024e0 <HAL_GetTick>
 800491e:	4602      	mov	r2, r0
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	69ba      	ldr	r2, [r7, #24]
 8004926:	429a      	cmp	r2, r3
 8004928:	d21d      	bcs.n	8004966 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68da      	ldr	r2, [r3, #12]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004938:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	695a      	ldr	r2, [r3, #20]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f022 0201 	bic.w	r2, r2, #1
 8004948:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2220      	movs	r2, #32
 800494e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2220      	movs	r2, #32
 8004956:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2200      	movs	r2, #0
 800495e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e00f      	b.n	8004986 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	4013      	ands	r3, r2
 8004970:	68ba      	ldr	r2, [r7, #8]
 8004972:	429a      	cmp	r2, r3
 8004974:	bf0c      	ite	eq
 8004976:	2301      	moveq	r3, #1
 8004978:	2300      	movne	r3, #0
 800497a:	b2db      	uxtb	r3, r3
 800497c:	461a      	mov	r2, r3
 800497e:	79fb      	ldrb	r3, [r7, #7]
 8004980:	429a      	cmp	r2, r3
 8004982:	d0c3      	beq.n	800490c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004984:	2300      	movs	r3, #0
}
 8004986:	4618      	mov	r0, r3
 8004988:	3710      	adds	r7, #16
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
	...

08004990 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b084      	sub	sp, #16
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	68da      	ldr	r2, [r3, #12]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	430a      	orrs	r2, r1
 80049ac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	689a      	ldr	r2, [r3, #8]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	431a      	orrs	r2, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	695b      	ldr	r3, [r3, #20]
 80049bc:	4313      	orrs	r3, r2
 80049be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80049ca:	f023 030c 	bic.w	r3, r3, #12
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	6812      	ldr	r2, [r2, #0]
 80049d2:	68b9      	ldr	r1, [r7, #8]
 80049d4:	430b      	orrs	r3, r1
 80049d6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	699a      	ldr	r2, [r3, #24]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	430a      	orrs	r2, r1
 80049ec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a2c      	ldr	r2, [pc, #176]	; (8004aa4 <UART_SetConfig+0x114>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d103      	bne.n	8004a00 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80049f8:	f7ff f84c 	bl	8003a94 <HAL_RCC_GetPCLK2Freq>
 80049fc:	60f8      	str	r0, [r7, #12]
 80049fe:	e002      	b.n	8004a06 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004a00:	f7ff f834 	bl	8003a6c <HAL_RCC_GetPCLK1Freq>
 8004a04:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	4613      	mov	r3, r2
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	4413      	add	r3, r2
 8004a0e:	009a      	lsls	r2, r3, #2
 8004a10:	441a      	add	r2, r3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a1c:	4a22      	ldr	r2, [pc, #136]	; (8004aa8 <UART_SetConfig+0x118>)
 8004a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a22:	095b      	lsrs	r3, r3, #5
 8004a24:	0119      	lsls	r1, r3, #4
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	4613      	mov	r3, r2
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	4413      	add	r3, r2
 8004a2e:	009a      	lsls	r2, r3, #2
 8004a30:	441a      	add	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a3c:	4b1a      	ldr	r3, [pc, #104]	; (8004aa8 <UART_SetConfig+0x118>)
 8004a3e:	fba3 0302 	umull	r0, r3, r3, r2
 8004a42:	095b      	lsrs	r3, r3, #5
 8004a44:	2064      	movs	r0, #100	; 0x64
 8004a46:	fb00 f303 	mul.w	r3, r0, r3
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	011b      	lsls	r3, r3, #4
 8004a4e:	3332      	adds	r3, #50	; 0x32
 8004a50:	4a15      	ldr	r2, [pc, #84]	; (8004aa8 <UART_SetConfig+0x118>)
 8004a52:	fba2 2303 	umull	r2, r3, r2, r3
 8004a56:	095b      	lsrs	r3, r3, #5
 8004a58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a5c:	4419      	add	r1, r3
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	4613      	mov	r3, r2
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	4413      	add	r3, r2
 8004a66:	009a      	lsls	r2, r3, #2
 8004a68:	441a      	add	r2, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a74:	4b0c      	ldr	r3, [pc, #48]	; (8004aa8 <UART_SetConfig+0x118>)
 8004a76:	fba3 0302 	umull	r0, r3, r3, r2
 8004a7a:	095b      	lsrs	r3, r3, #5
 8004a7c:	2064      	movs	r0, #100	; 0x64
 8004a7e:	fb00 f303 	mul.w	r3, r0, r3
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	011b      	lsls	r3, r3, #4
 8004a86:	3332      	adds	r3, #50	; 0x32
 8004a88:	4a07      	ldr	r2, [pc, #28]	; (8004aa8 <UART_SetConfig+0x118>)
 8004a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a8e:	095b      	lsrs	r3, r3, #5
 8004a90:	f003 020f 	and.w	r2, r3, #15
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	440a      	add	r2, r1
 8004a9a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004a9c:	bf00      	nop
 8004a9e:	3710      	adds	r7, #16
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	40013800 	.word	0x40013800
 8004aa8:	51eb851f 	.word	0x51eb851f

08004aac <__errno>:
 8004aac:	4b01      	ldr	r3, [pc, #4]	; (8004ab4 <__errno+0x8>)
 8004aae:	6818      	ldr	r0, [r3, #0]
 8004ab0:	4770      	bx	lr
 8004ab2:	bf00      	nop
 8004ab4:	20000034 	.word	0x20000034

08004ab8 <__libc_init_array>:
 8004ab8:	b570      	push	{r4, r5, r6, lr}
 8004aba:	2600      	movs	r6, #0
 8004abc:	4d0c      	ldr	r5, [pc, #48]	; (8004af0 <__libc_init_array+0x38>)
 8004abe:	4c0d      	ldr	r4, [pc, #52]	; (8004af4 <__libc_init_array+0x3c>)
 8004ac0:	1b64      	subs	r4, r4, r5
 8004ac2:	10a4      	asrs	r4, r4, #2
 8004ac4:	42a6      	cmp	r6, r4
 8004ac6:	d109      	bne.n	8004adc <__libc_init_array+0x24>
 8004ac8:	f002 feba 	bl	8007840 <_init>
 8004acc:	2600      	movs	r6, #0
 8004ace:	4d0a      	ldr	r5, [pc, #40]	; (8004af8 <__libc_init_array+0x40>)
 8004ad0:	4c0a      	ldr	r4, [pc, #40]	; (8004afc <__libc_init_array+0x44>)
 8004ad2:	1b64      	subs	r4, r4, r5
 8004ad4:	10a4      	asrs	r4, r4, #2
 8004ad6:	42a6      	cmp	r6, r4
 8004ad8:	d105      	bne.n	8004ae6 <__libc_init_array+0x2e>
 8004ada:	bd70      	pop	{r4, r5, r6, pc}
 8004adc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ae0:	4798      	blx	r3
 8004ae2:	3601      	adds	r6, #1
 8004ae4:	e7ee      	b.n	8004ac4 <__libc_init_array+0xc>
 8004ae6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004aea:	4798      	blx	r3
 8004aec:	3601      	adds	r6, #1
 8004aee:	e7f2      	b.n	8004ad6 <__libc_init_array+0x1e>
 8004af0:	080081a4 	.word	0x080081a4
 8004af4:	080081a4 	.word	0x080081a4
 8004af8:	080081a4 	.word	0x080081a4
 8004afc:	080081a8 	.word	0x080081a8

08004b00 <memcpy>:
 8004b00:	440a      	add	r2, r1
 8004b02:	4291      	cmp	r1, r2
 8004b04:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b08:	d100      	bne.n	8004b0c <memcpy+0xc>
 8004b0a:	4770      	bx	lr
 8004b0c:	b510      	push	{r4, lr}
 8004b0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b12:	4291      	cmp	r1, r2
 8004b14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b18:	d1f9      	bne.n	8004b0e <memcpy+0xe>
 8004b1a:	bd10      	pop	{r4, pc}

08004b1c <memset>:
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	4402      	add	r2, r0
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d100      	bne.n	8004b26 <memset+0xa>
 8004b24:	4770      	bx	lr
 8004b26:	f803 1b01 	strb.w	r1, [r3], #1
 8004b2a:	e7f9      	b.n	8004b20 <memset+0x4>

08004b2c <__cvt>:
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b32:	461f      	mov	r7, r3
 8004b34:	bfbb      	ittet	lt
 8004b36:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004b3a:	461f      	movlt	r7, r3
 8004b3c:	2300      	movge	r3, #0
 8004b3e:	232d      	movlt	r3, #45	; 0x2d
 8004b40:	b088      	sub	sp, #32
 8004b42:	4614      	mov	r4, r2
 8004b44:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004b46:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004b48:	7013      	strb	r3, [r2, #0]
 8004b4a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004b4c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004b50:	f023 0820 	bic.w	r8, r3, #32
 8004b54:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004b58:	d005      	beq.n	8004b66 <__cvt+0x3a>
 8004b5a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004b5e:	d100      	bne.n	8004b62 <__cvt+0x36>
 8004b60:	3501      	adds	r5, #1
 8004b62:	2302      	movs	r3, #2
 8004b64:	e000      	b.n	8004b68 <__cvt+0x3c>
 8004b66:	2303      	movs	r3, #3
 8004b68:	aa07      	add	r2, sp, #28
 8004b6a:	9204      	str	r2, [sp, #16]
 8004b6c:	aa06      	add	r2, sp, #24
 8004b6e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004b72:	e9cd 3500 	strd	r3, r5, [sp]
 8004b76:	4622      	mov	r2, r4
 8004b78:	463b      	mov	r3, r7
 8004b7a:	f000 fce5 	bl	8005548 <_dtoa_r>
 8004b7e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004b82:	4606      	mov	r6, r0
 8004b84:	d102      	bne.n	8004b8c <__cvt+0x60>
 8004b86:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004b88:	07db      	lsls	r3, r3, #31
 8004b8a:	d522      	bpl.n	8004bd2 <__cvt+0xa6>
 8004b8c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004b90:	eb06 0905 	add.w	r9, r6, r5
 8004b94:	d110      	bne.n	8004bb8 <__cvt+0x8c>
 8004b96:	7833      	ldrb	r3, [r6, #0]
 8004b98:	2b30      	cmp	r3, #48	; 0x30
 8004b9a:	d10a      	bne.n	8004bb2 <__cvt+0x86>
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	4620      	mov	r0, r4
 8004ba2:	4639      	mov	r1, r7
 8004ba4:	f7fb ff00 	bl	80009a8 <__aeabi_dcmpeq>
 8004ba8:	b918      	cbnz	r0, 8004bb2 <__cvt+0x86>
 8004baa:	f1c5 0501 	rsb	r5, r5, #1
 8004bae:	f8ca 5000 	str.w	r5, [sl]
 8004bb2:	f8da 3000 	ldr.w	r3, [sl]
 8004bb6:	4499      	add	r9, r3
 8004bb8:	2200      	movs	r2, #0
 8004bba:	2300      	movs	r3, #0
 8004bbc:	4620      	mov	r0, r4
 8004bbe:	4639      	mov	r1, r7
 8004bc0:	f7fb fef2 	bl	80009a8 <__aeabi_dcmpeq>
 8004bc4:	b108      	cbz	r0, 8004bca <__cvt+0x9e>
 8004bc6:	f8cd 901c 	str.w	r9, [sp, #28]
 8004bca:	2230      	movs	r2, #48	; 0x30
 8004bcc:	9b07      	ldr	r3, [sp, #28]
 8004bce:	454b      	cmp	r3, r9
 8004bd0:	d307      	bcc.n	8004be2 <__cvt+0xb6>
 8004bd2:	4630      	mov	r0, r6
 8004bd4:	9b07      	ldr	r3, [sp, #28]
 8004bd6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004bd8:	1b9b      	subs	r3, r3, r6
 8004bda:	6013      	str	r3, [r2, #0]
 8004bdc:	b008      	add	sp, #32
 8004bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004be2:	1c59      	adds	r1, r3, #1
 8004be4:	9107      	str	r1, [sp, #28]
 8004be6:	701a      	strb	r2, [r3, #0]
 8004be8:	e7f0      	b.n	8004bcc <__cvt+0xa0>

08004bea <__exponent>:
 8004bea:	4603      	mov	r3, r0
 8004bec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004bee:	2900      	cmp	r1, #0
 8004bf0:	f803 2b02 	strb.w	r2, [r3], #2
 8004bf4:	bfb6      	itet	lt
 8004bf6:	222d      	movlt	r2, #45	; 0x2d
 8004bf8:	222b      	movge	r2, #43	; 0x2b
 8004bfa:	4249      	neglt	r1, r1
 8004bfc:	2909      	cmp	r1, #9
 8004bfe:	7042      	strb	r2, [r0, #1]
 8004c00:	dd2b      	ble.n	8004c5a <__exponent+0x70>
 8004c02:	f10d 0407 	add.w	r4, sp, #7
 8004c06:	46a4      	mov	ip, r4
 8004c08:	270a      	movs	r7, #10
 8004c0a:	fb91 f6f7 	sdiv	r6, r1, r7
 8004c0e:	460a      	mov	r2, r1
 8004c10:	46a6      	mov	lr, r4
 8004c12:	fb07 1516 	mls	r5, r7, r6, r1
 8004c16:	2a63      	cmp	r2, #99	; 0x63
 8004c18:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004c1c:	4631      	mov	r1, r6
 8004c1e:	f104 34ff 	add.w	r4, r4, #4294967295
 8004c22:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004c26:	dcf0      	bgt.n	8004c0a <__exponent+0x20>
 8004c28:	3130      	adds	r1, #48	; 0x30
 8004c2a:	f1ae 0502 	sub.w	r5, lr, #2
 8004c2e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004c32:	4629      	mov	r1, r5
 8004c34:	1c44      	adds	r4, r0, #1
 8004c36:	4561      	cmp	r1, ip
 8004c38:	d30a      	bcc.n	8004c50 <__exponent+0x66>
 8004c3a:	f10d 0209 	add.w	r2, sp, #9
 8004c3e:	eba2 020e 	sub.w	r2, r2, lr
 8004c42:	4565      	cmp	r5, ip
 8004c44:	bf88      	it	hi
 8004c46:	2200      	movhi	r2, #0
 8004c48:	4413      	add	r3, r2
 8004c4a:	1a18      	subs	r0, r3, r0
 8004c4c:	b003      	add	sp, #12
 8004c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c50:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c54:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004c58:	e7ed      	b.n	8004c36 <__exponent+0x4c>
 8004c5a:	2330      	movs	r3, #48	; 0x30
 8004c5c:	3130      	adds	r1, #48	; 0x30
 8004c5e:	7083      	strb	r3, [r0, #2]
 8004c60:	70c1      	strb	r1, [r0, #3]
 8004c62:	1d03      	adds	r3, r0, #4
 8004c64:	e7f1      	b.n	8004c4a <__exponent+0x60>
	...

08004c68 <_printf_float>:
 8004c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c6c:	b091      	sub	sp, #68	; 0x44
 8004c6e:	460c      	mov	r4, r1
 8004c70:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004c74:	4616      	mov	r6, r2
 8004c76:	461f      	mov	r7, r3
 8004c78:	4605      	mov	r5, r0
 8004c7a:	f001 fa53 	bl	8006124 <_localeconv_r>
 8004c7e:	6803      	ldr	r3, [r0, #0]
 8004c80:	4618      	mov	r0, r3
 8004c82:	9309      	str	r3, [sp, #36]	; 0x24
 8004c84:	f7fb fa64 	bl	8000150 <strlen>
 8004c88:	2300      	movs	r3, #0
 8004c8a:	930e      	str	r3, [sp, #56]	; 0x38
 8004c8c:	f8d8 3000 	ldr.w	r3, [r8]
 8004c90:	900a      	str	r0, [sp, #40]	; 0x28
 8004c92:	3307      	adds	r3, #7
 8004c94:	f023 0307 	bic.w	r3, r3, #7
 8004c98:	f103 0208 	add.w	r2, r3, #8
 8004c9c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004ca0:	f8d4 b000 	ldr.w	fp, [r4]
 8004ca4:	f8c8 2000 	str.w	r2, [r8]
 8004ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cac:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004cb0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004cb4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004cb8:	930b      	str	r3, [sp, #44]	; 0x2c
 8004cba:	f04f 32ff 	mov.w	r2, #4294967295
 8004cbe:	4640      	mov	r0, r8
 8004cc0:	4b9c      	ldr	r3, [pc, #624]	; (8004f34 <_printf_float+0x2cc>)
 8004cc2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004cc4:	f7fb fea2 	bl	8000a0c <__aeabi_dcmpun>
 8004cc8:	bb70      	cbnz	r0, 8004d28 <_printf_float+0xc0>
 8004cca:	f04f 32ff 	mov.w	r2, #4294967295
 8004cce:	4640      	mov	r0, r8
 8004cd0:	4b98      	ldr	r3, [pc, #608]	; (8004f34 <_printf_float+0x2cc>)
 8004cd2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004cd4:	f7fb fe7c 	bl	80009d0 <__aeabi_dcmple>
 8004cd8:	bb30      	cbnz	r0, 8004d28 <_printf_float+0xc0>
 8004cda:	2200      	movs	r2, #0
 8004cdc:	2300      	movs	r3, #0
 8004cde:	4640      	mov	r0, r8
 8004ce0:	4651      	mov	r1, sl
 8004ce2:	f7fb fe6b 	bl	80009bc <__aeabi_dcmplt>
 8004ce6:	b110      	cbz	r0, 8004cee <_printf_float+0x86>
 8004ce8:	232d      	movs	r3, #45	; 0x2d
 8004cea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cee:	4b92      	ldr	r3, [pc, #584]	; (8004f38 <_printf_float+0x2d0>)
 8004cf0:	4892      	ldr	r0, [pc, #584]	; (8004f3c <_printf_float+0x2d4>)
 8004cf2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004cf6:	bf94      	ite	ls
 8004cf8:	4698      	movls	r8, r3
 8004cfa:	4680      	movhi	r8, r0
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	f04f 0a00 	mov.w	sl, #0
 8004d02:	6123      	str	r3, [r4, #16]
 8004d04:	f02b 0304 	bic.w	r3, fp, #4
 8004d08:	6023      	str	r3, [r4, #0]
 8004d0a:	4633      	mov	r3, r6
 8004d0c:	4621      	mov	r1, r4
 8004d0e:	4628      	mov	r0, r5
 8004d10:	9700      	str	r7, [sp, #0]
 8004d12:	aa0f      	add	r2, sp, #60	; 0x3c
 8004d14:	f000 f9d4 	bl	80050c0 <_printf_common>
 8004d18:	3001      	adds	r0, #1
 8004d1a:	f040 8090 	bne.w	8004e3e <_printf_float+0x1d6>
 8004d1e:	f04f 30ff 	mov.w	r0, #4294967295
 8004d22:	b011      	add	sp, #68	; 0x44
 8004d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d28:	4642      	mov	r2, r8
 8004d2a:	4653      	mov	r3, sl
 8004d2c:	4640      	mov	r0, r8
 8004d2e:	4651      	mov	r1, sl
 8004d30:	f7fb fe6c 	bl	8000a0c <__aeabi_dcmpun>
 8004d34:	b148      	cbz	r0, 8004d4a <_printf_float+0xe2>
 8004d36:	f1ba 0f00 	cmp.w	sl, #0
 8004d3a:	bfb8      	it	lt
 8004d3c:	232d      	movlt	r3, #45	; 0x2d
 8004d3e:	4880      	ldr	r0, [pc, #512]	; (8004f40 <_printf_float+0x2d8>)
 8004d40:	bfb8      	it	lt
 8004d42:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004d46:	4b7f      	ldr	r3, [pc, #508]	; (8004f44 <_printf_float+0x2dc>)
 8004d48:	e7d3      	b.n	8004cf2 <_printf_float+0x8a>
 8004d4a:	6863      	ldr	r3, [r4, #4]
 8004d4c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004d50:	1c5a      	adds	r2, r3, #1
 8004d52:	d142      	bne.n	8004dda <_printf_float+0x172>
 8004d54:	2306      	movs	r3, #6
 8004d56:	6063      	str	r3, [r4, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	9206      	str	r2, [sp, #24]
 8004d5c:	aa0e      	add	r2, sp, #56	; 0x38
 8004d5e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004d62:	aa0d      	add	r2, sp, #52	; 0x34
 8004d64:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004d68:	9203      	str	r2, [sp, #12]
 8004d6a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004d6e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004d72:	6023      	str	r3, [r4, #0]
 8004d74:	6863      	ldr	r3, [r4, #4]
 8004d76:	4642      	mov	r2, r8
 8004d78:	9300      	str	r3, [sp, #0]
 8004d7a:	4628      	mov	r0, r5
 8004d7c:	4653      	mov	r3, sl
 8004d7e:	910b      	str	r1, [sp, #44]	; 0x2c
 8004d80:	f7ff fed4 	bl	8004b2c <__cvt>
 8004d84:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004d86:	4680      	mov	r8, r0
 8004d88:	2947      	cmp	r1, #71	; 0x47
 8004d8a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004d8c:	d108      	bne.n	8004da0 <_printf_float+0x138>
 8004d8e:	1cc8      	adds	r0, r1, #3
 8004d90:	db02      	blt.n	8004d98 <_printf_float+0x130>
 8004d92:	6863      	ldr	r3, [r4, #4]
 8004d94:	4299      	cmp	r1, r3
 8004d96:	dd40      	ble.n	8004e1a <_printf_float+0x1b2>
 8004d98:	f1a9 0902 	sub.w	r9, r9, #2
 8004d9c:	fa5f f989 	uxtb.w	r9, r9
 8004da0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004da4:	d81f      	bhi.n	8004de6 <_printf_float+0x17e>
 8004da6:	464a      	mov	r2, r9
 8004da8:	3901      	subs	r1, #1
 8004daa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004dae:	910d      	str	r1, [sp, #52]	; 0x34
 8004db0:	f7ff ff1b 	bl	8004bea <__exponent>
 8004db4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004db6:	4682      	mov	sl, r0
 8004db8:	1813      	adds	r3, r2, r0
 8004dba:	2a01      	cmp	r2, #1
 8004dbc:	6123      	str	r3, [r4, #16]
 8004dbe:	dc02      	bgt.n	8004dc6 <_printf_float+0x15e>
 8004dc0:	6822      	ldr	r2, [r4, #0]
 8004dc2:	07d2      	lsls	r2, r2, #31
 8004dc4:	d501      	bpl.n	8004dca <_printf_float+0x162>
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	6123      	str	r3, [r4, #16]
 8004dca:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d09b      	beq.n	8004d0a <_printf_float+0xa2>
 8004dd2:	232d      	movs	r3, #45	; 0x2d
 8004dd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004dd8:	e797      	b.n	8004d0a <_printf_float+0xa2>
 8004dda:	2947      	cmp	r1, #71	; 0x47
 8004ddc:	d1bc      	bne.n	8004d58 <_printf_float+0xf0>
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d1ba      	bne.n	8004d58 <_printf_float+0xf0>
 8004de2:	2301      	movs	r3, #1
 8004de4:	e7b7      	b.n	8004d56 <_printf_float+0xee>
 8004de6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004dea:	d118      	bne.n	8004e1e <_printf_float+0x1b6>
 8004dec:	2900      	cmp	r1, #0
 8004dee:	6863      	ldr	r3, [r4, #4]
 8004df0:	dd0b      	ble.n	8004e0a <_printf_float+0x1a2>
 8004df2:	6121      	str	r1, [r4, #16]
 8004df4:	b913      	cbnz	r3, 8004dfc <_printf_float+0x194>
 8004df6:	6822      	ldr	r2, [r4, #0]
 8004df8:	07d0      	lsls	r0, r2, #31
 8004dfa:	d502      	bpl.n	8004e02 <_printf_float+0x19a>
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	440b      	add	r3, r1
 8004e00:	6123      	str	r3, [r4, #16]
 8004e02:	f04f 0a00 	mov.w	sl, #0
 8004e06:	65a1      	str	r1, [r4, #88]	; 0x58
 8004e08:	e7df      	b.n	8004dca <_printf_float+0x162>
 8004e0a:	b913      	cbnz	r3, 8004e12 <_printf_float+0x1aa>
 8004e0c:	6822      	ldr	r2, [r4, #0]
 8004e0e:	07d2      	lsls	r2, r2, #31
 8004e10:	d501      	bpl.n	8004e16 <_printf_float+0x1ae>
 8004e12:	3302      	adds	r3, #2
 8004e14:	e7f4      	b.n	8004e00 <_printf_float+0x198>
 8004e16:	2301      	movs	r3, #1
 8004e18:	e7f2      	b.n	8004e00 <_printf_float+0x198>
 8004e1a:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004e1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e20:	4299      	cmp	r1, r3
 8004e22:	db05      	blt.n	8004e30 <_printf_float+0x1c8>
 8004e24:	6823      	ldr	r3, [r4, #0]
 8004e26:	6121      	str	r1, [r4, #16]
 8004e28:	07d8      	lsls	r0, r3, #31
 8004e2a:	d5ea      	bpl.n	8004e02 <_printf_float+0x19a>
 8004e2c:	1c4b      	adds	r3, r1, #1
 8004e2e:	e7e7      	b.n	8004e00 <_printf_float+0x198>
 8004e30:	2900      	cmp	r1, #0
 8004e32:	bfcc      	ite	gt
 8004e34:	2201      	movgt	r2, #1
 8004e36:	f1c1 0202 	rsble	r2, r1, #2
 8004e3a:	4413      	add	r3, r2
 8004e3c:	e7e0      	b.n	8004e00 <_printf_float+0x198>
 8004e3e:	6823      	ldr	r3, [r4, #0]
 8004e40:	055a      	lsls	r2, r3, #21
 8004e42:	d407      	bmi.n	8004e54 <_printf_float+0x1ec>
 8004e44:	6923      	ldr	r3, [r4, #16]
 8004e46:	4642      	mov	r2, r8
 8004e48:	4631      	mov	r1, r6
 8004e4a:	4628      	mov	r0, r5
 8004e4c:	47b8      	blx	r7
 8004e4e:	3001      	adds	r0, #1
 8004e50:	d12b      	bne.n	8004eaa <_printf_float+0x242>
 8004e52:	e764      	b.n	8004d1e <_printf_float+0xb6>
 8004e54:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004e58:	f240 80dd 	bls.w	8005016 <_printf_float+0x3ae>
 8004e5c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004e60:	2200      	movs	r2, #0
 8004e62:	2300      	movs	r3, #0
 8004e64:	f7fb fda0 	bl	80009a8 <__aeabi_dcmpeq>
 8004e68:	2800      	cmp	r0, #0
 8004e6a:	d033      	beq.n	8004ed4 <_printf_float+0x26c>
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	4631      	mov	r1, r6
 8004e70:	4628      	mov	r0, r5
 8004e72:	4a35      	ldr	r2, [pc, #212]	; (8004f48 <_printf_float+0x2e0>)
 8004e74:	47b8      	blx	r7
 8004e76:	3001      	adds	r0, #1
 8004e78:	f43f af51 	beq.w	8004d1e <_printf_float+0xb6>
 8004e7c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004e80:	429a      	cmp	r2, r3
 8004e82:	db02      	blt.n	8004e8a <_printf_float+0x222>
 8004e84:	6823      	ldr	r3, [r4, #0]
 8004e86:	07d8      	lsls	r0, r3, #31
 8004e88:	d50f      	bpl.n	8004eaa <_printf_float+0x242>
 8004e8a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e8e:	4631      	mov	r1, r6
 8004e90:	4628      	mov	r0, r5
 8004e92:	47b8      	blx	r7
 8004e94:	3001      	adds	r0, #1
 8004e96:	f43f af42 	beq.w	8004d1e <_printf_float+0xb6>
 8004e9a:	f04f 0800 	mov.w	r8, #0
 8004e9e:	f104 091a 	add.w	r9, r4, #26
 8004ea2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	4543      	cmp	r3, r8
 8004ea8:	dc09      	bgt.n	8004ebe <_printf_float+0x256>
 8004eaa:	6823      	ldr	r3, [r4, #0]
 8004eac:	079b      	lsls	r3, r3, #30
 8004eae:	f100 8102 	bmi.w	80050b6 <_printf_float+0x44e>
 8004eb2:	68e0      	ldr	r0, [r4, #12]
 8004eb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004eb6:	4298      	cmp	r0, r3
 8004eb8:	bfb8      	it	lt
 8004eba:	4618      	movlt	r0, r3
 8004ebc:	e731      	b.n	8004d22 <_printf_float+0xba>
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	464a      	mov	r2, r9
 8004ec2:	4631      	mov	r1, r6
 8004ec4:	4628      	mov	r0, r5
 8004ec6:	47b8      	blx	r7
 8004ec8:	3001      	adds	r0, #1
 8004eca:	f43f af28 	beq.w	8004d1e <_printf_float+0xb6>
 8004ece:	f108 0801 	add.w	r8, r8, #1
 8004ed2:	e7e6      	b.n	8004ea2 <_printf_float+0x23a>
 8004ed4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	dc38      	bgt.n	8004f4c <_printf_float+0x2e4>
 8004eda:	2301      	movs	r3, #1
 8004edc:	4631      	mov	r1, r6
 8004ede:	4628      	mov	r0, r5
 8004ee0:	4a19      	ldr	r2, [pc, #100]	; (8004f48 <_printf_float+0x2e0>)
 8004ee2:	47b8      	blx	r7
 8004ee4:	3001      	adds	r0, #1
 8004ee6:	f43f af1a 	beq.w	8004d1e <_printf_float+0xb6>
 8004eea:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	d102      	bne.n	8004ef8 <_printf_float+0x290>
 8004ef2:	6823      	ldr	r3, [r4, #0]
 8004ef4:	07d9      	lsls	r1, r3, #31
 8004ef6:	d5d8      	bpl.n	8004eaa <_printf_float+0x242>
 8004ef8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004efc:	4631      	mov	r1, r6
 8004efe:	4628      	mov	r0, r5
 8004f00:	47b8      	blx	r7
 8004f02:	3001      	adds	r0, #1
 8004f04:	f43f af0b 	beq.w	8004d1e <_printf_float+0xb6>
 8004f08:	f04f 0900 	mov.w	r9, #0
 8004f0c:	f104 0a1a 	add.w	sl, r4, #26
 8004f10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f12:	425b      	negs	r3, r3
 8004f14:	454b      	cmp	r3, r9
 8004f16:	dc01      	bgt.n	8004f1c <_printf_float+0x2b4>
 8004f18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f1a:	e794      	b.n	8004e46 <_printf_float+0x1de>
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	4652      	mov	r2, sl
 8004f20:	4631      	mov	r1, r6
 8004f22:	4628      	mov	r0, r5
 8004f24:	47b8      	blx	r7
 8004f26:	3001      	adds	r0, #1
 8004f28:	f43f aef9 	beq.w	8004d1e <_printf_float+0xb6>
 8004f2c:	f109 0901 	add.w	r9, r9, #1
 8004f30:	e7ee      	b.n	8004f10 <_printf_float+0x2a8>
 8004f32:	bf00      	nop
 8004f34:	7fefffff 	.word	0x7fefffff
 8004f38:	08007dc8 	.word	0x08007dc8
 8004f3c:	08007dcc 	.word	0x08007dcc
 8004f40:	08007dd4 	.word	0x08007dd4
 8004f44:	08007dd0 	.word	0x08007dd0
 8004f48:	08007dd8 	.word	0x08007dd8
 8004f4c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f4e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004f50:	429a      	cmp	r2, r3
 8004f52:	bfa8      	it	ge
 8004f54:	461a      	movge	r2, r3
 8004f56:	2a00      	cmp	r2, #0
 8004f58:	4691      	mov	r9, r2
 8004f5a:	dc37      	bgt.n	8004fcc <_printf_float+0x364>
 8004f5c:	f04f 0b00 	mov.w	fp, #0
 8004f60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004f64:	f104 021a 	add.w	r2, r4, #26
 8004f68:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004f6c:	ebaa 0309 	sub.w	r3, sl, r9
 8004f70:	455b      	cmp	r3, fp
 8004f72:	dc33      	bgt.n	8004fdc <_printf_float+0x374>
 8004f74:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	db3b      	blt.n	8004ff4 <_printf_float+0x38c>
 8004f7c:	6823      	ldr	r3, [r4, #0]
 8004f7e:	07da      	lsls	r2, r3, #31
 8004f80:	d438      	bmi.n	8004ff4 <_printf_float+0x38c>
 8004f82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f84:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004f86:	eba2 030a 	sub.w	r3, r2, sl
 8004f8a:	eba2 0901 	sub.w	r9, r2, r1
 8004f8e:	4599      	cmp	r9, r3
 8004f90:	bfa8      	it	ge
 8004f92:	4699      	movge	r9, r3
 8004f94:	f1b9 0f00 	cmp.w	r9, #0
 8004f98:	dc34      	bgt.n	8005004 <_printf_float+0x39c>
 8004f9a:	f04f 0800 	mov.w	r8, #0
 8004f9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004fa2:	f104 0a1a 	add.w	sl, r4, #26
 8004fa6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004faa:	1a9b      	subs	r3, r3, r2
 8004fac:	eba3 0309 	sub.w	r3, r3, r9
 8004fb0:	4543      	cmp	r3, r8
 8004fb2:	f77f af7a 	ble.w	8004eaa <_printf_float+0x242>
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	4652      	mov	r2, sl
 8004fba:	4631      	mov	r1, r6
 8004fbc:	4628      	mov	r0, r5
 8004fbe:	47b8      	blx	r7
 8004fc0:	3001      	adds	r0, #1
 8004fc2:	f43f aeac 	beq.w	8004d1e <_printf_float+0xb6>
 8004fc6:	f108 0801 	add.w	r8, r8, #1
 8004fca:	e7ec      	b.n	8004fa6 <_printf_float+0x33e>
 8004fcc:	4613      	mov	r3, r2
 8004fce:	4631      	mov	r1, r6
 8004fd0:	4642      	mov	r2, r8
 8004fd2:	4628      	mov	r0, r5
 8004fd4:	47b8      	blx	r7
 8004fd6:	3001      	adds	r0, #1
 8004fd8:	d1c0      	bne.n	8004f5c <_printf_float+0x2f4>
 8004fda:	e6a0      	b.n	8004d1e <_printf_float+0xb6>
 8004fdc:	2301      	movs	r3, #1
 8004fde:	4631      	mov	r1, r6
 8004fe0:	4628      	mov	r0, r5
 8004fe2:	920b      	str	r2, [sp, #44]	; 0x2c
 8004fe4:	47b8      	blx	r7
 8004fe6:	3001      	adds	r0, #1
 8004fe8:	f43f ae99 	beq.w	8004d1e <_printf_float+0xb6>
 8004fec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004fee:	f10b 0b01 	add.w	fp, fp, #1
 8004ff2:	e7b9      	b.n	8004f68 <_printf_float+0x300>
 8004ff4:	4631      	mov	r1, r6
 8004ff6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ffa:	4628      	mov	r0, r5
 8004ffc:	47b8      	blx	r7
 8004ffe:	3001      	adds	r0, #1
 8005000:	d1bf      	bne.n	8004f82 <_printf_float+0x31a>
 8005002:	e68c      	b.n	8004d1e <_printf_float+0xb6>
 8005004:	464b      	mov	r3, r9
 8005006:	4631      	mov	r1, r6
 8005008:	4628      	mov	r0, r5
 800500a:	eb08 020a 	add.w	r2, r8, sl
 800500e:	47b8      	blx	r7
 8005010:	3001      	adds	r0, #1
 8005012:	d1c2      	bne.n	8004f9a <_printf_float+0x332>
 8005014:	e683      	b.n	8004d1e <_printf_float+0xb6>
 8005016:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005018:	2a01      	cmp	r2, #1
 800501a:	dc01      	bgt.n	8005020 <_printf_float+0x3b8>
 800501c:	07db      	lsls	r3, r3, #31
 800501e:	d537      	bpl.n	8005090 <_printf_float+0x428>
 8005020:	2301      	movs	r3, #1
 8005022:	4642      	mov	r2, r8
 8005024:	4631      	mov	r1, r6
 8005026:	4628      	mov	r0, r5
 8005028:	47b8      	blx	r7
 800502a:	3001      	adds	r0, #1
 800502c:	f43f ae77 	beq.w	8004d1e <_printf_float+0xb6>
 8005030:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005034:	4631      	mov	r1, r6
 8005036:	4628      	mov	r0, r5
 8005038:	47b8      	blx	r7
 800503a:	3001      	adds	r0, #1
 800503c:	f43f ae6f 	beq.w	8004d1e <_printf_float+0xb6>
 8005040:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005044:	2200      	movs	r2, #0
 8005046:	2300      	movs	r3, #0
 8005048:	f7fb fcae 	bl	80009a8 <__aeabi_dcmpeq>
 800504c:	b9d8      	cbnz	r0, 8005086 <_printf_float+0x41e>
 800504e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005050:	f108 0201 	add.w	r2, r8, #1
 8005054:	3b01      	subs	r3, #1
 8005056:	4631      	mov	r1, r6
 8005058:	4628      	mov	r0, r5
 800505a:	47b8      	blx	r7
 800505c:	3001      	adds	r0, #1
 800505e:	d10e      	bne.n	800507e <_printf_float+0x416>
 8005060:	e65d      	b.n	8004d1e <_printf_float+0xb6>
 8005062:	2301      	movs	r3, #1
 8005064:	464a      	mov	r2, r9
 8005066:	4631      	mov	r1, r6
 8005068:	4628      	mov	r0, r5
 800506a:	47b8      	blx	r7
 800506c:	3001      	adds	r0, #1
 800506e:	f43f ae56 	beq.w	8004d1e <_printf_float+0xb6>
 8005072:	f108 0801 	add.w	r8, r8, #1
 8005076:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005078:	3b01      	subs	r3, #1
 800507a:	4543      	cmp	r3, r8
 800507c:	dcf1      	bgt.n	8005062 <_printf_float+0x3fa>
 800507e:	4653      	mov	r3, sl
 8005080:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005084:	e6e0      	b.n	8004e48 <_printf_float+0x1e0>
 8005086:	f04f 0800 	mov.w	r8, #0
 800508a:	f104 091a 	add.w	r9, r4, #26
 800508e:	e7f2      	b.n	8005076 <_printf_float+0x40e>
 8005090:	2301      	movs	r3, #1
 8005092:	4642      	mov	r2, r8
 8005094:	e7df      	b.n	8005056 <_printf_float+0x3ee>
 8005096:	2301      	movs	r3, #1
 8005098:	464a      	mov	r2, r9
 800509a:	4631      	mov	r1, r6
 800509c:	4628      	mov	r0, r5
 800509e:	47b8      	blx	r7
 80050a0:	3001      	adds	r0, #1
 80050a2:	f43f ae3c 	beq.w	8004d1e <_printf_float+0xb6>
 80050a6:	f108 0801 	add.w	r8, r8, #1
 80050aa:	68e3      	ldr	r3, [r4, #12]
 80050ac:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80050ae:	1a5b      	subs	r3, r3, r1
 80050b0:	4543      	cmp	r3, r8
 80050b2:	dcf0      	bgt.n	8005096 <_printf_float+0x42e>
 80050b4:	e6fd      	b.n	8004eb2 <_printf_float+0x24a>
 80050b6:	f04f 0800 	mov.w	r8, #0
 80050ba:	f104 0919 	add.w	r9, r4, #25
 80050be:	e7f4      	b.n	80050aa <_printf_float+0x442>

080050c0 <_printf_common>:
 80050c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050c4:	4616      	mov	r6, r2
 80050c6:	4699      	mov	r9, r3
 80050c8:	688a      	ldr	r2, [r1, #8]
 80050ca:	690b      	ldr	r3, [r1, #16]
 80050cc:	4607      	mov	r7, r0
 80050ce:	4293      	cmp	r3, r2
 80050d0:	bfb8      	it	lt
 80050d2:	4613      	movlt	r3, r2
 80050d4:	6033      	str	r3, [r6, #0]
 80050d6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80050da:	460c      	mov	r4, r1
 80050dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80050e0:	b10a      	cbz	r2, 80050e6 <_printf_common+0x26>
 80050e2:	3301      	adds	r3, #1
 80050e4:	6033      	str	r3, [r6, #0]
 80050e6:	6823      	ldr	r3, [r4, #0]
 80050e8:	0699      	lsls	r1, r3, #26
 80050ea:	bf42      	ittt	mi
 80050ec:	6833      	ldrmi	r3, [r6, #0]
 80050ee:	3302      	addmi	r3, #2
 80050f0:	6033      	strmi	r3, [r6, #0]
 80050f2:	6825      	ldr	r5, [r4, #0]
 80050f4:	f015 0506 	ands.w	r5, r5, #6
 80050f8:	d106      	bne.n	8005108 <_printf_common+0x48>
 80050fa:	f104 0a19 	add.w	sl, r4, #25
 80050fe:	68e3      	ldr	r3, [r4, #12]
 8005100:	6832      	ldr	r2, [r6, #0]
 8005102:	1a9b      	subs	r3, r3, r2
 8005104:	42ab      	cmp	r3, r5
 8005106:	dc28      	bgt.n	800515a <_printf_common+0x9a>
 8005108:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800510c:	1e13      	subs	r3, r2, #0
 800510e:	6822      	ldr	r2, [r4, #0]
 8005110:	bf18      	it	ne
 8005112:	2301      	movne	r3, #1
 8005114:	0692      	lsls	r2, r2, #26
 8005116:	d42d      	bmi.n	8005174 <_printf_common+0xb4>
 8005118:	4649      	mov	r1, r9
 800511a:	4638      	mov	r0, r7
 800511c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005120:	47c0      	blx	r8
 8005122:	3001      	adds	r0, #1
 8005124:	d020      	beq.n	8005168 <_printf_common+0xa8>
 8005126:	6823      	ldr	r3, [r4, #0]
 8005128:	68e5      	ldr	r5, [r4, #12]
 800512a:	f003 0306 	and.w	r3, r3, #6
 800512e:	2b04      	cmp	r3, #4
 8005130:	bf18      	it	ne
 8005132:	2500      	movne	r5, #0
 8005134:	6832      	ldr	r2, [r6, #0]
 8005136:	f04f 0600 	mov.w	r6, #0
 800513a:	68a3      	ldr	r3, [r4, #8]
 800513c:	bf08      	it	eq
 800513e:	1aad      	subeq	r5, r5, r2
 8005140:	6922      	ldr	r2, [r4, #16]
 8005142:	bf08      	it	eq
 8005144:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005148:	4293      	cmp	r3, r2
 800514a:	bfc4      	itt	gt
 800514c:	1a9b      	subgt	r3, r3, r2
 800514e:	18ed      	addgt	r5, r5, r3
 8005150:	341a      	adds	r4, #26
 8005152:	42b5      	cmp	r5, r6
 8005154:	d11a      	bne.n	800518c <_printf_common+0xcc>
 8005156:	2000      	movs	r0, #0
 8005158:	e008      	b.n	800516c <_printf_common+0xac>
 800515a:	2301      	movs	r3, #1
 800515c:	4652      	mov	r2, sl
 800515e:	4649      	mov	r1, r9
 8005160:	4638      	mov	r0, r7
 8005162:	47c0      	blx	r8
 8005164:	3001      	adds	r0, #1
 8005166:	d103      	bne.n	8005170 <_printf_common+0xb0>
 8005168:	f04f 30ff 	mov.w	r0, #4294967295
 800516c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005170:	3501      	adds	r5, #1
 8005172:	e7c4      	b.n	80050fe <_printf_common+0x3e>
 8005174:	2030      	movs	r0, #48	; 0x30
 8005176:	18e1      	adds	r1, r4, r3
 8005178:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800517c:	1c5a      	adds	r2, r3, #1
 800517e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005182:	4422      	add	r2, r4
 8005184:	3302      	adds	r3, #2
 8005186:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800518a:	e7c5      	b.n	8005118 <_printf_common+0x58>
 800518c:	2301      	movs	r3, #1
 800518e:	4622      	mov	r2, r4
 8005190:	4649      	mov	r1, r9
 8005192:	4638      	mov	r0, r7
 8005194:	47c0      	blx	r8
 8005196:	3001      	adds	r0, #1
 8005198:	d0e6      	beq.n	8005168 <_printf_common+0xa8>
 800519a:	3601      	adds	r6, #1
 800519c:	e7d9      	b.n	8005152 <_printf_common+0x92>
	...

080051a0 <_printf_i>:
 80051a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051a4:	460c      	mov	r4, r1
 80051a6:	7e27      	ldrb	r7, [r4, #24]
 80051a8:	4691      	mov	r9, r2
 80051aa:	2f78      	cmp	r7, #120	; 0x78
 80051ac:	4680      	mov	r8, r0
 80051ae:	469a      	mov	sl, r3
 80051b0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80051b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051b6:	d807      	bhi.n	80051c8 <_printf_i+0x28>
 80051b8:	2f62      	cmp	r7, #98	; 0x62
 80051ba:	d80a      	bhi.n	80051d2 <_printf_i+0x32>
 80051bc:	2f00      	cmp	r7, #0
 80051be:	f000 80d9 	beq.w	8005374 <_printf_i+0x1d4>
 80051c2:	2f58      	cmp	r7, #88	; 0x58
 80051c4:	f000 80a4 	beq.w	8005310 <_printf_i+0x170>
 80051c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80051cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80051d0:	e03a      	b.n	8005248 <_printf_i+0xa8>
 80051d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80051d6:	2b15      	cmp	r3, #21
 80051d8:	d8f6      	bhi.n	80051c8 <_printf_i+0x28>
 80051da:	a001      	add	r0, pc, #4	; (adr r0, 80051e0 <_printf_i+0x40>)
 80051dc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80051e0:	08005239 	.word	0x08005239
 80051e4:	0800524d 	.word	0x0800524d
 80051e8:	080051c9 	.word	0x080051c9
 80051ec:	080051c9 	.word	0x080051c9
 80051f0:	080051c9 	.word	0x080051c9
 80051f4:	080051c9 	.word	0x080051c9
 80051f8:	0800524d 	.word	0x0800524d
 80051fc:	080051c9 	.word	0x080051c9
 8005200:	080051c9 	.word	0x080051c9
 8005204:	080051c9 	.word	0x080051c9
 8005208:	080051c9 	.word	0x080051c9
 800520c:	0800535b 	.word	0x0800535b
 8005210:	0800527d 	.word	0x0800527d
 8005214:	0800533d 	.word	0x0800533d
 8005218:	080051c9 	.word	0x080051c9
 800521c:	080051c9 	.word	0x080051c9
 8005220:	0800537d 	.word	0x0800537d
 8005224:	080051c9 	.word	0x080051c9
 8005228:	0800527d 	.word	0x0800527d
 800522c:	080051c9 	.word	0x080051c9
 8005230:	080051c9 	.word	0x080051c9
 8005234:	08005345 	.word	0x08005345
 8005238:	680b      	ldr	r3, [r1, #0]
 800523a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800523e:	1d1a      	adds	r2, r3, #4
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	600a      	str	r2, [r1, #0]
 8005244:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005248:	2301      	movs	r3, #1
 800524a:	e0a4      	b.n	8005396 <_printf_i+0x1f6>
 800524c:	6825      	ldr	r5, [r4, #0]
 800524e:	6808      	ldr	r0, [r1, #0]
 8005250:	062e      	lsls	r6, r5, #24
 8005252:	f100 0304 	add.w	r3, r0, #4
 8005256:	d50a      	bpl.n	800526e <_printf_i+0xce>
 8005258:	6805      	ldr	r5, [r0, #0]
 800525a:	600b      	str	r3, [r1, #0]
 800525c:	2d00      	cmp	r5, #0
 800525e:	da03      	bge.n	8005268 <_printf_i+0xc8>
 8005260:	232d      	movs	r3, #45	; 0x2d
 8005262:	426d      	negs	r5, r5
 8005264:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005268:	230a      	movs	r3, #10
 800526a:	485e      	ldr	r0, [pc, #376]	; (80053e4 <_printf_i+0x244>)
 800526c:	e019      	b.n	80052a2 <_printf_i+0x102>
 800526e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005272:	6805      	ldr	r5, [r0, #0]
 8005274:	600b      	str	r3, [r1, #0]
 8005276:	bf18      	it	ne
 8005278:	b22d      	sxthne	r5, r5
 800527a:	e7ef      	b.n	800525c <_printf_i+0xbc>
 800527c:	680b      	ldr	r3, [r1, #0]
 800527e:	6825      	ldr	r5, [r4, #0]
 8005280:	1d18      	adds	r0, r3, #4
 8005282:	6008      	str	r0, [r1, #0]
 8005284:	0628      	lsls	r0, r5, #24
 8005286:	d501      	bpl.n	800528c <_printf_i+0xec>
 8005288:	681d      	ldr	r5, [r3, #0]
 800528a:	e002      	b.n	8005292 <_printf_i+0xf2>
 800528c:	0669      	lsls	r1, r5, #25
 800528e:	d5fb      	bpl.n	8005288 <_printf_i+0xe8>
 8005290:	881d      	ldrh	r5, [r3, #0]
 8005292:	2f6f      	cmp	r7, #111	; 0x6f
 8005294:	bf0c      	ite	eq
 8005296:	2308      	moveq	r3, #8
 8005298:	230a      	movne	r3, #10
 800529a:	4852      	ldr	r0, [pc, #328]	; (80053e4 <_printf_i+0x244>)
 800529c:	2100      	movs	r1, #0
 800529e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80052a2:	6866      	ldr	r6, [r4, #4]
 80052a4:	2e00      	cmp	r6, #0
 80052a6:	bfa8      	it	ge
 80052a8:	6821      	ldrge	r1, [r4, #0]
 80052aa:	60a6      	str	r6, [r4, #8]
 80052ac:	bfa4      	itt	ge
 80052ae:	f021 0104 	bicge.w	r1, r1, #4
 80052b2:	6021      	strge	r1, [r4, #0]
 80052b4:	b90d      	cbnz	r5, 80052ba <_printf_i+0x11a>
 80052b6:	2e00      	cmp	r6, #0
 80052b8:	d04d      	beq.n	8005356 <_printf_i+0x1b6>
 80052ba:	4616      	mov	r6, r2
 80052bc:	fbb5 f1f3 	udiv	r1, r5, r3
 80052c0:	fb03 5711 	mls	r7, r3, r1, r5
 80052c4:	5dc7      	ldrb	r7, [r0, r7]
 80052c6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80052ca:	462f      	mov	r7, r5
 80052cc:	42bb      	cmp	r3, r7
 80052ce:	460d      	mov	r5, r1
 80052d0:	d9f4      	bls.n	80052bc <_printf_i+0x11c>
 80052d2:	2b08      	cmp	r3, #8
 80052d4:	d10b      	bne.n	80052ee <_printf_i+0x14e>
 80052d6:	6823      	ldr	r3, [r4, #0]
 80052d8:	07df      	lsls	r7, r3, #31
 80052da:	d508      	bpl.n	80052ee <_printf_i+0x14e>
 80052dc:	6923      	ldr	r3, [r4, #16]
 80052de:	6861      	ldr	r1, [r4, #4]
 80052e0:	4299      	cmp	r1, r3
 80052e2:	bfde      	ittt	le
 80052e4:	2330      	movle	r3, #48	; 0x30
 80052e6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80052ea:	f106 36ff 	addle.w	r6, r6, #4294967295
 80052ee:	1b92      	subs	r2, r2, r6
 80052f0:	6122      	str	r2, [r4, #16]
 80052f2:	464b      	mov	r3, r9
 80052f4:	4621      	mov	r1, r4
 80052f6:	4640      	mov	r0, r8
 80052f8:	f8cd a000 	str.w	sl, [sp]
 80052fc:	aa03      	add	r2, sp, #12
 80052fe:	f7ff fedf 	bl	80050c0 <_printf_common>
 8005302:	3001      	adds	r0, #1
 8005304:	d14c      	bne.n	80053a0 <_printf_i+0x200>
 8005306:	f04f 30ff 	mov.w	r0, #4294967295
 800530a:	b004      	add	sp, #16
 800530c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005310:	4834      	ldr	r0, [pc, #208]	; (80053e4 <_printf_i+0x244>)
 8005312:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005316:	680e      	ldr	r6, [r1, #0]
 8005318:	6823      	ldr	r3, [r4, #0]
 800531a:	f856 5b04 	ldr.w	r5, [r6], #4
 800531e:	061f      	lsls	r7, r3, #24
 8005320:	600e      	str	r6, [r1, #0]
 8005322:	d514      	bpl.n	800534e <_printf_i+0x1ae>
 8005324:	07d9      	lsls	r1, r3, #31
 8005326:	bf44      	itt	mi
 8005328:	f043 0320 	orrmi.w	r3, r3, #32
 800532c:	6023      	strmi	r3, [r4, #0]
 800532e:	b91d      	cbnz	r5, 8005338 <_printf_i+0x198>
 8005330:	6823      	ldr	r3, [r4, #0]
 8005332:	f023 0320 	bic.w	r3, r3, #32
 8005336:	6023      	str	r3, [r4, #0]
 8005338:	2310      	movs	r3, #16
 800533a:	e7af      	b.n	800529c <_printf_i+0xfc>
 800533c:	6823      	ldr	r3, [r4, #0]
 800533e:	f043 0320 	orr.w	r3, r3, #32
 8005342:	6023      	str	r3, [r4, #0]
 8005344:	2378      	movs	r3, #120	; 0x78
 8005346:	4828      	ldr	r0, [pc, #160]	; (80053e8 <_printf_i+0x248>)
 8005348:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800534c:	e7e3      	b.n	8005316 <_printf_i+0x176>
 800534e:	065e      	lsls	r6, r3, #25
 8005350:	bf48      	it	mi
 8005352:	b2ad      	uxthmi	r5, r5
 8005354:	e7e6      	b.n	8005324 <_printf_i+0x184>
 8005356:	4616      	mov	r6, r2
 8005358:	e7bb      	b.n	80052d2 <_printf_i+0x132>
 800535a:	680b      	ldr	r3, [r1, #0]
 800535c:	6826      	ldr	r6, [r4, #0]
 800535e:	1d1d      	adds	r5, r3, #4
 8005360:	6960      	ldr	r0, [r4, #20]
 8005362:	600d      	str	r5, [r1, #0]
 8005364:	0635      	lsls	r5, r6, #24
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	d501      	bpl.n	800536e <_printf_i+0x1ce>
 800536a:	6018      	str	r0, [r3, #0]
 800536c:	e002      	b.n	8005374 <_printf_i+0x1d4>
 800536e:	0671      	lsls	r1, r6, #25
 8005370:	d5fb      	bpl.n	800536a <_printf_i+0x1ca>
 8005372:	8018      	strh	r0, [r3, #0]
 8005374:	2300      	movs	r3, #0
 8005376:	4616      	mov	r6, r2
 8005378:	6123      	str	r3, [r4, #16]
 800537a:	e7ba      	b.n	80052f2 <_printf_i+0x152>
 800537c:	680b      	ldr	r3, [r1, #0]
 800537e:	1d1a      	adds	r2, r3, #4
 8005380:	600a      	str	r2, [r1, #0]
 8005382:	681e      	ldr	r6, [r3, #0]
 8005384:	2100      	movs	r1, #0
 8005386:	4630      	mov	r0, r6
 8005388:	6862      	ldr	r2, [r4, #4]
 800538a:	f000 fed7 	bl	800613c <memchr>
 800538e:	b108      	cbz	r0, 8005394 <_printf_i+0x1f4>
 8005390:	1b80      	subs	r0, r0, r6
 8005392:	6060      	str	r0, [r4, #4]
 8005394:	6863      	ldr	r3, [r4, #4]
 8005396:	6123      	str	r3, [r4, #16]
 8005398:	2300      	movs	r3, #0
 800539a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800539e:	e7a8      	b.n	80052f2 <_printf_i+0x152>
 80053a0:	4632      	mov	r2, r6
 80053a2:	4649      	mov	r1, r9
 80053a4:	4640      	mov	r0, r8
 80053a6:	6923      	ldr	r3, [r4, #16]
 80053a8:	47d0      	blx	sl
 80053aa:	3001      	adds	r0, #1
 80053ac:	d0ab      	beq.n	8005306 <_printf_i+0x166>
 80053ae:	6823      	ldr	r3, [r4, #0]
 80053b0:	079b      	lsls	r3, r3, #30
 80053b2:	d413      	bmi.n	80053dc <_printf_i+0x23c>
 80053b4:	68e0      	ldr	r0, [r4, #12]
 80053b6:	9b03      	ldr	r3, [sp, #12]
 80053b8:	4298      	cmp	r0, r3
 80053ba:	bfb8      	it	lt
 80053bc:	4618      	movlt	r0, r3
 80053be:	e7a4      	b.n	800530a <_printf_i+0x16a>
 80053c0:	2301      	movs	r3, #1
 80053c2:	4632      	mov	r2, r6
 80053c4:	4649      	mov	r1, r9
 80053c6:	4640      	mov	r0, r8
 80053c8:	47d0      	blx	sl
 80053ca:	3001      	adds	r0, #1
 80053cc:	d09b      	beq.n	8005306 <_printf_i+0x166>
 80053ce:	3501      	adds	r5, #1
 80053d0:	68e3      	ldr	r3, [r4, #12]
 80053d2:	9903      	ldr	r1, [sp, #12]
 80053d4:	1a5b      	subs	r3, r3, r1
 80053d6:	42ab      	cmp	r3, r5
 80053d8:	dcf2      	bgt.n	80053c0 <_printf_i+0x220>
 80053da:	e7eb      	b.n	80053b4 <_printf_i+0x214>
 80053dc:	2500      	movs	r5, #0
 80053de:	f104 0619 	add.w	r6, r4, #25
 80053e2:	e7f5      	b.n	80053d0 <_printf_i+0x230>
 80053e4:	08007dda 	.word	0x08007dda
 80053e8:	08007deb 	.word	0x08007deb

080053ec <siprintf>:
 80053ec:	b40e      	push	{r1, r2, r3}
 80053ee:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80053f2:	b500      	push	{lr}
 80053f4:	b09c      	sub	sp, #112	; 0x70
 80053f6:	ab1d      	add	r3, sp, #116	; 0x74
 80053f8:	9002      	str	r0, [sp, #8]
 80053fa:	9006      	str	r0, [sp, #24]
 80053fc:	9107      	str	r1, [sp, #28]
 80053fe:	9104      	str	r1, [sp, #16]
 8005400:	4808      	ldr	r0, [pc, #32]	; (8005424 <siprintf+0x38>)
 8005402:	4909      	ldr	r1, [pc, #36]	; (8005428 <siprintf+0x3c>)
 8005404:	f853 2b04 	ldr.w	r2, [r3], #4
 8005408:	9105      	str	r1, [sp, #20]
 800540a:	6800      	ldr	r0, [r0, #0]
 800540c:	a902      	add	r1, sp, #8
 800540e:	9301      	str	r3, [sp, #4]
 8005410:	f001 fb34 	bl	8006a7c <_svfiprintf_r>
 8005414:	2200      	movs	r2, #0
 8005416:	9b02      	ldr	r3, [sp, #8]
 8005418:	701a      	strb	r2, [r3, #0]
 800541a:	b01c      	add	sp, #112	; 0x70
 800541c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005420:	b003      	add	sp, #12
 8005422:	4770      	bx	lr
 8005424:	20000034 	.word	0x20000034
 8005428:	ffff0208 	.word	0xffff0208

0800542c <quorem>:
 800542c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005430:	6903      	ldr	r3, [r0, #16]
 8005432:	690c      	ldr	r4, [r1, #16]
 8005434:	4607      	mov	r7, r0
 8005436:	42a3      	cmp	r3, r4
 8005438:	f2c0 8083 	blt.w	8005542 <quorem+0x116>
 800543c:	3c01      	subs	r4, #1
 800543e:	f100 0514 	add.w	r5, r0, #20
 8005442:	f101 0814 	add.w	r8, r1, #20
 8005446:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800544a:	9301      	str	r3, [sp, #4]
 800544c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005450:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005454:	3301      	adds	r3, #1
 8005456:	429a      	cmp	r2, r3
 8005458:	fbb2 f6f3 	udiv	r6, r2, r3
 800545c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005460:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005464:	d332      	bcc.n	80054cc <quorem+0xa0>
 8005466:	f04f 0e00 	mov.w	lr, #0
 800546a:	4640      	mov	r0, r8
 800546c:	46ac      	mov	ip, r5
 800546e:	46f2      	mov	sl, lr
 8005470:	f850 2b04 	ldr.w	r2, [r0], #4
 8005474:	b293      	uxth	r3, r2
 8005476:	fb06 e303 	mla	r3, r6, r3, lr
 800547a:	0c12      	lsrs	r2, r2, #16
 800547c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005480:	fb06 e202 	mla	r2, r6, r2, lr
 8005484:	b29b      	uxth	r3, r3
 8005486:	ebaa 0303 	sub.w	r3, sl, r3
 800548a:	f8dc a000 	ldr.w	sl, [ip]
 800548e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005492:	fa1f fa8a 	uxth.w	sl, sl
 8005496:	4453      	add	r3, sl
 8005498:	fa1f fa82 	uxth.w	sl, r2
 800549c:	f8dc 2000 	ldr.w	r2, [ip]
 80054a0:	4581      	cmp	r9, r0
 80054a2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80054a6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80054b0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80054b4:	f84c 3b04 	str.w	r3, [ip], #4
 80054b8:	d2da      	bcs.n	8005470 <quorem+0x44>
 80054ba:	f855 300b 	ldr.w	r3, [r5, fp]
 80054be:	b92b      	cbnz	r3, 80054cc <quorem+0xa0>
 80054c0:	9b01      	ldr	r3, [sp, #4]
 80054c2:	3b04      	subs	r3, #4
 80054c4:	429d      	cmp	r5, r3
 80054c6:	461a      	mov	r2, r3
 80054c8:	d32f      	bcc.n	800552a <quorem+0xfe>
 80054ca:	613c      	str	r4, [r7, #16]
 80054cc:	4638      	mov	r0, r7
 80054ce:	f001 f8bd 	bl	800664c <__mcmp>
 80054d2:	2800      	cmp	r0, #0
 80054d4:	db25      	blt.n	8005522 <quorem+0xf6>
 80054d6:	4628      	mov	r0, r5
 80054d8:	f04f 0c00 	mov.w	ip, #0
 80054dc:	3601      	adds	r6, #1
 80054de:	f858 1b04 	ldr.w	r1, [r8], #4
 80054e2:	f8d0 e000 	ldr.w	lr, [r0]
 80054e6:	b28b      	uxth	r3, r1
 80054e8:	ebac 0303 	sub.w	r3, ip, r3
 80054ec:	fa1f f28e 	uxth.w	r2, lr
 80054f0:	4413      	add	r3, r2
 80054f2:	0c0a      	lsrs	r2, r1, #16
 80054f4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80054f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005502:	45c1      	cmp	r9, r8
 8005504:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005508:	f840 3b04 	str.w	r3, [r0], #4
 800550c:	d2e7      	bcs.n	80054de <quorem+0xb2>
 800550e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005512:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005516:	b922      	cbnz	r2, 8005522 <quorem+0xf6>
 8005518:	3b04      	subs	r3, #4
 800551a:	429d      	cmp	r5, r3
 800551c:	461a      	mov	r2, r3
 800551e:	d30a      	bcc.n	8005536 <quorem+0x10a>
 8005520:	613c      	str	r4, [r7, #16]
 8005522:	4630      	mov	r0, r6
 8005524:	b003      	add	sp, #12
 8005526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800552a:	6812      	ldr	r2, [r2, #0]
 800552c:	3b04      	subs	r3, #4
 800552e:	2a00      	cmp	r2, #0
 8005530:	d1cb      	bne.n	80054ca <quorem+0x9e>
 8005532:	3c01      	subs	r4, #1
 8005534:	e7c6      	b.n	80054c4 <quorem+0x98>
 8005536:	6812      	ldr	r2, [r2, #0]
 8005538:	3b04      	subs	r3, #4
 800553a:	2a00      	cmp	r2, #0
 800553c:	d1f0      	bne.n	8005520 <quorem+0xf4>
 800553e:	3c01      	subs	r4, #1
 8005540:	e7eb      	b.n	800551a <quorem+0xee>
 8005542:	2000      	movs	r0, #0
 8005544:	e7ee      	b.n	8005524 <quorem+0xf8>
	...

08005548 <_dtoa_r>:
 8005548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800554c:	4616      	mov	r6, r2
 800554e:	461f      	mov	r7, r3
 8005550:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005552:	b099      	sub	sp, #100	; 0x64
 8005554:	4605      	mov	r5, r0
 8005556:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800555a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800555e:	b974      	cbnz	r4, 800557e <_dtoa_r+0x36>
 8005560:	2010      	movs	r0, #16
 8005562:	f000 fde3 	bl	800612c <malloc>
 8005566:	4602      	mov	r2, r0
 8005568:	6268      	str	r0, [r5, #36]	; 0x24
 800556a:	b920      	cbnz	r0, 8005576 <_dtoa_r+0x2e>
 800556c:	21ea      	movs	r1, #234	; 0xea
 800556e:	4bae      	ldr	r3, [pc, #696]	; (8005828 <_dtoa_r+0x2e0>)
 8005570:	48ae      	ldr	r0, [pc, #696]	; (800582c <_dtoa_r+0x2e4>)
 8005572:	f001 fb93 	bl	8006c9c <__assert_func>
 8005576:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800557a:	6004      	str	r4, [r0, #0]
 800557c:	60c4      	str	r4, [r0, #12]
 800557e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005580:	6819      	ldr	r1, [r3, #0]
 8005582:	b151      	cbz	r1, 800559a <_dtoa_r+0x52>
 8005584:	685a      	ldr	r2, [r3, #4]
 8005586:	2301      	movs	r3, #1
 8005588:	4093      	lsls	r3, r2
 800558a:	604a      	str	r2, [r1, #4]
 800558c:	608b      	str	r3, [r1, #8]
 800558e:	4628      	mov	r0, r5
 8005590:	f000 fe22 	bl	80061d8 <_Bfree>
 8005594:	2200      	movs	r2, #0
 8005596:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005598:	601a      	str	r2, [r3, #0]
 800559a:	1e3b      	subs	r3, r7, #0
 800559c:	bfaf      	iteee	ge
 800559e:	2300      	movge	r3, #0
 80055a0:	2201      	movlt	r2, #1
 80055a2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80055a6:	9305      	strlt	r3, [sp, #20]
 80055a8:	bfa8      	it	ge
 80055aa:	f8c8 3000 	strge.w	r3, [r8]
 80055ae:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80055b2:	4b9f      	ldr	r3, [pc, #636]	; (8005830 <_dtoa_r+0x2e8>)
 80055b4:	bfb8      	it	lt
 80055b6:	f8c8 2000 	strlt.w	r2, [r8]
 80055ba:	ea33 0309 	bics.w	r3, r3, r9
 80055be:	d119      	bne.n	80055f4 <_dtoa_r+0xac>
 80055c0:	f242 730f 	movw	r3, #9999	; 0x270f
 80055c4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80055c6:	6013      	str	r3, [r2, #0]
 80055c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80055cc:	4333      	orrs	r3, r6
 80055ce:	f000 8580 	beq.w	80060d2 <_dtoa_r+0xb8a>
 80055d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80055d4:	b953      	cbnz	r3, 80055ec <_dtoa_r+0xa4>
 80055d6:	4b97      	ldr	r3, [pc, #604]	; (8005834 <_dtoa_r+0x2ec>)
 80055d8:	e022      	b.n	8005620 <_dtoa_r+0xd8>
 80055da:	4b97      	ldr	r3, [pc, #604]	; (8005838 <_dtoa_r+0x2f0>)
 80055dc:	9308      	str	r3, [sp, #32]
 80055de:	3308      	adds	r3, #8
 80055e0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80055e2:	6013      	str	r3, [r2, #0]
 80055e4:	9808      	ldr	r0, [sp, #32]
 80055e6:	b019      	add	sp, #100	; 0x64
 80055e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055ec:	4b91      	ldr	r3, [pc, #580]	; (8005834 <_dtoa_r+0x2ec>)
 80055ee:	9308      	str	r3, [sp, #32]
 80055f0:	3303      	adds	r3, #3
 80055f2:	e7f5      	b.n	80055e0 <_dtoa_r+0x98>
 80055f4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80055f8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80055fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005600:	2200      	movs	r2, #0
 8005602:	2300      	movs	r3, #0
 8005604:	f7fb f9d0 	bl	80009a8 <__aeabi_dcmpeq>
 8005608:	4680      	mov	r8, r0
 800560a:	b158      	cbz	r0, 8005624 <_dtoa_r+0xdc>
 800560c:	2301      	movs	r3, #1
 800560e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005610:	6013      	str	r3, [r2, #0]
 8005612:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005614:	2b00      	cmp	r3, #0
 8005616:	f000 8559 	beq.w	80060cc <_dtoa_r+0xb84>
 800561a:	4888      	ldr	r0, [pc, #544]	; (800583c <_dtoa_r+0x2f4>)
 800561c:	6018      	str	r0, [r3, #0]
 800561e:	1e43      	subs	r3, r0, #1
 8005620:	9308      	str	r3, [sp, #32]
 8005622:	e7df      	b.n	80055e4 <_dtoa_r+0x9c>
 8005624:	ab16      	add	r3, sp, #88	; 0x58
 8005626:	9301      	str	r3, [sp, #4]
 8005628:	ab17      	add	r3, sp, #92	; 0x5c
 800562a:	9300      	str	r3, [sp, #0]
 800562c:	4628      	mov	r0, r5
 800562e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005632:	f001 f8b7 	bl	80067a4 <__d2b>
 8005636:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800563a:	4682      	mov	sl, r0
 800563c:	2c00      	cmp	r4, #0
 800563e:	d07e      	beq.n	800573e <_dtoa_r+0x1f6>
 8005640:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005644:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005646:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800564a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800564e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005652:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005656:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800565a:	2200      	movs	r2, #0
 800565c:	4b78      	ldr	r3, [pc, #480]	; (8005840 <_dtoa_r+0x2f8>)
 800565e:	f7fa fd83 	bl	8000168 <__aeabi_dsub>
 8005662:	a36b      	add	r3, pc, #428	; (adr r3, 8005810 <_dtoa_r+0x2c8>)
 8005664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005668:	f7fa ff36 	bl	80004d8 <__aeabi_dmul>
 800566c:	a36a      	add	r3, pc, #424	; (adr r3, 8005818 <_dtoa_r+0x2d0>)
 800566e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005672:	f7fa fd7b 	bl	800016c <__adddf3>
 8005676:	4606      	mov	r6, r0
 8005678:	4620      	mov	r0, r4
 800567a:	460f      	mov	r7, r1
 800567c:	f7fa fec2 	bl	8000404 <__aeabi_i2d>
 8005680:	a367      	add	r3, pc, #412	; (adr r3, 8005820 <_dtoa_r+0x2d8>)
 8005682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005686:	f7fa ff27 	bl	80004d8 <__aeabi_dmul>
 800568a:	4602      	mov	r2, r0
 800568c:	460b      	mov	r3, r1
 800568e:	4630      	mov	r0, r6
 8005690:	4639      	mov	r1, r7
 8005692:	f7fa fd6b 	bl	800016c <__adddf3>
 8005696:	4606      	mov	r6, r0
 8005698:	460f      	mov	r7, r1
 800569a:	f7fb f9cd 	bl	8000a38 <__aeabi_d2iz>
 800569e:	2200      	movs	r2, #0
 80056a0:	4681      	mov	r9, r0
 80056a2:	2300      	movs	r3, #0
 80056a4:	4630      	mov	r0, r6
 80056a6:	4639      	mov	r1, r7
 80056a8:	f7fb f988 	bl	80009bc <__aeabi_dcmplt>
 80056ac:	b148      	cbz	r0, 80056c2 <_dtoa_r+0x17a>
 80056ae:	4648      	mov	r0, r9
 80056b0:	f7fa fea8 	bl	8000404 <__aeabi_i2d>
 80056b4:	4632      	mov	r2, r6
 80056b6:	463b      	mov	r3, r7
 80056b8:	f7fb f976 	bl	80009a8 <__aeabi_dcmpeq>
 80056bc:	b908      	cbnz	r0, 80056c2 <_dtoa_r+0x17a>
 80056be:	f109 39ff 	add.w	r9, r9, #4294967295
 80056c2:	f1b9 0f16 	cmp.w	r9, #22
 80056c6:	d857      	bhi.n	8005778 <_dtoa_r+0x230>
 80056c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80056cc:	4b5d      	ldr	r3, [pc, #372]	; (8005844 <_dtoa_r+0x2fc>)
 80056ce:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80056d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d6:	f7fb f971 	bl	80009bc <__aeabi_dcmplt>
 80056da:	2800      	cmp	r0, #0
 80056dc:	d04e      	beq.n	800577c <_dtoa_r+0x234>
 80056de:	2300      	movs	r3, #0
 80056e0:	f109 39ff 	add.w	r9, r9, #4294967295
 80056e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80056e6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80056e8:	1b1c      	subs	r4, r3, r4
 80056ea:	1e63      	subs	r3, r4, #1
 80056ec:	9309      	str	r3, [sp, #36]	; 0x24
 80056ee:	bf49      	itett	mi
 80056f0:	f1c4 0301 	rsbmi	r3, r4, #1
 80056f4:	2300      	movpl	r3, #0
 80056f6:	9306      	strmi	r3, [sp, #24]
 80056f8:	2300      	movmi	r3, #0
 80056fa:	bf54      	ite	pl
 80056fc:	9306      	strpl	r3, [sp, #24]
 80056fe:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005700:	f1b9 0f00 	cmp.w	r9, #0
 8005704:	db3c      	blt.n	8005780 <_dtoa_r+0x238>
 8005706:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005708:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800570c:	444b      	add	r3, r9
 800570e:	9309      	str	r3, [sp, #36]	; 0x24
 8005710:	2300      	movs	r3, #0
 8005712:	930a      	str	r3, [sp, #40]	; 0x28
 8005714:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005716:	2b09      	cmp	r3, #9
 8005718:	d86c      	bhi.n	80057f4 <_dtoa_r+0x2ac>
 800571a:	2b05      	cmp	r3, #5
 800571c:	bfc4      	itt	gt
 800571e:	3b04      	subgt	r3, #4
 8005720:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005722:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005724:	bfc8      	it	gt
 8005726:	2400      	movgt	r4, #0
 8005728:	f1a3 0302 	sub.w	r3, r3, #2
 800572c:	bfd8      	it	le
 800572e:	2401      	movle	r4, #1
 8005730:	2b03      	cmp	r3, #3
 8005732:	f200 808b 	bhi.w	800584c <_dtoa_r+0x304>
 8005736:	e8df f003 	tbb	[pc, r3]
 800573a:	4f2d      	.short	0x4f2d
 800573c:	5b4d      	.short	0x5b4d
 800573e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005742:	441c      	add	r4, r3
 8005744:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005748:	2b20      	cmp	r3, #32
 800574a:	bfc3      	ittte	gt
 800574c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005750:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8005754:	fa09 f303 	lslgt.w	r3, r9, r3
 8005758:	f1c3 0320 	rsble	r3, r3, #32
 800575c:	bfc6      	itte	gt
 800575e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005762:	4318      	orrgt	r0, r3
 8005764:	fa06 f003 	lslle.w	r0, r6, r3
 8005768:	f7fa fe3c 	bl	80003e4 <__aeabi_ui2d>
 800576c:	2301      	movs	r3, #1
 800576e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005772:	3c01      	subs	r4, #1
 8005774:	9313      	str	r3, [sp, #76]	; 0x4c
 8005776:	e770      	b.n	800565a <_dtoa_r+0x112>
 8005778:	2301      	movs	r3, #1
 800577a:	e7b3      	b.n	80056e4 <_dtoa_r+0x19c>
 800577c:	900f      	str	r0, [sp, #60]	; 0x3c
 800577e:	e7b2      	b.n	80056e6 <_dtoa_r+0x19e>
 8005780:	9b06      	ldr	r3, [sp, #24]
 8005782:	eba3 0309 	sub.w	r3, r3, r9
 8005786:	9306      	str	r3, [sp, #24]
 8005788:	f1c9 0300 	rsb	r3, r9, #0
 800578c:	930a      	str	r3, [sp, #40]	; 0x28
 800578e:	2300      	movs	r3, #0
 8005790:	930e      	str	r3, [sp, #56]	; 0x38
 8005792:	e7bf      	b.n	8005714 <_dtoa_r+0x1cc>
 8005794:	2300      	movs	r3, #0
 8005796:	930b      	str	r3, [sp, #44]	; 0x2c
 8005798:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800579a:	2b00      	cmp	r3, #0
 800579c:	dc59      	bgt.n	8005852 <_dtoa_r+0x30a>
 800579e:	f04f 0b01 	mov.w	fp, #1
 80057a2:	465b      	mov	r3, fp
 80057a4:	f8cd b008 	str.w	fp, [sp, #8]
 80057a8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80057ac:	2200      	movs	r2, #0
 80057ae:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80057b0:	6042      	str	r2, [r0, #4]
 80057b2:	2204      	movs	r2, #4
 80057b4:	f102 0614 	add.w	r6, r2, #20
 80057b8:	429e      	cmp	r6, r3
 80057ba:	6841      	ldr	r1, [r0, #4]
 80057bc:	d94f      	bls.n	800585e <_dtoa_r+0x316>
 80057be:	4628      	mov	r0, r5
 80057c0:	f000 fcca 	bl	8006158 <_Balloc>
 80057c4:	9008      	str	r0, [sp, #32]
 80057c6:	2800      	cmp	r0, #0
 80057c8:	d14d      	bne.n	8005866 <_dtoa_r+0x31e>
 80057ca:	4602      	mov	r2, r0
 80057cc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80057d0:	4b1d      	ldr	r3, [pc, #116]	; (8005848 <_dtoa_r+0x300>)
 80057d2:	e6cd      	b.n	8005570 <_dtoa_r+0x28>
 80057d4:	2301      	movs	r3, #1
 80057d6:	e7de      	b.n	8005796 <_dtoa_r+0x24e>
 80057d8:	2300      	movs	r3, #0
 80057da:	930b      	str	r3, [sp, #44]	; 0x2c
 80057dc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80057de:	eb09 0b03 	add.w	fp, r9, r3
 80057e2:	f10b 0301 	add.w	r3, fp, #1
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	9302      	str	r3, [sp, #8]
 80057ea:	bfb8      	it	lt
 80057ec:	2301      	movlt	r3, #1
 80057ee:	e7dd      	b.n	80057ac <_dtoa_r+0x264>
 80057f0:	2301      	movs	r3, #1
 80057f2:	e7f2      	b.n	80057da <_dtoa_r+0x292>
 80057f4:	2401      	movs	r4, #1
 80057f6:	2300      	movs	r3, #0
 80057f8:	940b      	str	r4, [sp, #44]	; 0x2c
 80057fa:	9322      	str	r3, [sp, #136]	; 0x88
 80057fc:	f04f 3bff 	mov.w	fp, #4294967295
 8005800:	2200      	movs	r2, #0
 8005802:	2312      	movs	r3, #18
 8005804:	f8cd b008 	str.w	fp, [sp, #8]
 8005808:	9223      	str	r2, [sp, #140]	; 0x8c
 800580a:	e7cf      	b.n	80057ac <_dtoa_r+0x264>
 800580c:	f3af 8000 	nop.w
 8005810:	636f4361 	.word	0x636f4361
 8005814:	3fd287a7 	.word	0x3fd287a7
 8005818:	8b60c8b3 	.word	0x8b60c8b3
 800581c:	3fc68a28 	.word	0x3fc68a28
 8005820:	509f79fb 	.word	0x509f79fb
 8005824:	3fd34413 	.word	0x3fd34413
 8005828:	08007e09 	.word	0x08007e09
 800582c:	08007e20 	.word	0x08007e20
 8005830:	7ff00000 	.word	0x7ff00000
 8005834:	08007e05 	.word	0x08007e05
 8005838:	08007dfc 	.word	0x08007dfc
 800583c:	08007dd9 	.word	0x08007dd9
 8005840:	3ff80000 	.word	0x3ff80000
 8005844:	08007f18 	.word	0x08007f18
 8005848:	08007e7f 	.word	0x08007e7f
 800584c:	2301      	movs	r3, #1
 800584e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005850:	e7d4      	b.n	80057fc <_dtoa_r+0x2b4>
 8005852:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8005856:	465b      	mov	r3, fp
 8005858:	f8cd b008 	str.w	fp, [sp, #8]
 800585c:	e7a6      	b.n	80057ac <_dtoa_r+0x264>
 800585e:	3101      	adds	r1, #1
 8005860:	6041      	str	r1, [r0, #4]
 8005862:	0052      	lsls	r2, r2, #1
 8005864:	e7a6      	b.n	80057b4 <_dtoa_r+0x26c>
 8005866:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005868:	9a08      	ldr	r2, [sp, #32]
 800586a:	601a      	str	r2, [r3, #0]
 800586c:	9b02      	ldr	r3, [sp, #8]
 800586e:	2b0e      	cmp	r3, #14
 8005870:	f200 80a8 	bhi.w	80059c4 <_dtoa_r+0x47c>
 8005874:	2c00      	cmp	r4, #0
 8005876:	f000 80a5 	beq.w	80059c4 <_dtoa_r+0x47c>
 800587a:	f1b9 0f00 	cmp.w	r9, #0
 800587e:	dd34      	ble.n	80058ea <_dtoa_r+0x3a2>
 8005880:	4a9a      	ldr	r2, [pc, #616]	; (8005aec <_dtoa_r+0x5a4>)
 8005882:	f009 030f 	and.w	r3, r9, #15
 8005886:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800588a:	f419 7f80 	tst.w	r9, #256	; 0x100
 800588e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005892:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005896:	ea4f 1429 	mov.w	r4, r9, asr #4
 800589a:	d016      	beq.n	80058ca <_dtoa_r+0x382>
 800589c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80058a0:	4b93      	ldr	r3, [pc, #588]	; (8005af0 <_dtoa_r+0x5a8>)
 80058a2:	2703      	movs	r7, #3
 80058a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80058a8:	f7fa ff40 	bl	800072c <__aeabi_ddiv>
 80058ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80058b0:	f004 040f 	and.w	r4, r4, #15
 80058b4:	4e8e      	ldr	r6, [pc, #568]	; (8005af0 <_dtoa_r+0x5a8>)
 80058b6:	b954      	cbnz	r4, 80058ce <_dtoa_r+0x386>
 80058b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80058bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80058c0:	f7fa ff34 	bl	800072c <__aeabi_ddiv>
 80058c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80058c8:	e029      	b.n	800591e <_dtoa_r+0x3d6>
 80058ca:	2702      	movs	r7, #2
 80058cc:	e7f2      	b.n	80058b4 <_dtoa_r+0x36c>
 80058ce:	07e1      	lsls	r1, r4, #31
 80058d0:	d508      	bpl.n	80058e4 <_dtoa_r+0x39c>
 80058d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80058d6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80058da:	f7fa fdfd 	bl	80004d8 <__aeabi_dmul>
 80058de:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80058e2:	3701      	adds	r7, #1
 80058e4:	1064      	asrs	r4, r4, #1
 80058e6:	3608      	adds	r6, #8
 80058e8:	e7e5      	b.n	80058b6 <_dtoa_r+0x36e>
 80058ea:	f000 80a5 	beq.w	8005a38 <_dtoa_r+0x4f0>
 80058ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80058f2:	f1c9 0400 	rsb	r4, r9, #0
 80058f6:	4b7d      	ldr	r3, [pc, #500]	; (8005aec <_dtoa_r+0x5a4>)
 80058f8:	f004 020f 	and.w	r2, r4, #15
 80058fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005904:	f7fa fde8 	bl	80004d8 <__aeabi_dmul>
 8005908:	2702      	movs	r7, #2
 800590a:	2300      	movs	r3, #0
 800590c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005910:	4e77      	ldr	r6, [pc, #476]	; (8005af0 <_dtoa_r+0x5a8>)
 8005912:	1124      	asrs	r4, r4, #4
 8005914:	2c00      	cmp	r4, #0
 8005916:	f040 8084 	bne.w	8005a22 <_dtoa_r+0x4da>
 800591a:	2b00      	cmp	r3, #0
 800591c:	d1d2      	bne.n	80058c4 <_dtoa_r+0x37c>
 800591e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005920:	2b00      	cmp	r3, #0
 8005922:	f000 808b 	beq.w	8005a3c <_dtoa_r+0x4f4>
 8005926:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800592a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800592e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005932:	2200      	movs	r2, #0
 8005934:	4b6f      	ldr	r3, [pc, #444]	; (8005af4 <_dtoa_r+0x5ac>)
 8005936:	f7fb f841 	bl	80009bc <__aeabi_dcmplt>
 800593a:	2800      	cmp	r0, #0
 800593c:	d07e      	beq.n	8005a3c <_dtoa_r+0x4f4>
 800593e:	9b02      	ldr	r3, [sp, #8]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d07b      	beq.n	8005a3c <_dtoa_r+0x4f4>
 8005944:	f1bb 0f00 	cmp.w	fp, #0
 8005948:	dd38      	ble.n	80059bc <_dtoa_r+0x474>
 800594a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800594e:	2200      	movs	r2, #0
 8005950:	4b69      	ldr	r3, [pc, #420]	; (8005af8 <_dtoa_r+0x5b0>)
 8005952:	f7fa fdc1 	bl	80004d8 <__aeabi_dmul>
 8005956:	465c      	mov	r4, fp
 8005958:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800595c:	f109 38ff 	add.w	r8, r9, #4294967295
 8005960:	3701      	adds	r7, #1
 8005962:	4638      	mov	r0, r7
 8005964:	f7fa fd4e 	bl	8000404 <__aeabi_i2d>
 8005968:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800596c:	f7fa fdb4 	bl	80004d8 <__aeabi_dmul>
 8005970:	2200      	movs	r2, #0
 8005972:	4b62      	ldr	r3, [pc, #392]	; (8005afc <_dtoa_r+0x5b4>)
 8005974:	f7fa fbfa 	bl	800016c <__adddf3>
 8005978:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800597c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005980:	9611      	str	r6, [sp, #68]	; 0x44
 8005982:	2c00      	cmp	r4, #0
 8005984:	d15d      	bne.n	8005a42 <_dtoa_r+0x4fa>
 8005986:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800598a:	2200      	movs	r2, #0
 800598c:	4b5c      	ldr	r3, [pc, #368]	; (8005b00 <_dtoa_r+0x5b8>)
 800598e:	f7fa fbeb 	bl	8000168 <__aeabi_dsub>
 8005992:	4602      	mov	r2, r0
 8005994:	460b      	mov	r3, r1
 8005996:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800599a:	4633      	mov	r3, r6
 800599c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800599e:	f7fb f82b 	bl	80009f8 <__aeabi_dcmpgt>
 80059a2:	2800      	cmp	r0, #0
 80059a4:	f040 829e 	bne.w	8005ee4 <_dtoa_r+0x99c>
 80059a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80059ae:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80059b2:	f7fb f803 	bl	80009bc <__aeabi_dcmplt>
 80059b6:	2800      	cmp	r0, #0
 80059b8:	f040 8292 	bne.w	8005ee0 <_dtoa_r+0x998>
 80059bc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80059c0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80059c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	f2c0 8153 	blt.w	8005c72 <_dtoa_r+0x72a>
 80059cc:	f1b9 0f0e 	cmp.w	r9, #14
 80059d0:	f300 814f 	bgt.w	8005c72 <_dtoa_r+0x72a>
 80059d4:	4b45      	ldr	r3, [pc, #276]	; (8005aec <_dtoa_r+0x5a4>)
 80059d6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80059da:	e9d3 3400 	ldrd	r3, r4, [r3]
 80059de:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80059e2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	f280 80db 	bge.w	8005ba0 <_dtoa_r+0x658>
 80059ea:	9b02      	ldr	r3, [sp, #8]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	f300 80d7 	bgt.w	8005ba0 <_dtoa_r+0x658>
 80059f2:	f040 8274 	bne.w	8005ede <_dtoa_r+0x996>
 80059f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80059fa:	2200      	movs	r2, #0
 80059fc:	4b40      	ldr	r3, [pc, #256]	; (8005b00 <_dtoa_r+0x5b8>)
 80059fe:	f7fa fd6b 	bl	80004d8 <__aeabi_dmul>
 8005a02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a06:	f7fa ffed 	bl	80009e4 <__aeabi_dcmpge>
 8005a0a:	9c02      	ldr	r4, [sp, #8]
 8005a0c:	4626      	mov	r6, r4
 8005a0e:	2800      	cmp	r0, #0
 8005a10:	f040 824a 	bne.w	8005ea8 <_dtoa_r+0x960>
 8005a14:	2331      	movs	r3, #49	; 0x31
 8005a16:	9f08      	ldr	r7, [sp, #32]
 8005a18:	f109 0901 	add.w	r9, r9, #1
 8005a1c:	f807 3b01 	strb.w	r3, [r7], #1
 8005a20:	e246      	b.n	8005eb0 <_dtoa_r+0x968>
 8005a22:	07e2      	lsls	r2, r4, #31
 8005a24:	d505      	bpl.n	8005a32 <_dtoa_r+0x4ea>
 8005a26:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005a2a:	f7fa fd55 	bl	80004d8 <__aeabi_dmul>
 8005a2e:	2301      	movs	r3, #1
 8005a30:	3701      	adds	r7, #1
 8005a32:	1064      	asrs	r4, r4, #1
 8005a34:	3608      	adds	r6, #8
 8005a36:	e76d      	b.n	8005914 <_dtoa_r+0x3cc>
 8005a38:	2702      	movs	r7, #2
 8005a3a:	e770      	b.n	800591e <_dtoa_r+0x3d6>
 8005a3c:	46c8      	mov	r8, r9
 8005a3e:	9c02      	ldr	r4, [sp, #8]
 8005a40:	e78f      	b.n	8005962 <_dtoa_r+0x41a>
 8005a42:	9908      	ldr	r1, [sp, #32]
 8005a44:	4b29      	ldr	r3, [pc, #164]	; (8005aec <_dtoa_r+0x5a4>)
 8005a46:	4421      	add	r1, r4
 8005a48:	9112      	str	r1, [sp, #72]	; 0x48
 8005a4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005a4c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005a50:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005a54:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005a58:	2900      	cmp	r1, #0
 8005a5a:	d055      	beq.n	8005b08 <_dtoa_r+0x5c0>
 8005a5c:	2000      	movs	r0, #0
 8005a5e:	4929      	ldr	r1, [pc, #164]	; (8005b04 <_dtoa_r+0x5bc>)
 8005a60:	f7fa fe64 	bl	800072c <__aeabi_ddiv>
 8005a64:	463b      	mov	r3, r7
 8005a66:	4632      	mov	r2, r6
 8005a68:	f7fa fb7e 	bl	8000168 <__aeabi_dsub>
 8005a6c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005a70:	9f08      	ldr	r7, [sp, #32]
 8005a72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a76:	f7fa ffdf 	bl	8000a38 <__aeabi_d2iz>
 8005a7a:	4604      	mov	r4, r0
 8005a7c:	f7fa fcc2 	bl	8000404 <__aeabi_i2d>
 8005a80:	4602      	mov	r2, r0
 8005a82:	460b      	mov	r3, r1
 8005a84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a88:	f7fa fb6e 	bl	8000168 <__aeabi_dsub>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	460b      	mov	r3, r1
 8005a90:	3430      	adds	r4, #48	; 0x30
 8005a92:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005a96:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005a9a:	f807 4b01 	strb.w	r4, [r7], #1
 8005a9e:	f7fa ff8d 	bl	80009bc <__aeabi_dcmplt>
 8005aa2:	2800      	cmp	r0, #0
 8005aa4:	d174      	bne.n	8005b90 <_dtoa_r+0x648>
 8005aa6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005aaa:	2000      	movs	r0, #0
 8005aac:	4911      	ldr	r1, [pc, #68]	; (8005af4 <_dtoa_r+0x5ac>)
 8005aae:	f7fa fb5b 	bl	8000168 <__aeabi_dsub>
 8005ab2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005ab6:	f7fa ff81 	bl	80009bc <__aeabi_dcmplt>
 8005aba:	2800      	cmp	r0, #0
 8005abc:	f040 80b6 	bne.w	8005c2c <_dtoa_r+0x6e4>
 8005ac0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005ac2:	429f      	cmp	r7, r3
 8005ac4:	f43f af7a 	beq.w	80059bc <_dtoa_r+0x474>
 8005ac8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005acc:	2200      	movs	r2, #0
 8005ace:	4b0a      	ldr	r3, [pc, #40]	; (8005af8 <_dtoa_r+0x5b0>)
 8005ad0:	f7fa fd02 	bl	80004d8 <__aeabi_dmul>
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005ada:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ade:	4b06      	ldr	r3, [pc, #24]	; (8005af8 <_dtoa_r+0x5b0>)
 8005ae0:	f7fa fcfa 	bl	80004d8 <__aeabi_dmul>
 8005ae4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005ae8:	e7c3      	b.n	8005a72 <_dtoa_r+0x52a>
 8005aea:	bf00      	nop
 8005aec:	08007f18 	.word	0x08007f18
 8005af0:	08007ef0 	.word	0x08007ef0
 8005af4:	3ff00000 	.word	0x3ff00000
 8005af8:	40240000 	.word	0x40240000
 8005afc:	401c0000 	.word	0x401c0000
 8005b00:	40140000 	.word	0x40140000
 8005b04:	3fe00000 	.word	0x3fe00000
 8005b08:	4630      	mov	r0, r6
 8005b0a:	4639      	mov	r1, r7
 8005b0c:	f7fa fce4 	bl	80004d8 <__aeabi_dmul>
 8005b10:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005b12:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005b16:	9c08      	ldr	r4, [sp, #32]
 8005b18:	9314      	str	r3, [sp, #80]	; 0x50
 8005b1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b1e:	f7fa ff8b 	bl	8000a38 <__aeabi_d2iz>
 8005b22:	9015      	str	r0, [sp, #84]	; 0x54
 8005b24:	f7fa fc6e 	bl	8000404 <__aeabi_i2d>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	460b      	mov	r3, r1
 8005b2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b30:	f7fa fb1a 	bl	8000168 <__aeabi_dsub>
 8005b34:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005b36:	4606      	mov	r6, r0
 8005b38:	3330      	adds	r3, #48	; 0x30
 8005b3a:	f804 3b01 	strb.w	r3, [r4], #1
 8005b3e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005b40:	460f      	mov	r7, r1
 8005b42:	429c      	cmp	r4, r3
 8005b44:	f04f 0200 	mov.w	r2, #0
 8005b48:	d124      	bne.n	8005b94 <_dtoa_r+0x64c>
 8005b4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005b4e:	4bb3      	ldr	r3, [pc, #716]	; (8005e1c <_dtoa_r+0x8d4>)
 8005b50:	f7fa fb0c 	bl	800016c <__adddf3>
 8005b54:	4602      	mov	r2, r0
 8005b56:	460b      	mov	r3, r1
 8005b58:	4630      	mov	r0, r6
 8005b5a:	4639      	mov	r1, r7
 8005b5c:	f7fa ff4c 	bl	80009f8 <__aeabi_dcmpgt>
 8005b60:	2800      	cmp	r0, #0
 8005b62:	d162      	bne.n	8005c2a <_dtoa_r+0x6e2>
 8005b64:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005b68:	2000      	movs	r0, #0
 8005b6a:	49ac      	ldr	r1, [pc, #688]	; (8005e1c <_dtoa_r+0x8d4>)
 8005b6c:	f7fa fafc 	bl	8000168 <__aeabi_dsub>
 8005b70:	4602      	mov	r2, r0
 8005b72:	460b      	mov	r3, r1
 8005b74:	4630      	mov	r0, r6
 8005b76:	4639      	mov	r1, r7
 8005b78:	f7fa ff20 	bl	80009bc <__aeabi_dcmplt>
 8005b7c:	2800      	cmp	r0, #0
 8005b7e:	f43f af1d 	beq.w	80059bc <_dtoa_r+0x474>
 8005b82:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005b84:	1e7b      	subs	r3, r7, #1
 8005b86:	9314      	str	r3, [sp, #80]	; 0x50
 8005b88:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005b8c:	2b30      	cmp	r3, #48	; 0x30
 8005b8e:	d0f8      	beq.n	8005b82 <_dtoa_r+0x63a>
 8005b90:	46c1      	mov	r9, r8
 8005b92:	e03a      	b.n	8005c0a <_dtoa_r+0x6c2>
 8005b94:	4ba2      	ldr	r3, [pc, #648]	; (8005e20 <_dtoa_r+0x8d8>)
 8005b96:	f7fa fc9f 	bl	80004d8 <__aeabi_dmul>
 8005b9a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b9e:	e7bc      	b.n	8005b1a <_dtoa_r+0x5d2>
 8005ba0:	9f08      	ldr	r7, [sp, #32]
 8005ba2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005ba6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005baa:	f7fa fdbf 	bl	800072c <__aeabi_ddiv>
 8005bae:	f7fa ff43 	bl	8000a38 <__aeabi_d2iz>
 8005bb2:	4604      	mov	r4, r0
 8005bb4:	f7fa fc26 	bl	8000404 <__aeabi_i2d>
 8005bb8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005bbc:	f7fa fc8c 	bl	80004d8 <__aeabi_dmul>
 8005bc0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005bc4:	460b      	mov	r3, r1
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005bcc:	f7fa facc 	bl	8000168 <__aeabi_dsub>
 8005bd0:	f807 6b01 	strb.w	r6, [r7], #1
 8005bd4:	9e08      	ldr	r6, [sp, #32]
 8005bd6:	9b02      	ldr	r3, [sp, #8]
 8005bd8:	1bbe      	subs	r6, r7, r6
 8005bda:	42b3      	cmp	r3, r6
 8005bdc:	d13a      	bne.n	8005c54 <_dtoa_r+0x70c>
 8005bde:	4602      	mov	r2, r0
 8005be0:	460b      	mov	r3, r1
 8005be2:	f7fa fac3 	bl	800016c <__adddf3>
 8005be6:	4602      	mov	r2, r0
 8005be8:	460b      	mov	r3, r1
 8005bea:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005bee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005bf2:	f7fa ff01 	bl	80009f8 <__aeabi_dcmpgt>
 8005bf6:	bb58      	cbnz	r0, 8005c50 <_dtoa_r+0x708>
 8005bf8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005bfc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c00:	f7fa fed2 	bl	80009a8 <__aeabi_dcmpeq>
 8005c04:	b108      	cbz	r0, 8005c0a <_dtoa_r+0x6c2>
 8005c06:	07e1      	lsls	r1, r4, #31
 8005c08:	d422      	bmi.n	8005c50 <_dtoa_r+0x708>
 8005c0a:	4628      	mov	r0, r5
 8005c0c:	4651      	mov	r1, sl
 8005c0e:	f000 fae3 	bl	80061d8 <_Bfree>
 8005c12:	2300      	movs	r3, #0
 8005c14:	703b      	strb	r3, [r7, #0]
 8005c16:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005c18:	f109 0001 	add.w	r0, r9, #1
 8005c1c:	6018      	str	r0, [r3, #0]
 8005c1e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	f43f acdf 	beq.w	80055e4 <_dtoa_r+0x9c>
 8005c26:	601f      	str	r7, [r3, #0]
 8005c28:	e4dc      	b.n	80055e4 <_dtoa_r+0x9c>
 8005c2a:	4627      	mov	r7, r4
 8005c2c:	463b      	mov	r3, r7
 8005c2e:	461f      	mov	r7, r3
 8005c30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005c34:	2a39      	cmp	r2, #57	; 0x39
 8005c36:	d107      	bne.n	8005c48 <_dtoa_r+0x700>
 8005c38:	9a08      	ldr	r2, [sp, #32]
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d1f7      	bne.n	8005c2e <_dtoa_r+0x6e6>
 8005c3e:	2230      	movs	r2, #48	; 0x30
 8005c40:	9908      	ldr	r1, [sp, #32]
 8005c42:	f108 0801 	add.w	r8, r8, #1
 8005c46:	700a      	strb	r2, [r1, #0]
 8005c48:	781a      	ldrb	r2, [r3, #0]
 8005c4a:	3201      	adds	r2, #1
 8005c4c:	701a      	strb	r2, [r3, #0]
 8005c4e:	e79f      	b.n	8005b90 <_dtoa_r+0x648>
 8005c50:	46c8      	mov	r8, r9
 8005c52:	e7eb      	b.n	8005c2c <_dtoa_r+0x6e4>
 8005c54:	2200      	movs	r2, #0
 8005c56:	4b72      	ldr	r3, [pc, #456]	; (8005e20 <_dtoa_r+0x8d8>)
 8005c58:	f7fa fc3e 	bl	80004d8 <__aeabi_dmul>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	460b      	mov	r3, r1
 8005c60:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005c64:	2200      	movs	r2, #0
 8005c66:	2300      	movs	r3, #0
 8005c68:	f7fa fe9e 	bl	80009a8 <__aeabi_dcmpeq>
 8005c6c:	2800      	cmp	r0, #0
 8005c6e:	d098      	beq.n	8005ba2 <_dtoa_r+0x65a>
 8005c70:	e7cb      	b.n	8005c0a <_dtoa_r+0x6c2>
 8005c72:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005c74:	2a00      	cmp	r2, #0
 8005c76:	f000 80cd 	beq.w	8005e14 <_dtoa_r+0x8cc>
 8005c7a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005c7c:	2a01      	cmp	r2, #1
 8005c7e:	f300 80af 	bgt.w	8005de0 <_dtoa_r+0x898>
 8005c82:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005c84:	2a00      	cmp	r2, #0
 8005c86:	f000 80a7 	beq.w	8005dd8 <_dtoa_r+0x890>
 8005c8a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005c8e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005c90:	9f06      	ldr	r7, [sp, #24]
 8005c92:	9a06      	ldr	r2, [sp, #24]
 8005c94:	2101      	movs	r1, #1
 8005c96:	441a      	add	r2, r3
 8005c98:	9206      	str	r2, [sp, #24]
 8005c9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c9c:	4628      	mov	r0, r5
 8005c9e:	441a      	add	r2, r3
 8005ca0:	9209      	str	r2, [sp, #36]	; 0x24
 8005ca2:	f000 fb53 	bl	800634c <__i2b>
 8005ca6:	4606      	mov	r6, r0
 8005ca8:	2f00      	cmp	r7, #0
 8005caa:	dd0c      	ble.n	8005cc6 <_dtoa_r+0x77e>
 8005cac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	dd09      	ble.n	8005cc6 <_dtoa_r+0x77e>
 8005cb2:	42bb      	cmp	r3, r7
 8005cb4:	bfa8      	it	ge
 8005cb6:	463b      	movge	r3, r7
 8005cb8:	9a06      	ldr	r2, [sp, #24]
 8005cba:	1aff      	subs	r7, r7, r3
 8005cbc:	1ad2      	subs	r2, r2, r3
 8005cbe:	9206      	str	r2, [sp, #24]
 8005cc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005cc2:	1ad3      	subs	r3, r2, r3
 8005cc4:	9309      	str	r3, [sp, #36]	; 0x24
 8005cc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cc8:	b1f3      	cbz	r3, 8005d08 <_dtoa_r+0x7c0>
 8005cca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	f000 80a9 	beq.w	8005e24 <_dtoa_r+0x8dc>
 8005cd2:	2c00      	cmp	r4, #0
 8005cd4:	dd10      	ble.n	8005cf8 <_dtoa_r+0x7b0>
 8005cd6:	4631      	mov	r1, r6
 8005cd8:	4622      	mov	r2, r4
 8005cda:	4628      	mov	r0, r5
 8005cdc:	f000 fbf0 	bl	80064c0 <__pow5mult>
 8005ce0:	4652      	mov	r2, sl
 8005ce2:	4601      	mov	r1, r0
 8005ce4:	4606      	mov	r6, r0
 8005ce6:	4628      	mov	r0, r5
 8005ce8:	f000 fb46 	bl	8006378 <__multiply>
 8005cec:	4680      	mov	r8, r0
 8005cee:	4651      	mov	r1, sl
 8005cf0:	4628      	mov	r0, r5
 8005cf2:	f000 fa71 	bl	80061d8 <_Bfree>
 8005cf6:	46c2      	mov	sl, r8
 8005cf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cfa:	1b1a      	subs	r2, r3, r4
 8005cfc:	d004      	beq.n	8005d08 <_dtoa_r+0x7c0>
 8005cfe:	4651      	mov	r1, sl
 8005d00:	4628      	mov	r0, r5
 8005d02:	f000 fbdd 	bl	80064c0 <__pow5mult>
 8005d06:	4682      	mov	sl, r0
 8005d08:	2101      	movs	r1, #1
 8005d0a:	4628      	mov	r0, r5
 8005d0c:	f000 fb1e 	bl	800634c <__i2b>
 8005d10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d12:	4604      	mov	r4, r0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	f340 8087 	ble.w	8005e28 <_dtoa_r+0x8e0>
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	4601      	mov	r1, r0
 8005d1e:	4628      	mov	r0, r5
 8005d20:	f000 fbce 	bl	80064c0 <__pow5mult>
 8005d24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d26:	4604      	mov	r4, r0
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	f340 8080 	ble.w	8005e2e <_dtoa_r+0x8e6>
 8005d2e:	f04f 0800 	mov.w	r8, #0
 8005d32:	6923      	ldr	r3, [r4, #16]
 8005d34:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005d38:	6918      	ldr	r0, [r3, #16]
 8005d3a:	f000 fab9 	bl	80062b0 <__hi0bits>
 8005d3e:	f1c0 0020 	rsb	r0, r0, #32
 8005d42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d44:	4418      	add	r0, r3
 8005d46:	f010 001f 	ands.w	r0, r0, #31
 8005d4a:	f000 8092 	beq.w	8005e72 <_dtoa_r+0x92a>
 8005d4e:	f1c0 0320 	rsb	r3, r0, #32
 8005d52:	2b04      	cmp	r3, #4
 8005d54:	f340 808a 	ble.w	8005e6c <_dtoa_r+0x924>
 8005d58:	f1c0 001c 	rsb	r0, r0, #28
 8005d5c:	9b06      	ldr	r3, [sp, #24]
 8005d5e:	4407      	add	r7, r0
 8005d60:	4403      	add	r3, r0
 8005d62:	9306      	str	r3, [sp, #24]
 8005d64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d66:	4403      	add	r3, r0
 8005d68:	9309      	str	r3, [sp, #36]	; 0x24
 8005d6a:	9b06      	ldr	r3, [sp, #24]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	dd05      	ble.n	8005d7c <_dtoa_r+0x834>
 8005d70:	4651      	mov	r1, sl
 8005d72:	461a      	mov	r2, r3
 8005d74:	4628      	mov	r0, r5
 8005d76:	f000 fbfd 	bl	8006574 <__lshift>
 8005d7a:	4682      	mov	sl, r0
 8005d7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	dd05      	ble.n	8005d8e <_dtoa_r+0x846>
 8005d82:	4621      	mov	r1, r4
 8005d84:	461a      	mov	r2, r3
 8005d86:	4628      	mov	r0, r5
 8005d88:	f000 fbf4 	bl	8006574 <__lshift>
 8005d8c:	4604      	mov	r4, r0
 8005d8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d070      	beq.n	8005e76 <_dtoa_r+0x92e>
 8005d94:	4621      	mov	r1, r4
 8005d96:	4650      	mov	r0, sl
 8005d98:	f000 fc58 	bl	800664c <__mcmp>
 8005d9c:	2800      	cmp	r0, #0
 8005d9e:	da6a      	bge.n	8005e76 <_dtoa_r+0x92e>
 8005da0:	2300      	movs	r3, #0
 8005da2:	4651      	mov	r1, sl
 8005da4:	220a      	movs	r2, #10
 8005da6:	4628      	mov	r0, r5
 8005da8:	f000 fa38 	bl	800621c <__multadd>
 8005dac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005dae:	4682      	mov	sl, r0
 8005db0:	f109 39ff 	add.w	r9, r9, #4294967295
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	f000 8193 	beq.w	80060e0 <_dtoa_r+0xb98>
 8005dba:	4631      	mov	r1, r6
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	220a      	movs	r2, #10
 8005dc0:	4628      	mov	r0, r5
 8005dc2:	f000 fa2b 	bl	800621c <__multadd>
 8005dc6:	f1bb 0f00 	cmp.w	fp, #0
 8005dca:	4606      	mov	r6, r0
 8005dcc:	f300 8093 	bgt.w	8005ef6 <_dtoa_r+0x9ae>
 8005dd0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005dd2:	2b02      	cmp	r3, #2
 8005dd4:	dc57      	bgt.n	8005e86 <_dtoa_r+0x93e>
 8005dd6:	e08e      	b.n	8005ef6 <_dtoa_r+0x9ae>
 8005dd8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005dda:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005dde:	e756      	b.n	8005c8e <_dtoa_r+0x746>
 8005de0:	9b02      	ldr	r3, [sp, #8]
 8005de2:	1e5c      	subs	r4, r3, #1
 8005de4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005de6:	42a3      	cmp	r3, r4
 8005de8:	bfb7      	itett	lt
 8005dea:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005dec:	1b1c      	subge	r4, r3, r4
 8005dee:	1ae2      	sublt	r2, r4, r3
 8005df0:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005df2:	bfbe      	ittt	lt
 8005df4:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005df6:	189b      	addlt	r3, r3, r2
 8005df8:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005dfa:	9b02      	ldr	r3, [sp, #8]
 8005dfc:	bfb8      	it	lt
 8005dfe:	2400      	movlt	r4, #0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	bfbb      	ittet	lt
 8005e04:	9b06      	ldrlt	r3, [sp, #24]
 8005e06:	9a02      	ldrlt	r2, [sp, #8]
 8005e08:	9f06      	ldrge	r7, [sp, #24]
 8005e0a:	1a9f      	sublt	r7, r3, r2
 8005e0c:	bfac      	ite	ge
 8005e0e:	9b02      	ldrge	r3, [sp, #8]
 8005e10:	2300      	movlt	r3, #0
 8005e12:	e73e      	b.n	8005c92 <_dtoa_r+0x74a>
 8005e14:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005e16:	9f06      	ldr	r7, [sp, #24]
 8005e18:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005e1a:	e745      	b.n	8005ca8 <_dtoa_r+0x760>
 8005e1c:	3fe00000 	.word	0x3fe00000
 8005e20:	40240000 	.word	0x40240000
 8005e24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e26:	e76a      	b.n	8005cfe <_dtoa_r+0x7b6>
 8005e28:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	dc19      	bgt.n	8005e62 <_dtoa_r+0x91a>
 8005e2e:	9b04      	ldr	r3, [sp, #16]
 8005e30:	b9bb      	cbnz	r3, 8005e62 <_dtoa_r+0x91a>
 8005e32:	9b05      	ldr	r3, [sp, #20]
 8005e34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e38:	b99b      	cbnz	r3, 8005e62 <_dtoa_r+0x91a>
 8005e3a:	9b05      	ldr	r3, [sp, #20]
 8005e3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005e40:	0d1b      	lsrs	r3, r3, #20
 8005e42:	051b      	lsls	r3, r3, #20
 8005e44:	b183      	cbz	r3, 8005e68 <_dtoa_r+0x920>
 8005e46:	f04f 0801 	mov.w	r8, #1
 8005e4a:	9b06      	ldr	r3, [sp, #24]
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	9306      	str	r3, [sp, #24]
 8005e50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e52:	3301      	adds	r3, #1
 8005e54:	9309      	str	r3, [sp, #36]	; 0x24
 8005e56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	f47f af6a 	bne.w	8005d32 <_dtoa_r+0x7ea>
 8005e5e:	2001      	movs	r0, #1
 8005e60:	e76f      	b.n	8005d42 <_dtoa_r+0x7fa>
 8005e62:	f04f 0800 	mov.w	r8, #0
 8005e66:	e7f6      	b.n	8005e56 <_dtoa_r+0x90e>
 8005e68:	4698      	mov	r8, r3
 8005e6a:	e7f4      	b.n	8005e56 <_dtoa_r+0x90e>
 8005e6c:	f43f af7d 	beq.w	8005d6a <_dtoa_r+0x822>
 8005e70:	4618      	mov	r0, r3
 8005e72:	301c      	adds	r0, #28
 8005e74:	e772      	b.n	8005d5c <_dtoa_r+0x814>
 8005e76:	9b02      	ldr	r3, [sp, #8]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	dc36      	bgt.n	8005eea <_dtoa_r+0x9a2>
 8005e7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e7e:	2b02      	cmp	r3, #2
 8005e80:	dd33      	ble.n	8005eea <_dtoa_r+0x9a2>
 8005e82:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005e86:	f1bb 0f00 	cmp.w	fp, #0
 8005e8a:	d10d      	bne.n	8005ea8 <_dtoa_r+0x960>
 8005e8c:	4621      	mov	r1, r4
 8005e8e:	465b      	mov	r3, fp
 8005e90:	2205      	movs	r2, #5
 8005e92:	4628      	mov	r0, r5
 8005e94:	f000 f9c2 	bl	800621c <__multadd>
 8005e98:	4601      	mov	r1, r0
 8005e9a:	4604      	mov	r4, r0
 8005e9c:	4650      	mov	r0, sl
 8005e9e:	f000 fbd5 	bl	800664c <__mcmp>
 8005ea2:	2800      	cmp	r0, #0
 8005ea4:	f73f adb6 	bgt.w	8005a14 <_dtoa_r+0x4cc>
 8005ea8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005eaa:	9f08      	ldr	r7, [sp, #32]
 8005eac:	ea6f 0903 	mvn.w	r9, r3
 8005eb0:	f04f 0800 	mov.w	r8, #0
 8005eb4:	4621      	mov	r1, r4
 8005eb6:	4628      	mov	r0, r5
 8005eb8:	f000 f98e 	bl	80061d8 <_Bfree>
 8005ebc:	2e00      	cmp	r6, #0
 8005ebe:	f43f aea4 	beq.w	8005c0a <_dtoa_r+0x6c2>
 8005ec2:	f1b8 0f00 	cmp.w	r8, #0
 8005ec6:	d005      	beq.n	8005ed4 <_dtoa_r+0x98c>
 8005ec8:	45b0      	cmp	r8, r6
 8005eca:	d003      	beq.n	8005ed4 <_dtoa_r+0x98c>
 8005ecc:	4641      	mov	r1, r8
 8005ece:	4628      	mov	r0, r5
 8005ed0:	f000 f982 	bl	80061d8 <_Bfree>
 8005ed4:	4631      	mov	r1, r6
 8005ed6:	4628      	mov	r0, r5
 8005ed8:	f000 f97e 	bl	80061d8 <_Bfree>
 8005edc:	e695      	b.n	8005c0a <_dtoa_r+0x6c2>
 8005ede:	2400      	movs	r4, #0
 8005ee0:	4626      	mov	r6, r4
 8005ee2:	e7e1      	b.n	8005ea8 <_dtoa_r+0x960>
 8005ee4:	46c1      	mov	r9, r8
 8005ee6:	4626      	mov	r6, r4
 8005ee8:	e594      	b.n	8005a14 <_dtoa_r+0x4cc>
 8005eea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005eec:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	f000 80fc 	beq.w	80060ee <_dtoa_r+0xba6>
 8005ef6:	2f00      	cmp	r7, #0
 8005ef8:	dd05      	ble.n	8005f06 <_dtoa_r+0x9be>
 8005efa:	4631      	mov	r1, r6
 8005efc:	463a      	mov	r2, r7
 8005efe:	4628      	mov	r0, r5
 8005f00:	f000 fb38 	bl	8006574 <__lshift>
 8005f04:	4606      	mov	r6, r0
 8005f06:	f1b8 0f00 	cmp.w	r8, #0
 8005f0a:	d05c      	beq.n	8005fc6 <_dtoa_r+0xa7e>
 8005f0c:	4628      	mov	r0, r5
 8005f0e:	6871      	ldr	r1, [r6, #4]
 8005f10:	f000 f922 	bl	8006158 <_Balloc>
 8005f14:	4607      	mov	r7, r0
 8005f16:	b928      	cbnz	r0, 8005f24 <_dtoa_r+0x9dc>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005f1e:	4b7e      	ldr	r3, [pc, #504]	; (8006118 <_dtoa_r+0xbd0>)
 8005f20:	f7ff bb26 	b.w	8005570 <_dtoa_r+0x28>
 8005f24:	6932      	ldr	r2, [r6, #16]
 8005f26:	f106 010c 	add.w	r1, r6, #12
 8005f2a:	3202      	adds	r2, #2
 8005f2c:	0092      	lsls	r2, r2, #2
 8005f2e:	300c      	adds	r0, #12
 8005f30:	f7fe fde6 	bl	8004b00 <memcpy>
 8005f34:	2201      	movs	r2, #1
 8005f36:	4639      	mov	r1, r7
 8005f38:	4628      	mov	r0, r5
 8005f3a:	f000 fb1b 	bl	8006574 <__lshift>
 8005f3e:	46b0      	mov	r8, r6
 8005f40:	4606      	mov	r6, r0
 8005f42:	9b08      	ldr	r3, [sp, #32]
 8005f44:	3301      	adds	r3, #1
 8005f46:	9302      	str	r3, [sp, #8]
 8005f48:	9b08      	ldr	r3, [sp, #32]
 8005f4a:	445b      	add	r3, fp
 8005f4c:	930a      	str	r3, [sp, #40]	; 0x28
 8005f4e:	9b04      	ldr	r3, [sp, #16]
 8005f50:	f003 0301 	and.w	r3, r3, #1
 8005f54:	9309      	str	r3, [sp, #36]	; 0x24
 8005f56:	9b02      	ldr	r3, [sp, #8]
 8005f58:	4621      	mov	r1, r4
 8005f5a:	4650      	mov	r0, sl
 8005f5c:	f103 3bff 	add.w	fp, r3, #4294967295
 8005f60:	f7ff fa64 	bl	800542c <quorem>
 8005f64:	4603      	mov	r3, r0
 8005f66:	4641      	mov	r1, r8
 8005f68:	3330      	adds	r3, #48	; 0x30
 8005f6a:	9004      	str	r0, [sp, #16]
 8005f6c:	4650      	mov	r0, sl
 8005f6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f70:	f000 fb6c 	bl	800664c <__mcmp>
 8005f74:	4632      	mov	r2, r6
 8005f76:	9006      	str	r0, [sp, #24]
 8005f78:	4621      	mov	r1, r4
 8005f7a:	4628      	mov	r0, r5
 8005f7c:	f000 fb82 	bl	8006684 <__mdiff>
 8005f80:	68c2      	ldr	r2, [r0, #12]
 8005f82:	4607      	mov	r7, r0
 8005f84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f86:	bb02      	cbnz	r2, 8005fca <_dtoa_r+0xa82>
 8005f88:	4601      	mov	r1, r0
 8005f8a:	4650      	mov	r0, sl
 8005f8c:	f000 fb5e 	bl	800664c <__mcmp>
 8005f90:	4602      	mov	r2, r0
 8005f92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f94:	4639      	mov	r1, r7
 8005f96:	4628      	mov	r0, r5
 8005f98:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005f9c:	f000 f91c 	bl	80061d8 <_Bfree>
 8005fa0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005fa2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005fa4:	9f02      	ldr	r7, [sp, #8]
 8005fa6:	ea43 0102 	orr.w	r1, r3, r2
 8005faa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fac:	430b      	orrs	r3, r1
 8005fae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005fb0:	d10d      	bne.n	8005fce <_dtoa_r+0xa86>
 8005fb2:	2b39      	cmp	r3, #57	; 0x39
 8005fb4:	d027      	beq.n	8006006 <_dtoa_r+0xabe>
 8005fb6:	9a06      	ldr	r2, [sp, #24]
 8005fb8:	2a00      	cmp	r2, #0
 8005fba:	dd01      	ble.n	8005fc0 <_dtoa_r+0xa78>
 8005fbc:	9b04      	ldr	r3, [sp, #16]
 8005fbe:	3331      	adds	r3, #49	; 0x31
 8005fc0:	f88b 3000 	strb.w	r3, [fp]
 8005fc4:	e776      	b.n	8005eb4 <_dtoa_r+0x96c>
 8005fc6:	4630      	mov	r0, r6
 8005fc8:	e7b9      	b.n	8005f3e <_dtoa_r+0x9f6>
 8005fca:	2201      	movs	r2, #1
 8005fcc:	e7e2      	b.n	8005f94 <_dtoa_r+0xa4c>
 8005fce:	9906      	ldr	r1, [sp, #24]
 8005fd0:	2900      	cmp	r1, #0
 8005fd2:	db04      	blt.n	8005fde <_dtoa_r+0xa96>
 8005fd4:	9822      	ldr	r0, [sp, #136]	; 0x88
 8005fd6:	4301      	orrs	r1, r0
 8005fd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005fda:	4301      	orrs	r1, r0
 8005fdc:	d120      	bne.n	8006020 <_dtoa_r+0xad8>
 8005fde:	2a00      	cmp	r2, #0
 8005fe0:	ddee      	ble.n	8005fc0 <_dtoa_r+0xa78>
 8005fe2:	4651      	mov	r1, sl
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	4628      	mov	r0, r5
 8005fe8:	9302      	str	r3, [sp, #8]
 8005fea:	f000 fac3 	bl	8006574 <__lshift>
 8005fee:	4621      	mov	r1, r4
 8005ff0:	4682      	mov	sl, r0
 8005ff2:	f000 fb2b 	bl	800664c <__mcmp>
 8005ff6:	2800      	cmp	r0, #0
 8005ff8:	9b02      	ldr	r3, [sp, #8]
 8005ffa:	dc02      	bgt.n	8006002 <_dtoa_r+0xaba>
 8005ffc:	d1e0      	bne.n	8005fc0 <_dtoa_r+0xa78>
 8005ffe:	07da      	lsls	r2, r3, #31
 8006000:	d5de      	bpl.n	8005fc0 <_dtoa_r+0xa78>
 8006002:	2b39      	cmp	r3, #57	; 0x39
 8006004:	d1da      	bne.n	8005fbc <_dtoa_r+0xa74>
 8006006:	2339      	movs	r3, #57	; 0x39
 8006008:	f88b 3000 	strb.w	r3, [fp]
 800600c:	463b      	mov	r3, r7
 800600e:	461f      	mov	r7, r3
 8006010:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006014:	3b01      	subs	r3, #1
 8006016:	2a39      	cmp	r2, #57	; 0x39
 8006018:	d050      	beq.n	80060bc <_dtoa_r+0xb74>
 800601a:	3201      	adds	r2, #1
 800601c:	701a      	strb	r2, [r3, #0]
 800601e:	e749      	b.n	8005eb4 <_dtoa_r+0x96c>
 8006020:	2a00      	cmp	r2, #0
 8006022:	dd03      	ble.n	800602c <_dtoa_r+0xae4>
 8006024:	2b39      	cmp	r3, #57	; 0x39
 8006026:	d0ee      	beq.n	8006006 <_dtoa_r+0xabe>
 8006028:	3301      	adds	r3, #1
 800602a:	e7c9      	b.n	8005fc0 <_dtoa_r+0xa78>
 800602c:	9a02      	ldr	r2, [sp, #8]
 800602e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006030:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006034:	428a      	cmp	r2, r1
 8006036:	d02a      	beq.n	800608e <_dtoa_r+0xb46>
 8006038:	4651      	mov	r1, sl
 800603a:	2300      	movs	r3, #0
 800603c:	220a      	movs	r2, #10
 800603e:	4628      	mov	r0, r5
 8006040:	f000 f8ec 	bl	800621c <__multadd>
 8006044:	45b0      	cmp	r8, r6
 8006046:	4682      	mov	sl, r0
 8006048:	f04f 0300 	mov.w	r3, #0
 800604c:	f04f 020a 	mov.w	r2, #10
 8006050:	4641      	mov	r1, r8
 8006052:	4628      	mov	r0, r5
 8006054:	d107      	bne.n	8006066 <_dtoa_r+0xb1e>
 8006056:	f000 f8e1 	bl	800621c <__multadd>
 800605a:	4680      	mov	r8, r0
 800605c:	4606      	mov	r6, r0
 800605e:	9b02      	ldr	r3, [sp, #8]
 8006060:	3301      	adds	r3, #1
 8006062:	9302      	str	r3, [sp, #8]
 8006064:	e777      	b.n	8005f56 <_dtoa_r+0xa0e>
 8006066:	f000 f8d9 	bl	800621c <__multadd>
 800606a:	4631      	mov	r1, r6
 800606c:	4680      	mov	r8, r0
 800606e:	2300      	movs	r3, #0
 8006070:	220a      	movs	r2, #10
 8006072:	4628      	mov	r0, r5
 8006074:	f000 f8d2 	bl	800621c <__multadd>
 8006078:	4606      	mov	r6, r0
 800607a:	e7f0      	b.n	800605e <_dtoa_r+0xb16>
 800607c:	f1bb 0f00 	cmp.w	fp, #0
 8006080:	bfcc      	ite	gt
 8006082:	465f      	movgt	r7, fp
 8006084:	2701      	movle	r7, #1
 8006086:	f04f 0800 	mov.w	r8, #0
 800608a:	9a08      	ldr	r2, [sp, #32]
 800608c:	4417      	add	r7, r2
 800608e:	4651      	mov	r1, sl
 8006090:	2201      	movs	r2, #1
 8006092:	4628      	mov	r0, r5
 8006094:	9302      	str	r3, [sp, #8]
 8006096:	f000 fa6d 	bl	8006574 <__lshift>
 800609a:	4621      	mov	r1, r4
 800609c:	4682      	mov	sl, r0
 800609e:	f000 fad5 	bl	800664c <__mcmp>
 80060a2:	2800      	cmp	r0, #0
 80060a4:	dcb2      	bgt.n	800600c <_dtoa_r+0xac4>
 80060a6:	d102      	bne.n	80060ae <_dtoa_r+0xb66>
 80060a8:	9b02      	ldr	r3, [sp, #8]
 80060aa:	07db      	lsls	r3, r3, #31
 80060ac:	d4ae      	bmi.n	800600c <_dtoa_r+0xac4>
 80060ae:	463b      	mov	r3, r7
 80060b0:	461f      	mov	r7, r3
 80060b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80060b6:	2a30      	cmp	r2, #48	; 0x30
 80060b8:	d0fa      	beq.n	80060b0 <_dtoa_r+0xb68>
 80060ba:	e6fb      	b.n	8005eb4 <_dtoa_r+0x96c>
 80060bc:	9a08      	ldr	r2, [sp, #32]
 80060be:	429a      	cmp	r2, r3
 80060c0:	d1a5      	bne.n	800600e <_dtoa_r+0xac6>
 80060c2:	2331      	movs	r3, #49	; 0x31
 80060c4:	f109 0901 	add.w	r9, r9, #1
 80060c8:	7013      	strb	r3, [r2, #0]
 80060ca:	e6f3      	b.n	8005eb4 <_dtoa_r+0x96c>
 80060cc:	4b13      	ldr	r3, [pc, #76]	; (800611c <_dtoa_r+0xbd4>)
 80060ce:	f7ff baa7 	b.w	8005620 <_dtoa_r+0xd8>
 80060d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	f47f aa80 	bne.w	80055da <_dtoa_r+0x92>
 80060da:	4b11      	ldr	r3, [pc, #68]	; (8006120 <_dtoa_r+0xbd8>)
 80060dc:	f7ff baa0 	b.w	8005620 <_dtoa_r+0xd8>
 80060e0:	f1bb 0f00 	cmp.w	fp, #0
 80060e4:	dc03      	bgt.n	80060ee <_dtoa_r+0xba6>
 80060e6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80060e8:	2b02      	cmp	r3, #2
 80060ea:	f73f aecc 	bgt.w	8005e86 <_dtoa_r+0x93e>
 80060ee:	9f08      	ldr	r7, [sp, #32]
 80060f0:	4621      	mov	r1, r4
 80060f2:	4650      	mov	r0, sl
 80060f4:	f7ff f99a 	bl	800542c <quorem>
 80060f8:	9a08      	ldr	r2, [sp, #32]
 80060fa:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80060fe:	f807 3b01 	strb.w	r3, [r7], #1
 8006102:	1aba      	subs	r2, r7, r2
 8006104:	4593      	cmp	fp, r2
 8006106:	ddb9      	ble.n	800607c <_dtoa_r+0xb34>
 8006108:	4651      	mov	r1, sl
 800610a:	2300      	movs	r3, #0
 800610c:	220a      	movs	r2, #10
 800610e:	4628      	mov	r0, r5
 8006110:	f000 f884 	bl	800621c <__multadd>
 8006114:	4682      	mov	sl, r0
 8006116:	e7eb      	b.n	80060f0 <_dtoa_r+0xba8>
 8006118:	08007e7f 	.word	0x08007e7f
 800611c:	08007dd8 	.word	0x08007dd8
 8006120:	08007dfc 	.word	0x08007dfc

08006124 <_localeconv_r>:
 8006124:	4800      	ldr	r0, [pc, #0]	; (8006128 <_localeconv_r+0x4>)
 8006126:	4770      	bx	lr
 8006128:	20000188 	.word	0x20000188

0800612c <malloc>:
 800612c:	4b02      	ldr	r3, [pc, #8]	; (8006138 <malloc+0xc>)
 800612e:	4601      	mov	r1, r0
 8006130:	6818      	ldr	r0, [r3, #0]
 8006132:	f000 bbed 	b.w	8006910 <_malloc_r>
 8006136:	bf00      	nop
 8006138:	20000034 	.word	0x20000034

0800613c <memchr>:
 800613c:	4603      	mov	r3, r0
 800613e:	b510      	push	{r4, lr}
 8006140:	b2c9      	uxtb	r1, r1
 8006142:	4402      	add	r2, r0
 8006144:	4293      	cmp	r3, r2
 8006146:	4618      	mov	r0, r3
 8006148:	d101      	bne.n	800614e <memchr+0x12>
 800614a:	2000      	movs	r0, #0
 800614c:	e003      	b.n	8006156 <memchr+0x1a>
 800614e:	7804      	ldrb	r4, [r0, #0]
 8006150:	3301      	adds	r3, #1
 8006152:	428c      	cmp	r4, r1
 8006154:	d1f6      	bne.n	8006144 <memchr+0x8>
 8006156:	bd10      	pop	{r4, pc}

08006158 <_Balloc>:
 8006158:	b570      	push	{r4, r5, r6, lr}
 800615a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800615c:	4604      	mov	r4, r0
 800615e:	460d      	mov	r5, r1
 8006160:	b976      	cbnz	r6, 8006180 <_Balloc+0x28>
 8006162:	2010      	movs	r0, #16
 8006164:	f7ff ffe2 	bl	800612c <malloc>
 8006168:	4602      	mov	r2, r0
 800616a:	6260      	str	r0, [r4, #36]	; 0x24
 800616c:	b920      	cbnz	r0, 8006178 <_Balloc+0x20>
 800616e:	2166      	movs	r1, #102	; 0x66
 8006170:	4b17      	ldr	r3, [pc, #92]	; (80061d0 <_Balloc+0x78>)
 8006172:	4818      	ldr	r0, [pc, #96]	; (80061d4 <_Balloc+0x7c>)
 8006174:	f000 fd92 	bl	8006c9c <__assert_func>
 8006178:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800617c:	6006      	str	r6, [r0, #0]
 800617e:	60c6      	str	r6, [r0, #12]
 8006180:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006182:	68f3      	ldr	r3, [r6, #12]
 8006184:	b183      	cbz	r3, 80061a8 <_Balloc+0x50>
 8006186:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800618e:	b9b8      	cbnz	r0, 80061c0 <_Balloc+0x68>
 8006190:	2101      	movs	r1, #1
 8006192:	fa01 f605 	lsl.w	r6, r1, r5
 8006196:	1d72      	adds	r2, r6, #5
 8006198:	4620      	mov	r0, r4
 800619a:	0092      	lsls	r2, r2, #2
 800619c:	f000 fb5e 	bl	800685c <_calloc_r>
 80061a0:	b160      	cbz	r0, 80061bc <_Balloc+0x64>
 80061a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80061a6:	e00e      	b.n	80061c6 <_Balloc+0x6e>
 80061a8:	2221      	movs	r2, #33	; 0x21
 80061aa:	2104      	movs	r1, #4
 80061ac:	4620      	mov	r0, r4
 80061ae:	f000 fb55 	bl	800685c <_calloc_r>
 80061b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061b4:	60f0      	str	r0, [r6, #12]
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d1e4      	bne.n	8006186 <_Balloc+0x2e>
 80061bc:	2000      	movs	r0, #0
 80061be:	bd70      	pop	{r4, r5, r6, pc}
 80061c0:	6802      	ldr	r2, [r0, #0]
 80061c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80061c6:	2300      	movs	r3, #0
 80061c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80061cc:	e7f7      	b.n	80061be <_Balloc+0x66>
 80061ce:	bf00      	nop
 80061d0:	08007e09 	.word	0x08007e09
 80061d4:	08007e90 	.word	0x08007e90

080061d8 <_Bfree>:
 80061d8:	b570      	push	{r4, r5, r6, lr}
 80061da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80061dc:	4605      	mov	r5, r0
 80061de:	460c      	mov	r4, r1
 80061e0:	b976      	cbnz	r6, 8006200 <_Bfree+0x28>
 80061e2:	2010      	movs	r0, #16
 80061e4:	f7ff ffa2 	bl	800612c <malloc>
 80061e8:	4602      	mov	r2, r0
 80061ea:	6268      	str	r0, [r5, #36]	; 0x24
 80061ec:	b920      	cbnz	r0, 80061f8 <_Bfree+0x20>
 80061ee:	218a      	movs	r1, #138	; 0x8a
 80061f0:	4b08      	ldr	r3, [pc, #32]	; (8006214 <_Bfree+0x3c>)
 80061f2:	4809      	ldr	r0, [pc, #36]	; (8006218 <_Bfree+0x40>)
 80061f4:	f000 fd52 	bl	8006c9c <__assert_func>
 80061f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80061fc:	6006      	str	r6, [r0, #0]
 80061fe:	60c6      	str	r6, [r0, #12]
 8006200:	b13c      	cbz	r4, 8006212 <_Bfree+0x3a>
 8006202:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006204:	6862      	ldr	r2, [r4, #4]
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800620c:	6021      	str	r1, [r4, #0]
 800620e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006212:	bd70      	pop	{r4, r5, r6, pc}
 8006214:	08007e09 	.word	0x08007e09
 8006218:	08007e90 	.word	0x08007e90

0800621c <__multadd>:
 800621c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006220:	4698      	mov	r8, r3
 8006222:	460c      	mov	r4, r1
 8006224:	2300      	movs	r3, #0
 8006226:	690e      	ldr	r6, [r1, #16]
 8006228:	4607      	mov	r7, r0
 800622a:	f101 0014 	add.w	r0, r1, #20
 800622e:	6805      	ldr	r5, [r0, #0]
 8006230:	3301      	adds	r3, #1
 8006232:	b2a9      	uxth	r1, r5
 8006234:	fb02 8101 	mla	r1, r2, r1, r8
 8006238:	0c2d      	lsrs	r5, r5, #16
 800623a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800623e:	fb02 c505 	mla	r5, r2, r5, ip
 8006242:	b289      	uxth	r1, r1
 8006244:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006248:	429e      	cmp	r6, r3
 800624a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800624e:	f840 1b04 	str.w	r1, [r0], #4
 8006252:	dcec      	bgt.n	800622e <__multadd+0x12>
 8006254:	f1b8 0f00 	cmp.w	r8, #0
 8006258:	d022      	beq.n	80062a0 <__multadd+0x84>
 800625a:	68a3      	ldr	r3, [r4, #8]
 800625c:	42b3      	cmp	r3, r6
 800625e:	dc19      	bgt.n	8006294 <__multadd+0x78>
 8006260:	6861      	ldr	r1, [r4, #4]
 8006262:	4638      	mov	r0, r7
 8006264:	3101      	adds	r1, #1
 8006266:	f7ff ff77 	bl	8006158 <_Balloc>
 800626a:	4605      	mov	r5, r0
 800626c:	b928      	cbnz	r0, 800627a <__multadd+0x5e>
 800626e:	4602      	mov	r2, r0
 8006270:	21b5      	movs	r1, #181	; 0xb5
 8006272:	4b0d      	ldr	r3, [pc, #52]	; (80062a8 <__multadd+0x8c>)
 8006274:	480d      	ldr	r0, [pc, #52]	; (80062ac <__multadd+0x90>)
 8006276:	f000 fd11 	bl	8006c9c <__assert_func>
 800627a:	6922      	ldr	r2, [r4, #16]
 800627c:	f104 010c 	add.w	r1, r4, #12
 8006280:	3202      	adds	r2, #2
 8006282:	0092      	lsls	r2, r2, #2
 8006284:	300c      	adds	r0, #12
 8006286:	f7fe fc3b 	bl	8004b00 <memcpy>
 800628a:	4621      	mov	r1, r4
 800628c:	4638      	mov	r0, r7
 800628e:	f7ff ffa3 	bl	80061d8 <_Bfree>
 8006292:	462c      	mov	r4, r5
 8006294:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006298:	3601      	adds	r6, #1
 800629a:	f8c3 8014 	str.w	r8, [r3, #20]
 800629e:	6126      	str	r6, [r4, #16]
 80062a0:	4620      	mov	r0, r4
 80062a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062a6:	bf00      	nop
 80062a8:	08007e7f 	.word	0x08007e7f
 80062ac:	08007e90 	.word	0x08007e90

080062b0 <__hi0bits>:
 80062b0:	0c02      	lsrs	r2, r0, #16
 80062b2:	0412      	lsls	r2, r2, #16
 80062b4:	4603      	mov	r3, r0
 80062b6:	b9ca      	cbnz	r2, 80062ec <__hi0bits+0x3c>
 80062b8:	0403      	lsls	r3, r0, #16
 80062ba:	2010      	movs	r0, #16
 80062bc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80062c0:	bf04      	itt	eq
 80062c2:	021b      	lsleq	r3, r3, #8
 80062c4:	3008      	addeq	r0, #8
 80062c6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80062ca:	bf04      	itt	eq
 80062cc:	011b      	lsleq	r3, r3, #4
 80062ce:	3004      	addeq	r0, #4
 80062d0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80062d4:	bf04      	itt	eq
 80062d6:	009b      	lsleq	r3, r3, #2
 80062d8:	3002      	addeq	r0, #2
 80062da:	2b00      	cmp	r3, #0
 80062dc:	db05      	blt.n	80062ea <__hi0bits+0x3a>
 80062de:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80062e2:	f100 0001 	add.w	r0, r0, #1
 80062e6:	bf08      	it	eq
 80062e8:	2020      	moveq	r0, #32
 80062ea:	4770      	bx	lr
 80062ec:	2000      	movs	r0, #0
 80062ee:	e7e5      	b.n	80062bc <__hi0bits+0xc>

080062f0 <__lo0bits>:
 80062f0:	6803      	ldr	r3, [r0, #0]
 80062f2:	4602      	mov	r2, r0
 80062f4:	f013 0007 	ands.w	r0, r3, #7
 80062f8:	d00b      	beq.n	8006312 <__lo0bits+0x22>
 80062fa:	07d9      	lsls	r1, r3, #31
 80062fc:	d422      	bmi.n	8006344 <__lo0bits+0x54>
 80062fe:	0798      	lsls	r0, r3, #30
 8006300:	bf49      	itett	mi
 8006302:	085b      	lsrmi	r3, r3, #1
 8006304:	089b      	lsrpl	r3, r3, #2
 8006306:	2001      	movmi	r0, #1
 8006308:	6013      	strmi	r3, [r2, #0]
 800630a:	bf5c      	itt	pl
 800630c:	2002      	movpl	r0, #2
 800630e:	6013      	strpl	r3, [r2, #0]
 8006310:	4770      	bx	lr
 8006312:	b299      	uxth	r1, r3
 8006314:	b909      	cbnz	r1, 800631a <__lo0bits+0x2a>
 8006316:	2010      	movs	r0, #16
 8006318:	0c1b      	lsrs	r3, r3, #16
 800631a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800631e:	bf04      	itt	eq
 8006320:	0a1b      	lsreq	r3, r3, #8
 8006322:	3008      	addeq	r0, #8
 8006324:	0719      	lsls	r1, r3, #28
 8006326:	bf04      	itt	eq
 8006328:	091b      	lsreq	r3, r3, #4
 800632a:	3004      	addeq	r0, #4
 800632c:	0799      	lsls	r1, r3, #30
 800632e:	bf04      	itt	eq
 8006330:	089b      	lsreq	r3, r3, #2
 8006332:	3002      	addeq	r0, #2
 8006334:	07d9      	lsls	r1, r3, #31
 8006336:	d403      	bmi.n	8006340 <__lo0bits+0x50>
 8006338:	085b      	lsrs	r3, r3, #1
 800633a:	f100 0001 	add.w	r0, r0, #1
 800633e:	d003      	beq.n	8006348 <__lo0bits+0x58>
 8006340:	6013      	str	r3, [r2, #0]
 8006342:	4770      	bx	lr
 8006344:	2000      	movs	r0, #0
 8006346:	4770      	bx	lr
 8006348:	2020      	movs	r0, #32
 800634a:	4770      	bx	lr

0800634c <__i2b>:
 800634c:	b510      	push	{r4, lr}
 800634e:	460c      	mov	r4, r1
 8006350:	2101      	movs	r1, #1
 8006352:	f7ff ff01 	bl	8006158 <_Balloc>
 8006356:	4602      	mov	r2, r0
 8006358:	b928      	cbnz	r0, 8006366 <__i2b+0x1a>
 800635a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800635e:	4b04      	ldr	r3, [pc, #16]	; (8006370 <__i2b+0x24>)
 8006360:	4804      	ldr	r0, [pc, #16]	; (8006374 <__i2b+0x28>)
 8006362:	f000 fc9b 	bl	8006c9c <__assert_func>
 8006366:	2301      	movs	r3, #1
 8006368:	6144      	str	r4, [r0, #20]
 800636a:	6103      	str	r3, [r0, #16]
 800636c:	bd10      	pop	{r4, pc}
 800636e:	bf00      	nop
 8006370:	08007e7f 	.word	0x08007e7f
 8006374:	08007e90 	.word	0x08007e90

08006378 <__multiply>:
 8006378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800637c:	4614      	mov	r4, r2
 800637e:	690a      	ldr	r2, [r1, #16]
 8006380:	6923      	ldr	r3, [r4, #16]
 8006382:	460d      	mov	r5, r1
 8006384:	429a      	cmp	r2, r3
 8006386:	bfbe      	ittt	lt
 8006388:	460b      	movlt	r3, r1
 800638a:	4625      	movlt	r5, r4
 800638c:	461c      	movlt	r4, r3
 800638e:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006392:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006396:	68ab      	ldr	r3, [r5, #8]
 8006398:	6869      	ldr	r1, [r5, #4]
 800639a:	eb0a 0709 	add.w	r7, sl, r9
 800639e:	42bb      	cmp	r3, r7
 80063a0:	b085      	sub	sp, #20
 80063a2:	bfb8      	it	lt
 80063a4:	3101      	addlt	r1, #1
 80063a6:	f7ff fed7 	bl	8006158 <_Balloc>
 80063aa:	b930      	cbnz	r0, 80063ba <__multiply+0x42>
 80063ac:	4602      	mov	r2, r0
 80063ae:	f240 115d 	movw	r1, #349	; 0x15d
 80063b2:	4b41      	ldr	r3, [pc, #260]	; (80064b8 <__multiply+0x140>)
 80063b4:	4841      	ldr	r0, [pc, #260]	; (80064bc <__multiply+0x144>)
 80063b6:	f000 fc71 	bl	8006c9c <__assert_func>
 80063ba:	f100 0614 	add.w	r6, r0, #20
 80063be:	4633      	mov	r3, r6
 80063c0:	2200      	movs	r2, #0
 80063c2:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80063c6:	4543      	cmp	r3, r8
 80063c8:	d31e      	bcc.n	8006408 <__multiply+0x90>
 80063ca:	f105 0c14 	add.w	ip, r5, #20
 80063ce:	f104 0314 	add.w	r3, r4, #20
 80063d2:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80063d6:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80063da:	9202      	str	r2, [sp, #8]
 80063dc:	ebac 0205 	sub.w	r2, ip, r5
 80063e0:	3a15      	subs	r2, #21
 80063e2:	f022 0203 	bic.w	r2, r2, #3
 80063e6:	3204      	adds	r2, #4
 80063e8:	f105 0115 	add.w	r1, r5, #21
 80063ec:	458c      	cmp	ip, r1
 80063ee:	bf38      	it	cc
 80063f0:	2204      	movcc	r2, #4
 80063f2:	9201      	str	r2, [sp, #4]
 80063f4:	9a02      	ldr	r2, [sp, #8]
 80063f6:	9303      	str	r3, [sp, #12]
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d808      	bhi.n	800640e <__multiply+0x96>
 80063fc:	2f00      	cmp	r7, #0
 80063fe:	dc55      	bgt.n	80064ac <__multiply+0x134>
 8006400:	6107      	str	r7, [r0, #16]
 8006402:	b005      	add	sp, #20
 8006404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006408:	f843 2b04 	str.w	r2, [r3], #4
 800640c:	e7db      	b.n	80063c6 <__multiply+0x4e>
 800640e:	f8b3 a000 	ldrh.w	sl, [r3]
 8006412:	f1ba 0f00 	cmp.w	sl, #0
 8006416:	d020      	beq.n	800645a <__multiply+0xe2>
 8006418:	46b1      	mov	r9, r6
 800641a:	2200      	movs	r2, #0
 800641c:	f105 0e14 	add.w	lr, r5, #20
 8006420:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006424:	f8d9 b000 	ldr.w	fp, [r9]
 8006428:	b2a1      	uxth	r1, r4
 800642a:	fa1f fb8b 	uxth.w	fp, fp
 800642e:	fb0a b101 	mla	r1, sl, r1, fp
 8006432:	4411      	add	r1, r2
 8006434:	f8d9 2000 	ldr.w	r2, [r9]
 8006438:	0c24      	lsrs	r4, r4, #16
 800643a:	0c12      	lsrs	r2, r2, #16
 800643c:	fb0a 2404 	mla	r4, sl, r4, r2
 8006440:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006444:	b289      	uxth	r1, r1
 8006446:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800644a:	45f4      	cmp	ip, lr
 800644c:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8006450:	f849 1b04 	str.w	r1, [r9], #4
 8006454:	d8e4      	bhi.n	8006420 <__multiply+0xa8>
 8006456:	9901      	ldr	r1, [sp, #4]
 8006458:	5072      	str	r2, [r6, r1]
 800645a:	9a03      	ldr	r2, [sp, #12]
 800645c:	3304      	adds	r3, #4
 800645e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006462:	f1b9 0f00 	cmp.w	r9, #0
 8006466:	d01f      	beq.n	80064a8 <__multiply+0x130>
 8006468:	46b6      	mov	lr, r6
 800646a:	f04f 0a00 	mov.w	sl, #0
 800646e:	6834      	ldr	r4, [r6, #0]
 8006470:	f105 0114 	add.w	r1, r5, #20
 8006474:	880a      	ldrh	r2, [r1, #0]
 8006476:	f8be b002 	ldrh.w	fp, [lr, #2]
 800647a:	b2a4      	uxth	r4, r4
 800647c:	fb09 b202 	mla	r2, r9, r2, fp
 8006480:	4492      	add	sl, r2
 8006482:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006486:	f84e 4b04 	str.w	r4, [lr], #4
 800648a:	f851 4b04 	ldr.w	r4, [r1], #4
 800648e:	f8be 2000 	ldrh.w	r2, [lr]
 8006492:	0c24      	lsrs	r4, r4, #16
 8006494:	fb09 2404 	mla	r4, r9, r4, r2
 8006498:	458c      	cmp	ip, r1
 800649a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800649e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80064a2:	d8e7      	bhi.n	8006474 <__multiply+0xfc>
 80064a4:	9a01      	ldr	r2, [sp, #4]
 80064a6:	50b4      	str	r4, [r6, r2]
 80064a8:	3604      	adds	r6, #4
 80064aa:	e7a3      	b.n	80063f4 <__multiply+0x7c>
 80064ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d1a5      	bne.n	8006400 <__multiply+0x88>
 80064b4:	3f01      	subs	r7, #1
 80064b6:	e7a1      	b.n	80063fc <__multiply+0x84>
 80064b8:	08007e7f 	.word	0x08007e7f
 80064bc:	08007e90 	.word	0x08007e90

080064c0 <__pow5mult>:
 80064c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064c4:	4615      	mov	r5, r2
 80064c6:	f012 0203 	ands.w	r2, r2, #3
 80064ca:	4606      	mov	r6, r0
 80064cc:	460f      	mov	r7, r1
 80064ce:	d007      	beq.n	80064e0 <__pow5mult+0x20>
 80064d0:	4c25      	ldr	r4, [pc, #148]	; (8006568 <__pow5mult+0xa8>)
 80064d2:	3a01      	subs	r2, #1
 80064d4:	2300      	movs	r3, #0
 80064d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80064da:	f7ff fe9f 	bl	800621c <__multadd>
 80064de:	4607      	mov	r7, r0
 80064e0:	10ad      	asrs	r5, r5, #2
 80064e2:	d03d      	beq.n	8006560 <__pow5mult+0xa0>
 80064e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80064e6:	b97c      	cbnz	r4, 8006508 <__pow5mult+0x48>
 80064e8:	2010      	movs	r0, #16
 80064ea:	f7ff fe1f 	bl	800612c <malloc>
 80064ee:	4602      	mov	r2, r0
 80064f0:	6270      	str	r0, [r6, #36]	; 0x24
 80064f2:	b928      	cbnz	r0, 8006500 <__pow5mult+0x40>
 80064f4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80064f8:	4b1c      	ldr	r3, [pc, #112]	; (800656c <__pow5mult+0xac>)
 80064fa:	481d      	ldr	r0, [pc, #116]	; (8006570 <__pow5mult+0xb0>)
 80064fc:	f000 fbce 	bl	8006c9c <__assert_func>
 8006500:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006504:	6004      	str	r4, [r0, #0]
 8006506:	60c4      	str	r4, [r0, #12]
 8006508:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800650c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006510:	b94c      	cbnz	r4, 8006526 <__pow5mult+0x66>
 8006512:	f240 2171 	movw	r1, #625	; 0x271
 8006516:	4630      	mov	r0, r6
 8006518:	f7ff ff18 	bl	800634c <__i2b>
 800651c:	2300      	movs	r3, #0
 800651e:	4604      	mov	r4, r0
 8006520:	f8c8 0008 	str.w	r0, [r8, #8]
 8006524:	6003      	str	r3, [r0, #0]
 8006526:	f04f 0900 	mov.w	r9, #0
 800652a:	07eb      	lsls	r3, r5, #31
 800652c:	d50a      	bpl.n	8006544 <__pow5mult+0x84>
 800652e:	4639      	mov	r1, r7
 8006530:	4622      	mov	r2, r4
 8006532:	4630      	mov	r0, r6
 8006534:	f7ff ff20 	bl	8006378 <__multiply>
 8006538:	4680      	mov	r8, r0
 800653a:	4639      	mov	r1, r7
 800653c:	4630      	mov	r0, r6
 800653e:	f7ff fe4b 	bl	80061d8 <_Bfree>
 8006542:	4647      	mov	r7, r8
 8006544:	106d      	asrs	r5, r5, #1
 8006546:	d00b      	beq.n	8006560 <__pow5mult+0xa0>
 8006548:	6820      	ldr	r0, [r4, #0]
 800654a:	b938      	cbnz	r0, 800655c <__pow5mult+0x9c>
 800654c:	4622      	mov	r2, r4
 800654e:	4621      	mov	r1, r4
 8006550:	4630      	mov	r0, r6
 8006552:	f7ff ff11 	bl	8006378 <__multiply>
 8006556:	6020      	str	r0, [r4, #0]
 8006558:	f8c0 9000 	str.w	r9, [r0]
 800655c:	4604      	mov	r4, r0
 800655e:	e7e4      	b.n	800652a <__pow5mult+0x6a>
 8006560:	4638      	mov	r0, r7
 8006562:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006566:	bf00      	nop
 8006568:	08007fe0 	.word	0x08007fe0
 800656c:	08007e09 	.word	0x08007e09
 8006570:	08007e90 	.word	0x08007e90

08006574 <__lshift>:
 8006574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006578:	460c      	mov	r4, r1
 800657a:	4607      	mov	r7, r0
 800657c:	4691      	mov	r9, r2
 800657e:	6923      	ldr	r3, [r4, #16]
 8006580:	6849      	ldr	r1, [r1, #4]
 8006582:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006586:	68a3      	ldr	r3, [r4, #8]
 8006588:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800658c:	f108 0601 	add.w	r6, r8, #1
 8006590:	42b3      	cmp	r3, r6
 8006592:	db0b      	blt.n	80065ac <__lshift+0x38>
 8006594:	4638      	mov	r0, r7
 8006596:	f7ff fddf 	bl	8006158 <_Balloc>
 800659a:	4605      	mov	r5, r0
 800659c:	b948      	cbnz	r0, 80065b2 <__lshift+0x3e>
 800659e:	4602      	mov	r2, r0
 80065a0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80065a4:	4b27      	ldr	r3, [pc, #156]	; (8006644 <__lshift+0xd0>)
 80065a6:	4828      	ldr	r0, [pc, #160]	; (8006648 <__lshift+0xd4>)
 80065a8:	f000 fb78 	bl	8006c9c <__assert_func>
 80065ac:	3101      	adds	r1, #1
 80065ae:	005b      	lsls	r3, r3, #1
 80065b0:	e7ee      	b.n	8006590 <__lshift+0x1c>
 80065b2:	2300      	movs	r3, #0
 80065b4:	f100 0114 	add.w	r1, r0, #20
 80065b8:	f100 0210 	add.w	r2, r0, #16
 80065bc:	4618      	mov	r0, r3
 80065be:	4553      	cmp	r3, sl
 80065c0:	db33      	blt.n	800662a <__lshift+0xb6>
 80065c2:	6920      	ldr	r0, [r4, #16]
 80065c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80065c8:	f104 0314 	add.w	r3, r4, #20
 80065cc:	f019 091f 	ands.w	r9, r9, #31
 80065d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80065d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80065d8:	d02b      	beq.n	8006632 <__lshift+0xbe>
 80065da:	468a      	mov	sl, r1
 80065dc:	2200      	movs	r2, #0
 80065de:	f1c9 0e20 	rsb	lr, r9, #32
 80065e2:	6818      	ldr	r0, [r3, #0]
 80065e4:	fa00 f009 	lsl.w	r0, r0, r9
 80065e8:	4302      	orrs	r2, r0
 80065ea:	f84a 2b04 	str.w	r2, [sl], #4
 80065ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80065f2:	459c      	cmp	ip, r3
 80065f4:	fa22 f20e 	lsr.w	r2, r2, lr
 80065f8:	d8f3      	bhi.n	80065e2 <__lshift+0x6e>
 80065fa:	ebac 0304 	sub.w	r3, ip, r4
 80065fe:	3b15      	subs	r3, #21
 8006600:	f023 0303 	bic.w	r3, r3, #3
 8006604:	3304      	adds	r3, #4
 8006606:	f104 0015 	add.w	r0, r4, #21
 800660a:	4584      	cmp	ip, r0
 800660c:	bf38      	it	cc
 800660e:	2304      	movcc	r3, #4
 8006610:	50ca      	str	r2, [r1, r3]
 8006612:	b10a      	cbz	r2, 8006618 <__lshift+0xa4>
 8006614:	f108 0602 	add.w	r6, r8, #2
 8006618:	3e01      	subs	r6, #1
 800661a:	4638      	mov	r0, r7
 800661c:	4621      	mov	r1, r4
 800661e:	612e      	str	r6, [r5, #16]
 8006620:	f7ff fdda 	bl	80061d8 <_Bfree>
 8006624:	4628      	mov	r0, r5
 8006626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800662a:	f842 0f04 	str.w	r0, [r2, #4]!
 800662e:	3301      	adds	r3, #1
 8006630:	e7c5      	b.n	80065be <__lshift+0x4a>
 8006632:	3904      	subs	r1, #4
 8006634:	f853 2b04 	ldr.w	r2, [r3], #4
 8006638:	459c      	cmp	ip, r3
 800663a:	f841 2f04 	str.w	r2, [r1, #4]!
 800663e:	d8f9      	bhi.n	8006634 <__lshift+0xc0>
 8006640:	e7ea      	b.n	8006618 <__lshift+0xa4>
 8006642:	bf00      	nop
 8006644:	08007e7f 	.word	0x08007e7f
 8006648:	08007e90 	.word	0x08007e90

0800664c <__mcmp>:
 800664c:	4603      	mov	r3, r0
 800664e:	690a      	ldr	r2, [r1, #16]
 8006650:	6900      	ldr	r0, [r0, #16]
 8006652:	b530      	push	{r4, r5, lr}
 8006654:	1a80      	subs	r0, r0, r2
 8006656:	d10d      	bne.n	8006674 <__mcmp+0x28>
 8006658:	3314      	adds	r3, #20
 800665a:	3114      	adds	r1, #20
 800665c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006660:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006664:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006668:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800666c:	4295      	cmp	r5, r2
 800666e:	d002      	beq.n	8006676 <__mcmp+0x2a>
 8006670:	d304      	bcc.n	800667c <__mcmp+0x30>
 8006672:	2001      	movs	r0, #1
 8006674:	bd30      	pop	{r4, r5, pc}
 8006676:	42a3      	cmp	r3, r4
 8006678:	d3f4      	bcc.n	8006664 <__mcmp+0x18>
 800667a:	e7fb      	b.n	8006674 <__mcmp+0x28>
 800667c:	f04f 30ff 	mov.w	r0, #4294967295
 8006680:	e7f8      	b.n	8006674 <__mcmp+0x28>
	...

08006684 <__mdiff>:
 8006684:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006688:	460c      	mov	r4, r1
 800668a:	4606      	mov	r6, r0
 800668c:	4611      	mov	r1, r2
 800668e:	4620      	mov	r0, r4
 8006690:	4692      	mov	sl, r2
 8006692:	f7ff ffdb 	bl	800664c <__mcmp>
 8006696:	1e05      	subs	r5, r0, #0
 8006698:	d111      	bne.n	80066be <__mdiff+0x3a>
 800669a:	4629      	mov	r1, r5
 800669c:	4630      	mov	r0, r6
 800669e:	f7ff fd5b 	bl	8006158 <_Balloc>
 80066a2:	4602      	mov	r2, r0
 80066a4:	b928      	cbnz	r0, 80066b2 <__mdiff+0x2e>
 80066a6:	f240 2132 	movw	r1, #562	; 0x232
 80066aa:	4b3c      	ldr	r3, [pc, #240]	; (800679c <__mdiff+0x118>)
 80066ac:	483c      	ldr	r0, [pc, #240]	; (80067a0 <__mdiff+0x11c>)
 80066ae:	f000 faf5 	bl	8006c9c <__assert_func>
 80066b2:	2301      	movs	r3, #1
 80066b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80066b8:	4610      	mov	r0, r2
 80066ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066be:	bfa4      	itt	ge
 80066c0:	4653      	movge	r3, sl
 80066c2:	46a2      	movge	sl, r4
 80066c4:	4630      	mov	r0, r6
 80066c6:	f8da 1004 	ldr.w	r1, [sl, #4]
 80066ca:	bfa6      	itte	ge
 80066cc:	461c      	movge	r4, r3
 80066ce:	2500      	movge	r5, #0
 80066d0:	2501      	movlt	r5, #1
 80066d2:	f7ff fd41 	bl	8006158 <_Balloc>
 80066d6:	4602      	mov	r2, r0
 80066d8:	b918      	cbnz	r0, 80066e2 <__mdiff+0x5e>
 80066da:	f44f 7110 	mov.w	r1, #576	; 0x240
 80066de:	4b2f      	ldr	r3, [pc, #188]	; (800679c <__mdiff+0x118>)
 80066e0:	e7e4      	b.n	80066ac <__mdiff+0x28>
 80066e2:	f100 0814 	add.w	r8, r0, #20
 80066e6:	f8da 7010 	ldr.w	r7, [sl, #16]
 80066ea:	60c5      	str	r5, [r0, #12]
 80066ec:	f04f 0c00 	mov.w	ip, #0
 80066f0:	f10a 0514 	add.w	r5, sl, #20
 80066f4:	f10a 0010 	add.w	r0, sl, #16
 80066f8:	46c2      	mov	sl, r8
 80066fa:	6926      	ldr	r6, [r4, #16]
 80066fc:	f104 0914 	add.w	r9, r4, #20
 8006700:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8006704:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006708:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800670c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006710:	fa1f f18b 	uxth.w	r1, fp
 8006714:	4461      	add	r1, ip
 8006716:	fa1f fc83 	uxth.w	ip, r3
 800671a:	0c1b      	lsrs	r3, r3, #16
 800671c:	eba1 010c 	sub.w	r1, r1, ip
 8006720:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006724:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006728:	b289      	uxth	r1, r1
 800672a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800672e:	454e      	cmp	r6, r9
 8006730:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006734:	f84a 3b04 	str.w	r3, [sl], #4
 8006738:	d8e6      	bhi.n	8006708 <__mdiff+0x84>
 800673a:	1b33      	subs	r3, r6, r4
 800673c:	3b15      	subs	r3, #21
 800673e:	f023 0303 	bic.w	r3, r3, #3
 8006742:	3415      	adds	r4, #21
 8006744:	3304      	adds	r3, #4
 8006746:	42a6      	cmp	r6, r4
 8006748:	bf38      	it	cc
 800674a:	2304      	movcc	r3, #4
 800674c:	441d      	add	r5, r3
 800674e:	4443      	add	r3, r8
 8006750:	461e      	mov	r6, r3
 8006752:	462c      	mov	r4, r5
 8006754:	4574      	cmp	r4, lr
 8006756:	d30e      	bcc.n	8006776 <__mdiff+0xf2>
 8006758:	f10e 0103 	add.w	r1, lr, #3
 800675c:	1b49      	subs	r1, r1, r5
 800675e:	f021 0103 	bic.w	r1, r1, #3
 8006762:	3d03      	subs	r5, #3
 8006764:	45ae      	cmp	lr, r5
 8006766:	bf38      	it	cc
 8006768:	2100      	movcc	r1, #0
 800676a:	4419      	add	r1, r3
 800676c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006770:	b18b      	cbz	r3, 8006796 <__mdiff+0x112>
 8006772:	6117      	str	r7, [r2, #16]
 8006774:	e7a0      	b.n	80066b8 <__mdiff+0x34>
 8006776:	f854 8b04 	ldr.w	r8, [r4], #4
 800677a:	fa1f f188 	uxth.w	r1, r8
 800677e:	4461      	add	r1, ip
 8006780:	1408      	asrs	r0, r1, #16
 8006782:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8006786:	b289      	uxth	r1, r1
 8006788:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800678c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006790:	f846 1b04 	str.w	r1, [r6], #4
 8006794:	e7de      	b.n	8006754 <__mdiff+0xd0>
 8006796:	3f01      	subs	r7, #1
 8006798:	e7e8      	b.n	800676c <__mdiff+0xe8>
 800679a:	bf00      	nop
 800679c:	08007e7f 	.word	0x08007e7f
 80067a0:	08007e90 	.word	0x08007e90

080067a4 <__d2b>:
 80067a4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80067a8:	2101      	movs	r1, #1
 80067aa:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80067ae:	4690      	mov	r8, r2
 80067b0:	461d      	mov	r5, r3
 80067b2:	f7ff fcd1 	bl	8006158 <_Balloc>
 80067b6:	4604      	mov	r4, r0
 80067b8:	b930      	cbnz	r0, 80067c8 <__d2b+0x24>
 80067ba:	4602      	mov	r2, r0
 80067bc:	f240 310a 	movw	r1, #778	; 0x30a
 80067c0:	4b24      	ldr	r3, [pc, #144]	; (8006854 <__d2b+0xb0>)
 80067c2:	4825      	ldr	r0, [pc, #148]	; (8006858 <__d2b+0xb4>)
 80067c4:	f000 fa6a 	bl	8006c9c <__assert_func>
 80067c8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80067cc:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80067d0:	bb2d      	cbnz	r5, 800681e <__d2b+0x7a>
 80067d2:	9301      	str	r3, [sp, #4]
 80067d4:	f1b8 0300 	subs.w	r3, r8, #0
 80067d8:	d026      	beq.n	8006828 <__d2b+0x84>
 80067da:	4668      	mov	r0, sp
 80067dc:	9300      	str	r3, [sp, #0]
 80067de:	f7ff fd87 	bl	80062f0 <__lo0bits>
 80067e2:	9900      	ldr	r1, [sp, #0]
 80067e4:	b1f0      	cbz	r0, 8006824 <__d2b+0x80>
 80067e6:	9a01      	ldr	r2, [sp, #4]
 80067e8:	f1c0 0320 	rsb	r3, r0, #32
 80067ec:	fa02 f303 	lsl.w	r3, r2, r3
 80067f0:	430b      	orrs	r3, r1
 80067f2:	40c2      	lsrs	r2, r0
 80067f4:	6163      	str	r3, [r4, #20]
 80067f6:	9201      	str	r2, [sp, #4]
 80067f8:	9b01      	ldr	r3, [sp, #4]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	bf14      	ite	ne
 80067fe:	2102      	movne	r1, #2
 8006800:	2101      	moveq	r1, #1
 8006802:	61a3      	str	r3, [r4, #24]
 8006804:	6121      	str	r1, [r4, #16]
 8006806:	b1c5      	cbz	r5, 800683a <__d2b+0x96>
 8006808:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800680c:	4405      	add	r5, r0
 800680e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006812:	603d      	str	r5, [r7, #0]
 8006814:	6030      	str	r0, [r6, #0]
 8006816:	4620      	mov	r0, r4
 8006818:	b002      	add	sp, #8
 800681a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800681e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006822:	e7d6      	b.n	80067d2 <__d2b+0x2e>
 8006824:	6161      	str	r1, [r4, #20]
 8006826:	e7e7      	b.n	80067f8 <__d2b+0x54>
 8006828:	a801      	add	r0, sp, #4
 800682a:	f7ff fd61 	bl	80062f0 <__lo0bits>
 800682e:	2101      	movs	r1, #1
 8006830:	9b01      	ldr	r3, [sp, #4]
 8006832:	6121      	str	r1, [r4, #16]
 8006834:	6163      	str	r3, [r4, #20]
 8006836:	3020      	adds	r0, #32
 8006838:	e7e5      	b.n	8006806 <__d2b+0x62>
 800683a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800683e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006842:	6038      	str	r0, [r7, #0]
 8006844:	6918      	ldr	r0, [r3, #16]
 8006846:	f7ff fd33 	bl	80062b0 <__hi0bits>
 800684a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800684e:	6031      	str	r1, [r6, #0]
 8006850:	e7e1      	b.n	8006816 <__d2b+0x72>
 8006852:	bf00      	nop
 8006854:	08007e7f 	.word	0x08007e7f
 8006858:	08007e90 	.word	0x08007e90

0800685c <_calloc_r>:
 800685c:	b538      	push	{r3, r4, r5, lr}
 800685e:	fb02 f501 	mul.w	r5, r2, r1
 8006862:	4629      	mov	r1, r5
 8006864:	f000 f854 	bl	8006910 <_malloc_r>
 8006868:	4604      	mov	r4, r0
 800686a:	b118      	cbz	r0, 8006874 <_calloc_r+0x18>
 800686c:	462a      	mov	r2, r5
 800686e:	2100      	movs	r1, #0
 8006870:	f7fe f954 	bl	8004b1c <memset>
 8006874:	4620      	mov	r0, r4
 8006876:	bd38      	pop	{r3, r4, r5, pc}

08006878 <_free_r>:
 8006878:	b538      	push	{r3, r4, r5, lr}
 800687a:	4605      	mov	r5, r0
 800687c:	2900      	cmp	r1, #0
 800687e:	d043      	beq.n	8006908 <_free_r+0x90>
 8006880:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006884:	1f0c      	subs	r4, r1, #4
 8006886:	2b00      	cmp	r3, #0
 8006888:	bfb8      	it	lt
 800688a:	18e4      	addlt	r4, r4, r3
 800688c:	f000 fa62 	bl	8006d54 <__malloc_lock>
 8006890:	4a1e      	ldr	r2, [pc, #120]	; (800690c <_free_r+0x94>)
 8006892:	6813      	ldr	r3, [r2, #0]
 8006894:	4610      	mov	r0, r2
 8006896:	b933      	cbnz	r3, 80068a6 <_free_r+0x2e>
 8006898:	6063      	str	r3, [r4, #4]
 800689a:	6014      	str	r4, [r2, #0]
 800689c:	4628      	mov	r0, r5
 800689e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068a2:	f000 ba5d 	b.w	8006d60 <__malloc_unlock>
 80068a6:	42a3      	cmp	r3, r4
 80068a8:	d90a      	bls.n	80068c0 <_free_r+0x48>
 80068aa:	6821      	ldr	r1, [r4, #0]
 80068ac:	1862      	adds	r2, r4, r1
 80068ae:	4293      	cmp	r3, r2
 80068b0:	bf01      	itttt	eq
 80068b2:	681a      	ldreq	r2, [r3, #0]
 80068b4:	685b      	ldreq	r3, [r3, #4]
 80068b6:	1852      	addeq	r2, r2, r1
 80068b8:	6022      	streq	r2, [r4, #0]
 80068ba:	6063      	str	r3, [r4, #4]
 80068bc:	6004      	str	r4, [r0, #0]
 80068be:	e7ed      	b.n	800689c <_free_r+0x24>
 80068c0:	461a      	mov	r2, r3
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	b10b      	cbz	r3, 80068ca <_free_r+0x52>
 80068c6:	42a3      	cmp	r3, r4
 80068c8:	d9fa      	bls.n	80068c0 <_free_r+0x48>
 80068ca:	6811      	ldr	r1, [r2, #0]
 80068cc:	1850      	adds	r0, r2, r1
 80068ce:	42a0      	cmp	r0, r4
 80068d0:	d10b      	bne.n	80068ea <_free_r+0x72>
 80068d2:	6820      	ldr	r0, [r4, #0]
 80068d4:	4401      	add	r1, r0
 80068d6:	1850      	adds	r0, r2, r1
 80068d8:	4283      	cmp	r3, r0
 80068da:	6011      	str	r1, [r2, #0]
 80068dc:	d1de      	bne.n	800689c <_free_r+0x24>
 80068de:	6818      	ldr	r0, [r3, #0]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	4401      	add	r1, r0
 80068e4:	6011      	str	r1, [r2, #0]
 80068e6:	6053      	str	r3, [r2, #4]
 80068e8:	e7d8      	b.n	800689c <_free_r+0x24>
 80068ea:	d902      	bls.n	80068f2 <_free_r+0x7a>
 80068ec:	230c      	movs	r3, #12
 80068ee:	602b      	str	r3, [r5, #0]
 80068f0:	e7d4      	b.n	800689c <_free_r+0x24>
 80068f2:	6820      	ldr	r0, [r4, #0]
 80068f4:	1821      	adds	r1, r4, r0
 80068f6:	428b      	cmp	r3, r1
 80068f8:	bf01      	itttt	eq
 80068fa:	6819      	ldreq	r1, [r3, #0]
 80068fc:	685b      	ldreq	r3, [r3, #4]
 80068fe:	1809      	addeq	r1, r1, r0
 8006900:	6021      	streq	r1, [r4, #0]
 8006902:	6063      	str	r3, [r4, #4]
 8006904:	6054      	str	r4, [r2, #4]
 8006906:	e7c9      	b.n	800689c <_free_r+0x24>
 8006908:	bd38      	pop	{r3, r4, r5, pc}
 800690a:	bf00      	nop
 800690c:	200002d0 	.word	0x200002d0

08006910 <_malloc_r>:
 8006910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006912:	1ccd      	adds	r5, r1, #3
 8006914:	f025 0503 	bic.w	r5, r5, #3
 8006918:	3508      	adds	r5, #8
 800691a:	2d0c      	cmp	r5, #12
 800691c:	bf38      	it	cc
 800691e:	250c      	movcc	r5, #12
 8006920:	2d00      	cmp	r5, #0
 8006922:	4606      	mov	r6, r0
 8006924:	db01      	blt.n	800692a <_malloc_r+0x1a>
 8006926:	42a9      	cmp	r1, r5
 8006928:	d903      	bls.n	8006932 <_malloc_r+0x22>
 800692a:	230c      	movs	r3, #12
 800692c:	6033      	str	r3, [r6, #0]
 800692e:	2000      	movs	r0, #0
 8006930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006932:	f000 fa0f 	bl	8006d54 <__malloc_lock>
 8006936:	4921      	ldr	r1, [pc, #132]	; (80069bc <_malloc_r+0xac>)
 8006938:	680a      	ldr	r2, [r1, #0]
 800693a:	4614      	mov	r4, r2
 800693c:	b99c      	cbnz	r4, 8006966 <_malloc_r+0x56>
 800693e:	4f20      	ldr	r7, [pc, #128]	; (80069c0 <_malloc_r+0xb0>)
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	b923      	cbnz	r3, 800694e <_malloc_r+0x3e>
 8006944:	4621      	mov	r1, r4
 8006946:	4630      	mov	r0, r6
 8006948:	f000 f998 	bl	8006c7c <_sbrk_r>
 800694c:	6038      	str	r0, [r7, #0]
 800694e:	4629      	mov	r1, r5
 8006950:	4630      	mov	r0, r6
 8006952:	f000 f993 	bl	8006c7c <_sbrk_r>
 8006956:	1c43      	adds	r3, r0, #1
 8006958:	d123      	bne.n	80069a2 <_malloc_r+0x92>
 800695a:	230c      	movs	r3, #12
 800695c:	4630      	mov	r0, r6
 800695e:	6033      	str	r3, [r6, #0]
 8006960:	f000 f9fe 	bl	8006d60 <__malloc_unlock>
 8006964:	e7e3      	b.n	800692e <_malloc_r+0x1e>
 8006966:	6823      	ldr	r3, [r4, #0]
 8006968:	1b5b      	subs	r3, r3, r5
 800696a:	d417      	bmi.n	800699c <_malloc_r+0x8c>
 800696c:	2b0b      	cmp	r3, #11
 800696e:	d903      	bls.n	8006978 <_malloc_r+0x68>
 8006970:	6023      	str	r3, [r4, #0]
 8006972:	441c      	add	r4, r3
 8006974:	6025      	str	r5, [r4, #0]
 8006976:	e004      	b.n	8006982 <_malloc_r+0x72>
 8006978:	6863      	ldr	r3, [r4, #4]
 800697a:	42a2      	cmp	r2, r4
 800697c:	bf0c      	ite	eq
 800697e:	600b      	streq	r3, [r1, #0]
 8006980:	6053      	strne	r3, [r2, #4]
 8006982:	4630      	mov	r0, r6
 8006984:	f000 f9ec 	bl	8006d60 <__malloc_unlock>
 8006988:	f104 000b 	add.w	r0, r4, #11
 800698c:	1d23      	adds	r3, r4, #4
 800698e:	f020 0007 	bic.w	r0, r0, #7
 8006992:	1ac2      	subs	r2, r0, r3
 8006994:	d0cc      	beq.n	8006930 <_malloc_r+0x20>
 8006996:	1a1b      	subs	r3, r3, r0
 8006998:	50a3      	str	r3, [r4, r2]
 800699a:	e7c9      	b.n	8006930 <_malloc_r+0x20>
 800699c:	4622      	mov	r2, r4
 800699e:	6864      	ldr	r4, [r4, #4]
 80069a0:	e7cc      	b.n	800693c <_malloc_r+0x2c>
 80069a2:	1cc4      	adds	r4, r0, #3
 80069a4:	f024 0403 	bic.w	r4, r4, #3
 80069a8:	42a0      	cmp	r0, r4
 80069aa:	d0e3      	beq.n	8006974 <_malloc_r+0x64>
 80069ac:	1a21      	subs	r1, r4, r0
 80069ae:	4630      	mov	r0, r6
 80069b0:	f000 f964 	bl	8006c7c <_sbrk_r>
 80069b4:	3001      	adds	r0, #1
 80069b6:	d1dd      	bne.n	8006974 <_malloc_r+0x64>
 80069b8:	e7cf      	b.n	800695a <_malloc_r+0x4a>
 80069ba:	bf00      	nop
 80069bc:	200002d0 	.word	0x200002d0
 80069c0:	200002d4 	.word	0x200002d4

080069c4 <__ssputs_r>:
 80069c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069c8:	688e      	ldr	r6, [r1, #8]
 80069ca:	4682      	mov	sl, r0
 80069cc:	429e      	cmp	r6, r3
 80069ce:	460c      	mov	r4, r1
 80069d0:	4690      	mov	r8, r2
 80069d2:	461f      	mov	r7, r3
 80069d4:	d838      	bhi.n	8006a48 <__ssputs_r+0x84>
 80069d6:	898a      	ldrh	r2, [r1, #12]
 80069d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80069dc:	d032      	beq.n	8006a44 <__ssputs_r+0x80>
 80069de:	6825      	ldr	r5, [r4, #0]
 80069e0:	6909      	ldr	r1, [r1, #16]
 80069e2:	3301      	adds	r3, #1
 80069e4:	eba5 0901 	sub.w	r9, r5, r1
 80069e8:	6965      	ldr	r5, [r4, #20]
 80069ea:	444b      	add	r3, r9
 80069ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80069f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80069f4:	106d      	asrs	r5, r5, #1
 80069f6:	429d      	cmp	r5, r3
 80069f8:	bf38      	it	cc
 80069fa:	461d      	movcc	r5, r3
 80069fc:	0553      	lsls	r3, r2, #21
 80069fe:	d531      	bpl.n	8006a64 <__ssputs_r+0xa0>
 8006a00:	4629      	mov	r1, r5
 8006a02:	f7ff ff85 	bl	8006910 <_malloc_r>
 8006a06:	4606      	mov	r6, r0
 8006a08:	b950      	cbnz	r0, 8006a20 <__ssputs_r+0x5c>
 8006a0a:	230c      	movs	r3, #12
 8006a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a10:	f8ca 3000 	str.w	r3, [sl]
 8006a14:	89a3      	ldrh	r3, [r4, #12]
 8006a16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a1a:	81a3      	strh	r3, [r4, #12]
 8006a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a20:	464a      	mov	r2, r9
 8006a22:	6921      	ldr	r1, [r4, #16]
 8006a24:	f7fe f86c 	bl	8004b00 <memcpy>
 8006a28:	89a3      	ldrh	r3, [r4, #12]
 8006a2a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006a2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a32:	81a3      	strh	r3, [r4, #12]
 8006a34:	6126      	str	r6, [r4, #16]
 8006a36:	444e      	add	r6, r9
 8006a38:	6026      	str	r6, [r4, #0]
 8006a3a:	463e      	mov	r6, r7
 8006a3c:	6165      	str	r5, [r4, #20]
 8006a3e:	eba5 0509 	sub.w	r5, r5, r9
 8006a42:	60a5      	str	r5, [r4, #8]
 8006a44:	42be      	cmp	r6, r7
 8006a46:	d900      	bls.n	8006a4a <__ssputs_r+0x86>
 8006a48:	463e      	mov	r6, r7
 8006a4a:	4632      	mov	r2, r6
 8006a4c:	4641      	mov	r1, r8
 8006a4e:	6820      	ldr	r0, [r4, #0]
 8006a50:	f000 f966 	bl	8006d20 <memmove>
 8006a54:	68a3      	ldr	r3, [r4, #8]
 8006a56:	6822      	ldr	r2, [r4, #0]
 8006a58:	1b9b      	subs	r3, r3, r6
 8006a5a:	4432      	add	r2, r6
 8006a5c:	2000      	movs	r0, #0
 8006a5e:	60a3      	str	r3, [r4, #8]
 8006a60:	6022      	str	r2, [r4, #0]
 8006a62:	e7db      	b.n	8006a1c <__ssputs_r+0x58>
 8006a64:	462a      	mov	r2, r5
 8006a66:	f000 f981 	bl	8006d6c <_realloc_r>
 8006a6a:	4606      	mov	r6, r0
 8006a6c:	2800      	cmp	r0, #0
 8006a6e:	d1e1      	bne.n	8006a34 <__ssputs_r+0x70>
 8006a70:	4650      	mov	r0, sl
 8006a72:	6921      	ldr	r1, [r4, #16]
 8006a74:	f7ff ff00 	bl	8006878 <_free_r>
 8006a78:	e7c7      	b.n	8006a0a <__ssputs_r+0x46>
	...

08006a7c <_svfiprintf_r>:
 8006a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a80:	4698      	mov	r8, r3
 8006a82:	898b      	ldrh	r3, [r1, #12]
 8006a84:	4607      	mov	r7, r0
 8006a86:	061b      	lsls	r3, r3, #24
 8006a88:	460d      	mov	r5, r1
 8006a8a:	4614      	mov	r4, r2
 8006a8c:	b09d      	sub	sp, #116	; 0x74
 8006a8e:	d50e      	bpl.n	8006aae <_svfiprintf_r+0x32>
 8006a90:	690b      	ldr	r3, [r1, #16]
 8006a92:	b963      	cbnz	r3, 8006aae <_svfiprintf_r+0x32>
 8006a94:	2140      	movs	r1, #64	; 0x40
 8006a96:	f7ff ff3b 	bl	8006910 <_malloc_r>
 8006a9a:	6028      	str	r0, [r5, #0]
 8006a9c:	6128      	str	r0, [r5, #16]
 8006a9e:	b920      	cbnz	r0, 8006aaa <_svfiprintf_r+0x2e>
 8006aa0:	230c      	movs	r3, #12
 8006aa2:	603b      	str	r3, [r7, #0]
 8006aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8006aa8:	e0d1      	b.n	8006c4e <_svfiprintf_r+0x1d2>
 8006aaa:	2340      	movs	r3, #64	; 0x40
 8006aac:	616b      	str	r3, [r5, #20]
 8006aae:	2300      	movs	r3, #0
 8006ab0:	9309      	str	r3, [sp, #36]	; 0x24
 8006ab2:	2320      	movs	r3, #32
 8006ab4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ab8:	2330      	movs	r3, #48	; 0x30
 8006aba:	f04f 0901 	mov.w	r9, #1
 8006abe:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ac2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006c68 <_svfiprintf_r+0x1ec>
 8006ac6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006aca:	4623      	mov	r3, r4
 8006acc:	469a      	mov	sl, r3
 8006ace:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ad2:	b10a      	cbz	r2, 8006ad8 <_svfiprintf_r+0x5c>
 8006ad4:	2a25      	cmp	r2, #37	; 0x25
 8006ad6:	d1f9      	bne.n	8006acc <_svfiprintf_r+0x50>
 8006ad8:	ebba 0b04 	subs.w	fp, sl, r4
 8006adc:	d00b      	beq.n	8006af6 <_svfiprintf_r+0x7a>
 8006ade:	465b      	mov	r3, fp
 8006ae0:	4622      	mov	r2, r4
 8006ae2:	4629      	mov	r1, r5
 8006ae4:	4638      	mov	r0, r7
 8006ae6:	f7ff ff6d 	bl	80069c4 <__ssputs_r>
 8006aea:	3001      	adds	r0, #1
 8006aec:	f000 80aa 	beq.w	8006c44 <_svfiprintf_r+0x1c8>
 8006af0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006af2:	445a      	add	r2, fp
 8006af4:	9209      	str	r2, [sp, #36]	; 0x24
 8006af6:	f89a 3000 	ldrb.w	r3, [sl]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	f000 80a2 	beq.w	8006c44 <_svfiprintf_r+0x1c8>
 8006b00:	2300      	movs	r3, #0
 8006b02:	f04f 32ff 	mov.w	r2, #4294967295
 8006b06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b0a:	f10a 0a01 	add.w	sl, sl, #1
 8006b0e:	9304      	str	r3, [sp, #16]
 8006b10:	9307      	str	r3, [sp, #28]
 8006b12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b16:	931a      	str	r3, [sp, #104]	; 0x68
 8006b18:	4654      	mov	r4, sl
 8006b1a:	2205      	movs	r2, #5
 8006b1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b20:	4851      	ldr	r0, [pc, #324]	; (8006c68 <_svfiprintf_r+0x1ec>)
 8006b22:	f7ff fb0b 	bl	800613c <memchr>
 8006b26:	9a04      	ldr	r2, [sp, #16]
 8006b28:	b9d8      	cbnz	r0, 8006b62 <_svfiprintf_r+0xe6>
 8006b2a:	06d0      	lsls	r0, r2, #27
 8006b2c:	bf44      	itt	mi
 8006b2e:	2320      	movmi	r3, #32
 8006b30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b34:	0711      	lsls	r1, r2, #28
 8006b36:	bf44      	itt	mi
 8006b38:	232b      	movmi	r3, #43	; 0x2b
 8006b3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b3e:	f89a 3000 	ldrb.w	r3, [sl]
 8006b42:	2b2a      	cmp	r3, #42	; 0x2a
 8006b44:	d015      	beq.n	8006b72 <_svfiprintf_r+0xf6>
 8006b46:	4654      	mov	r4, sl
 8006b48:	2000      	movs	r0, #0
 8006b4a:	f04f 0c0a 	mov.w	ip, #10
 8006b4e:	9a07      	ldr	r2, [sp, #28]
 8006b50:	4621      	mov	r1, r4
 8006b52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b56:	3b30      	subs	r3, #48	; 0x30
 8006b58:	2b09      	cmp	r3, #9
 8006b5a:	d94e      	bls.n	8006bfa <_svfiprintf_r+0x17e>
 8006b5c:	b1b0      	cbz	r0, 8006b8c <_svfiprintf_r+0x110>
 8006b5e:	9207      	str	r2, [sp, #28]
 8006b60:	e014      	b.n	8006b8c <_svfiprintf_r+0x110>
 8006b62:	eba0 0308 	sub.w	r3, r0, r8
 8006b66:	fa09 f303 	lsl.w	r3, r9, r3
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	46a2      	mov	sl, r4
 8006b6e:	9304      	str	r3, [sp, #16]
 8006b70:	e7d2      	b.n	8006b18 <_svfiprintf_r+0x9c>
 8006b72:	9b03      	ldr	r3, [sp, #12]
 8006b74:	1d19      	adds	r1, r3, #4
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	9103      	str	r1, [sp, #12]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	bfbb      	ittet	lt
 8006b7e:	425b      	neglt	r3, r3
 8006b80:	f042 0202 	orrlt.w	r2, r2, #2
 8006b84:	9307      	strge	r3, [sp, #28]
 8006b86:	9307      	strlt	r3, [sp, #28]
 8006b88:	bfb8      	it	lt
 8006b8a:	9204      	strlt	r2, [sp, #16]
 8006b8c:	7823      	ldrb	r3, [r4, #0]
 8006b8e:	2b2e      	cmp	r3, #46	; 0x2e
 8006b90:	d10c      	bne.n	8006bac <_svfiprintf_r+0x130>
 8006b92:	7863      	ldrb	r3, [r4, #1]
 8006b94:	2b2a      	cmp	r3, #42	; 0x2a
 8006b96:	d135      	bne.n	8006c04 <_svfiprintf_r+0x188>
 8006b98:	9b03      	ldr	r3, [sp, #12]
 8006b9a:	3402      	adds	r4, #2
 8006b9c:	1d1a      	adds	r2, r3, #4
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	9203      	str	r2, [sp, #12]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	bfb8      	it	lt
 8006ba6:	f04f 33ff 	movlt.w	r3, #4294967295
 8006baa:	9305      	str	r3, [sp, #20]
 8006bac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006c78 <_svfiprintf_r+0x1fc>
 8006bb0:	2203      	movs	r2, #3
 8006bb2:	4650      	mov	r0, sl
 8006bb4:	7821      	ldrb	r1, [r4, #0]
 8006bb6:	f7ff fac1 	bl	800613c <memchr>
 8006bba:	b140      	cbz	r0, 8006bce <_svfiprintf_r+0x152>
 8006bbc:	2340      	movs	r3, #64	; 0x40
 8006bbe:	eba0 000a 	sub.w	r0, r0, sl
 8006bc2:	fa03 f000 	lsl.w	r0, r3, r0
 8006bc6:	9b04      	ldr	r3, [sp, #16]
 8006bc8:	3401      	adds	r4, #1
 8006bca:	4303      	orrs	r3, r0
 8006bcc:	9304      	str	r3, [sp, #16]
 8006bce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bd2:	2206      	movs	r2, #6
 8006bd4:	4825      	ldr	r0, [pc, #148]	; (8006c6c <_svfiprintf_r+0x1f0>)
 8006bd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006bda:	f7ff faaf 	bl	800613c <memchr>
 8006bde:	2800      	cmp	r0, #0
 8006be0:	d038      	beq.n	8006c54 <_svfiprintf_r+0x1d8>
 8006be2:	4b23      	ldr	r3, [pc, #140]	; (8006c70 <_svfiprintf_r+0x1f4>)
 8006be4:	bb1b      	cbnz	r3, 8006c2e <_svfiprintf_r+0x1b2>
 8006be6:	9b03      	ldr	r3, [sp, #12]
 8006be8:	3307      	adds	r3, #7
 8006bea:	f023 0307 	bic.w	r3, r3, #7
 8006bee:	3308      	adds	r3, #8
 8006bf0:	9303      	str	r3, [sp, #12]
 8006bf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bf4:	4433      	add	r3, r6
 8006bf6:	9309      	str	r3, [sp, #36]	; 0x24
 8006bf8:	e767      	b.n	8006aca <_svfiprintf_r+0x4e>
 8006bfa:	460c      	mov	r4, r1
 8006bfc:	2001      	movs	r0, #1
 8006bfe:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c02:	e7a5      	b.n	8006b50 <_svfiprintf_r+0xd4>
 8006c04:	2300      	movs	r3, #0
 8006c06:	f04f 0c0a 	mov.w	ip, #10
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	3401      	adds	r4, #1
 8006c0e:	9305      	str	r3, [sp, #20]
 8006c10:	4620      	mov	r0, r4
 8006c12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c16:	3a30      	subs	r2, #48	; 0x30
 8006c18:	2a09      	cmp	r2, #9
 8006c1a:	d903      	bls.n	8006c24 <_svfiprintf_r+0x1a8>
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d0c5      	beq.n	8006bac <_svfiprintf_r+0x130>
 8006c20:	9105      	str	r1, [sp, #20]
 8006c22:	e7c3      	b.n	8006bac <_svfiprintf_r+0x130>
 8006c24:	4604      	mov	r4, r0
 8006c26:	2301      	movs	r3, #1
 8006c28:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c2c:	e7f0      	b.n	8006c10 <_svfiprintf_r+0x194>
 8006c2e:	ab03      	add	r3, sp, #12
 8006c30:	9300      	str	r3, [sp, #0]
 8006c32:	462a      	mov	r2, r5
 8006c34:	4638      	mov	r0, r7
 8006c36:	4b0f      	ldr	r3, [pc, #60]	; (8006c74 <_svfiprintf_r+0x1f8>)
 8006c38:	a904      	add	r1, sp, #16
 8006c3a:	f7fe f815 	bl	8004c68 <_printf_float>
 8006c3e:	1c42      	adds	r2, r0, #1
 8006c40:	4606      	mov	r6, r0
 8006c42:	d1d6      	bne.n	8006bf2 <_svfiprintf_r+0x176>
 8006c44:	89ab      	ldrh	r3, [r5, #12]
 8006c46:	065b      	lsls	r3, r3, #25
 8006c48:	f53f af2c 	bmi.w	8006aa4 <_svfiprintf_r+0x28>
 8006c4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c4e:	b01d      	add	sp, #116	; 0x74
 8006c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c54:	ab03      	add	r3, sp, #12
 8006c56:	9300      	str	r3, [sp, #0]
 8006c58:	462a      	mov	r2, r5
 8006c5a:	4638      	mov	r0, r7
 8006c5c:	4b05      	ldr	r3, [pc, #20]	; (8006c74 <_svfiprintf_r+0x1f8>)
 8006c5e:	a904      	add	r1, sp, #16
 8006c60:	f7fe fa9e 	bl	80051a0 <_printf_i>
 8006c64:	e7eb      	b.n	8006c3e <_svfiprintf_r+0x1c2>
 8006c66:	bf00      	nop
 8006c68:	08007fec 	.word	0x08007fec
 8006c6c:	08007ff6 	.word	0x08007ff6
 8006c70:	08004c69 	.word	0x08004c69
 8006c74:	080069c5 	.word	0x080069c5
 8006c78:	08007ff2 	.word	0x08007ff2

08006c7c <_sbrk_r>:
 8006c7c:	b538      	push	{r3, r4, r5, lr}
 8006c7e:	2300      	movs	r3, #0
 8006c80:	4d05      	ldr	r5, [pc, #20]	; (8006c98 <_sbrk_r+0x1c>)
 8006c82:	4604      	mov	r4, r0
 8006c84:	4608      	mov	r0, r1
 8006c86:	602b      	str	r3, [r5, #0]
 8006c88:	f7fb fb70 	bl	800236c <_sbrk>
 8006c8c:	1c43      	adds	r3, r0, #1
 8006c8e:	d102      	bne.n	8006c96 <_sbrk_r+0x1a>
 8006c90:	682b      	ldr	r3, [r5, #0]
 8006c92:	b103      	cbz	r3, 8006c96 <_sbrk_r+0x1a>
 8006c94:	6023      	str	r3, [r4, #0]
 8006c96:	bd38      	pop	{r3, r4, r5, pc}
 8006c98:	200003b8 	.word	0x200003b8

08006c9c <__assert_func>:
 8006c9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006c9e:	4614      	mov	r4, r2
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	4b09      	ldr	r3, [pc, #36]	; (8006cc8 <__assert_func+0x2c>)
 8006ca4:	4605      	mov	r5, r0
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	68d8      	ldr	r0, [r3, #12]
 8006caa:	b14c      	cbz	r4, 8006cc0 <__assert_func+0x24>
 8006cac:	4b07      	ldr	r3, [pc, #28]	; (8006ccc <__assert_func+0x30>)
 8006cae:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006cb2:	9100      	str	r1, [sp, #0]
 8006cb4:	462b      	mov	r3, r5
 8006cb6:	4906      	ldr	r1, [pc, #24]	; (8006cd0 <__assert_func+0x34>)
 8006cb8:	f000 f80e 	bl	8006cd8 <fiprintf>
 8006cbc:	f000 faa2 	bl	8007204 <abort>
 8006cc0:	4b04      	ldr	r3, [pc, #16]	; (8006cd4 <__assert_func+0x38>)
 8006cc2:	461c      	mov	r4, r3
 8006cc4:	e7f3      	b.n	8006cae <__assert_func+0x12>
 8006cc6:	bf00      	nop
 8006cc8:	20000034 	.word	0x20000034
 8006ccc:	08007ffd 	.word	0x08007ffd
 8006cd0:	0800800a 	.word	0x0800800a
 8006cd4:	08008038 	.word	0x08008038

08006cd8 <fiprintf>:
 8006cd8:	b40e      	push	{r1, r2, r3}
 8006cda:	b503      	push	{r0, r1, lr}
 8006cdc:	4601      	mov	r1, r0
 8006cde:	ab03      	add	r3, sp, #12
 8006ce0:	4805      	ldr	r0, [pc, #20]	; (8006cf8 <fiprintf+0x20>)
 8006ce2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ce6:	6800      	ldr	r0, [r0, #0]
 8006ce8:	9301      	str	r3, [sp, #4]
 8006cea:	f000 f88d 	bl	8006e08 <_vfiprintf_r>
 8006cee:	b002      	add	sp, #8
 8006cf0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006cf4:	b003      	add	sp, #12
 8006cf6:	4770      	bx	lr
 8006cf8:	20000034 	.word	0x20000034

08006cfc <__ascii_mbtowc>:
 8006cfc:	b082      	sub	sp, #8
 8006cfe:	b901      	cbnz	r1, 8006d02 <__ascii_mbtowc+0x6>
 8006d00:	a901      	add	r1, sp, #4
 8006d02:	b142      	cbz	r2, 8006d16 <__ascii_mbtowc+0x1a>
 8006d04:	b14b      	cbz	r3, 8006d1a <__ascii_mbtowc+0x1e>
 8006d06:	7813      	ldrb	r3, [r2, #0]
 8006d08:	600b      	str	r3, [r1, #0]
 8006d0a:	7812      	ldrb	r2, [r2, #0]
 8006d0c:	1e10      	subs	r0, r2, #0
 8006d0e:	bf18      	it	ne
 8006d10:	2001      	movne	r0, #1
 8006d12:	b002      	add	sp, #8
 8006d14:	4770      	bx	lr
 8006d16:	4610      	mov	r0, r2
 8006d18:	e7fb      	b.n	8006d12 <__ascii_mbtowc+0x16>
 8006d1a:	f06f 0001 	mvn.w	r0, #1
 8006d1e:	e7f8      	b.n	8006d12 <__ascii_mbtowc+0x16>

08006d20 <memmove>:
 8006d20:	4288      	cmp	r0, r1
 8006d22:	b510      	push	{r4, lr}
 8006d24:	eb01 0402 	add.w	r4, r1, r2
 8006d28:	d902      	bls.n	8006d30 <memmove+0x10>
 8006d2a:	4284      	cmp	r4, r0
 8006d2c:	4623      	mov	r3, r4
 8006d2e:	d807      	bhi.n	8006d40 <memmove+0x20>
 8006d30:	1e43      	subs	r3, r0, #1
 8006d32:	42a1      	cmp	r1, r4
 8006d34:	d008      	beq.n	8006d48 <memmove+0x28>
 8006d36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006d3e:	e7f8      	b.n	8006d32 <memmove+0x12>
 8006d40:	4601      	mov	r1, r0
 8006d42:	4402      	add	r2, r0
 8006d44:	428a      	cmp	r2, r1
 8006d46:	d100      	bne.n	8006d4a <memmove+0x2a>
 8006d48:	bd10      	pop	{r4, pc}
 8006d4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006d4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006d52:	e7f7      	b.n	8006d44 <memmove+0x24>

08006d54 <__malloc_lock>:
 8006d54:	4801      	ldr	r0, [pc, #4]	; (8006d5c <__malloc_lock+0x8>)
 8006d56:	f000 bc15 	b.w	8007584 <__retarget_lock_acquire_recursive>
 8006d5a:	bf00      	nop
 8006d5c:	200003c0 	.word	0x200003c0

08006d60 <__malloc_unlock>:
 8006d60:	4801      	ldr	r0, [pc, #4]	; (8006d68 <__malloc_unlock+0x8>)
 8006d62:	f000 bc10 	b.w	8007586 <__retarget_lock_release_recursive>
 8006d66:	bf00      	nop
 8006d68:	200003c0 	.word	0x200003c0

08006d6c <_realloc_r>:
 8006d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d6e:	4607      	mov	r7, r0
 8006d70:	4614      	mov	r4, r2
 8006d72:	460e      	mov	r6, r1
 8006d74:	b921      	cbnz	r1, 8006d80 <_realloc_r+0x14>
 8006d76:	4611      	mov	r1, r2
 8006d78:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006d7c:	f7ff bdc8 	b.w	8006910 <_malloc_r>
 8006d80:	b922      	cbnz	r2, 8006d8c <_realloc_r+0x20>
 8006d82:	f7ff fd79 	bl	8006878 <_free_r>
 8006d86:	4625      	mov	r5, r4
 8006d88:	4628      	mov	r0, r5
 8006d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d8c:	f000 fc60 	bl	8007650 <_malloc_usable_size_r>
 8006d90:	42a0      	cmp	r0, r4
 8006d92:	d20f      	bcs.n	8006db4 <_realloc_r+0x48>
 8006d94:	4621      	mov	r1, r4
 8006d96:	4638      	mov	r0, r7
 8006d98:	f7ff fdba 	bl	8006910 <_malloc_r>
 8006d9c:	4605      	mov	r5, r0
 8006d9e:	2800      	cmp	r0, #0
 8006da0:	d0f2      	beq.n	8006d88 <_realloc_r+0x1c>
 8006da2:	4631      	mov	r1, r6
 8006da4:	4622      	mov	r2, r4
 8006da6:	f7fd feab 	bl	8004b00 <memcpy>
 8006daa:	4631      	mov	r1, r6
 8006dac:	4638      	mov	r0, r7
 8006dae:	f7ff fd63 	bl	8006878 <_free_r>
 8006db2:	e7e9      	b.n	8006d88 <_realloc_r+0x1c>
 8006db4:	4635      	mov	r5, r6
 8006db6:	e7e7      	b.n	8006d88 <_realloc_r+0x1c>

08006db8 <__sfputc_r>:
 8006db8:	6893      	ldr	r3, [r2, #8]
 8006dba:	b410      	push	{r4}
 8006dbc:	3b01      	subs	r3, #1
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	6093      	str	r3, [r2, #8]
 8006dc2:	da07      	bge.n	8006dd4 <__sfputc_r+0x1c>
 8006dc4:	6994      	ldr	r4, [r2, #24]
 8006dc6:	42a3      	cmp	r3, r4
 8006dc8:	db01      	blt.n	8006dce <__sfputc_r+0x16>
 8006dca:	290a      	cmp	r1, #10
 8006dcc:	d102      	bne.n	8006dd4 <__sfputc_r+0x1c>
 8006dce:	bc10      	pop	{r4}
 8006dd0:	f000 b94a 	b.w	8007068 <__swbuf_r>
 8006dd4:	6813      	ldr	r3, [r2, #0]
 8006dd6:	1c58      	adds	r0, r3, #1
 8006dd8:	6010      	str	r0, [r2, #0]
 8006dda:	7019      	strb	r1, [r3, #0]
 8006ddc:	4608      	mov	r0, r1
 8006dde:	bc10      	pop	{r4}
 8006de0:	4770      	bx	lr

08006de2 <__sfputs_r>:
 8006de2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006de4:	4606      	mov	r6, r0
 8006de6:	460f      	mov	r7, r1
 8006de8:	4614      	mov	r4, r2
 8006dea:	18d5      	adds	r5, r2, r3
 8006dec:	42ac      	cmp	r4, r5
 8006dee:	d101      	bne.n	8006df4 <__sfputs_r+0x12>
 8006df0:	2000      	movs	r0, #0
 8006df2:	e007      	b.n	8006e04 <__sfputs_r+0x22>
 8006df4:	463a      	mov	r2, r7
 8006df6:	4630      	mov	r0, r6
 8006df8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dfc:	f7ff ffdc 	bl	8006db8 <__sfputc_r>
 8006e00:	1c43      	adds	r3, r0, #1
 8006e02:	d1f3      	bne.n	8006dec <__sfputs_r+0xa>
 8006e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006e08 <_vfiprintf_r>:
 8006e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e0c:	460d      	mov	r5, r1
 8006e0e:	4614      	mov	r4, r2
 8006e10:	4698      	mov	r8, r3
 8006e12:	4606      	mov	r6, r0
 8006e14:	b09d      	sub	sp, #116	; 0x74
 8006e16:	b118      	cbz	r0, 8006e20 <_vfiprintf_r+0x18>
 8006e18:	6983      	ldr	r3, [r0, #24]
 8006e1a:	b90b      	cbnz	r3, 8006e20 <_vfiprintf_r+0x18>
 8006e1c:	f000 fb14 	bl	8007448 <__sinit>
 8006e20:	4b89      	ldr	r3, [pc, #548]	; (8007048 <_vfiprintf_r+0x240>)
 8006e22:	429d      	cmp	r5, r3
 8006e24:	d11b      	bne.n	8006e5e <_vfiprintf_r+0x56>
 8006e26:	6875      	ldr	r5, [r6, #4]
 8006e28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e2a:	07d9      	lsls	r1, r3, #31
 8006e2c:	d405      	bmi.n	8006e3a <_vfiprintf_r+0x32>
 8006e2e:	89ab      	ldrh	r3, [r5, #12]
 8006e30:	059a      	lsls	r2, r3, #22
 8006e32:	d402      	bmi.n	8006e3a <_vfiprintf_r+0x32>
 8006e34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e36:	f000 fba5 	bl	8007584 <__retarget_lock_acquire_recursive>
 8006e3a:	89ab      	ldrh	r3, [r5, #12]
 8006e3c:	071b      	lsls	r3, r3, #28
 8006e3e:	d501      	bpl.n	8006e44 <_vfiprintf_r+0x3c>
 8006e40:	692b      	ldr	r3, [r5, #16]
 8006e42:	b9eb      	cbnz	r3, 8006e80 <_vfiprintf_r+0x78>
 8006e44:	4629      	mov	r1, r5
 8006e46:	4630      	mov	r0, r6
 8006e48:	f000 f96e 	bl	8007128 <__swsetup_r>
 8006e4c:	b1c0      	cbz	r0, 8006e80 <_vfiprintf_r+0x78>
 8006e4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e50:	07dc      	lsls	r4, r3, #31
 8006e52:	d50e      	bpl.n	8006e72 <_vfiprintf_r+0x6a>
 8006e54:	f04f 30ff 	mov.w	r0, #4294967295
 8006e58:	b01d      	add	sp, #116	; 0x74
 8006e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e5e:	4b7b      	ldr	r3, [pc, #492]	; (800704c <_vfiprintf_r+0x244>)
 8006e60:	429d      	cmp	r5, r3
 8006e62:	d101      	bne.n	8006e68 <_vfiprintf_r+0x60>
 8006e64:	68b5      	ldr	r5, [r6, #8]
 8006e66:	e7df      	b.n	8006e28 <_vfiprintf_r+0x20>
 8006e68:	4b79      	ldr	r3, [pc, #484]	; (8007050 <_vfiprintf_r+0x248>)
 8006e6a:	429d      	cmp	r5, r3
 8006e6c:	bf08      	it	eq
 8006e6e:	68f5      	ldreq	r5, [r6, #12]
 8006e70:	e7da      	b.n	8006e28 <_vfiprintf_r+0x20>
 8006e72:	89ab      	ldrh	r3, [r5, #12]
 8006e74:	0598      	lsls	r0, r3, #22
 8006e76:	d4ed      	bmi.n	8006e54 <_vfiprintf_r+0x4c>
 8006e78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e7a:	f000 fb84 	bl	8007586 <__retarget_lock_release_recursive>
 8006e7e:	e7e9      	b.n	8006e54 <_vfiprintf_r+0x4c>
 8006e80:	2300      	movs	r3, #0
 8006e82:	9309      	str	r3, [sp, #36]	; 0x24
 8006e84:	2320      	movs	r3, #32
 8006e86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e8a:	2330      	movs	r3, #48	; 0x30
 8006e8c:	f04f 0901 	mov.w	r9, #1
 8006e90:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e94:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007054 <_vfiprintf_r+0x24c>
 8006e98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e9c:	4623      	mov	r3, r4
 8006e9e:	469a      	mov	sl, r3
 8006ea0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ea4:	b10a      	cbz	r2, 8006eaa <_vfiprintf_r+0xa2>
 8006ea6:	2a25      	cmp	r2, #37	; 0x25
 8006ea8:	d1f9      	bne.n	8006e9e <_vfiprintf_r+0x96>
 8006eaa:	ebba 0b04 	subs.w	fp, sl, r4
 8006eae:	d00b      	beq.n	8006ec8 <_vfiprintf_r+0xc0>
 8006eb0:	465b      	mov	r3, fp
 8006eb2:	4622      	mov	r2, r4
 8006eb4:	4629      	mov	r1, r5
 8006eb6:	4630      	mov	r0, r6
 8006eb8:	f7ff ff93 	bl	8006de2 <__sfputs_r>
 8006ebc:	3001      	adds	r0, #1
 8006ebe:	f000 80aa 	beq.w	8007016 <_vfiprintf_r+0x20e>
 8006ec2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ec4:	445a      	add	r2, fp
 8006ec6:	9209      	str	r2, [sp, #36]	; 0x24
 8006ec8:	f89a 3000 	ldrb.w	r3, [sl]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	f000 80a2 	beq.w	8007016 <_vfiprintf_r+0x20e>
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ed8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006edc:	f10a 0a01 	add.w	sl, sl, #1
 8006ee0:	9304      	str	r3, [sp, #16]
 8006ee2:	9307      	str	r3, [sp, #28]
 8006ee4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ee8:	931a      	str	r3, [sp, #104]	; 0x68
 8006eea:	4654      	mov	r4, sl
 8006eec:	2205      	movs	r2, #5
 8006eee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ef2:	4858      	ldr	r0, [pc, #352]	; (8007054 <_vfiprintf_r+0x24c>)
 8006ef4:	f7ff f922 	bl	800613c <memchr>
 8006ef8:	9a04      	ldr	r2, [sp, #16]
 8006efa:	b9d8      	cbnz	r0, 8006f34 <_vfiprintf_r+0x12c>
 8006efc:	06d1      	lsls	r1, r2, #27
 8006efe:	bf44      	itt	mi
 8006f00:	2320      	movmi	r3, #32
 8006f02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f06:	0713      	lsls	r3, r2, #28
 8006f08:	bf44      	itt	mi
 8006f0a:	232b      	movmi	r3, #43	; 0x2b
 8006f0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f10:	f89a 3000 	ldrb.w	r3, [sl]
 8006f14:	2b2a      	cmp	r3, #42	; 0x2a
 8006f16:	d015      	beq.n	8006f44 <_vfiprintf_r+0x13c>
 8006f18:	4654      	mov	r4, sl
 8006f1a:	2000      	movs	r0, #0
 8006f1c:	f04f 0c0a 	mov.w	ip, #10
 8006f20:	9a07      	ldr	r2, [sp, #28]
 8006f22:	4621      	mov	r1, r4
 8006f24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f28:	3b30      	subs	r3, #48	; 0x30
 8006f2a:	2b09      	cmp	r3, #9
 8006f2c:	d94e      	bls.n	8006fcc <_vfiprintf_r+0x1c4>
 8006f2e:	b1b0      	cbz	r0, 8006f5e <_vfiprintf_r+0x156>
 8006f30:	9207      	str	r2, [sp, #28]
 8006f32:	e014      	b.n	8006f5e <_vfiprintf_r+0x156>
 8006f34:	eba0 0308 	sub.w	r3, r0, r8
 8006f38:	fa09 f303 	lsl.w	r3, r9, r3
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	46a2      	mov	sl, r4
 8006f40:	9304      	str	r3, [sp, #16]
 8006f42:	e7d2      	b.n	8006eea <_vfiprintf_r+0xe2>
 8006f44:	9b03      	ldr	r3, [sp, #12]
 8006f46:	1d19      	adds	r1, r3, #4
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	9103      	str	r1, [sp, #12]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	bfbb      	ittet	lt
 8006f50:	425b      	neglt	r3, r3
 8006f52:	f042 0202 	orrlt.w	r2, r2, #2
 8006f56:	9307      	strge	r3, [sp, #28]
 8006f58:	9307      	strlt	r3, [sp, #28]
 8006f5a:	bfb8      	it	lt
 8006f5c:	9204      	strlt	r2, [sp, #16]
 8006f5e:	7823      	ldrb	r3, [r4, #0]
 8006f60:	2b2e      	cmp	r3, #46	; 0x2e
 8006f62:	d10c      	bne.n	8006f7e <_vfiprintf_r+0x176>
 8006f64:	7863      	ldrb	r3, [r4, #1]
 8006f66:	2b2a      	cmp	r3, #42	; 0x2a
 8006f68:	d135      	bne.n	8006fd6 <_vfiprintf_r+0x1ce>
 8006f6a:	9b03      	ldr	r3, [sp, #12]
 8006f6c:	3402      	adds	r4, #2
 8006f6e:	1d1a      	adds	r2, r3, #4
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	9203      	str	r2, [sp, #12]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	bfb8      	it	lt
 8006f78:	f04f 33ff 	movlt.w	r3, #4294967295
 8006f7c:	9305      	str	r3, [sp, #20]
 8006f7e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007064 <_vfiprintf_r+0x25c>
 8006f82:	2203      	movs	r2, #3
 8006f84:	4650      	mov	r0, sl
 8006f86:	7821      	ldrb	r1, [r4, #0]
 8006f88:	f7ff f8d8 	bl	800613c <memchr>
 8006f8c:	b140      	cbz	r0, 8006fa0 <_vfiprintf_r+0x198>
 8006f8e:	2340      	movs	r3, #64	; 0x40
 8006f90:	eba0 000a 	sub.w	r0, r0, sl
 8006f94:	fa03 f000 	lsl.w	r0, r3, r0
 8006f98:	9b04      	ldr	r3, [sp, #16]
 8006f9a:	3401      	adds	r4, #1
 8006f9c:	4303      	orrs	r3, r0
 8006f9e:	9304      	str	r3, [sp, #16]
 8006fa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fa4:	2206      	movs	r2, #6
 8006fa6:	482c      	ldr	r0, [pc, #176]	; (8007058 <_vfiprintf_r+0x250>)
 8006fa8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006fac:	f7ff f8c6 	bl	800613c <memchr>
 8006fb0:	2800      	cmp	r0, #0
 8006fb2:	d03f      	beq.n	8007034 <_vfiprintf_r+0x22c>
 8006fb4:	4b29      	ldr	r3, [pc, #164]	; (800705c <_vfiprintf_r+0x254>)
 8006fb6:	bb1b      	cbnz	r3, 8007000 <_vfiprintf_r+0x1f8>
 8006fb8:	9b03      	ldr	r3, [sp, #12]
 8006fba:	3307      	adds	r3, #7
 8006fbc:	f023 0307 	bic.w	r3, r3, #7
 8006fc0:	3308      	adds	r3, #8
 8006fc2:	9303      	str	r3, [sp, #12]
 8006fc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fc6:	443b      	add	r3, r7
 8006fc8:	9309      	str	r3, [sp, #36]	; 0x24
 8006fca:	e767      	b.n	8006e9c <_vfiprintf_r+0x94>
 8006fcc:	460c      	mov	r4, r1
 8006fce:	2001      	movs	r0, #1
 8006fd0:	fb0c 3202 	mla	r2, ip, r2, r3
 8006fd4:	e7a5      	b.n	8006f22 <_vfiprintf_r+0x11a>
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	f04f 0c0a 	mov.w	ip, #10
 8006fdc:	4619      	mov	r1, r3
 8006fde:	3401      	adds	r4, #1
 8006fe0:	9305      	str	r3, [sp, #20]
 8006fe2:	4620      	mov	r0, r4
 8006fe4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006fe8:	3a30      	subs	r2, #48	; 0x30
 8006fea:	2a09      	cmp	r2, #9
 8006fec:	d903      	bls.n	8006ff6 <_vfiprintf_r+0x1ee>
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d0c5      	beq.n	8006f7e <_vfiprintf_r+0x176>
 8006ff2:	9105      	str	r1, [sp, #20]
 8006ff4:	e7c3      	b.n	8006f7e <_vfiprintf_r+0x176>
 8006ff6:	4604      	mov	r4, r0
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ffe:	e7f0      	b.n	8006fe2 <_vfiprintf_r+0x1da>
 8007000:	ab03      	add	r3, sp, #12
 8007002:	9300      	str	r3, [sp, #0]
 8007004:	462a      	mov	r2, r5
 8007006:	4630      	mov	r0, r6
 8007008:	4b15      	ldr	r3, [pc, #84]	; (8007060 <_vfiprintf_r+0x258>)
 800700a:	a904      	add	r1, sp, #16
 800700c:	f7fd fe2c 	bl	8004c68 <_printf_float>
 8007010:	4607      	mov	r7, r0
 8007012:	1c78      	adds	r0, r7, #1
 8007014:	d1d6      	bne.n	8006fc4 <_vfiprintf_r+0x1bc>
 8007016:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007018:	07d9      	lsls	r1, r3, #31
 800701a:	d405      	bmi.n	8007028 <_vfiprintf_r+0x220>
 800701c:	89ab      	ldrh	r3, [r5, #12]
 800701e:	059a      	lsls	r2, r3, #22
 8007020:	d402      	bmi.n	8007028 <_vfiprintf_r+0x220>
 8007022:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007024:	f000 faaf 	bl	8007586 <__retarget_lock_release_recursive>
 8007028:	89ab      	ldrh	r3, [r5, #12]
 800702a:	065b      	lsls	r3, r3, #25
 800702c:	f53f af12 	bmi.w	8006e54 <_vfiprintf_r+0x4c>
 8007030:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007032:	e711      	b.n	8006e58 <_vfiprintf_r+0x50>
 8007034:	ab03      	add	r3, sp, #12
 8007036:	9300      	str	r3, [sp, #0]
 8007038:	462a      	mov	r2, r5
 800703a:	4630      	mov	r0, r6
 800703c:	4b08      	ldr	r3, [pc, #32]	; (8007060 <_vfiprintf_r+0x258>)
 800703e:	a904      	add	r1, sp, #16
 8007040:	f7fe f8ae 	bl	80051a0 <_printf_i>
 8007044:	e7e4      	b.n	8007010 <_vfiprintf_r+0x208>
 8007046:	bf00      	nop
 8007048:	08008164 	.word	0x08008164
 800704c:	08008184 	.word	0x08008184
 8007050:	08008144 	.word	0x08008144
 8007054:	08007fec 	.word	0x08007fec
 8007058:	08007ff6 	.word	0x08007ff6
 800705c:	08004c69 	.word	0x08004c69
 8007060:	08006de3 	.word	0x08006de3
 8007064:	08007ff2 	.word	0x08007ff2

08007068 <__swbuf_r>:
 8007068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800706a:	460e      	mov	r6, r1
 800706c:	4614      	mov	r4, r2
 800706e:	4605      	mov	r5, r0
 8007070:	b118      	cbz	r0, 800707a <__swbuf_r+0x12>
 8007072:	6983      	ldr	r3, [r0, #24]
 8007074:	b90b      	cbnz	r3, 800707a <__swbuf_r+0x12>
 8007076:	f000 f9e7 	bl	8007448 <__sinit>
 800707a:	4b21      	ldr	r3, [pc, #132]	; (8007100 <__swbuf_r+0x98>)
 800707c:	429c      	cmp	r4, r3
 800707e:	d12b      	bne.n	80070d8 <__swbuf_r+0x70>
 8007080:	686c      	ldr	r4, [r5, #4]
 8007082:	69a3      	ldr	r3, [r4, #24]
 8007084:	60a3      	str	r3, [r4, #8]
 8007086:	89a3      	ldrh	r3, [r4, #12]
 8007088:	071a      	lsls	r2, r3, #28
 800708a:	d52f      	bpl.n	80070ec <__swbuf_r+0x84>
 800708c:	6923      	ldr	r3, [r4, #16]
 800708e:	b36b      	cbz	r3, 80070ec <__swbuf_r+0x84>
 8007090:	6923      	ldr	r3, [r4, #16]
 8007092:	6820      	ldr	r0, [r4, #0]
 8007094:	b2f6      	uxtb	r6, r6
 8007096:	1ac0      	subs	r0, r0, r3
 8007098:	6963      	ldr	r3, [r4, #20]
 800709a:	4637      	mov	r7, r6
 800709c:	4283      	cmp	r3, r0
 800709e:	dc04      	bgt.n	80070aa <__swbuf_r+0x42>
 80070a0:	4621      	mov	r1, r4
 80070a2:	4628      	mov	r0, r5
 80070a4:	f000 f93c 	bl	8007320 <_fflush_r>
 80070a8:	bb30      	cbnz	r0, 80070f8 <__swbuf_r+0x90>
 80070aa:	68a3      	ldr	r3, [r4, #8]
 80070ac:	3001      	adds	r0, #1
 80070ae:	3b01      	subs	r3, #1
 80070b0:	60a3      	str	r3, [r4, #8]
 80070b2:	6823      	ldr	r3, [r4, #0]
 80070b4:	1c5a      	adds	r2, r3, #1
 80070b6:	6022      	str	r2, [r4, #0]
 80070b8:	701e      	strb	r6, [r3, #0]
 80070ba:	6963      	ldr	r3, [r4, #20]
 80070bc:	4283      	cmp	r3, r0
 80070be:	d004      	beq.n	80070ca <__swbuf_r+0x62>
 80070c0:	89a3      	ldrh	r3, [r4, #12]
 80070c2:	07db      	lsls	r3, r3, #31
 80070c4:	d506      	bpl.n	80070d4 <__swbuf_r+0x6c>
 80070c6:	2e0a      	cmp	r6, #10
 80070c8:	d104      	bne.n	80070d4 <__swbuf_r+0x6c>
 80070ca:	4621      	mov	r1, r4
 80070cc:	4628      	mov	r0, r5
 80070ce:	f000 f927 	bl	8007320 <_fflush_r>
 80070d2:	b988      	cbnz	r0, 80070f8 <__swbuf_r+0x90>
 80070d4:	4638      	mov	r0, r7
 80070d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070d8:	4b0a      	ldr	r3, [pc, #40]	; (8007104 <__swbuf_r+0x9c>)
 80070da:	429c      	cmp	r4, r3
 80070dc:	d101      	bne.n	80070e2 <__swbuf_r+0x7a>
 80070de:	68ac      	ldr	r4, [r5, #8]
 80070e0:	e7cf      	b.n	8007082 <__swbuf_r+0x1a>
 80070e2:	4b09      	ldr	r3, [pc, #36]	; (8007108 <__swbuf_r+0xa0>)
 80070e4:	429c      	cmp	r4, r3
 80070e6:	bf08      	it	eq
 80070e8:	68ec      	ldreq	r4, [r5, #12]
 80070ea:	e7ca      	b.n	8007082 <__swbuf_r+0x1a>
 80070ec:	4621      	mov	r1, r4
 80070ee:	4628      	mov	r0, r5
 80070f0:	f000 f81a 	bl	8007128 <__swsetup_r>
 80070f4:	2800      	cmp	r0, #0
 80070f6:	d0cb      	beq.n	8007090 <__swbuf_r+0x28>
 80070f8:	f04f 37ff 	mov.w	r7, #4294967295
 80070fc:	e7ea      	b.n	80070d4 <__swbuf_r+0x6c>
 80070fe:	bf00      	nop
 8007100:	08008164 	.word	0x08008164
 8007104:	08008184 	.word	0x08008184
 8007108:	08008144 	.word	0x08008144

0800710c <__ascii_wctomb>:
 800710c:	4603      	mov	r3, r0
 800710e:	4608      	mov	r0, r1
 8007110:	b141      	cbz	r1, 8007124 <__ascii_wctomb+0x18>
 8007112:	2aff      	cmp	r2, #255	; 0xff
 8007114:	d904      	bls.n	8007120 <__ascii_wctomb+0x14>
 8007116:	228a      	movs	r2, #138	; 0x8a
 8007118:	f04f 30ff 	mov.w	r0, #4294967295
 800711c:	601a      	str	r2, [r3, #0]
 800711e:	4770      	bx	lr
 8007120:	2001      	movs	r0, #1
 8007122:	700a      	strb	r2, [r1, #0]
 8007124:	4770      	bx	lr
	...

08007128 <__swsetup_r>:
 8007128:	4b32      	ldr	r3, [pc, #200]	; (80071f4 <__swsetup_r+0xcc>)
 800712a:	b570      	push	{r4, r5, r6, lr}
 800712c:	681d      	ldr	r5, [r3, #0]
 800712e:	4606      	mov	r6, r0
 8007130:	460c      	mov	r4, r1
 8007132:	b125      	cbz	r5, 800713e <__swsetup_r+0x16>
 8007134:	69ab      	ldr	r3, [r5, #24]
 8007136:	b913      	cbnz	r3, 800713e <__swsetup_r+0x16>
 8007138:	4628      	mov	r0, r5
 800713a:	f000 f985 	bl	8007448 <__sinit>
 800713e:	4b2e      	ldr	r3, [pc, #184]	; (80071f8 <__swsetup_r+0xd0>)
 8007140:	429c      	cmp	r4, r3
 8007142:	d10f      	bne.n	8007164 <__swsetup_r+0x3c>
 8007144:	686c      	ldr	r4, [r5, #4]
 8007146:	89a3      	ldrh	r3, [r4, #12]
 8007148:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800714c:	0719      	lsls	r1, r3, #28
 800714e:	d42c      	bmi.n	80071aa <__swsetup_r+0x82>
 8007150:	06dd      	lsls	r5, r3, #27
 8007152:	d411      	bmi.n	8007178 <__swsetup_r+0x50>
 8007154:	2309      	movs	r3, #9
 8007156:	6033      	str	r3, [r6, #0]
 8007158:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800715c:	f04f 30ff 	mov.w	r0, #4294967295
 8007160:	81a3      	strh	r3, [r4, #12]
 8007162:	e03e      	b.n	80071e2 <__swsetup_r+0xba>
 8007164:	4b25      	ldr	r3, [pc, #148]	; (80071fc <__swsetup_r+0xd4>)
 8007166:	429c      	cmp	r4, r3
 8007168:	d101      	bne.n	800716e <__swsetup_r+0x46>
 800716a:	68ac      	ldr	r4, [r5, #8]
 800716c:	e7eb      	b.n	8007146 <__swsetup_r+0x1e>
 800716e:	4b24      	ldr	r3, [pc, #144]	; (8007200 <__swsetup_r+0xd8>)
 8007170:	429c      	cmp	r4, r3
 8007172:	bf08      	it	eq
 8007174:	68ec      	ldreq	r4, [r5, #12]
 8007176:	e7e6      	b.n	8007146 <__swsetup_r+0x1e>
 8007178:	0758      	lsls	r0, r3, #29
 800717a:	d512      	bpl.n	80071a2 <__swsetup_r+0x7a>
 800717c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800717e:	b141      	cbz	r1, 8007192 <__swsetup_r+0x6a>
 8007180:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007184:	4299      	cmp	r1, r3
 8007186:	d002      	beq.n	800718e <__swsetup_r+0x66>
 8007188:	4630      	mov	r0, r6
 800718a:	f7ff fb75 	bl	8006878 <_free_r>
 800718e:	2300      	movs	r3, #0
 8007190:	6363      	str	r3, [r4, #52]	; 0x34
 8007192:	89a3      	ldrh	r3, [r4, #12]
 8007194:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007198:	81a3      	strh	r3, [r4, #12]
 800719a:	2300      	movs	r3, #0
 800719c:	6063      	str	r3, [r4, #4]
 800719e:	6923      	ldr	r3, [r4, #16]
 80071a0:	6023      	str	r3, [r4, #0]
 80071a2:	89a3      	ldrh	r3, [r4, #12]
 80071a4:	f043 0308 	orr.w	r3, r3, #8
 80071a8:	81a3      	strh	r3, [r4, #12]
 80071aa:	6923      	ldr	r3, [r4, #16]
 80071ac:	b94b      	cbnz	r3, 80071c2 <__swsetup_r+0x9a>
 80071ae:	89a3      	ldrh	r3, [r4, #12]
 80071b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80071b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071b8:	d003      	beq.n	80071c2 <__swsetup_r+0x9a>
 80071ba:	4621      	mov	r1, r4
 80071bc:	4630      	mov	r0, r6
 80071be:	f000 fa07 	bl	80075d0 <__smakebuf_r>
 80071c2:	89a0      	ldrh	r0, [r4, #12]
 80071c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80071c8:	f010 0301 	ands.w	r3, r0, #1
 80071cc:	d00a      	beq.n	80071e4 <__swsetup_r+0xbc>
 80071ce:	2300      	movs	r3, #0
 80071d0:	60a3      	str	r3, [r4, #8]
 80071d2:	6963      	ldr	r3, [r4, #20]
 80071d4:	425b      	negs	r3, r3
 80071d6:	61a3      	str	r3, [r4, #24]
 80071d8:	6923      	ldr	r3, [r4, #16]
 80071da:	b943      	cbnz	r3, 80071ee <__swsetup_r+0xc6>
 80071dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80071e0:	d1ba      	bne.n	8007158 <__swsetup_r+0x30>
 80071e2:	bd70      	pop	{r4, r5, r6, pc}
 80071e4:	0781      	lsls	r1, r0, #30
 80071e6:	bf58      	it	pl
 80071e8:	6963      	ldrpl	r3, [r4, #20]
 80071ea:	60a3      	str	r3, [r4, #8]
 80071ec:	e7f4      	b.n	80071d8 <__swsetup_r+0xb0>
 80071ee:	2000      	movs	r0, #0
 80071f0:	e7f7      	b.n	80071e2 <__swsetup_r+0xba>
 80071f2:	bf00      	nop
 80071f4:	20000034 	.word	0x20000034
 80071f8:	08008164 	.word	0x08008164
 80071fc:	08008184 	.word	0x08008184
 8007200:	08008144 	.word	0x08008144

08007204 <abort>:
 8007204:	2006      	movs	r0, #6
 8007206:	b508      	push	{r3, lr}
 8007208:	f000 fa52 	bl	80076b0 <raise>
 800720c:	2001      	movs	r0, #1
 800720e:	f7fb f83a 	bl	8002286 <_exit>
	...

08007214 <__sflush_r>:
 8007214:	898a      	ldrh	r2, [r1, #12]
 8007216:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800721a:	4605      	mov	r5, r0
 800721c:	0710      	lsls	r0, r2, #28
 800721e:	460c      	mov	r4, r1
 8007220:	d458      	bmi.n	80072d4 <__sflush_r+0xc0>
 8007222:	684b      	ldr	r3, [r1, #4]
 8007224:	2b00      	cmp	r3, #0
 8007226:	dc05      	bgt.n	8007234 <__sflush_r+0x20>
 8007228:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800722a:	2b00      	cmp	r3, #0
 800722c:	dc02      	bgt.n	8007234 <__sflush_r+0x20>
 800722e:	2000      	movs	r0, #0
 8007230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007234:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007236:	2e00      	cmp	r6, #0
 8007238:	d0f9      	beq.n	800722e <__sflush_r+0x1a>
 800723a:	2300      	movs	r3, #0
 800723c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007240:	682f      	ldr	r7, [r5, #0]
 8007242:	602b      	str	r3, [r5, #0]
 8007244:	d032      	beq.n	80072ac <__sflush_r+0x98>
 8007246:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007248:	89a3      	ldrh	r3, [r4, #12]
 800724a:	075a      	lsls	r2, r3, #29
 800724c:	d505      	bpl.n	800725a <__sflush_r+0x46>
 800724e:	6863      	ldr	r3, [r4, #4]
 8007250:	1ac0      	subs	r0, r0, r3
 8007252:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007254:	b10b      	cbz	r3, 800725a <__sflush_r+0x46>
 8007256:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007258:	1ac0      	subs	r0, r0, r3
 800725a:	2300      	movs	r3, #0
 800725c:	4602      	mov	r2, r0
 800725e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007260:	4628      	mov	r0, r5
 8007262:	6a21      	ldr	r1, [r4, #32]
 8007264:	47b0      	blx	r6
 8007266:	1c43      	adds	r3, r0, #1
 8007268:	89a3      	ldrh	r3, [r4, #12]
 800726a:	d106      	bne.n	800727a <__sflush_r+0x66>
 800726c:	6829      	ldr	r1, [r5, #0]
 800726e:	291d      	cmp	r1, #29
 8007270:	d82c      	bhi.n	80072cc <__sflush_r+0xb8>
 8007272:	4a2a      	ldr	r2, [pc, #168]	; (800731c <__sflush_r+0x108>)
 8007274:	40ca      	lsrs	r2, r1
 8007276:	07d6      	lsls	r6, r2, #31
 8007278:	d528      	bpl.n	80072cc <__sflush_r+0xb8>
 800727a:	2200      	movs	r2, #0
 800727c:	6062      	str	r2, [r4, #4]
 800727e:	6922      	ldr	r2, [r4, #16]
 8007280:	04d9      	lsls	r1, r3, #19
 8007282:	6022      	str	r2, [r4, #0]
 8007284:	d504      	bpl.n	8007290 <__sflush_r+0x7c>
 8007286:	1c42      	adds	r2, r0, #1
 8007288:	d101      	bne.n	800728e <__sflush_r+0x7a>
 800728a:	682b      	ldr	r3, [r5, #0]
 800728c:	b903      	cbnz	r3, 8007290 <__sflush_r+0x7c>
 800728e:	6560      	str	r0, [r4, #84]	; 0x54
 8007290:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007292:	602f      	str	r7, [r5, #0]
 8007294:	2900      	cmp	r1, #0
 8007296:	d0ca      	beq.n	800722e <__sflush_r+0x1a>
 8007298:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800729c:	4299      	cmp	r1, r3
 800729e:	d002      	beq.n	80072a6 <__sflush_r+0x92>
 80072a0:	4628      	mov	r0, r5
 80072a2:	f7ff fae9 	bl	8006878 <_free_r>
 80072a6:	2000      	movs	r0, #0
 80072a8:	6360      	str	r0, [r4, #52]	; 0x34
 80072aa:	e7c1      	b.n	8007230 <__sflush_r+0x1c>
 80072ac:	6a21      	ldr	r1, [r4, #32]
 80072ae:	2301      	movs	r3, #1
 80072b0:	4628      	mov	r0, r5
 80072b2:	47b0      	blx	r6
 80072b4:	1c41      	adds	r1, r0, #1
 80072b6:	d1c7      	bne.n	8007248 <__sflush_r+0x34>
 80072b8:	682b      	ldr	r3, [r5, #0]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d0c4      	beq.n	8007248 <__sflush_r+0x34>
 80072be:	2b1d      	cmp	r3, #29
 80072c0:	d001      	beq.n	80072c6 <__sflush_r+0xb2>
 80072c2:	2b16      	cmp	r3, #22
 80072c4:	d101      	bne.n	80072ca <__sflush_r+0xb6>
 80072c6:	602f      	str	r7, [r5, #0]
 80072c8:	e7b1      	b.n	800722e <__sflush_r+0x1a>
 80072ca:	89a3      	ldrh	r3, [r4, #12]
 80072cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072d0:	81a3      	strh	r3, [r4, #12]
 80072d2:	e7ad      	b.n	8007230 <__sflush_r+0x1c>
 80072d4:	690f      	ldr	r7, [r1, #16]
 80072d6:	2f00      	cmp	r7, #0
 80072d8:	d0a9      	beq.n	800722e <__sflush_r+0x1a>
 80072da:	0793      	lsls	r3, r2, #30
 80072dc:	bf18      	it	ne
 80072de:	2300      	movne	r3, #0
 80072e0:	680e      	ldr	r6, [r1, #0]
 80072e2:	bf08      	it	eq
 80072e4:	694b      	ldreq	r3, [r1, #20]
 80072e6:	eba6 0807 	sub.w	r8, r6, r7
 80072ea:	600f      	str	r7, [r1, #0]
 80072ec:	608b      	str	r3, [r1, #8]
 80072ee:	f1b8 0f00 	cmp.w	r8, #0
 80072f2:	dd9c      	ble.n	800722e <__sflush_r+0x1a>
 80072f4:	4643      	mov	r3, r8
 80072f6:	463a      	mov	r2, r7
 80072f8:	4628      	mov	r0, r5
 80072fa:	6a21      	ldr	r1, [r4, #32]
 80072fc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80072fe:	47b0      	blx	r6
 8007300:	2800      	cmp	r0, #0
 8007302:	dc06      	bgt.n	8007312 <__sflush_r+0xfe>
 8007304:	89a3      	ldrh	r3, [r4, #12]
 8007306:	f04f 30ff 	mov.w	r0, #4294967295
 800730a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800730e:	81a3      	strh	r3, [r4, #12]
 8007310:	e78e      	b.n	8007230 <__sflush_r+0x1c>
 8007312:	4407      	add	r7, r0
 8007314:	eba8 0800 	sub.w	r8, r8, r0
 8007318:	e7e9      	b.n	80072ee <__sflush_r+0xda>
 800731a:	bf00      	nop
 800731c:	20400001 	.word	0x20400001

08007320 <_fflush_r>:
 8007320:	b538      	push	{r3, r4, r5, lr}
 8007322:	690b      	ldr	r3, [r1, #16]
 8007324:	4605      	mov	r5, r0
 8007326:	460c      	mov	r4, r1
 8007328:	b913      	cbnz	r3, 8007330 <_fflush_r+0x10>
 800732a:	2500      	movs	r5, #0
 800732c:	4628      	mov	r0, r5
 800732e:	bd38      	pop	{r3, r4, r5, pc}
 8007330:	b118      	cbz	r0, 800733a <_fflush_r+0x1a>
 8007332:	6983      	ldr	r3, [r0, #24]
 8007334:	b90b      	cbnz	r3, 800733a <_fflush_r+0x1a>
 8007336:	f000 f887 	bl	8007448 <__sinit>
 800733a:	4b14      	ldr	r3, [pc, #80]	; (800738c <_fflush_r+0x6c>)
 800733c:	429c      	cmp	r4, r3
 800733e:	d11b      	bne.n	8007378 <_fflush_r+0x58>
 8007340:	686c      	ldr	r4, [r5, #4]
 8007342:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d0ef      	beq.n	800732a <_fflush_r+0xa>
 800734a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800734c:	07d0      	lsls	r0, r2, #31
 800734e:	d404      	bmi.n	800735a <_fflush_r+0x3a>
 8007350:	0599      	lsls	r1, r3, #22
 8007352:	d402      	bmi.n	800735a <_fflush_r+0x3a>
 8007354:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007356:	f000 f915 	bl	8007584 <__retarget_lock_acquire_recursive>
 800735a:	4628      	mov	r0, r5
 800735c:	4621      	mov	r1, r4
 800735e:	f7ff ff59 	bl	8007214 <__sflush_r>
 8007362:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007364:	4605      	mov	r5, r0
 8007366:	07da      	lsls	r2, r3, #31
 8007368:	d4e0      	bmi.n	800732c <_fflush_r+0xc>
 800736a:	89a3      	ldrh	r3, [r4, #12]
 800736c:	059b      	lsls	r3, r3, #22
 800736e:	d4dd      	bmi.n	800732c <_fflush_r+0xc>
 8007370:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007372:	f000 f908 	bl	8007586 <__retarget_lock_release_recursive>
 8007376:	e7d9      	b.n	800732c <_fflush_r+0xc>
 8007378:	4b05      	ldr	r3, [pc, #20]	; (8007390 <_fflush_r+0x70>)
 800737a:	429c      	cmp	r4, r3
 800737c:	d101      	bne.n	8007382 <_fflush_r+0x62>
 800737e:	68ac      	ldr	r4, [r5, #8]
 8007380:	e7df      	b.n	8007342 <_fflush_r+0x22>
 8007382:	4b04      	ldr	r3, [pc, #16]	; (8007394 <_fflush_r+0x74>)
 8007384:	429c      	cmp	r4, r3
 8007386:	bf08      	it	eq
 8007388:	68ec      	ldreq	r4, [r5, #12]
 800738a:	e7da      	b.n	8007342 <_fflush_r+0x22>
 800738c:	08008164 	.word	0x08008164
 8007390:	08008184 	.word	0x08008184
 8007394:	08008144 	.word	0x08008144

08007398 <std>:
 8007398:	2300      	movs	r3, #0
 800739a:	b510      	push	{r4, lr}
 800739c:	4604      	mov	r4, r0
 800739e:	e9c0 3300 	strd	r3, r3, [r0]
 80073a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80073a6:	6083      	str	r3, [r0, #8]
 80073a8:	8181      	strh	r1, [r0, #12]
 80073aa:	6643      	str	r3, [r0, #100]	; 0x64
 80073ac:	81c2      	strh	r2, [r0, #14]
 80073ae:	6183      	str	r3, [r0, #24]
 80073b0:	4619      	mov	r1, r3
 80073b2:	2208      	movs	r2, #8
 80073b4:	305c      	adds	r0, #92	; 0x5c
 80073b6:	f7fd fbb1 	bl	8004b1c <memset>
 80073ba:	4b05      	ldr	r3, [pc, #20]	; (80073d0 <std+0x38>)
 80073bc:	6224      	str	r4, [r4, #32]
 80073be:	6263      	str	r3, [r4, #36]	; 0x24
 80073c0:	4b04      	ldr	r3, [pc, #16]	; (80073d4 <std+0x3c>)
 80073c2:	62a3      	str	r3, [r4, #40]	; 0x28
 80073c4:	4b04      	ldr	r3, [pc, #16]	; (80073d8 <std+0x40>)
 80073c6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80073c8:	4b04      	ldr	r3, [pc, #16]	; (80073dc <std+0x44>)
 80073ca:	6323      	str	r3, [r4, #48]	; 0x30
 80073cc:	bd10      	pop	{r4, pc}
 80073ce:	bf00      	nop
 80073d0:	080076e9 	.word	0x080076e9
 80073d4:	0800770b 	.word	0x0800770b
 80073d8:	08007743 	.word	0x08007743
 80073dc:	08007767 	.word	0x08007767

080073e0 <_cleanup_r>:
 80073e0:	4901      	ldr	r1, [pc, #4]	; (80073e8 <_cleanup_r+0x8>)
 80073e2:	f000 b8af 	b.w	8007544 <_fwalk_reent>
 80073e6:	bf00      	nop
 80073e8:	08007321 	.word	0x08007321

080073ec <__sfmoreglue>:
 80073ec:	b570      	push	{r4, r5, r6, lr}
 80073ee:	2568      	movs	r5, #104	; 0x68
 80073f0:	1e4a      	subs	r2, r1, #1
 80073f2:	4355      	muls	r5, r2
 80073f4:	460e      	mov	r6, r1
 80073f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80073fa:	f7ff fa89 	bl	8006910 <_malloc_r>
 80073fe:	4604      	mov	r4, r0
 8007400:	b140      	cbz	r0, 8007414 <__sfmoreglue+0x28>
 8007402:	2100      	movs	r1, #0
 8007404:	e9c0 1600 	strd	r1, r6, [r0]
 8007408:	300c      	adds	r0, #12
 800740a:	60a0      	str	r0, [r4, #8]
 800740c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007410:	f7fd fb84 	bl	8004b1c <memset>
 8007414:	4620      	mov	r0, r4
 8007416:	bd70      	pop	{r4, r5, r6, pc}

08007418 <__sfp_lock_acquire>:
 8007418:	4801      	ldr	r0, [pc, #4]	; (8007420 <__sfp_lock_acquire+0x8>)
 800741a:	f000 b8b3 	b.w	8007584 <__retarget_lock_acquire_recursive>
 800741e:	bf00      	nop
 8007420:	200003c4 	.word	0x200003c4

08007424 <__sfp_lock_release>:
 8007424:	4801      	ldr	r0, [pc, #4]	; (800742c <__sfp_lock_release+0x8>)
 8007426:	f000 b8ae 	b.w	8007586 <__retarget_lock_release_recursive>
 800742a:	bf00      	nop
 800742c:	200003c4 	.word	0x200003c4

08007430 <__sinit_lock_acquire>:
 8007430:	4801      	ldr	r0, [pc, #4]	; (8007438 <__sinit_lock_acquire+0x8>)
 8007432:	f000 b8a7 	b.w	8007584 <__retarget_lock_acquire_recursive>
 8007436:	bf00      	nop
 8007438:	200003bf 	.word	0x200003bf

0800743c <__sinit_lock_release>:
 800743c:	4801      	ldr	r0, [pc, #4]	; (8007444 <__sinit_lock_release+0x8>)
 800743e:	f000 b8a2 	b.w	8007586 <__retarget_lock_release_recursive>
 8007442:	bf00      	nop
 8007444:	200003bf 	.word	0x200003bf

08007448 <__sinit>:
 8007448:	b510      	push	{r4, lr}
 800744a:	4604      	mov	r4, r0
 800744c:	f7ff fff0 	bl	8007430 <__sinit_lock_acquire>
 8007450:	69a3      	ldr	r3, [r4, #24]
 8007452:	b11b      	cbz	r3, 800745c <__sinit+0x14>
 8007454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007458:	f7ff bff0 	b.w	800743c <__sinit_lock_release>
 800745c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007460:	6523      	str	r3, [r4, #80]	; 0x50
 8007462:	4b13      	ldr	r3, [pc, #76]	; (80074b0 <__sinit+0x68>)
 8007464:	4a13      	ldr	r2, [pc, #76]	; (80074b4 <__sinit+0x6c>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	62a2      	str	r2, [r4, #40]	; 0x28
 800746a:	42a3      	cmp	r3, r4
 800746c:	bf08      	it	eq
 800746e:	2301      	moveq	r3, #1
 8007470:	4620      	mov	r0, r4
 8007472:	bf08      	it	eq
 8007474:	61a3      	streq	r3, [r4, #24]
 8007476:	f000 f81f 	bl	80074b8 <__sfp>
 800747a:	6060      	str	r0, [r4, #4]
 800747c:	4620      	mov	r0, r4
 800747e:	f000 f81b 	bl	80074b8 <__sfp>
 8007482:	60a0      	str	r0, [r4, #8]
 8007484:	4620      	mov	r0, r4
 8007486:	f000 f817 	bl	80074b8 <__sfp>
 800748a:	2200      	movs	r2, #0
 800748c:	2104      	movs	r1, #4
 800748e:	60e0      	str	r0, [r4, #12]
 8007490:	6860      	ldr	r0, [r4, #4]
 8007492:	f7ff ff81 	bl	8007398 <std>
 8007496:	2201      	movs	r2, #1
 8007498:	2109      	movs	r1, #9
 800749a:	68a0      	ldr	r0, [r4, #8]
 800749c:	f7ff ff7c 	bl	8007398 <std>
 80074a0:	2202      	movs	r2, #2
 80074a2:	2112      	movs	r1, #18
 80074a4:	68e0      	ldr	r0, [r4, #12]
 80074a6:	f7ff ff77 	bl	8007398 <std>
 80074aa:	2301      	movs	r3, #1
 80074ac:	61a3      	str	r3, [r4, #24]
 80074ae:	e7d1      	b.n	8007454 <__sinit+0xc>
 80074b0:	08007dc4 	.word	0x08007dc4
 80074b4:	080073e1 	.word	0x080073e1

080074b8 <__sfp>:
 80074b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ba:	4607      	mov	r7, r0
 80074bc:	f7ff ffac 	bl	8007418 <__sfp_lock_acquire>
 80074c0:	4b1e      	ldr	r3, [pc, #120]	; (800753c <__sfp+0x84>)
 80074c2:	681e      	ldr	r6, [r3, #0]
 80074c4:	69b3      	ldr	r3, [r6, #24]
 80074c6:	b913      	cbnz	r3, 80074ce <__sfp+0x16>
 80074c8:	4630      	mov	r0, r6
 80074ca:	f7ff ffbd 	bl	8007448 <__sinit>
 80074ce:	3648      	adds	r6, #72	; 0x48
 80074d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80074d4:	3b01      	subs	r3, #1
 80074d6:	d503      	bpl.n	80074e0 <__sfp+0x28>
 80074d8:	6833      	ldr	r3, [r6, #0]
 80074da:	b30b      	cbz	r3, 8007520 <__sfp+0x68>
 80074dc:	6836      	ldr	r6, [r6, #0]
 80074de:	e7f7      	b.n	80074d0 <__sfp+0x18>
 80074e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80074e4:	b9d5      	cbnz	r5, 800751c <__sfp+0x64>
 80074e6:	4b16      	ldr	r3, [pc, #88]	; (8007540 <__sfp+0x88>)
 80074e8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80074ec:	60e3      	str	r3, [r4, #12]
 80074ee:	6665      	str	r5, [r4, #100]	; 0x64
 80074f0:	f000 f847 	bl	8007582 <__retarget_lock_init_recursive>
 80074f4:	f7ff ff96 	bl	8007424 <__sfp_lock_release>
 80074f8:	2208      	movs	r2, #8
 80074fa:	4629      	mov	r1, r5
 80074fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007500:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007504:	6025      	str	r5, [r4, #0]
 8007506:	61a5      	str	r5, [r4, #24]
 8007508:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800750c:	f7fd fb06 	bl	8004b1c <memset>
 8007510:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007514:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007518:	4620      	mov	r0, r4
 800751a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800751c:	3468      	adds	r4, #104	; 0x68
 800751e:	e7d9      	b.n	80074d4 <__sfp+0x1c>
 8007520:	2104      	movs	r1, #4
 8007522:	4638      	mov	r0, r7
 8007524:	f7ff ff62 	bl	80073ec <__sfmoreglue>
 8007528:	4604      	mov	r4, r0
 800752a:	6030      	str	r0, [r6, #0]
 800752c:	2800      	cmp	r0, #0
 800752e:	d1d5      	bne.n	80074dc <__sfp+0x24>
 8007530:	f7ff ff78 	bl	8007424 <__sfp_lock_release>
 8007534:	230c      	movs	r3, #12
 8007536:	603b      	str	r3, [r7, #0]
 8007538:	e7ee      	b.n	8007518 <__sfp+0x60>
 800753a:	bf00      	nop
 800753c:	08007dc4 	.word	0x08007dc4
 8007540:	ffff0001 	.word	0xffff0001

08007544 <_fwalk_reent>:
 8007544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007548:	4606      	mov	r6, r0
 800754a:	4688      	mov	r8, r1
 800754c:	2700      	movs	r7, #0
 800754e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007552:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007556:	f1b9 0901 	subs.w	r9, r9, #1
 800755a:	d505      	bpl.n	8007568 <_fwalk_reent+0x24>
 800755c:	6824      	ldr	r4, [r4, #0]
 800755e:	2c00      	cmp	r4, #0
 8007560:	d1f7      	bne.n	8007552 <_fwalk_reent+0xe>
 8007562:	4638      	mov	r0, r7
 8007564:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007568:	89ab      	ldrh	r3, [r5, #12]
 800756a:	2b01      	cmp	r3, #1
 800756c:	d907      	bls.n	800757e <_fwalk_reent+0x3a>
 800756e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007572:	3301      	adds	r3, #1
 8007574:	d003      	beq.n	800757e <_fwalk_reent+0x3a>
 8007576:	4629      	mov	r1, r5
 8007578:	4630      	mov	r0, r6
 800757a:	47c0      	blx	r8
 800757c:	4307      	orrs	r7, r0
 800757e:	3568      	adds	r5, #104	; 0x68
 8007580:	e7e9      	b.n	8007556 <_fwalk_reent+0x12>

08007582 <__retarget_lock_init_recursive>:
 8007582:	4770      	bx	lr

08007584 <__retarget_lock_acquire_recursive>:
 8007584:	4770      	bx	lr

08007586 <__retarget_lock_release_recursive>:
 8007586:	4770      	bx	lr

08007588 <__swhatbuf_r>:
 8007588:	b570      	push	{r4, r5, r6, lr}
 800758a:	460e      	mov	r6, r1
 800758c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007590:	4614      	mov	r4, r2
 8007592:	2900      	cmp	r1, #0
 8007594:	461d      	mov	r5, r3
 8007596:	b096      	sub	sp, #88	; 0x58
 8007598:	da07      	bge.n	80075aa <__swhatbuf_r+0x22>
 800759a:	2300      	movs	r3, #0
 800759c:	602b      	str	r3, [r5, #0]
 800759e:	89b3      	ldrh	r3, [r6, #12]
 80075a0:	061a      	lsls	r2, r3, #24
 80075a2:	d410      	bmi.n	80075c6 <__swhatbuf_r+0x3e>
 80075a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075a8:	e00e      	b.n	80075c8 <__swhatbuf_r+0x40>
 80075aa:	466a      	mov	r2, sp
 80075ac:	f000 f902 	bl	80077b4 <_fstat_r>
 80075b0:	2800      	cmp	r0, #0
 80075b2:	dbf2      	blt.n	800759a <__swhatbuf_r+0x12>
 80075b4:	9a01      	ldr	r2, [sp, #4]
 80075b6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80075ba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80075be:	425a      	negs	r2, r3
 80075c0:	415a      	adcs	r2, r3
 80075c2:	602a      	str	r2, [r5, #0]
 80075c4:	e7ee      	b.n	80075a4 <__swhatbuf_r+0x1c>
 80075c6:	2340      	movs	r3, #64	; 0x40
 80075c8:	2000      	movs	r0, #0
 80075ca:	6023      	str	r3, [r4, #0]
 80075cc:	b016      	add	sp, #88	; 0x58
 80075ce:	bd70      	pop	{r4, r5, r6, pc}

080075d0 <__smakebuf_r>:
 80075d0:	898b      	ldrh	r3, [r1, #12]
 80075d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80075d4:	079d      	lsls	r5, r3, #30
 80075d6:	4606      	mov	r6, r0
 80075d8:	460c      	mov	r4, r1
 80075da:	d507      	bpl.n	80075ec <__smakebuf_r+0x1c>
 80075dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80075e0:	6023      	str	r3, [r4, #0]
 80075e2:	6123      	str	r3, [r4, #16]
 80075e4:	2301      	movs	r3, #1
 80075e6:	6163      	str	r3, [r4, #20]
 80075e8:	b002      	add	sp, #8
 80075ea:	bd70      	pop	{r4, r5, r6, pc}
 80075ec:	466a      	mov	r2, sp
 80075ee:	ab01      	add	r3, sp, #4
 80075f0:	f7ff ffca 	bl	8007588 <__swhatbuf_r>
 80075f4:	9900      	ldr	r1, [sp, #0]
 80075f6:	4605      	mov	r5, r0
 80075f8:	4630      	mov	r0, r6
 80075fa:	f7ff f989 	bl	8006910 <_malloc_r>
 80075fe:	b948      	cbnz	r0, 8007614 <__smakebuf_r+0x44>
 8007600:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007604:	059a      	lsls	r2, r3, #22
 8007606:	d4ef      	bmi.n	80075e8 <__smakebuf_r+0x18>
 8007608:	f023 0303 	bic.w	r3, r3, #3
 800760c:	f043 0302 	orr.w	r3, r3, #2
 8007610:	81a3      	strh	r3, [r4, #12]
 8007612:	e7e3      	b.n	80075dc <__smakebuf_r+0xc>
 8007614:	4b0d      	ldr	r3, [pc, #52]	; (800764c <__smakebuf_r+0x7c>)
 8007616:	62b3      	str	r3, [r6, #40]	; 0x28
 8007618:	89a3      	ldrh	r3, [r4, #12]
 800761a:	6020      	str	r0, [r4, #0]
 800761c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007620:	81a3      	strh	r3, [r4, #12]
 8007622:	9b00      	ldr	r3, [sp, #0]
 8007624:	6120      	str	r0, [r4, #16]
 8007626:	6163      	str	r3, [r4, #20]
 8007628:	9b01      	ldr	r3, [sp, #4]
 800762a:	b15b      	cbz	r3, 8007644 <__smakebuf_r+0x74>
 800762c:	4630      	mov	r0, r6
 800762e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007632:	f000 f8d1 	bl	80077d8 <_isatty_r>
 8007636:	b128      	cbz	r0, 8007644 <__smakebuf_r+0x74>
 8007638:	89a3      	ldrh	r3, [r4, #12]
 800763a:	f023 0303 	bic.w	r3, r3, #3
 800763e:	f043 0301 	orr.w	r3, r3, #1
 8007642:	81a3      	strh	r3, [r4, #12]
 8007644:	89a0      	ldrh	r0, [r4, #12]
 8007646:	4305      	orrs	r5, r0
 8007648:	81a5      	strh	r5, [r4, #12]
 800764a:	e7cd      	b.n	80075e8 <__smakebuf_r+0x18>
 800764c:	080073e1 	.word	0x080073e1

08007650 <_malloc_usable_size_r>:
 8007650:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007654:	1f18      	subs	r0, r3, #4
 8007656:	2b00      	cmp	r3, #0
 8007658:	bfbc      	itt	lt
 800765a:	580b      	ldrlt	r3, [r1, r0]
 800765c:	18c0      	addlt	r0, r0, r3
 800765e:	4770      	bx	lr

08007660 <_raise_r>:
 8007660:	291f      	cmp	r1, #31
 8007662:	b538      	push	{r3, r4, r5, lr}
 8007664:	4604      	mov	r4, r0
 8007666:	460d      	mov	r5, r1
 8007668:	d904      	bls.n	8007674 <_raise_r+0x14>
 800766a:	2316      	movs	r3, #22
 800766c:	6003      	str	r3, [r0, #0]
 800766e:	f04f 30ff 	mov.w	r0, #4294967295
 8007672:	bd38      	pop	{r3, r4, r5, pc}
 8007674:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007676:	b112      	cbz	r2, 800767e <_raise_r+0x1e>
 8007678:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800767c:	b94b      	cbnz	r3, 8007692 <_raise_r+0x32>
 800767e:	4620      	mov	r0, r4
 8007680:	f000 f830 	bl	80076e4 <_getpid_r>
 8007684:	462a      	mov	r2, r5
 8007686:	4601      	mov	r1, r0
 8007688:	4620      	mov	r0, r4
 800768a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800768e:	f000 b817 	b.w	80076c0 <_kill_r>
 8007692:	2b01      	cmp	r3, #1
 8007694:	d00a      	beq.n	80076ac <_raise_r+0x4c>
 8007696:	1c59      	adds	r1, r3, #1
 8007698:	d103      	bne.n	80076a2 <_raise_r+0x42>
 800769a:	2316      	movs	r3, #22
 800769c:	6003      	str	r3, [r0, #0]
 800769e:	2001      	movs	r0, #1
 80076a0:	e7e7      	b.n	8007672 <_raise_r+0x12>
 80076a2:	2400      	movs	r4, #0
 80076a4:	4628      	mov	r0, r5
 80076a6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80076aa:	4798      	blx	r3
 80076ac:	2000      	movs	r0, #0
 80076ae:	e7e0      	b.n	8007672 <_raise_r+0x12>

080076b0 <raise>:
 80076b0:	4b02      	ldr	r3, [pc, #8]	; (80076bc <raise+0xc>)
 80076b2:	4601      	mov	r1, r0
 80076b4:	6818      	ldr	r0, [r3, #0]
 80076b6:	f7ff bfd3 	b.w	8007660 <_raise_r>
 80076ba:	bf00      	nop
 80076bc:	20000034 	.word	0x20000034

080076c0 <_kill_r>:
 80076c0:	b538      	push	{r3, r4, r5, lr}
 80076c2:	2300      	movs	r3, #0
 80076c4:	4d06      	ldr	r5, [pc, #24]	; (80076e0 <_kill_r+0x20>)
 80076c6:	4604      	mov	r4, r0
 80076c8:	4608      	mov	r0, r1
 80076ca:	4611      	mov	r1, r2
 80076cc:	602b      	str	r3, [r5, #0]
 80076ce:	f7fa fdca 	bl	8002266 <_kill>
 80076d2:	1c43      	adds	r3, r0, #1
 80076d4:	d102      	bne.n	80076dc <_kill_r+0x1c>
 80076d6:	682b      	ldr	r3, [r5, #0]
 80076d8:	b103      	cbz	r3, 80076dc <_kill_r+0x1c>
 80076da:	6023      	str	r3, [r4, #0]
 80076dc:	bd38      	pop	{r3, r4, r5, pc}
 80076de:	bf00      	nop
 80076e0:	200003b8 	.word	0x200003b8

080076e4 <_getpid_r>:
 80076e4:	f7fa bdb8 	b.w	8002258 <_getpid>

080076e8 <__sread>:
 80076e8:	b510      	push	{r4, lr}
 80076ea:	460c      	mov	r4, r1
 80076ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076f0:	f000 f894 	bl	800781c <_read_r>
 80076f4:	2800      	cmp	r0, #0
 80076f6:	bfab      	itete	ge
 80076f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80076fa:	89a3      	ldrhlt	r3, [r4, #12]
 80076fc:	181b      	addge	r3, r3, r0
 80076fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007702:	bfac      	ite	ge
 8007704:	6563      	strge	r3, [r4, #84]	; 0x54
 8007706:	81a3      	strhlt	r3, [r4, #12]
 8007708:	bd10      	pop	{r4, pc}

0800770a <__swrite>:
 800770a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800770e:	461f      	mov	r7, r3
 8007710:	898b      	ldrh	r3, [r1, #12]
 8007712:	4605      	mov	r5, r0
 8007714:	05db      	lsls	r3, r3, #23
 8007716:	460c      	mov	r4, r1
 8007718:	4616      	mov	r6, r2
 800771a:	d505      	bpl.n	8007728 <__swrite+0x1e>
 800771c:	2302      	movs	r3, #2
 800771e:	2200      	movs	r2, #0
 8007720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007724:	f000 f868 	bl	80077f8 <_lseek_r>
 8007728:	89a3      	ldrh	r3, [r4, #12]
 800772a:	4632      	mov	r2, r6
 800772c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007730:	81a3      	strh	r3, [r4, #12]
 8007732:	4628      	mov	r0, r5
 8007734:	463b      	mov	r3, r7
 8007736:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800773a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800773e:	f000 b817 	b.w	8007770 <_write_r>

08007742 <__sseek>:
 8007742:	b510      	push	{r4, lr}
 8007744:	460c      	mov	r4, r1
 8007746:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800774a:	f000 f855 	bl	80077f8 <_lseek_r>
 800774e:	1c43      	adds	r3, r0, #1
 8007750:	89a3      	ldrh	r3, [r4, #12]
 8007752:	bf15      	itete	ne
 8007754:	6560      	strne	r0, [r4, #84]	; 0x54
 8007756:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800775a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800775e:	81a3      	strheq	r3, [r4, #12]
 8007760:	bf18      	it	ne
 8007762:	81a3      	strhne	r3, [r4, #12]
 8007764:	bd10      	pop	{r4, pc}

08007766 <__sclose>:
 8007766:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800776a:	f000 b813 	b.w	8007794 <_close_r>
	...

08007770 <_write_r>:
 8007770:	b538      	push	{r3, r4, r5, lr}
 8007772:	4604      	mov	r4, r0
 8007774:	4608      	mov	r0, r1
 8007776:	4611      	mov	r1, r2
 8007778:	2200      	movs	r2, #0
 800777a:	4d05      	ldr	r5, [pc, #20]	; (8007790 <_write_r+0x20>)
 800777c:	602a      	str	r2, [r5, #0]
 800777e:	461a      	mov	r2, r3
 8007780:	f7fa fda8 	bl	80022d4 <_write>
 8007784:	1c43      	adds	r3, r0, #1
 8007786:	d102      	bne.n	800778e <_write_r+0x1e>
 8007788:	682b      	ldr	r3, [r5, #0]
 800778a:	b103      	cbz	r3, 800778e <_write_r+0x1e>
 800778c:	6023      	str	r3, [r4, #0]
 800778e:	bd38      	pop	{r3, r4, r5, pc}
 8007790:	200003b8 	.word	0x200003b8

08007794 <_close_r>:
 8007794:	b538      	push	{r3, r4, r5, lr}
 8007796:	2300      	movs	r3, #0
 8007798:	4d05      	ldr	r5, [pc, #20]	; (80077b0 <_close_r+0x1c>)
 800779a:	4604      	mov	r4, r0
 800779c:	4608      	mov	r0, r1
 800779e:	602b      	str	r3, [r5, #0]
 80077a0:	f7fa fdb4 	bl	800230c <_close>
 80077a4:	1c43      	adds	r3, r0, #1
 80077a6:	d102      	bne.n	80077ae <_close_r+0x1a>
 80077a8:	682b      	ldr	r3, [r5, #0]
 80077aa:	b103      	cbz	r3, 80077ae <_close_r+0x1a>
 80077ac:	6023      	str	r3, [r4, #0]
 80077ae:	bd38      	pop	{r3, r4, r5, pc}
 80077b0:	200003b8 	.word	0x200003b8

080077b4 <_fstat_r>:
 80077b4:	b538      	push	{r3, r4, r5, lr}
 80077b6:	2300      	movs	r3, #0
 80077b8:	4d06      	ldr	r5, [pc, #24]	; (80077d4 <_fstat_r+0x20>)
 80077ba:	4604      	mov	r4, r0
 80077bc:	4608      	mov	r0, r1
 80077be:	4611      	mov	r1, r2
 80077c0:	602b      	str	r3, [r5, #0]
 80077c2:	f7fa fdae 	bl	8002322 <_fstat>
 80077c6:	1c43      	adds	r3, r0, #1
 80077c8:	d102      	bne.n	80077d0 <_fstat_r+0x1c>
 80077ca:	682b      	ldr	r3, [r5, #0]
 80077cc:	b103      	cbz	r3, 80077d0 <_fstat_r+0x1c>
 80077ce:	6023      	str	r3, [r4, #0]
 80077d0:	bd38      	pop	{r3, r4, r5, pc}
 80077d2:	bf00      	nop
 80077d4:	200003b8 	.word	0x200003b8

080077d8 <_isatty_r>:
 80077d8:	b538      	push	{r3, r4, r5, lr}
 80077da:	2300      	movs	r3, #0
 80077dc:	4d05      	ldr	r5, [pc, #20]	; (80077f4 <_isatty_r+0x1c>)
 80077de:	4604      	mov	r4, r0
 80077e0:	4608      	mov	r0, r1
 80077e2:	602b      	str	r3, [r5, #0]
 80077e4:	f7fa fdac 	bl	8002340 <_isatty>
 80077e8:	1c43      	adds	r3, r0, #1
 80077ea:	d102      	bne.n	80077f2 <_isatty_r+0x1a>
 80077ec:	682b      	ldr	r3, [r5, #0]
 80077ee:	b103      	cbz	r3, 80077f2 <_isatty_r+0x1a>
 80077f0:	6023      	str	r3, [r4, #0]
 80077f2:	bd38      	pop	{r3, r4, r5, pc}
 80077f4:	200003b8 	.word	0x200003b8

080077f8 <_lseek_r>:
 80077f8:	b538      	push	{r3, r4, r5, lr}
 80077fa:	4604      	mov	r4, r0
 80077fc:	4608      	mov	r0, r1
 80077fe:	4611      	mov	r1, r2
 8007800:	2200      	movs	r2, #0
 8007802:	4d05      	ldr	r5, [pc, #20]	; (8007818 <_lseek_r+0x20>)
 8007804:	602a      	str	r2, [r5, #0]
 8007806:	461a      	mov	r2, r3
 8007808:	f7fa fda4 	bl	8002354 <_lseek>
 800780c:	1c43      	adds	r3, r0, #1
 800780e:	d102      	bne.n	8007816 <_lseek_r+0x1e>
 8007810:	682b      	ldr	r3, [r5, #0]
 8007812:	b103      	cbz	r3, 8007816 <_lseek_r+0x1e>
 8007814:	6023      	str	r3, [r4, #0]
 8007816:	bd38      	pop	{r3, r4, r5, pc}
 8007818:	200003b8 	.word	0x200003b8

0800781c <_read_r>:
 800781c:	b538      	push	{r3, r4, r5, lr}
 800781e:	4604      	mov	r4, r0
 8007820:	4608      	mov	r0, r1
 8007822:	4611      	mov	r1, r2
 8007824:	2200      	movs	r2, #0
 8007826:	4d05      	ldr	r5, [pc, #20]	; (800783c <_read_r+0x20>)
 8007828:	602a      	str	r2, [r5, #0]
 800782a:	461a      	mov	r2, r3
 800782c:	f7fa fd35 	bl	800229a <_read>
 8007830:	1c43      	adds	r3, r0, #1
 8007832:	d102      	bne.n	800783a <_read_r+0x1e>
 8007834:	682b      	ldr	r3, [r5, #0]
 8007836:	b103      	cbz	r3, 800783a <_read_r+0x1e>
 8007838:	6023      	str	r3, [r4, #0]
 800783a:	bd38      	pop	{r3, r4, r5, pc}
 800783c:	200003b8 	.word	0x200003b8

08007840 <_init>:
 8007840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007842:	bf00      	nop
 8007844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007846:	bc08      	pop	{r3}
 8007848:	469e      	mov	lr, r3
 800784a:	4770      	bx	lr

0800784c <_fini>:
 800784c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800784e:	bf00      	nop
 8007850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007852:	bc08      	pop	{r3}
 8007854:	469e      	mov	lr, r3
 8007856:	4770      	bx	lr
